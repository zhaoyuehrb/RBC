%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 02:25:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUCGGCAUUUCCACAGACAAGGCCUCCAGCACAGAUGGCCACAGGCCUCUCUAUACACAUUUACAGAAUUUCACAUAAAGGUUUACUCUGAA\
) } def
/len { sequence length } bind def

/coor [
[-1.57961249 348.89874268]
[-5.97836304 363.23928833]
[-1.77870905 379.09155273]
[-13.59656811 390.46127319]
[-29.27474022 385.65222168]
[-32.68486404 369.61154175]
[-20.31889915 358.84051514]
[-15.92014885 344.50000000]
[-24.12041283 337.50329590]
[-29.45261192 328.09030151]
[-31.25063133 317.38302612]
[-29.27145958 306.66827393]
[-23.72764778 297.24295044]
[-15.26482964 290.25708008]
[-4.88661957 286.57357788]
[6.16436958 286.66168213]
[12.41609764 273.02658081]
[18.66782570 259.39147949]
[24.91955376 245.75637817]
[19.51079369 231.92594910]
[25.65669632 218.00895691]
[40.20000076 212.42953491]
[46.45172882 198.79443359]
[52.70345688 185.15933228]
[58.95518494 171.52423096]
[65.20691681 157.88914490]
[71.45864105 144.25404358]
[62.76614380 137.69337463]
[55.56082916 129.43873596]
[50.16978836 119.82340240]
[46.84617615 109.24309540]
[45.75740814 98.13976288]
[46.97695541 86.98309326]
[50.48005295 76.25067902]
[56.14360428 66.40754700]
[63.75033188 57.88601303]
[72.99700165 51.06674957]
[83.50646973 46.26179123]
[94.84304047 43.70032883]
[91.40167999 29.10042763]
[87.96031952 14.50052929]
[84.51895905 -0.09936958]
[75.00002289 -14.12884331]
[85.84611511 -27.15952301]
[101.37004852 -20.34455299]
[99.11885834 -3.54072833]
[102.56021881 11.05917072]
[106.00157928 25.65906906]
[109.44293976 40.25896835]
[123.85424042 44.42001343]
[134.54817200 33.90145874]
[145.24209595 23.38290787]
[149.65495300 8.18957901]
[164.15426636 4.78088903]
[174.84819031 -5.73766279]
[172.41448975 -21.06269836]
[179.48338318 -34.87610626]
[193.33676147 -41.86634827]
[208.64772034 -39.34553528]
[219.52885437 -28.28296852]
[221.79617310 -12.93243504]
[214.57783508 0.80347466]
[200.64944458 7.64302301]
[185.36674500 4.95626402]
[174.67282104 15.47481537]
[171.02485657 29.91578865]
[155.76065063 34.07683563]
[145.06672668 44.59538651]
[134.37278748 55.11393738]
[143.49571228 64.39164734]
[150.20909119 75.45062256]
[154.18424988 87.68362427]
[155.24177551 100.42798615]
[153.35931396 113.00151825]
[148.67098999 124.73898315]
[141.45846558 135.02732849]
[132.13421631 143.33770752]
[121.21801758 149.25254822]
[109.30812836 152.48655701]
[97.04845428 152.90026855]
[85.09374237 150.50576782]
[78.84201050 164.14086914]
[72.59028625 177.77597046]
[66.33855438 191.41105652]
[60.08682632 205.04615784]
[53.83509827 218.68125916]
[59.09823608 233.34199524]
[52.56385803 247.08087158]
[38.55465317 252.00811768]
[32.30292511 265.64321899]
[26.05119514 279.27832031]
[19.79946709 292.91339111]
[30.56497955 309.46273804]
[29.48362541 329.03665161]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 8]
[2 7]
[16 92]
[17 91]
[18 90]
[19 89]
[22 86]
[23 85]
[24 84]
[25 83]
[26 82]
[27 81]
[39 49]
[40 48]
[41 47]
[42 46]
[50 69]
[51 68]
[52 67]
[54 65]
[55 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
