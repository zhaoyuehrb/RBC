%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 19:46:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCCUCCCCAGUCAUCUAGGAUUCAAUGACAGGAAGUGAAUAAGAAGAUGAGAGUGAUUCAAAUGAUUCAAAUUCCAUGACAUUGGAAAAAGGUCAUCAUAGCUCUAACUUCAAUAUACCAAUAAAAUAAUCAGCUUGC\
) } def
/len { sequence length } bind def

/coor [
[60.07065964 160.18994141]
[53.60027695 155.35563660]
[47.71008301 149.82916260]
[35.83525848 158.99369812]
[29.63753510 173.55044556]
[14.83468056 175.20112610]
[2.95985866 184.36566162]
[-8.91496372 193.53019714]
[-9.69432354 204.48112488]
[-16.27384758 212.99259949]
[-26.25738525 216.36402893]
[-36.22373962 213.69773865]
[-48.49502563 222.32418823]
[-60.76631165 230.95062256]
[-73.03759766 239.57707214]
[-85.30888367 248.20352173]
[-83.86196136 263.49411011]
[-90.26876831 277.45291138]
[-102.80590820 286.32510376]
[-118.10095215 287.72409058]
[-132.03961182 281.27355957]
[-140.87245178 268.70867920]
[-142.22349548 253.40931702]
[-135.72930908 239.49093628]
[-123.13678741 230.69752502]
[-107.83327484 229.39445496]
[-93.93532562 235.93223572]
[-81.66403961 227.30578613]
[-69.39275360 218.67935181]
[-57.12147141 210.05290222]
[-44.85018921 201.42645264]
[-38.11285019 183.35246277]
[-18.07949257 181.65536499]
[-6.20467091 172.49084473]
[5.67015123 163.32630920]
[11.01850986 149.42507935]
[26.67073059 147.11888123]
[38.54555130 137.95434570]
[29.36542702 115.09763336]
[28.39936829 90.48522186]
[35.75971603 66.97928619]
[50.59054565 47.31330872]
[71.16717529 33.77425003]
[95.09677124 27.93655586]
[119.59655762 30.47909355]
[125.14327240 16.54231071]
[130.68998718 2.60552740]
[136.23670959 -11.33125496]
[129.50497437 -23.05309677]
[130.76130676 -36.31595612]
[139.31997681 -46.26939011]
[151.86637878 -49.40406418]
[157.72221375 -63.21381378]
[163.57804871 -77.02355957]
[169.43388367 -90.83331299]
[175.28973389 -104.64305878]
[166.79672241 -113.33493042]
[161.77871704 -124.36463928]
[160.81182861 -136.40864563]
[163.98768616 -148.03047180]
[170.90515137 -157.85209656]
[180.72096252 -164.71726990]
[192.25236511 -167.82766724]
[204.11972046 -166.83566284]
[210.88487244 -180.22343445]
[217.65002441 -193.61122131]
[224.41517639 -206.99900818]
[231.18032837 -220.38679504]
[237.94548035 -233.77456665]
[230.73512268 -245.57546997]
[230.32174683 -259.29006958]
[236.70649719 -271.31213379]
[248.11708069 -278.53372192]
[261.49826050 -279.14846802]
[268.55999756 -292.38220215]
[275.62173462 -305.61593628]
[282.68347168 -318.84967041]
[289.74520874 -332.08340454]
[284.90771484 -347.12915039]
[292.20028687 -361.15036011]
[307.29632568 -365.82849121]
[321.23965454 -358.38812256]
[325.75793457 -343.24346924]
[318.17053223 -329.37957764]
[302.97894287 -325.02166748]
[295.91720581 -311.78793335]
[288.85546875 -298.55419922]
[281.79373169 -285.32046509]
[274.73199463 -272.08673096]
[282.37362671 -257.59991455]
[279.87847900 -241.24473572]
[268.02987671 -229.46182251]
[251.33325195 -227.00941467]
[244.56811523 -213.62164307]
[237.80296326 -200.23385620]
[231.03781128 -186.84606934]
[224.27265930 -173.45828247]
[217.50750732 -160.07051086]
[228.10194397 -145.47920227]
[229.90644836 -127.45318604]
[222.34463501 -110.89807892]
[207.40066528 -100.36223602]
[189.09947205 -98.78721619]
[183.24363708 -84.97747040]
[177.38780212 -71.16772461]
[171.53196716 -57.35797501]
[165.67611694 -43.54822540]
[172.64913940 -28.28423119]
[166.33724976 -12.37240314]
[150.17349243 -5.78453636]
[144.62677002 8.15224648]
[139.08006287 22.08902931]
[133.53334045 36.02581024]
[140.46621704 40.16967773]
[146.89308167 45.06167221]
[152.73361206 50.64062119]
[157.91473389 56.83676529]
[162.37168884 63.57262802]
[166.04875183 70.76398468]
[168.89991760 78.32091522]
[170.88955688 86.14891815]
[171.99278259 94.15012360]
[172.19580078 102.22447205]
[171.49606323 110.27100372]
[169.90234375 118.18910980]
[167.43455505 125.87977600]
[164.12355042 133.24684143]
[160.01072693 140.19818115]
[155.14753723 146.64686584]
[149.59477234 152.51228333]
[143.42185974 157.72108459]
[136.70600891 162.20812988]
[129.53115845 165.91731262]
[121.98706818 168.80226135]
[114.16803741 170.82688904]
[106.17185211 171.96589661]
[98.09848785 172.20503235]
[90.04890442 171.54129028]
[82.12374878 169.98300171]
[74.42212677 167.54963684]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 38]
[4 37]
[6 35]
[7 34]
[8 33]
[12 31]
[13 30]
[14 29]
[15 28]
[16 27]
[45 113]
[46 112]
[47 111]
[48 110]
[52 107]
[53 106]
[54 105]
[55 104]
[56 103]
[64 98]
[65 97]
[66 96]
[67 95]
[68 94]
[69 93]
[74 89]
[75 88]
[76 87]
[77 86]
[78 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
