%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 10:01:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAAGCAAUGGCAAGUGCUCUCCAAUAAAGUAGGGGGAGAAAGCAAACCCAAAAACCCGCUUCUAA\
) } def
/len { sequence length } bind def

/coor [
[107.25228882 289.34130859]
[101.84386444 274.79730225]
[106.04954529 259.86102295]
[118.25214386 250.27583313]
[117.55939484 235.29183960]
[116.86663818 220.30784607]
[116.17388916 205.32385254]
[99.05500031 193.29582214]
[95.44426727 172.42367554]
[107.82814026 154.91902161]
[103.72319794 140.49163818]
[99.61824799 126.06426239]
[86.69949341 122.41847229]
[77.30773926 112.82781219]
[73.93346405 99.83549500]
[77.47145081 86.88680267]
[86.98351288 77.41544342]
[83.54924774 62.81386948]
[80.11499023 48.21229935]
[76.01004791 33.78491592]
[71.24317932 19.56250381]
[66.47630310 5.34009504]
[61.70943451 -8.88231468]
[56.94256210 -23.10472488]
[41.79293823 -24.96257782]
[28.95433044 -33.21684265]
[20.97585678 -46.22863388]
[19.44164658 -61.41444778]
[24.65632057 -75.75913239]
[35.58449936 -86.41453552]
[50.05638885 -91.26502228]
[65.19857788 -89.34752655]
[78.00458527 -81.04277039]
[85.93175507 -67.99965668]
[87.40615082 -52.80791855]
[82.13502502 -38.48388290]
[71.16497040 -27.87159538]
[75.93184662 -13.64918613]
[80.69871521 0.57322371]
[85.46558380 14.79563332]
[90.23246002 29.01804352]
[94.34140015 32.02911758]
[96.38879395 37.79987717]
[94.71656036 44.77804184]
[98.15082550 59.37961197]
[101.58508301 73.98118591]
[116.56793213 79.87551117]
[125.23004150 93.44742584]
[124.26678467 109.51917267]
[114.04563141 121.95931244]
[118.15058136 136.38670349]
[122.25552368 150.81408691]
[131.94628906 152.59521484]
[140.38595581 157.59289551]
[146.55026245 165.16470337]
[149.70347595 174.35806274]
[149.48623657 184.03004456]
[145.95616150 192.98945618]
[139.57698059 200.14349365]
[131.15788269 204.63108826]
[131.85063171 219.61508179]
[132.54338074 234.59909058]
[133.23614502 249.58308411]
[146.27110291 258.00146484]
[151.83697510 272.48596191]
[147.79357910 287.46697998]
[135.69567871 297.18399048]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 63]
[5 62]
[6 61]
[7 60]
[10 52]
[11 51]
[12 50]
[17 46]
[18 45]
[19 44]
[20 41]
[21 40]
[22 39]
[23 38]
[24 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
