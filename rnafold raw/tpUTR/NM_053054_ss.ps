%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 11:55:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAGGAGGACACCAGAUACAGACUUCAGCCCCUGGCAGUCUGCCCACCUGGGUGCACUGGGACGGGUCCCCAGAUCUGCUGGAAUGAUUGUCCGGGCCCUGCAGAGCAGGGGCCCCAACAGAGUUUUUAAACCCCA\
) } def
/len { sequence length } bind def

/coor [
[-8.51834393 132.72549438]
[-15.66233635 123.70448303]
[-30.58482170 125.22744751]
[-45.50730896 126.75041199]
[-60.42979431 128.27337646]
[-75.35227966 129.79634094]
[-84.13528442 139.31706238]
[-96.65280914 140.23635864]
[-106.10629272 132.60505676]
[-119.25189209 141.40867615]
[-132.55078125 134.70130920]
[-147.50387573 135.88664246]
[-155.89363098 139.71218872]
[-162.80764771 136.92590332]
[-177.78370667 137.77301025]
[-192.75976562 138.62010193]
[-207.73582458 139.46720886]
[-217.01867676 154.96066284]
[-233.57403564 161.78137207]
[-250.77410889 157.40045166]
[-261.85275269 143.73373413]
[-276.77523804 145.25669861]
[-291.69772339 146.77966309]
[-306.62020874 148.30262756]
[-321.54269409 149.82559204]
[-336.46517944 151.34855652]
[-351.36950684 153.04005432]
[-366.25375366 154.89987183]
[-381.13803101 156.75968933]
[-396.02227783 158.61950684]
[-410.98953247 166.58303833]
[-422.78518677 154.40525818]
[-414.34869385 139.69941711]
[-397.88208008 143.73524475]
[-382.99783325 141.87542725]
[-368.11358643 140.01560974]
[-353.22933960 138.15579224]
[-346.92907715 134.17160034]
[-337.98815918 136.42607117]
[-323.06567383 134.90310669]
[-308.14318848 133.38014221]
[-293.22070312 131.85717773]
[-278.29821777 130.33421326]
[-263.37573242 128.81124878]
[-258.85113525 117.44438171]
[-249.84725952 109.05469513]
[-238.05140686 105.29914856]
[-225.71064758 106.95822906]
[-215.20382690 113.77468109]
[-208.58293152 124.49114227]
[-193.60687256 123.64404297]
[-178.63081360 122.79694366]
[-163.65473938 121.94983673]
[-148.68920898 120.93355560]
[-133.73611450 119.74822235]
[-121.66006470 111.02938080]
[-107.29163361 117.65196228]
[-93.44445801 106.92997742]
[-76.87524414 114.87385559]
[-61.95275879 113.35089111]
[-47.03027344 111.82792664]
[-32.10778809 110.30496216]
[-17.18530083 108.78199768]
[-6.57940197 93.93660736]
[11.81243515 91.43032074]
[26.49726677 103.29490662]
[41.33568954 101.09918976]
[56.17411423 98.90347290]
[71.01253510 96.70775604]
[77.00457001 78.96684265]
[93.34294128 67.52141571]
[114.50978088 67.99136353]
[120.13237000 54.08501434]
[125.75495911 40.17866898]
[131.37754822 26.27232170]
[126.46166229 11.00098991]
[135.45593262 -2.28368306]
[151.46073914 -3.39083362]
[162.19856262 8.52884960]
[159.43225098 24.33160591]
[145.28390503 31.89491272]
[139.66130066 45.80125809]
[134.03871155 59.70760727]
[128.41612244 73.61395264]
[136.30412292 86.37245178]
[151.25721741 87.55779266]
[166.21031189 88.74312592]
[176.56222534 80.95703125]
[189.04101562 82.30371094]
[196.96806335 91.51062012]
[211.89054871 93.03358459]
[226.81303406 94.55654907]
[241.73551941 96.07951355]
[253.91725159 86.37161255]
[269.02908325 88.12869263]
[278.20901489 99.80193329]
[293.13150024 101.32489777]
[308.05398560 102.84786987]
[322.97647095 104.37083435]
[337.89895630 105.89379883]
[352.82144165 107.41676331]
[367.76016235 108.77099609]
[382.71325684 109.95632935]
[397.66635132 111.14167023]
[413.93374634 106.36588287]
[423.02615356 120.67547607]
[411.79281616 133.37384033]
[396.48101807 126.09476471]
[381.52792358 124.90942383]
[366.57482910 123.72409058]
[359.59960938 126.35341644]
[351.29846191 122.33924866]
[336.37597656 120.81628418]
[321.45349121 119.29331970]
[306.53100586 117.77035522]
[291.60852051 116.24739075]
[276.68603516 114.72442627]
[265.33724976 124.30253601]
[250.18202209 122.97061157]
[240.21255493 111.00199890]
[225.29006958 109.47903442]
[210.36758423 107.95606995]
[195.44509888 106.43310547]
[179.89555359 114.49019623]
[165.02497864 103.69622040]
[150.07188416 102.51088715]
[135.11878967 101.32554626]
[130.17517090 115.98748016]
[119.64162445 126.70919800]
[105.90256500 131.61247253]
[91.84085083 130.07676697]
[80.23458099 122.79222870]
[73.20825195 111.54618073]
[58.36983109 113.74189758]
[43.53140640 115.93761444]
[28.69298363 118.13333130]
[23.54918480 128.96260071]
[13.89162540 135.86122131]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 63]
[3 62]
[4 61]
[5 60]
[6 59]
[9 57]
[11 55]
[12 54]
[14 53]
[15 52]
[16 51]
[17 50]
[21 44]
[22 43]
[23 42]
[24 41]
[25 40]
[26 39]
[27 37]
[28 36]
[29 35]
[30 34]
[66 136]
[67 135]
[68 134]
[69 133]
[72 84]
[73 83]
[74 82]
[75 81]
[85 127]
[86 126]
[87 125]
[90 123]
[91 122]
[92 121]
[93 120]
[96 117]
[97 116]
[98 115]
[99 114]
[100 113]
[101 112]
[102 110]
[103 109]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
