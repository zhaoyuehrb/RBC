%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:46:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCCCUCGCGUCCCAGGCCCCAGCCAGGGGGCCGGCCUUGUCCCGCCUCAUCCACAGAAAGGGAGGAUGGGCGAUGACAGUUGUUUCUAUGCCUUCUGACCCAGUUUCCCAGUUUAUAACUUUAUGACAAUGAGUUUCUCAAGCCCAAGGCCUUAUCUUCACCCCACAAACAAUAAAGCAAAGUAAAGAA\
) } def
/len { sequence length } bind def

/coor [
[145.41397095 265.96868896]
[142.00782776 280.57684326]
[138.72131348 295.21240234]
[135.55464172 309.87432861]
[141.08360291 325.31332397]
[130.27259827 337.64434814]
[114.24304962 334.18228149]
[109.48479462 318.48861694]
[120.89270782 306.70764160]
[124.05937958 292.04571533]
[122.39573669 284.83227539]
[127.39967346 277.17071533]
[130.80581665 262.56256104]
[124.34152222 258.75955200]
[111.29022980 266.15304565]
[111.41293335 251.15351868]
[104.94863892 247.35050964]
[93.83437347 257.42388916]
[82.72010803 267.49728394]
[71.60584259 277.57064819]
[60.49157333 287.64404297]
[49.37730789 297.71743774]
[48.85225677 313.51300049]
[37.25491714 324.24972534]
[21.46578598 323.55770874]
[10.85227489 311.84750366]
[11.71119022 296.06655884]
[23.53295326 285.57745361]
[39.30392456 286.60314941]
[50.41819000 276.52978516]
[61.53245544 266.45639038]
[72.64672089 256.38299561]
[83.76099396 246.30963135]
[94.87525940 236.23623657]
[100.50193787 222.33154297]
[99.52089691 207.36366272]
[98.53984833 192.39578247]
[97.55879974 177.42790222]
[96.57775116 162.46002197]
[95.59670258 147.49212646]
[94.61566162 132.52424622]
[74.53837585 125.36762238]
[61.58269501 106.21402740]
[62.51573181 81.29638672]
[79.09151459 60.30337143]
[65.14125061 54.79063034]
[51.19099426 49.27789307]
[37.24073792 43.76515579]
[28.09312820 43.51953506]
[23.10853386 38.04640579]
[9.25034142 32.30615234]
[-4.60785151 26.56590271]
[-18.46604538 20.82565117]
[-32.32423782 15.08539963]
[-50.51176453 17.91763496]
[-60.65457153 3.60504794]
[-75.05340576 10.12034321]
[-89.81225586 4.46773911]
[-96.17495728 -9.99917603]
[-90.36663055 -24.69743729]
[-75.83325195 -30.90682602]
[-61.19721985 -24.94342422]
[-55.14183426 -10.34521008]
[-43.91191101 -14.86843300]
[-32.23843765 -10.37717056]
[-26.58398628 1.22720623]
[-12.72579288 6.96745777]
[1.13239980 12.70770931]
[14.99059296 18.44795990]
[28.84878540 24.18821144]
[42.75347519 29.81489563]
[56.70373535 35.32763290]
[70.65399170 40.84037399]
[84.60424805 46.35311127]
[97.59463501 38.85311127]
[99.79559326 24.01546478]
[101.99654388 9.17781734]
[104.19750214 -5.65983009]
[102.35950470 -14.62425137]
[106.55777740 -20.72144890]
[109.00120544 -35.52109909]
[111.44464111 -50.32075119]
[113.88806915 -65.12039948]
[116.33150482 -79.92005157]
[118.77493286 -94.71969604]
[104.93770599 -100.68766785]
[92.93824768 -109.78851318]
[83.47145081 -121.48974609]
[77.08422089 -135.10847473]
[74.14392090 -149.85119629]
[74.81719971 -164.86010742]
[79.06059265 -179.26295471]
[86.62325287 -192.22373962]
[97.06184387 -202.99127197]
[109.76645660 -210.94267273]
[123.99629211 -215.61940002]
[138.92283630 -216.75373840]
[141.36627197 -231.55339050]
[143.80970764 -246.35304260]
[140.42424011 -262.96554565]
[155.45033264 -270.81747437]
[167.15505981 -258.55227661]
[158.60934448 -243.90960693]
[156.16592407 -229.10995483]
[153.72248840 -214.31030273]
[167.49224854 -208.43818665]
[179.46362305 -199.43562317]
[188.93812561 -187.82243347]
[195.36163330 -174.27096558]
[198.35682678 -159.56706238]
[197.74537659 -144.56459045]
[193.55847168 -130.13577271]
[186.03532410 -117.12056732]
[175.60946655 -106.27769470]
[162.88383484 -98.24044800]
[148.59580994 -93.47968292]
[133.57458496 -92.27626801]
[131.13114929 -77.47661591]
[128.68771362 -62.67696762]
[126.24428558 -47.87731934]
[123.80085754 -33.07766724]
[121.35742188 -18.27801704]
[119.03514862 -3.45887303]
[116.83419800 11.37877464]
[114.63323975 26.21642303]
[112.43228149 41.05406952]
[117.94802094 46.13605881]
[124.20578766 32.50373077]
[139.10464478 34.24278641]
[142.05450439 48.94986725]
[128.97950745 56.30003357]
[134.49523926 61.38201904]
[149.10340881 57.97587585]
[163.71156311 54.56973267]
[178.31971741 51.16358566]
[192.37210083 41.67850494]
[205.37658691 52.55598831]
[198.52420044 68.06343842]
[181.72586060 65.77174377]
[167.11770630 69.17788696]
[152.50955200 72.58403015]
[137.90139771 75.99017334]
[141.66822815 91.70200348]
[139.51799011 106.84577179]
[132.36564636 119.38472748]
[121.75713348 127.85720062]
[109.58354187 131.54319763]
[110.56459045 146.51107788]
[111.54563904 161.47897339]
[112.52668762 176.44685364]
[113.50772858 191.41473389]
[114.48877716 206.38261414]
[115.46982574 221.35050964]
[121.78485870 207.74461365]
[123.19596100 192.81112671]
[126.75111389 178.23852539]
[132.37562561 164.33294678]
[139.95130920 151.38656616]
[149.31903076 139.67137146]
[160.28196716 129.43350220]
[172.60978699 120.88803101]
[186.04347229 114.21452332]
[200.30082703 109.55316925]
[215.08226013 107.00190735]
[230.07725525 106.61434174]
[244.97076416 108.39861298]
[259.44985962 112.31723785]
[273.21035767 118.28787994]
[285.96316528 126.18509674]
[297.44033813 135.84298706]
[307.40072632 147.05862427]
[315.63510132 159.59637451]
[321.97042847 173.19282532]
[326.27362061 187.56233215]
[328.45428467 202.40296936]
[328.46655273 217.40296936]
[326.31024170 232.24716187]
[322.03060913 246.62370300]
[315.71755981 260.23052979]
[307.50375366 272.78173828]
[297.56173706 284.01370239]
[286.10043335 293.69036865]
[273.36059570 301.60848999]
[259.60989380 307.60168457]
[245.13723755 311.54403687]
[230.24667358 313.35269165]
[215.25106812 312.98971558]
[200.46546936 310.46267700]
[186.20050049 305.82470703]
[172.75588989 299.17321777]
[160.41407776 290.64797974]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[3 10]
[4 9]
[17 34]
[18 33]
[19 32]
[20 31]
[21 30]
[22 29]
[35 153]
[36 152]
[37 151]
[38 150]
[39 149]
[40 148]
[41 147]
[45 74]
[46 73]
[47 72]
[48 71]
[50 70]
[51 69]
[52 68]
[53 67]
[54 66]
[56 63]
[75 126]
[76 125]
[77 124]
[78 123]
[80 122]
[81 121]
[82 120]
[83 119]
[84 118]
[85 117]
[97 105]
[98 104]
[99 103]
[132 142]
[133 141]
[134 140]
[135 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
