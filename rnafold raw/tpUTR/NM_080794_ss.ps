%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 23:21:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGAAGAUCAAAGUAAAGCAACAGAGGAAUGUACAUCUACCUAAUAACUUUCUAAAAUUUAAAUAUGUAUAAUAAAAUAAAUGUUUUAAAUAUAA\
) } def
/len { sequence length } bind def

/coor [
[80.14288330 347.46109009]
[65.38932037 350.66030884]
[50.31978989 349.75927734]
[36.05255127 344.82485962]
[23.64632797 336.22323608]
[14.02174187 324.59265137]
[7.89300251 310.79623413]
[5.71490383 295.85775757]
[7.64907455 280.88574219]
[13.55198669 266.99118042]
[22.98560333 255.20520020]
[35.24988937 246.40237427]
[49.43475342 241.23591614]
[64.48758698 240.08923340]
[67.41394043 225.37745667]
[70.34029388 210.66567993]
[73.26664734 195.95390320]
[76.19300079 181.24212646]
[79.11936188 166.53034973]
[82.04571533 151.81855774]
[68.27012634 144.72956848]
[57.02679825 134.07086182]
[49.21302414 120.69306183]
[45.45239639 105.66381836]
[46.04504013 90.18256378]
[50.94365311 75.48480225]
[59.75730133 62.74352264]
[71.78258514 52.97556305]
[86.05981445 46.96047592]
[101.44956970 45.17830276]
[103.89299774 30.37865067]
[106.33643341 15.57900143]
[108.77986145 0.77935117]
[111.22329712 -14.02029896]
[113.66672516 -28.81994820]
[116.11016083 -43.61959839]
[102.08744812 -49.10204697]
[89.51124573 -57.38050461]
[78.93133545 -68.09307098]
[70.81022644 -80.77144623]
[65.50292969 -94.86138916]
[63.24146271 -109.74693298]
[64.12468719 -124.77735138]
[68.11399078 -139.29559326]
[75.03498840 -152.66696167]
[84.58510590 -164.30693054]
[96.34687042 -173.70664978]
[109.80609131 -180.45520020]
[124.37440491 -184.25755310]
[139.41493225 -184.94752502]
[154.27018738 -182.49490356]
[168.29074097 -177.00694275]
[180.86367798 -168.72354126]
[191.43937683 -158.00680542]
[199.55551147 -145.32524109]
[204.85725403 -131.23321533]
[207.11286926 -116.34677887]
[206.22372437 -101.31670380]
[202.22871399 -86.80004120]
[195.30245972 -73.43139648]
[185.74775696 -61.79518509]
[173.98229980 -52.40009689]
[160.52041626 -45.65684128]
[145.95060730 -41.86020660]
[130.90980530 -41.17616653]
[128.46638489 -26.37651634]
[126.02294922 -11.57686710]
[123.57951355 3.22278333]
[121.13608551 18.02243233]
[118.69264984 32.82208252]
[116.24921417 47.62173462]
[129.33694458 53.66573715]
[140.39749146 62.91141891]
[148.66659546 74.71990967]
[153.57284546 88.27524567]
[154.77723694 102.64075470]
[152.19654846 116.82379150]
[146.00909424 129.84429932]
[136.64244080 140.80259705]
[124.74379730 148.94143677]
[111.13536835 153.69845581]
[96.75749207 154.74491882]
[93.83113861 169.45669556]
[90.90478516 184.16847229]
[87.97843170 198.88024902]
[85.05207062 213.59204102]
[82.12571716 228.30381775]
[79.19936371 243.01559448]
[92.66754913 249.83546448]
[103.79553986 260.03695679]
[111.75756073 272.86303711]
[115.96279144 287.36196899]
[116.09915924 302.45779419]
[112.15655518 317.03030396]
[104.42753601 329.99816895]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 88]
[15 87]
[16 86]
[17 85]
[18 84]
[19 83]
[20 82]
[30 71]
[31 70]
[32 69]
[33 68]
[34 67]
[35 66]
[36 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
