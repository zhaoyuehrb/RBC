%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 12:17:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUGGCCCCCUCUUAUUUAUUCUACAUCCUUGGCACCCCACUUGCACUGAAAGAGGCUUUUUUUUAAAUAGAAGAAAUGAGGUUUCUUAAAGCUUAUUUUUAUAAAGCUUUUUCAUAAAACUGGUUGUAGUUGC\
) } def
/len { sequence length } bind def

/coor [
[94.05945587 287.20874023]
[88.73423767 301.29620361]
[80.50476074 313.90927124]
[69.75592041 324.45803833]
[56.99047852 332.44912720]
[42.80548096 337.50875854]
[27.86439133 339.40029907]
[12.86603165 338.03527832]
[-1.48809731 333.47753906]
[-14.52662754 325.94024658]
[-25.63972282 315.77593994]
[-34.30760193 303.46002197]
[-40.12485886 289.56851196]
[-42.81940079 274.75119019]
[-42.26520538 259.70101929]
[-38.48819351 245.12199402]
[-31.66501808 231.69596863]
[-22.11481476 220.05088806]
[-10.28426552 210.73144531]
[3.27329659 204.17350769]
[17.92375946 200.68379211]
[32.98189163 200.42555237]
[47.74340057 203.41084290]
[53.80221558 189.68893433]
[59.86103058 175.96702576]
[65.91984558 162.24511719]
[71.97866058 148.52320862]
[70.04143524 133.75511169]
[82.69364929 124.25605774]
[88.75246429 110.53414917]
[83.52178192 111.70320892]
[77.84250641 111.60450745]
[71.96701813 110.14857483]
[66.16218567 107.29157257]
[51.73479843 103.18662262]
[37.30741501 99.08168030]
[24.46360207 108.00190735]
[8.89564610 106.52788544]
[-2.04574251 95.35559845]
[-3.19437337 79.76025391]
[5.99210167 67.10550690]
[21.17610931 63.36653519]
[35.18822479 70.30876923]
[41.41235733 84.65429688]
[55.83974457 88.75923920]
[70.26712799 92.86418152]
[76.50315094 88.69741058]
[64.72341156 79.41098022]
[69.91521454 65.33812714]
[84.90364838 65.92709351]
[88.97519684 80.36385345]
[95.21121979 76.19707489]
[96.93986511 61.29701614]
[98.66851044 46.39695740]
[100.39715576 31.49689865]
[102.12580109 16.59683800]
[103.85444641 1.69677877]
[105.58309937 -13.20328140]
[107.31174469 -28.10334015]
[109.04039001 -43.00339890]
[110.76903534 -57.90346146]
[104.67366028 -72.50335693]
[113.82614136 -84.25415802]
[115.55478668 -99.15422058]
[117.28343201 -114.05428314]
[119.01207733 -128.95434570]
[107.50248718 -139.36149597]
[104.34116364 -154.55313110]
[110.74369049 -168.68774414]
[124.24817657 -176.33027649]
[139.66186523 -174.54205322]
[151.05789185 -164.01065063]
[154.05422974 -148.78561401]
[147.49873352 -134.72128296]
[133.91213989 -127.22569275]
[132.18348694 -112.32563019]
[130.45484924 -97.42557526]
[128.72619629 -82.52551270]
[134.94522095 -68.99137115]
[125.66909790 -56.17481232]
[123.94044495 -41.27475357]
[122.21179962 -26.37469482]
[120.48315430 -11.47463417]
[118.75450897 3.42542529]
[117.02586365 18.32548523]
[115.29721832 33.22554398]
[113.56857300 48.12560272]
[111.83992004 63.02566528]
[110.11127472 77.92572784]
[120.34407043 88.89340210]
[135.32806396 88.20065308]
[150.31205750 87.50789642]
[165.29605103 86.81514740]
[180.28004456 86.12239838]
[195.26403809 85.42964172]
[210.24803162 84.73689270]
[217.89126587 71.33597565]
[231.57679749 64.21490479]
[246.93763733 65.64599609]
[259.07220459 75.17259216]
[264.10839844 89.75479126]
[260.43914795 104.73945618]
[249.23536682 115.34505463]
[234.07209778 118.18735504]
[219.78788757 112.35941315]
[210.94078064 99.72088623]
[195.95678711 100.41363525]
[180.97279358 101.10639191]
[165.98880005 101.79914093]
[151.00480652 102.49189758]
[136.02081299 103.18464661]
[121.03681946 103.87739563]
[136.03503418 103.64569092]
[149.54591370 110.16152954]
[158.70265198 122.04235840]
[161.56233215 136.76724243]
[157.51817322 151.21177673]
[147.42828369 162.31106567]
[133.43359375 167.70999146]
[118.50354767 166.26300049]
[105.80609131 158.27711487]
[98.03542328 145.44680786]
[96.84036255 130.49449158]
[102.47437286 116.59296417]
[96.41555786 130.31488037]
[97.91941833 146.06445312]
[85.70056915 154.58201599]
[79.64175415 168.30392456]
[73.58293915 182.02583313]
[67.52412415 195.74774170]
[61.46530914 209.46965027]
[73.61622620 218.36735535]
[83.56997681 229.66943359]
[90.86100769 242.84725952]
[95.14830017 257.28448486]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[23 131]
[24 130]
[25 129]
[26 128]
[27 127]
[29 125]
[30 124]
[34 46]
[35 45]
[36 44]
[52 89]
[53 88]
[54 87]
[55 86]
[56 85]
[57 84]
[58 83]
[59 82]
[60 81]
[61 80]
[63 78]
[64 77]
[65 76]
[66 75]
[90 112]
[91 111]
[92 110]
[93 109]
[94 108]
[95 107]
[96 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
