%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:03:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAUGAGUAUGACUUAGAGAAAACAGCUUUGCCUCAGUGUUCUCCACCCAGCUGAGAUCUGACAGGUGUAAACUACAUUGCCCUGGCAAC\
) } def
/len { sequence length } bind def

/coor [
[16.85700989 175.96603394]
[6.99895430 187.27172852]
[-2.85910082 198.57742310]
[-6.23896074 207.29570007]
[-13.25189781 210.09339905]
[-23.49019432 221.05593872]
[-33.72849274 232.01847839]
[-43.96678925 242.98101807]
[-54.20508575 253.94355774]
[-60.59725189 269.64633179]
[-77.45586395 267.85092163]
[-80.39756012 251.15412903]
[-65.16762543 243.70526123]
[-54.92932892 232.74272156]
[-44.69103241 221.78018188]
[-34.45273590 210.81764221]
[-24.21443748 199.85510254]
[-14.16479588 188.71937561]
[-4.30674124 177.41366577]
[5.55131388 166.10797119]
[1.90547359 158.72605896]
[0.48800305 150.58802795]
[1.42953479 142.35372925]
[4.66878986 134.69526672]
[9.95631695 128.24211121]
[16.87363625 123.52941132]
[24.86634254 120.95358276]
[33.28851700 120.73904419]
[41.45492935 122.91873169]
[48.69679260 127.33013916]
[60.95133972 118.67993164]
[73.20588684 110.02973175]
[85.46043396 101.37952423]
[87.35717773 80.25338745]
[86.84506226 65.26213074]
[86.33294678 50.27087784]
[85.82083130 35.27962112]
[85.30871582 20.28836632]
[84.79659271 5.29711056]
[70.80624390 -0.80476439]
[60.85538864 -12.37814903]
[56.91977692 -27.12513924]
[59.78082657 -42.11771011]
[68.87047577 -54.37907410]
[82.38396454 -61.47472763]
[97.63818359 -61.99582672]
[111.60440063 -55.83890533]
[121.50959778 -44.22642517]
[125.38710785 -29.46405220]
[122.46704102 -14.48286629]
[113.32917786 -2.25739145]
[99.78784943 4.78499365]
[100.29996490 19.77624893]
[100.81208801 34.76750565]
[101.32420349 49.75875854]
[101.83631897 64.75001526]
[102.34843445 79.74127197]
[107.33715057 65.59515381]
[120.52394867 58.44613647]
[135.10044861 61.98527908]
[143.54078674 74.38530731]
[141.48718262 89.24407196]
[129.99992371 98.88994598]
[115.00801849 98.34194183]
[128.76618958 104.31795502]
[142.52435303 110.29397583]
[156.28253174 116.26998901]
[165.61476135 116.85408020]
[170.40289307 122.69207764]
[183.94902039 129.13432312]
[197.49513245 135.57658386]
[211.04125977 142.01882935]
[225.84721375 136.49079895]
[240.19064331 143.12721252]
[245.56182861 157.99078369]
[238.77413940 172.26324463]
[223.85461426 177.47697449]
[209.65470886 170.53877258]
[204.59901428 155.56495667]
[191.05288696 149.12269592]
[177.50675964 142.68045044]
[163.96064758 136.23820496]
[150.30650330 130.02816772]
[136.54833984 124.05214691]
[122.79016876 118.07612610]
[109.03199768 112.10011292]
[94.11064148 113.63407135]
[81.85609436 122.28427887]
[69.60154724 130.93447876]
[57.34699631 139.58468628]
[56.19421005 162.47808838]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[3 18]
[5 17]
[6 16]
[7 15]
[8 14]
[9 13]
[30 90]
[31 89]
[32 88]
[33 87]
[34 57]
[35 56]
[36 55]
[37 54]
[38 53]
[39 52]
[64 86]
[65 85]
[66 84]
[67 83]
[69 82]
[70 81]
[71 80]
[72 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
