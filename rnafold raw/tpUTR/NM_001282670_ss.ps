%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:17:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCCAUCCAAGAGCCCUGCGCAGAGUGCGGCGCCCGGACACGCUCUCCCCCGCCAGCAGCCCCGCCUCUCGGCUCCCCCGCCAGCAGCCCCGCCUCUCGGCUCCCCCGCAUGCGCAUUAAAGCAGGGCGGGCUCCUGUCUGUCUCUGUGUUGUGAUGAA\
) } def
/len { sequence length } bind def

/coor [
[-75.71600342 566.05267334]
[-90.18086243 560.11114502]
[-97.39662170 546.23791504]
[-93.95620728 530.98345947]
[-81.48409271 521.55053711]
[-80.89885712 506.56195068]
[-80.31361389 491.57336426]
[-79.72837067 476.58480835]
[-79.28939056 461.59121704]
[-78.99671173 446.59408569]
[-89.39623260 457.40380859]
[-104.13619995 460.18469238]
[-117.75943756 453.90716553]
[-125.22220612 440.89535522]
[-123.76155853 425.96664429]
[-113.91826630 414.64807129]
[-99.33663177 411.13015747]
[-85.41520691 416.71530151]
[-77.30770111 429.33737183]
[-74.68696594 414.56808472]
[-72.06623077 399.79879761]
[-69.44549561 385.02951050]
[-66.82476044 370.26022339]
[-64.20402527 355.49093628]
[-61.58329010 340.72164917]
[-58.96255493 325.95236206]
[-60.90010452 318.78070068]
[-56.14390564 310.92169189]
[-53.23549271 296.20635986]
[-62.24062729 284.21020508]
[-77.18283844 282.89477539]
[-92.12504578 281.57931519]
[-107.06725311 280.26388550]
[-116.35024261 290.06469727]
[-129.39593506 292.67538452]
[-141.37925720 287.35961914]
[-147.99961853 276.27105713]
[-162.91331482 274.66433716]
[-177.82702637 273.05758667]
[-188.97787476 284.02081299]
[-204.57093811 285.19995117]
[-217.24363708 276.03826904]
[-221.01231384 260.86160278]
[-214.09751892 246.83593750]
[-199.76419067 240.58374023]
[-184.78010559 245.05712891]
[-176.22029114 258.14389038]
[-161.30659485 259.75064087]
[-146.39288330 261.35736084]
[-133.78530884 250.26135254]
[-116.71549988 251.72123718]
[-105.75182343 265.32168579]
[-90.80960846 266.63711548]
[-75.86740112 267.95254517]
[-60.92518997 269.26797485]
[-46.53346252 250.02920532]
[-25.03663445 250.12214661]
[-15.57031441 238.48646545]
[-6.10399532 226.85079956]
[3.36232376 215.21513367]
[4.96978998 195.97541809]
[23.83594894 188.96873474]
[32.84108353 176.97257996]
[41.84621429 164.97644043]
[50.85134888 152.98028564]
[59.85648346 140.98413086]
[68.86161804 128.98799133]
[77.86674500 116.99183655]
[72.62892151 105.42471313]
[73.05909729 92.73423004]
[79.06819916 81.54834747]
[89.41186523 74.18344116]
[87.65970612 59.28612518]
[85.90754700 44.38881302]
[73.34957886 34.79333878]
[71.33762360 19.11763763]
[81.06533813 6.66182566]
[96.76142883 4.81571579]
[109.11370087 14.67457104]
[110.79375458 30.38930702]
[100.80485535 42.63665009]
[102.55701447 57.53396606]
[104.30918121 72.43127441]
[109.81491089 70.04110718]
[116.17235565 68.79379272]
[126.30320740 57.73188782]
[136.43406677 46.66997910]
[146.45651245 35.50976181]
[156.36959839 24.25229073]
[151.36938477 5.83293676]
[158.36906433 -11.76274967]
[174.40083313 -21.55863190]
[192.95495605 -19.78684616]
[202.19244385 -31.60500336]
[211.42993164 -43.42316437]
[213.17871094 -59.72879791]
[228.28169250 -66.11879730]
[241.20220947 -56.01966858]
[238.64874268 -39.82053757]
[223.24807739 -34.18567657]
[214.01060486 -22.36751938]
[204.77311707 -10.54936028]
[209.84805298 -0.51973820]
[210.79414368 10.73252678]
[207.43470764 21.56710815]
[200.22352600 30.39001846]
[190.18400574 35.88809967]
[178.76400757 37.22440338]
[167.62707520 34.16537857]
[157.71398926 45.42285156]
[155.64318848 52.55717850]
[147.49597168 56.80083466]
[137.36511230 67.86273956]
[127.23426056 78.92464447]
[133.61035156 92.50203705]
[148.59251404 91.77058411]
[159.02259827 79.89672089]
[174.79905701 78.95919800]
[186.56199646 89.51424408]
[187.33265686 105.29973602]
[176.65383911 116.95041656]
[160.86108398 117.55414581]
[149.32395935 106.75274658]
[134.34179688 107.48419189]
[114.89823914 127.78327179]
[89.86289978 125.99697113]
[80.85776520 137.99311829]
[71.85263062 149.98927307]
[62.84749603 161.98541260]
[53.84236526 173.98156738]
[44.83723068 185.97772217]
[35.83209991 197.97386169]
[37.99303055 208.69891357]
[33.95083618 218.62800598]
[25.27704430 224.54565430]
[14.99799347 224.68145752]
[5.53167391 236.31712341]
[-3.93464541 247.95278931]
[-13.40096474 259.58847046]
[-8.78855801 276.89730835]
[-18.45517921 293.66235352]
[-38.52015686 299.11474609]
[-41.42856598 313.83007812]
[-44.19327164 328.57308960]
[-46.81400681 343.34237671]
[-49.43474197 358.11166382]
[-52.05547714 372.88095093]
[-54.67621231 387.65023804]
[-57.29694748 402.41952515]
[-59.91768265 417.18881226]
[-62.53841782 431.95809937]
[-63.99956894 446.88674927]
[-64.29224396 461.88391113]
[-61.31915283 470.57565308]
[-64.73979187 477.17004395]
[-65.32503510 492.15863037]
[-65.91027832 507.14718628]
[-66.49551392 522.13580322]
[-54.79688644 532.51251221]
[-52.55638123 547.98870850]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 158]
[6 157]
[7 156]
[8 155]
[9 153]
[10 152]
[19 151]
[20 150]
[21 149]
[22 148]
[23 147]
[24 146]
[25 145]
[26 144]
[28 143]
[29 142]
[30 55]
[31 54]
[32 53]
[33 52]
[37 49]
[38 48]
[39 47]
[57 139]
[58 138]
[59 137]
[60 136]
[62 132]
[63 131]
[64 130]
[65 129]
[66 128]
[67 127]
[68 126]
[72 83]
[73 82]
[74 81]
[85 114]
[86 113]
[87 112]
[88 110]
[89 109]
[93 102]
[94 101]
[95 100]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
