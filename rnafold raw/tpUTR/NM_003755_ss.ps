%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 02:25:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAGCUGCCACUGUGUACUCGGUCCGGGACCCUUGGCGACAGAAGACAGCCUCCGAGAGCGCGGGCUCCAAGGGCAAUAAAGCAGCUCCACUCUCUCUA\
) } def
/len { sequence length } bind def

/coor [
[166.70718384 456.71972656]
[170.38221741 442.01361084]
[178.86798096 429.45303345]
[191.13978577 420.55480957]
[186.99525452 406.13873291]
[182.85073853 391.72268677]
[178.70620728 377.30661011]
[174.56169128 362.89053345]
[170.41716003 348.47448730]
[155.69686890 346.07064819]
[143.42958069 337.47860718]
[136.07917786 324.35867310]
[135.15031433 309.28692627]
[140.88067627 295.24948120]
[152.18325806 285.05081177]
[148.03872681 270.63473511]
[143.89421082 256.21868896]
[132.94154358 246.12469482]
[136.56462097 230.72392273]
[132.42010498 216.30786133]
[117.51889801 204.15191650]
[122.19297028 184.66505432]
[117.16022491 170.53454590]
[112.12747192 156.40403748]
[107.09471893 142.27351379]
[102.06197357 128.14300537]
[97.02922058 114.01248932]
[86.50635529 104.80592346]
[88.84026337 91.02026367]
[82.91156769 83.83394623]
[83.87819672 76.37129211]
[72.28854370 65.60140991]
[75.75927734 51.11682129]
[71.16841888 36.83662415]
[66.57756042 22.55642700]
[61.98670197 8.27623081]
[57.39584351 -6.00396538]
[45.80619049 -16.77385330]
[49.27692795 -31.25844002]
[37.68727493 -42.02832794]
[41.15801239 -56.51291656]
[26.37392426 -61.22570801]
[17.21060562 -73.74821472]
[17.19153786 -89.26528168]
[26.32405281 -101.81027222]
[41.09651184 -106.55938721]
[55.82860184 -101.68649292]
[64.85553741 -89.06531525]
[64.70627594 -73.54895782]
[55.43820572 -61.10377502]
[66.69949341 -51.35530090]
[63.55712509 -35.84930038]
[74.81841278 -26.10082626]
[71.67604065 -10.59482384]
[76.26689911 3.68537235]
[80.85775757 17.96556854]
[85.44861603 32.24576569]
[90.03947449 46.52596283]
[101.30075836 56.27443695]
[98.15839386 71.78043365]
[102.97077942 85.98751068]
[113.49364471 95.19407654]
[111.15973663 108.97973633]
[116.19248199 123.11025238]
[121.22523499 137.24076843]
[126.25798798 151.37127686]
[131.29074097 165.50180054]
[136.32348633 179.63230896]
[146.60194397 183.82267761]
[152.66871643 192.85180664]
[152.66378784 203.50798035]
[146.83616638 212.16333008]
[150.98069763 226.57939148]
[162.22979736 237.70451355]
[158.31027222 252.07415771]
[162.45480347 266.49020386]
[166.59931946 280.90628052]
[181.59259033 283.54507446]
[193.90316772 292.39587402]
[201.12060547 305.65966797]
[201.86038208 320.68011475]
[196.02928162 334.47534180]
[184.83322144 344.32995605]
[188.97775269 358.74603271]
[193.12226868 373.16207886]
[197.26679993 387.57815552]
[201.41133118 401.99420166]
[205.55584717 416.41027832]
[220.67970276 417.43243408]
[234.54061890 423.56848145]
[245.46482849 434.07739258]
[252.13317871 447.69021606]
[253.74041748 462.76312256]
[250.09248352 477.47598267]
[241.62986755 490.05215454]
[229.37449646 498.97302246]
[214.80624390 503.16128540]
[199.68429565 502.11123657]
[185.83470154 495.94970703]
[174.92988586 485.42065430]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 88]
[5 87]
[6 86]
[7 85]
[8 84]
[9 83]
[15 77]
[16 76]
[17 75]
[19 73]
[20 72]
[22 68]
[23 67]
[24 66]
[25 65]
[26 64]
[27 63]
[29 61]
[31 60]
[33 58]
[34 57]
[35 56]
[36 55]
[37 54]
[39 52]
[41 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
