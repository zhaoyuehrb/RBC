%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:21:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUUGAUGGCUCCGAACACCCUCGAAGCGCGCCACUCGCUUCCCCCAUAGCCACCCCAGAAAUGGUGAAAAUAAAAUAAAGCAGGUUUUUCUCCUCUA\
) } def
/len { sequence length } bind def

/coor [
[137.57397461 226.50672913]
[132.49290466 212.39350891]
[127.41182709 198.28030396]
[122.33076477 184.16708374]
[117.24969482 170.05387878]
[112.16862488 155.94065857]
[93.55509186 156.88494873]
[75.62461853 151.80032349]
[60.27753830 141.22570801]
[49.14040375 126.28183746]
[35.02719116 131.36289978]
[20.91398048 136.44396973]
[10.55058098 148.39849854]
[-4.04518175 145.42982483]
[-18.15839386 150.51089478]
[-32.27160645 155.59196472]
[-38.77311707 169.99702454]
[-53.58563614 175.50744629]
[-67.92115784 168.85400391]
[-73.27467346 153.98405457]
[-66.47003174 139.71968079]
[-51.54430771 134.52368164]
[-37.35267258 141.47874451]
[-23.23946190 136.39767456]
[-9.12625027 131.31661987]
[0.22767799 119.72552490]
[15.83291149 122.33076477]
[29.94612312 117.24969482]
[44.05933380 112.16862488]
[42.46001053 102.98280334]
[42.36870193 93.59952545]
[43.80712128 84.26628876]
[46.75638962 75.23236847]
[51.15701675 66.74221802]
[56.91000748 59.02878571]
[63.87900543 52.30718994]
[71.89349365 46.76872635]
[80.75295258 42.57543564]
[90.23184967 39.85543442]
[86.04698181 25.45102692]
[81.86211395 11.04662228]
[67.21733093 5.91730213]
[58.41209030 -6.85952711]
[58.83219147 -22.37091446]
[68.31609344 -34.65241623]
[83.21704102 -38.98154068]
[97.80532074 -33.69365692]
[106.47143555 -20.82205772]
[105.88309479 -5.31614017]
[96.26652527 6.86175537]
[100.45138550 21.26616096]
[104.63625336 35.67056656]
[119.37055969 38.48128510]
[128.56416321 26.62895966]
[137.75778198 14.77663517]
[146.95138550 2.92431021]
[142.49310303 -11.93850803]
[147.65417480 -26.57212830]
[160.45008850 -35.34962463]
[175.96052551 -34.89587402]
[188.22142029 -25.38534927]
[192.51820374 -10.47504234]
[187.19868469 4.10172939]
[174.30830383 12.73989964]
[158.80371094 12.11791611]
[149.61010742 23.97024155]
[140.41648865 35.82256699]
[131.22288513 47.67489243]
[138.14884949 52.80271530]
[144.25531006 58.83400726]
[149.42643738 65.64054871]
[153.56611633 73.07958984]
[156.59974670 80.99681854]
[158.47552490 89.22958374]
[159.16529846 97.61022949]
[158.66502380 105.96947479]
[156.99456787 114.13989258]
[154.19712830 121.95920563]
[150.33819580 129.27354431]
[145.50401306 135.94046021]
[139.79974365 141.83171082]
[133.34710693 146.83570862]
[126.28183746 150.85960388]
[131.36289978 164.97280884]
[136.44396973 179.08601379]
[141.52503967 193.19923401]
[146.60610962 207.31243896]
[151.68717957 221.42565918]
[166.87428284 222.94711304]
[179.89276123 230.91467285]
[188.15779114 243.74635315]
[190.02836609 258.89440918]
[185.13304138 273.35119629]
[174.44383240 284.24630737]
[160.08305359 289.41650391]
[144.90206909 287.83523560]
[131.91506958 279.81649780]
[123.70062256 266.95236206]
[121.88972473 251.79704285]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 88]
[2 87]
[3 86]
[4 85]
[5 84]
[6 83]
[10 29]
[11 28]
[12 27]
[14 25]
[15 24]
[16 23]
[39 52]
[40 51]
[41 50]
[53 68]
[54 67]
[55 66]
[56 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
