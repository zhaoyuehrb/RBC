%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 14:06:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUAGAAUUAAUUUCCCUAAAGUGAAUGGUCAUUGUCUAAUGAUUCGAUGCGCUACAGUCUACAGUGUUAGGG\
) } def
/len { sequence length } bind def

/coor [
[69.63272095 198.58403015]
[68.06676483 213.66128540]
[61.43573380 227.29232788]
[50.54035187 237.83113098]
[36.69629288 244.00509644]
[21.57529449 245.06867981]
[7.00329018 240.89346313]
[-5.26007891 231.98359680]
[-13.73395157 219.41502380]
[-17.39506721 204.70542908]
[-15.80132675 189.63108826]
[-9.14518261 176.01228333]
[1.76960194 165.49357605]
[15.62501526 159.34513855]
[30.74794769 158.30941772]
[45.31223297 162.51148987]
[54.12901306 150.37623596]
[62.94578934 138.24098206]
[71.76256561 126.10572815]
[80.57934570 113.97047424]
[89.39612579 101.83522034]
[94.62471008 87.77598572]
[95.87987518 72.82859802]
[97.13504028 57.88120270]
[98.39021301 42.93381119]
[84.42634583 31.76576042]
[79.78177643 14.65785980]
[86.07106781 -1.75194442]
[100.70234680 -11.20679665]
[100.70234680 -26.20679665]
[100.70234680 -41.20679474]
[100.70234680 -56.20679474]
[100.70234680 -71.20679474]
[100.70234680 -86.20679474]
[100.70234680 -101.20679474]
[92.03864288 -115.13059998]
[100.00276947 -129.46603394]
[116.40191650 -129.46603394]
[124.36604309 -115.13059998]
[115.70234680 -101.20679474]
[115.70234680 -86.20679474]
[115.70234680 -71.20679474]
[115.70234680 -56.20679474]
[115.70234680 -41.20679474]
[115.70234680 -26.20679665]
[115.70234680 -11.20679665]
[126.74402618 -5.41467762]
[134.22431946 4.65239859]
[136.61158752 17.03973389]
[133.37084961 29.30749130]
[125.08210754 39.01123428]
[113.33760071 44.18897629]
[112.08243561 59.13637161]
[110.82727051 74.08376312]
[109.57209778 89.03115845]
[121.05334473 79.37812805]
[135.40487671 75.01535034]
[150.31605530 76.64524078]
[163.38618469 84.00537109]
[172.51097107 95.91076660]
[176.22129822 110.44464111]
[173.91979980 125.26702881]
[165.97702026 137.99150085]
[153.67176819 146.56942749]
[138.98518372 149.61972046]
[124.28183746 146.65130615]
[111.92897034 138.14210510]
[103.91541290 125.46208191]
[101.53137970 110.65200043]
[92.71459961 122.78725433]
[83.89782715 134.92250061]
[75.08104706 147.05775452]
[66.26426697 159.19302368]
[57.44748688 171.32827759]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 74]
[17 73]
[18 72]
[19 71]
[20 70]
[21 69]
[22 55]
[23 54]
[24 53]
[25 52]
[29 46]
[30 45]
[31 44]
[32 43]
[33 42]
[34 41]
[35 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
