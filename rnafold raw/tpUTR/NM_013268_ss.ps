%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 09:47:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAGAUGAUCACACUCCUCAUUGUUGAGGAAUCCCUCUUUCUACCUGACCAUGGGAUUCCCAGAACCUGCUAACAGAAUAAUCCCUGCUCACAUUUUCCCCUACACUUUGUCAUUAAAACAGCACGAAAACUCA\
) } def
/len { sequence length } bind def

/coor [
[208.29627991 213.77497864]
[197.44752502 203.41619873]
[186.59877014 193.05740356]
[175.75000000 182.69862366]
[164.90124512 172.33984375]
[154.05247498 161.98106384]
[143.20372009 151.62228394]
[132.35494995 141.26350403]
[122.11359406 148.08653259]
[110.46038818 152.38505554]
[98.01375580 153.87431335]
[85.44753265 152.42012024]
[73.45446777 148.04911804]
[62.70806503 140.95018005]
[53.82476425 131.46681213]
[47.32870102 120.08076477]
[34.05926514 127.07520294]
[20.78983498 134.06964111]
[7.52040148 141.06407166]
[-5.74903154 148.05851746]
[-19.01846504 155.05294800]
[-27.29601479 169.20971680]
[-43.69119263 168.84898376]
[-51.33804703 154.34182739]
[-42.37014771 140.61196899]
[-26.01290131 141.78352356]
[-12.74346924 134.78907776]
[0.52596402 127.79464722]
[13.79539680 120.80020905]
[27.06482887 113.80577087]
[40.33426285 106.81133270]
[40.50750732 91.81233215]
[27.40317154 84.51326752]
[14.29883671 77.21419525]
[1.19450057 69.91513062]
[-11.90983486 62.61606216]
[-25.08905029 70.37850952]
[-40.28384399 70.50120544]
[-53.41265869 63.05133057]
[-60.99899673 50.11674500]
[-61.09181213 35.22188187]
[-74.19615173 27.92281532]
[-89.95816040 30.91255569]
[-102.02865601 20.34455490]
[-101.14819336 4.32568121]
[-87.99217224 -4.85575819]
[-72.65278625 -0.15654814]
[-66.89707947 14.81847954]
[-53.79274368 22.11754608]
[-41.08001328 14.35532475]
[-26.08911896 13.99617863]
[-12.84367847 21.23666954]
[-4.94896746 34.22013474]
[-4.61076832 49.51172638]
[8.49356747 56.81079483]
[21.59790421 64.10986328]
[34.70223999 71.40892792]
[47.80657578 78.70800018]
[55.05875778 67.62886047]
[64.55124664 58.73222351]
[75.67352295 52.44123077]
[87.74356842 49.01667786]
[86.35954285 34.08066177]
[84.97551727 19.14465141]
[77.49352264 3.93097138]
[90.04141998 -7.47019291]
[104.47062683 1.43117428]
[99.91152954 17.76062584]
[101.29555511 32.69664001]
[102.67958069 47.63265228]
[107.15785217 48.05498505]
[111.58345032 48.85957336]
[115.92380524 50.04049683]
[120.14698029 51.58906555]
[124.22190094 53.49388123]
[132.98251343 41.31802368]
[141.74313354 29.14216423]
[136.75227356 14.44962025]
[141.38278198 -0.36044443]
[153.85414124 -9.59325600]
[169.37086487 -9.69861126]
[181.96644592 -0.63599747]
[186.79762268 14.10982418]
[182.00672913 28.86878586]
[169.43594360 37.96576309]
[153.91900635 37.90278625]
[145.15838623 50.07864380]
[136.39776611 62.25450134]
[145.52816772 73.98644257]
[150.99908447 87.80931091]
[152.37075806 102.61206055]
[149.53294373 117.20484924]
[142.71372986 130.41473389]
[153.56250000 140.77351379]
[164.41125488 151.13230896]
[175.26002502 161.49108887]
[186.10877991 171.84986877]
[196.95755005 182.20864868]
[207.80630493 192.56742859]
[218.65507507 202.92620850]
[230.68453979 193.90725708]
[244.03450012 186.99142456]
[258.34072876 182.36738586]
[273.21295166 180.16130066]
[288.24545288 180.43334961]
[303.02810669 183.17608643]
[317.15765381 188.31471252]
[330.24865723 195.70904541]
[341.94390869 205.15734863]
[351.92443848 216.40187073]
[359.91790771 229.13584900]
[365.70626831 243.01188660]
[369.13162231 257.65145874]
[370.10052490 272.65515137]
[368.58651733 287.61367798]
[364.63092041 302.11895752]
[358.34167480 315.77526855]
[349.89028931 328.21008301]
[339.50735474 339.08410645]
[327.47616577 348.10076904]
[314.12487793 355.01400757]
[299.81774902 359.63528442]
[284.94509888 361.83850098]
[269.91265869 361.56356812]
[255.13052368 358.81799316]
[241.00195312 353.67663574]
[227.91239929 346.27978516]
[216.21894836 336.82922363]
[206.24060059 325.58279419]
[198.24957275 312.84725952]
[192.46388245 298.97012329]
[189.04135132 284.32989502]
[188.07534790 269.32598877]
[189.59222412 254.36775208]
[193.55061340 239.86323547]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 100]
[2 99]
[3 98]
[4 97]
[5 96]
[6 95]
[7 94]
[8 93]
[16 31]
[17 30]
[18 29]
[19 28]
[20 27]
[21 26]
[32 58]
[33 57]
[34 56]
[35 55]
[36 54]
[41 49]
[42 48]
[62 70]
[63 69]
[64 68]
[75 88]
[76 87]
[77 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
