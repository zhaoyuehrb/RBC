%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 22:30:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGUUCCCUGUCUUCCCCGUCCUUUUCCACCAGUCUCGCCUCUGGCCUUCUCUGGCCACUCCUGGGAGGGACUGCCUCACCACCCCUGUCCCGCUGCCAGAAAUACACCCACAAUAAAAACCUGAAAACCAA\
) } def
/len { sequence length } bind def

/coor [
[-12.81050396 308.26922607]
[-19.22875977 321.82672119]
[-25.64701653 335.38424683]
[-32.06527328 348.94174194]
[-38.48353195 362.49923706]
[-30.92190742 376.04922485]
[-32.80231857 391.45193481]
[-43.40170288 402.78472900]
[-58.64438629 405.68994141]
[-72.66924286 399.05044556]
[-80.08342743 385.41925049]
[-78.03604126 370.03784180]
[-67.31433868 358.82067871]
[-52.04103851 356.08099365]
[-45.62277985 342.52349854]
[-39.20452499 328.96597290]
[-32.78626633 315.40847778]
[-26.36801147 301.85098267]
[-36.35347748 294.10076904]
[-44.59148407 284.50592041]
[-50.74748230 273.45239258]
[-54.57074356 261.38546753]
[-55.90456772 248.79180908]
[-54.69271088 236.17982483]
[-50.98173904 224.05915833]
[-44.91925812 212.92004395]
[-36.74803543 203.21354675]
[-26.79627800 195.33325195]
[-15.46446037 189.59931946]
[-3.20919538 186.24546814]
[9.47515392 185.40946960]
[22.07642174 187.12747192]
[34.08531952 191.33244324]
[42.03410721 178.61172485]
[49.98289490 165.89100647]
[39.53721619 156.45870972]
[30.84163094 145.39222717]
[24.14783287 133.01187134]
[19.64957619 119.67597961]
[17.47706223 105.77056885]
[17.69317436 91.69812775]
[20.29165649 77.86598206]
[25.19729805 64.67450714]
[32.26810074 52.50553131]
[41.29940414 41.71128082]
[31.65758896 30.22061539]
[22.01577568 18.72994995]
[12.37396145 7.23928261]
[2.73214746 -4.25138426]
[-13.03186607 -5.37896633]
[-23.31809998 -17.37767220]
[-22.02391434 -33.12888336]
[-9.91712570 -43.28768539]
[5.81952143 -41.82703781]
[15.84975433 -29.61352348]
[14.22281361 -13.89319801]
[23.86462784 -2.40253162]
[33.50644302 9.08813477]
[43.14825821 20.57880211]
[52.79006958 32.06946945]
[75.72286224 20.91804695]
[100.96252441 17.28115082]
[126.11071777 21.50436211]
[148.77781677 33.18638611]
[158.68440247 21.92318726]
[168.59097290 10.65998554]
[178.49755859 -0.60321462]
[176.51336670 -19.37171173]
[188.59866333 -33.45285797]
[206.81794739 -34.30825424]
[216.18977356 -46.02016449]
[225.56159973 -57.73207474]
[234.93342590 -69.44398499]
[244.30525208 -81.15589905]
[236.65505981 -94.26463318]
[234.26075745 -109.25235748]
[237.44615173 -124.09209442]
[245.78044128 -136.77688599]
[258.13647461 -145.59123230]
[272.84323120 -149.34304810]
[287.91171265 -147.52496338]
[301.30401611 -140.38281250]
[311.20898438 -128.88255310]
[316.28701782 -114.57948303]
[315.85137939 -99.40797424]
[309.96099854 -85.41985321]
[299.41244507 -74.50689697]
[285.63235474 -68.14498901]
[270.48437500 -67.19453430]
[256.01715088 -71.78407288]
[246.64533997 -60.07215881]
[237.27351379 -48.36024857]
[227.90167236 -36.64833832]
[218.52984619 -24.93642807]
[222.23681641 -14.03368664]
[220.15765381 -2.58479118]
[212.70114136 6.50466394]
[201.65551758 10.87030315]
[189.76075745 9.30336475]
[179.85417175 20.56656456]
[169.94760132 31.82976532]
[160.04101562 43.09296799]
[166.77218628 51.16547775]
[172.42541504 60.02633667]
[176.90946960 69.53250122]
[180.15194702 79.53051758]
[182.10050964 89.85897827]
[182.72370911 100.35114288]
[182.01145935 110.83763885]
[179.97528076 121.14918518]
[176.64804077 131.11930847]
[172.08345032 140.58706665]
[166.35519409 149.39961243]
[159.55575562 157.41468811]
[151.79487610 164.50291443]
[143.19786072 170.54983521]
[133.90350342 175.45785522]
[124.06181335 179.14773560]
[113.83169556 181.55990601]
[103.37828827 182.65544128]
[92.87034607 182.41664124]
[82.47749329 180.84736633]
[72.36751556 177.97294617]
[62.70361710 173.83978271]
[54.75482941 186.56051636]
[46.80603790 199.28123474]
[58.81514359 212.12776184]
[66.82109070 227.77133179]
[70.21212006 245.00160217]
[68.73322296 262.48757935]
[62.50531769 278.88043213]
[52.01538086 292.91751099]
[38.07839966 303.51965332]
[21.77402687 309.87405396]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[3 16]
[4 15]
[5 14]
[33 126]
[34 125]
[35 124]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[64 102]
[65 101]
[66 100]
[67 99]
[70 94]
[71 93]
[72 92]
[73 91]
[74 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
