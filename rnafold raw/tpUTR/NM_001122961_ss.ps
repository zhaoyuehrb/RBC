%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 22:55:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUUGACAGAUCCCUGAACUAAUUAUAGUGAAACAUACUGCGGCCCACUUCCAUUAAAUAGAUUUGUGCAAGAUGAA\
) } def
/len { sequence length } bind def

/coor [
[103.00218964 165.22804260]
[93.32348633 153.90673828]
[98.74688721 139.04411316]
[96.34072113 124.23836517]
[93.93455505 109.43260956]
[91.23072815 94.67831421]
[88.23033905 79.98145294]
[85.22995758 65.28459167]
[82.22956848 50.58773422]
[79.22918701 35.89087677]
[76.22879791 21.19401550]
[73.22841644 6.49715567]
[60.99340439 4.06182766]
[50.39102173 -2.44483376]
[42.72295761 -12.19528675]
[38.92066956 -23.96554947]
[39.43230057 -36.28882217]
[44.16997528 -47.63827515]
[52.52375031 -56.61622238]
[63.44000626 -62.12623215]
[62.23300934 -77.07759094]
[61.02600861 -92.02895355]
[59.81901169 -106.98031616]
[46.73706436 -115.11473846]
[41.02016830 -129.22750854]
[44.66646576 -143.82780457]
[56.07427597 -153.36718750]
[54.86727524 -168.31855774]
[53.66027832 -183.26991272]
[52.45327759 -198.22126770]
[37.89681244 -202.51937866]
[25.87835312 -211.78874207]
[18.02330017 -224.77575684]
[15.39398479 -239.72402954]
[18.34600067 -254.61195374]
[26.48011208 -267.42602539]
[38.69624710 -276.43328857]
[53.34226990 -280.41552734]
[68.43743134 -278.83422852]
[81.94023895 -271.90322876]
[92.02453613 -260.55990601]
[97.32651520 -246.33831787]
[97.12911987 -231.16183472]
[91.45905304 -217.08296204]
[81.08313751 -206.00573730]
[67.40464020 -199.42826843]
[68.61163330 -184.47691345]
[69.81863403 -169.52554321]
[71.02563477 -154.57418823]
[83.81594086 -146.98828125]
[89.75707245 -133.16195679]
[86.37805939 -118.31488800]
[74.77037048 -108.18730927]
[75.97737122 -93.23595428]
[77.18436432 -78.28459167]
[78.39136505 -63.33323288]
[94.87376404 -56.60214615]
[105.91173553 -42.52836990]
[108.54521179 -24.75430870]
[102.00280762 -7.93148470]
[87.92527008 3.49677014]
[90.92565918 18.19363022]
[93.92604065 32.89049149]
[96.92642975 47.58734894]
[99.92681122 62.28421021]
[102.92720032 76.98107147]
[105.92758942 91.67792511]
[110.61491394 98.53248596]
[108.74030304 107.02644348]
[111.14647675 121.83219910]
[113.55264282 136.63795471]
[123.40345001 149.01826477]
[117.80794525 162.82186890]
[129.93206787 173.32830811]
[129.13313293 189.35145569]
[116.02401733 198.59973145]
[100.66090393 193.97863770]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 73]
[3 71]
[4 70]
[5 69]
[6 67]
[7 66]
[8 65]
[9 64]
[10 63]
[11 62]
[12 61]
[20 56]
[21 55]
[22 54]
[23 53]
[27 49]
[28 48]
[29 47]
[30 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
