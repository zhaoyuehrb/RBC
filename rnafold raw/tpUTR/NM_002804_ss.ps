%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 02:14:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCACACAGGCCAGCCCCAGUCUCACGGCUGAAGUGCGCAAUAAAAGAUGGUUUAGGGUCCCUGCC\
) } def
/len { sequence length } bind def

/coor [
[75.60226440 118.65235901]
[69.45810699 96.78240967]
[55.37613297 91.61540985]
[39.75531006 94.12547302]
[30.47220802 82.47758484]
[16.39023209 77.31057739]
[2.30825400 72.14357758]
[-7.66148806 79.35195923]
[-19.77055740 80.66991425]
[-30.83351517 75.87226868]
[-38.00008011 66.32676697]
[-39.48929214 54.60678482]
[-53.02554703 48.14382935]
[-66.56180573 41.68087387]
[-80.09806061 35.21791840]
[-93.63431549 28.75496101]
[-106.24978638 37.51541138]
[-121.55665588 38.77845764]
[-135.43745422 32.20434570]
[-144.15832520 19.56147766]
[-145.37338257 4.25072336]
[-138.75578308 -9.60940266]
[-126.08564758 -18.29059410]
[-110.77115631 -19.45765686]
[-96.93184662 -12.79665470]
[-88.29041290 -0.09936430]
[-87.17135620 15.21870613]
[-73.63510132 21.68166351]
[-60.09884644 28.14461899]
[-46.56259155 34.60757446]
[-33.02633667 41.07052994]
[-16.50178909 33.82793808]
[0.49212888 40.75582504]
[7.47525692 58.06159973]
[21.55723381 63.22860336]
[35.63920975 68.39560699]
[50.25279999 65.51596069]
[60.54313660 77.53343201]
[74.62511444 82.70043182]
[80.27256012 76.46305084]
[87.40085602 71.99247742]
[95.47490692 69.62429810]
[103.88863373 69.53627777]
[112.01045990 71.73502350]
[119.23072052 76.05549622]
[125.00742340 82.17337036]
[128.90693665 89.62940216]
[130.63653564 97.86390686]
[130.06639099 106.25875854]
[127.23931122 114.18379211]
[138.44900513 124.15086365]
[149.65872192 134.11793518]
[156.60447693 135.96992493]
[160.70907593 140.52705383]
[161.39482117 145.58206177]
[171.62193298 156.55503845]
[181.84906006 167.52799988]
[197.07138062 174.99238586]
[194.11267090 191.68617249]
[177.25224304 193.46438599]
[170.87608337 177.75512695]
[160.64897156 166.78215027]
[150.42184448 155.80918884]
[139.69165039 145.32763672]
[128.48193359 135.36056519]
[117.27223206 125.39350128]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 39]
[3 38]
[5 36]
[6 35]
[7 34]
[12 31]
[13 30]
[14 29]
[15 28]
[16 27]
[50 66]
[51 65]
[52 64]
[55 63]
[56 62]
[57 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
