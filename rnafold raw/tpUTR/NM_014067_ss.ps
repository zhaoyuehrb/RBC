%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 01:25:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCCCGCAGCCCACCCUGACCGGGACUGACCCGCCUUCGGGACCCCGCUCCCAGCUCUGAGAGGUCGCCAAAGCCUGCAGCCUGGCCUGGGCCUGGCCACCCCUUCUUUCCCUCCGCGCCCCGCCCCCGAGGAGCCUAAUAAAGAUCUCGUUGUGGCA\
) } def
/len { sequence length } bind def

/coor [
[144.13476562 243.31256104]
[137.89143372 229.67361450]
[131.64811707 216.03466797]
[125.40478516 202.39572144]
[119.16146088 188.75677490]
[112.91813660 175.11782837]
[106.54204559 161.54043579]
[100.03379059 148.02590942]
[85.21617889 145.69384766]
[74.87141418 156.55596924]
[64.52664948 167.41810608]
[54.28835297 178.38064575]
[44.15749741 189.44255066]
[34.02664185 200.50445557]
[38.06377411 215.39422607]
[33.38822937 230.09602356]
[21.49195671 239.91854858]
[6.17101526 241.72749329]
[-7.68573999 234.94561768]
[-15.65666771 221.73698425]
[-15.19827461 206.31643677]
[-6.45683193 193.60459900]
[7.77829838 187.65779114]
[22.96473694 190.37359619]
[33.09559250 179.31169128]
[43.22644806 168.24978638]
[45.43606186 161.15722656]
[53.66452026 157.07333374]
[64.00928497 146.21121216]
[74.35404968 135.34907532]
[64.57660675 129.64994812]
[56.14709473 121.21900177]
[41.23339462 122.82573700]
[26.31969643 124.43247223]
[11.40599823 126.03920746]
[-1.50967801 136.14451599]
[-16.61571693 129.76176453]
[-18.37232208 113.45696259]
[-4.97244692 104.00310516]
[9.79926395 111.12550354]
[24.71296310 109.51877594]
[39.62666321 107.91204071]
[54.54035950 106.30530548]
[55.99456406 98.94763947]
[41.27922821 96.03922272]
[29.98937225 86.16303253]
[44.18763733 81.32389069]
[58.90297699 84.23229980]
[60.35718155 76.87463379]
[47.17609024 69.71510315]
[33.99499512 62.55558014]
[17.19059753 60.30869675]
[14.69775391 43.53901672]
[30.12197685 36.50128555]
[41.15452194 49.37448883]
[54.33561325 56.53401184]
[67.51670837 63.69353867]
[77.91694641 57.10598373]
[89.52787018 53.38913727]
[101.58126831 52.72566223]
[113.29537201 55.09824371]
[115.33787537 40.23795319]
[117.38037109 25.37766457]
[111.59426117 10.65246582]
[120.99252319 -0.90270096]
[123.03502655 -15.76299000]
[125.07752228 -30.62327957]
[119.29141235 -45.34848022]
[128.68968201 -56.90364456]
[130.73217773 -71.76393127]
[132.77467346 -86.62422180]
[134.81716919 -101.48451233]
[127.64711761 -112.24581146]
[129.68675232 -124.60836029]
[139.29794312 -132.00552368]
[141.63000488 -146.82312012]
[143.96206665 -161.64073181]
[146.29412842 -176.45834351]
[148.33662415 -191.31863403]
[150.08879089 -206.21594238]
[140.09988403 -218.46328735]
[141.77995300 -234.17802429]
[154.13221741 -244.03688049]
[169.82830811 -242.19076538]
[179.55601501 -229.73495483]
[177.54406738 -214.05924988]
[164.98609924 -204.46377563]
[163.23394775 -189.56646729]
[165.47036743 -185.29455566]
[165.01142883 -179.56614685]
[161.11174011 -174.12628174]
[158.77967834 -159.30867004]
[156.44761658 -144.49105835]
[154.11555481 -129.67346191]
[161.30676270 -113.68914032]
[149.67745972 -99.44201660]
[147.63496399 -84.58172607]
[145.59246826 -69.72143555]
[143.54997253 -54.86114502]
[149.48217773 -41.19885254]
[139.93782043 -28.58078003]
[137.89530945 -13.72049046]
[135.85281372 1.13979876]
[141.78501892 14.80209064]
[132.24066162 27.42016411]
[130.19816589 42.28045273]
[128.15565491 57.14074326]
[132.94535828 62.91212463]
[141.86221313 50.85021973]
[145.39141846 36.27130508]
[157.80377197 27.84911156]
[172.65502930 29.95628738]
[182.23469543 41.49882507]
[181.56916809 56.48405075]
[171.00399780 67.13191986]
[156.02349854 67.91395569]
[142.52474976 74.45487976]
[147.31443787 80.22626495]
[162.29660034 80.95771027]
[177.27874756 81.68915558]
[193.39387512 76.42237854]
[202.91593933 90.44972992]
[192.07275391 103.48282623]
[176.54730225 96.67131042]
[161.56515503 95.93986511]
[146.58299255 95.20841980]
[144.75308228 110.80800629]
[137.93862915 124.66318512]
[127.08049774 135.26281738]
[113.54831696 141.51765442]
[120.05657959 155.03218079]
[126.63285065 161.44610596]
[126.55708313 168.87449646]
[132.80041504 182.51344299]
[139.04373169 196.15238953]
[145.28706360 209.79135132]
[151.53038025 223.43029785]
[157.77371216 237.06924438]
[172.61532593 234.39018250]
[187.65684509 235.48707581]
[201.95277405 240.29096985]
[214.60444641 248.49987793]
[224.81655884 259.59777832]
[231.94715881 272.88708496]
[235.54804993 287.53237915]
[235.39283752 302.61303711]
[231.49130249 317.18112183]
[224.08869934 330.32083130]
[213.65034485 341.20620728]
[200.83241272 349.15301514]
[186.44064331 353.66165161]
[171.37971497 354.44873047]
[156.59638977 351.46478271]
[143.01994324 344.89739990]
[131.50379944 335.15936279]
[122.77187347 322.86285400]
[117.37306976 308.78079224]
[115.64675903 293.79846191]
[117.70145416 278.85760498]
[123.40800476 264.89743042]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 138]
[2 137]
[3 136]
[4 135]
[5 134]
[6 133]
[7 131]
[8 130]
[9 30]
[10 29]
[11 28]
[12 26]
[13 25]
[14 24]
[32 43]
[33 42]
[34 41]
[35 40]
[49 57]
[50 56]
[51 55]
[61 107]
[62 106]
[63 105]
[65 103]
[66 102]
[67 101]
[69 99]
[70 98]
[71 97]
[72 96]
[75 94]
[76 93]
[77 92]
[78 91]
[79 88]
[80 87]
[118 126]
[119 125]
[120 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
