%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 14:49:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACCUCCACUGACAGAGGCGGCCCCUCCCACGGCUCCCAAUAAAAAUGUGAAAACCAACCCCCGAACGUGA\
) } def
/len { sequence length } bind def

/coor [
[82.66499329 119.07621002]
[69.78353882 126.76177979]
[61.36465073 142.97618103]
[43.94903946 142.89295959]
[31.41015816 151.12559509]
[18.87127495 159.35824585]
[6.33239317 167.59089661]
[5.73264551 183.09637451]
[-3.89288211 195.26719666]
[-18.84297943 199.42341614]
[-33.36902618 193.96690369]
[-41.88546371 180.99578857]
[-41.11754608 165.49772644]
[-31.36055565 153.43203735]
[-16.36625099 149.43823242]
[-1.90025139 155.05200195]
[10.63863087 146.81936646]
[23.17751312 138.58671570]
[35.71639633 130.35408020]
[38.57546234 118.40292358]
[49.21994400 111.48799133]
[62.09796524 113.88031769]
[74.97942352 106.19474792]
[74.49943542 96.24160767]
[77.83052063 86.85015869]
[84.47484589 79.42395782]
[93.43940735 75.07285309]
[103.38444519 74.44712067]
[112.82368469 77.64027405]
[120.34642029 84.17510223]
[134.35397339 78.80963135]
[148.36154175 73.44415283]
[162.36909485 68.07868195]
[159.50694275 53.31456375]
[159.25222778 38.27773285]
[161.61270142 23.42514610]
[166.51660156 9.20815372]
[173.81492615 -3.94120288]
[183.28587341 -15.62333107]
[194.64166260 -25.48322487]
[207.53715515 -33.22125244]
[221.58052063 -38.60226440]
[236.34495544 -41.46273804]
[251.38182068 -41.71574402]
[266.23413086 -39.35359955]
[280.45056152 -34.44808197]
[293.59909058 -27.14826584]
[305.28015137 -17.67598534]
[315.13876343 -6.31909323]
[322.87533569 6.57728910]
[328.25476074 20.62125397]
[331.11355591 35.38602448]
[331.36483765 50.42290878]
[329.00100708 65.27496338]
[324.09387207 79.49083710]
[316.79257202 92.63854218]
[307.31896973 104.31851959]
[295.96096802 114.17584229]
[283.06372070 121.91094208]
[269.01913452 127.28876495]
[254.25404358 130.14588928]
[239.21711731 130.39549255]
[224.36534119 128.02996826]
[210.15002441 123.12123108]
[197.00314331 115.81843567]
[185.32423401 106.34350586]
[175.46821594 94.98437500]
[167.73457336 82.08624268]
[153.72700500 87.45171356]
[139.71945190 92.81718445]
[125.71189117 98.18266296]
[119.33724976 117.04331970]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[4 19]
[5 18]
[6 17]
[7 16]
[30 71]
[31 70]
[32 69]
[33 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
