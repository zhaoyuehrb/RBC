%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 00:17:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCACAGAGGCUCCAAUACCUGGGAAUGUUCACAAAGUCAUCAACUGGAAAAAAAGCAAAAACCCACGGCCAAAAUAAAUUGGUACUGUUUGUUACAAA\
) } def
/len { sequence length } bind def

/coor [
[145.71669006 148.30046082]
[134.24270630 138.63880920]
[122.76871490 128.97715759]
[111.29473114 119.31549835]
[104.18002319 123.12162018]
[95.80057526 124.25659180]
[87.17304993 122.31446838]
[79.43627167 117.27894592]
[73.70193481 109.55593872]
[61.37759781 118.10642242]
[49.05326462 126.65690613]
[48.85007858 142.17265320]
[39.53881836 154.58554077]
[24.69985008 159.12258911]
[10.03906536 154.03918457]
[1.19383216 141.29000854]
[1.56532323 125.77737427]
[11.01069260 113.46621704]
[25.89800262 109.09042358]
[40.50278091 114.33256531]
[52.82711411 105.78208160]
[65.15145111 97.23159790]
[69.51966858 82.88173676]
[64.04989624 68.91457367]
[58.58012390 54.94741440]
[41.03375626 48.18507004]
[33.95081329 31.10562897]
[41.30743408 14.48562431]
[34.97991180 0.88553548]
[28.65238380 -12.71455383]
[22.32485962 -26.31464195]
[8.02747345 -25.29605103]
[-5.72194767 -29.23893547]
[-17.25816917 -37.64432144]
[-25.19137573 -49.47406769]
[-28.57459068 -63.27907181]
[-27.01668358 -77.37674713]
[-20.72747040 -90.05612946]
[-10.48972511 -99.78548431]
[-16.39122772 -113.57577515]
[-22.29273224 -127.36607361]
[-36.59053040 -134.64291382]
[-39.67451859 -150.38676453]
[-29.17892456 -162.52027893]
[-13.15507030 -161.73565674]
[-3.89508438 -148.63481140]
[-8.50243664 -133.26757812]
[-2.60093284 -119.47727966]
[3.30057096 -105.68698883]
[19.05939293 -106.13339996]
[33.83163452 -100.51827240]
[45.37076187 -89.66428375]
[51.91001129 -75.19314575]
[52.43287277 -59.28340530]
[46.83097839 -44.34243011]
[35.92494965 -32.64216995]
[42.25247192 -19.04207993]
[48.57999802 -5.44198990]
[54.90752411 8.15809917]
[66.41857147 9.70901394]
[75.79889679 16.76199150]
[80.58288574 27.61111641]
[79.44110870 39.53464890]
[72.54728699 49.47764206]
[78.01705933 63.44480133]
[83.48683167 77.41196442]
[105.75205994 74.52932739]
[121.33007050 88.47664642]
[120.95638275 107.84150696]
[132.43037415 117.50316620]
[143.90435791 127.16482544]
[155.37834167 136.82647705]
[163.37191772 133.07460022]
[172.09495544 131.94386292]
[180.71356201 133.52128601]
[188.41023254 137.63604736]
[194.46138000 143.87759399]
[198.30538940 151.63664246]
[199.59465027 160.16453552]
[198.22698975 168.64552307]
[194.35331726 176.27476501]
[203.83535767 187.89762878]
[213.31741333 199.52047729]
[228.79678345 201.26020813]
[238.24736023 213.18252563]
[236.49339294 227.92901611]
[245.97543335 239.55187988]
[261.72723389 242.59494019]
[269.04122925 256.87377930]
[262.30673218 271.43487549]
[246.68986511 275.10824585]
[234.17057800 265.07592773]
[234.35258484 249.03392029]
[224.87052917 237.41107178]
[210.07220459 236.16810608]
[200.29048157 224.51594543]
[201.69454956 209.00251770]
[192.21250916 197.37966919]
[182.73045349 185.75680542]
[160.92349243 186.21905518]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[3 70]
[4 69]
[9 22]
[10 21]
[11 20]
[23 66]
[24 65]
[25 64]
[28 59]
[29 58]
[30 57]
[31 56]
[39 49]
[40 48]
[41 47]
[81 99]
[82 98]
[83 97]
[86 94]
[87 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
