%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:42:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUCGCUACGAUUCCACACGACAGCCCUCGAGAAUUCUUUCAAGUUUUCCAAAUGUCCUCUACCGUAGAAACAUCUCAAUUAAAACAAGAGUUUCCAAACUGU\
) } def
/len { sequence length } bind def

/coor [
[113.90020752 169.44097900]
[112.43540192 147.48400879]
[119.99154663 126.77731323]
[108.54910278 117.07832336]
[94.10035706 118.16453552]
[83.04731750 108.79561615]
[81.75189972 94.36412048]
[70.30945587 84.66513062]
[58.86701202 74.96613312]
[47.42456818 65.26714325]
[35.98212433 55.56814575]
[24.90281868 62.37807846]
[12.35800838 65.73712158]
[-0.60558581 65.37571716]
[-12.90935326 61.33427811]
[-23.53253746 53.95897293]
[-31.59691811 43.87210846]
[-36.43941116 31.91962624]
[-37.66658401 19.10015678]
[-35.18659592 6.48158741]
[-29.21599007 -4.88788986]
[-39.74295807 -15.57353115]
[-50.26992798 -26.25917244]
[-60.79689407 -36.94481277]
[-73.10689545 -32.47954559]
[-86.14178467 -33.05803299]
[-97.92242432 -38.55637360]
[-106.67393494 -48.10641479]
[-111.09303284 -60.23263168]
[-110.54206848 -73.08003235]
[-105.14076996 -84.69792938]
[-115.00984955 -95.99400330]
[-124.87892914 -107.29007721]
[-134.74801636 -118.58615112]
[-144.61709595 -129.88221741]
[-154.48617554 -141.17829895]
[-164.35525513 -152.47436523]
[-180.13862610 -153.28730774]
[-190.66212463 -165.07846069]
[-189.68235779 -180.85235596]
[-177.78059387 -191.25061035]
[-162.01794434 -190.10412598]
[-151.74610901 -178.09309387]
[-153.05917358 -162.34344482]
[-143.19009399 -151.04737854]
[-133.32101440 -139.75129700]
[-123.45193481 -128.45523071]
[-113.58285522 -117.15915680]
[-103.71377563 -105.86308289]
[-93.84469604 -94.56701660]
[-77.23117828 -98.53360748]
[-60.78437424 -93.60859680]
[-48.96488190 -81.03568268]
[-45.02433777 -64.14509583]
[-50.11125565 -47.47178268]
[-39.58428574 -36.78614044]
[-29.05731773 -26.10050011]
[-18.53034782 -15.41485786]
[-2.85470438 -22.40911102]
[14.33643627 -22.95518875]
[30.48918343 -16.94579887]
[43.19401169 -5.24946404]
[50.54518509 10.41490650]
[51.42658615 27.73059464]
[45.68112183 44.12570190]
[57.12356186 53.82469559]
[68.56600952 63.52368927]
[80.00845337 73.22268677]
[91.45089722 82.92167664]
[105.89964294 81.83546448]
[116.95268250 91.20438385]
[118.24810028 105.63587952]
[129.69053650 115.33486938]
[137.35935974 109.69410706]
[145.90409851 105.50886536]
[155.05174255 102.91082001]
[164.51029968 101.98093414]
[173.97827148 102.74699402]
[183.15414429 105.18270874]
[191.74607849 109.20868683]
[199.48112488 114.69496918]
[206.11392212 121.46523285]
[211.43447876 129.30249023]
[215.27485657 137.95597839]
[217.51438904 147.14926147]
[218.08354187 156.58900452]
[216.96606445 165.97433472]
[214.19938660 175.00646973]
[209.87347412 183.39820862]
[204.12777710 190.88302612]
[197.14683533 197.22360229]
[204.45167542 210.32473755]
[211.75650024 223.42585754]
[219.06134033 236.52697754]
[233.40902710 244.46900940]
[233.43428040 260.86813354]
[219.11112976 268.85433960]
[205.17399597 260.21209717]
[205.96022034 243.83181763]
[198.65538025 230.73068237]
[191.35055542 217.62956238]
[184.04571533 204.52844238]
[162.47174072 208.05136108]
[141.28160095 202.53562927]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 73]
[4 72]
[7 69]
[8 68]
[9 67]
[10 66]
[11 65]
[21 58]
[22 57]
[23 56]
[24 55]
[31 50]
[32 49]
[33 48]
[34 47]
[35 46]
[36 45]
[37 44]
[91 102]
[92 101]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
