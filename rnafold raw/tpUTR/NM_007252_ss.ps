%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 10:14:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGAUGCCCACCCAUAAUCAGAAGCAAAAUUCACAGAAACUAAACUCCACCCUUGGGACUCCACAACAACAACAACAACAAAAUUUAAUUUAAUUUAAAAAUAG\
) } def
/len { sequence length } bind def

/coor [
[250.58593750 188.19233704]
[251.89039612 166.73742676]
[237.68049622 161.93338013]
[223.47059631 157.12933350]
[214.57418823 162.54438782]
[203.94827271 162.07116699]
[195.21160889 155.62382507]
[191.47680664 145.19259644]
[177.57646179 139.55517578]
[163.67611694 133.91777039]
[149.77577209 128.28034973]
[141.93699646 138.97042847]
[131.84970093 147.57102966]
[120.05471802 153.62101746]
[107.18447113 156.79603577]
[93.92900848 156.92582703]
[80.99906158 154.00343323]
[69.08787537 148.18554688]
[58.83410645 139.78410339]
[50.78751755 129.24957275]
[45.37954330 117.14676666]
[42.90014267 104.12461090]
[27.92648697 103.23600006]
[12.95283127 102.34739685]
[1.30300593 113.02714539]
[-14.48254299 112.25774384]
[-25.03853035 100.49565125]
[-24.10227394 84.71912384]
[-12.22923946 74.28807831]
[3.53651261 75.39108276]
[13.84144115 87.37374115]
[28.81509781 88.26234436]
[43.78875351 89.15095520]
[46.16842270 80.51750946]
[49.86537170 72.36080933]
[54.78913116 64.88043976]
[60.81921387 58.25946808]
[52.07452393 46.07216263]
[36.55750656 46.11485291]
[23.99862671 37.00144577]
[19.22703171 22.23623276]
[24.07749557 7.49674129]
[36.68491364 -1.54939532]
[52.20148087 -1.42375195]
[64.66075897 7.82535887]
[69.27189636 22.64146614]
[64.26182556 37.32747269]
[73.00651550 49.51477432]
[90.86847687 43.48432541]
[109.72070312 43.58267975]
[127.51876831 49.79916763]
[142.33258057 61.45965195]
[152.55566406 77.29961395]
[157.07939148 95.60130310]
[155.41319275 114.38000488]
[169.31353760 120.01742554]
[183.21388245 125.65483856]
[197.11422729 131.29225159]
[216.79838562 127.47640228]
[228.27465820 142.91943359]
[242.48454285 147.72348022]
[256.69442749 152.52752686]
[261.65951538 143.62863159]
[267.86889648 135.55195618]
[275.18899536 128.47004700]
[283.46240234 122.53414154]
[292.51144409 117.87079620]
[302.14187622 114.57925415]
[312.14712524 112.72933960]
[322.31265259 112.35993958]
[332.42065430 113.47821808]
[342.25460815 116.05947113]
[351.60400391 120.04766846]
[360.26885986 125.35665131]
[368.06387329 131.87203979]
[374.82250977 139.45364380]
[380.40054321 147.93853760]
[384.67904663 157.14448547]
[387.56707764 166.87394714]
[389.00347900 176.91821289]
[388.95816040 187.06199646]
[387.43289185 197.08793640]
[384.46109009 206.78135681]
[380.10717773 215.93475342]
[374.46505737 224.35234070]
[385.22766113 234.80061340]
[395.99029541 245.24887085]
[406.75289917 255.69714355]
[417.51550293 266.14541626]
[433.31234741 265.66064453]
[444.76779175 276.54861450]
[445.08551025 292.34973145]
[434.07702637 303.68942261]
[418.27346802 303.84005737]
[407.05078125 292.71231079]
[407.06723022 276.90802002]
[396.30462646 266.45974731]
[385.54202271 256.01147461]
[374.77941895 245.56321716]
[364.01678467 235.11495972]
[345.66323853 246.09071350]
[324.82070923 250.94650269]
[303.47488403 249.20989990]
[283.66241455 241.03701782]
[267.27655029 227.19853210]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 62]
[3 61]
[4 60]
[8 58]
[9 57]
[10 56]
[11 55]
[22 33]
[23 32]
[24 31]
[37 48]
[38 47]
[85 100]
[86 99]
[87 98]
[88 97]
[89 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
