%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 01:45:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACCCUCCCCGCAGCCUUCCAAGUCCAUCCCGACUCCUGGAGCCCUGACACCCCGAUCCUCCCACAAUAAAGGCUUCUCAAUCCGCA\
) } def
/len { sequence length } bind def

/coor [
[83.29562378 359.26187134]
[68.86844635 354.84384155]
[56.07685089 346.84149170]
[45.79298782 335.80044556]
[38.71802902 322.47351074]
[35.33435440 307.76931763]
[35.87267303 292.69042969]
[40.29627609 278.26498413]
[48.30355835 265.47647095]
[59.34856796 255.19686890]
[72.67823792 248.12705994]
[87.38373566 244.74905396]
[80.10041809 231.75665283]
[88.31992340 218.23814392]
[88.84929657 203.24748230]
[89.37866974 188.25682068]
[89.90804291 173.26617432]
[90.43741608 158.27551270]
[90.96678925 143.28486633]
[73.86560822 135.66751099]
[61.44913101 121.65660858]
[55.94307327 103.76365662]
[58.33441162 85.19606018]
[45.25668335 77.84941864]
[32.17895889 70.50278473]
[19.10123062 63.15614700]
[3.95427084 67.66670990]
[-9.90574169 60.07226562]
[-14.25590706 44.87846375]
[-6.51534986 31.09951782]
[8.72359467 26.91023254]
[22.41993141 34.79603577]
[26.44786644 50.07842255]
[39.52559280 57.42505646]
[52.60332108 64.77169800]
[65.68104553 72.11833191]
[75.56634521 63.14657974]
[87.67872620 57.53396225]
[100.91417694 55.79205704]
[114.06629944 58.07963181]
[121.18099213 44.87428665]
[128.29568481 31.66893959]
[135.41036987 18.46359253]
[128.85221863 4.52455473]
[131.72572327 -10.42858315]
[142.72311401 -20.70094681]
[157.48384094 -22.50625038]
[164.59852600 -35.71159744]
[159.82135010 -50.77659225]
[167.16999817 -64.76847839]
[182.28466797 -69.38611603]
[196.19807434 -61.88993835]
[200.65563965 -46.72730255]
[193.01278687 -32.89392471]
[177.80386353 -28.59690666]
[170.68917847 -15.39155960]
[177.30073547 -2.07144618]
[174.77114868 12.76315022]
[163.86395264 23.38794708]
[148.61572266 25.57828140]
[141.50102234 38.78363037]
[134.38633728 51.98897552]
[127.27165222 65.19432068]
[136.15524292 74.54461670]
[141.96275330 86.06064606]
[144.20007324 98.76262665]
[142.67687988 111.56989288]
[137.52273560 123.39279175]
[129.17616272 133.22543335]
[118.34729767 140.23126221]
[105.95744324 143.81422424]
[105.42807007 158.80488586]
[104.89869690 173.79554749]
[104.36932373 188.78619385]
[103.83995819 203.77685547]
[103.31058502 218.76751709]
[110.55603790 232.83215332]
[102.37438965 245.27842712]
[116.80496979 249.68531799]
[129.60273743 257.67779541]
[139.89512634 268.71087646]
[146.98037720 282.03234863]
[150.37541199 296.73391724]
[149.84873962 311.81323242]
[145.43626404 326.24209595]
[137.43887329 339.03677368]
[126.40179443 349.32492065]
[113.07759094 356.40499878]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 78]
[14 76]
[15 75]
[16 74]
[17 73]
[18 72]
[19 71]
[23 36]
[24 35]
[25 34]
[26 33]
[40 63]
[41 62]
[42 61]
[43 60]
[47 56]
[48 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
