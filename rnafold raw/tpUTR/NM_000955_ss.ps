%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 17:15:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACAACCAGAGGCCCAACGACUAAGCCAGCCCACCCUGGGCUGGGCCCAGGUGCGCGGCGCAGAGCCUUUGGGAAUAAAAAGCCAUUCUGCGA\
) } def
/len { sequence length } bind def

/coor [
[79.75656891 152.34629822]
[78.76520538 137.37908936]
[77.77384949 122.41188049]
[78.08001709 113.12356567]
[81.27970123 105.57358551]
[86.49390411 100.53077698]
[92.66540527 98.43044281]
[85.52619171 85.23833466]
[78.38698578 72.04622650]
[71.24777222 58.85412216]
[64.10855865 45.66201782]
[56.96935272 32.46990967]
[49.83013916 19.27780342]
[42.69092941 6.08569765]
[35.25157166 5.88206863]
[28.33082199 3.29160357]
[22.66717148 -1.37290001]
[18.85308838 -7.57935429]
[17.27312660 -14.63692474]
[18.06536484 -21.77287102]
[21.11003304 -28.21714401]
[26.04616356 -33.28548431]
[21.64741135 -47.62602234]
[7.96704054 -55.07485962]
[3.71036816 -69.68086243]
[10.89600372 -82.67710114]
[6.49725342 -97.01763916]
[2.09850264 -111.35817719]
[-3.51588774 -118.82031250]
[-2.20013785 -126.24603271]
[-6.12233686 -140.72416687]
[-17.19891548 -152.02107239]
[-13.05873108 -166.32868958]
[-16.98093033 -180.80682373]
[-20.90312958 -195.28495789]
[-24.82532883 -209.76309204]
[-30.18992615 -217.40678406]
[-28.62937737 -224.78494263]
[-32.07073593 -239.38484192]
[-35.51209259 -253.98474121]
[-38.95345306 -268.58462524]
[-42.39481354 -283.18453979]
[-51.91374969 -297.21401978]
[-41.06765747 -310.24468994]
[-25.54372597 -303.42971802]
[-27.79491234 -286.62588501]
[-24.35355377 -272.02600098]
[-20.91219521 -257.42608643]
[-17.47083664 -242.82620239]
[-14.02947712 -228.22630310]
[-10.34719563 -213.68528748]
[-6.42499590 -199.20715332]
[-2.50279689 -184.72901917]
[1.41940212 -170.25088501]
[12.21543980 -159.98956299]
[8.35579681 -144.64636230]
[12.27799606 -130.16822815]
[16.43903923 -115.75692749]
[20.83778954 -101.41638947]
[25.23653984 -87.07585144]
[38.47349548 -80.34394836]
[43.13874054 -65.86326599]
[35.98794937 -52.02477264]
[40.38669968 -37.68423462]
[59.51950073 -24.62121582]
[55.88303375 -1.05351305]
[63.02224731 12.13859272]
[70.16146088 25.33069992]
[77.30066681 38.52280426]
[84.43988037 51.71491241]
[91.57908630 64.90702057]
[98.71829987 78.09912109]
[105.85751343 91.29122925]
[115.45703888 102.81724548]
[127.14019775 112.22489166]
[138.82336426 121.63253784]
[150.50651550 131.04017639]
[165.44796753 126.85295105]
[179.98529053 132.27932739]
[188.52862549 145.23274231]
[187.79284668 160.73237610]
[178.06091309 172.81826782]
[163.07492065 176.84317017]
[148.59730530 171.25941467]
[140.19500732 158.21406555]
[141.09887695 142.72334290]
[129.41571045 133.31570435]
[117.73255157 123.90805054]
[106.04939270 114.50040436]
[92.74105072 121.42052460]
[93.73241425 136.38772583]
[94.72377014 151.35493469]
[101.80371094 166.75982666]
[88.96076202 177.82757568]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 92]
[2 91]
[3 90]
[7 73]
[8 72]
[9 71]
[10 70]
[11 69]
[12 68]
[13 67]
[14 66]
[22 64]
[23 63]
[26 60]
[27 59]
[28 58]
[30 57]
[31 56]
[33 54]
[34 53]
[35 52]
[36 51]
[38 50]
[39 49]
[40 48]
[41 47]
[42 46]
[74 89]
[75 88]
[76 87]
[77 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
