%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 01:18:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUCUGAGCCGCGGACAUGCCCUCGCAUUGCUUCCCGCAGAGUGCAGAGACAGGAAGCUGGAGAUGUCUUUAUAAAGUCACACCUUUACAGACUGUAA\
) } def
/len { sequence length } bind def

/coor [
[85.51322937 102.58996582]
[87.96699524 98.39310455]
[73.03356171 96.98147583]
[58.10013580 95.56985474]
[43.16670609 94.15822601]
[28.23327637 92.74660492]
[13.29984570 91.33497620]
[-1.16722476 97.73922729]
[-13.10986805 88.83852386]
[-28.04329872 87.42690277]
[-42.99705887 86.25001526]
[-57.98040771 85.54341888]
[-72.97300720 85.07225800]
[-87.96559906 84.60109711]
[-102.95819855 84.12993622]
[-116.98779297 99.54564667]
[-137.54345703 99.98891449]
[-151.82496643 85.59485626]
[-166.75839233 87.00648499]
[-181.69181824 88.41810608]
[-196.62525940 89.82973480]
[-209.67193604 99.76532745]
[-224.69323730 93.18563080]
[-226.23654175 76.85926056]
[-212.71421814 67.58139801]
[-198.03688049 74.89630127]
[-183.10345459 73.48468018]
[-168.17001343 72.07305145]
[-153.23658752 70.66143036]
[-149.61683655 61.60148621]
[-142.83003235 54.51110077]
[-133.83001709 50.45030594]
[-123.90570068 50.04884338]
[-114.49649048 53.40889740]
[-106.98355103 60.08388901]
[-102.48703766 69.13733673]
[-87.49443817 69.60849762]
[-72.50184631 70.07965851]
[-57.50924301 70.55081940]
[-50.60091019 67.56092072]
[-42.05519867 71.27960968]
[-35.05636215 68.50818634]
[-26.63167381 72.49346924]
[-11.69824409 73.90509796]
[1.70068848 67.39987183]
[14.71147060 76.40155029]
[29.64490128 77.81317139]
[44.57833099 79.22480011]
[59.51176071 80.63642120]
[74.44519043 82.04804993]
[89.37861633 83.45967102]
[102.28974915 75.82405090]
[108.24696350 62.05773163]
[114.20418549 48.29141235]
[111.78284454 32.07200623]
[124.78524780 22.07853127]
[139.83563232 28.59141731]
[141.45146179 44.91076660]
[127.97050476 54.24863052]
[122.01328278 68.01494598]
[116.05606842 81.78126526]
[119.03467560 88.66442871]
[130.28636169 78.74476624]
[143.19746399 86.38043213]
[139.92524719 101.01916504]
[124.99189758 102.43074799]
[127.97050476 109.31390381]
[142.08370972 114.39497375]
[156.19692993 119.47604370]
[170.31013489 124.55711365]
[180.07652283 119.27332306]
[190.90830994 120.31983185]
[199.13970947 127.09386444]
[202.12385559 137.09674072]
[215.89018250 143.05395508]
[229.65649414 149.01116943]
[243.42282104 154.96838379]
[257.18914795 160.92561340]
[271.78948975 154.87536621]
[286.35949707 160.99830627]
[292.25503540 175.66178894]
[285.97839355 190.16625977]
[271.25338745 195.90643311]
[256.81610107 189.47680664]
[251.23191833 174.69192505]
[237.46559143 168.73471069]
[223.69927979 162.77749634]
[209.93295288 156.82026672]
[196.16664124 150.86305237]
[177.31523132 154.65203857]
[165.22906494 138.67031860]
[151.11585999 133.58926392]
[137.00265503 128.50819397]
[122.88943481 123.42711639]
[113.50806427 126.98410797]
[104.24596405 127.27111816]
[96.13166809 124.72222137]
[89.93691254 120.06427002]
[86.10322571 114.20163727]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 51]
[3 50]
[4 49]
[5 48]
[6 47]
[7 46]
[9 44]
[10 43]
[11 41]
[12 39]
[13 38]
[14 37]
[15 36]
[18 29]
[19 28]
[20 27]
[21 26]
[52 61]
[53 60]
[54 59]
[67 94]
[68 93]
[69 92]
[70 91]
[74 89]
[75 88]
[76 87]
[77 86]
[78 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
