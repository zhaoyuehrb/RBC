%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 01:09:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAGUCAUCCACCAGGAACGAAGAUUUCCUGAAGAAGACCUGGUCCCUCUGGAGGUUGCAGUGGCUGAAGGAUGCAUCAUGUGCUCCUACCCUGCUCUACCGCUUUUCUGGGUCACAGAGGCCAAAUGUGAGAGCAUUGAAUAAAUAUCUUAAGCUAAGCUGCA\
) } def
/len { sequence length } bind def

/coor [
[-94.91967010 228.24746704]
[-106.06684113 238.28443909]
[-117.21401215 248.32139587]
[-128.36119080 258.35833740]
[-139.41230774 268.50097656]
[-150.36636353 278.74835205]
[-155.15843201 293.82635498]
[-169.73857117 296.87078857]
[-180.69264221 307.11813354]
[-179.59175110 320.56933594]
[-186.35304260 332.02398682]
[-198.30609131 337.40011597]
[-210.97978210 334.93316650]
[-222.12695312 344.97012329]
[-233.27412415 355.00708008]
[-244.42129517 365.04403687]
[-255.56846619 375.08099365]
[-266.71563721 385.11795044]
[-265.98910522 400.73864746]
[-275.51440430 413.14038086]
[-290.79394531 416.46743774]
[-304.61322021 409.14886475]
[-310.44720459 394.64028931]
[-305.54122925 379.79220581]
[-292.21179199 371.61541748]
[-276.75259399 373.97079468]
[-265.60543823 363.93383789]
[-254.45825195 353.89688110]
[-243.31108093 343.85992432]
[-232.16390991 333.82293701]
[-221.01673889 323.78598022]
[-220.86868286 306.98928833]
[-208.38777161 295.24966431]
[-190.94000244 296.16409302]
[-179.98594666 285.91671753]
[-175.97738647 271.57165527]
[-160.61372375 267.79428101]
[-149.65966797 257.54690552]
[-146.91081238 250.64962769]
[-138.39814758 247.21118164]
[-127.25096893 237.17422485]
[-116.10379791 227.13725281]
[-104.95662689 217.10029602]
[-108.35408020 202.49012756]
[-122.78604889 198.40133667]
[-137.21801758 194.31256104]
[-152.97615051 198.85275269]
[-164.59782410 187.28257751]
[-160.12765503 171.50444031]
[-144.16416931 167.74952698]
[-133.12924194 179.88058472]
[-118.69726562 183.96936035]
[-104.26529694 188.05815125]
[-94.42639160 180.32772827]
[-82.96114349 177.76576233]
[-72.25969696 180.24374390]
[-64.28839111 186.64367676]
[-51.15757370 179.39234924]
[-38.02675629 172.14103699]
[-24.89594078 164.88970947]
[-11.76512241 157.63839722]
[1.36569512 150.38706970]
[14.35607624 142.88706970]
[27.20131111 135.14111328]
[40.04654694 127.39514923]
[52.89178085 119.64918518]
[49.61187363 91.85681915]
[61.47917175 66.51238251]
[84.92624664 51.23467636]
[82.65027618 36.40835190]
[80.37430573 21.58202362]
[78.09833527 6.75569725]
[73.68490601 -1.29477215]
[75.92296600 -8.37431240]
[73.92968750 -23.24128342]
[71.93640900 -38.10825348]
[69.94312286 -52.97522736]
[61.84561539 -67.87041473]
[73.91708374 -79.77487183]
[88.69802094 -71.47064209]
[84.81009674 -54.96850586]
[86.80337524 -40.10153580]
[88.79666138 -25.23456573]
[90.78993988 -10.36759377]
[92.92465973 4.47972727]
[95.20063019 19.30605316]
[97.47660065 34.13238144]
[99.75257111 48.95870590]
[110.65711212 50.08306122]
[121.07006836 53.50992584]
[130.51112366 59.08123016]
[138.54481506 66.53998566]
[144.80053711 75.54214478]
[158.87957764 70.36714172]
[172.95861816 65.19213867]
[187.03765869 60.01713181]
[201.11668396 54.84212494]
[215.19572449 49.66712189]
[219.76560974 44.78821945]
[225.28753662 43.22022247]
[229.91049194 44.57429123]
[244.17634583 39.93903732]
[258.44219971 35.30378342]
[269.17596436 23.68068314]
[283.67129517 27.10634995]
[297.93713379 22.47109604]
[312.20297241 17.83584023]
[315.75167847 13.88478374]
[320.03906250 11.91789532]
[324.17343140 11.88078594]
[327.41735840 13.36849689]
[341.92456055 9.55522251]
[356.43176270 5.74194717]
[370.93896484 1.92867231]
[380.23577881 -11.14606476]
[396.26177979 -11.88558006]
[406.72317505 0.27741757]
[403.59490967 16.01251793]
[389.27667236 23.24909973]
[374.75222778 16.43587494]
[360.24502563 20.24914932]
[345.73782349 24.06242561]
[331.23062134 27.87570000]
[316.83822632 32.10168839]
[302.57238770 36.73694229]
[288.30654907 41.37220001]
[278.59313965 52.66374969]
[263.07745361 49.56962967]
[248.81159973 54.20488358]
[234.54574585 58.84013748]
[220.37074280 63.74615860]
[206.29170227 68.92116547]
[192.21266174 74.09616852]
[178.13362122 79.27117157]
[164.05458069 84.44618225]
[149.97554016 89.62118530]
[150.98182678 97.52456665]
[150.74597168 105.48825073]
[149.27372742 113.31822968]
[146.60093689 120.82370758]
[142.79275513 127.82183075]
[137.94195557 134.14208984]
[132.16671753 139.63050842]
[125.60776520 144.15333557]
[118.42488861 147.60040283]
[110.79309845 149.88771057]
[102.89833832 150.95953369]
[94.93296814 150.78976440]
[87.09104919 149.38252258]
[79.56365204 146.77210999]
[72.53417206 143.02212524]
[66.17388153 138.22392273]
[60.63774490 132.49443054]
[47.79250717 140.24038696]
[34.94727325 147.98634338]
[22.10203743 155.73231506]
[18.53808212 161.38789368]
[13.41268921 163.97259521]
[8.61701393 163.51789856]
[-4.51380301 170.76921082]
[-17.64462090 178.02053833]
[-30.77543831 185.27185059]
[-43.90625763 192.52316284]
[-57.03707504 199.77449036]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 43]
[2 42]
[3 41]
[4 40]
[5 38]
[6 37]
[8 35]
[9 34]
[13 31]
[14 30]
[15 29]
[16 28]
[17 27]
[18 26]
[44 53]
[45 52]
[46 51]
[57 164]
[58 163]
[59 162]
[60 161]
[61 160]
[62 159]
[63 156]
[64 155]
[65 154]
[66 153]
[69 88]
[70 87]
[71 86]
[72 85]
[74 84]
[75 83]
[76 82]
[77 81]
[93 136]
[94 135]
[95 134]
[96 133]
[97 132]
[98 131]
[101 130]
[102 129]
[103 128]
[105 126]
[106 125]
[107 124]
[111 123]
[112 122]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
