%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 23:08:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAGGCCCCACUCCCUUUGAGACUGCCCUCCCUCCCCUGCUGGGUCUCUCCAACCCUCACCAGCCAAGGUGGCUCAGCACCUUGUGUCCCCCU\
) } def
/len { sequence length } bind def

/coor [
[76.36657715 121.47513580]
[89.25656891 113.80860138]
[75.72669983 120.28491974]
[62.19683075 126.76123047]
[48.66696167 133.23754883]
[35.13709259 139.71386719]
[26.03007126 152.65112305]
[11.20956993 151.16720581]
[8.29396152 166.29351807]
[-2.83930707 176.68118286]
[-17.77772903 178.49984741]
[-30.76710701 171.26010132]
[-44.29697418 177.73640442]
[-57.82684326 184.21272278]
[-64.49587250 198.80393982]
[-80.09606171 202.54740906]
[-92.66029358 192.57144165]
[-92.55035400 176.52876282]
[-79.85058594 166.72593689]
[-64.30316162 170.68286133]
[-50.77328873 164.20654297]
[-37.24341965 157.73022461]
[-34.73567581 143.07249451]
[-23.95013237 132.57791138]
[-8.87688923 130.42137146]
[4.73325491 137.63732910]
[12.87252998 125.16329956]
[28.66077614 126.18399048]
[42.19064713 119.70767975]
[55.72051239 113.23136139]
[69.25038147 106.75505066]
[82.78025055 100.27873230]
[67.78065491 100.38866425]
[55.85231018 91.29389954]
[51.98703766 76.80046844]
[57.80239105 62.97362137]
[70.86473846 55.59967804]
[85.70770264 57.76450729]
[96.11973572 68.56217194]
[97.74330139 83.47525024]
[102.61379242 69.28799438]
[107.48429108 55.10073090]
[112.35478210 40.91347504]
[117.22527313 26.72621536]
[105.42066193 17.21690178]
[97.58299255 4.24205017]
[94.65869904 -10.63156128]
[97.00090790 -25.60787201]
[104.32677460 -38.87842178]
[115.75167084 -48.84072113]
[129.89599609 -54.29178238]
[145.05174255 -54.57335663]
[159.38877869 -49.65144730]
[171.17582703 -40.12039566]
[178.98957825 -27.13112259]
[181.88645935 -12.25214672]
[179.51666260 2.71982217]
[172.16635132 15.97684669]
[160.72309875 25.91807747]
[146.56877136 31.34306145]
[131.41253662 31.59670639]
[126.54203796 45.78396606]
[121.67154694 59.97122574]
[116.80105591 74.15848541]
[111.93056488 88.34574127]
[118.85067749 101.65408325]
[133.26197815 105.81512451]
[147.67329407 109.97617340]
[162.08459473 114.13721466]
[176.49589539 118.29825592]
[190.90721130 122.45930481]
[205.31851196 126.62034607]
[219.03245544 118.76521301]
[234.26199341 122.98858643]
[241.97169495 136.78482056]
[237.58753967 151.96884155]
[223.71057129 159.53225708]
[208.57374573 154.98780823]
[201.15747070 141.03164673]
[186.74615479 136.87060547]
[172.33485413 132.70956421]
[157.92355347 128.54852295]
[143.51225281 124.38747406]
[129.10093689 120.22643280]
[114.68963623 116.06539154]
[126.02973938 125.88384247]
[131.86604309 139.70185852]
[130.99787903 154.67671204]
[123.60385132 167.72770691]
[111.20509338 176.16990662]
[96.35234833 178.26654053]
[82.10120392 173.58628845]
[71.38347626 163.09197998]
[66.40408325 148.94258118]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 32]
[3 31]
[4 30]
[5 29]
[6 28]
[8 26]
[12 22]
[13 21]
[14 20]
[40 65]
[41 64]
[42 63]
[43 62]
[44 61]
[66 85]
[67 84]
[68 83]
[69 82]
[70 81]
[71 80]
[72 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
