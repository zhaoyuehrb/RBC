%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 19:04:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGGACCUCACCUUGGCUCUGUUGCUGUCCUCCAGGGCGAGCACUUUCCACUUCCAGAGGGGGCCAGAGGGACUUUGCCUGCCCAGUCUUUGGAGAGCUCAGUACAGGGCAGGAGCUGCUGUGGUGUUCCCUUGGCAAAUGAAAGUUUUAUUUUCGUUUGGGA\
) } def
/len { sequence length } bind def

/coor [
[60.90858078 311.33410645]
[68.77636719 298.56378174]
[61.27942276 298.34960938]
[52.00703812 310.14041138]
[42.73465347 321.93121338]
[33.46226883 333.72201538]
[24.18988419 345.51281738]
[38.99660873 343.11260986]
[52.45196533 349.74234009]
[59.57054520 362.94558716]
[57.71481705 377.83035278]
[47.57234955 388.88162231]
[32.90107727 392.00473022]
[19.13691902 386.04251099]
[11.37969494 373.20407104]
[12.50383186 358.24560547]
[1.54977202 368.49295044]
[-9.40428829 378.74032593]
[-9.68022823 394.54220581]
[-21.10684204 405.46044922]
[-36.90492249 405.01745605]
[-47.70174408 393.47604370]
[-47.09175110 377.68353271]
[-35.43683624 367.00933838]
[-19.65165710 367.78628540]
[-8.69759655 357.53890991]
[2.25646353 347.29153442]
[12.39908695 336.24041748]
[21.67147255 324.44961548]
[30.94385719 312.65881348]
[40.21623993 300.86804199]
[49.48862457 289.07723999]
[84.66037750 275.01062012]
[85.80167389 260.05410767]
[86.94296265 245.09757996]
[88.08425903 230.14106750]
[89.22554779 215.18455505]
[90.36684418 200.22802734]
[87.72827148 193.28779602]
[91.67491150 184.99850464]
[93.10074615 170.06642151]
[94.52658844 155.13435364]
[95.95243073 140.20227051]
[97.37827301 125.27018738]
[98.80411530 110.33811188]
[94.91464233 112.16964722]
[90.00093842 112.45462036]
[84.66773987 110.80007935]
[79.64667511 107.04032898]
[75.71438599 101.27301025]
[73.60176086 93.86685944]
[73.90360260 85.43926239]
[76.99850464 76.80505371]
[72.49926758 62.49572754]
[68.00003052 48.18639755]
[63.50079727 33.87706757]
[59.00156021 19.56774139]
[54.50232315 5.25841331]
[50.00308609 -9.05091476]
[45.50385284 -23.36024284]
[41.00461578 -37.66957092]
[36.23376083 -51.89064407]
[31.19301987 -66.01831055]
[26.15227890 -80.14597321]
[21.11153793 -94.27364349]
[17.06075668 -97.70806885]
[14.97223949 -101.93753052]
[14.81708431 -106.06915283]
[16.21155548 -109.35424042]
[11.98556614 -123.74663544]
[7.75957823 -138.13903809]
[-6.63772631 -144.24244690]
[-13.69741440 -158.19575500]
[-10.08611679 -173.41062927]
[2.49102092 -182.70307922]
[18.09546089 -181.68548584]
[29.35926056 -170.83833313]
[30.96400261 -155.28330994]
[22.15197182 -142.36502075]
[26.37796021 -127.97262573]
[30.60394859 -113.58023071]
[35.23920441 -99.31438446]
[40.27994537 -85.18671417]
[45.32068634 -71.05905151]
[50.36142731 -56.93138504]
[54.25671768 -54.09731293]
[56.38696671 -48.76699448]
[55.31394196 -42.16880798]
[59.81317902 -27.85947990]
[64.31241608 -13.55015182]
[68.81165314 0.75917679]
[73.31089020 15.06850529]
[77.81012726 29.37783241]
[82.30936432 43.68716049]
[86.80860138 57.99649048]
[91.30783081 72.30581665]
[98.00651550 75.67890167]
[100.91831970 60.96423340]
[100.50701904 45.96987152]
[111.25108337 35.50253677]
[126.22960663 36.30487442]
[135.79402161 47.86004639]
[133.78329468 62.72467041]
[121.49154663 71.32376099]
[111.40387726 82.42506409]
[118.10255432 85.79814148]
[132.27757263 80.89212036]
[142.78811646 69.06677246]
[157.34602356 72.21584320]
[171.52104187 67.30982971]
[185.69604492 62.40380859]
[199.87106323 57.49778748]
[214.04608154 52.59177017]
[227.03649902 41.69749832]
[241.10113525 51.16442490]
[235.89764404 67.30010223]
[218.95208740 66.76678467]
[204.77708435 71.67279816]
[190.60206604 76.57881927]
[176.42706299 81.48484039]
[162.25204468 86.39086151]
[152.75538635 97.86529541]
[137.18359375 95.06713867]
[123.00857544 99.97315216]
[113.73619080 111.76395416]
[112.31034851 126.69602966]
[110.88450623 141.62811279]
[109.45867157 156.56019592]
[108.03282928 171.49226379]
[106.60698700 186.42434692]
[105.32336426 201.36932373]
[104.18206787 216.32583618]
[103.04077911 231.28236389]
[101.89948273 246.23887634]
[100.75818634 261.19540405]
[99.61689758 276.15191650]
[103.56810760 290.62216187]
[112.15224457 302.92306519]
[120.73638153 315.22399902]
[129.32052612 327.52490234]
[137.90466309 339.82583618]
[146.48880005 352.12673950]
[155.07293701 364.42764282]
[163.65708923 376.72857666]
[172.24122620 389.02947998]
[180.82536316 401.33041382]
[189.40950012 413.63131714]
[203.43222046 423.16021729]
[198.15760803 439.27276611]
[181.21456909 438.66470337]
[177.10858154 422.21545410]
[168.52444458 409.91455078]
[159.94030762 397.61361694]
[151.35617065 385.31271362]
[142.77203369 373.01181030]
[134.18788147 360.71087646]
[125.60374451 348.40997314]
[117.01960754 336.10903931]
[108.43547058 323.80813599]
[99.85132599 311.50720215]
[91.26718903 299.20629883]
[83.77024841 298.99212646]
[90.89614105 312.19143677]
[83.02806091 324.96221924]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 32]
[4 31]
[5 30]
[6 29]
[7 28]
[16 27]
[17 26]
[18 25]
[33 136]
[34 135]
[35 134]
[36 133]
[37 132]
[38 131]
[40 130]
[41 129]
[42 128]
[43 127]
[44 126]
[45 125]
[53 96]
[54 95]
[55 94]
[56 93]
[57 92]
[58 91]
[59 90]
[60 89]
[61 88]
[62 85]
[63 84]
[64 83]
[65 82]
[69 81]
[70 80]
[71 79]
[106 124]
[107 123]
[109 121]
[110 120]
[111 119]
[112 118]
[113 117]
[137 161]
[138 160]
[139 159]
[140 158]
[141 157]
[142 156]
[143 155]
[144 154]
[145 153]
[146 152]
[147 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
