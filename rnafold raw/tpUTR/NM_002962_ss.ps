%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 13:43:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGGGCUGCCCUCCACCCUCACCCUCCACCCUUUGCUGCUGACCUCGGCUGCUCCUCUCACAGACCCUCUUUGGCCCCCUGCCCUCCUCUCCCUCCCAGAUGGACCCUUCCAUGGGAGGAAAUAAAGUUUCCAUCGCAGGUGCUGGGA\
) } def
/len { sequence length } bind def

/coor [
[12.22764587 339.31607056]
[2.59960604 345.79757690]
[-8.84393883 346.78564453]
[-15.79337883 360.07867432]
[-22.74281883 373.37173462]
[-29.69226074 386.66479492]
[-30.91066742 395.78598022]
[-36.92897415 400.16122437]
[-44.15528107 413.30581665]
[-41.07820129 429.05099487]
[-51.57912064 441.17990112]
[-67.60263062 440.38827515]
[-76.85686493 427.28335571]
[-72.24276733 411.91815186]
[-57.29988098 406.07949829]
[-50.07357407 392.93490601]
[-42.98531342 379.71536255]
[-36.03587341 366.42230225]
[-29.08643341 353.12924194]
[-22.13699150 339.83618164]
[-28.67752075 322.78982544]
[-20.60345650 306.06069946]
[-2.58289957 300.38500977]
[3.80378962 286.81259155]
[10.19047928 273.24017334]
[4.91919184 259.35678101]
[11.20285892 245.50144958]
[25.80080032 240.06657410]
[32.18748856 226.49415588]
[38.57417679 212.92175293]
[44.96086884 199.34934998]
[21.40065193 181.98623657]
[3.05960560 159.17904663]
[-8.84438610 132.44224548]
[-13.52087212 103.55120087]
[-10.65932369 74.42435455]
[-25.01911545 70.08887482]
[-40.46661758 73.50725555]
[-50.41435623 62.42160416]
[-64.77414703 58.08612823]
[-79.13394165 53.75064850]
[-93.49373627 49.41517258]
[-109.32734680 53.68468094]
[-120.74905396 41.91706848]
[-116.00917816 26.21784592]
[-99.98369598 22.73702621]
[-89.15825653 35.05538177]
[-74.79846191 39.39085770]
[-60.43867111 43.72633362]
[-46.07888031 48.06180954]
[-31.65848732 44.33332825]
[-20.68363953 55.72908783]
[-6.32384682 60.06456375]
[-3.62087679 53.49931717]
[-0.51298183 47.11578751]
[2.98769331 40.93891525]
[6.86746883 34.99283981]
[11.11118317 29.30079460]
[15.70225430 23.88502502]
[20.62273979 18.76669502]
[25.85341072 13.96580410]
[31.37383080 9.50111389]
[37.16242599 5.39007187]
[43.19657135 1.64874184]
[49.45269394 -1.70825529]
[55.90634155 -4.66780138]
[62.53229523 -7.21833134]
[69.30466461 -9.34987831]
[76.19698334 -11.05411243]
[83.18231964 -12.32437420]
[90.23337555 -13.15570068]
[97.32259369 -13.54484177]
[104.42227936 -13.49027634]
[111.50468445 -12.99221992]
[114.00621033 -27.78215981]
[116.50774384 -42.57210159]
[108.42375183 -56.42954254]
[114.35178375 -71.33718872]
[129.74435425 -75.85917664]
[142.79360962 -66.52661896]
[143.48925781 -50.49865723]
[131.29768372 -40.07056808]
[128.79615784 -25.28063011]
[126.29462433 -10.49068832]
[138.61846924 -6.80923700]
[150.44706726 -1.75801480]
[161.62869263 4.59819841]
[172.01997375 12.17788792]
[181.48762512 20.88384819]
[189.91026306 30.60443115]
[197.17984009 41.21497345]
[203.20312500 52.57940292]
[207.90290833 64.55197144]
[222.43165588 60.82162476]
[236.96040344 57.09127808]
[251.48915100 53.36092758]
[266.01788330 49.63058090]
[280.54663086 45.90023041]
[295.07537842 42.16988373]
[300.13891602 37.75386429]
[305.81906128 36.75914001]
[310.29074097 38.60115433]
[324.96295166 35.48247910]
[339.63516235 32.36380386]
[354.30737305 29.24512863]
[366.12564087 17.87582588]
[381.80364990 22.68541527]
[385.21322632 38.72620392]
[372.84689331 49.49679947]
[357.42605591 43.91734314]
[342.75384521 47.03601837]
[328.08163452 50.15469360]
[313.40942383 53.27336884]
[298.80572510 56.69863129]
[284.27697754 60.42897797]
[269.74822998 64.15932465]
[255.21949768 67.88967896]
[240.69075012 71.62002563]
[226.16200256 75.35037231]
[211.63325500 79.08071899]
[213.22436523 91.06448364]
[213.53273010 103.14948273]
[212.55485535 115.19879150]
[210.30183411 127.07592010]
[206.79917908 138.64628601]
[202.08656311 149.77883911]
[196.21739197 160.34742737]
[189.25816345 170.23233032]
[181.28770447 179.32154846]
[172.39633179 187.51213074]
[162.68475342 194.71125793]
[152.26300049 200.83738708]
[141.24916077 205.82110596]
[129.76800537 209.60595703]
[117.94959259 212.14906311]
[105.92782593 213.42160034]
[93.83890533 213.40917969]
[81.81977844 212.11190796]
[70.00662994 209.54449463]
[58.53327179 205.73603821]
[52.14658356 219.30844116]
[45.75989532 232.88084412]
[39.37320709 246.45326233]
[44.49063873 261.16549683]
[37.82028198 274.83886719]
[23.76288414 279.62686157]
[17.37619591 293.19927979]
[10.98950577 306.77169800]
[17.15060425 317.03115845]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 20]
[4 19]
[5 18]
[6 17]
[8 16]
[9 15]
[23 148]
[24 147]
[25 146]
[28 143]
[29 142]
[30 141]
[31 140]
[36 53]
[37 52]
[39 50]
[40 49]
[41 48]
[42 47]
[74 84]
[75 83]
[76 82]
[93 120]
[94 119]
[95 118]
[96 117]
[97 116]
[98 115]
[99 114]
[102 113]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
