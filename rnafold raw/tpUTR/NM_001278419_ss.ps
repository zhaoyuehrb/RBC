%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 00:53:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCUGCGAGGGAAUUGUUCGGCGAGUGCUGCCCAUCUUCAAAUCAAUGCCUGCUCAGAACAACAGAAAGGGCCUCAGAUGUACUGGUUUCCACAGAACCAUUGUUAGGCUUUUGUGAAGCAUUUUUGAACCUAAUAAAUAAUGUCAAAAGUCCCUAGCGCAGCCAA\
) } def
/len { sequence length } bind def

/coor [
[131.07048035 281.09652710]
[130.94203186 265.29275513]
[142.08557129 254.08573914]
[141.80508423 239.08836365]
[141.52459717 224.09098816]
[141.24411011 209.09361267]
[140.96363831 194.09623718]
[140.68315125 179.09886169]
[140.12228394 164.10934448]
[139.28121948 149.13294983]
[138.44017029 134.15653992]
[137.59912109 119.18013763]
[123.53936005 135.18714905]
[103.39814758 142.32478333]
[82.27111053 138.72145081]
[65.53546143 125.23134613]
[53.30204773 133.91140747]
[50.52667236 149.23899841]
[37.99660110 157.86755371]
[23.40118980 155.12719727]
[11.16777611 163.80726624]
[-1.06563652 172.48733521]
[-13.29904938 181.16740417]
[-19.64132309 196.29049683]
[-35.94135666 198.09075928]
[-45.43107224 184.71626282]
[-38.34826279 169.92552185]
[-21.97911835 168.93400574]
[-9.74570560 160.25393677]
[2.48770714 151.57385254]
[14.72111988 142.89378357]
[16.95510292 128.21234131]
[29.23787308 119.23524475]
[44.62197876 121.67800140]
[56.85539246 112.99793243]
[57.20588684 105.50612640]
[42.30861282 107.25859070]
[27.41133499 109.01105499]
[12.51405811 110.76352692]
[-1.79829502 115.25312805]
[-15.20815849 108.53185272]
[-20.17630577 94.37849426]
[-13.90957069 80.75028992]
[0.06879450 75.30921173]
[13.90111065 81.11548615]
[28.56970024 84.25115967]
[43.23829269 87.38684082]
[57.90688324 90.52251434]
[58.25737762 83.03070831]
[46.88780212 73.24639893]
[35.51822662 63.46208572]
[24.14865112 53.67777252]
[8.60367680 54.67353821]
[-2.78730869 44.58889389]
[-3.64082098 29.76300049]
[-15.01039696 19.97868919]
[-29.76834679 24.47384834]
[-44.60755920 20.25468254]
[-54.79289246 8.66751289]
[-57.07424545 -6.59023809]
[-50.72364807 -20.64987755]
[-37.76755142 -29.02502441]
[-22.34019852 -29.04320145]
[-9.36440182 -20.69860649]
[-2.98069167 -6.65397167]
[-5.22608566 8.60911274]
[6.14348984 18.39342499]
[20.93099976 17.02771950]
[32.60074615 26.78843689]
[33.93296051 42.30819702]
[45.30253601 52.09251022]
[56.67211151 61.87681961]
[68.04168701 71.66113281]
[86.40614319 59.68510056]
[108.20767212 58.42556763]
[127.67427826 68.12986755]
[125.99481201 53.22418213]
[124.31534576 38.31850052]
[112.71936035 27.23190308]
[114.30067444 11.26697254]
[127.84625244 2.67063785]
[142.96507263 8.03727055]
[148.05928040 23.25004959]
[139.22102356 36.63903046]
[140.90049744 51.54471588]
[142.57995605 66.45040131]
[156.82836914 71.13897705]
[167.03096008 60.14319611]
[177.23355103 49.14741898]
[187.43614197 38.15164185]
[197.63873291 27.15586281]
[201.20230103 18.69894218]
[208.13639832 16.05213356]
[218.54280090 5.24905443]
[228.94921875 -5.55402422]
[239.35563660 -16.35710335]
[249.76205444 -27.16018105]
[260.16845703 -37.96326065]
[270.47341919 -48.86316681]
[280.67602539 -59.85894394]
[278.55218506 -75.35163116]
[286.92742920 -88.55727386]
[301.84725952 -93.24057770]
[316.26693726 -87.19022369]
[323.37796021 -73.26300049]
[319.82272339 -58.03492737]
[307.27987671 -48.69622803]
[291.67178345 -49.65635300]
[281.46920776 -38.66057587]
[279.21536255 -31.58899117]
[270.97155762 -27.55684471]
[260.56512451 -16.75376511]
[250.15872192 -5.95068741]
[239.75230408 4.85239172]
[229.34588623 15.65546989]
[218.93946838 26.45854950]
[208.63452148 37.35845184]
[198.43193054 48.35423279]
[188.22933960 59.35000992]
[178.02674866 70.34578705]
[167.82415771 81.34156799]
[170.88792419 96.02534485]
[184.63636780 102.02371979]
[198.38479614 108.02210236]
[212.13323975 114.02048492]
[225.88166809 120.01885986]
[239.63009644 126.01724243]
[253.37854004 132.01562500]
[267.12698364 138.01400757]
[277.79107666 127.21395874]
[291.63812256 120.99910736]
[306.79534912 120.20995331]
[321.21289062 124.95323181]
[332.94091797 134.58744812]
[340.39324951 147.80966187]
[342.56210327 162.83166504]
[339.15408325 177.62185669]
[330.63012695 190.17999268]
[318.14303589 198.80769348]
[303.38159180 202.33810425]
[288.34213257 200.29380798]
[275.05865479 192.95124817]
[265.32760620 181.30345154]
[260.46502686 166.92568970]
[261.12860107 151.76243591]
[247.38015747 145.76405334]
[233.63171387 139.76567078]
[219.88328552 133.76730347]
[206.13485718 127.76891327]
[192.38641357 121.77053833]
[178.63798523 115.77215576]
[164.88955688 109.77377319]
[152.57551575 118.33908081]
[153.41656494 133.31549072]
[154.25762939 148.29188538]
[155.09867859 163.26829529]
[158.42855835 169.05783081]
[158.31938171 174.79232788]
[155.68052673 178.81837463]
[155.96101379 193.81575012]
[156.24150085 208.81312561]
[156.52197266 223.81050110]
[156.80245972 238.80789185]
[157.08294678 253.80526733]
[168.63772583 264.58776855]
[169.10029602 280.38528442]
[158.19621277 291.82543945]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 164]
[4 163]
[5 162]
[6 161]
[7 160]
[8 159]
[9 156]
[10 155]
[11 154]
[12 153]
[16 35]
[17 34]
[20 31]
[21 30]
[22 29]
[23 28]
[49 73]
[50 72]
[51 71]
[52 70]
[55 67]
[56 66]
[76 86]
[77 85]
[78 84]
[87 121]
[88 120]
[89 119]
[90 118]
[91 117]
[93 116]
[94 115]
[95 114]
[96 113]
[97 112]
[98 111]
[99 109]
[100 108]
[122 152]
[123 151]
[124 150]
[125 149]
[126 148]
[127 147]
[128 146]
[129 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
