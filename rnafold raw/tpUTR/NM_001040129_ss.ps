%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 03:53:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGGUACCAGAGUAACUACACUUGCUUAUUCUUUUUCUACUUAAUUCAGAAUAGUAUUUCUUUUAGAGUGUGAGAAUGUAAAUUAAAUAACAUCCCUAUGCUGUACUUAAAUGUCGAACAAAAUGAGAGACAAAAAUGAAGGAAUCAAACUGACAAGAACCA\
) } def
/len { sequence length } bind def

/coor [
[-89.00839996 320.48776245]
[-100.25815582 330.40960693]
[-111.50791168 340.33145142]
[-122.75765991 350.25329590]
[-134.00741577 360.17514038]
[-145.25717163 370.09698486]
[-145.39739990 390.14352417]
[-159.95893860 403.47683716]
[-179.33564758 401.90350342]
[-189.99324036 412.45889282]
[-200.65081787 423.01425171]
[-211.30841064 433.56964111]
[-221.96598816 444.12500000]
[-232.62358093 454.68038940]
[-243.28115845 465.23574829]
[-253.83653259 475.89334106]
[-252.06871033 491.43066406]
[-260.74472046 504.44067383]
[-275.76806641 508.78045654]
[-290.04513550 502.40087891]
[-296.83474731 488.31417847]
[-292.93106079 473.17166138]
[-280.17727661 464.12319946]
[-264.59533691 465.44116211]
[-262.17843628 458.41860962]
[-253.83653259 454.57815552]
[-243.17893982 444.02279663]
[-232.52136230 433.46740723]
[-221.86376953 422.91204834]
[-211.20619202 412.35668945]
[-200.54859924 401.80130005]
[-189.89102173 391.24594116]
[-192.62400818 381.26617432]
[-190.92984009 370.97647095]
[-185.05096436 362.26538086]
[-176.00401306 356.76019287]
[-165.40464783 355.52319336]
[-155.17901611 358.84722900]
[-143.92926025 348.92538452]
[-132.67950439 339.00354004]
[-121.42975616 329.08169556]
[-110.18000031 319.15985107]
[-98.93024445 309.23800659]
[-100.30964661 286.21347046]
[-84.19638824 269.35192871]
[-60.61925507 269.69284058]
[-51.02674484 258.16098022]
[-41.43423462 246.62911987]
[-31.84172249 235.09725952]
[-36.31726456 222.49096680]
[-33.94837952 209.21507263]
[-25.25034523 198.76802063]
[-12.42046070 193.95661926]
[1.21627891 196.14234924]
[3.22332263 188.99188232]
[11.32935143 184.67578125]
[21.35914803 173.52215576]
[31.38894272 162.36854553]
[41.41873932 151.21492004]
[51.44853210 140.06130981]
[61.47832870 128.90768433]
[71.50812531 117.75406647]
[81.53791809 106.60044861]
[78.09504700 68.33585358]
[79.82580566 53.43603516]
[73.73250580 38.83527374]
[82.88665009 27.08576775]
[84.61740112 12.18595409]
[86.34815979 -2.71386075]
[88.07891846 -17.61367607]
[89.80967712 -32.51348877]
[91.54043579 -47.41330338]
[85.44712830 -62.01406479]
[94.60128021 -73.76357269]
[88.50797272 -88.36433411]
[97.66211700 -100.11383820]
[99.39287567 -115.01365662]
[101.12363434 -129.91346741]
[102.85439301 -144.81327820]
[90.48042297 -153.91166687]
[84.32814026 -167.98451233]
[86.05248260 -183.24629211]
[95.18959808 -195.59169006]
[109.28166199 -201.69982910]
[124.53797150 -199.92765808]
[136.85466003 -190.75187683]
[142.91859436 -176.64074707]
[141.09861755 -161.39006042]
[131.88427734 -149.10220337]
[117.75420380 -143.08251953]
[116.02344513 -128.18270874]
[114.29268646 -113.28289795]
[112.56192780 -98.38307953]
[118.77902985 -84.84805298]
[109.50109100 -72.03281403]
[115.71819305 -58.49778748]
[106.44025421 -45.68254471]
[104.70949554 -30.78273201]
[102.97873688 -15.88291740]
[101.24797821 -0.98310262]
[99.51721954 13.91671181]
[97.78646088 28.81652641]
[104.00356293 42.35155106]
[94.72562408 55.16679382]
[92.99486542 70.06660461]
[98.00975800 75.64341736]
[102.65409088 61.38052368]
[117.32826996 58.27109146]
[127.35826874 69.42452240]
[122.71420288 83.68750763]
[108.03955841 86.79703522]
[113.05445862 92.37384796]
[128.05375671 92.22929382]
[143.05305481 92.08474731]
[158.05236816 91.94019318]
[164.07342529 77.95210266]
[175.26782227 67.62710571]
[189.69602966 62.75407028]
[204.85830688 64.17727661]
[218.12767029 71.65015411]
[227.20513916 83.87796783]
[230.51797485 98.74218750]
[227.49221802 113.66748810]
[218.65209961 126.06797791]
[205.52922058 133.79519653]
[190.39718628 135.51036072]
[175.87774658 130.91629028]
[164.48645020 120.80895233]
[158.19691467 106.93949890]
[143.19761658 107.08404541]
[128.19830322 107.22859955]
[113.19900513 107.37314606]
[125.21949768 116.34576416]
[126.70251465 131.27226257]
[116.68252563 142.43470764]
[101.68309784 142.56570435]
[91.46967316 131.57998657]
[92.69153595 116.63024139]
[82.66174316 127.78386688]
[72.63195038 138.93748474]
[62.60215378 150.09109497]
[52.57235718 161.24472046]
[42.54256058 172.39833069]
[32.51276398 183.55195618]
[22.48296928 194.70556641]
[12.56112385 205.95532227]
[16.63436508 222.34835815]
[10.21418285 237.79267883]
[-3.99501705 246.29696655]
[-20.30986595 244.68977356]
[-29.90237808 256.22161865]
[-39.49488831 267.75347900]
[-49.08739853 279.28533936]
[-45.62354279 285.88354492]
[-43.92197037 293.11621094]
[-44.07976151 300.52258301]
[-46.07590485 307.63372803]
[-49.77334595 314.00213623]
[-54.92832947 319.22988892]
[-61.20644760 322.99356079]
[-68.20432281 325.06417847]
[-75.47550964 325.32107544]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 43]
[2 42]
[3 41]
[4 40]
[5 39]
[6 38]
[9 32]
[10 31]
[11 30]
[12 29]
[13 28]
[14 27]
[15 26]
[16 24]
[46 153]
[47 152]
[48 151]
[49 150]
[54 146]
[56 145]
[57 144]
[58 143]
[59 142]
[60 141]
[61 140]
[62 139]
[63 138]
[64 105]
[65 104]
[67 102]
[68 101]
[69 100]
[70 99]
[71 98]
[72 97]
[74 95]
[76 93]
[77 92]
[78 91]
[79 90]
[112 132]
[113 131]
[114 130]
[115 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
