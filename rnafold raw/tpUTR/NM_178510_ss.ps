%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 06:25:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAACUUGGCCAGCCGUGGUGGCUCACGUCUGUAAUCCCAGCACUUUGGGAGGCUGAGGCAGGCAGAUCACCUGAUAUCAAGAGUUUGAGGCCAGCCUGGCCAACAUGGCAAAACCCUGUCUCUGCUAAAAAUACAAAAUUUAGCUGGGUA\
) } def
/len { sequence length } bind def

/coor [
[107.72115326 248.12672424]
[93.60092163 240.51103210]
[90.89319611 224.69813538]
[101.67510986 212.81832886]
[102.29498291 197.83114624]
[102.91485596 182.84394836]
[103.53472900 167.85676575]
[104.15460205 152.86958313]
[104.77448273 137.88240051]
[105.39435577 122.89521027]
[91.98728943 116.16835022]
[80.34311676 125.62421417]
[68.69894409 135.08006287]
[62.86369705 149.78587341]
[48.10627365 151.80271912]
[36.46210098 161.25857544]
[24.81793022 170.71444702]
[13.17375946 180.17030334]
[1.52958798 189.62615967]
[-3.81763840 205.12904358]
[-19.96643448 207.98358154]
[-30.30430222 195.25328064]
[-24.19653130 180.03398132]
[-7.92627144 177.98199463]
[3.71790004 168.52612305]
[15.36207104 159.07026672]
[27.00624275 149.61441040]
[38.65041351 140.15855408]
[43.65279388 126.12910461]
[59.24308777 123.43589783]
[70.88726044 113.98004150]
[82.53143311 104.52417755]
[80.84094238 97.21717834]
[66.49426270 92.83849335]
[77.45996094 82.60317993]
[75.76947021 75.29618073]
[61.15547562 71.91519928]
[46.54147339 68.53422546]
[31.92747498 65.15324402]
[17.31347466 61.77226639]
[2.69947553 58.39128876]
[-12.81880760 63.69364166]
[-24.99024010 52.70326996]
[-21.29389572 36.72612762]
[-5.53225708 32.19812775]
[6.08045387 43.77729034]
[20.69445419 47.15826797]
[35.30845261 50.53924561]
[49.92245102 53.92022324]
[64.53645325 57.30120468]
[79.15045166 60.68218231]
[93.00864410 54.94192886]
[100.95159149 42.21755981]
[108.89453888 29.49318886]
[109.63864899 13.68949032]
[122.94160461 6.99018574]
[130.88455200 -5.73418522]
[138.82749939 -18.45855713]
[146.77044678 -31.18292809]
[154.71339417 -43.90729904]
[162.65632629 -56.63166809]
[170.59927368 -69.35604095]
[178.54222107 -82.08041382]
[180.55133057 -96.94525146]
[176.27128601 -111.32166290]
[171.99124146 -125.69807434]
[158.62294006 -134.56756592]
[157.36596680 -150.56129456]
[169.18458557 -161.41026306]
[185.01255798 -158.79203796]
[192.70800781 -144.71513367]
[186.36766052 -129.97811890]
[190.64770508 -115.60170746]
[194.92774963 -101.22529602]
[202.42735291 -101.14778900]
[210.06115723 -114.05998993]
[217.42654419 -100.99278259]
[224.92614746 -100.91527557]
[229.50239563 -115.20016479]
[234.07862854 -129.48504639]
[238.65487671 -143.76992798]
[234.65213013 -159.67308044]
[246.61007690 -170.89535522]
[262.22741699 -165.89225769]
[265.43835449 -149.81053162]
[252.93977356 -139.19369507]
[248.36352539 -124.90880585]
[243.78727722 -110.62391663]
[239.21102905 -96.33902740]
[251.85264587 -88.26501465]
[262.88848877 -98.42424011]
[273.92434692 -108.58345795]
[284.96020508 -118.74268341]
[295.99606323 -128.90190125]
[303.55422974 -144.07789612]
[320.22943115 -141.01625061]
[321.90359497 -124.14516449]
[306.15530396 -117.86605072]
[295.11944580 -107.70682526]
[284.08358765 -97.54759979]
[273.04772949 -87.38838196]
[262.01187134 -77.22915649]
[270.27993774 -64.71360779]
[274.12228394 -50.21407700]
[273.13717651 -35.24645996]
[267.42761230 -21.37559891]
[257.59048462 -10.05166626]
[244.65431213 -2.45856142]
[229.97151184 0.60986876]
[215.07714844 -1.16717458]
[201.52839661 -7.60390472]
[190.74177551 -18.02737236]
[183.84498596 -31.34782028]
[181.55909729 -46.17261887]
[184.12307739 -60.95186234]
[191.26660156 -74.13746643]
[183.32365417 -61.41309357]
[175.38070679 -48.68872452]
[167.43775940 -35.96435165]
[159.49481201 -23.23998260]
[151.55186462 -10.51561069]
[143.60891724 2.20876026]
[135.66596985 14.93313122]
[135.48999023 29.82669640]
[121.61890411 37.43613434]
[113.67596436 50.16050339]
[105.73301697 62.88487625]
[113.71858978 50.18721390]
[125.03015900 40.33589935]
[138.70428467 34.17000198]
[153.57629395 32.21468735]
[168.37950134 34.63650131]
[181.85305786 41.22916412]
[192.84938049 51.43115997]
[200.43190002 64.37355804]
[203.95475769 78.95400238]
[203.11791992 93.93064117]
[197.99264526 108.02786255]
[189.01548767 120.04496002]
[176.95106506 128.95840454]
[162.82691956 134.00900269]
[147.84605408 134.76658630]
[133.28445435 131.16662598]
[120.38153839 123.51508331]
[119.76166534 138.50227356]
[119.14179230 153.48945618]
[118.52191925 168.47663879]
[117.90204620 183.46382141]
[117.28216553 198.45101929]
[116.66229248 213.43820190]
[126.42635345 226.16780090]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 144]
[11 32]
[12 31]
[13 30]
[15 28]
[16 27]
[17 26]
[18 25]
[19 24]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[52 127]
[53 126]
[54 125]
[56 123]
[57 122]
[58 121]
[59 120]
[60 119]
[61 118]
[62 117]
[63 116]
[64 74]
[65 73]
[66 72]
[78 89]
[79 88]
[80 87]
[81 86]
[90 102]
[91 101]
[92 100]
[93 99]
[94 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
