%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 18:28:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUGAUGUUAAAUUAAAGUUGAAAUGUAGUAAUUGAAGCUUUUAGUUGUAAGGAAAGCAACUUAAUCUGUUAUUUGAAAUGACUUCAUACACUACCCCUAUAAGUUUGCCAAUAAAACCAUCACCUGCUUACACCUUUUUGAACUUUAUAUUCAUUGUCUUACAAUUAGUUUAAAAUAAAUGACAUGAUUCAA\
) } def
/len { sequence length } bind def

/coor [
[363.15405273 261.28158569]
[365.33227539 249.25073242]
[369.25137329 237.66690063]
[356.02612305 230.58929443]
[342.80087280 223.51168823]
[329.57562256 216.43406677]
[316.35034180 209.35646057]
[303.12509155 202.27885437]
[289.73266602 195.52287292]
[276.18093872 189.09249878]
[262.62918091 182.66210938]
[248.48445129 190.98098755]
[232.00282288 189.21679688]
[219.69500732 177.86740112]
[216.54136658 161.25610352]
[202.88777161 155.04486084]
[189.23417664 148.83363342]
[175.58058167 142.62239075]
[160.79183960 144.39505005]
[151.43426514 131.63784790]
[137.78067017 125.42661285]
[124.12707520 119.21537781]
[111.19365692 128.74105835]
[95.22444153 130.47196960]
[80.55039215 123.93865204]
[71.15120697 110.91301727]
[69.57602692 94.92768860]
[55.82414246 88.93721771]
[42.07226181 82.94674683]
[28.32037735 76.95628357]
[14.56849480 70.96581268]
[1.22390985 78.66179657]
[-13.91656208 77.04331207]
[-25.06892967 66.93941498]
[-28.09698677 52.38026810]
[-41.84886932 46.38979721]
[-55.60075378 40.39933014]
[-69.35263824 34.40885925]
[-83.10451508 28.41839218]
[-96.90421295 22.53889275]
[-110.79682922 16.88247108]
[-124.73456573 11.33814049]
[-138.67230225 5.79380989]
[-152.61003113 0.24947968]
[-167.05094910 -3.80758834]
[-181.83683777 -6.33294392]
[-196.62272644 -8.85829926]
[-211.40863037 -11.38365555]
[-226.19451904 -13.90901089]
[-240.98040771 -16.43436623]
[-252.78749084 -6.18123865]
[-268.42361450 -5.96802807]
[-280.50588989 -15.89540577]
[-283.32940674 -31.27596855]
[-275.56103516 -44.84748459]
[-260.86871338 -50.20189667]
[-246.18972778 -44.81101990]
[-238.45504761 -31.22025681]
[-223.66915894 -28.69490242]
[-208.88327026 -26.16954613]
[-194.09738159 -23.64418983]
[-179.31147766 -21.11883545]
[-164.52558899 -18.59347916]
[-175.69421387 -28.60656929]
[-181.90487671 -42.26041794]
[-182.11318970 -57.25897217]
[-176.28413391 -71.08004761]
[-165.39791870 -81.39945984]
[-151.28518677 -86.48188019]
[-136.31918335 -85.47264099]
[-123.01660156 -78.54145050]
[-113.61443329 -66.85388184]
[-109.69376373 -52.37533569]
[-111.91390991 -37.54054642]
[-119.90151215 -24.84416199]
[-132.31336975 -16.42123413]
[-147.06570435 -13.68825340]
[-133.12796021 -8.14392281]
[-119.19023132 -2.59959292]
[-105.25250244 2.94473720]
[-97.86544037 2.49527383]
[-91.13606262 8.69228840]
[-83.74272156 8.36188889]
[-77.11405182 14.66650867]
[-63.36216736 20.65697861]
[-49.61028290 26.64744568]
[-35.85839844 32.63791656]
[-22.10651779 38.62838364]
[-9.38315296 30.93072128]
[5.61055136 32.21633911]
[17.10662079 42.20101547]
[20.55896378 57.21392822]
[34.31084442 63.20439529]
[48.06272888 69.19486237]
[61.81461334 75.18533325]
[75.56649780 81.17580414]
[86.03285217 72.49972534]
[99.21261597 69.16614532]
[112.54534912 71.82269287]
[123.44087982 79.95326233]
[129.78253174 91.97834015]
[130.33831787 105.56179047]
[143.99189758 111.77301788]
[157.64549255 117.98425293]
[173.41082764 116.65586853]
[181.79182434 128.96879578]
[195.44540405 135.18003845]
[209.09899902 141.39126587]
[222.75259399 147.60250854]
[234.21292114 139.93048096]
[247.85958862 138.93441772]
[260.11691284 144.76795959]
[267.82617188 155.80929565]
[269.05957031 169.11035156]
[282.61132812 175.54074097]
[296.16305542 181.97113037]
[301.39230347 181.54580688]
[305.81475830 183.02851868]
[308.83685303 185.78929138]
[310.20269775 189.05358887]
[323.42797852 196.13121033]
[336.65322876 203.20881653]
[349.87847900 210.28642273]
[363.10372925 217.36402893]
[376.32901001 224.44165039]
[387.86886597 210.51614380]
[402.14102173 199.41711426]
[418.46945190 191.66722107]
[436.08132935 187.63052368]
[454.14373779 187.49540710]
[471.80294800 191.26585388]
[488.22485352 198.76121521]
[502.63430786 209.62504578]
[514.35174561 223.34191895]
[522.82525635 239.26191711]
[527.65643311 256.63150024]
[528.61938477 274.62899780]
[525.67095947 292.40371704]
[539.69622803 297.72280884]
[553.72143555 303.04187012]
[567.74670410 308.36096191]
[581.77191162 313.68002319]
[595.79718018 318.99908447]
[609.82244873 324.31817627]
[623.84765625 329.63723755]
[637.87292480 334.95632935]
[646.68377686 322.70761108]
[658.36529541 313.15744019]
[672.12084961 306.95697021]
[687.01269531 304.52893066]
[702.02545166 306.03890991]
[716.13549805 311.38391113]
[728.38079834 320.19952393]
[737.92645264 331.88467407]
[744.12164307 345.64266968]
[746.54388428 360.53546143]
[745.02813721 375.54760742]
[739.67767334 389.65560913]
[730.85736084 401.89749146]
[719.16851807 411.43862915]
[705.40814209 417.62847900]
[690.51440430 420.04501343]
[675.50280762 418.52346802]
[661.39691162 413.16757202]
[649.15844727 404.34249878]
[639.62182617 392.64996338]
[633.43725586 378.88717651]
[631.02648926 363.99255371]
[632.55383301 348.98156738]
[618.52856445 343.66247559]
[604.50335693 338.34341431]
[590.47808838 333.02435303]
[576.45288086 327.70526123]
[562.42761230 322.38619995]
[548.40234375 317.06710815]
[534.37713623 311.74804688]
[520.35186768 306.42898560]
[514.24255371 316.96762085]
[506.65283203 326.49865723]
[497.74621582 334.81576538]
[487.71459961 341.73870850]
[476.77441406 347.11737061]
[465.16165161 350.83486938]
[453.12704468 352.81024170]
[440.93054199 353.00015259]
[428.83557129 351.39974976]
[417.10360718 348.04296875]
[405.98831177 343.00161743]
[395.73010254 336.38403320]
[386.55105591 328.33261108]
[378.64990234 319.02075195]
[372.19790649 308.64923096]
[367.33505249 297.44177246]
[364.16708374 285.64022827]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 125]
[4 124]
[5 123]
[6 122]
[7 121]
[8 120]
[9 116]
[10 115]
[11 114]
[15 109]
[16 108]
[17 107]
[18 106]
[20 104]
[21 103]
[22 102]
[27 96]
[28 95]
[29 94]
[30 93]
[31 92]
[35 88]
[36 87]
[37 86]
[38 85]
[39 84]
[40 82]
[41 80]
[42 79]
[43 78]
[44 77]
[45 63]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
[138 177]
[139 176]
[140 175]
[141 174]
[142 173]
[143 172]
[144 171]
[145 170]
[146 169]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
