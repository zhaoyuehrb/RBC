%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 00:10:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCAAGCCCUCUCGACUGCCCCUAUCCCCUGGACCCCAACAUACCUACAAUGCUGGGGAGGCCCUGCUUCCACUCCCCUCAGAGGCUUUUGGUCAUCCUCUGCGUGUCAGUAAAAGCAGGCAGCCCAUA\
) } def
/len { sequence length } bind def

/coor [
[179.91027832 151.80491638]
[183.06718445 166.46894836]
[182.94136047 181.46841431]
[179.53890991 196.07743835]
[173.02449036 209.58900452]
[163.71336365 221.34922791]
[152.05613708 230.78897095]
[138.61694336 237.45143127]
[124.04618835 241.01416016]
[109.04900360 241.30473328]
[94.35117340 238.30911255]
[80.66399384 232.17225647]
[68.64984131 223.19114685]
[58.89014816 211.80043030]
[51.85722351 198.55136108]
[47.89141846 184.08511353]
[47.18466568 169.10177612]
[49.77116013 154.32644653]
[55.52573013 140.47419739]
[64.16989136 128.21537781]
[75.28530884 118.14327240]
[88.33288574 110.74579620]
[73.80593109 114.48310852]
[68.22608185 128.96223450]
[55.18301010 137.36805725]
[39.69203949 136.46836853]
[27.70976448 126.60912323]
[23.84361649 111.58139801]
[29.58020782 97.16365814]
[42.71369934 88.89982605]
[58.19400024 89.96750641]
[70.06861877 99.95615387]
[84.59557343 96.21883392]
[86.20178986 88.89285278]
[91.02045441 66.91490173]
[79.38972473 57.44251251]
[67.75898743 47.97013092]
[56.12825775 38.49774551]
[44.49752426 29.02536201]
[28.91107178 26.31002426]
[23.92861748 12.27348614]
[12.29788399 2.80110192]
[0.66715151 -6.67128181]
[-14.65635967 -3.55294394]
[-28.37453842 -11.05931282]
[-34.01008224 -25.64611053]
[-28.90205765 -40.42589569]
[-15.46231842 -48.42010880]
[-0.03669921 -45.85412598]
[10.09129524 -33.93952179]
[10.13953590 -18.30201530]
[21.77026749 -8.82963085]
[33.40100098 0.64275336]
[48.15554428 2.68056250]
[53.96990967 17.39462852]
[65.60063934 26.86701393]
[77.23137665 36.33939743]
[88.86210632 45.81178284]
[100.49283600 55.28416443]
[108.92810059 73.37281799]
[106.80107880 90.78910065]
[121.41347504 87.40120697]
[136.02587891 84.01331329]
[150.55282593 80.27600098]
[164.98599243 76.19140625]
[179.41915894 72.10681915]
[193.85231018 68.02223206]
[208.28547668 63.93764496]
[222.71864319 59.85305405]
[237.15179443 55.76846695]
[244.89755249 42.25399780]
[259.59301758 38.31724930]
[272.42926025 45.78493500]
[286.86242676 41.70034409]
[301.29559326 37.61575699]
[309.04135132 24.10128593]
[323.73681641 20.16453743]
[336.57305908 27.63222313]
[350.95620728 23.37486649]
[361.85614014 11.90741539]
[376.30065918 15.54129219]
[390.63171387 11.11178112]
[404.96276855 6.68227005]
[419.29385376 2.25275874]
[433.62490845 -2.17675257]
[447.95596313 -6.60626364]
[450.68685913 -21.66617584]
[460.11273193 -33.72483063]
[474.06765747 -40.01123428]
[489.34484863 -39.08081818]
[502.43374634 -31.14739037]
[510.32662964 -18.03398895]
[511.20971680 -2.75397778]
[504.88012695 11.18140602]
[492.79235840 20.56991577]
[477.72406006 23.25413704]
[463.13784790 18.61725998]
[452.38549805 7.72480154]
[438.05441284 12.15431309]
[423.72335815 16.58382416]
[409.39230347 21.01333427]
[395.06121826 25.44284630]
[380.73016357 29.87235832]
[370.85531616 41.02297974]
[355.38574219 37.70593262]
[349.86947632 42.73670578]
[340.65765381 42.06538391]
[333.63833618 55.15219879]
[319.05923462 59.50016022]
[305.38018799 52.04891586]
[290.94702148 56.13350677]
[276.51385498 60.21809387]
[269.49453735 73.30490875]
[254.91545105 77.65287018]
[241.23638916 70.20162964]
[226.80322266 74.28621674]
[212.37007141 78.37080383]
[197.93690491 82.45539093]
[183.50373840 86.53997803]
[169.07058716 90.62457275]
[154.63742065 94.70915985]
[151.52810669 98.45305634]
[145.99554443 100.22296143]
[139.41377258 98.62570953]
[124.80137634 102.01360321]
[110.18897247 105.40150452]
[125.17917633 105.94361877]
[139.68812561 109.75026703]
[153.01365662 116.63722992]
[164.51089478 126.27120209]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 33]
[23 32]
[35 59]
[36 58]
[37 57]
[38 56]
[39 55]
[41 53]
[42 52]
[43 51]
[61 126]
[62 125]
[63 124]
[64 121]
[65 120]
[66 119]
[67 118]
[68 117]
[69 116]
[70 115]
[73 112]
[74 111]
[75 110]
[78 107]
[79 105]
[81 103]
[82 102]
[83 101]
[84 100]
[85 99]
[86 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
