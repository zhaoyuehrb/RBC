%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 00:51:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCCACGCUGCUGGCUCCAAGCAGCACGAGAGCAUCCCGGGCAAGGCCAAGAAGCCCAAAGUGAAGAAGAAGGAGAAGGGCAAGAAGGAGAAGGGCAAGAAGAAGGAGGCUCCCCACUGAAGGGCCCUGGACAGGGCUCAUUAAACCUUCCUCUCUGCCUUC\
) } def
/len { sequence length } bind def

/coor [
[185.94703674 142.51791382]
[176.86125183 134.95372009]
[172.53153992 123.82368469]
[157.88967896 120.56547546]
[143.24781799 117.30726624]
[132.14770508 133.71113586]
[115.23559570 144.02035522]
[95.56903839 146.37112427]
[76.70355988 140.33845520]
[67.20837402 151.95057678]
[57.71318817 163.56269836]
[48.21799850 175.17481995]
[38.72281265 186.78695679]
[29.22762680 198.39907837]
[32.31589127 213.72866821]
[24.78261948 227.43209839]
[10.18479347 233.03901672]
[-4.58494282 227.90199280]
[-12.55276966 214.44659424]
[-9.95652294 199.02604675]
[1.97792828 188.92144775]
[17.61550140 188.90388489]
[27.11068916 177.29176331]
[36.60587692 165.67964172]
[46.10106277 154.06752014]
[55.59624863 142.45539856]
[65.09143829 130.84326172]
[53.35551453 127.60727692]
[41.82480621 120.91873932]
[27.24763298 124.45512390]
[15.66060257 135.22782898]
[1.46795499 130.70919800]
[-13.10921860 134.24559021]
[-27.07639122 143.85571289]
[-40.17744446 133.09472656]
[-33.46373367 117.52672577]
[-16.64560318 119.66841125]
[-2.06842899 116.13202667]
[8.47594357 105.61226654]
[23.71124840 109.87794495]
[38.28842163 106.34156036]
[37.86008072 91.34767914]
[23.10479355 88.64925385]
[8.34950542 85.95083618]
[-8.31892967 89.04915619]
[-15.91044903 73.88982391]
[-3.44509602 62.39846802]
[11.04792881 71.19554901]
[25.80321693 73.89396667]
[40.55850220 76.59239197]
[44.96689224 70.52476501]
[30.70110321 65.88933563]
[30.70147705 50.88933182]
[44.96749878 46.25461197]
[53.78367233 58.38951111]
[58.19206238 52.32188416]
[51.06607437 39.12262726]
[43.94008636 25.92337418]
[36.81409836 12.72412109]
[22.04154778 15.87822723]
[6.97887659 14.74128628]
[-7.15284920 9.40546322]
[-19.20803452 0.30331078]
[-28.20941925 -11.82730103]
[-33.42730331 -26.00299835]
[-34.43869400 -41.07461929]
[-31.16160202 -55.82037735]
[-23.86168861 -69.04489899]
[-13.13072395 -79.67612457]
[0.16138063 -86.85224152]
[14.93709373 -89.99150848]
[29.99861526 -88.83943176]
[44.12497330 -83.48941803]
[56.17100906 -74.37516022]
[65.16020203 -62.23551178]
[70.36383820 -48.05458069]
[71.36009216 -32.98194885]
[68.06819153 -18.23949242]
[60.75499344 -5.02231216]
[50.01335144 5.59813356]
[57.13933945 18.79738808]
[64.26532745 31.99664116]
[71.39131165 45.19589615]
[92.33969879 41.21503830]
[112.49047852 44.64977264]
[129.40739441 54.46896362]
[141.25837708 68.90773773]
[147.01063538 85.75227356]
[146.50602722 102.66540527]
[161.14788818 105.92361450]
[175.78974915 109.18182373]
[191.33032227 98.40853119]
[209.50944519 102.30231476]
[218.94523621 117.95091248]
[233.70053101 120.64933014]
[248.45581055 123.34775543]
[263.21109009 126.04618073]
[277.96640015 128.74459839]
[292.72167969 131.44302368]
[307.50198364 134.00085449]
[322.30596924 136.41786194]
[337.10995483 138.83488464]
[351.97653198 133.42236328]
[363.29077148 143.10935974]
[378.09475708 145.52636719]
[392.89874268 147.94337463]
[407.70272827 150.36038208]
[422.50671387 152.77740479]
[434.76461792 135.63369751]
[461.06173706 133.87118530]
[474.93356323 128.16392517]
[484.51373291 114.85406494]
[500.80117798 116.76480103]
[507.04077148 131.93052673]
[496.81375122 144.75006104]
[480.64080811 142.03575134]
[466.76898193 147.74299622]
[466.98315430 155.23994446]
[467.41149902 170.23382568]
[467.62567139 177.73075867]
[481.80068970 182.63677979]
[495.97570801 187.54280090]
[511.54748535 184.74464417]
[521.04412842 196.21908569]
[535.21917725 201.12510681]
[549.39416504 206.03112793]
[563.56921387 210.93713379]
[577.74420166 215.84315491]
[591.91918945 220.74917603]
[606.09423828 225.65519714]
[622.08587646 222.02201843]
[633.02801514 234.23678589]
[627.66442871 249.73399353]
[611.51257324 252.57144165]
[601.18823242 239.83021545]
[587.01318359 234.92419434]
[572.83819580 230.01817322]
[558.66314697 225.11215210]
[544.48815918 220.20613098]
[530.31317139 215.30010986]
[516.13812256 210.39408875]
[501.58023071 213.54316711]
[491.06967163 201.71781921]
[476.89465332 196.81179810]
[462.71966553 191.90577698]
[440.46490479 194.37796021]
[424.36074829 183.50878906]
[420.08969116 167.58139038]
[405.28570557 165.16438293]
[390.48171997 162.74736023]
[375.67773438 160.33035278]
[360.87374878 157.91334534]
[347.06604004 163.49873352]
[334.69296265 153.63887024]
[319.88897705 151.22186279]
[305.08499146 148.80484009]
[297.94442749 150.83982849]
[290.02325439 146.19831848]
[275.26797485 143.49989319]
[260.51269531 140.80146790]
[245.75740051 138.10304260]
[231.00210571 135.40461731]
[216.24682617 132.70619202]
[208.44711304 141.10499573]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 91]
[4 90]
[5 89]
[9 27]
[10 26]
[11 25]
[12 24]
[13 23]
[14 22]
[29 41]
[30 40]
[32 38]
[33 37]
[42 50]
[43 49]
[44 48]
[56 83]
[57 82]
[58 81]
[59 80]
[94 163]
[95 162]
[96 161]
[97 160]
[98 159]
[99 158]
[100 156]
[101 155]
[102 154]
[104 152]
[105 151]
[106 150]
[107 149]
[108 148]
[110 117]
[111 116]
[120 145]
[121 144]
[122 143]
[124 141]
[125 140]
[126 139]
[127 138]
[128 137]
[129 136]
[130 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
