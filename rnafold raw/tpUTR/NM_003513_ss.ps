%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 13:54:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGUUAACGCUUCAUGCACUGCUGUUUUUCUGUCAGCAGACAAAAUCAGCCUAACAGCAAAGGCUCUUUUCAGAGCCACCUAC\
) } def
/len { sequence length } bind def

/coor [
[109.87042236 228.20826721]
[94.87298584 228.48530579]
[80.72098541 223.51329041]
[69.19238281 213.91685486]
[61.73555374 200.90164185]
[59.28731155 186.10279846]
[62.15523529 171.37951660]
[69.97901917 158.58152771]
[81.77501678 149.31707764]
[89.42105103 136.41212463]
[76.52405548 144.07157898]
[71.18561554 159.20039368]
[55.98236084 164.32295227]
[42.57692337 155.50967407]
[41.25280762 139.52134705]
[53.02576447 128.62286377]
[68.86458588 131.17459106]
[81.76158142 123.51512146]
[73.24539185 106.63085175]
[76.89010620 89.53470612]
[89.35194397 79.41706848]
[87.14241791 64.58069611]
[84.93289948 49.74432373]
[82.72337341 34.90795135]
[80.51384735 20.07157516]
[78.30432129 5.23520184]
[76.09479523 -9.60117245]
[62.49552917 -16.83762169]
[55.84269333 -30.53408623]
[58.49908829 -45.34650040]
[69.23970032 -55.63130951]
[67.03017426 -70.46768188]
[64.82064819 -85.30405426]
[50.06468964 -88.95510864]
[37.83212662 -97.97911835]
[29.98833466 -111.00000000]
[27.72943497 -126.03216553]
[31.39989471 -140.78330994]
[40.43999100 -153.00398254]
[53.47117996 -160.83064270]
[68.50630188 -163.06976318]
[83.25260162 -159.37991333]
[95.46138000 -150.32374573]
[103.27088928 -137.28227234]
[105.49022675 -122.24421692]
[101.78097534 -107.50278473]
[92.70875549 -95.30593109]
[79.65702057 -87.51358032]
[81.86654663 -72.67720795]
[84.07607269 -57.84083176]
[97.34747314 -51.13204575]
[104.20478058 -37.73646927]
[101.83165741 -22.69580269]
[90.93116760 -11.81069756]
[93.14069366 3.02567625]
[95.35021973 17.86205101]
[97.55974579 32.69842529]
[99.76927185 47.53479767]
[101.97879791 62.37117386]
[104.18832397 77.20755005]
[120.42903137 84.95858002]
[127.36667633 103.29276276]
[119.09487915 122.82512665]
[132.26609802 130.00279236]
[145.43731689 137.18046570]
[158.60853577 144.35813904]
[171.77975464 151.53581238]
[184.95097351 158.71348572]
[201.32289124 157.76875305]
[210.09963989 171.62158203]
[202.25245667 186.02136230]
[185.85385132 186.15484619]
[177.77330017 171.88470459]
[164.60208130 164.70703125]
[151.43086243 157.52935791]
[138.25964355 150.35168457]
[125.08842468 143.17401123]
[111.91720581 135.99633789]
[120.03488159 148.60997009]
[132.16572571 157.43280029]
[140.45683289 169.93310547]
[143.86656189 184.54043579]
[141.96653748 199.41960144]
[134.99546814 212.70132446]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 18]
[11 17]
[21 60]
[22 59]
[23 58]
[24 57]
[25 56]
[26 55]
[27 54]
[31 50]
[32 49]
[33 48]
[63 78]
[64 77]
[65 76]
[66 75]
[67 74]
[68 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
