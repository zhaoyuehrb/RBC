%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 21:44:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAUCCCCAUUGGAUAUAAGGAUGACUGGUAAAAUCUCAUUGCUACUUUAAUCUAUGUUUCAAACUCAAAUGUC\
) } def
/len { sequence length } bind def

/coor [
[87.60530853 321.54592896]
[75.14031219 313.02969360]
[65.43608093 301.46551514]
[59.21274948 287.71148682]
[56.93212128 272.78833008]
[58.76343536 257.80337524]
[64.57079315 243.86862183]
[73.92325592 232.01812744]
[86.12680054 223.13128662]
[100.27585602 217.86755371]
[99.02069092 202.92016602]
[97.76551819 187.97276306]
[96.51035309 173.02537537]
[95.25518799 158.07798767]
[91.44506073 151.48435974]
[94.27388000 142.48054504]
[93.64574432 127.49370575]
[93.01760864 112.50685883]
[85.68862152 100.59982300]
[91.99555206 88.12126923]
[91.36741638 73.13442993]
[90.73928070 58.14758682]
[90.11114502 43.16074371]
[74.85766602 33.83089447]
[68.10552979 17.44001579]
[72.28852844 0.37134990]
[85.61943054 -10.84273338]
[83.73943329 -25.72445297]
[81.85942841 -40.60617447]
[79.97943115 -55.48789597]
[78.09943390 -70.36961365]
[76.21943665 -85.25133514]
[62.97787476 -93.56969452]
[58.23041534 -108.46920776]
[64.21866608 -122.91479492]
[78.11515045 -130.08567810]
[93.35838318 -126.59599304]
[102.75096893 -114.09346008]
[101.85801697 -98.48139954]
[91.10115814 -87.13133240]
[92.98115540 -72.24961090]
[94.86115265 -57.36789322]
[96.74114990 -42.48617172]
[98.62115479 -27.60445213]
[100.50115204 -12.72273159]
[112.18170929 -8.36017513]
[120.86475372 0.68999004]
[124.78574371 12.68044472]
[123.10812378 25.25763702]
[116.10094452 35.92371750]
[105.09798431 42.53261185]
[105.72612000 57.51945114]
[106.35425568 72.50629425]
[106.98239136 87.49314117]
[114.31137848 99.40017700]
[108.00444794 111.87873077]
[108.63258362 126.86557007]
[109.26071930 141.85241699]
[110.20257568 156.82281494]
[111.45774841 171.77020264]
[112.71291351 186.71760559]
[113.96807861 201.66499329]
[115.22325134 216.61238098]
[130.05198669 219.44279480]
[143.56668091 226.17001343]
[154.76446533 236.29484558]
[162.81437683 249.06596375]
[167.11906433 263.53567505]
[167.35910034 278.63018799]
[163.51664734 293.22946167]
[155.87687683 306.25006104]
[145.00666809 316.72583008]
[131.71270752 323.87933350]
[116.98146057 327.17980957]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 63]
[11 62]
[12 61]
[13 60]
[14 59]
[16 58]
[17 57]
[18 56]
[20 54]
[21 53]
[22 52]
[23 51]
[27 45]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
