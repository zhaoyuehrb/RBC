%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 18:34:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACUGGCUAGAUUAUCGAAUGUUCACAUUUUAAAGUUCUGAGAGAAAUAAAAACAUGAAGAAUCUGAA\
) } def
/len { sequence length } bind def

/coor [
[84.36146545 255.53909302]
[70.62552643 262.29058838]
[55.32569504 261.87371826]
[41.97776413 254.38429260]
[33.64899063 241.54333496]
[32.25326538 226.30160522]
[38.11131668 212.16152954]
[49.87700653 202.37239075]
[64.84666443 199.18367004]
[68.83721924 184.72422791]
[72.82776642 170.26478577]
[76.81832123 155.80534363]
[80.80887604 141.34590149]
[84.79942322 126.88645935]
[74.63000488 117.61540222]
[69.49686432 104.84746552]
[70.41899872 91.11723328]
[77.21335602 79.15035248]
[88.53115845 71.32240295]
[102.12567902 69.18733215]
[106.76093292 54.92148209]
[111.39618683 40.65563583]
[116.03144073 26.38978767]
[120.66669464 12.12394047]
[111.71869659 -0.41557652]
[111.86836243 -15.64157391]
[120.84873199 -27.71704483]
[135.04766846 -32.13612747]
[139.68292236 -46.40197372]
[144.31817627 -60.66781998]
[148.95343018 -74.93367004]
[153.58868408 -89.19951630]
[142.52104187 -99.70999146]
[137.11779785 -113.98471069]
[138.45175171 -129.18942261]
[146.25807190 -142.30522156]
[158.98678589 -150.72795105]
[174.11062622 -152.78527832]
[188.62670898 -148.06871033]
[199.65287781 -137.51473999]
[204.99986267 -123.21885681]
[203.60603333 -108.01951599]
[195.74813843 -94.93455505]
[182.98634338 -86.56201172]
[167.85453796 -84.56426239]
[163.21926880 -70.29841614]
[158.58401489 -56.03256607]
[153.94876099 -41.76671982]
[149.31350708 -27.50087166]
[158.20321655 -15.57983589]
[158.37069702 -0.53204691]
[149.54217529 11.87401485]
[134.93254089 16.75919533]
[130.29728699 31.02504349]
[125.66203308 45.29088974]
[121.02677917 59.55673981]
[116.39152527 73.82258606]
[127.24981689 85.46086884]
[130.87095642 100.96053314]
[126.29323578 116.20508575]
[114.73240662 127.14581299]
[99.25887299 130.87701416]
[95.26831818 145.33645630]
[91.27776337 159.79589844]
[87.28720856 174.25534058]
[83.29666138 188.71478271]
[79.30610657 203.17422485]
[90.52130127 213.58950806]
[95.60070038 228.02758789]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 67]
[10 66]
[11 65]
[12 64]
[13 63]
[14 62]
[20 57]
[21 56]
[22 55]
[23 54]
[24 53]
[28 49]
[29 48]
[30 47]
[31 46]
[32 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
