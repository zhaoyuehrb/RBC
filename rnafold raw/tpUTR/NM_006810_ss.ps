%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 11:13:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCUGCCUCAGAAAAAGCUUUUCCAUUACACUGUGAAUGAUACCUGUUUUGUUGUUUCUGAAUUUCCACAUGUUCUGAAGACAAAUUUUUUAUAGCCGCUUAUGGCCAUUUUGUACAAUUUUGAAAUAAAAUUAAACCAUUUAUU\
) } def
/len { sequence length } bind def

/coor [
[14.13884735 292.70758057]
[-1.43615806 310.22662354]
[-22.78699112 319.81820679]
[-46.15828705 319.82672119]
[-51.18804932 333.95831299]
[-56.21780777 348.08987427]
[-55.83265686 365.03945923]
[-72.01321411 370.10165405]
[-81.35681152 355.95480347]
[-70.34938812 343.06011963]
[-65.31962585 328.92855835]
[-60.28986740 314.79696655]
[-67.24585724 310.55993652]
[-73.51327515 305.35302734]
[-78.95790863 299.28649902]
[-83.46295929 292.48901367]
[-86.93157196 285.10498047]
[-89.28893280 277.29135132]
[-90.48386383 269.21444702]
[-90.48992157 261.04629517]
[-89.30601501 252.96102905]
[-86.95642090 245.13116455]
[-83.49028778 237.72386169]
[-78.98064423 230.89747620]
[-73.52280426 224.79804993]
[-67.23239899 219.55624390]
[-60.24290466 215.28457642]
[-52.70281982 212.07492065]
[-44.77249908 209.99659729]
[-36.62075806 209.09484863]
[-28.42126656 209.38986206]
[-20.34885406 210.87631226]
[-12.57578659 213.52348328]
[-5.26807976 217.27584839]
[4.20904684 205.64898682]
[13.68617344 194.02210999]
[23.16330147 182.39524841]
[32.64042664 170.76837158]
[42.11755371 159.14151001]
[51.59468079 147.51463318]
[42.39365005 135.80816650]
[35.96857071 122.37615204]
[32.62905502 107.86586761]
[32.53603363 92.97654724]
[35.69398117 78.42567444]
[41.95072556 64.91442871]
[51.00476456 53.09389496]
[62.41979980 43.53368759]
[75.64575958 36.69449615]
[71.84094238 22.18507195]
[68.03612518 7.67564964]
[64.23130035 -6.83377314]
[60.42648315 -21.34319687]
[56.62166595 -35.85261917]
[52.17468643 -40.89912415]
[51.15284729 -46.58047104]
[52.97845078 -51.06349564]
[49.79709244 -65.72224426]
[46.61573410 -80.38099670]
[36.12756729 -92.22620392]
[40.98950958 -106.30493927]
[37.80815125 -120.96369171]
[34.62678909 -135.62243652]
[31.44543076 -150.28118896]
[17.18931770 -156.40841675]
[9.28632641 -169.76216125]
[10.77531815 -185.20762634]
[21.08374596 -196.80572510]
[36.24780655 -200.09675598]
[50.43661118 -193.81523132]
[58.19427490 -180.37655640]
[56.53781891 -164.94813538]
[46.10417938 -153.46255493]
[49.28554153 -138.80380249]
[52.46689987 -124.14505005]
[55.64825821 -109.48629761]
[65.90887451 -98.68958282]
[61.27448273 -83.56235504]
[64.45584106 -68.90360260]
[67.63719940 -54.24485397]
[71.13108826 -39.65743637]
[74.93590546 -25.14801407]
[78.74073029 -10.63859177]
[82.54554749 3.87083101]
[86.35036469 18.38025475]
[90.15518188 32.88967514]
[98.47455597 32.18857956]
[106.81703949 32.51486206]
[115.05623627 33.86358261]
[123.06732941 36.21430969]
[130.72892761 39.53142548]
[137.92497253 43.76467514]
[144.54643250 48.84991837]
[150.49299622 54.71011734]
[155.67456055 61.25648499]
[160.01261902 68.38983917]
[173.97572327 62.90972519]
[187.93882751 57.42960739]
[194.02832031 42.84558868]
[208.67825317 36.91641617]
[223.19706726 43.15975952]
[228.97102356 57.87155533]
[222.57452393 72.32356262]
[207.80250549 77.94165039]
[193.41894531 71.39271545]
[179.45584106 76.87283325]
[165.49272156 82.35294342]
[167.76663208 102.89830017]
[163.74684143 123.17447662]
[177.19105530 129.82676697]
[190.63526917 136.47906494]
[204.07949829 143.13136292]
[217.52371216 149.78364563]
[230.96792603 156.43594360]
[244.41213989 163.08824158]
[262.72079468 161.45500183]
[271.92642212 176.36013794]
[285.50973511 182.72361755]
[301.79388428 180.78509521]
[311.39675903 194.07858276]
[304.43972778 208.92889404]
[288.07958984 210.05929565]
[279.14627075 196.30693054]
[265.56295776 189.94345093]
[254.03965759 193.76638794]
[242.64759827 188.51863098]
[237.75985718 176.53245544]
[224.31562805 169.88015747]
[210.87141418 163.22787476]
[197.42720032 156.57557678]
[183.98298645 149.92327881]
[170.53875732 143.27098083]
[157.09454346 136.61869812]
[145.64807129 150.16941833]
[131.07971191 160.28903198]
[114.38581085 166.28547668]
[96.70805359 167.74864197]
[79.25543976 164.57847595]
[63.22154999 156.99176025]
[53.74442291 168.61863708]
[44.26729584 180.24549866]
[34.79016876 191.87237549]
[25.31304169 203.49923706]
[15.83591557 215.12611389]
[6.35878849 226.75297546]
[18.44145584 246.96301270]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 12]
[5 11]
[6 10]
[34 145]
[35 144]
[36 143]
[37 142]
[38 141]
[39 140]
[40 139]
[49 86]
[50 85]
[51 84]
[52 83]
[53 82]
[54 81]
[57 80]
[58 79]
[59 78]
[61 76]
[62 75]
[63 74]
[64 73]
[96 107]
[97 106]
[98 105]
[109 133]
[110 132]
[111 131]
[112 130]
[113 129]
[114 128]
[115 127]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
