%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 19:46:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCGCGCUCGCCCCACCGGCGCGCUCUUCGCGCCCGCCCCUGCAGCACGGACAAUAAACCUCCGCCAAUGCA\
) } def
/len { sequence length } bind def

/coor [
[162.00375366 227.64892578]
[153.74645996 209.35928345]
[153.58483887 189.25280762]
[161.57868958 170.75955200]
[150.86160278 160.26460266]
[140.14450073 149.76965332]
[125.63771057 146.39292908]
[121.19137573 131.20936584]
[110.47428131 120.71441650]
[99.75719452 110.21946716]
[92.02101135 107.15896606]
[88.82266235 99.05349731]
[78.55445862 88.11896515]
[64.00990295 92.61533356]
[49.01654434 90.36006165]
[36.54026031 81.85344696]
[29.02547455 68.82697296]
[27.91630554 53.89113617]
[33.37933731 40.01234818]
[23.11113167 29.07781982]
[12.84292507 18.14329147]
[4.43072128 13.86476421]
[2.38556957 6.52922106]
[-7.41573954 -4.82570457]
[-17.21704865 -16.18062973]
[-27.01835823 -27.53555679]
[-42.84862900 -30.13980103]
[-50.55650330 -44.20991898]
[-44.22916031 -58.95252228]
[-28.72039413 -63.05834198]
[-15.92720509 -53.37775040]
[-15.66343212 -37.33686447]
[-5.86212254 -25.98193932]
[3.93918633 -14.62701416]
[13.74049568 -3.27208805]
[23.77745438 7.87508440]
[34.04566193 18.80961418]
[44.31386948 29.74414253]
[58.50829697 25.16334724]
[73.34501648 27.20815468]
[85.87392426 35.52605438]
[93.58036041 48.51185226]
[94.88973999 63.61723328]
[89.48898315 77.85076141]
[99.75719452 88.78528595]
[110.25214386 99.50238037]
[120.96923065 109.99732971]
[131.68632507 120.49227905]
[146.95967102 124.61965942]
[150.63945007 139.05255127]
[161.35655212 149.54750061]
[172.07363892 160.04246521]
[181.60592651 154.52330017]
[192.12417603 151.28507996]
[203.09141541 150.48873901]
[213.94866943 152.17063904]
[224.14356995 156.24101257]
[233.15837097 162.48858643]
[240.53625488 170.59172058]
[245.90452576 180.13484192]
[248.99337769 190.62977600]
[249.64952087 201.54078674]
[247.84368896 212.31182861]
[243.67199707 222.39495850]
[237.35083008 231.27816772]
[229.20558167 238.51141357]
[235.87510681 251.94709778]
[249.82629395 260.56661987]
[249.06677246 276.94818115]
[234.37786865 284.23980713]
[220.87025452 274.94052124]
[222.43942261 258.61663818]
[215.76989746 245.18095398]
[195.92480469 247.20021057]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 52]
[5 51]
[6 50]
[8 48]
[9 47]
[10 46]
[12 45]
[13 44]
[19 38]
[20 37]
[21 36]
[23 35]
[24 34]
[25 33]
[26 32]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
