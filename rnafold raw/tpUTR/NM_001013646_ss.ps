%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 07:45:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUUUGUGUGUCAGGAGAGAAAAAAGUUGAGUGUUGACAAACUGUAUGCAAACUAAUAAAACUAUUCUGAAGAAAAG\
) } def
/len { sequence length } bind def

/coor [
[114.32765198 143.91801453]
[121.75547028 130.79966736]
[110.84486389 120.50605011]
[99.93425751 110.21242523]
[92.16947937 107.30986786]
[88.80998993 99.30181885]
[78.30673218 88.59287262]
[67.80347443 77.88392639]
[57.30021286 67.17498016]
[46.79695129 56.46603394]
[36.29369354 45.75708771]
[25.79043198 35.04814148]
[15.28717232 24.33919716]
[6.81399536 20.26283073]
[4.59433317 13.00545025]
[-5.48578453 1.89728975]
[-15.56590271 -9.21087074]
[-28.63061142 -1.71904516]
[-43.00053024 2.78866720]
[-58.00355530 4.10143280]
[-72.93796539 2.15785098]
[-87.10524750 -2.95117307]
[-99.84278107 -10.98668098]
[-110.55479431 -21.57283783]
[-118.74028778 -34.21451187]
[-124.01638794 -48.32042313]
[-126.13633728 -63.23081970]
[-125.00098419 -78.24830627]
[-120.66341400 -92.67050171]
[-113.32652283 -105.82283783]
[-103.33345795 -117.09017181]
[-91.15161896 -125.94549561]
[-77.35076141 -131.97463989]
[-62.57639313 -134.89559937]
[-47.51952744 -134.57177734]
[-32.88440323 -131.01829529]
[-19.35553360 -124.40136719]
[-7.56568575 -115.03047180]
[1.93370593 -103.34391785]
[8.69833851 -89.88829041]
[12.41181660 -75.29294586]
[12.90045643 -60.24052811]
[10.14140129 -45.43506622]
[4.26369810 -31.56904030]
[-4.45774269 -19.29098892]
[5.62237549 -8.18282795]
[15.70249367 2.92533207]
[25.99611855 13.83593655]
[36.49937820 24.54488182]
[47.00263977 35.25382996]
[57.50589752 45.96277618]
[68.00915527 56.67172241]
[78.51242065 67.38066864]
[89.01567841 78.08961487]
[99.51893616 88.79856110]
[110.22788239 99.30181885]
[121.13848877 109.59544373]
[132.04908752 119.88906860]
[144.71334839 111.71105194]
[158.96696472 106.80209351]
[173.98126221 105.44759369]
[188.88330078 107.72630310]
[202.80671692 113.50574493]
[214.94201660 122.44989777]
[224.58367920 134.03877258]
[231.17112732 147.59858704]
[234.32139587 162.34101868]
[233.85133362 177.40895081]
[229.78825378 191.92634583]
[222.36839294 205.04919434]
[212.02311707 216.01454163]
[199.35389709 224.18487549]
[185.09730530 229.08518982]
[170.08221436 230.43058777]
[155.18154907 228.14283752]
[141.26164246 222.35496521]
[129.13175964 213.40345764]
[119.49713135 201.80874634]
[112.91790009 188.24491882]
[109.77656555 173.50059509]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 58]
[3 57]
[4 56]
[6 55]
[7 54]
[8 53]
[9 52]
[10 51]
[11 50]
[12 49]
[13 48]
[15 47]
[16 46]
[17 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
