%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 18:04:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCUGUUGGUCCACAUCAUCUUUUCAGAAGAAAAUAAAAGCAUUUAAUUGCCAAUGGGAGGAGAAGCCCAUACUGCUACUAUAACUUGUGUAUGUUAAAUGUCUGUUUUAAAAGAAAGUAGUGUUAAGAUGUAUCAGUAACUGAAAUGAUAUGCUUUCUCUGUGCAUUAAACUUUGUGAAAAUUCUGCAUAA\
) } def
/len { sequence length } bind def

/coor [
[77.39205170 128.27186584]
[80.76381683 113.65625763]
[73.45573425 111.97043610]
[60.80123901 120.02423859]
[48.14674377 128.07804871]
[35.49224854 136.13185120]
[22.83775330 144.18565369]
[10.18325710 152.23945618]
[-2.47123861 160.29325867]
[-15.12573433 168.34706116]
[-27.78022957 176.40086365]
[-23.62840462 190.91438293]
[-23.73434448 205.99453735]
[-28.08091545 220.41925049]
[-36.30767441 233.02197266]
[-47.74075317 242.78602600]
[-61.44802856 248.92660522]
[-76.31513977 250.95385742]
[-91.13606262 248.71195984]
[-104.71094513 242.39106750]
[-115.94326019 232.51116943]
[-128.59776306 240.56497192]
[-141.25225830 248.61877441]
[-153.90675354 256.67257690]
[-166.56124878 264.72637939]
[-165.22178650 279.97317505]
[-171.13197327 294.09152222]
[-182.93370056 303.83718872]
[-197.91502380 306.97061157]
[-212.63334656 302.77185059]
[-223.70648193 292.20565796]
[-228.58993530 277.70013428]
[-226.16149902 262.58850098]
[-216.97923279 250.34332275]
[-203.15313721 243.77844238]
[-187.86035156 244.40242004]
[-174.61505127 252.07188416]
[-161.96055603 244.01808167]
[-149.30606079 235.96427917]
[-136.65156555 227.91047668]
[-123.99706268 219.85667419]
[-128.19139099 205.49752808]
[-128.16961670 190.52319336]
[-123.92492676 176.14721680]
[-115.79315186 163.53710938]
[-104.42611694 153.71943665]
[-90.73944855 147.49633789]
[-75.83881378 145.37989807]
[-60.93058777 147.55012512]
[-47.22420502 153.83959961]
[-35.83403397 163.74636841]
[-23.17953682 155.69256592]
[-10.52504158 147.63876343]
[2.12945461 139.58496094]
[14.78395081 131.53115845]
[27.43844604 123.47734833]
[40.09294128 115.42354584]
[52.74743652 107.36974335]
[65.40193176 99.31594086]
[77.66162872 85.30178833]
[92.18906403 82.81630707]
[101.48809814 89.08996582]
[108.27629852 75.71385956]
[115.06450653 62.33774948]
[121.85271454 48.96163940]
[128.64091492 35.58553314]
[135.32060242 22.15489960]
[141.89131165 8.67062378]
[131.94242859 1.43894124]
[126.51732635 -12.25692940]
[129.35746765 -29.24816895]
[129.84320068 -44.24030304]
[130.32891846 -59.23243713]
[130.81465149 -74.22457123]
[131.30038452 -89.21670532]
[131.78610229 -104.20883942]
[132.27183533 -119.20097351]
[132.75756836 -134.19309998]
[123.05470276 -137.11181641]
[114.60789490 -144.36799622]
[109.35308838 -155.31625366]
[108.86695099 -168.46382141]
[114.00733185 -181.67095947]
[110.87281799 -196.33979797]
[107.73830414 -211.00863647]
[104.60379028 -225.67747498]
[90.36732483 -231.85021973]
[82.50703430 -245.22914124]
[84.04536438 -260.66976929]
[94.39079285 -272.23489380]
[109.56529236 -275.47744751]
[123.73395538 -269.15063477]
[131.44865417 -255.68724060]
[129.74290466 -240.26419067]
[119.27262878 -228.81199646]
[122.40714264 -214.14315796]
[125.54165649 -199.47431946]
[128.67617798 -184.80548096]
[136.14079285 -184.07791138]
[137.59619141 -199.00712585]
[152.52539062 -197.55148315]
[151.07005310 -182.62275696]
[158.53466797 -181.89518738]
[164.44281006 -195.68263245]
[170.35095215 -209.47009277]
[162.28921509 -222.72860718]
[163.59384155 -238.19073486]
[173.76316833 -249.91099548]
[188.88688660 -253.38269043]
[203.14962769 -247.27088928]
[211.06704712 -233.92570496]
[209.59477234 -218.47863770]
[199.29888916 -206.86938477]
[184.13839722 -203.56196594]
[178.23027039 -189.77450562]
[172.32212830 -175.98704529]
[169.34518433 -145.70146179]
[147.74969482 -133.70738220]
[147.26397705 -118.71524048]
[146.77824402 -103.72310638]
[146.29251099 -88.73097229]
[145.80677795 -73.73883820]
[145.32106018 -58.74670792]
[144.83532715 -43.75457382]
[144.34959412 -28.76244164]
[149.82185364 -23.63365173]
[153.23283386 -38.24067688]
[167.58834839 -42.59028244]
[178.53305054 -32.33290863]
[175.12232971 -17.72581863]
[160.76635742 -13.37607479]
[166.23860168 -8.24728680]
[181.16784668 -9.70243454]
[196.09710693 -11.15758228]
[211.02635193 -12.61273003]
[225.95561218 -14.06787777]
[240.88485718 -15.52302551]
[247.16459656 -29.53945923]
[259.62063599 -38.52516937]
[274.90234375 -40.06304169]
[288.89901733 -33.73939514]
[297.84564209 -21.25526428]
[299.33560181 -5.96881342]
[292.96810913 8.00797749]
[280.45599365 16.91542244]
[265.16494751 18.35746384]
[251.20819092 11.94619846]
[242.34001160 -0.59377396]
[227.41075134 0.86137378]
[212.48150635 2.31652164]
[197.55224609 3.77166939]
[182.62300110 5.22681713]
[167.69375610 6.68196487]
[155.37559509 15.24133873]
[148.80487061 28.72561455]
[148.70088196 36.12628555]
[142.01702881 42.37373734]
[135.22882080 55.74984360]
[128.44061279 69.12595367]
[121.65241241 82.50205994]
[114.86420441 95.87816620]
[115.47130585 110.86587524]
[123.31913757 123.64913177]
[131.16696167 136.43238831]
[139.01480103 149.21563721]
[146.86262512 161.99888611]
[154.71046448 174.78213501]
[169.34732056 171.00674438]
[184.44665527 171.71502686]
[198.66583252 176.84402466]
[210.74047852 185.93765259]
[219.59695435 198.18731689]
[224.44772339 212.50378418]
[224.86148071 227.61405945]
[220.80140686 242.17453003]
[212.62854004 254.89048767]
[201.06961060 264.63125610]
[187.15242004 270.53067017]
[172.11447144 272.06417847]
[157.29293823 269.09539795]
[144.00573730 261.88833618]
[133.43435669 251.08383179]
[126.51880646 237.64260864]
[123.87400055 222.75985718]
[125.73511505 207.75892639]
[131.93666077 193.97370911]
[141.92721558 182.62997437]
[134.07937622 169.84672546]
[126.23154449 157.06346130]
[118.38371277 144.28021240]
[110.53588104 131.49696350]
[102.68804932 118.71370697]
[95.37997437 117.02789307]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 59]
[4 58]
[5 57]
[6 56]
[7 55]
[8 54]
[9 53]
[10 52]
[11 51]
[21 41]
[22 40]
[23 39]
[24 38]
[25 37]
[62 161]
[63 160]
[64 159]
[65 158]
[66 157]
[67 155]
[68 154]
[71 125]
[72 124]
[73 123]
[74 122]
[75 121]
[76 120]
[77 119]
[78 118]
[83 98]
[84 97]
[85 96]
[86 95]
[103 116]
[104 115]
[105 114]
[132 153]
[133 152]
[134 151]
[135 150]
[136 149]
[137 148]
[162 192]
[163 191]
[164 190]
[165 189]
[166 188]
[167 187]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
