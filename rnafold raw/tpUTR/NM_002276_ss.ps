%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 07:12:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGCAGGCUCUGGGGCUUCUGCUGUCCUUUGGAGGGUGUCUUCUGGGUAGAGGGAUGGGAAGGAAGGGACCCUUACCCCCGGCUCUUCUCCUGACCUGCCAAUAAAAAUUUAUGGUCCAAGGGA\
) } def
/len { sequence length } bind def

/coor [
[14.28105545 223.25776672]
[5.28514051 235.26083374]
[-3.71077394 247.26388550]
[-12.70668888 259.26696777]
[-21.70260239 271.27001953]
[-24.38792801 280.11614990]
[-31.07246590 283.45504761]
[-40.36251831 295.23190308]
[-49.65256882 307.00878906]
[-58.94261932 318.78567505]
[-68.23267365 330.56256104]
[-70.05410004 346.86022949]
[-85.18540192 353.18289185]
[-98.06079102 343.02627563]
[-95.43517303 326.83868408]
[-80.00955200 321.27252197]
[-70.71950531 309.49563599]
[-61.42945099 297.71875000]
[-52.13940048 285.94186401]
[-42.84934998 274.16497803]
[-33.70566559 262.27410889]
[-24.70975113 250.27104187]
[-15.71383667 238.26797485]
[-6.71792269 226.26490784]
[2.27799225 214.26185608]
[3.71946859 199.43716431]
[18.18723297 193.03448486]
[27.18314743 181.03141785]
[36.17906189 169.02835083]
[45.17497635 157.02528381]
[54.17089081 145.02223206]
[63.16680527 133.01916504]
[72.16271973 121.01609802]
[81.15863800 109.01303864]
[81.96801758 96.83800507]
[88.96758270 88.79026794]
[97.93566895 87.01402283]
[101.24764252 72.38423157]
[100.08763885 63.21257401]
[104.82669830 57.43567657]
[108.49951172 42.89227676]
[112.17232513 28.34887886]
[110.74391937 23.98609924]
[110.83863068 19.83128357]
[112.18878937 16.35619354]
[114.39632416 13.88959026]
[116.99383545 12.58618546]
[122.08538055 -1.52325153]
[127.17691803 -15.63268852]
[127.15727997 -24.87739372]
[132.57283020 -30.02550507]
[138.01179504 -44.00468826]
[143.45077515 -57.98387146]
[148.88973999 -71.96305847]
[154.32872009 -85.94223785]
[159.76768494 -99.92142487]
[156.51147461 -117.99464417]
[170.50776672 -128.50453186]
[175.59930420 -142.61396790]
[180.69085693 -156.72340393]
[185.78239441 -170.83283997]
[184.97274780 -177.57067871]
[187.39367676 -182.86247253]
[191.49041748 -185.50355530]
[197.27349854 -199.34393311]
[202.88494873 -213.25477600]
[208.32392883 -227.23396301]
[213.76289368 -241.21315002]
[219.20187378 -255.19232178]
[219.31024170 -272.14593506]
[235.63130188 -276.73501587]
[244.55915833 -262.32217407]
[233.18104553 -249.75335693]
[227.74208069 -235.77416992]
[222.30311584 -221.79498291]
[216.86413574 -207.81579590]
[217.37632751 -200.36134338]
[211.11387634 -193.56085205]
[205.33079529 -179.72047424]
[199.89183044 -165.74128723]
[194.80029297 -151.63185120]
[189.70875549 -137.52241516]
[184.61720276 -123.41298676]
[189.48361206 -112.26498413]
[185.27359009 -100.42507935]
[173.74687195 -94.48245239]
[168.30790710 -80.50326538]
[162.86892700 -66.52408600]
[157.42996216 -52.54489899]
[151.99098206 -38.56571579]
[146.55201721 -24.58653259]
[141.28636169 -10.54114723]
[136.19480896 3.56828928]
[131.10327148 17.67772675]
[126.71572876 32.02169418]
[123.04290771 46.56509399]
[119.37009430 61.10848999]
[115.87743378 75.69620514]
[112.56546783 90.32599640]
[117.48210907 104.49732971]
[129.14318848 113.93232727]
[140.80427551 123.36732483]
[152.46534729 132.80232239]
[161.20578003 135.81396484]
[164.29438782 142.61776733]
[175.71853638 152.33830261]
[187.14266968 162.05885315]
[203.36157227 164.48361206]
[209.11853027 179.83905029]
[198.49128723 192.32879639]
[182.41224670 189.10447693]
[177.42213440 173.48298645]
[165.99798584 163.76245117]
[154.57385254 154.04190063]
[143.03034973 144.46340942]
[131.36927795 135.02841187]
[119.70819092 125.59340668]
[108.04711151 116.15840912]
[93.16169739 118.00894928]
[84.16578674 130.01200867]
[75.16986847 142.01507568]
[66.17395782 154.01814270]
[57.17803955 166.02120972]
[48.18212509 178.02426147]
[39.18621063 190.02732849]
[30.19029617 202.03039551]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[4 22]
[5 21]
[7 20]
[8 19]
[9 18]
[10 17]
[11 16]
[27 126]
[28 125]
[29 124]
[30 123]
[31 122]
[32 121]
[33 120]
[34 119]
[37 99]
[38 98]
[40 97]
[41 96]
[42 95]
[47 94]
[48 93]
[49 92]
[51 91]
[52 90]
[53 89]
[54 88]
[55 87]
[56 86]
[58 83]
[59 82]
[60 81]
[61 80]
[64 79]
[65 78]
[66 76]
[67 75]
[68 74]
[69 73]
[100 118]
[101 117]
[102 116]
[103 115]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
