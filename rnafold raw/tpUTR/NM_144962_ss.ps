%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 09:15:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGCCGGCUUUGCCAUCCGGGCAUGUGGCCACACUGCCCACCACCGACGAUGUGGGUAUGGAACCCCCUCUGGAUACAGAACCCCUUCUUUUCCAAAUAAAAAAAAAAUCAUCCAGG\
) } def
/len { sequence length } bind def

/coor [
[141.90074158 113.72140503]
[136.54208374 124.67033386]
[128.39016724 133.73348999]
[118.06812286 140.21806335]
[106.36495972 143.62838745]
[94.17526245 143.70379639]
[82.43080902 140.43850708]
[74.20043182 152.97888184]
[65.97005463 165.51925659]
[62.33414078 182.07873535]
[45.41529083 183.16903687]
[39.68399429 167.21319580]
[53.42968369 157.28887939]
[61.66006088 144.74850464]
[69.89044189 132.20812988]
[65.90583038 127.95598602]
[62.51679611 123.21549225]
[59.78253937 118.06945801]
[57.75081635 112.60777283]
[56.45712280 106.92585754]
[41.45843124 106.72785950]
[26.45973778 106.52986908]
[11.46104527 106.33187103]
[-3.53764820 106.13388062]
[-12.28598785 109.17968750]
[-18.92827034 105.72747803]
[-33.91651154 105.13362885]
[-48.90475082 104.53978729]
[-63.16062927 112.64546204]
[-77.16953278 104.12004089]
[-76.52029419 87.73374939]
[-61.88080215 80.34339905]
[-48.31090927 89.55154419]
[-33.32266617 90.14539337]
[-18.33442688 90.73923492]
[-3.33965445 91.13518524]
[11.65903854 91.33318329]
[26.65773201 91.53117371]
[41.65642548 91.72917175]
[56.65511703 91.92716217]
[65.15826416 72.98143768]
[81.39067078 60.02948380]
[101.75135040 55.94455338]
[121.72351837 61.63285065]
[136.87655640 75.83248138]
[150.63815308 69.86435699]
[154.14509583 56.78208542]
[164.42280579 48.26390076]
[177.53906250 47.27541351]
[188.64247131 53.95569611]
[202.55680847 48.35292053]
[216.47116089 42.75014496]
[230.38549805 37.14736557]
[237.61056519 6.25105524]
[264.95831299 -9.26694393]
[266.14508057 -24.21992302]
[267.33184814 -39.17290497]
[268.51858521 -54.12588501]
[259.24340820 -67.21596527]
[263.83288574 -82.58853912]
[278.76641846 -88.45108032]
[292.58825684 -80.30635071]
[294.69546509 -64.40228271]
[283.47155762 -52.93912888]
[282.28482056 -37.98614883]
[281.09805298 -23.03316879]
[279.91131592 -8.08018780]
[285.96453857 -5.83429813]
[291.56484985 -2.62152338]
[296.55911255 1.47027576]
[300.81076050 6.32919979]
[304.20349121 11.82236958]
[318.63085938 7.71742487]
[333.05825806 3.61248016]
[347.48562622 -0.49246460]
[352.68392944 -12.99935913]
[363.99334717 -20.09072495]
[377.12561035 -19.34429359]
[387.25317383 -11.26072979]
[401.78390503 -14.98340702]
[416.31460571 -18.70608330]
[430.84533691 -22.42876053]
[442.18338013 -34.27700043]
[458.04684448 -30.11978149]
[462.11676025 -14.23369122]
[450.20632935 -2.96097970]
[434.56802368 -7.89804506]
[420.03729248 -4.17536831]
[405.50659180 -0.45269167]
[390.97586060 3.26998496]
[383.09329224 18.06156921]
[366.64486694 22.72575378]
[351.59057617 13.93492031]
[337.16320801 18.03986549]
[322.73580933 22.14480972]
[308.30844116 26.24975395]
[308.32455444 33.15014267]
[307.12487793 39.95399857]
[304.74389648 46.44852066]
[301.25311279 52.43005371]
[296.75891113 57.71047974]
[291.39923096 62.12312317]
[285.33947754 65.52802277]
[278.76721191 67.81636810]
[271.88653564 68.91395569]
[264.91171265 68.78363037]
[258.06036377 67.42649841]
[251.54685974 64.88199615]
[245.57550049 61.22676849]
[240.33413696 56.57233429]
[235.98826599 51.06170654]
[222.07392883 56.66448593]
[208.15959167 62.26726151]
[194.24525452 67.87004089]
[188.37805176 83.57042694]
[172.68661499 90.35892487]
[156.60627747 83.62595367]
[142.84468079 89.59407806]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 15]
[8 14]
[9 13]
[20 40]
[21 39]
[22 38]
[23 37]
[24 36]
[26 35]
[27 34]
[28 33]
[45 118]
[46 117]
[50 114]
[51 113]
[52 112]
[53 111]
[55 67]
[56 66]
[57 65]
[58 64]
[72 96]
[73 95]
[74 94]
[75 93]
[79 90]
[80 89]
[81 88]
[82 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
