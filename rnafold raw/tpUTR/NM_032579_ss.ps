%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 18:05:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGGAGGAGGCUGAGAACUCAGUUUUGUGACCAUGACAGUAAUGAAACCAGGGUCCCAACCAAGAAAUCUAACUCAAACGUCCCACUUCAUUUGUUCCAUUCCUGAUUCUUGGGUAAUAAAGACAAACUUUGUACCUC\
) } def
/len { sequence length } bind def

/coor [
[187.22760010 208.12248230]
[177.10754395 197.05070496]
[166.98747253 185.97891235]
[156.86741638 174.90713501]
[146.74736023 163.83534241]
[136.62730408 152.76356506]
[126.38365936 141.80601501]
[116.01772308 130.96409607]
[105.65177917 120.12216949]
[90.65272522 119.95387268]
[80.04612732 130.56047058]
[69.43952179 141.16708374]
[58.83292007 151.77368164]
[48.22631836 162.38027954]
[37.61971664 172.98687744]
[33.90026474 188.95866394]
[18.13209343 193.46385193]
[6.53614426 181.86790466]
[11.04133797 166.09973145]
[27.01311684 162.38027954]
[37.61971664 151.77368164]
[48.22631836 141.16708374]
[58.83292007 130.56047058]
[69.43952179 119.95387268]
[80.04612732 109.34727478]
[76.87259674 94.68682861]
[62.82907486 89.41620636]
[48.78555298 84.14558411]
[33.14665604 86.54048157]
[23.94963264 74.82450867]
[9.90610981 69.55388641]
[-4.13741302 64.28326416]
[-18.18093681 59.01263809]
[-33.81983185 61.40753555]
[-43.01685333 49.69156265]
[-57.06037903 44.42094040]
[-67.71789551 55.29922867]
[-81.88101196 60.89620209]
[-97.09587097 60.24214554]
[-110.72642517 53.45038223]
[-120.41107941 41.69762421]
[-124.47191620 27.02010727]
[-122.20537567 11.96080303]
[-114.00414276 -0.87117630]
[-101.28913879 -9.25261116]
[-86.26330566 -11.73136711]
[-71.52996063 -7.87798595]
[-59.64175415 1.63991201]
[-52.65837860 15.17329311]
[-51.78975677 30.37741661]
[-37.74623108 35.64804077]
[-23.11182404 32.87615204]
[-12.91031361 44.96911621]
[1.13320911 50.23973846]
[15.17673206 55.51036072]
[29.22025490 60.78098297]
[43.85466385 58.00909424]
[54.05617523 70.10205841]
[68.09969330 75.37268066]
[82.14321899 80.64330292]
[72.34574127 69.28507233]
[58.53514862 63.43122482]
[47.90155029 52.85168839]
[41.97738647 39.07110977]
[41.61640930 24.07545471]
[46.87063599 10.02578926]
[56.98286819 -1.05314565]
[70.49579620 -7.56473112]
[85.46203613 -8.57056236]
[99.72475433 -3.92568707]
[111.22850800 5.70050859]
[118.31546021 18.92076302]
[119.96427917 33.82986832]
[115.93735504 48.27922440]
[106.81407166 60.18733978]
[103.89817810 74.90119934]
[113.51131439 63.38652802]
[123.12444305 51.87185669]
[132.73757935 40.35718536]
[135.64227295 24.80490685]
[149.73837280 19.99353027]
[145.81648254 4.98025656]
[151.49952698 -9.45866966]
[164.60226440 -17.77118683]
[180.08642578 -16.76096153]
[191.99801636 -6.81644630]
[195.75682068 8.23849010]
[189.91746521 22.61491585]
[176.72532654 30.78480530]
[161.25305176 29.60666466]
[159.03594971 44.33533478]
[144.25225830 49.97031784]
[134.63911438 61.48498917]
[125.02598572 72.99966431]
[115.41284943 84.51432800]
[120.34125519 97.40682220]
[116.49370575 109.75623322]
[126.85964203 120.59815216]
[137.22558594 131.44007874]
[145.48989868 135.52545166]
[147.69909668 142.64350891]
[157.81915283 153.71528625]
[167.93920898 164.78707886]
[178.05926514 175.85885620]
[188.17932129 186.93064880]
[198.29937744 198.00242615]
[207.88339233 195.57089233]
[217.63085938 196.83718872]
[226.17356873 201.58027649]
[232.32838440 209.09408569]
[235.26110840 218.29244995]
[234.59933472 227.86589050]
[230.47921753 236.46812439]
[239.56607056 248.40249634]
[248.65292358 260.33685303]
[257.73977661 272.27124023]
[266.82662964 284.20559692]
[274.58157349 289.19061279]
[275.97988892 296.51123047]
[284.79666138 308.64648438]
[293.61343384 320.78173828]
[302.43023682 332.91699219]
[311.24700928 345.05224609]
[326.80383301 348.97201538]
[333.30731201 363.63775635]
[325.76852417 377.79919434]
[309.97061157 380.59289551]
[298.03231812 369.87573242]
[299.11175537 353.86904907]
[290.29495239 341.73379517]
[281.47817993 329.59854126]
[272.66140747 317.46328735]
[263.84463501 305.32803345]
[254.89225769 293.29244995]
[245.80540466 281.35809326]
[236.71855164 269.42370605]
[227.63169861 257.48934937]
[218.54484558 245.55497742]
[198.19580078 244.65751648]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 106]
[2 105]
[3 104]
[4 103]
[5 102]
[6 101]
[7 99]
[8 98]
[9 97]
[10 25]
[11 24]
[12 23]
[13 22]
[14 21]
[15 20]
[26 60]
[27 59]
[28 58]
[30 56]
[31 55]
[32 54]
[33 53]
[35 51]
[36 50]
[76 95]
[77 94]
[78 93]
[79 92]
[81 90]
[113 138]
[114 137]
[115 136]
[116 135]
[117 134]
[119 133]
[120 132]
[121 131]
[122 130]
[123 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
