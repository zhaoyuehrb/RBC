%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 13:06:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUUAAAGACGUCCUUGACUCAGUACUAUAGCUGUAAGGAGAAGCUGAGAAAUGAUACCCAGGAGCAGCAGGCUUUACGUCUUCAGCCUAAAACCUAAAAAAAAAAAAAAAAAAAAAAAUUUAAAACAGCUAUUAAACUGAAAGCAUCUGUAA\
) } def
/len { sequence length } bind def

/coor [
[74.58280182 362.81234741]
[72.25108337 347.99218750]
[66.01985168 361.63665771]
[59.78862762 375.28115845]
[53.55740356 388.92562866]
[47.32617950 402.57009888]
[55.07340622 416.01480103]
[53.40497208 431.44192505]
[42.96242142 442.91940308]
[27.76112938 446.03393555]
[13.64630127 439.58792114]
[6.04537725 426.05996704]
[7.88106823 410.65185547]
[18.44751358 399.28833008]
[33.68169785 396.33886719]
[39.91292572 382.69439697]
[46.14414978 369.04992676]
[52.37537384 355.40545654]
[58.60659790 341.76095581]
[62.83258820 327.36856079]
[64.96730804 312.52124023]
[67.10203552 297.67391968]
[69.23675537 282.82659912]
[71.37147522 267.97927856]
[60.57917023 257.74874878]
[57.84815598 242.94990540]
[64.43187714 229.22007751]
[77.99449921 221.91517639]
[80.12921906 207.06785583]
[82.26393890 192.22053528]
[84.39866638 177.37321472]
[86.53338623 162.52589417]
[88.66810608 147.67857361]
[90.80283356 132.83125305]
[92.93755341 117.98393250]
[86.98423004 131.75193787]
[74.32348633 139.79591370]
[59.33053970 139.33610535]
[47.18652725 130.53138733]
[42.08808899 116.42444611]
[45.79710770 101.89023590]
[57.03184509 91.95138550]
[71.90988922 90.04249573]
[85.29004669 96.82345581]
[74.15653229 86.77134705]
[63.02302170 76.71923828]
[51.88951111 66.66712952]
[38.78917694 71.66311646]
[24.88174057 70.51964569]
[12.88785362 63.51782990]
[5.12902498 52.07918549]
[3.07834530 38.47739410]
[7.08108950 25.38644600]
[-3.84505725 15.10932064]
[-19.86005783 14.16098690]
[-28.98567009 0.96618760]
[-24.22150803 -14.35315704]
[-9.22222805 -20.04535675]
[4.50600624 -11.74384308]
[6.43206835 4.18317318]
[17.35821533 14.46029854]
[32.68336105 9.42468643]
[48.55179596 12.80724812]
[60.62995911 23.78065872]
[65.57095337 39.43156052]
[61.94161987 55.53361511]
[73.07513428 65.58572388]
[84.20864105 75.63783264]
[95.34215546 85.68994141]
[109.34220123 80.30490112]
[110.86954498 65.38286591]
[112.39688873 50.46082687]
[113.92424011 35.53879166]
[115.45158386 20.61675262]
[102.95465088 11.68801689]
[96.61096954 -2.29959536]
[98.12696075 -17.58348656]
[107.09482574 -30.05236816]
[121.10224915 -36.35217285]
[136.38131714 -34.78828430]
[148.82202148 -25.78138161]
[155.07789612 -11.75427628]
[153.46612549 3.51981187]
[144.42027283 15.93222904]
[130.37362671 22.14409637]
[128.84626770 37.06613541]
[127.31893158 51.98817444]
[125.79158783 66.91020966]
[124.26424408 81.83225250]
[133.99975586 70.42086029]
[145.40830994 60.68203354]
[158.20614624 52.85799408]
[172.07492065 47.14336014]
[186.66967773 43.68026733]
[201.62739563 42.55485916]
[216.57603455 43.79512787]
[231.14376831 47.37022400]
[244.96823120 53.19121933]
[257.70559692 61.11332703]
[269.03900146 70.93950653]
[278.68658447 82.42533112]
[286.40835571 95.28512573]
[292.01223755 109.19901276]
[295.35888672 123.82091522]
[296.36502075 138.78713989]
[295.00561523 153.72541809]
[291.31451416 168.26417542]
[285.38351440 182.04180908]
[277.36010742 194.71560669]
[267.44390869 205.97032166]
[255.88153076 215.52603149]
[242.96058655 223.14505005]
[229.00247192 228.63784790]
[214.35435486 231.86781311]
[199.38058472 232.75462341]
[184.45362854 231.27618408]
[169.94474792 227.46929932]
[156.21482849 221.42863464]
[143.60539246 213.30445862]
[132.43008423 203.29885864]
[122.96685028 191.66067505]
[115.45108032 178.67941284]
[110.06971741 164.67794800]
[106.95661926 150.00454712]
[106.18921661 135.02418518]
[107.78487396 120.11865234]
[105.65015411 134.96597290]
[103.51543427 149.81329346]
[101.38070679 164.66061401]
[99.24598694 179.50793457]
[97.11125946 194.35525513]
[94.97653961 209.20257568]
[92.84181976 224.04989624]
[103.79702759 234.87992859]
[106.24592590 249.90844727]
[99.45622253 263.33840942]
[86.21880341 270.11401367]
[84.08407593 284.96133423]
[81.94935608 299.80865479]
[79.81462860 314.65597534]
[77.67990875 329.50329590]
[87.65185547 318.29791260]
[101.10680389 311.66735840]
[116.06776428 310.58584595]
[130.33647156 315.21228027]
[141.81637573 324.86691284]
[148.82069397 338.13113403]
[150.32026672 353.05596924]
[146.09474182 367.44851685]
[136.76499939 379.19396973]
[123.70188141 386.56655884]
[108.82481384 388.48300171]
[94.31972504 384.66171265]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 19]
[3 18]
[4 17]
[5 16]
[6 15]
[20 141]
[21 140]
[22 139]
[23 138]
[24 137]
[28 133]
[29 132]
[30 131]
[31 130]
[32 129]
[33 128]
[34 127]
[35 126]
[44 69]
[45 68]
[46 67]
[47 66]
[53 61]
[54 60]
[70 89]
[71 88]
[72 87]
[73 86]
[74 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
