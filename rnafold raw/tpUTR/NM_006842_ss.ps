%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 15:09:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCCCUCACACUAGCCCUUUUUUUGGCCCUACGUCUGGAUGCCUGGGCUUCACACAAGAACCACCUCUCCCGCAGUUCCCAAGGACUUGUCAUUUCAUGUUCUUAUUUUAGACCUGUUUUGUAAAUAAAGCUGUUUCCCAAGGAAAGAGAUGAAUAUUUAACACU\
) } def
/len { sequence length } bind def

/coor [
[199.69415283 115.98664856]
[184.74786377 114.71836090]
[169.80157471 113.45007324]
[154.85528564 112.18177795]
[150.33163452 124.98449707]
[142.86901855 136.32830811]
[132.90318298 145.55084229]
[121.01605988 152.11357117]
[107.90177155 155.63327026]
[94.32608032 155.90443420]
[81.08170319 152.91120911]
[68.94200134 146.82839966]
[58.61584091 138.01118469]
[50.70618820 126.97441101]
[36.70417023 132.35432434]
[22.70214844 137.73422241]
[8.70012760 143.11413574]
[-5.30189228 148.49404907]
[-6.41879463 155.37777710]
[-9.60635090 161.52218628]
[-14.51683521 166.32714844]
[-20.63615227 169.33482361]
[-27.33754539 170.27317810]
[-33.94575882 169.08026123]
[-39.80507660 165.90730286]
[-44.34437180 161.10031128]
[-58.86324310 164.86891174]
[-73.38211823 168.63751221]
[-87.82752991 172.67855835]
[-102.19437408 176.99061584]
[-108.21150208 191.42419434]
[-122.12229919 198.56727600]
[-137.35852051 195.04710388]
[-146.72608948 182.52581787]
[-145.80191040 166.91557312]
[-135.02236938 155.58703613]
[-119.47723389 153.88922119]
[-106.50643158 162.62376404]
[-92.13958740 158.31170654]
[-89.11106110 154.56854248]
[-83.68212891 152.71360779]
[-77.15071869 154.11863708]
[-62.63184357 150.35003662]
[-48.11297226 146.58143616]
[-33.75453949 128.43765259]
[-10.68180180 134.49203491]
[3.32021832 129.11212158]
[17.32223892 123.73220825]
[31.32425880 118.35230255]
[45.32627869 112.97238922]
[44.13597488 106.05883789]
[43.81639099 99.05084991]
[44.37250900 92.05766296]
[45.79565430 85.18825531]
[48.06365204 78.54972076]
[51.14115143 72.24551392]
[54.98018265 66.37390137]
[59.52090836 61.02639389]
[64.69255829 56.28634644]
[56.90928650 43.46368790]
[49.12601089 30.64102554]
[41.34273911 17.81836319]
[26.24121857 19.78406525]
[11.64762497 15.43125916]
[0.09038652 5.51409626]
[-6.42813587 -8.24921608]
[-6.77856874 -23.47410011]
[-0.90019697 -37.52275085]
[10.18851566 -47.96115875]
[24.56638145 -52.98080444]
[39.74235153 -51.71200180]
[53.08709335 -44.37458420]
[62.28855133 -32.23979568]
[65.75251770 -17.41006851]
[62.87884140 -2.45473933]
[54.16540146 10.03508949]
[61.94867325 22.85775185]
[69.73194885 35.68041229]
[77.51522064 48.50307465]
[98.59400940 43.82596970]
[119.88037872 47.44270706]
[138.23150635 58.81929398]
[150.93792725 76.27602386]
[156.12358093 97.23549652]
[171.06987000 98.50378418]
[186.01614380 99.77207184]
[200.96243286 101.04036713]
[214.37789917 81.94786835]
[236.40092468 74.60266113]
[258.36520386 81.74625397]
[271.71585083 100.44773102]
[286.63562012 98.89851379]
[301.55541992 97.34929657]
[316.47518921 95.80007935]
[331.39498901 94.25086212]
[346.31475830 92.70164490]
[361.23455811 91.15242767]
[367.62582397 82.28468323]
[377.64532471 78.49900818]
[387.87438965 80.82745361]
[394.96398926 88.25863647]
[409.93148804 87.27172852]
[424.89898682 86.28481293]
[439.86648560 85.29789734]
[454.83398438 84.31098938]
[460.36895752 71.43935394]
[470.86587524 62.25909424]
[484.23257446 58.52400970]
[497.83740234 60.91011810]
[509.02734375 68.89408875]
[515.64544678 80.86667633]
[530.62884521 80.16149139]
[545.61224365 79.45629883]
[560.59570312 78.75111389]
[569.86260986 69.73941803]
[582.38476562 69.48338318]
[591.41363525 77.57382965]
[606.40771484 77.15061951]
[621.40173340 76.72740173]
[636.39575195 76.30419159]
[651.38977051 75.88098145]
[666.38378906 75.45776367]
[680.05761719 66.40466309]
[694.61206055 73.96115875]
[695.07476807 90.35378265]
[680.96972656 98.71920013]
[666.80700684 90.45179749]
[651.81298828 90.87500763]
[636.81896973 91.29821777]
[621.82495117 91.72143555]
[606.83093262 92.14464569]
[591.83685303 92.56785583]
[577.43658447 102.56575775]
[561.30084229 93.73452759]
[546.31744385 94.43971252]
[531.33404541 95.14490509]
[516.35064697 95.85009003]
[509.30624390 110.37084961]
[495.82949829 119.42003632]
[479.53567505 120.45639801]
[464.85336304 113.10363007]
[455.82089233 99.27848816]
[440.85339355 100.26539612]
[425.88589478 101.25231171]
[410.91839600 102.23922729]
[395.95089722 103.22613525]
[380.75479126 115.14260101]
[362.78375244 106.07221222]
[347.86398315 107.62142944]
[332.94418335 109.17064667]
[318.02441406 110.71986389]
[303.10464478 112.26908112]
[288.18484497 113.81829834]
[273.26507568 115.36750793]
[271.74792480 122.85140228]
[268.70867920 129.86897278]
[264.27493286 136.11381531]
[258.63525391 141.31224060]
[252.03118896 145.23521423]
[244.74696350 147.70846558]
[237.09715271 148.62023926]
[229.41314697 147.92633057]
[222.02882385 145.65216064]
[215.26602173 141.89195251]
[209.42045593 136.80477905]
[204.74887085 130.60786438]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 87]
[2 86]
[3 85]
[4 84]
[14 50]
[15 49]
[16 48]
[17 47]
[18 46]
[26 44]
[27 43]
[28 42]
[29 39]
[30 38]
[59 79]
[60 78]
[61 77]
[62 76]
[91 154]
[92 153]
[93 152]
[94 151]
[95 150]
[96 149]
[97 148]
[101 146]
[102 145]
[103 144]
[104 143]
[105 142]
[111 137]
[112 136]
[113 135]
[114 134]
[117 132]
[118 131]
[119 130]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
