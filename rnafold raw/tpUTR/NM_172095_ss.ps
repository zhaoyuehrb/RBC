%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 11:55:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAAUGGAUGGCUUCAAUAUCCUUGGGCCCAGCAAAAGAUAAUGAAGGGAAUUGUUGGAAAUAGAGAAUUGAAAAUAUAAACAUUCAGAUAGAACAAUGUCUGUUCAUUAAAAUUAAAAAGUAUAAGUGUCUAGGCCA\
) } def
/len { sequence length } bind def

/coor [
[52.25188828 195.56059265]
[49.43603516 197.23829651]
[46.59361267 197.71426392]
[37.50676346 209.64863586]
[28.41991234 221.58299255]
[25.67765808 230.38465881]
[18.99283791 233.68016052]
[9.64049053 245.40763855]
[0.28814349 257.13510132]
[-9.06420326 268.86257935]
[-18.41654968 280.59005737]
[-15.14088726 295.88070679]
[-22.50586891 309.67529297]
[-37.03397751 315.46047974]
[-51.86548233 310.50460815]
[-59.99739838 297.14773560]
[-57.59009171 281.69656372]
[-45.78020859 271.44665527]
[-30.14402199 271.23770142]
[-20.79167557 259.51022339]
[-11.43932915 247.78276062]
[-2.08698177 236.05528259]
[7.26536512 224.32780457]
[16.48554420 212.49613953]
[25.57239532 200.56178284]
[34.65924454 188.62741089]
[43.20151138 176.29737854]
[51.18199539 163.59651184]
[59.16247559 150.89566040]
[67.14295959 138.19479370]
[67.36291504 123.30181122]
[81.25640869 115.73336029]
[89.23689270 103.03250122]
[97.07436371 90.24289703]
[104.76786041 77.36616516]
[90.97933960 59.91606522]
[85.73703766 38.34219742]
[89.96561432 16.58627319]
[102.86234283 -1.39054167]
[122.04927826 -12.32885075]
[144.01161194 -14.26197243]
[148.00216675 -28.72141647]
[151.99272156 -43.18085861]
[155.98327637 -57.64030075]
[159.97383118 -72.09974670]
[163.96438599 -86.55918884]
[167.95494080 -101.01863098]
[164.16781616 -116.37989044]
[175.01220703 -126.59010315]
[179.00276184 -141.04954529]
[182.99331665 -155.50898743]
[186.82139587 -170.01229858]
[190.48649597 -184.55763245]
[194.15159607 -199.10298157]
[197.81671143 -213.64831543]
[201.48181152 -228.19366455]
[205.14691162 -242.73901367]
[191.37008667 -248.75970459]
[178.77220154 -256.96600342]
[167.69696045 -267.13403320]
[158.44648743 -278.98638916]
[151.27316284 -292.19976807]
[146.37265015 -306.41366577]
[143.87866211 -321.24032593]
[143.85922241 -336.27526855]
[146.31488037 -351.10833740]
[151.17861938 -365.33483887]
[158.31777954 -378.56671143]
[167.53758240 -390.44296265]
[178.58650208 -400.63958740]
[191.16311646 -408.87841797]
[204.92434692 -414.93472290]
[219.49475098 -418.64321899]
[234.47685242 -419.90280151]
[249.46191406 -418.67907715]
[264.04116821 -415.00543213]
[277.81683350 -408.98208618]
[290.41311646 -400.77334595]
[301.48641968 -390.60321045]
[310.73458862 -378.74905396]
[317.90539551 -365.53430176]
[322.80316162 -351.31945801]
[325.29428101 -336.49230957]
[325.31082153 -321.45736694]
[322.85232544 -306.62478638]
[317.98583984 -292.39920044]
[310.84411621 -279.16870117]
[301.62203979 -267.29425049]
[290.57116699 -257.09973145]
[277.99295044 -248.86332703]
[264.23056030 -242.80969238]
[249.65943909 -239.10397339]
[234.67709351 -237.84729004]
[219.69226074 -239.07389832]
[216.02716064 -224.52856445]
[212.36204529 -209.98321533]
[208.69694519 -195.43786621]
[205.03182983 -180.89253235]
[201.36672974 -166.34718323]
[202.79435730 -159.03219604]
[197.45275879 -151.51843262]
[193.46220398 -137.05899048]
[189.47164917 -122.59954834]
[193.54420471 -108.27252197]
[182.41438293 -97.02807617]
[178.42382812 -82.56863403]
[174.43327332 -68.10919189]
[170.44271851 -53.64974976]
[166.45216370 -39.19030762]
[162.46160889 -24.73086357]
[158.47106934 -10.27142048]
[166.31811523 -5.99969959]
[173.31475830 -0.43514612]
[179.25007629 6.25681686]
[183.94480896 13.87675190]
[187.25663757 22.19714928]
[189.08460999 30.96921730]
[189.37217712 39.93033218]
[188.10888672 48.81188202]
[185.33085632 57.34733582]
[181.11965942 65.28023529]
[175.59996033 72.37190247]
[168.93580627 78.40861511]
[161.32582092 83.20804596]
[152.99717712 86.62478638]
[144.19889832 88.55472565]
[135.19438171 88.93825531]
[126.25350952 87.76206970]
[117.64459229 85.05965424]
[109.95110321 97.93638611]
[108.83197021 105.99152374]
[101.93775177 111.01297760]
[93.95726776 123.71384430]
[93.16649628 139.51527405]
[79.84381866 146.17527771]
[71.86334229 158.87612915]
[63.88285828 171.57699585]
[55.90237808 184.27786255]
[55.91004944 188.80958557]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 26]
[4 25]
[5 24]
[7 23]
[8 22]
[9 21]
[10 20]
[11 19]
[27 138]
[28 137]
[29 136]
[30 135]
[32 133]
[33 132]
[34 130]
[35 129]
[41 111]
[42 110]
[43 109]
[44 108]
[45 107]
[46 106]
[47 105]
[49 103]
[50 102]
[51 101]
[52 99]
[53 98]
[54 97]
[55 96]
[56 95]
[57 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
