%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 06:00:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGAAACCUAUUACCGUACUCACAGCUCAAUGGAACUAAUGCAGAUGUUGCAUAAUAGCCUGCAUUGUAGUCAGUGUGUUCUACAGUGUGUAUCUGGUUCUGCAUGGAAAGCAAUAGUUGUGCAAGUGA\
) } def
/len { sequence length } bind def

/coor [
[51.67929840 369.82598877]
[50.96056747 384.93685913]
[45.60559845 399.08535767]
[36.13901520 410.88531494]
[23.48826218 419.18072510]
[8.89272976 423.15884399]
[-6.21766233 422.42999268]
[-20.36255074 417.06555176]
[-32.15616608 407.59106445]
[-40.44308472 394.93475342]
[-44.41144180 380.33654785]
[-43.67245865 365.22665405]
[-38.29853439 351.08535767]
[-28.81614685 339.29809570]
[-16.15428925 331.01965332]
[-1.55343747 327.06109619]
[13.55596447 327.81018066]
[18.87503815 313.78494263]
[24.19411087 299.75970459]
[29.51318359 285.73446655]
[34.49180222 271.58477783]
[39.12705612 257.31893921]
[43.76231003 243.05308533]
[48.39756775 228.78724670]
[53.03282166 214.52139282]
[57.66807556 200.25555420]
[62.30333328 185.98970032]
[54.88255310 175.38410950]
[54.95787430 162.24513245]
[62.72712708 151.40794373]
[75.51538849 146.99082947]
[80.49400330 132.84115601]
[69.41944122 122.88786316]
[62.99190521 109.45653534]
[62.18813324 94.58818817]
[67.13025665 80.54222107]
[77.06728363 69.45306396]
[90.48916626 63.00582504]
[105.35631561 62.18023300]
[110.33493805 48.03055573]
[115.31355286 33.88087845]
[120.29217529 19.73119926]
[125.27079010 5.58152246]
[130.24940491 -8.56815434]
[135.22802734 -22.71783257]
[123.69843292 -37.85830307]
[123.50273132 -56.73979568]
[134.54147339 -71.87660217]
[152.29629517 -77.37338257]
[156.23690796 -91.84651184]
[160.17752075 -106.31964874]
[164.11813354 -120.79277802]
[168.05874634 -135.26591492]
[171.99935913 -149.73904419]
[165.90917969 -168.88505554]
[180.00180054 -182.03742981]
[183.23855591 -196.68405151]
[186.47532654 -211.33067322]
[178.23977661 -224.55238342]
[181.73097229 -239.36003113]
[194.38659668 -247.12986755]
[197.62336731 -261.77648926]
[200.86012268 -276.42309570]
[204.09689331 -291.06970215]
[207.33364868 -305.71633911]
[210.57041931 -320.36294556]
[213.80717468 -335.00955200]
[208.35212708 -350.47482300]
[219.22198486 -362.75399780]
[235.23478699 -359.21533203]
[239.91792297 -343.49908447]
[228.45379639 -331.77279663]
[225.21704102 -317.12619019]
[221.98027039 -302.47958374]
[218.74351501 -287.83294678]
[215.50674438 -273.18634033]
[212.26998901 -258.53973389]
[209.03321838 -243.89311218]
[217.23606873 -231.51373291]
[214.16218567 -216.61387634]
[201.12193298 -208.09390259]
[197.88517761 -193.44729614]
[194.64840698 -178.80067444]
[200.95890808 -170.60713196]
[201.67803955 -160.06881714]
[196.31988525 -150.71051025]
[186.47248840 -145.79843140]
[182.53187561 -131.32530212]
[178.59126282 -116.85217285]
[174.65065002 -102.37903595]
[170.71003723 -87.90590668]
[166.76943970 -73.43276978]
[175.39225769 -66.09005737]
[180.63305664 -55.99176025]
[181.68330383 -44.61120987]
[178.34910583 -33.62545776]
[171.08554077 -24.66815186]
[160.93501282 -19.08660316]
[149.37770081 -17.73921394]
[144.39907837 -3.58953691]
[139.42047119 10.56014061]
[134.44184875 24.70981789]
[129.46322632 38.85949326]
[124.48461151 53.00917053]
[119.50599670 67.15885162]
[130.58056641 77.11213684]
[137.00808716 90.54346466]
[137.81187439 105.41181183]
[132.86973572 119.45777893]
[122.93271637 130.54693604]
[109.51083374 136.99417114]
[94.64368439 137.81976318]
[89.66506195 151.96945190]
[97.51905823 167.54620361]
[91.83730316 183.68356323]
[76.56917572 190.62495422]
[71.93392181 204.89080811]
[67.29866791 219.15664673]
[62.66341400 233.42250061]
[58.02816010 247.68833923]
[53.39290619 261.95419312]
[48.75764847 276.22003174]
[49.78193665 282.91827393]
[47.53933334 288.27947998]
[43.53842926 291.05352783]
[38.21935272 305.07876587]
[32.90028000 319.10403442]
[27.58120728 333.12927246]
[39.38750839 342.58795166]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 128]
[18 127]
[19 126]
[20 125]
[21 122]
[22 121]
[23 120]
[24 119]
[25 118]
[26 117]
[27 116]
[31 113]
[32 112]
[39 105]
[40 104]
[41 103]
[42 102]
[43 101]
[44 100]
[45 99]
[49 92]
[50 91]
[51 90]
[52 89]
[53 88]
[54 87]
[56 83]
[57 82]
[58 81]
[61 78]
[62 77]
[63 76]
[64 75]
[65 74]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
