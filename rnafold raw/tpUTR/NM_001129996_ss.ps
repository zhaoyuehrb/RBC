%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 17:03:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUAUACAUAUUUAUGGAGUGUGAAAUUUGAUACAUGUAUAUAAUGUGUGCUGAUUAAAUCAGUUUAAUUUCACCUGAA\
) } def
/len { sequence length } bind def

/coor [
[33.53526306 304.12103271]
[24.79254341 316.42825317]
[13.05285931 325.91940308]
[-0.81262982 331.89025879]
[-15.77501297 333.89764404]
[-30.72397995 331.79266357]
[-44.55022049 325.73150635]
[-56.22773361 316.16394043]
[-64.88997650 303.79995728]
[-69.89414215 289.55703735]
[-70.86889648 274.49209595]
[-67.74190521 259.72305298]
[-60.74520874 246.34588623]
[-50.39801025 235.35324097]
[-37.46813965 227.56086731]
[-22.91508293 223.54701233]
[-7.81877089 223.60951233]
[6.70055151 227.74374390]
[14.53802967 214.95414734]
[15.36905098 207.40644836]
[22.94266319 201.82481384]
[31.27621651 189.35276794]
[39.60977173 176.88072205]
[47.94332504 164.40867615]
[56.27687836 151.93663025]
[64.61042786 139.46458435]
[72.94398499 126.99254608]
[81.27753448 114.52050018]
[74.10262299 97.95846558]
[80.65714264 79.39420319]
[99.52770233 69.45722198]
[99.52770233 54.45721817]
[99.52770233 39.45721817]
[99.52770233 24.45722008]
[99.52770233 9.45721912]
[99.52770233 -5.54278040]
[87.43312073 -15.45515060]
[84.59049988 -30.83219719]
[92.34204102 -44.41334534]
[107.02770233 -49.78599548]
[121.71336365 -44.41334534]
[129.46490479 -30.83219719]
[126.62228394 -15.45515060]
[114.52770233 -5.54278040]
[114.52770233 9.45721912]
[114.52770233 24.45722008]
[114.52770233 39.45721817]
[114.52770233 54.45721817]
[114.52770233 69.45722198]
[126.30745697 78.74362946]
[140.89300537 75.24195099]
[155.47856140 71.74026489]
[170.06410217 68.23858643]
[184.64965820 64.73690796]
[199.23519897 61.23522568]
[213.22520447 51.65837479]
[226.30061340 62.45051193]
[219.54986572 78.00247955]
[202.73687744 75.82077789]
[188.15133667 79.32245636]
[173.56578064 82.82413483]
[158.98023987 86.32581329]
[144.39468384 89.82749939]
[129.80914307 93.32917786]
[125.25090790 112.69395447]
[110.56916046 123.73046112]
[93.74958038 122.85405731]
[85.41603088 135.32609558]
[77.08247375 147.79814148]
[68.74892426 160.27018738]
[60.41536713 172.74223328]
[52.08181381 185.21427917]
[43.74826050 197.68632507]
[35.41470718 210.15837097]
[27.32763290 222.79162598]
[19.49015427 235.58122253]
[29.76541519 246.64112854]
[36.67469025 260.06365967]
[39.70526123 274.85278320]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 76]
[19 75]
[21 74]
[22 73]
[23 72]
[24 71]
[25 70]
[26 69]
[27 68]
[28 67]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
[36 44]
[50 64]
[51 63]
[52 62]
[53 61]
[54 60]
[55 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
