%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 14:51:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAAACACUCUACACCUCUUAAAUCAAGGUCAUGUAGAUAAUGACUUUGUUAUAAAUGCUACAGCUGUGAGAGCUUGUUUCUGAUUUCAUUGUUCGCUUCUGUAAUUCUGAAAAACUUUAAACUGGUAGAACUUGGAAUAAAUAAUUUGUUUUAAUUA\
) } def
/len { sequence length } bind def

/coor [
[309.60784912 132.12019348]
[323.22094727 125.82669067]
[308.29318237 124.35643768]
[293.36538696 122.88617706]
[278.43762207 121.41592407]
[263.50985718 119.94566345]
[248.58209229 118.47541046]
[233.65431213 117.00514984]
[218.70056152 115.82826233]
[203.72657776 114.94520569]
[188.75259399 114.06214142]
[173.77861023 113.17907715]
[166.88043213 115.93896484]
[158.52018738 112.12882996]
[143.56642151 110.95194244]
[128.61267090 109.77505493]
[126.30407715 117.06358337]
[122.11177826 123.77964783]
[116.18623352 129.43193054]
[108.80655670 133.57090759]
[100.36843872 135.82249451]
[91.36322021 135.91821289]
[82.34932709 133.71925354]
[73.91770172 129.23300171]
[66.65325928 122.62009430]
[61.09504318 114.19136810]
[46.14128113 115.36825562]
[31.18752289 116.54514313]
[16.23376274 117.72202301]
[1.28000247 118.89891052]
[-13.67375755 120.07579803]
[-28.62751770 121.25268555]
[-43.58127594 122.42957306]
[-58.53503799 123.60646057]
[-67.46791840 136.44146729]
[-82.57453918 140.48179626]
[-96.72200012 133.81971741]
[-103.23030853 119.60086060]
[-99.02644348 104.53894043]
[-86.09533691 95.74572754]
[-70.54267120 97.37311554]
[-59.71192551 108.65269470]
[-44.75816345 107.47581482]
[-29.80440331 106.29892731]
[-14.85064411 105.12203979]
[0.10311604 103.94515228]
[15.05687618 102.76826477]
[30.01063538 101.59137726]
[44.96439743 100.41448975]
[59.91815567 99.23760986]
[62.85616684 92.33702087]
[49.05499649 86.46099854]
[35.25382614 80.58496857]
[21.45275307 74.70871735]
[27.32923508 60.90774155]
[41.12985229 66.78379822]
[54.93102264 72.65982819]
[68.73219299 78.53585052]
[71.67020416 71.63526154]
[62.15430832 60.04010773]
[46.62400818 54.77305603]
[43.68605804 38.63922501]
[56.36277008 28.23571777]
[71.61342621 34.26476669]
[73.74946594 50.52420807]
[83.26536560 62.11936569]
[116.90226746 68.41359711]
[129.78955078 94.82129669]
[144.74331665 95.99818420]
[159.69706726 97.17507172]
[174.66166687 98.20509338]
[189.63565063 99.08815765]
[204.60963440 99.97121429]
[219.58361816 100.85427856]
[225.73223877 98.20414734]
[231.42822266 98.97907257]
[235.12457275 102.07737732]
[250.05235291 103.54763794]
[264.98010254 105.01789093]
[279.90789795 106.48815155]
[294.83566284 107.95840454]
[309.76342773 109.42866516]
[324.69119263 110.89892578]
[333.21472168 106.98307037]
[341.25833130 109.26720428]
[355.61242676 104.91293335]
[369.96655273 100.55866241]
[384.32064819 96.20439148]
[398.67474365 91.85012054]
[413.02883911 87.49584961]
[419.80984497 76.48422241]
[431.89459229 73.17159271]
[442.63140869 78.81370544]
[457.06823730 74.74209595]
[471.50506592 70.67049408]
[485.94189453 66.59888458]
[500.33807373 62.38574219]
[514.69219971 58.03147125]
[529.04626465 53.67720413]
[532.61938477 38.80508041]
[543.08776855 27.79097366]
[557.56732178 23.52386856]
[572.14117432 27.05370140]
[582.91876221 37.33515930]
[597.27288818 32.98088837]
[611.62695312 28.62661934]
[613.92144775 13.53694820]
[622.54290771 0.94200093]
[635.77966309 -6.65748501]
[651.00341797 -7.75262642]
[665.19158936 -2.12598205]
[675.52703857 9.10527325]
[679.95770264 23.71116638]
[677.60382080 38.79168701]
[668.93280029 51.35258484]
[655.66625977 58.89988327]
[640.43829346 59.93506622]
[626.27239990 54.25259399]
[615.98126221 42.98072433]
[601.62713623 47.33499527]
[587.27307129 51.68926620]
[584.02386475 66.22571564]
[573.86724854 77.25744629]
[559.45721436 81.75389862]
[544.63397217 78.41190338]
[533.40057373 68.03131104]
[519.04644775 72.38557434]
[504.69235229 76.73984528]
[499.17578125 81.71672821]
[490.01351929 81.03571320]
[475.57669067 85.10732269]
[461.13986206 89.17892456]
[446.70303345 93.25053406]
[435.18560791 106.46191406]
[417.38311768 101.84996033]
[403.02902222 106.20422363]
[388.67492676 110.55849457]
[374.32080078 114.91276550]
[359.96670532 119.26703644]
[345.61260986 123.62130737]
[360.19430542 127.13900757]
[373.32897949 134.38331604]
[384.08370972 144.83967590]
[391.69464111 157.76539612]
[395.62109375 172.24237061]
[395.58425903 187.24232483]
[391.58673096 201.69982910]
[383.91241455 214.58799744]
[373.10644531 224.99140930]
[359.93630981 232.17111206]
[345.33752441 235.61714172]
[330.34698486 235.08473206]
[316.02941895 230.61170959]
[303.40185547 222.51577759]
[293.36114502 211.37197876]
[286.62048340 197.97184753]
[283.65866089 183.26716614]
[284.68606567 168.30239868]
[289.62966919 154.14044189]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 83]
[3 82]
[4 81]
[5 80]
[6 79]
[7 78]
[8 77]
[9 74]
[10 73]
[11 72]
[12 71]
[14 70]
[15 69]
[16 68]
[26 50]
[27 49]
[28 48]
[29 47]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[59 66]
[60 65]
[85 140]
[86 139]
[87 138]
[88 137]
[89 136]
[90 135]
[93 133]
[94 132]
[95 131]
[96 130]
[97 128]
[98 127]
[99 126]
[104 121]
[105 120]
[106 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
