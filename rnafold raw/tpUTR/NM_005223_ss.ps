%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:17:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGCCCCUCCCCACACCAGUUGAACUGCAGGAAGAGAGGACCCAUCCUGCCACAGGACCCAGAAAAAAAGCCCAACACACACUCGGGUUAAGAAAUACCUUUAAAUUUAGGUAAAUAAAGCUCAAGGAGGUGGGGCUGUCA\
) } def
/len { sequence length } bind def

/coor [
[106.88606262 369.58319092]
[106.22719574 354.59765625]
[105.56833649 339.61212158]
[104.90946960 324.62661743]
[104.25060272 309.64108276]
[103.59174347 294.65557861]
[102.93287659 279.67004395]
[102.27401733 264.68450928]
[93.98514557 252.30938721]
[101.10881805 238.18267822]
[100.44995880 223.19715881]
[99.62652588 208.21977234]
[98.63862610 193.25233459]
[77.02148438 190.38716125]
[56.66057205 182.58053589]
[38.66901779 170.25924683]
[24.03041840 154.09690857]
[13.54506397 134.97708130]
[7.78618717 113.94507599]
[7.06862450 92.15068817]
[-7.72821999 89.69032288]
[-22.52506447 87.22995758]
[-31.35726738 99.62969971]
[-44.64318085 106.93527985]
[-59.72181320 107.74462128]
[-73.59953308 101.95067596]
[-83.54441833 90.75206757]
[-87.62398529 76.40554810]
[-102.42082977 73.94518280]
[-117.21767426 71.48481750]
[-132.01452637 69.02445221]
[-146.81137085 66.56408691]
[-161.60821533 64.10372162]
[-176.49058533 69.47267151]
[-187.77636719 59.75257874]
[-198.73774719 70.73565674]
[-214.06663513 73.14497375]
[-227.86877441 66.05409241]
[-234.83695984 52.18960571]
[-232.29177856 36.88269043]
[-221.21191406 26.01916695]
[-205.85778809 23.77628136]
[-192.13337708 31.01647186]
[-185.31600952 44.95573425]
[-171.49200439 39.41080856]
[-159.14784241 49.30688095]
[-144.35099792 51.76724625]
[-129.55415344 54.22761154]
[-114.75730896 56.68797302]
[-99.96046448 59.14833832]
[-85.16362000 61.60870361]
[-76.66094971 49.35431671]
[-63.62725067 41.97650146]
[-48.62130737 40.98522568]
[-34.61593246 46.63054657]
[-24.40903473 57.84242630]
[-20.06469917 72.43311310]
[-5.26785517 74.89347839]
[9.52898884 77.35384369]
[13.82657242 64.33499146]
[19.98635483 52.08686066]
[27.87522316 40.87412643]
[37.32270050 30.93909645]
[48.12462616 22.49646568]
[60.04757309 15.72867584]
[72.83389282 10.78198147]
[86.20726013 7.76327896]
[99.87869263 6.73780203]
[113.55274963 7.72771120]
[126.93392944 10.71161461]
[132.40673828 -3.25435662]
[137.87954712 -17.22032738]
[143.35235596 -31.18629837]
[148.82516479 -45.15226746]
[138.75407410 -56.67753220]
[135.20390320 -71.56561279]
[138.99044800 -86.39533234]
[149.24360657 -97.75893402]
[163.60725403 -103.04514313]
[178.78074646 -101.03923798]
[191.27732849 -92.20214081]
[198.22537231 -78.56457520]
[198.02825928 -63.26033401]
[190.73129272 -49.80622864]
[178.01126099 -41.29391479]
[162.79113770 -39.67945862]
[157.31832886 -25.71348763]
[151.84552002 -11.74751663]
[146.37271118 2.21845412]
[140.89990234 16.18442535]
[151.96813965 22.55863762]
[162.06167603 30.38533592]
[170.99118042 39.51772308]
[178.58917236 49.78451538]
[184.71315002 60.99314880]
[189.24826050 72.93338776]
[192.10942078 85.38129425]
[207.06509399 84.22904968]
[222.02078247 83.07680511]
[236.97645569 81.92455292]
[251.93214417 80.77230835]
[259.94656372 67.48515320]
[274.25344849 61.47740173]
[289.35147095 65.05916595]
[299.43515015 76.85317993]
[300.62713623 92.32440948]
[292.46902466 105.52384186]
[278.09783936 111.37603760]
[263.03955078 107.63069916]
[253.08438110 95.72798920]
[238.12870789 96.88023376]
[223.17301941 98.03247833]
[208.21734619 99.18472290]
[193.26167297 100.33697510]
[192.66848755 110.50725555]
[190.96955872 120.55215454]
[188.18513489 130.35182190]
[184.34846497 139.78932190]
[179.50529480 148.75202942]
[173.71343994 157.13301086]
[167.04200745 164.83226013]
[159.57058716 171.75790405]
[151.38836670 177.82730103]
[142.59294128 182.96803284]
[133.28929138 187.11874390]
[123.58840942 190.22991943]
[113.60606384 192.26445007]
[114.59395599 207.23187256]
[118.30625916 215.66459656]
[115.43547821 222.53828430]
[116.09434509 237.52381897]
[124.43033600 250.97080994]
[117.25953674 264.02566528]
[117.91840363 279.01116943]
[118.57726288 293.99670410]
[119.23612976 308.98223877]
[119.89498901 323.96774292]
[120.55385590 338.95327759]
[121.21272278 353.93878174]
[121.87158203 368.92431641]
[128.60780334 384.48257446]
[115.52233887 395.26251221]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 140]
[2 139]
[3 138]
[4 137]
[5 136]
[6 135]
[7 134]
[8 133]
[10 131]
[11 130]
[12 128]
[13 127]
[20 59]
[21 58]
[22 57]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[35 44]
[70 90]
[71 89]
[72 88]
[73 87]
[74 86]
[97 114]
[98 113]
[99 112]
[100 111]
[101 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
