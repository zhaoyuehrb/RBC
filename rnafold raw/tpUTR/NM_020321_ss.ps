%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:01:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCCUGGACAUGCCUAGCCUGCACGUAGCUUUUCCGUCUUCACCCCAAAUAAAGUCCUAAUGCAUCAGC\
) } def
/len { sequence length } bind def

/coor [
[109.63308716 128.95861816]
[101.47959137 130.48292542]
[93.21679688 129.75543213]
[85.45507812 126.82988739]
[78.76781464 121.92240143]
[66.00428772 129.80227661]
[53.24076462 137.68215942]
[40.47724152 145.56204224]
[37.08318329 160.99757385]
[23.72381783 169.44168091]
[8.32502460 165.88461304]
[0.02263313 152.43672180]
[3.74230456 137.07640076]
[17.27722359 128.91665649]
[32.59736252 132.79850769]
[45.36088562 124.91863251]
[58.12440872 117.03875732]
[70.88793182 109.15888214]
[72.63826752 86.48212433]
[89.58531952 71.31320953]
[112.31669617 72.07695007]
[121.55742645 60.26133347]
[130.79815674 48.44571304]
[140.03889465 36.63009644]
[133.70692444 21.52251625]
[135.75285339 5.36342764]
[145.53816223 -7.54145288]
[160.37460327 -13.80019474]
[176.26217651 -11.82594776]
[184.97122192 -24.03875160]
[193.68026733 -36.25155258]
[202.38931274 -48.46435928]
[211.09835815 -60.67716217]
[202.08374023 -72.82590485]
[197.26643372 -87.16635895]
[197.11836243 -102.29359436]
[201.65405273 -116.72560120]
[210.42913818 -129.04847717]
[222.58392334 -138.05493164]
[236.92759705 -142.86264038]
[252.05493164 -143.00056458]
[266.48388672 -138.45521545]
[278.80087280 -129.67187500]
[287.79919434 -117.51105499]
[292.59729004 -103.16416168]
[292.72509766 -88.03673553]
[288.17004395 -73.61082458]
[279.37847900 -61.29972839]
[267.21163940 -52.30955887]
[252.86151123 -47.52108383]
[237.73400879 -47.40342712]
[223.31115723 -51.96811676]
[214.60211182 -39.75531387]
[205.89306641 -27.54251099]
[197.18402100 -15.32970715]
[188.47499084 -3.11690426]
[194.99935913 9.07417583]
[195.56820679 22.95648003]
[190.00990295 35.76304245]
[179.37992859 44.91596985]
[165.76084900 48.54529953]
[151.85450745 45.87082672]
[142.61378479 57.68644714]
[133.37304688 69.50206757]
[124.13231659 81.31768799]
[128.27157593 88.50583649]
[130.32238770 96.54307556]
[130.13327026 104.83567810]
[127.71817780 112.77106476]
[123.25553131 119.76304626]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 18]
[6 17]
[7 16]
[8 15]
[21 65]
[22 64]
[23 63]
[24 62]
[29 56]
[30 55]
[31 54]
[32 53]
[33 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
