%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 12:41:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUACCAGGAAUGUUUAAAGCACAAAGGACUUUGGGUGUGUGUGCAUGCACAUGUGUGUGUUUUCCAUGAGGCACUGCUUUUUAUGCAUUUCCCUCCCCCCUCUCAUCUUUAGAACAUUUAGACAUUAAAGCAAGUUUCUGGUGAGCAAUGGAAUUCACAA\
) } def
/len { sequence length } bind def

/coor [
[83.33239746 231.00744629]
[93.11079407 219.48033142]
[105.85334015 211.34898376]
[101.85482788 196.89173889]
[97.85631561 182.43449402]
[93.85779572 167.97724915]
[89.85928345 153.52000427]
[85.86077118 139.06275940]
[81.86225128 124.60552216]
[87.56542206 95.77690125]
[78.88955688 83.54050446]
[70.21369934 71.30410767]
[61.53784180 59.06770325]
[52.86198425 46.83130646]
[44.18612671 34.59490585]
[35.51026917 22.35850525]
[26.83440971 10.12210560]
[18.04103661 -2.03011942]
[9.13096428 -14.09704208]
[0.22089233 -26.16396523]
[-8.68917942 -38.23088837]
[-23.66180801 -35.47738266]
[-38.28557968 -39.48141098]
[-49.67410660 -49.39714050]
[-55.60370636 -63.21744537]
[-54.94750595 -78.18002319]
[-47.88916397 -91.31948090]
[-56.79923630 -103.38640594]
[-65.70930481 -115.45332336]
[-80.68193817 -112.69982147]
[-95.30570984 -116.70384979]
[-106.69423676 -126.61958313]
[-112.62383270 -140.43988037]
[-111.96763611 -155.40246582]
[-104.90929413 -168.54191589]
[-113.81936646 -180.60884094]
[-122.72943878 -192.67576599]
[-133.42556763 -191.57788086]
[-143.52732849 -195.01754761]
[-151.21328735 -202.30317688]
[-155.12751770 -212.05628967]
[-154.61854553 -222.47210693]
[-149.84675598 -231.65332031]
[-158.04460144 -244.21498108]
[-166.24246216 -256.77664185]
[-174.44030762 -269.33828735]
[-182.63816833 -281.89996338]
[-190.83601379 -294.46160889]
[-199.03387451 -307.02325439]
[-212.96885681 -305.53744507]
[-226.11831665 -310.18823242]
[-235.92672729 -320.01116943]
[-240.51406860 -333.04251099]
[-239.03608704 -346.71179199]
[-231.83900452 -358.34869385]
[-239.79324341 -371.06600952]
[-247.86965942 -383.70608521]
[-256.06750488 -396.26773071]
[-264.26538086 -408.82937622]
[-272.46322632 -421.39105225]
[-286.48489380 -428.71929932]
[-286.96109009 -443.60629272]
[-295.15893555 -456.16793823]
[-310.67483521 -459.17340088]
[-319.45169067 -472.31652832]
[-316.28237915 -487.79977417]
[-303.04718018 -496.43719482]
[-287.59829712 -493.10437012]
[-279.10128784 -479.77856445]
[-282.59729004 -464.36578369]
[-274.39944458 -451.80413818]
[-260.96414185 -445.37438965]
[-259.90158081 -429.58889771]
[-251.70372009 -417.02725220]
[-243.50585938 -404.46557617]
[-235.30801392 -391.90393066]
[-228.98858643 -388.00234985]
[-227.07592773 -379.02023315]
[-219.12168884 -366.30291748]
[-203.01406860 -367.27505493]
[-188.52449036 -359.96160889]
[-179.63774109 -346.26812744]
[-178.85086060 -329.86886597]
[-186.47221375 -315.22113037]
[-178.27435303 -302.65945435]
[-170.07650757 -290.09780884]
[-161.87866211 -277.53616333]
[-153.68080139 -264.97448730]
[-145.48295593 -252.41284180]
[-137.28509521 -239.85118103]
[-118.01116943 -237.31192017]
[-106.58131409 -221.21304321]
[-110.66251373 -201.58583069]
[-101.75244141 -189.51892090]
[-92.84236908 -177.45199585]
[-78.20749664 -180.33055115]
[-63.71451187 -176.55393982]
[-52.25151825 -166.81942749]
[-46.12680817 -153.01696777]
[-46.60414505 -137.86245728]
[-53.64238358 -124.36339569]
[-44.73231506 -112.29647827]
[-35.82224274 -100.22955322]
[-21.18737221 -103.10810852]
[-6.69438267 -99.33150482]
[4.76861191 -89.59699249]
[10.89332008 -75.79452515]
[10.41598320 -60.64001465]
[3.37774324 -47.14096069]
[12.28781509 -35.07403564]
[21.19788742 -23.00711441]
[30.10795784 -10.94019127]
[36.64228821 -7.41031647]
[39.07080841 1.44624758]
[47.74666595 13.68264771]
[56.42252731 25.91904640]
[65.09838104 38.15544510]
[73.77424622 50.39184570]
[82.45010376 62.62824631]
[91.12596130 74.86464691]
[99.80181885 87.10104370]
[111.86874390 96.01111603]
[126.11661530 100.70133209]
[140.36448669 105.39154053]
[154.61236572 110.08174896]
[166.01216125 99.78902435]
[181.03439331 96.59085083]
[195.63813782 101.34753418]
[205.89508057 112.77953339]
[209.04614258 127.81171417]
[204.24371338 142.40048218]
[192.77961731 152.62153625]
[177.73764038 155.72547913]
[163.16400146 150.87733459]
[152.97892761 139.38125610]
[149.92214966 124.32962799]
[135.67428589 119.63941193]
[121.42640686 114.94920349]
[107.17852783 110.25899506]
[96.31949615 120.60700989]
[100.31800842 135.06425476]
[104.31652832 149.52149963]
[108.31504059 163.97872925]
[112.31355286 178.43597412]
[116.31207275 192.89321899]
[120.31058502 207.35046387]
[135.42045593 207.77853394]
[149.73233032 212.64288330]
[161.97358704 221.51095581]
[171.05577087 233.59423828]
[176.17127991 247.81825256]
[176.86524963 262.91824341]
[173.07597351 277.55154419]
[165.14039612 290.41690063]
[153.76414490 300.37042236]
[139.95878601 306.52697754]
[124.95186615 308.33917236]
[110.07781982 305.64584351]
[96.65921021 298.68652344]
[85.88922882 288.07995605]
[78.72553253 274.76931763]
[75.80510712 259.93820190]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 140]
[10 121]
[11 120]
[12 119]
[13 118]
[14 117]
[15 116]
[16 115]
[17 114]
[18 112]
[19 111]
[20 110]
[21 109]
[27 103]
[28 102]
[29 101]
[35 95]
[36 94]
[37 93]
[43 90]
[44 89]
[45 88]
[46 87]
[47 86]
[48 85]
[49 84]
[55 79]
[56 78]
[57 76]
[58 75]
[59 74]
[60 73]
[62 71]
[63 70]
[122 139]
[123 138]
[124 137]
[125 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
