%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 20:00:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCCACACCUUAUUUAUGCGCUGAGCCCUACUCCUUCCUUAAUUUAUUUCCUCUCACCCUUUAUUUAUGAAGCUGCAGCCCUGACUGAGACAUAGGGCUGAGUUUAUUGUUUUACUUUUAUACAUUAUGCACAAAUAAACAACAAGGAAUUGGA\
) } def
/len { sequence length } bind def

/coor [
[135.88534546 413.58892822]
[120.10951996 412.64074707]
[109.68744659 400.75985718]
[110.80235291 384.99493408]
[122.79278564 374.69906616]
[123.69270325 359.72607422]
[124.59262085 344.75308228]
[112.91355896 332.68704224]
[113.56044006 315.56967163]
[126.62068176 303.97167969]
[127.22082520 288.98370361]
[127.82096863 273.99569702]
[127.37080383 259.00247192]
[125.87255096 244.07746887]
[124.37429047 229.15248108]
[122.87602997 214.22750854]
[121.37776947 199.30252075]
[112.40792084 187.41172791]
[118.72811127 172.90773010]
[117.22985077 157.98274231]
[115.73159027 143.05775452]
[114.23333740 128.13276672]
[107.84049225 124.21083832]
[95.05481720 116.36695862]
[88.66197205 112.44502258]
[74.67808533 117.87187958]
[60.69419098 123.29873657]
[52.93304825 137.33953857]
[37.09302521 139.88377380]
[25.32522392 128.97972107]
[26.65690041 112.99202728]
[40.06650162 104.18509674]
[55.26733398 109.31484222]
[69.25122833 103.88798523]
[83.23511505 98.46112823]
[68.36132812 96.51940918]
[53.48753357 94.57769012]
[39.23294449 99.24745178]
[24.39546967 101.44958496]
[9.39906597 101.12117004]
[-5.32777548 98.27157593]
[-19.36426163 92.98224640]
[-32.30932617 85.40429688]
[-43.79308701 75.75425720]
[-53.48741913 64.30786133]
[-61.11532211 51.39217377]
[-66.45884705 37.37622833]
[-69.36531067 22.66050529]
[-69.75166321 7.66548109]
[-67.60687256 -7.18038940]
[-62.99221039 -21.45291328]
[-56.03954315 -34.74427795]
[-46.94752884 -46.67471313]
[-35.97594833 -56.90332031]
[-23.43830109 -65.13784790]
[-9.69282341 -71.14299774]
[4.86773348 -74.74718475]
[19.82732773 -75.84743500]
[34.75851440 -74.41230774]
[49.23466873 -70.48280334]
[62.84215546 -64.17120361]
[75.19216919 -55.65785599]
[85.93183136 -45.18600464]
[94.75428009 -33.05486679]
[101.40741730 -19.61107063]
[105.70115662 -5.23874140]
[107.51280212 9.65145397]
[106.79059601 24.63405800]
[103.55516815 39.28097153]
[97.90004730 53.17157745]
[98.79616547 68.14479065]
[99.69228363 83.11799622]
[106.08440399 69.54814911]
[112.47652435 55.97829819]
[118.86864471 42.40845108]
[125.26076508 28.83860016]
[126.09778595 19.68505478]
[131.91894531 15.06314659]
[138.58129883 1.62391353]
[145.24366760 -11.81532001]
[151.90602112 -25.25455284]
[158.56837463 -38.69378662]
[165.23072815 -52.13301849]
[171.89309692 -65.57225037]
[178.55545044 -79.01148987]
[170.54403687 -92.19560242]
[170.95513916 -107.61749268]
[179.65754700 -120.35607147]
[193.87437439 -126.34652710]
[209.06906128 -123.67730713]
[220.39306641 -113.20016479]
[224.23292542 -98.25830841]
[219.36334229 -83.61962891]
[207.33821106 -73.95528412]
[191.99467468 -72.34912872]
[185.33232117 -58.90989685]
[178.66996765 -45.47066116]
[172.00761414 -32.03142929]
[165.34524536 -18.59219551]
[158.68289185 -5.15296221]
[152.02053833 8.28627110]
[145.35818481 21.72550392]
[138.83061218 35.23072052]
[132.43849182 48.80057144]
[126.04637146 62.37041855]
[119.65425110 75.94026947]
[113.26213074 89.51011658]
[125.37747955 80.66600037]
[137.49282837 71.82188416]
[147.79548645 60.91981125]
[160.49884033 52.94329834]
[174.79426575 48.40008163]
[189.77178955 47.57935715]
[204.47804260 50.53336334]
[217.97689819 57.07406998]
[229.40910339 66.78513336]
[238.04695129 79.04839325]
[243.34059143 93.08325958]
[244.95307922 107.99633789]
[242.78175354 122.83834839]
[236.96485901 136.66453552]
[227.87263489 148.59481812]
[216.08384705 157.86976624]
[202.34890747 163.89898682]
[187.54211426 166.29870605]
[172.60595703 164.91616821]
[158.49121094 159.83937073]
[146.09884644 151.39372253]
[137.62858582 139.01411438]
[129.15832520 126.63451385]
[130.65658569 141.55949402]
[132.15483093 156.48448181]
[133.65309143 171.40946960]
[142.73011780 184.36779785]
[136.30276489 197.80426025]
[137.80102539 212.72924805]
[139.29927063 227.65423584]
[140.79753113 242.57922363]
[142.29579163 257.50421143]
[152.04382324 246.10350037]
[166.81082153 243.46990967]
[179.89898682 250.79792786]
[185.37199402 264.76382446]
[180.74746704 279.03314209]
[168.12294006 287.13385010]
[153.22444153 285.39169312]
[142.80895996 274.59585571]
[142.20881653 289.58383179]
[141.60867310 304.57183838]
[151.84379578 313.37863159]
[155.07318115 326.28839111]
[150.33100891 338.51348877]
[139.56559753 345.65301514]
[138.66567993 360.62597656]
[137.76576233 375.59896851]
[148.43672180 387.25686646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 155]
[6 154]
[7 153]
[10 149]
[11 148]
[12 147]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[19 133]
[20 132]
[21 131]
[22 130]
[25 35]
[26 34]
[27 33]
[72 107]
[73 106]
[74 105]
[75 104]
[76 103]
[78 102]
[79 101]
[80 100]
[81 99]
[82 98]
[83 97]
[84 96]
[85 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
