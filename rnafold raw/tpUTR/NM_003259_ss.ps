%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 10:23:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCGCUCCCCUCUCCCCGCGGGCCGGGGGACGCCCCCCAGACUCACACGGGGGCUUAUUUAUUGCUUUAUUUAUUUACUUAUUCAUUUAUUUAUGUAUUCAACUCCAAGGGCGUCACCCCCAUUUUCUACCCAUCCCCUCAAUAAAGUUUUUAUAAAGGAA\
) } def
/len { sequence length } bind def

/coor [
[122.22814178 281.51867676]
[115.27699280 294.81085205]
[108.32584381 308.10299683]
[101.37470245 321.39517212]
[94.42355347 334.68731689]
[87.47240448 347.97949219]
[96.63066864 360.18966675]
[99.57574463 375.16595459]
[95.72289276 389.93478394]
[85.83709717 401.56381226]
[71.88118744 407.74404907]
[56.62611771 407.24841309]
[43.10079956 400.17532349]
[33.99068832 387.92916870]
[31.10460663 372.94140625]
[35.01558685 358.18783569]
[44.94710159 346.59786987]
[58.92724228 340.47262573]
[74.18024445 341.02832031]
[81.13139343 327.73617554]
[88.08253479 314.44400024]
[95.03368378 301.15185547]
[101.98483276 287.85968018]
[108.93598175 274.56753540]
[124.31467438 258.99026489]
[141.53434753 256.98904419]
[136.98165894 242.69664001]
[132.42897034 228.40422058]
[127.87627411 214.11181641]
[123.18606567 199.86393738]
[118.35877228 185.66192627]
[113.53147888 171.45991516]
[108.70417786 157.25790405]
[103.87688446 143.05587769]
[99.04959106 128.85386658]
[94.22229767 114.65185547]
[82.69043732 105.05934143]
[67.84687805 102.89860535]
[53.00332260 100.73787689]
[43.55105972 112.84367371]
[29.30625343 118.58658600]
[14.10068512 116.42180634]
[2.02457690 106.93164825]
[-3.67366004 92.66890717]
[-1.46122813 77.47019958]
[8.06674004 65.42389679]
[22.34726715 59.77039337]
[37.53896713 62.03045654]
[49.55534363 71.59613800]
[55.16405487 85.89431763]
[70.00761414 88.05505371]
[84.85117340 90.21578217]
[91.28491211 76.66561890]
[80.22846222 66.52880096]
[69.17201233 56.39199066]
[54.28007889 60.42110062]
[39.58080292 55.73763657]
[29.76467323 43.83607483]
[27.96398354 28.51416016]
[34.75332642 14.66105938]
[47.96624756 6.69724846]
[63.38655090 7.16394854]
[76.09367371 15.91223812]
[82.03282166 30.15056992]
[79.30883026 45.33554459]
[90.36527252 55.47235489]
[101.42172241 65.60916901]
[108.70511627 63.81970215]
[103.86201477 49.62306595]
[99.01892090 35.42643356]
[94.17581940 21.22980118]
[89.33272552 7.03316689]
[84.48962402 -7.16346645]
[75.72406769 -19.33577347]
[78.07688904 -34.15010071]
[90.18241882 -43.00764847]
[105.01415253 -40.76716995]
[113.96318817 -28.72911644]
[111.83600616 -13.88224506]
[114.12318420 0.94235623]
[116.41036224 15.76695824]
[118.69754028 30.59156036]
[120.98471832 45.41616058]
[123.27189636 60.24076462]
[130.55529785 58.45129395]
[135.65539551 44.34495163]
[140.75550842 30.23860741]
[133.81958008 16.03760147]
[139.03570557 1.11890388]
[153.30924988 -5.66648579]
[168.17196655 -0.29291707]
[174.80607605 14.05156708]
[169.27566528 28.85663986]
[154.86184692 35.33871078]
[149.76173401 49.44505692]
[144.66163635 63.55139923]
[155.90034485 53.61703873]
[170.70045471 56.05764389]
[183.78713989 63.38830948]
[193.59880066 74.73429108]
[198.96464539 88.74170685]
[199.24436951 103.73910522]
[194.40461731 117.93687439]
[185.02288818 129.64085388]
[172.21867371 137.45443726]
[157.51986694 140.44526672]
[142.68041992 138.25643921]
[129.47109985 131.14913940]
[119.46946716 119.97367096]
[108.42430878 109.82456207]
[113.25160217 124.02657318]
[118.07890320 138.22859192]
[122.90619659 152.43060303]
[127.73348999 166.63261414]
[132.56079102 180.83462524]
[137.38807678 195.03665161]
[143.13955688 202.19604492]
[142.16868591 209.55912781]
[146.72137451 223.85153198]
[151.27406311 238.14395142]
[155.82676697 252.43635559]
[155.85490417 237.43638611]
[160.87609863 223.30175781]
[170.31724548 211.64566040]
[183.10084534 203.79838562]
[197.76789856 200.65557861]
[212.64447021 202.57588196]
[226.03269958 209.34016418]
[236.40457153 220.17642212]
[242.57635498 233.84788513]
[243.84367371 248.79425049]
[240.06187439 263.30969238]
[231.66258240 275.73754883]
[219.60440063 284.65945435]
[205.26354980 289.05715942]
[190.27671814 288.42871094]
[176.35437012 282.84585571]
[165.08386230 272.94381714]
[172.79151917 285.81207275]
[180.49919128 298.68032837]
[195.56614685 302.63314819]
[203.19949341 315.79318237]
[199.33824158 330.13284302]
[207.04589844 343.00109863]
[214.75357056 355.86935425]
[222.46124268 368.73760986]
[230.16889954 381.60586548]
[243.49481201 392.08709717]
[237.11215210 407.79373169]
[220.25244141 406.00851440]
[217.30065918 389.31350708]
[209.59298706 376.44528198]
[201.88531494 363.57702637]
[194.17765808 350.70877075]
[186.46998596 337.84051514]
[172.00535583 334.47744751]
[164.00537109 321.53701782]
[167.63093567 306.38800049]
[159.92327881 293.51974487]
[152.21560669 280.65148926]
[144.71873474 280.86828613]
[137.59765625 294.07019043]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 24]
[2 23]
[3 22]
[4 21]
[5 20]
[6 19]
[26 121]
[27 120]
[28 119]
[29 118]
[30 116]
[31 115]
[32 114]
[33 113]
[34 112]
[35 111]
[36 110]
[37 52]
[38 51]
[39 50]
[53 67]
[54 66]
[55 65]
[85 96]
[86 95]
[87 94]
[138 160]
[139 159]
[140 158]
[143 155]
[144 154]
[145 153]
[146 152]
[147 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
