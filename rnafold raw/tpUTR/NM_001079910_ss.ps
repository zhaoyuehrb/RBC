%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:12:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUCACAAACGAAUUGAUGGAACCUAAUGCCAACAAGCAUUCUUUUUCAGAUAGGGGGUAGGAUGCCAGCAACCUGAACUGCCCAAAAAUGUGUAUUUAAAUUUUUUCUUUCUUUAAAUAUCCUCUUUUGAUAUAAACAAAAUUAAAUUAUUUCUAAAAUUAA\
) } def
/len { sequence length } bind def

/coor [
[93.91020203 333.65170288]
[79.04357147 331.02761841]
[65.43670654 324.48883057]
[54.09932327 314.52056885]
[45.87273407 301.86254883]
[41.36740875 287.45404053]
[40.91766739 272.36428833]
[44.55688858 257.71307373]
[52.01501465 244.58755493]
[62.73860550 233.96177673]
[75.93189240 226.62423706]
[90.61585999 223.11940002]
[91.18692017 208.13027954]
[91.75798035 193.14115906]
[84.51082611 180.12854004]
[92.76789856 166.63293457]
[93.33895874 151.64381409]
[93.91001892 136.65469360]
[94.48107910 121.66556549]
[82.77909088 112.28134918]
[68.27188873 116.09462738]
[53.76468277 119.90790558]
[39.25748062 123.72117615]
[33.54622269 138.02809143]
[20.65638161 146.13397217]
[5.64269638 145.10769653]
[-5.75139380 135.55194092]
[-20.25859642 139.36520386]
[-34.76580048 143.17848206]
[-49.27300262 146.99176025]
[-63.78020477 150.80503845]
[-71.52995300 164.57881165]
[-86.77169037 168.75793457]
[-100.46276093 160.86299133]
[-104.48049927 145.57792664]
[-96.44125366 131.97108459]
[-81.11456299 128.11517334]
[-67.59348297 136.29783630]
[-53.08627701 132.48455811]
[-38.57907486 128.67127991]
[-24.07187080 124.85800934]
[-9.56466866 121.04473114]
[-4.34219503 107.12123871]
[8.22626114 98.84488678]
[23.43597031 99.56470490]
[35.44420624 109.21397400]
[49.95140839 105.40069580]
[64.45861053 101.58742523]
[78.96581268 97.77414703]
[81.95097351 90.89382935]
[67.01889801 89.46796417]
[63.76073456 74.82609558]
[76.67916870 67.20282745]
[87.92129517 77.13318634]
[90.90645599 70.25286865]
[83.78047180 57.05361176]
[70.41603851 48.58587265]
[71.17818451 33.71078110]
[64.05220032 20.51152611]
[56.92621231 7.31227255]
[49.55021667 -5.74891853]
[41.92689133 -18.66731262]
[34.30356598 -31.58570671]
[20.62645149 -39.53851318]
[20.82174110 -54.43183517]
[13.19841480 -67.35022736]
[-1.33937299 -74.93869019]
[-1.76603591 -91.33229065]
[12.35733986 -99.66669464]
[26.50183678 -91.36818695]
[26.11680794 -74.97355652]
[33.74013519 -62.05516434]
[46.87197876 -55.02636719]
[47.22195816 -39.20903397]
[54.84528732 -26.29063797]
[62.46861267 -13.37224483]
[66.82985687 -11.32657528]
[69.93038177 -6.49573421]
[70.12546539 0.18628508]
[77.25145721 13.38553905]
[84.37744141 26.58479309]
[97.23217010 34.10843277]
[96.97972107 49.92762375]
[104.10571289 63.12687683]
[118.68288422 66.66326141]
[131.06495667 58.19661331]
[143.44703674 49.72996521]
[155.82911682 41.26331711]
[168.21119690 32.79666901]
[171.25192261 17.51950455]
[183.92971802 9.10950661]
[198.47541809 12.10252094]
[205.49981689 -2.07381630]
[220.37307739 -2.87071466]
[232.75515747 -11.33736324]
[245.13723755 -19.80401039]
[257.51931763 -28.27066040]
[269.90139771 -36.73730850]
[282.28347778 -45.20395660]
[294.66555786 -53.67060471]
[307.04763794 -62.13725281]
[319.42971802 -70.60389709]
[317.58828735 -85.79823303]
[323.02978516 -100.10378265]
[334.50378418 -110.23323822]
[349.37362671 -113.85893250]
[364.22238159 -110.14769745]
[375.63787842 -99.95235443]
[380.99691772 -85.61571503]
[379.06805420 -70.43223572]
[370.29449463 -57.89096832]
[356.69238281 -50.87380219]
[341.38732910 -50.99323654]
[327.89636230 -58.22182083]
[315.51428223 -49.75517273]
[303.13220215 -41.28852463]
[290.75012207 -32.82187653]
[278.36804199 -24.35522842]
[265.98596191 -15.88858128]
[253.60388184 -7.42193270]
[241.22181702 1.04471552]
[228.83973694 9.51136398]
[222.70098877 23.08210945]
[206.94207764 24.48460007]
[204.45385742 39.12510681]
[192.01728821 47.88787842]
[176.67784119 45.17874908]
[164.29576111 53.64539719]
[151.91369629 62.11204529]
[139.53161621 70.57868958]
[127.14953613 79.04534149]
[140.12916565 71.52675629]
[154.78544617 68.33406067]
[169.71630859 69.77268219]
[183.49337769 75.70499420]
[194.79869080 85.56348419]
[202.55073547 98.40505219]
[206.00790405 113.00121307]
[204.83949280 127.95563507]
[199.15725708 141.83772278]
[189.50479126 153.31944275]
[176.80548096 161.30239868]
[162.27421570 165.02293396]
[147.30111694 164.12509155]
[133.31855774 158.69479370]
[121.66419220 149.25151062]
[113.45291138 136.69862366]
[109.47020721 122.23662567]
[108.89914703 137.22575378]
[108.32808685 152.21487427]
[107.75702667 167.20399475]
[114.96333313 181.28872681]
[106.74710846 193.71221924]
[106.17604828 208.70133972]
[105.60498810 223.69046021]
[119.97971344 228.30238342]
[132.57647705 236.62248230]
[142.46051025 248.03338623]
[148.89834595 261.68829346]
[151.41224670 276.57397461]
[149.81568909 291.58575439]
[144.22714233 305.60968018]
[135.06129456 317.60507202]
[122.99832916 326.68182373]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 155]
[13 154]
[14 153]
[16 151]
[17 150]
[18 149]
[19 148]
[20 49]
[21 48]
[22 47]
[23 46]
[27 42]
[28 41]
[29 40]
[30 39]
[31 38]
[55 84]
[56 83]
[58 81]
[59 80]
[60 79]
[61 76]
[62 75]
[63 74]
[65 72]
[66 71]
[85 131]
[86 130]
[87 129]
[88 128]
[89 127]
[92 124]
[94 122]
[95 121]
[96 120]
[97 119]
[98 118]
[99 117]
[100 116]
[101 115]
[102 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
