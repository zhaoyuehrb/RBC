%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 18:28:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCCGUGUCCACAGGAGGCCACCUCGGUGUGAAUGGAAGGAAACGCUGCCUCUGCUUGCGUGACUCUGCUCCCCGAUUCUCCAGAGCCCCGUGGUUGCUGGCUUGAAUAAAAUGCUCAGUGGCGGCUA\
) } def
/len { sequence length } bind def

/coor [
[89.59733582 131.21939087]
[81.73686218 143.99488831]
[73.87639618 156.77037048]
[66.01592255 169.54585266]
[58.30920410 182.41467285]
[50.75734329 195.37496948]
[57.86313629 209.06845093]
[56.41490555 224.42768860]
[46.87477875 236.55160522]
[32.28697205 241.57151794]
[17.30640602 237.88557434]
[6.71332073 226.66995239]
[3.88793373 211.50352478]
[9.73181438 197.22583008]
[22.38020325 188.39282227]
[37.79704285 187.82310486]
[45.34890366 174.86280823]
[46.00478363 167.42590332]
[53.24044037 161.68537903]
[61.10091019 148.90989685]
[68.96138000 136.13441467]
[76.82184601 123.35892487]
[71.17865753 115.88069153]
[67.87152100 107.11527252]
[52.87260056 106.93541718]
[37.87368011 106.75556183]
[22.87367821 106.75556183]
[9.16727257 114.65777588]
[-3.65185881 107.07363892]
[-18.65077972 107.25349426]
[-32.46969986 116.08352661]
[-46.89959717 108.29186249]
[-47.09623337 91.89389038]
[-32.85732269 83.75844574]
[-18.83063889 92.25457001]
[-3.83171678 92.07471466]
[8.80186558 84.18536377]
[22.69382095 91.75663757]
[29.41107178 88.49839020]
[38.05353546 91.75663757]
[53.05245972 91.93649292]
[68.05137634 92.11635590]
[74.26316833 79.49435425]
[85.17853546 70.61989594]
[98.80262756 67.11486053]
[112.64555359 69.61980438]
[124.17741394 77.67694092]
[137.22732544 70.28102112]
[150.27725220 62.88510132]
[163.32716370 55.48918533]
[176.37709045 48.09326553]
[189.42700195 40.69734955]
[197.61811829 27.16160965]
[212.50573730 27.61769485]
[225.55566406 20.22177696]
[238.60557556 12.82585907]
[240.93031311 2.07226825]
[248.67100525 -5.43208599]
[259.05715942 -7.34216976]
[268.55541992 -3.25701094]
[281.94494629 -10.01874733]
[295.33444214 -16.78048325]
[308.72393799 -23.54221916]
[307.43057251 -31.22417068]
[307.69577026 -38.99995041]
[309.50497437 -46.55693817]
[312.78161621 -53.59208298]
[317.39035034 -59.82405472]
[323.14270020 -65.00451660]
[329.80468750 -68.92799377]
[337.10635376 -71.44003296]
[344.75277710 -72.44328308]
[352.43585205 -71.90124512]
[359.84683228 -69.83962250]
[366.68872070 -66.34508514]
[372.68804932 -61.56165695]
[377.60592651 -55.68479919]
[381.24758911 -48.95338058]
[395.93704224 -51.98990631]
[410.62646484 -55.02643204]
[425.31591797 -58.06295776]
[439.63473511 -72.15852356]
[457.74060059 -65.53948975]
[472.26754761 -69.27680969]
[486.79449463 -73.01412201]
[501.32147217 -76.75144196]
[515.80255127 -80.66267395]
[530.23571777 -84.74726105]
[544.66888428 -88.83184814]
[559.10205078 -92.91643524]
[570.14050293 -105.04428101]
[586.10290527 -101.28472900]
[590.56848145 -85.50529480]
[578.94342041 -73.93849945]
[563.18664551 -78.48327637]
[548.75347900 -74.39868927]
[534.32031250 -70.31410217]
[519.88714600 -66.22950745]
[514.25183105 -61.33245850]
[505.05877686 -62.22448349]
[490.53182983 -58.48716736]
[476.00485229 -54.74985123]
[461.47790527 -51.01253128]
[457.02560425 -41.68072891]
[447.95477295 -36.27326584]
[437.18731689 -36.81692886]
[428.35241699 -43.37351990]
[413.66299438 -40.33699417]
[398.97357178 -37.30046844]
[384.28411865 -34.26394272]
[377.43466187 -11.91378307]
[358.76440430 2.33753324]
[335.17593384 3.05763149]
[315.48568726 -10.15271091]
[302.09616089 -3.39097500]
[288.70666504 3.37076116]
[275.31716919 10.13249683]
[266.06024170 27.04234314]
[246.00149536 25.87577820]
[232.95158386 33.27169800]
[219.90165710 40.66761398]
[212.64396667 53.67434692]
[196.82292175 53.74726868]
[183.77301025 61.14318466]
[170.72308350 68.53910065]
[157.67317200 75.93502045]
[144.62324524 83.33094025]
[131.57333374 90.72686005]
[131.81057739 108.42340851]
[122.84645844 123.68344879]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[3 20]
[4 19]
[5 17]
[6 16]
[24 42]
[25 41]
[26 40]
[27 38]
[29 36]
[30 35]
[47 128]
[48 127]
[49 126]
[50 125]
[51 124]
[52 123]
[54 121]
[55 120]
[56 119]
[60 117]
[61 116]
[62 115]
[63 114]
[78 110]
[79 109]
[80 108]
[81 107]
[83 103]
[84 102]
[85 101]
[86 100]
[87 98]
[88 97]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
