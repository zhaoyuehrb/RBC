%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 18:16:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUAUUUUGAAUAUAAUGUAAAUAUUAAUGUGUAAGCUUAUAUUGUGUCAUUGUUCUGUUUUAUAAUAAAAUUCUUGAGAACCUUCC\
) } def
/len { sequence length } bind def

/coor [
[90.20793152 131.27261353]
[83.63462067 128.39076233]
[77.84636688 124.14699554]
[73.12082672 118.74488831]
[69.68469238 112.44358826]
[67.70278931 105.54536438]
[67.27019501 98.38112640]
[68.40766144 91.29454803]
[55.24247742 84.10581207]
[42.07729340 76.91707611]
[32.81836700 75.49188995]
[28.57720184 69.22953033]
[15.67698765 61.57547760]
[2.77677441 53.92142868]
[-10.12343884 46.26737595]
[-23.02365303 38.61332703]
[-35.92386627 30.95927620]
[-48.82408142 23.30522537]
[-61.72429276 15.65117455]
[-74.62450409 7.99712420]
[-87.52471924 0.34307384]
[-100.93810272 -6.37118435]
[-114.79629517 -12.11143589]
[-128.65447998 -17.85168648]
[-142.51268005 -23.59193802]
[-158.69204712 -20.91613007]
[-168.88851929 -33.75996017]
[-162.61283875 -48.91079712]
[-146.32089233 -50.78275681]
[-136.77243042 -37.45013046]
[-122.91423798 -31.70988083]
[-109.05603790 -25.96962929]
[-95.19784546 -20.22937775]
[-92.40454102 -21.38654327]
[-88.93625641 -21.37422752]
[-85.29044342 -19.90950012]
[-82.06414795 -16.91659737]
[-79.87066650 -12.55713940]
[-66.97045898 -4.90308905]
[-54.07024384 2.75096130]
[-41.17002869 10.40501213]
[-28.26981544 18.05906296]
[-15.36960220 25.71311188]
[-2.46938872 33.36716461]
[10.43082523 41.02121353]
[23.33103943 48.67526245]
[36.23125076 56.32931519]
[49.26602936 63.75188828]
[62.43121338 70.94062805]
[75.59639740 78.12935638]
[97.45544434 67.32912445]
[120.72309113 74.61468506]
[132.51895142 95.95292664]
[147.43299866 97.55635834]
[162.34706116 99.15978241]
[177.26110840 100.76320648]
[192.17517090 102.36663818]
[207.17277527 102.63436890]
[222.13455200 101.56428528]
[237.09634399 100.49419403]
[252.05812073 99.42411041]
[267.01989746 98.35401917]
[281.98168945 97.28393555]
[297.34912109 90.12304688]
[308.48428345 102.90758514]
[299.28189087 117.14669800]
[283.05175781 112.24571228]
[268.08999634 113.31580353]
[253.12820435 114.38588715]
[238.16642761 115.45597839]
[223.20465088 116.52606201]
[208.24285889 117.59615326]
[206.69696045 119.63042450]
[204.26350403 121.19113159]
[201.11276245 121.94873810]
[197.52627563 121.63846588]
[193.87248230 120.09539795]
[190.57173157 117.28069305]
[175.65768433 115.67726135]
[160.74363708 114.07383728]
[145.82957458 112.47041321]
[130.91552734 110.86698151]
[127.80821991 117.33676910]
[123.36695099 122.97490692]
[117.80476379 127.51092529]
[111.38847351 130.72724915]
[104.42588043 132.46955872]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 50]
[9 49]
[10 48]
[12 47]
[13 46]
[14 45]
[15 44]
[16 43]
[17 42]
[18 41]
[19 40]
[20 39]
[21 38]
[22 33]
[23 32]
[24 31]
[25 30]
[53 82]
[54 81]
[55 80]
[56 79]
[57 78]
[58 72]
[59 71]
[60 70]
[61 69]
[62 68]
[63 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
