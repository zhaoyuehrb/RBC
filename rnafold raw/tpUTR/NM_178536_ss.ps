%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 07:46:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAUGAAGCAGCUCCUGUCCGGCCCAGCCCUGCCUCACAGCUGUGCGAGCUCUGCCCUCCUCAGCUCUCAAACCUGAAUAAAUGCACCAAGCCCAGA\
) } def
/len { sequence length } bind def

/coor [
[-15.11501884 189.34069824]
[-22.79705048 187.78968811]
[-29.79222107 184.30572510]
[-35.62511063 179.13850403]
[-39.90266418 172.65170288]
[-54.58470154 175.72381592]
[-69.26673889 178.79591370]
[-81.18972778 189.19557190]
[-95.23186493 184.22891235]
[-109.91390228 187.30101013]
[-124.59593964 190.37310791]
[-139.27796936 193.44520569]
[-145.37127686 205.58018494]
[-157.19714355 211.84579468]
[-170.27154541 210.12294006]
[-179.78393555 201.27424622]
[-194.55606079 203.87896729]
[-209.32817078 206.48368835]
[-216.98974609 220.11579895]
[-231.63957214 225.58541870]
[-246.36042786 220.30999756]
[-254.20159912 206.78039551]
[-251.46070862 191.38488770]
[-239.43193054 181.39276123]
[-223.79487610 181.52200317]
[-211.93289185 191.71157837]
[-197.16078186 189.10685730]
[-182.38865662 186.50213623]
[-173.43083191 172.36737061]
[-156.71099854 168.93002319]
[-142.35008240 178.76316833]
[-127.66803741 175.69107056]
[-112.98600006 172.61897278]
[-98.30396271 169.54687500]
[-87.43112946 159.36695862]
[-72.33883667 164.11387634]
[-57.65680313 161.04177856]
[-42.97476578 157.96966553]
[-33.27796936 137.08210754]
[-11.35224915 129.28796387]
[9.78674030 139.57936096]
[23.22664642 132.91836548]
[36.66655350 126.25736237]
[49.88835526 119.17329407]
[62.87873459 111.67329407]
[75.86911774 104.17329407]
[88.85949707 96.67329407]
[99.54991150 86.15116882]
[107.25507355 73.28141785]
[114.96022797 60.41167068]
[122.66539001 47.54191971]
[130.37055969 34.67216873]
[126.74204254 19.52384567]
[134.73950195 6.58185005]
[149.20347595 3.21597290]
[146.70794678 -12.63179874]
[157.64811707 -24.36602592]
[173.63163757 -22.98521423]
[182.39730835 -9.54860401]
[177.22087097 5.63638687]
[162.07322693 10.92113400]
[165.93728638 25.26005554]
[158.30648804 38.42157745]
[143.24031067 42.37732697]
[135.53514099 55.24707794]
[127.82997894 68.11682892]
[120.12482452 80.98657990]
[112.41966248 93.85633087]
[120.12482452 106.72608185]
[135.10783386 106.01235199]
[150.09083557 105.29862976]
[163.58663940 95.98221588]
[178.28479004 103.25521851]
[179.06509399 119.63578796]
[165.12483215 128.27301025]
[150.80456543 120.28163910]
[135.82156372 120.99536133]
[120.83854675 121.70909119]
[122.09371948 136.65649414]
[113.37595367 148.86306763]
[98.82992554 152.52546692]
[85.37124634 145.90248108]
[79.39855957 132.14285278]
[83.75145721 117.78833771]
[96.35949707 109.66367340]
[83.36911774 117.16367340]
[70.37873840 124.66367340]
[57.38835526 132.16368103]
[53.59343719 137.94073486]
[48.21979523 140.41828918]
[43.32755280 139.69726562]
[29.88764572 146.35826111]
[16.44773865 153.01927185]
[17.00714493 160.99267578]
[15.47972012 168.81570435]
[11.98176670 175.95307922]
[6.76399660 181.91957092]
[0.19359435 186.31289673]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 38]
[6 37]
[7 36]
[9 34]
[10 33]
[11 32]
[12 31]
[16 28]
[17 27]
[18 26]
[41 93]
[42 92]
[43 91]
[44 88]
[45 87]
[46 86]
[47 85]
[48 68]
[49 67]
[50 66]
[51 65]
[52 64]
[55 61]
[69 78]
[70 77]
[71 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
