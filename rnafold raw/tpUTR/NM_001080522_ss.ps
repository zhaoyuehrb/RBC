%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 19:33:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUUUUCACUGUACUUUCUGUAUCAUGUAAAAACUACACUUAGGAUAUGAGAAAAUUUUAAAUUAUAUGCAUCACAUCAGAAGAACAUAUUAUUGGCAAAUAAUAAAAUUAUCAACUGUUUUCAAACUGUG\
) } def
/len { sequence length } bind def

/coor [
[89.80227661 127.23697662]
[72.07550049 114.61830139]
[60.80277634 124.51403809]
[49.53004456 134.40977478]
[38.25731659 144.30551147]
[26.98458862 154.20124817]
[21.71796799 169.12013245]
[7.04880953 171.70181274]
[-4.22391891 181.59754944]
[-5.40332413 197.12966919]
[-16.97644234 207.00477600]
[-31.77667618 205.78466797]
[-43.04940414 215.68040466]
[-54.32213593 225.57614136]
[-65.59486389 235.47187805]
[-68.06690216 251.32333374]
[-82.07219696 259.14837646]
[-96.86708832 252.94429016]
[-101.10220337 237.47033691]
[-91.52872467 224.59678650]
[-75.49060059 224.19915771]
[-64.21787262 214.30342102]
[-52.94514084 204.40768433]
[-41.67241287 194.51194763]
[-40.96485901 179.67837524]
[-29.67367554 169.48210144]
[-14.11965466 170.32482910]
[-2.84692597 160.42909241]
[1.61339426 146.21801758]
[17.08885193 142.92851257]
[28.36158180 133.03277588]
[39.63431168 123.13704681]
[50.90703964 113.24131012]
[62.17976761 103.34557343]
[50.42152023 112.65920258]
[35.53802490 114.52510071]
[21.84455681 108.40229034]
[13.31134987 96.06598663]
[12.41249943 81.09294128]
[19.40861130 67.82438660]
[32.27125931 60.10737610]
[47.27108765 60.17934418]
[60.05909348 68.01942444]
[66.92707062 81.35209656]
[54.18632507 71.97212219]
[55.98495483 57.18651581]
[49.79771042 43.52203369]
[43.61046982 29.85755539]
[37.42322540 16.19307518]
[31.23598099 2.52859426]
[25.04873848 -11.13588619]
[9.78874779 -11.44487572]
[-3.82207823 -18.35198593]
[-13.08130169 -30.48580360]
[-16.15049744 -45.43714905]
[-12.42027378 -60.23742676]
[-2.63126898 -71.94802856]
[11.27290249 -78.24380493]
[26.53155708 -77.87471771]
[40.11507797 -70.91406250]
[49.32644653 -58.74388123]
[52.33673859 -43.78056335]
[48.54826355 -28.99509048]
[38.71321869 -17.32312965]
[44.90046310 -3.65864921]
[51.08770370 10.00583076]
[57.27494812 23.67031097]
[63.46219254 37.33479309]
[69.64943695 50.99927139]
[81.94763184 59.40187073]
[80.59155273 75.16485596]
[100.80139923 70.92760468]
[117.54027557 79.93941498]
[123.89679718 96.10885620]
[138.72033691 98.40287018]
[153.54388428 100.69687653]
[168.36743164 102.99088287]
[177.05979919 90.49272156]
[190.26281738 83.03837585]
[205.33140564 82.05972290]
[219.27334595 87.69742584]
[229.34336853 98.78362274]
[233.58383179 113.08341217]
[248.40737915 115.37741852]
[263.23092651 117.67143250]
[278.05447388 119.96543884]
[292.87802124 122.25945282]
[307.70156860 124.55345917]
[322.69738770 124.90774536]
[337.61273193 123.31632233]
[352.52807617 121.72490692]
[367.44338989 120.13349152]
[382.35873413 118.54207611]
[397.27407837 116.95066071]
[412.18942261 115.35924530]
[425.11547852 105.26719666]
[440.21493530 111.66546631]
[441.95480347 127.97206116]
[428.54522705 137.41215515]
[413.78085327 130.27458191]
[398.86550903 131.86599731]
[383.95016479 133.45741272]
[369.03482056 135.04882812]
[354.11947632 136.64024353]
[339.20413208 138.23165894]
[324.28878784 139.82308960]
[336.99523926 147.79467773]
[344.66699219 160.68437195]
[345.61505127 175.65438843]
[339.63070679 189.40892029]
[328.03143311 198.91981506]
[313.37094116 202.09315491]
[298.87686157 198.23030090]
[287.74020386 188.18168640]
[282.41278076 174.15960693]
[284.06747437 159.25115967]
[292.34002686 146.73855591]
[305.40756226 139.37699890]
[290.58401489 137.08299255]
[275.76046753 134.78898621]
[260.93692017 132.49497986]
[246.11337280 130.20097351]
[231.28982544 127.90695953]
[222.92532349 140.25607300]
[209.97532654 147.77981567]
[194.98146057 148.93959045]
[180.91355896 143.45193481]
[170.58137512 132.35540771]
[166.07342529 117.81443024]
[151.24987793 115.52042389]
[136.42633057 113.22640991]
[121.60278320 110.93240356]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 34]
[3 33]
[4 32]
[5 31]
[6 30]
[8 28]
[9 27]
[12 24]
[13 23]
[14 22]
[15 21]
[44 71]
[46 69]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[74 132]
[75 131]
[76 130]
[77 129]
[83 123]
[84 122]
[85 121]
[86 120]
[87 119]
[88 118]
[89 106]
[90 105]
[91 104]
[92 103]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
