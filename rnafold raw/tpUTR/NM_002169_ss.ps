%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 21:44:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUGGUUCAACAUCGAAAUGAUUCUCAUUGACUAGUACACCAUUUCACACUUCUUGAGUUCUGCCGUUUCA\
) } def
/len { sequence length } bind def

/coor [
[181.50404358 151.12402344]
[179.34408569 136.24850464]
[179.53787231 121.21823120]
[164.75363159 118.68321991]
[149.96939087 116.14820862]
[135.18516541 113.61319733]
[120.40092468 111.07818604]
[105.61668396 108.54317474]
[97.50769806 110.42753601]
[90.26440430 105.57402039]
[75.60107422 102.41383362]
[60.93774796 99.25363922]
[51.24135590 109.28705597]
[37.93653488 113.11257935]
[24.60386086 109.81410980]
[14.77505589 100.37770081]
[10.99751949 87.40016937]
[-3.51847506 83.62049866]
[-18.03446960 79.84082794]
[-33.69205475 84.71648407]
[-45.55814362 73.39711761]
[-41.42591476 57.52712250]
[-25.54625893 53.43218994]
[-14.25479889 65.32482910]
[0.26119575 69.10449982]
[14.77719021 72.88417053]
[26.97364044 62.10629654]
[43.34489822 60.59884644]
[57.58621979 69.13719940]
[64.09793854 84.59030914]
[78.76126099 87.75050354]
[93.42459106 90.91069031]
[108.15169525 93.75893402]
[122.93593597 96.29394531]
[137.72016907 98.82895660]
[152.50440979 101.36396790]
[167.28865051 103.89897919]
[182.07289124 106.43399811]
[186.89733887 92.19773102]
[193.88955688 78.89151001]
[202.87733459 66.84300995]
[213.63932800 56.34893417]
[225.91055298 47.66770554]
[239.38879395 41.01310730]
[253.74212646 36.54902267]
[268.61712646 34.38537216]
[283.64743042 34.57544708]
[298.46295166 37.11456680]
[312.69879150 41.94019318]
[326.00445557 48.93350220]
[338.05221558 57.92227173]
[348.54541016 68.68514252]
[357.22561646 80.95707703]
[363.87908936 94.43585968]
[368.34201050 108.78957367]
[370.50442505 123.66473389]
[370.31311035 138.69503784]
[367.77276611 153.51033020]
[362.94595337 167.74580383]
[355.95156860 181.05087280]
[346.96179199 193.09788513]
[336.19805908 203.59017944]
[323.92541504 212.26939392]
[310.44607544 218.92176819]
[296.09197998 223.38348389]
[281.21664429 225.54467773]
[266.18637085 225.35211182]
[251.37127686 222.81056213]
[237.13621521 217.98257446]
[223.83172607 210.98707581]
[211.78544617 201.99632263]
[201.29403687 191.23171997]
[192.61584473 178.95834351]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 38]
[4 37]
[5 36]
[6 35]
[7 34]
[8 33]
[10 32]
[11 31]
[12 30]
[17 26]
[18 25]
[19 24]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
