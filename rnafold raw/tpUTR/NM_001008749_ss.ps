%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 21:22:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUGUUUGCAAAGCCAGUUGCACCCACCAAAGAGGCCGCCUCUGAAACCAAAGGUAGCCAGGAUACCGUAGUGUUGCCCCAGUGGCGCUUUAGACCCCAG\
) } def
/len { sequence length } bind def

/coor [
[81.38226318 124.27136230]
[75.35192871 138.89823914]
[60.56898499 140.71862793]
[48.80006790 150.01878357]
[46.81980896 165.46922302]
[34.75197220 174.73324585]
[20.03453636 172.75015259]
[8.26562309 182.05029297]
[-3.50329089 191.35043335]
[-15.27220440 200.65057373]
[-27.04111862 209.95072937]
[-28.63124466 225.67481995]
[-40.92690659 235.60417175]
[-56.63330841 233.84790039]
[-66.43212128 221.44793701]
[-64.50988007 205.76098633]
[-52.00701523 196.09382629]
[-36.34126282 198.18180847]
[-24.57234764 188.88166809]
[-12.80343437 179.58152771]
[-1.03452003 170.28137207]
[10.73439407 160.98123169]
[12.20734501 146.20402527]
[24.01021385 136.60470581]
[39.49992752 138.24986267]
[51.26884079 128.94972229]
[56.45738602 114.98805237]
[72.08212280 112.50244904]
[69.86095428 105.23040771]
[69.50201416 97.63519287]
[71.02748871 90.18608856]
[74.34310913 83.34336853]
[79.24401855 77.52983093]
[85.42739868 73.10467529]
[81.73321533 58.56668854]
[78.03903198 44.02870560]
[67.14135742 32.55912399]
[71.50588226 18.31833267]
[67.81169891 3.78034687]
[64.11751556 -10.75763798]
[60.42332840 -25.29562378]
[49.52565384 -36.76520157]
[53.89017868 -51.00599670]
[50.19599533 -65.54398346]
[38.37000656 -76.90522766]
[42.55831528 -92.76051331]
[58.45235443 -96.79927826]
[69.70169067 -84.86679077]
[64.73397827 -69.23816681]
[68.42816162 -54.70018005]
[79.06160736 -44.27045441]
[74.96131134 -28.98980713]
[78.65549469 -14.45182133]
[82.34968567 0.08616319]
[86.04386902 14.62414837]
[96.67730713 25.05387306]
[92.57701874 40.33452225]
[96.27120209 54.87250519]
[99.96538544 69.41049194]
[121.46121216 78.20239258]
[130.58634949 99.55889130]
[145.18002319 103.02653503]
[153.55236816 90.41189575]
[165.71260071 81.43966675]
[180.18159485 77.17721558]
[195.20758057 78.12046814]
[208.97822571 84.13632965]
[219.83924866 94.48103333]
[226.49308777 107.89205933]
[228.15394592 122.74220276]
[242.74761963 126.20984650]
[257.34130859 129.67749023]
[271.93499756 133.14514160]
[286.52865601 136.61277771]
[301.12234497 140.08042908]
[315.71600342 143.54806519]
[330.30969238 147.01571655]
[345.85916138 141.80555725]
[357.96517944 152.86796570]
[354.17407227 168.82289124]
[338.38583374 173.25726318]
[326.84204102 161.60939026]
[312.24838257 158.14175415]
[297.65469360 154.67410278]
[283.06100464 151.20646667]
[268.46734619 147.73881531]
[253.87365723 144.27116394]
[239.27998352 140.80352783]
[224.68630981 137.33587646]
[216.52293396 149.85166931]
[204.54763794 158.83616638]
[190.19416809 163.18957520]
[175.18928528 162.36801147]
[161.34504700 156.45132446]
[150.33993530 146.13591003]
[143.51542664 132.65266418]
[141.71238708 117.62021637]
[127.11870575 114.15256500]
[118.60399628 124.28189850]
[106.60787964 129.86729431]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[3 26]
[4 25]
[7 22]
[8 21]
[9 20]
[10 19]
[11 18]
[34 59]
[35 58]
[36 57]
[38 55]
[39 54]
[40 53]
[41 52]
[43 50]
[44 49]
[61 98]
[62 97]
[70 89]
[71 88]
[72 87]
[73 86]
[74 85]
[75 84]
[76 83]
[77 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
