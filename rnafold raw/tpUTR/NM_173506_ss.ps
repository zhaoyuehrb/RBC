%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 11:55:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUCUAGCUGCACCCGACAAGCACCCAGACUCUUUCACAUAACAAAUAAAAUAGCAGAGUUCCCUUUC\
) } def
/len { sequence length } bind def

/coor [
[110.17424011 150.79602051]
[99.55661774 151.80303955]
[88.95778656 150.61442566]
[78.82697296 147.28059387]
[69.59355164 141.94281006]
[61.64887619 134.82733154]
[55.32967377 126.23572540]
[50.90377426 116.53215027]
[36.14483261 119.21050262]
[21.38588715 121.88885498]
[16.28047752 136.37437439]
[4.60586834 146.35430908]
[-10.49752998 149.14410400]
[-24.96697807 143.99331665]
[-34.91026688 132.28747559]
[-37.65270233 117.17540741]
[-32.45658493 102.72217560]
[-20.71964073 92.81562805]
[-5.59905005 90.12057495]
[8.83782387 95.36196899]
[18.70753479 107.12991333]
[33.46647644 104.45156097]
[48.22542191 101.77320099]
[51.62881088 81.45332336]
[62.68292236 64.06690979]
[79.63936615 52.36392593]
[99.81618500 48.19539261]
[120.02207947 52.22063446]
[137.06114197 63.80299759]
[149.19639587 54.98621750]
[161.33164978 46.16943741]
[173.46690369 37.35266113]
[185.60215759 28.53588104]
[197.73741150 19.71910286]
[192.32022095 5.63661814]
[190.73338318 -9.36819363]
[193.08511353 -24.27227974]
[199.21505737 -38.05945587]
[208.70526123 -49.78968811]
[220.90867615 -58.66318893]
[234.99325562 -64.07495117]
[249.99867249 -65.65599060]
[264.90185547 -63.29850769]
[278.68667603 -57.16324234]
[290.41323853 -47.66850662]
[299.28201294 -35.46166229]
[304.68835449 -21.37500000]
[306.26358032 -6.36896801]
[303.90036011 8.53329754]
[297.75976562 22.31573486]
[288.26049805 34.03863525]
[276.05023193 42.90270996]
[261.96148682 48.30359650]
[246.95484924 49.87304688]
[232.05349731 47.50405502]
[218.27342224 41.35814667]
[206.55419922 31.85435677]
[194.41894531 40.67113495]
[182.28367615 49.48791504]
[170.14842224 58.30469513]
[158.01316833 67.12147522]
[145.87791443 75.93824768]
[149.83303833 85.84304810]
[151.67604065 96.34786987]
[151.32881165 107.00748444]
[148.80606079 117.37009430]
[144.21470642 126.99649048]
[137.74937439 135.47866821]
[129.68406677 142.45712280]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 23]
[9 22]
[10 21]
[29 62]
[30 61]
[31 60]
[32 59]
[33 58]
[34 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
