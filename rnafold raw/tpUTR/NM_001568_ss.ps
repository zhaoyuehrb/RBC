%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 02:25:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAACCAUAAAGAAAAGAUGAAAAAAAAAACUAUCAAAGAAAGAUGAAAUAAUAAAACUAUUAUAUAAAGGGUGACUUACAUUUUGGAAACAACAUAUUACGUAUAAAUUUUGAAGAAUUGGAAUAAAAUUGAUUCAUUUUA\
) } def
/len { sequence length } bind def

/coor [
[69.59577179 348.98275757]
[67.93106842 364.04940796]
[61.21087646 377.63671875]
[50.24668503 388.10391235]
[36.36247635 394.18704224]
[21.23483467 395.15155029]
[6.69049644 390.88095093]
[-5.51423740 381.89093018]
[-13.90558720 369.26712036]
[-17.47025490 354.53384399]
[-15.77779198 339.47027588]
[-9.03256893 325.89538574]
[1.95089328 315.44839478]
[15.84628963 309.39086914]
[30.97568321 308.45425415]
[35.20167160 294.06185913]
[39.42765808 279.66946411]
[43.65364838 265.27706909]
[47.87963486 250.88465881]
[52.10562515 236.49226379]
[56.33161163 222.09986877]
[60.55760193 207.70747375]
[46.95703888 201.70077515]
[34.24769974 193.98532104]
[22.64312363 184.69071960]
[12.33828831 173.97315979]
[3.50633407 162.01271057]
[-3.70434499 149.01033020]
[-9.17259598 135.18449402]
[-12.80654144 120.76748657]
[-14.54512501 106.00154114]
[-14.35913563 91.13476562]
[-29.20645714 89.00003815]
[-44.05377960 86.86531830]
[-58.90110016 84.73059845]
[-70.43381500 95.29139709]
[-86.05889130 95.91670227]
[-98.39864349 86.31125641]
[-101.62662506 71.01046753]
[-94.21867371 57.23889542]
[-79.67259979 51.49905014]
[-64.85661316 56.50111771]
[-56.76637650 69.88327026]
[-41.91905594 72.01799774]
[-27.07173347 74.15271759]
[-12.22441292 76.28743744]
[-4.69037390 53.13284683]
[7.56149340 32.09030533]
[23.97906303 14.10808277]
[14.79327106 2.24970126]
[5.60747862 -9.60868073]
[-3.57831359 -21.46706200]
[-12.76410580 -33.32544327]
[-21.94989777 -45.18382645]
[-37.32580948 -50.88587952]
[-39.80851746 -67.09600830]
[-26.84402847 -77.13861847]
[-11.76909447 -70.68273163]
[-10.09151649 -54.36961746]
[-0.90572405 -42.51123810]
[8.28006840 -30.65285492]
[17.46586037 -18.79447365]
[26.65165329 -6.93609095]
[35.83744431 4.92229080]
[50.61382294 -3.52588844]
[66.47769928 -9.69439125]
[83.07975006 -13.44738579]
[100.05438995 -14.70222855]
[101.04228210 -29.66966248]
[102.03018188 -44.63709641]
[92.58181763 -57.60273743]
[96.96658325 -73.03495789]
[111.82086182 -79.09547424]
[125.74972534 -71.13517761]
[128.06814575 -55.26052856]
[116.99761963 -43.64919662]
[116.00971985 -28.68176460]
[115.02182007 -13.71433163]
[125.37129211 -11.86108303]
[135.50758362 -9.06794167]
[145.34552002 -5.35837698]
[154.80245972 -0.76355714]
[163.79893494 4.67791080]
[172.25933838 10.92030525]
[182.45042419 -0.08614003]
[192.64151001 -11.09258556]
[195.74430847 -27.19552422]
[211.32766724 -32.30346298]
[223.36074829 -21.16179276]
[219.46496582 -5.23210812]
[203.64794922 -0.90150332]
[193.45686340 10.10494232]
[183.26579285 21.11138725]
[188.81910706 27.42059135]
[193.89550781 34.11951828]
[198.46772766 41.17219162]
[202.51121521 48.54074860]
[206.00427246 56.18561935]
[208.92811584 64.06575775]
[211.26705933 72.13883972]
[213.00856018 80.36153412]
[214.14324951 88.68967438]
[214.66502380 97.07854462]
[214.57110596 105.48310089]
[213.86199951 113.85822296]
[212.54148865 122.15892792]
[210.61668396 130.34065247]
[208.09790039 138.35945129]
[221.87597656 144.28944397]
[235.65405273 150.21942139]
[249.43211365 156.14941406]
[263.21017456 162.07940674]
[276.98825073 168.00938416]
[290.76632690 173.93937683]
[306.98092651 171.48596191]
[317.00009155 184.46858215]
[310.51696777 199.53182983]
[294.20083618 201.17991638]
[284.83633423 187.71745300]
[271.05825806 181.78746033]
[257.28021240 175.85746765]
[243.50213623 169.92749023]
[229.72406006 163.99749756]
[215.94598389 158.06750488]
[202.16792297 152.13752747]
[193.45822144 166.49935913]
[182.74446106 179.43524170]
[170.25639343 190.66775513]
[156.26179504 199.95606995]
[141.06074524 207.10096741]
[124.97923279 211.94927979]
[108.36207581 214.39703369]
[91.56560516 214.39172363]
[74.94999695 211.93347168]
[70.72400665 226.32586670]
[66.49801636 240.71826172]
[62.27202988 255.11065674]
[58.04604340 269.50305176]
[53.82005310 283.89544678]
[49.59406662 298.28784180]
[45.36807632 312.68023682]
[57.58935928 321.64773560]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[32 46]
[33 45]
[34 44]
[35 43]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
[54 59]
[68 78]
[69 77]
[70 76]
[84 93]
[85 92]
[86 91]
[108 125]
[109 124]
[110 123]
[111 122]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
