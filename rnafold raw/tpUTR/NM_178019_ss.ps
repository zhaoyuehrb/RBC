%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 11:55:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGGCAUGGGGCACCCAUGUGCCGAGAGCCUUGCAGACCAUGACAGGUCCCUAUUAAACACAGGCUUUCUGAGUUGUCCUCUC\
) } def
/len { sequence length } bind def

/coor [
[84.41540527 140.12925720]
[82.59461975 125.24018097]
[92.35874939 113.85380554]
[79.75359344 121.98460388]
[67.30083466 130.34695435]
[55.00472260 138.93797302]
[42.70861816 147.52900696]
[30.41250992 156.12002563]
[18.11640167 164.71105957]
[5.82029486 173.30207825]
[-6.47581244 181.89311218]
[-15.99683952 195.92117310]
[-32.11235809 190.65557861]
[-31.51376915 173.71220398]
[-15.06684017 169.59700012]
[-2.77073240 161.00598145]
[9.52537441 152.41494751]
[21.82148170 143.82392883]
[34.11758804 135.23289490]
[46.41369629 126.64186859]
[58.70980453 118.05084229]
[62.47912979 111.48147583]
[71.62278748 109.37944794]
[84.22795105 101.24864197]
[93.70362091 89.62058258]
[99.12224579 75.63349915]
[104.54087067 61.64641953]
[109.95949554 47.65933609]
[115.37812042 33.67225266]
[120.79674530 19.68516922]
[126.21537018 5.69808483]
[131.63398743 -8.28899860]
[136.79322815 -22.37382317]
[141.69129944 -36.55158234]
[129.19615173 -55.73205185]
[133.96102905 -77.87183380]
[152.82818604 -89.94986725]
[153.93597412 -104.90890503]
[155.04376221 -119.86794281]
[156.15155029 -134.82698059]
[145.64353943 -146.63194275]
[146.64402771 -162.40454102]
[158.55943298 -172.78715515]
[174.32057190 -171.61996460]
[184.57661438 -159.59544373]
[183.24285889 -143.84753418]
[171.11059570 -133.71919250]
[170.00280762 -118.76015472]
[168.89501953 -103.80111694]
[167.78723145 -88.84207916]
[175.23176575 -85.07269287]
[181.31584167 -79.32183075]
[185.52565002 -72.05364990]
[187.49955750 -63.86130142]
[187.05917358 -55.41852570]
[184.22531128 -47.42424011]
[179.21755981 -40.54468536]
[172.43736267 -35.35789871]
[164.43585205 -32.30516434]
[155.86906433 -31.65350151]
[150.97097778 -17.47574425]
[151.78291321 -9.94545841]
[145.62107849 -2.87037373]
[140.20245361 11.11670971]
[134.78382874 25.10379410]
[129.36520386 39.09087753]
[123.94657898 53.07796097]
[118.52795410 67.06504059]
[113.10932922 81.05212402]
[107.69070435 95.03920746]
[118.79750824 97.96928406]
[126.84823608 110.03382111]
[135.21057129 122.48657990]
[143.57292175 134.93934631]
[158.97428894 139.43125916]
[164.93141174 154.32731628]
[156.87448120 168.20051575]
[140.98410034 170.40852356]
[129.44999695 159.25756836]
[131.12016296 143.30168152]
[122.75781250 130.84892273]
[114.39546967 118.39616394]
[118.86090088 132.71607971]
[111.30031586 145.67129517]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 24]
[4 23]
[5 21]
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[11 15]
[25 70]
[26 69]
[27 68]
[28 67]
[29 66]
[30 65]
[31 64]
[32 63]
[33 61]
[34 60]
[37 50]
[38 49]
[39 48]
[40 47]
[72 82]
[73 81]
[74 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
