%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 22:39:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUAAACAGUACAGGUAAAUGAGGAGAGAGUUAAUAUAAGCUGCCAUUAUGUAAAAGAAAAUGUAGGAAAAAGAAAAGGUAGGUAGCCGA\
) } def
/len { sequence length } bind def

/coor [
[199.17092896 147.16865540]
[191.82458496 160.23287964]
[182.76779175 172.17510986]
[172.16923523 182.77290344]
[160.22636414 191.82885742]
[147.16162109 199.17427063]
[133.21836853 204.67231750]
[118.65634918 208.22058105]
[103.74680328 209.75297546]
[88.76747131 209.24095154]
[73.99736786 206.69403076]
[59.71163177 202.15968323]
[46.17636490 195.72236633]
[33.64369583 187.50196838]
[22.34707451 177.65164185]
[12.49693203 166.35485840]
[4.27674913 153.82205200]
[-2.16035247 140.28668213]
[-6.69446564 126.00086212]
[-9.24113178 111.23072052]
[-9.75291252 96.25138092]
[-8.22027397 81.34186554]
[-4.67176723 66.77989960]
[0.82650936 52.83674622]
[8.17213631 39.77212143]
[17.22828484 27.82938957]
[27.82625961 17.23101425]
[39.76864624 8.17441559]
[52.83299255 0.82829380]
[66.77593994 -4.67051029]
[81.33776855 -8.21956825]
[96.24722290 -9.75277042]
[111.22658539 -9.24155617]
[125.99682617 -6.69544935]
[140.28280640 -2.16187644]
[153.81843567 4.27471304]
[166.35154724 12.49442196]
[177.64869690 22.34413719]
[187.49946594 33.64038467]
[195.72032166 46.17274475]
[202.15815735 59.70776749]
[216.45533752 55.17004776]
[230.75250244 50.63233185]
[245.04968262 46.09461212]
[259.34683228 41.55689621]
[273.64401245 37.01917648]
[271.51376343 22.13590240]
[271.86242676 7.10499001]
[274.68048096 -7.66350365]
[279.89105225 -21.76668358]
[287.35202026 -34.81980515]
[296.85980225 -46.46677399]
[308.15505981 -56.38984299]
[320.92959595 -64.31831360]
[334.83496094 -70.03588104]
[349.49179077 -73.38657379]
[364.50024414 -74.27898407]
[379.45086670 -72.68875885]
[393.93579102 -68.65927887]
[407.55987549 -62.30048370]
[419.95144653 -53.78583527]
[430.77243042 -43.34762573]
[439.72763062 -31.27061272]
[446.57272339 -17.88426590]
[451.12103271 -3.55377817]
[453.24841309 11.32990646]
[452.89685059 26.36075020]
[450.07595825 41.12870026]
[444.86267090 55.23087692]
[437.39920044 68.28256226]
[427.88916016 79.92769623]
[416.59201050 89.84859467]
[403.81591797 97.77459717]
[389.90945435 103.48948669]
[375.25198364 106.83735657]
[360.24334717 107.72687531]
[345.29302979 106.13376617]
[330.80889893 102.10150146]
[317.18603516 95.74008179]
[304.79611206 87.22304535]
[293.97714233 76.78275299]
[285.02426147 64.70401001]
[278.18173218 51.31634903]
[263.88455200 55.85406494]
[249.58738708 60.39178467]
[235.29022217 64.92950439]
[220.99305725 69.46722412]
[206.69587708 74.00493622]
[209.24174500 88.77522278]
[209.75270081 103.75459290]
[208.21925354 118.66402435]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[41 88]
[42 87]
[43 86]
[44 85]
[45 84]
[46 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
