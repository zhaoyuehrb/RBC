%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:12:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUGUAAAUUGAUAAAUUGGGGUAAUGGACCUUGAUAGAUUAAGAAGACAAAAUAUCUAGGAAUUAGAUGCCUACUACAUUAAAAUUAUUCAUAAAAUUACACUUAUGUGUAAAAAUAAAUGAUUCUUACUUUUACUGAA\
) } def
/len { sequence length } bind def

/coor [
[-91.23089600 244.40226746]
[-100.24629211 238.08673096]
[-107.89351654 230.17750549]
[-113.89555359 220.96426392]
[-127.96555328 226.16380310]
[-142.03555298 231.36334229]
[-146.37048340 247.67367554]
[-159.42509460 258.10589600]
[-175.95872498 258.72421265]
[-189.48245239 249.48318481]
[-203.43397522 254.99270630]
[-217.38551331 260.50222778]
[-231.33703613 266.01174927]
[-245.28857422 271.52127075]
[-251.64192200 285.74353027]
[-265.86923218 291.13223267]
[-279.38882446 284.98764038]
[-293.34036255 290.49716187]
[-307.29190063 296.00668335]
[-321.24340820 301.51620483]
[-335.19494629 307.02572632]
[-349.14648438 312.53524780]
[-363.09802246 318.04476929]
[-377.04953003 323.55429077]
[-384.72744751 337.64080811]
[-400.55212402 340.27874756]
[-412.38424683 329.44451904]
[-411.14721680 313.44921875]
[-397.78997803 304.56307983]
[-382.55905151 309.60278320]
[-368.60754395 304.09323120]
[-354.65600586 298.58370972]
[-340.70446777 293.07418823]
[-326.75296021 287.56466675]
[-312.80142212 282.05514526]
[-298.84988403 276.54562378]
[-284.89837646 271.03610229]
[-279.22497559 257.31210327]
[-265.15463257 251.52590942]
[-250.79809570 257.56973267]
[-236.84655762 252.06022644]
[-222.89503479 246.55070496]
[-208.94351196 241.04116821]
[-194.99197388 235.53164673]
[-192.85848999 222.30830383]
[-184.38612366 211.79421997]
[-171.71673584 206.81869507]
[-158.13905334 208.78878784]
[-147.23509216 217.29333496]
[-133.16508484 212.09379578]
[-119.09509277 206.89425659]
[-120.20834351 187.53768921]
[-114.83301544 168.88786316]
[-103.56458282 153.05982971]
[-87.66765594 141.85327148]
[-68.93403625 136.54791260]
[-49.48077393 137.75743103]
[-31.51094437 145.35841370]
[-17.06411362 158.50289917]
[-4.12939548 150.90730286]
[8.80532360 143.31170654]
[21.74004173 135.71611023]
[34.67475891 128.12051392]
[47.60947800 120.52491760]
[60.54419708 112.92932892]
[73.47891998 105.33373260]
[86.41363525 97.73813629]
[94.98705292 85.42974091]
[97.62807465 70.66407776]
[100.26910400 55.89840698]
[102.91013336 41.13273621]
[92.74974823 29.24574280]
[92.65895081 13.60842419]
[102.68061066 1.60424232]
[118.08280182 -1.09879339]
[131.59309387 6.77560759]
[136.83232117 21.50939369]
[131.32670593 36.14572144]
[117.67580414 43.77376556]
[115.03477478 58.53943253]
[112.39374542 73.30509949]
[109.75271606 88.07077026]
[114.56655884 93.82202911]
[123.96331787 82.13011169]
[133.36007690 70.43819427]
[142.75683594 58.74627304]
[146.03659058 44.10922241]
[156.54837036 33.40865326]
[171.12474060 29.86892509]
[185.37342834 34.55665207]
[195.00094604 46.05929947]
[197.10627747 60.91082001]
[191.05500793 74.63606262]
[178.67056274 83.09925079]
[163.68545532 83.75038147]
[150.52172852 90.94176483]
[137.35798645 98.13314819]
[124.19424438 105.32453156]
[129.00808716 111.07579041]
[144.00808716 111.07579041]
[159.00808716 111.07579041]
[174.00808716 111.07579041]
[189.00808716 111.07579041]
[204.00808716 111.07579041]
[217.93188477 102.41208649]
[232.26731873 110.37621307]
[232.26731873 126.77536011]
[217.93188477 134.73948669]
[204.00808716 126.07579041]
[189.00808716 126.07579041]
[174.00808716 126.07579041]
[159.00808716 126.07579041]
[144.00808716 126.07579041]
[129.00808716 126.07579041]
[129.72059631 141.05885315]
[122.09478760 153.97578430]
[108.63181305 160.59004211]
[93.74730682 158.73225403]
[82.32312775 149.01174927]
[78.10623169 134.61668396]
[82.47968292 120.26841736]
[94.00923157 110.67285156]
[81.07450867 118.26844788]
[68.13979340 125.86404419]
[55.20507431 133.45964050]
[42.27035522 141.05523682]
[29.33563614 148.65083313]
[16.40091705 156.24642944]
[3.46619916 163.84201050]
[-9.46851921 171.43760681]
[-6.15972281 182.01499939]
[-4.92150402 193.02261353]
[-5.79678106 204.05920410]
[-8.75147057 214.72286987]
[-13.67580795 224.62571716]
[-20.38842583 233.40798950]
[-28.64303017 240.75105286]
[-38.13743973 246.38905334]
[-48.52464676 250.11851501]
[-59.42549896 251.80561829]
[-70.44253540 251.39109802]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 51]
[5 50]
[6 49]
[10 44]
[11 43]
[12 42]
[13 41]
[14 40]
[17 37]
[18 36]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[59 130]
[60 129]
[61 128]
[62 127]
[63 126]
[64 125]
[65 124]
[66 123]
[67 122]
[68 82]
[69 81]
[70 80]
[71 79]
[99 114]
[100 113]
[101 112]
[102 111]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
