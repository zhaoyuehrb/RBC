%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 09:22:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGACCUCAGACAUGGCUCAGCCAUAGGACCUGCCACACAAGCAGCCGUGGACACAACGCCCACUACCACCUCCCACAUGGAAAUGUAUCCUCAAACCGUUUAAUCAAUAAAGCCUCUUCCG\
) } def
/len { sequence length } bind def

/coor [
[185.21435547 147.40734863]
[171.58427429 141.14471436]
[157.95417786 134.88208008]
[144.32408142 128.61943054]
[138.23704529 136.35415649]
[130.81929016 142.82368469]
[122.32896423 147.80287170]
[113.06153870 151.11842346]
[103.33955383 152.65495300]
[93.50135040 152.35899353]
[83.88930511 150.24084473]
[74.83794403 146.37422180]
[66.66226959 140.89367676]
[59.64681625 133.98995972]
[46.91715240 141.92442322]
[34.18748856 149.85887146]
[21.45782280 157.79333496]
[8.72815895 165.72779846]
[-1.51533341 179.23731995]
[-17.33257866 173.13395691]
[-15.84638596 156.24526978]
[0.79369915 152.99813843]
[13.52336311 145.06367493]
[26.25302696 137.12921143]
[38.98268890 129.19474792]
[51.71235275 121.26029205]
[45.27848816 98.74460602]
[49.19952393 74.79172516]
[35.13323975 69.58214569]
[28.37822151 70.33654785]
[23.10119438 67.86383820]
[20.49768639 63.73598862]
[6.71331978 57.82065201]
[-7.07104778 51.90531540]
[-20.85541534 45.98997498]
[-34.73403549 53.19538498]
[-49.98589325 49.74360657]
[-59.40953064 37.26446152]
[-58.55539322 21.65022087]
[-47.82677841 10.27345467]
[-32.28940964 8.50592136]
[-19.27955818 17.18219757]
[-14.94007683 32.20560837]
[-1.15570974 38.12094879]
[12.62865734 44.03628540]
[26.41302490 49.95162201]
[40.34281921 55.51586533]
[54.40910339 60.72544479]
[65.53930664 50.66967392]
[61.77951813 36.14851761]
[58.01972961 21.62735939]
[54.25994110 7.10620260]
[43.31058884 -4.31405449]
[47.61077118 -18.57440948]
[34.57038116 -27.91934586]
[33.88993073 -43.94796371]
[46.09139633 -54.36447525]
[61.81486130 -51.17822647]
[68.99862671 -36.83343506]
[62.13192749 -22.33419800]
[72.81235504 -11.95258999]
[68.78109741 3.34641457]
[72.54088593 17.86757088]
[76.30067444 32.38872910]
[80.06046295 46.90988541]
[92.28292847 44.21520996]
[104.71135712 44.27781296]
[116.73573303 47.05617142]
[127.77433014 52.37639618]
[137.30183411 59.94261932]
[144.87432861 69.35321045]
[150.14996338 80.12196350]
[152.90417480 91.70316315]
[153.03915405 103.51918793]
[150.58671570 114.98934937]
[164.21681213 121.25198364]
[177.84690857 127.51461792]
[191.47698975 133.77725220]
[211.37263489 117.03157806]
[239.32104492 116.81908417]
[262.50097656 135.69744873]
[276.69473267 130.84588623]
[290.88845825 125.99431610]
[297.62268066 111.69656372]
[312.52261353 106.42702484]
[326.74835205 113.31203461]
[331.86007690 128.26683044]
[324.82504272 142.41900635]
[309.81704712 147.37231445]
[295.74002075 140.18804932]
[281.54629517 145.03962708]
[267.35253906 149.89118958]
[265.84280396 157.23767090]
[280.62496948 159.78486633]
[295.57257080 158.53211975]
[301.63888550 172.25070190]
[290.65414429 182.46517944]
[277.41201782 175.41928101]
[262.82333374 171.93061829]
[261.31359863 179.27709961]
[272.44381714 189.33287048]
[283.57400513 199.38864136]
[294.70422363 209.44441223]
[309.85928345 206.11222839]
[324.06509399 212.35519409]
[331.85922241 225.77276611]
[330.24465942 241.20561218]
[319.84225464 252.71948242]
[304.65191650 255.88708496]
[290.51467896 249.49037170]
[282.86654663 235.98904419]
[284.64843750 220.57461548]
[273.51821899 210.51884460]
[262.38803101 200.46307373]
[251.25782776 190.40730286]
[241.32215881 195.97326660]
[230.52182007 198.82499695]
[219.56945801 198.88629150]
[209.16072083 196.26155090]
[199.92994690 191.22238159]
[192.41166687 184.18386841]
[187.00975037 175.67242432]
[183.97640991 166.28730774]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[4 75]
[14 26]
[15 25]
[16 24]
[17 23]
[18 22]
[28 48]
[29 47]
[32 46]
[33 45]
[34 44]
[35 43]
[49 65]
[50 64]
[51 63]
[52 62]
[54 60]
[81 92]
[82 91]
[83 90]
[100 115]
[101 114]
[102 113]
[103 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
