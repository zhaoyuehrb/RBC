%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:26:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGAGUUUCUGAAAUACUUUGGAAAAGUCUCCCAAACCUUCAGAGAGUGGAUGGGAGCGAAGUAAGGAGACCCCACCUGAGCAGAUACAUGGUAUUGCUUACAAUAAAGUACAUUUUUGCUCUUUACAA\
) } def
/len { sequence length } bind def

/coor [
[202.54469299 176.02418518]
[194.87625122 166.54978943]
[189.55671692 155.57260132]
[186.86810303 143.66485596]
[186.95513916 131.44836426]
[172.48199463 127.50775146]
[158.00886536 123.56713867]
[143.53573608 119.62652588]
[129.06260681 115.68592072]
[114.58946991 111.74530792]
[107.55094147 117.14024353]
[98.81959534 118.69255066]
[90.35287476 116.05421448]
[84.04892731 109.81671906]
[81.32100677 101.37844086]
[67.17133331 96.39981842]
[53.02165604 91.42120361]
[38.87197876 86.44258118]
[24.72229958 81.46396637]
[10.57262325 76.48535156]
[-3.57705402 71.50672913]
[2.29723167 85.30863953]
[-1.87988472 99.71529388]
[-14.22598267 108.23432922]
[-29.17728615 107.02662659]
[-39.99597931 96.63644409]
[-41.80661011 81.74612427]
[-33.79322052 69.06599426]
[-19.56668472 64.31037903]
[-32.67620468 57.02062988]
[-45.78572464 49.73088074]
[-58.89524841 42.44112778]
[-72.00476837 35.15137863]
[-85.11428833 27.86162567]
[-100.13885498 31.97260284]
[-113.32992554 24.39300919]
[-117.15652466 10.04404545]
[-130.35316467 2.91322541]
[-143.63500977 -4.05762243]
[-156.91685486 -11.02847004]
[-173.27198792 -9.82785606]
[-182.26426697 -23.54174995]
[-174.64320374 -38.06247330]
[-158.24868774 -38.45235062]
[-149.94599915 -24.31031036]
[-136.66415405 -17.33946228]
[-123.38232422 -10.36861515]
[-115.92214966 -10.04251099]
[-109.86677551 -3.06547523]
[-95.65872192 -7.38599396]
[-82.25995636 -0.17989986]
[-77.82453918 14.75210571]
[-64.71501923 22.04185677]
[-51.60549545 29.33160782]
[-38.49597549 36.62136078]
[-25.38645363 43.91110992]
[-12.27693367 51.20086288]
[1.40156364 57.35705185]
[15.55124092 62.33567047]
[29.70091820 67.31428528]
[43.85059357 72.29290771]
[58.00027084 77.27152252]
[72.14994812 82.25014496]
[86.29962921 87.22875977]
[105.57216644 82.11828613]
[118.53007507 97.27217102]
[133.00320435 101.21278381]
[147.47634888 105.15339661]
[161.94947815 109.09400940]
[176.42260742 113.03461456]
[190.89573669 116.97522736]
[200.88365173 101.77426147]
[215.37556458 90.82009888]
[232.68164062 85.37113190]
[250.79023743 86.04489136]
[267.60171509 92.74814606]
[281.17196655 104.68943024]
[289.93707275 120.47248840]
[292.89370728 138.25950623]
[307.73629761 140.42683411]
[322.57888794 142.59417725]
[337.42150879 144.76150513]
[352.26409912 146.92884827]
[367.10668945 149.09617615]
[381.94927979 151.26351929]
[394.12951660 137.94657898]
[411.69711304 134.55911255]
[427.67465210 142.25706482]
[435.82901001 157.83074951]
[450.75900269 159.27845764]
[462.89160156 149.50926208]
[478.01211548 151.19013977]
[487.25076294 162.81694031]
[502.18075562 164.26464844]
[517.11071777 165.71235657]
[532.04071045 167.16006470]
[546.97064209 168.60777283]
[561.66564941 161.32836914]
[575.16552734 170.63888550]
[573.58276367 186.96147156]
[558.54559326 193.50485229]
[545.52294922 183.53775024]
[530.59301758 182.09004211]
[515.66302490 180.64233398]
[500.73303223 179.19462585]
[485.80307007 177.74691772]
[474.50268555 187.38212585]
[459.34094238 186.12663269]
[449.31127930 174.20843506]
[434.38131714 172.76072693]
[427.69281006 183.02763367]
[417.19088745 189.48046875]
[404.86535645 190.82369995]
[393.08291626 186.73690796]
[384.13278198 177.94837952]
[379.78195190 166.10610962]
[364.93936157 163.93878174]
[350.09677124 161.77143860]
[335.25415039 159.60411072]
[320.41156006 157.43676758]
[305.56896973 155.26943970]
[290.72637939 153.10209656]
[286.02947998 164.25889587]
[278.91525269 174.06440735]
[269.75234985 182.00337219]
[259.01718140 187.65737915]
[247.26922607 190.72702026]
[235.12178040 191.04768372]
[223.21000671 188.59834290]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 71]
[6 70]
[7 69]
[8 68]
[9 67]
[10 66]
[15 64]
[16 63]
[17 62]
[18 61]
[19 60]
[20 59]
[21 58]
[29 57]
[30 56]
[31 55]
[32 54]
[33 53]
[34 52]
[37 49]
[38 47]
[39 46]
[40 45]
[79 122]
[80 121]
[81 120]
[82 119]
[83 118]
[84 117]
[85 116]
[89 110]
[90 109]
[93 106]
[94 105]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
