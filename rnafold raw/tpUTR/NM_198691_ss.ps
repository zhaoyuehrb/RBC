%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 09:32:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCUCUGCUCAGGCCAGGAGUCCAGCUGCUGAUGGGCACCCGCCCUGGGCCAGCUGGGCUCAGUUCCUGACCUGGGUUAGGUGGCUUCCCCCACCUAGGACGGGUCCCCGUGUCUC\
) } def
/len { sequence length } bind def

/coor [
[84.33367157 149.36784363]
[77.77405548 162.85752869]
[71.21444702 176.34721375]
[64.65483856 189.83689880]
[58.09523010 203.32658386]
[63.49451447 218.17997742]
[56.73383713 232.46524048]
[41.82418823 237.70718384]
[27.61120033 230.79585266]
[22.52718353 215.83161926]
[29.58839798 201.69248962]
[44.60554886 196.76696777]
[51.16515732 183.27728271]
[57.72476578 169.78759766]
[64.28437805 156.29792786]
[70.84398651 142.80824280]
[54.59085846 124.91241455]
[48.23038864 101.58927155]
[53.14823914 77.91989899]
[40.64852905 69.62789917]
[28.14882088 61.33589554]
[15.64911175 53.04389572]
[3.14940333 44.75189209]
[-9.35030556 36.45989227]
[-21.85001373 28.16789246]
[-34.34972382 19.87589073]
[-46.84943008 11.58388996]
[-59.34914017 3.29188848]
[-71.84884644 -5.00011253]
[-84.45783234 -13.12498951]
[-97.17384338 -21.08130264]
[-112.97675323 -21.84202766]
[-119.66207123 -35.15201569]
[-128.72268677 -37.09166336]
[-132.60673523 -43.49319839]
[-145.10644531 -51.78519821]
[-157.60615540 -60.07720184]
[-170.10586548 -68.36920166]
[-186.49806213 -68.84669495]
[-194.04141235 -83.40794373]
[-184.97595215 -97.07358551]
[-168.62747192 -95.78557587]
[-161.81387329 -80.86891174]
[-149.31416321 -72.57691193]
[-136.81445312 -64.28491211]
[-124.31474304 -55.99290848]
[-111.70575714 -47.86803055]
[-96.81238556 -47.67639542]
[-89.21752930 -33.79732132]
[-76.50151825 -25.84100533]
[-69.06711578 -24.94924545]
[-63.55684662 -17.49982071]
[-51.05714035 -9.20781994]
[-38.55743027 -0.91581923]
[-26.05772209 7.37618160]
[-13.55801296 15.66818237]
[-1.05830443 23.96018410]
[11.44140434 32.25218582]
[23.94111252 40.54418564]
[36.44082260 48.83618546]
[48.94052887 57.12818909]
[61.44023895 65.42018890]
[72.63687134 56.02412415]
[86.01277924 50.13040924]
[100.50266266 48.20843887]
[114.95251465 50.41128159]
[128.21150208 56.56349945]
[139.22366333 66.17510986]
[147.11193848 78.48062897]
[151.24810791 92.50000000]
[166.24810791 92.50000000]
[181.24810791 92.50000000]
[196.24810791 92.50000000]
[211.24810791 92.50000000]
[226.24810791 92.50000000]
[237.38122559 81.60544586]
[252.59336853 81.81912994]
[262.91104126 92.50000000]
[277.91104126 92.50000000]
[292.91104126 92.50000000]
[307.91104126 92.50000000]
[322.91104126 92.50000000]
[337.91104126 92.50000000]
[352.91104126 92.50000000]
[367.91104126 92.50000000]
[378.90774536 81.14886475]
[394.71115112 80.98176575]
[405.94537354 92.09785461]
[405.94537354 107.90214539]
[394.71115112 119.01823425]
[378.90774536 118.85113525]
[367.91104126 107.50000000]
[352.91104126 107.50000000]
[337.91104126 107.50000000]
[322.91104126 107.50000000]
[307.91104126 107.50000000]
[292.91104126 107.50000000]
[277.91104126 107.50000000]
[262.91104126 107.50000000]
[252.59336853 118.18087006]
[237.38122559 118.39455414]
[226.24810791 107.50000000]
[211.24810791 107.50000000]
[196.24810791 107.50000000]
[181.24810791 107.50000000]
[166.24810791 107.50000000]
[151.24810791 107.50000000]
[149.63554382 114.79634857]
[146.98983765 121.78471375]
[143.36607361 128.31965637]
[138.83966064 134.26513672]
[133.50483704 139.49740601]
[127.47261810 143.90756226]
[120.86858368 147.40380859]
[113.83017731 149.91337585]
[106.50390625 151.38401794]
[99.04225922 151.78514099]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[5 12]
[19 62]
[20 61]
[21 60]
[22 59]
[23 58]
[24 57]
[25 56]
[26 55]
[27 54]
[28 53]
[29 52]
[30 50]
[31 49]
[33 47]
[35 46]
[36 45]
[37 44]
[38 43]
[70 107]
[71 106]
[72 105]
[73 104]
[74 103]
[75 102]
[78 99]
[79 98]
[80 97]
[81 96]
[82 95]
[83 94]
[84 93]
[85 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
