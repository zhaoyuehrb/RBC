%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 07:45:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUUUGUGUGUCAGGAGAGAAAAAAGUUGAGUGUUGACAAACUGUAUGCAAACUAAUAAAACUAUUCUGAAGAAAAGAA\
) } def
/len { sequence length } bind def

/coor [
[122.50995636 152.39137268]
[123.44332123 129.52925110]
[111.97295380 119.86330414]
[100.50259399 110.19734955]
[92.59568024 107.73809814]
[88.79006195 99.94207001]
[77.69368744 89.84897614]
[66.59731293 79.75588989]
[55.50093460 69.66280365]
[44.40456009 59.56971359]
[33.30818176 49.47662735]
[22.21180534 39.38353729]
[11.11542797 29.29045105]
[2.43307400 25.70852470]
[-0.20063291 18.59929657]
[-10.90712452 8.09353447]
[-21.61361694 -2.41222763]
[-34.22253418 5.82362223]
[-48.30728912 11.15595436]
[-63.20911026 13.33536530]
[-78.23101044 12.25992012]
[-92.67038727 7.97992039]
[-105.85189056 0.69554883]
[-117.15899658 -9.25249195]
[-126.06284332 -21.39891243]
[-132.14698792 -35.17560577]
[-135.12686157 -49.93820572]
[-134.86309814 -64.99624634]
[-131.36802673 -79.64542389]
[-124.80511475 -93.20058441]
[-115.48133087 -105.02771759]
[-103.83276367 -114.57365417]
[-90.40422821 -121.39190674]
[-75.82381439 -125.16357422]
[-60.77346039 -125.71225739]
[-45.95711136 -123.01228333]
[-32.06774902 -117.18993378]
[-19.75500679 -108.51753998]
[-9.59477043 -97.40071869]
[-2.06225443 -84.35942841]
[2.49023151 -70.00363159]
[3.84976006 -55.00477219]
[1.95274317 -40.06438065]
[-3.11209226 -25.88123703]
[-11.10785389 -13.11871910]
[-0.40136257 -2.61295724]
[10.30512905 7.89280462]
[21.20851517 18.19407463]
[32.30489349 28.28716278]
[43.40126801 38.38024902]
[54.49764633 48.47333908]
[65.59402466 58.56642532]
[76.69039917 68.65951538]
[87.78677368 78.75260162]
[98.88315582 88.84568787]
[110.16854858 98.72698212]
[121.63890839 108.39293671]
[133.10928345 118.05889130]
[140.83135986 114.21240234]
[149.30274963 112.73316193]
[157.81684875 113.72863770]
[165.66801453 117.10054779]
[172.21005249 122.55430603]
[176.90940857 129.62471008]
[179.38864136 137.71557617]
[179.45672607 146.15002441]
[177.12368774 154.22706604]
[172.59843445 161.27990723]
[181.13737488 173.61224365]
[189.67631531 185.94458008]
[198.21524048 198.27693176]
[213.80162048 199.54145813]
[224.89225769 210.56558228]
[226.25051880 226.14407349]
[217.23506165 238.92121887]
[202.10270691 242.86405945]
[187.99850464 236.11088562]
[181.58200073 221.85037231]
[185.88290405 206.81585693]
[177.34396362 194.48352051]
[168.80503845 182.15118408]
[160.26609802 169.81884766]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 58]
[3 57]
[4 56]
[6 55]
[7 54]
[8 53]
[9 52]
[10 51]
[11 50]
[12 49]
[13 48]
[15 47]
[16 46]
[17 45]
[68 82]
[69 81]
[70 80]
[71 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
