%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 22:37:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGUCUAAAUCACACAUCUGAAGAAAUAAGAGAUUGUCUGUAGUUGAUUGAAACGAGGGCAGUUAUGAAUUGAUUUGGGCAAUCAAAUGAAUUUAUAAAGGAGAAUAAUAUGCUUUUAA\
) } def
/len { sequence length } bind def

/coor [
[35.44894028 232.11183167]
[13.51341438 233.23916626]
[6.75565910 246.63069153]
[-0.00209607 260.02221680]
[-6.75985098 273.41372681]
[-0.42788848 287.71197510]
[-4.81770945 302.72076416]
[-17.85657501 311.35339355]
[-33.38793182 309.53378296]
[-44.07834625 298.12109375]
[-44.88013458 282.50408936]
[-35.41471481 270.05661011]
[-20.15136909 266.65597534]
[-13.39361382 253.26445007]
[-6.63585854 239.87294006]
[0.12189650 226.48141479]
[-5.92632055 220.31629944]
[-10.31414318 212.85896301]
[-12.77503395 204.54725647]
[-13.15585136 195.87133789]
[-11.42635727 187.34480286]
[-7.68146420 179.47421265]
[-2.13605881 172.72911072]
[4.88731623 167.51393127]
[12.97721577 164.14373779]
[21.65739441 162.82527161]
[30.41483498 163.64422607]
[38.73007965 166.55976868]
[48.10416031 154.84965515]
[57.47824097 143.13954163]
[66.85231781 131.42944336]
[76.22640228 119.71932983]
[85.60047913 108.00922394]
[86.18451691 93.02059937]
[77.75004578 80.61657715]
[69.31557465 68.21256256]
[60.88109970 55.80854034]
[52.44662857 43.40452194]
[44.01215744 31.00050354]
[35.57768631 18.59648514]
[22.07332039 17.59660339]
[11.78553677 9.09501076]
[8.36086941 -3.60190058]
[12.84308910 -15.75715828]
[4.73347664 -28.37596130]
[-3.37613535 -40.99476624]
[-18.87058067 -44.10887909]
[-27.55511475 -57.31321335]
[-24.27735519 -72.77387238]
[-10.98194218 -81.31831360]
[4.44319439 -77.87728119]
[12.84659386 -64.49227142]
[9.24266720 -49.10437775]
[17.35227966 -36.48557281]
[25.46189117 -23.86676979]
[41.98521805 -21.04211235]
[51.59051132 -6.89573717]
[47.98170471 10.16201305]
[56.41617584 22.56603241]
[64.85064697 34.97005081]
[73.28511810 47.37406921]
[81.71958923 59.77809143]
[90.15406036 72.18210602]
[98.58853149 84.58612823]
[113.13455200 88.24853516]
[126.43721771 81.31751251]
[139.73988342 74.38648224]
[153.04254150 67.45545959]
[166.34521484 60.52442932]
[179.64787292 53.59340286]
[192.95054626 46.66237640]
[206.25320435 39.73134995]
[214.91664124 26.49294472]
[229.77891541 27.47385597]
[243.08157349 20.54282761]
[256.38424683 13.61180210]
[269.68692017 6.68077517]
[282.98956299 -0.25025153]
[296.29223633 -7.18127823]
[304.63726807 -21.29838371]
[321.03051758 -20.85939407]
[328.60806274 -6.31590319]
[319.57473755 7.37099075]
[303.22326660 6.12138557]
[289.92059326 13.05241203]
[276.61791992 19.98343849]
[263.31527710 26.91446495]
[250.01260376 33.84549332]
[236.70994568 40.77651978]
[228.99800110 53.51916885]
[213.18423462 53.03401566]
[199.88156128 59.96504211]
[186.57890320 66.89606476]
[173.27624512 73.82709503]
[159.97357178 80.75811768]
[146.67091370 87.68914795]
[133.36824036 94.62017059]
[120.06558228 101.55120087]
[134.98606873 100.00883484]
[149.52511597 103.69888306]
[161.90415955 112.16996002]
[170.60893250 124.38581085]
[174.57458496 138.85209656]
[173.31600952 153.79920959]
[166.98716736 167.39868164]
[156.36225891 177.98693848]
[142.74098206 184.26875305]
[127.78961945 185.47564697]
[113.33712006 181.46003723]
[101.15142822 172.71310425]
[92.72318268 160.30484009]
[89.08340454 145.75314331]
[90.67732239 130.83807373]
[97.31059265 117.38330841]
[87.93650818 129.09341431]
[78.56243134 140.80352783]
[69.18834686 152.51362610]
[59.81427002 164.22373962]
[50.44018936 175.93383789]
[58.40776825 196.79187012]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 16]
[3 15]
[4 14]
[5 13]
[28 119]
[29 118]
[30 117]
[31 116]
[32 115]
[33 114]
[34 64]
[35 63]
[36 62]
[37 61]
[38 60]
[39 59]
[40 58]
[44 55]
[45 54]
[46 53]
[65 98]
[66 97]
[67 96]
[68 95]
[69 94]
[70 93]
[71 92]
[72 91]
[74 89]
[75 88]
[76 87]
[77 86]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
