%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 07:33:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGGAGGAGGCUCCUGGUGUCUGAAACGGCAGUGUAUUUUACAGCAAUAUGUUUCCACUCUCUUCCUUGUCUUCUUUCUGGAAUGGUUUUCUUUUCCAUUUUCAUUACCACCUUUGCUUGGAAAAGAAUGGAUUAAUGGAUUCUAAAAGCCUAA\
) } def
/len { sequence length } bind def

/coor [
[88.60218048 138.49989319]
[77.13482666 133.00508118]
[67.96076965 124.19998169]
[62.00012970 112.96771240]
[47.14892578 115.07524872]
[32.29772186 117.18278503]
[17.44651604 119.29032135]
[2.59531093 121.39785767]
[-12.25589371 123.50539398]
[-27.10709953 125.61293030]
[-16.05128670 135.75044250]
[-15.21595478 150.72715759]
[-25.07585335 162.03125000]
[-40.02722168 163.23814392]
[-51.57261658 153.66194153]
[-53.15034103 138.74513245]
[-43.86394119 126.96568298]
[-58.86089706 127.26773834]
[-73.85785675 127.56979370]
[-88.85481262 127.87184906]
[-93.41630554 130.63859558]
[-98.11022949 131.27493286]
[-102.08931732 130.09596252]
[-104.76010132 127.71169281]
[-119.74793243 127.10770416]
[-134.73576355 126.50371552]
[-149.72360229 125.89972687]
[-164.71144104 125.29573822]
[-179.69927979 124.69174957]
[-187.43803406 136.13714600]
[-199.73078918 142.20256042]
[-213.30595398 141.39347839]
[-224.60951233 134.02923584]
[-230.73538208 122.13124084]
[-245.70800781 121.22556305]
[-260.68063354 120.31988525]
[-270.43835449 132.38499451]
[-285.43289185 136.37792969]
[-299.89855957 130.76332092]
[-308.27301025 117.70008850]
[-307.33612061 102.21131897]
[-297.44812012 90.25276947]
[-282.41113281 86.42272949]
[-268.00723267 92.19394684]
[-259.77496338 105.34725189]
[-244.80233765 106.25292969]
[-229.82971191 107.15860748]
[-219.83361816 94.17041016]
[-203.91186523 89.63432312]
[-188.26115417 95.52094269]
[-179.09529114 109.70391083]
[-164.10745239 110.30789948]
[-149.11961365 110.91188812]
[-134.13177490 111.51587677]
[-119.14394379 112.11987305]
[-104.15611267 112.72386169]
[-89.15686798 112.87489319]
[-74.15991211 112.57283783]
[-59.16295242 112.27078247]
[-44.16599655 111.96872711]
[-29.21463585 110.76172638]
[-14.36343098 108.65419006]
[0.48777393 106.54665375]
[15.33897877 104.43911743]
[30.19018364 102.33158112]
[45.04138947 100.22404480]
[59.89259338 98.11650848]
[61.33476257 89.17636871]
[64.74372864 80.78680420]
[69.94609070 73.37455750]
[76.67721558 67.31668091]
[84.59470367 62.92131805]
[93.29582214 60.41205215]
[93.59787750 45.41509247]
[93.89994049 30.41813469]
[94.20199585 15.42117691]
[85.82043457 1.32573533]
[94.07161713 -12.84641838]
[110.46743774 -12.51618767]
[118.14128113 1.97671402]
[109.19895172 15.72323227]
[108.89689636 30.72019005]
[108.59484100 45.71714783]
[108.29278564 60.71410751]
[129.78428650 73.07329559]
[139.92051697 95.69831848]
[154.87187195 96.90531921]
[169.82322693 98.11231232]
[184.77458191 99.31931305]
[199.72595215 100.52631378]
[214.67730713 101.73330688]
[223.90641785 88.04695129]
[238.68629456 80.90804291]
[254.95718384 82.17275238]
[268.30227661 91.40315247]
[275.14663696 106.01187134]
[290.11926270 106.91754913]
[305.09191895 107.82322693]
[320.06454468 108.72890472]
[335.03717041 109.63458252]
[350.00979614 110.54026031]
[364.99765015 111.14424896]
[379.99459839 111.44630432]
[394.99157715 111.74835968]
[409.98852539 112.05041504]
[424.98547363 112.35247040]
[439.98245239 112.65452576]
[448.36834717 98.43589783]
[462.69021606 90.41763306]
[479.00778198 90.69761658]
[492.88586426 99.10542297]
[500.59979248 113.27423859]
[515.59979248 113.27423859]
[525.51214600 101.17965698]
[540.88922119 98.33703613]
[554.47033691 106.08857727]
[559.84301758 120.77423859]
[554.47033691 135.45989990]
[540.88922119 143.21144104]
[525.51214600 140.36882019]
[515.59979248 128.27423096]
[500.59979248 128.27423096]
[494.54718018 140.55102539]
[483.73605347 149.05345154]
[470.24917603 152.07072449]
[456.71649170 148.95582581]
[445.80221558 140.26330566]
[439.68038940 127.65148926]
[424.68341064 127.34943390]
[409.68646240 127.04737854]
[394.68951416 126.74531555]
[379.69253540 126.44326019]
[364.69558716 126.14120483]
[360.65591431 128.78547668]
[354.90127563 128.88061523]
[349.10412598 125.51289368]
[334.13150024 124.60721588]
[319.15887451 123.70153809]
[304.18621826 122.79586029]
[289.21359253 121.89018250]
[274.24096680 120.98450470]
[267.45816040 132.87344360]
[256.15338135 140.70759583]
[242.50894165 142.90504456]
[229.18902588 138.97875977]
[218.81950378 129.64311218]
[213.47030640 116.68466949]
[198.51895142 115.47766876]
[183.56759644 114.27067566]
[168.61622620 113.06367493]
[153.66487122 111.85667419]
[138.71351624 110.64967346]
[133.44194031 122.22135162]
[124.81625366 131.56430054]
[113.70158386 137.74147034]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 67]
[5 66]
[6 65]
[7 64]
[8 63]
[9 62]
[10 61]
[17 60]
[18 59]
[19 58]
[20 57]
[24 56]
[25 55]
[26 54]
[27 53]
[28 52]
[29 51]
[34 47]
[35 46]
[36 45]
[73 84]
[74 83]
[75 82]
[76 81]
[86 152]
[87 151]
[88 150]
[89 149]
[90 148]
[91 147]
[96 141]
[97 140]
[98 139]
[99 138]
[100 137]
[101 136]
[102 133]
[103 132]
[104 131]
[105 130]
[106 129]
[107 128]
[112 122]
[113 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
