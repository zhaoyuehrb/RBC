%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:40:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUGGAGAAAAAGAACAACCUUUUUAUUCUCUUUAUUGUAAAAUACAGCACACAUACAGCAAAGUGUAUAGAACAAAGUACGUACAACUCUGAAUUCUUAUGAAGUAAACAUACCUGUAACUACCAUUCAAGUUUUUAAAAAAUAAAUAAAACAUAACCAGC\
) } def
/len { sequence length } bind def

/coor [
[89.12898254 191.99159241]
[92.07353210 177.28344727]
[97.92173004 163.47045898]
[106.43628693 151.11627197]
[109.82570648 136.50422668]
[99.84582520 147.70252991]
[89.86593628 158.90083313]
[79.88604736 170.09912109]
[69.90616608 181.29742432]
[59.92628098 192.49572754]
[56.52097702 207.94610596]
[42.27688980 212.29986572]
[32.29700470 223.49816895]
[22.31711769 234.69647217]
[12.33723259 245.89476013]
[2.35734701 257.09307861]
[1.83959877 273.12774658]
[-11.10527802 282.60455322]
[-26.54708290 278.25366211]
[-32.64018250 263.41271973]
[-24.71047592 249.46643066]
[-8.84095097 247.11317444]
[1.13893414 235.91488647]
[11.11881924 224.71658325]
[21.09870529 213.51828003]
[31.07859039 202.31999207]
[33.77006531 187.67057800]
[48.72798157 182.51583862]
[58.70786667 171.31753540]
[68.68775177 160.11924744]
[78.66764069 148.92094421]
[88.64752197 137.72264099]
[98.62741089 126.52434540]
[86.77796173 121.61261749]
[79.12783051 112.07382202]
[77.11920166 100.62033844]
[80.68579102 90.18357849]
[70.49323273 79.17849731]
[60.30067444 68.17341614]
[50.10811996 57.16833496]
[39.91556168 46.16325760]
[26.97534180 53.85282516]
[12.72461510 58.68185806]
[-2.21292853 60.44157791]
[-17.18407440 59.05747986]
[-31.53464508 54.59248352]
[-44.63809204 47.24408340]
[-55.92284775 37.33560562]
[-64.89724731 25.30197716]
[-71.17095947 11.67065334]
[-74.47197723 -2.96151209]
[-74.65837097 -17.95440483]
[-71.72443390 -32.65264511]
[-65.80079651 -46.41423416]
[-57.14860535 -58.63861084]
[-67.34116364 -69.64369202]
[-77.53372192 -80.64877319]
[-87.72627258 -91.65385437]
[-97.91883087 -102.65893555]
[-113.71913910 -103.01375580]
[-124.58020020 -114.49472809]
[-124.05834961 -130.29040527]
[-112.46318817 -141.02947998]
[-96.67391205 -140.34065247]
[-86.05802917 -128.63259888]
[-86.91374969 -112.85148621]
[-76.72119904 -101.84641266]
[-66.52864075 -90.84133148]
[-56.33608246 -79.83625031]
[-46.14352798 -68.83116913]
[-33.29269791 -76.52220154]
[-19.11803627 -81.37502289]
[-4.23833513 -83.17520905]
[10.69629669 -81.84166718]
[25.03283882 -77.43025970]
[38.14391708 -70.13148499]
[49.45524979 -60.26224899]
[58.47081757 -48.25212097]
[64.79460144 -34.62460709]
[68.14796448 -19.97435188]
[68.38197327 -4.94118309]
[65.48396301 9.81782532]
[59.57821655 23.65707970]
[50.92064285 35.97069931]
[61.11320114 46.97578049]
[71.30575562 57.98086166]
[81.49831390 68.98593903]
[91.69087219 79.99102020]
[104.42888641 77.54335785]
[117.01005554 82.90957642]
[124.83409882 94.98051453]
[124.57666016 110.07039642]
[138.96166992 105.81935120]
[153.34667969 101.56830597]
[167.73170471 97.31725311]
[175.32083130 83.71421051]
[189.96983337 79.60796356]
[202.89149475 86.92686462]
[217.27650452 82.67581940]
[222.15466309 78.10214996]
[227.76840210 76.89604950]
[232.29440308 78.54882812]
[246.83169556 74.85189056]
[261.36898804 71.15494537]
[275.90625000 67.45800781]
[290.37005615 63.48328400]
[304.75506592 59.23223877]
[319.14010620 54.98119354]
[332.29644775 39.74832916]
[350.88659668 44.96805954]
[365.09820557 40.16914749]
[379.30984497 35.37023544]
[389.73007202 22.70727348]
[405.86001587 25.66652489]
[411.10656738 41.20376587]
[400.07250977 53.33561707]
[384.10876465 49.58186722]
[369.89712524 54.38077927]
[355.68548584 59.17969131]
[351.96554565 68.75786591]
[343.39355469 74.81369781]
[332.68280029 75.13284302]
[323.39114380 69.36620331]
[309.00613403 73.61724854]
[294.62112427 77.86829376]
[291.57528687 81.60185242]
[286.13354492 83.43384552]
[279.60321045 81.99529266]
[265.06591797 85.69223022]
[250.52864075 89.38917542]
[235.99134827 93.08611298]
[221.52754211 97.06083679]
[207.14253235 101.31188202]
[200.27485657 114.47891235]
[185.74696350 118.99499512]
[171.98274231 111.70227051]
[157.59773254 115.95331573]
[143.21272278 120.20436096]
[128.82769775 124.45540619]
[143.48980713 127.62130737]
[158.29125977 125.18886566]
[173.27923584 125.78918457]
[187.83874512 129.39764404]
[201.37234497 135.86616516]
[213.32470703 144.92932129]
[223.20539856 156.21524048]
[230.60897827 169.26081848]
[235.23167419 183.53074646]
[236.88377380 198.43948364]
[235.49749756 213.37528992]
[231.12973022 227.72529602]
[223.95968628 240.90066528]
[214.28160095 252.36079407]
[202.49256897 261.63540649]
[189.07633972 268.34399414]
[174.58341980 272.21121216]
[159.60850525 273.07839966]
[144.76606750 270.91000366]
[130.66513062 265.79498291]
[117.88430023 257.94317627]
[106.94802094 247.67684937]
[98.30503082 235.41720581]
[92.30998993 221.66731262]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 33]
[6 32]
[7 31]
[8 30]
[9 29]
[10 28]
[12 26]
[13 25]
[14 24]
[15 23]
[16 22]
[37 88]
[38 87]
[39 86]
[40 85]
[41 84]
[55 70]
[56 69]
[57 68]
[58 67]
[59 66]
[92 139]
[93 138]
[94 137]
[95 136]
[98 133]
[99 132]
[102 131]
[103 130]
[104 129]
[105 128]
[106 125]
[107 124]
[108 123]
[110 119]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
