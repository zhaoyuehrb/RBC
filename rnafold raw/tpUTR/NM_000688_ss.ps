%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 04:50:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUGACCUCAAUUAUUUCACUUAACCCCAGGCCAUUAUCAUAUCCAGAUGGUCUUCAGAGUUGUCUUUAUAUGUGAAUUAAGUUAUAUUAAAUUUUAAUCUAUAGUAAAAACAUAGUCCUGGAAAUAAAUUCUUGCUUAAAUGGUG\
) } def
/len { sequence length } bind def

/coor [
[129.31895447 323.89694214]
[126.15876007 309.23361206]
[122.99857330 294.57028198]
[112.75356293 283.75875854]
[117.40979004 268.63824463]
[114.24960327 253.97491455]
[105.06299591 251.52159119]
[97.37722778 245.82493591]
[92.29660797 237.65013123]
[90.57064819 228.12200928]
[92.48375702 218.57031250]
[97.80941010 210.34414673]
[105.83605194 204.62142944]
[103.93078613 189.74291992]
[102.02552032 174.86441040]
[100.12025452 159.98590088]
[98.21498871 145.10739136]
[96.30971527 130.22889709]
[94.40444946 115.35038757]
[95.89897919 130.27574158]
[90.02986908 144.07986450]
[78.24431610 153.35890198]
[63.44840622 155.82487488]
[49.29050064 150.86970520]
[39.26165771 139.71522522]
[35.83478165 125.11191559]
[39.85486984 110.66065979]
[50.33065414 99.92483521]
[64.67901611 95.55167389]
[79.36084747 98.61898041]
[64.76789856 95.14826965]
[50.17494965 91.67755127]
[35.58200073 88.20684052]
[20.98905182 84.73612976]
[6.39610243 81.26541901]
[-8.19684696 77.79470825]
[-22.78979492 74.32399750]
[-33.28002167 85.54231262]
[-47.97864914 89.99719238]
[-62.93181610 86.49029541]
[-74.11720276 75.96495819]
[-78.52598572 61.25243759]
[-74.97223663 46.31033707]
[-64.41188049 35.15800095]
[-49.68561935 30.79535294]
[-34.75473022 34.39592361]
[-23.63554955 44.99118042]
[-19.31908417 59.73104477]
[-4.72613478 63.20175934]
[9.86681461 66.67247009]
[24.45976257 70.14318085]
[39.05271149 73.61389160]
[53.64566040 77.08460236]
[68.23860931 80.55532074]
[82.83155823 84.02603149]
[94.29404449 84.12289429]
[101.34855652 89.79659271]
[110.52202606 77.92867279]
[119.69548798 66.06075287]
[128.74247742 54.09613800]
[130.72775269 38.39998245]
[144.51657104 32.76815033]
[153.30757141 20.61420631]
[161.96908569 8.36764622]
[170.63059998 -3.87891388]
[172.28227234 -19.61367035]
[185.94845581 -25.53690910]
[194.60995483 -37.78347015]
[203.27146912 -50.03002930]
[211.93298340 -62.27658844]
[220.59449768 -74.52314758]
[223.02056885 -83.40306854]
[229.57209778 -86.93508148]
[238.49159241 -98.99503326]
[247.41108704 -111.05499268]
[256.33059692 -123.11495209]
[258.31585693 -138.81109619]
[272.10467529 -144.44293213]
[281.02416992 -156.50289917]
[289.94369507 -168.56285095]
[298.86318970 -180.62280273]
[307.78268433 -192.68276978]
[316.70217896 -204.74272156]
[309.97830200 -218.49218750]
[310.42587280 -233.79115295]
[317.94207764 -247.12402344]
[330.79971313 -255.42700195]
[346.04421997 -256.79211426]
[360.17251587 -250.90568542]
[369.93801880 -239.12036133]
[373.09667969 -224.14433289]
[368.92263794 -209.41897583]
[358.37512207 -198.32807922]
[343.87783813 -193.42022705]
[328.76214600 -195.82322693]
[319.84262085 -183.76327515]
[310.92312622 -171.70330811]
[302.00363159 -159.64335632]
[293.08413696 -147.58340454]
[284.16464233 -135.52343750]
[282.81735229 -120.68989563]
[268.39053345 -114.19544983]
[259.47103882 -102.13549805]
[250.55154419 -90.07553864]
[241.63204956 -78.01557922]
[232.84104919 -65.86164093]
[224.17953491 -53.61507797]
[215.51803589 -41.36851883]
[206.85652161 -29.12195778]
[198.19500732 -16.87539864]
[197.16287231 -2.01659799]
[182.87716675 4.78259706]
[174.21565247 17.02915764]
[165.55413818 29.27571678]
[164.25062561 36.60363770]
[156.57653809 41.68764496]
[155.22924805 56.52119064]
[140.80242920 63.01563644]
[139.34368896 70.31423950]
[131.56341553 75.23421478]
[122.38994598 87.10213470]
[113.21647644 98.97005463]
[109.28295898 113.44512177]
[111.18822479 128.32362366]
[113.09349060 143.20213318]
[114.99875641 158.08064270]
[116.90402985 172.95913696]
[118.80929565 187.83764648]
[120.71456146 202.71615601]
[138.15588379 214.34130859]
[141.45146179 234.74749756]
[128.91293335 250.81472778]
[132.07312012 265.47805786]
[142.54417419 277.33840942]
[137.66189575 291.41009521]
[140.82209778 306.07342529]
[143.98228455 320.73675537]
[158.74592590 324.77325439]
[169.93473816 335.21685791]
[174.97758484 349.66775513]
[172.71566772 364.80520630]
[163.66876221 377.15072632]
[149.91578674 383.86743164]
[134.61705017 383.41186523]
[121.28812408 375.88870239]
[112.99186707 363.02670288]
[111.63471985 347.78149414]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 137]
[2 136]
[3 135]
[5 133]
[6 132]
[13 129]
[14 128]
[15 127]
[16 126]
[17 125]
[18 124]
[19 123]
[30 55]
[31 54]
[32 53]
[33 52]
[34 51]
[35 50]
[36 49]
[37 48]
[57 122]
[58 121]
[59 120]
[60 118]
[62 116]
[63 114]
[64 113]
[65 112]
[67 110]
[68 109]
[69 108]
[70 107]
[71 106]
[73 105]
[74 104]
[75 103]
[76 102]
[78 100]
[79 99]
[80 98]
[81 97]
[82 96]
[83 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
