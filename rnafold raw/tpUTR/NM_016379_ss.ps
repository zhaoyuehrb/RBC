%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 00:51:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGGCCAGCUACUCCCCUAUCUCCGAGAGCAGCGACUAAGUUCAGGCCCAGCCGCCAGACCUCAGAGAUCUCACCAGCGGGGUGCUUGCCAUUCUGAAGAUAAUAAAAUGAAUGUGUUGCAAAUUGA\
) } def
/len { sequence length } bind def

/coor [
[305.91256714 316.93914795]
[311.94021606 303.17236328]
[319.95248413 290.45776367]
[308.59436035 280.66015625]
[297.23623657 270.86257935]
[282.54522705 268.40820312]
[277.14941406 253.53556824]
[265.79129028 243.73797607]
[254.43315125 233.94038391]
[247.23760986 231.93254089]
[242.92030334 223.76026917]
[231.80604553 213.68688965]
[220.69177246 203.61351013]
[209.57751465 193.54011536]
[198.46324158 183.46673584]
[183.83689880 180.65258789]
[178.80770874 165.65199280]
[167.69343567 155.57861328]
[155.86824036 146.35014343]
[143.39619446 138.01658630]
[130.92414856 129.68302917]
[118.45210266 121.34947968]
[105.98006439 113.01592255]
[92.04204559 111.90992737]
[85.68638611 99.45612335]
[73.21434021 91.12256622]
[60.74229431 82.78901672]
[45.43275070 85.66226959]
[32.90303802 77.03319550]
[30.25817680 62.42017746]
[11.90751266 61.68965912]
[4.67517614 45.74980545]
[-7.99762726 37.72483826]
[-20.67043114 29.69987488]
[-36.46899414 28.85370255]
[-43.08223724 15.50775623]
[-55.75503922 7.48279142]
[-70.98946381 10.73089790]
[-83.72716522 2.41191459]
[-86.72985840 -12.13179398]
[-99.40265656 -20.15675735]
[-115.80129242 -20.28639984]
[-123.65184784 -34.68434525]
[-114.87834167 -48.53922272]
[-98.50621033 -47.59832382]
[-91.37769318 -32.82956314]
[-78.70488739 -24.80459785]
[-64.27371979 -28.30843544]
[-51.30737686 -20.35050964]
[-47.73007584 -5.19001198]
[-35.05727386 2.83495235]
[-20.16515350 3.10712695]
[-12.64546680 17.02707100]
[0.02733691 25.05203629]
[12.70014000 33.07699966]
[24.63585663 30.73896027]
[35.28327942 37.41025925]
[38.59172821 49.94813156]
[53.10454178 46.79950714]
[65.87168121 55.07324600]
[69.07585144 70.31697083]
[81.54789734 78.65052032]
[94.01993561 86.98407745]
[107.95795441 88.09007263]
[114.31361389 100.54387665]
[126.78565979 108.87743378]
[139.25770569 117.21098328]
[151.72975159 125.54454041]
[164.20179749 133.87809753]
[163.04197693 118.92299652]
[172.62350464 107.38202667]
[187.53675842 105.77110291]
[199.36183167 114.99974060]
[201.42239380 129.85752869]
[192.55506897 141.95590210]
[177.76681519 144.46434021]
[188.88108826 154.53773499]
[204.30239868 158.07240295]
[208.53662109 172.35247803]
[219.65089417 182.42585754]
[230.76516724 192.49923706]
[241.87942505 202.57261658]
[252.99369812 212.64601135]
[264.23074341 222.58224487]
[275.58886719 232.37983704]
[286.94699097 242.17742920]
[302.45040894 245.33258057]
[307.03381348 259.50442505]
[318.39196777 269.30203247]
[329.75009155 279.09960938]
[341.15142822 269.30844116]
[353.88479614 261.32601929]
[367.66567993 255.33062744]
[382.18624878 251.45625305]
[397.12210083 249.78941345]
[412.13952637 250.36738586]
[426.90307617 253.17721558]
[441.08291626 258.15615845]
[454.36224365 265.19299316]
[466.44442749 274.13046265]
[477.05953979 284.76895142]
[485.97039795 296.87078857]
[492.97796631 310.16558838]
[497.92565918 324.35635376]
[500.70297241 339.12606812]
[501.24789429 354.14474487]
[499.54815674 369.07687378]
[495.64181519 383.58886719]
[489.61611938 397.35653687]
[481.60565186 410.07226562]
[471.78939819 421.45202637]
[460.38665771 431.24157715]
[447.65216064 439.22219849]
[433.87042236 445.21563721]
[419.34930420 449.08795166]
[404.41323853 450.75265503]
[389.39587402 450.17254639]
[374.63272095 447.36059570]
[360.45358276 442.37963867]
[347.17526245 435.34094238]
[335.09436035 426.40173340]
[324.48077393 415.76171875]
[315.57162476 403.65863037]
[308.56597900 390.36282349]
[303.62026978 376.17135620]
[300.84506226 361.40124512]
[300.30230713 346.38250732]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 90]
[4 89]
[5 88]
[7 86]
[8 85]
[9 84]
[11 83]
[12 82]
[13 81]
[14 80]
[15 79]
[17 77]
[18 76]
[19 69]
[20 68]
[21 67]
[22 66]
[23 65]
[25 63]
[26 62]
[27 61]
[30 58]
[32 55]
[33 54]
[34 53]
[36 51]
[37 50]
[40 47]
[41 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
