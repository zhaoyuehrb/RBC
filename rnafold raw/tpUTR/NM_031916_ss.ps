%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 20:43:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACAGAGAAGAAUACAUUUUAAUGUCAAAAUAGUGCUCUUUAAAAUUCUGGCACCAAAUACAACUUACCCUGAAUCACA\
) } def
/len { sequence length } bind def

/coor [
[212.42344666 186.58996582]
[214.53979492 171.69581604]
[219.35711670 157.44421387]
[206.26968384 150.11489868]
[193.18223572 142.78558350]
[180.09480286 135.45626831]
[166.35197449 129.44503784]
[152.08613586 124.80977631]
[137.82028198 120.17452240]
[123.55443573 115.53926849]
[109.28858948 110.90401459]
[95.57365417 113.62287903]
[86.07615662 103.36183167]
[71.81031036 98.72657776]
[57.54446030 94.09132385]
[43.19035339 89.73705292]
[28.75352669 85.66545105]
[14.31669712 81.59384155]
[-0.12013122 77.52223206]
[-14.55696011 73.45063019]
[-28.22194099 81.39064789]
[-43.47736740 77.26177979]
[-51.27246475 63.51361847]
[-46.98254013 48.30269623]
[-33.15273285 40.65338898]
[-17.98801613 45.10388947]
[-10.48535347 59.01379776]
[3.95147562 63.08540726]
[18.38830376 67.15701294]
[32.82513428 71.22862244]
[47.26196289 75.30022430]
[54.75185013 74.05130005]
[62.17971420 79.82547760]
[76.44556427 84.46073151]
[90.71141052 89.09598541]
[104.42634583 86.37712097]
[113.92384338 96.63816833]
[128.18969727 101.27342224]
[142.45553589 105.90867615]
[156.72138977 110.54393005]
[170.98724365 115.17918396]
[175.25273132 113.91695404]
[179.31318665 114.01849365]
[182.77732849 115.26214600]
[185.36195374 117.32491302]
[186.91513062 119.82504272]
[187.42411804 122.36882782]
[200.51156616 129.69815063]
[213.59899902 137.02746582]
[226.68643188 144.35678101]
[236.32087708 132.80288696]
[247.91444397 123.21623993]
[261.07226562 115.92333984]
[275.34619141 111.17257690]
[290.25006104 109.12577820]
[305.27624512 109.85263824]
[319.91296387 113.32841492]
[333.66168213 119.43471527]
[346.05416870 127.96356964]
[356.66830444 138.62448120]
[365.14254761 151.05433655]
[371.18832397 164.82980347]
[374.59970093 179.48165894]
[375.26046753 194.51091003]
[373.14813232 209.40562439]
[368.33465576 223.65852356]
[360.98394775 236.78413391]
[351.34640503 248.33541870]
[339.75027466 257.91894531]
[326.59048462 265.20831299]
[312.31527710 269.95523071]
[297.41085815 271.99801636]
[282.38485718 271.26708984]
[267.74908447 267.78738403]
[254.00198364 261.67736816]
[241.61181641 253.14517212]
[231.00056458 242.48139954]
[222.52964783 230.04925537]
[216.48757935 216.27217102]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 50]
[4 49]
[5 48]
[6 47]
[7 41]
[8 40]
[9 39]
[10 38]
[11 37]
[13 35]
[14 34]
[15 33]
[16 31]
[17 30]
[18 29]
[19 28]
[20 27]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
