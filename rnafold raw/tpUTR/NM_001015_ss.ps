%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 06:44:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUGGACAUCGGCCCGCUCCCCACAAUGAAAUAAAGUUAUUUUCUCAUUCCCAGGCCAGACUUGGGAUCUUCCGCG\
) } def
/len { sequence length } bind def

/coor [
[44.55013275 192.98257446]
[35.53899765 204.97422791]
[26.52786446 216.96586609]
[17.51672935 228.95750427]
[8.50559616 240.94914246]
[9.32700539 256.97116089]
[-2.78236914 267.49459839]
[-18.53325272 264.44677734]
[-25.84291458 250.16571045]
[-19.10400772 235.60664368]
[-3.48604536 231.93801880]
[5.52508879 219.94636536]
[14.53622246 207.95472717]
[23.54735756 195.96308899]
[32.55849075 183.97145081]
[41.32632065 171.80078125]
[49.84729385 159.45602417]
[58.36826324 147.11126709]
[50.19599915 138.36970520]
[43.82807541 128.23805237]
[39.49519730 117.08336639]
[37.35433960 105.30977631]
[37.48305893 93.34381866]
[39.87669754 81.61900330]
[44.44853592 70.56011200]
[51.03293610 60.56779099]
[59.39135742 52.00405502]
[69.22098541 45.17915726]
[80.16570282 40.34035492]
[77.16531372 25.64349556]
[74.16493225 10.94663620]
[71.16454315 -3.75022316]
[68.16416168 -18.44708252]
[65.16377258 -33.14394379]
[53.89004135 -45.05339050]
[58.82576370 -60.69214630]
[74.89349365 -63.97239685]
[85.56413269 -51.51970291]
[79.86063385 -36.14432907]
[82.86101532 -21.44746780]
[85.86140442 -6.75060844]
[88.86178589 7.94625139]
[91.86217499 22.64311028]
[94.86255646 37.33996964]
[111.28104401 38.15009689]
[126.92830658 43.18856812]
[140.73461914 52.11093140]
[151.75613403 64.30721283]
[159.23934937 78.94361877]
[162.67269897 95.01953888]
[177.66053772 95.62352753]
[192.64837646 96.22751617]
[207.63619995 96.83150482]
[222.62403870 97.43549347]
[237.61187744 98.03948212]
[252.59971619 98.64347076]
[265.31893921 88.86592102]
[280.85848999 92.85375214]
[287.29769897 107.54783630]
[279.69696045 121.67613220]
[263.88696289 124.40061951]
[251.99572754 113.63130188]
[237.00788879 113.02731323]
[222.02005005 112.42332458]
[207.03221130 111.81933594]
[192.04438782 111.21534729]
[177.05654907 110.61135864]
[162.06871033 110.00737000]
[157.13008118 126.24551392]
[148.02784729 140.57090759]
[135.42538452 151.93952942]
[120.24115753 159.52284241]
[103.58176422 162.76817322]
[86.66133881 161.43901062]
[70.71302032 155.63223267]
[62.19205093 167.97698975]
[53.67107773 180.32174683]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[3 13]
[4 12]
[5 11]
[16 77]
[17 76]
[18 75]
[29 44]
[30 43]
[31 42]
[32 41]
[33 40]
[34 39]
[50 68]
[51 67]
[52 66]
[53 65]
[54 64]
[55 63]
[56 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
