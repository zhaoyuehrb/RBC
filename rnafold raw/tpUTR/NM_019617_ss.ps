%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 12:24:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAUUUUUUAAAGCCACUAUGGAUUUAGUCAUCUGAAUAUGCUGUGCAGAAAAAAUAUGGGCUCCAGUGGUUUUUACCAUGUCAUUCUGAAAUUUUUCUCUACUAGUUAUGUUUGAUUUCUUUAAGUUUCAAUAAAAUCAUUUAGCAUUGAAUUCA\
) } def
/len { sequence length } bind def

/coor [
[23.24144363 363.59786987]
[28.47791481 377.75704956]
[29.69895744 392.80401611]
[26.81396294 407.62222290]
[20.03701591 421.11206055]
[9.87100983 432.27249146]
[-2.92966795 440.27529907]
[-17.41512299 444.52667236]
[-32.51044083 444.71112061]
[-47.09544373 440.81494141]
[-60.08782959 433.12725830]
[-70.52347565 422.21856689]
[-77.62799835 408.89831543]
[-80.87417603 394.15502930]
[-80.02114105 379.08270264]
[-75.13217926 364.79983521]
[-66.57008362 352.36627197]
[-54.97023392 342.70471191]
[-41.19340134 336.53207397]
[-26.26192093 334.30639648]
[-11.28381252 336.19290161]
[-5.47474527 322.36340332]
[0.33432245 308.53393555]
[6.14339018 294.70443726]
[11.95245743 280.87493896]
[17.76152611 267.04547119]
[23.57059288 253.21597290]
[29.37965965 239.38648987]
[35.18872833 225.55699158]
[40.99779510 211.72750854]
[36.27680588 202.59016418]
[37.41769409 192.14714050]
[44.28195572 183.90600586]
[54.76855850 180.76930237]
[61.12284470 167.18168640]
[67.47713470 153.59408569]
[73.83142090 140.00648499]
[80.18570709 126.41887665]
[86.53999329 112.83126831]
[81.83766174 103.01149750]
[83.45626068 92.35539246]
[90.71375275 84.53502655]
[88.33777618 69.72439575]
[85.96180725 54.91376495]
[83.43871307 40.12748718]
[80.76874542 25.36702538]
[78.09877777 10.60656166]
[68.02863312 -1.59601068]
[73.37694550 -15.49726200]
[70.70697784 -30.25772476]
[68.03701019 -45.01818848]
[65.36704254 -59.77865219]
[62.69707489 -74.53911591]
[60.02710724 -89.29957581]
[57.35713959 -104.06004333]
[43.53935242 -110.86995697]
[36.46368408 -124.35284424]
[38.65802383 -139.24072266]
[49.07350922 -149.85466003]
[46.40354156 -164.61512756]
[43.73357391 -179.37557983]
[41.06360245 -194.13604736]
[26.41277313 -198.27302551]
[15.05726624 -208.31988525]
[9.21388626 -222.24378967]
[9.99224567 -237.26228333]
[17.18447113 -250.39930725]
[29.31704140 -259.07492065]
[26.64707184 -273.83538818]
[23.97710419 -288.59582520]
[21.30713654 -303.35629272]
[18.63716698 -318.11676025]
[7.63340855 -330.27609253]
[12.91868019 -345.80020142]
[29.05594826 -348.71920776]
[39.44457245 -336.03030396]
[33.39762878 -320.78674316]
[36.06760025 -306.02627563]
[38.73756790 -291.26580811]
[41.40753555 -276.50534058]
[44.07750320 -261.74487305]
[58.48043442 -257.86917114]
[69.81895447 -248.08412170]
[75.80913544 -234.28996277]
[75.21372223 -219.20137024]
[68.09729767 -205.81318665]
[55.82406616 -196.80601501]
[58.49403763 -182.04554749]
[61.16400528 -167.28509521]
[63.83397293 -152.52462769]
[77.30764008 -146.23191833]
[84.57832336 -133.05613708]
[82.67421722 -117.94892883]
[72.11759949 -106.73001099]
[74.78756714 -91.96954346]
[77.45753479 -77.20908356]
[80.12750244 -62.44861984]
[82.79747772 -47.68815613]
[85.46744537 -32.92769241]
[88.13741302 -18.16723061]
[98.01657867 -7.02042532]
[92.85923767 7.93659306]
[95.52921295 22.69705582]
[98.19918060 37.45751953]
[102.50794983 43.51283264]
[100.77243805 52.53779602]
[103.14840698 67.34842682]
[105.52437592 82.15905762]
[107.91270447 67.35041046]
[118.86608124 57.10231781]
[133.80070496 55.70343399]
[146.46669006 63.73917007]
[151.56350708 77.84670258]
[146.95822144 92.12225342]
[134.57809448 100.59174347]
[119.60281372 99.71034241]
[133.54505920 105.24330139]
[147.48731995 110.77626038]
[161.42956543 116.30921936]
[175.37181091 121.84217834]
[189.73847961 115.82247925]
[203.79908752 121.63230133]
[209.44941711 135.36581421]
[223.39166260 140.89877319]
[237.06629944 133.31336975]
[252.40754700 136.34324646]
[262.17175293 148.55776978]
[261.74850464 164.18962097]
[251.33772278 175.85792542]
[235.85499573 178.05325317]
[222.61082458 169.73905945]
[217.85870361 154.84101868]
[203.91645813 149.30805969]
[190.38655090 155.42994690]
[176.16830444 150.01734924]
[169.83885193 135.78442383]
[155.89660645 130.25146484]
[141.95436096 124.71851349]
[128.01210022 119.18555450]
[114.06985474 113.65259552]
[100.12760162 119.18555450]
[93.77331543 132.77316284]
[87.41902924 146.36076355]
[81.06474304 159.94837952]
[74.71044922 173.53598022]
[68.35616302 187.12358093]
[71.04515076 207.06567383]
[54.82728195 217.53657532]
[49.01821518 231.36605835]
[43.20914841 245.19555664]
[37.40008163 259.02502441]
[31.59101295 272.85452271]
[25.78194618 286.68402100]
[19.97287750 300.51348877]
[14.16381073 314.34298706]
[8.35474300 328.17248535]
[2.54567504 342.00195312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[21 157]
[22 156]
[23 155]
[24 154]
[25 153]
[26 152]
[27 151]
[28 150]
[29 149]
[30 148]
[34 146]
[35 145]
[36 144]
[37 143]
[38 142]
[39 141]
[42 108]
[43 107]
[44 106]
[45 104]
[46 103]
[47 102]
[49 100]
[50 99]
[51 98]
[52 97]
[53 96]
[54 95]
[55 94]
[59 90]
[60 89]
[61 88]
[62 87]
[68 81]
[69 80]
[70 79]
[71 78]
[72 77]
[116 140]
[117 139]
[118 138]
[119 137]
[120 136]
[123 133]
[124 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
