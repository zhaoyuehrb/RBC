%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 14:30:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUGUAAAGCAUUUCUAAUACCUCCUGUUCUUCCUCUUCAGUGAUUUUACCUAGGCAGCGAAGUAGAGAAAUGUCA\
) } def
/len { sequence length } bind def

/coor [
[64.47457886 325.18142700]
[52.02381134 334.00982666]
[36.97411346 336.55331421]
[22.31361198 332.30685425]
[10.95316219 322.11358643]
[5.14838886 307.99737549]
[6.05183458 292.76101685]
[13.48411846 279.42971802]
[25.96955681 270.65039062]
[41.02915573 268.16616821]
[45.20241547 253.75840759]
[49.37567902 239.35063171]
[53.54893875 224.94285583]
[57.72220230 210.53509521]
[61.89546585 196.12731934]
[66.06872559 181.71954346]
[70.24198914 167.31176758]
[64.64694977 156.39205933]
[68.21485901 144.23040771]
[79.52147675 137.65653992]
[84.27149963 123.42849731]
[89.02152252 109.20045471]
[86.41321564 95.46406555]
[96.75043488 86.04952240]
[101.50045776 71.82147980]
[105.96299744 57.50066757]
[110.13626099 43.09289551]
[114.30952454 28.68512344]
[118.48278809 14.27735138]
[117.87503052 4.87741566]
[123.12505341 -0.62021941]
[127.87507629 -14.84826565]
[115.36955261 -23.30488586]
[105.61021423 -34.82260895]
[99.32127380 -48.54673767]
[96.96940613 -63.45885849]
[98.72914124 -78.45238495]
[104.46988678 -92.41471100]
[113.76565552 -104.30972290]
[125.92662811 -113.25473785]
[140.05038452 -118.58598328]
[155.08883667 -119.90783691]
[169.92605591 -117.12220764]
[183.46099854 -110.43581390]
[194.68930054 -100.34483337]
[202.77772522 -87.59806824]
[207.12606812 -73.14143372]
[207.41166687 -58.04769135]
[203.61331177 -43.43690491]
[196.01287842 -30.39328957]
[185.17434692 -19.88476944]
[171.90203857 -12.69114590]
[157.18081665 -9.34623337]
[142.10311890 -10.09824657]
[137.35310364 4.12980032]
[132.89056396 18.45061302]
[128.71730042 32.85838699]
[124.54403687 47.26615524]
[120.37077332 61.67392731]
[121.56844330 69.18074799]
[115.72850037 76.57150269]
[110.97847748 90.79954529]
[113.58678436 104.53593445]
[103.24956512 113.95047760]
[98.49954224 128.17852783]
[93.74952698 142.40657043]
[97.93628693 160.20491028]
[84.64975739 171.48503113]
[80.47650146 185.89280701]
[76.30323792 200.30058289]
[72.12997437 214.70834351]
[67.95671082 229.11611938]
[63.78345108 243.52389526]
[59.61018753 257.93167114]
[55.43692780 272.33944702]
[66.83742523 282.48788452]
[72.69774628 296.58114624]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 75]
[11 74]
[12 73]
[13 72]
[14 71]
[15 70]
[16 69]
[17 68]
[20 66]
[21 65]
[22 64]
[24 62]
[25 61]
[26 59]
[27 58]
[28 57]
[29 56]
[31 55]
[32 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
