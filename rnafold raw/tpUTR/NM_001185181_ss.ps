%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 06:40:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAUGGUGGGGGGAGGGGAGGGGAGGGGAGGGAAUGAGGCAGCUCUAGGAUCUAUACUGUAGCUAAUAAAAUGUAAAAACACCUGGC\
) } def
/len { sequence length } bind def

/coor [
[-13.85073471 217.11531067]
[-20.89280701 230.35952759]
[-27.93488121 243.60374451]
[-34.97695541 256.84796143]
[-42.01902771 270.09216309]
[-44.11644745 286.91589355]
[-60.86330414 289.55770874]
[-68.03786469 274.19662476]
[-55.26324081 263.05010986]
[-48.22116852 249.80589294]
[-41.17909622 236.56167603]
[-34.13702011 223.31745911]
[-27.09494781 210.07324219]
[-33.70808411 204.14178467]
[-39.13732147 197.10313416]
[-43.20034790 189.19020081]
[-45.76008606 180.66529846]
[-46.72934723 171.81146240]
[-46.07378006 162.92306519]
[-43.81309128 154.29597473]
[-40.02044678 146.21778870]
[-34.82012939 138.95819092]
[-28.38344574 132.75994873]
[-20.92309570 127.83081818]
[-12.68613720 124.33657837]
[-3.94580936 122.39542389]
[5.00753307 122.07401276]
[13.87606621 123.38514709]
[22.36440277 126.28730011]
[30.18942833 130.68591309]
[37.08975220 136.43646240]
[49.22500610 127.61968231]
[61.36026001 118.80290222]
[57.26055145 104.46298218]
[58.30928802 89.58544159]
[64.38013458 75.96245575]
[74.74179077 65.23505402]
[88.14608002 58.69548416]
[102.97830963 57.13150024]
[117.45175934 60.73150635]
[129.82295227 69.06184387]
[141.95822144 60.24506378]
[154.09347534 51.42828369]
[164.88356018 41.00840759]
[174.11848450 29.18824768]
[183.35340881 17.36808586]
[185.75256348 1.72984397]
[199.68533325 -3.53582549]
[208.92025757 -15.35598660]
[218.15518188 -27.17614746]
[213.74880981 -42.05443573]
[218.96093750 -56.66995239]
[231.78739929 -65.40273285]
[247.29615784 -64.89484406]
[259.52377319 -55.34157562]
[263.76849365 -40.41636276]
[258.39813232 -25.85824776]
[245.47767639 -17.26512527]
[229.97534180 -17.94122505]
[220.74041748 -6.12106466]
[211.50549316 5.69909668]
[209.76687622 20.49188232]
[195.17356873 26.60300827]
[185.93864441 38.42316818]
[176.70373535 50.24333191]
[191.66870117 49.21873474]
[204.51770020 56.95842743]
[210.60856628 70.66614532]
[207.74070740 85.38943481]
[196.95025635 95.80894470]
[182.13568115 98.16021729]
[168.64932251 91.59375763]
[161.36366272 78.48196411]
[162.91024780 63.56353760]
[150.77499390 72.38031769]
[138.63973999 81.19709778]
[142.73944092 95.53701782]
[141.69071960 110.41455841]
[135.61987305 124.03754425]
[125.25820923 134.76493835]
[111.85391998 141.30451965]
[97.02169037 142.86849976]
[82.54824066 139.26849365]
[70.17704010 130.93815613]
[58.04178619 139.75494385]
[45.90653229 148.57171631]
[51.25567245 171.14961243]
[45.67584610 193.61579895]
[30.45615387 210.98590088]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[3 11]
[4 10]
[5 9]
[31 86]
[32 85]
[33 84]
[41 76]
[42 75]
[43 74]
[44 65]
[45 64]
[46 63]
[48 61]
[49 60]
[50 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
