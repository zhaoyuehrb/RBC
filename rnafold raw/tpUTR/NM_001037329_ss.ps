%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 05:23:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAUCCCCAUCCCCAGGAUUCCCACCUCCUAGUGAAUCCAGAGUUGUAGUAAAGCCUAACUGCUGC\
) } def
/len { sequence length } bind def

/coor [
[126.67745972 138.30924988]
[119.20488739 142.54948425]
[111.08177948 145.34843445]
[102.58330536 146.61129761]
[93.99732208 146.29528809]
[85.61466980 144.41113281]
[77.71929169 141.02262878]
[70.57862091 136.24456787]
[64.43454742 130.23880005]
[59.49518204 123.20874786]
[55.92783737 115.39254761]
[53.85334778 107.05495453]
[53.34197998 98.47838593]
[54.41106415 89.95336914]
[57.02437973 81.76865387]
[61.09340668 74.20149231]
[66.48031616 67.50820160]
[73.00263977 61.91550446]
[66.40662384 48.44358826]
[59.81060028 34.97167587]
[53.21458054 21.49975967]
[46.61856079 8.02784348]
[40.02253723 -5.44407225]
[27.00503922 -14.43603039]
[28.35750008 -29.26910591]
[13.04948521 -31.80766678]
[2.18117309 -42.88283920]
[-0.06834786 -58.23598862]
[7.16590881 -71.96352386]
[21.10222435 -78.78691864]
[36.38180161 -76.08244324]
[47.12932968 -64.89002228]
[49.21216583 -49.51337433]
[41.82941437 -35.86512756]
[54.37512207 -27.83676910]
[53.49445343 -12.04009342]
[60.09047318 1.43182230]
[66.68649292 14.90373802]
[73.28251648 28.37565422]
[79.87854004 41.84756851]
[86.47455597 55.31948471]
[111.09822083 54.65559006]
[132.63188171 66.61666870]
[145.08003235 87.87246704]
[144.97682190 112.50486755]
[158.59539795 118.79251099]
[174.36793518 117.55249023]
[182.67977905 129.91220093]
[196.29835510 136.19984436]
[209.91693115 142.48748779]
[223.53549194 148.77513123]
[237.15406799 155.06278992]
[250.63072205 147.37127686]
[266.05081177 149.10354614]
[277.48498535 159.59352112]
[280.53656006 174.80757141]
[274.03216553 188.89559937]
[260.47286987 196.44046021]
[245.07247925 194.54101562]
[233.75277710 183.92762756]
[230.86642456 168.68135071]
[217.24784851 162.39370728]
[203.62927246 156.10606384]
[190.01071167 149.81842041]
[176.39213562 143.53076172]
[161.59368896 145.22052002]
[152.30773926 132.41108704]
[138.68917847 126.12343597]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 41]
[19 40]
[20 39]
[21 38]
[22 37]
[23 36]
[25 34]
[45 68]
[46 67]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
