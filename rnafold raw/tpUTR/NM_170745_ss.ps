%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 13:54:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAAGGUUGUCAUUGGUAAAAAGACUUCUGUGUCAGAAAAAACAAAAGGCUCUUUUCAGAGCCACCUA\
) } def
/len { sequence length } bind def

/coor [
[89.26847076 199.97129822]
[73.60720825 197.84983826]
[64.09973907 185.22511292]
[66.38665771 169.58715820]
[79.11119080 160.21369934]
[81.12468719 145.34945679]
[83.13818359 130.48519897]
[85.15168762 115.62095642]
[81.36228943 112.06570435]
[78.44258881 107.58476257]
[63.45769119 106.91178894]
[48.47279739 106.23881531]
[34.33938599 113.34918213]
[21.97206306 105.04866791]
[6.98716784 104.37569427]
[-5.77694702 114.09458923]
[-21.29794884 110.03527069]
[-27.66945457 95.31170654]
[-20.00378799 81.21854401]
[-4.18139505 78.56686401]
[7.66014004 89.39080048]
[22.64503670 90.06377411]
[35.70662689 82.90526581]
[49.14576721 91.25392151]
[64.13066864 91.92689514]
[79.11556244 92.59986115]
[88.98464203 81.30379486]
[86.30628967 66.54484558]
[83.62793732 51.78590393]
[80.94958496 37.02696228]
[78.27122498 22.26801682]
[69.49386597 7.76304197]
[81.00216675 -4.68667126]
[96.15116119 2.92545724]
[93.03017426 19.58966446]
[95.70852661 34.34860611]
[98.38687897 49.10755157]
[101.06523132 63.86649704]
[103.74358368 78.62544250]
[103.63360596 63.62584305]
[111.31800079 50.74367905]
[124.56877899 43.71396255]
[139.54405212 44.57486725]
[151.90194702 53.07678223]
[158.05943298 66.75469208]
[156.23126221 81.64286804]
[146.94746399 93.42468262]
[132.89976501 98.68415070]
[118.16328430 95.89744568]
[132.20681763 101.16806793]
[146.25033569 106.43869019]
[160.29385376 111.70931244]
[174.33737183 116.97993469]
[188.38090515 122.25055695]
[204.46105957 119.03176880]
[215.08399963 131.52517700]
[209.32174683 146.87863159]
[193.10202026 149.29782104]
[183.11027527 136.29408264]
[169.06675720 131.02345276]
[155.02323914 125.75283813]
[140.97970581 120.48221588]
[126.93618774 115.21159363]
[112.89266205 109.94097137]
[100.01593018 117.63446045]
[98.00243378 132.49870300]
[95.98893738 147.36294556]
[93.97543335 162.22720337]
[103.74771881 174.64807129]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 68]
[6 67]
[7 66]
[8 65]
[10 26]
[11 25]
[12 24]
[14 22]
[15 21]
[27 39]
[28 38]
[29 37]
[30 36]
[31 35]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
