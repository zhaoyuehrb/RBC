%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 16:58:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUAGGUGUGAAAUUACUGGAAUUUAACGUGAGAUUUCUUUUUCUAGAAAGACUCCUUCUCCCAAUAUCUGCACUAAGGCUUGAGUACAUACGCCCC\
) } def
/len { sequence length } bind def

/coor [
[74.43843079 366.66845703]
[58.99161911 365.19348145]
[47.38418198 354.89556885]
[44.07941055 339.73449707]
[50.34806442 325.54000854]
[63.77971268 317.77017212]
[65.20555115 302.83807373]
[66.63139343 287.90600586]
[68.05723572 272.97390747]
[69.48307800 258.04183960]
[70.90891266 243.10975647]
[61.76035690 235.94050598]
[57.24060822 225.10099792]
[58.61389542 213.31562805]
[65.64687347 203.60969543]
[76.63822937 198.53280640]
[79.00824738 183.72122192]
[81.37827301 168.90963745]
[83.74829102 154.09805298]
[78.11911011 140.30815125]
[87.93966675 127.90382385]
[90.30968475 113.09223938]
[83.87748718 97.68193054]
[94.39072418 84.70800781]
[96.28961182 69.82868958]
[98.18849945 54.94936371]
[100.08738708 40.07004166]
[97.78845978 33.55155182]
[99.07124329 27.77497864]
[102.60779572 24.31857681]
[105.44656372 9.58964729]
[108.28533173 -5.13928366]
[110.89005280 -19.91139984]
[113.26007843 -34.72298431]
[115.63009644 -49.53456497]
[118.00012207 -64.34615326]
[114.64457703 -72.89888000]
[117.22187805 -80.68342590]
[113.45465851 -95.20265198]
[109.68743896 -109.72188568]
[105.92021942 -124.24111938]
[102.15299988 -138.76034546]
[98.38578033 -153.27957153]
[86.50282288 -164.58123779]
[90.61137390 -180.45736694]
[106.48490906 -184.57598877]
[117.79409790 -172.70019531]
[112.90500641 -157.04679871]
[116.67223358 -142.52757263]
[120.43945312 -128.00833130]
[124.20667267 -113.48910522]
[127.97389221 -98.96987152]
[131.74110413 -84.45064545]
[137.99810791 -98.08332825]
[148.87083435 -108.41695404]
[162.80381775 -113.97318268]
[177.80381775 -113.95713043]
[191.72488403 -108.37110138]
[202.57546997 -98.01422882]
[208.80326843 -84.36818695]
[209.51733398 -69.38519287]
[204.61550903 -55.20873260]
[194.79904175 -43.86690521]
[181.47230530 -36.98228836]
[166.54182434 -35.53980255]
[152.14356995 -39.74581146]
[140.33740234 -48.99860001]
[132.81170654 -61.97612762]
[130.44168091 -47.16454697]
[128.07165527 -32.35296249]
[125.70163727 -17.54137802]
[127.79145050 -10.30694103]
[123.01426697 -2.30051494]
[120.17549896 12.42841530]
[117.33672333 27.15734673]
[114.96670532 41.96892929]
[113.06781769 56.84825134]
[111.16893005 71.72757721]
[109.27004242 86.60689545]
[115.87196350 96.34079742]
[114.19812012 107.98262787]
[105.12126923 115.46226501]
[102.75125122 130.27384949]
[108.21091461 145.12318420]
[98.55987549 156.46807861]
[96.18985748 171.27966309]
[93.81983185 186.09124756]
[91.44981384 200.90283203]
[103.14204407 215.62310791]
[100.59587097 233.93139648]
[85.84099579 244.53559875]
[84.41515350 259.46768188]
[82.98931122 274.39974976]
[81.56346893 289.33184814]
[80.13763428 304.26391602]
[78.71179199 319.19598389]
[90.43025970 329.36737061]
[93.89930725 344.49172974]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 96]
[7 95]
[8 94]
[9 93]
[10 92]
[11 91]
[16 88]
[17 87]
[18 86]
[19 85]
[21 83]
[22 82]
[24 79]
[25 78]
[26 77]
[27 76]
[30 75]
[31 74]
[32 73]
[33 71]
[34 70]
[35 69]
[36 68]
[38 53]
[39 52]
[40 51]
[41 50]
[42 49]
[43 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
