%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 10:32:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGUUCUGCCUGCCUGGGGCUGGGGUGGUCGUGCUGAAGUCAACAGAGCCUUUACCCUGUGCUGCCUGGUGCUCCCACCUUCUUGAAUUGGGGUUGCCAACAAAGCCGCCCCCACCAC\
) } def
/len { sequence length } bind def

/coor [
[64.85084534 316.81021118]
[52.66619110 325.55859375]
[38.10388565 329.15570068]
[23.24722862 327.08694458]
[10.22163200 319.64828491]
[0.89055216 307.90386963]
[-3.41109514 293.53393555]
[-2.06742001 278.59246826]
[-12.17285442 289.67761230]
[-22.27828979 300.76275635]
[-32.38372421 311.84786987]
[-33.08211899 327.87573242]
[-46.13295746 337.20605469]
[-61.52475739 332.68145752]
[-67.45024109 317.77279663]
[-59.36389160 303.91671753]
[-43.46885681 301.74243164]
[-33.36342239 290.65731812]
[-23.25798798 279.57217407]
[-13.15255356 268.48703003]
[-11.63504887 259.84552002]
[-3.81039643 253.83465576]
[1.97555566 239.99546814]
[7.76150799 226.15629578]
[13.54745960 212.31712341]
[19.33341217 198.47795105]
[25.11936378 184.63877869]
[30.90531540 170.79960632]
[36.69126892 156.96041870]
[30.81681252 143.32127380]
[36.48744583 129.20396423]
[50.83326721 123.13477325]
[56.61922073 109.29559326]
[51.94631958 95.04203796]
[39.08994293 87.31457520]
[26.23356819 79.58712006]
[11.50706577 84.84679413]
[-3.13688755 79.36148071]
[-10.78386593 65.72118378]
[-7.82319927 50.36642838]
[4.34717560 40.54726410]
[19.98077965 40.90000153]
[31.69590378 51.25808334]
[33.96102524 66.73074341]
[46.81740189 74.45819855]
[59.67377853 82.18566132]
[71.76231384 73.30493164]
[68.23175812 58.72634125]
[64.70120239 44.14775467]
[60.97852707 29.61703873]
[46.43245316 24.21413612]
[37.86823654 11.27451515]
[38.57898712 -4.22627354]
[48.29141235 -16.32786179]
[63.27088547 -20.37693977]
[77.75749207 -14.81655788]
[86.18083954 -1.78479314]
[85.30197144 13.70737362]
[75.45883942 25.70288849]
[80.30255127 31.41044426]
[79.27979279 40.61720276]
[82.81034851 55.19578934]
[86.34089661 69.77437592]
[97.20148468 69.52947998]
[106.69693756 72.78292847]
[113.82654572 78.62274933]
[118.02829742 85.89710999]
[132.21893311 81.03647614]
[146.40957642 76.17584229]
[160.60021973 71.31520844]
[174.79086304 66.45457458]
[185.33918762 54.66291809]
[199.88694763 57.85856247]
[214.07759094 52.99792480]
[228.26821899 48.13729095]
[242.45886230 43.27665710]
[256.64950562 38.41602325]
[258.92395020 23.28045273]
[267.98107910 10.94241714]
[281.73962402 4.23710680]
[297.03796387 4.70535183]
[310.36065674 12.23955441]
[318.64627075 25.10840797]
[319.99078369 40.35474777]
[314.08526611 54.47507095]
[302.28677368 64.22463989]
[287.30648804 67.36306000]
[272.58679199 63.16916275]
[261.51013184 52.60666275]
[247.31950378 57.46729660]
[233.12886047 62.32793045]
[218.93821716 67.18856812]
[204.74758911 72.04920197]
[195.21424866 83.49318695]
[179.65148926 80.64521027]
[165.46084595 85.50585175]
[151.27021790 90.36648560]
[137.07957458 95.22711945]
[122.88893127 100.08775330]
[106.50170135 127.26436615]
[70.45839691 115.08155060]
[64.67244720 128.92071533]
[70.42950439 143.39462280]
[64.36457825 157.34709167]
[50.53044128 162.74638367]
[44.74449158 176.58555603]
[38.95853806 190.42472839]
[33.17258835 204.26390076]
[27.38663483 218.10307312]
[21.60068321 231.94224548]
[15.81473064 245.78143311]
[10.02877808 259.62060547]
[23.00630951 252.09838867]
[37.84936905 249.93421936]
[52.43448639 253.43769836]
[64.67510223 262.10760498]
[72.82005310 274.70361328]
[75.70411682 289.42376709]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 20]
[9 19]
[10 18]
[11 17]
[22 112]
[23 111]
[24 110]
[25 109]
[26 108]
[27 107]
[28 106]
[29 105]
[32 102]
[33 101]
[34 46]
[35 45]
[36 44]
[47 63]
[48 62]
[49 61]
[50 59]
[67 99]
[68 98]
[69 97]
[70 96]
[71 95]
[73 93]
[74 92]
[75 91]
[76 90]
[77 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
