%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 20:00:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUGGCUUAAUUUUUACUGUAGGUGAAGGCUGUAUUUGUAGUAGUACUCAAGAAUCACCUGAUGUUUUCUUAUUCUCCUUAAAUUAAGAGUUAUUUUGUGUUUGUAUUCUUGGCUGGAUGUUAUAAUAAACAUAUUGUUACUGUCAAAGCCU\
) } def
/len { sequence length } bind def

/coor [
[86.74623108 232.23876953]
[70.97152710 231.27214050]
[60.56335831 219.37905884]
[61.69670105 203.61546326]
[73.69916534 193.33361816]
[74.61659241 178.36169434]
[75.53401184 163.38977051]
[76.45143890 148.41786194]
[77.36886597 133.44593811]
[75.24092865 148.29423523]
[64.46917725 158.73307800]
[49.56141281 160.39396667]
[36.75629425 152.58186340]
[31.41255569 138.56600952]
[35.76646423 124.21179199]
[47.99597931 115.52622986]
[62.98442841 116.14455414]
[48.09664917 114.31314087]
[35.71665573 123.76689148]
[20.64442062 121.69749451]
[11.70800495 109.83679962]
[-3.17977262 108.00538635]
[-18.06755066 106.17397308]
[-32.95532608 104.34255981]
[-47.84310532 102.51113892]
[-62.73088455 100.67972565]
[-77.61865997 98.84831238]
[-86.58752441 113.43117523]
[-100.96573639 122.62268066]
[-117.85705566 124.62832642]
[-133.88372803 119.09537506]
[-145.86193848 107.17375183]
[-151.43424988 91.27744293]
[-166.38433838 90.05480194]
[-181.33442688 88.83216095]
[-196.28453064 87.60952759]
[-211.23461914 86.38688660]
[-223.11993408 96.80392456]
[-238.88436890 95.68233490]
[-249.17517090 83.68753815]
[-247.88697815 67.93583679]
[-235.78405762 57.77243423]
[-220.04684448 59.22709656]
[-210.01197815 71.43679810]
[-195.06188965 72.65943909]
[-180.11180115 73.88207245]
[-165.16171265 75.10471344]
[-150.21162415 76.32735443]
[-144.54188538 64.56886292]
[-135.17781067 55.42776871]
[-123.22773743 50.01658630]
[-110.11658478 49.00453186]
[-97.41590881 52.53483963]
[-86.65554810 60.20495224]
[-79.13936615 71.11231995]
[-75.78724670 83.96053314]
[-60.89946747 85.79194641]
[-46.01169205 87.62336731]
[-31.12391281 89.45478058]
[-16.23613548 91.28619385]
[-1.34835792 93.11760712]
[13.53941917 94.94902039]
[25.08398247 85.60778809]
[40.20839691 87.25302124]
[49.92806625 99.42536163]
[64.81584167 101.25677490]
[68.46740723 85.38442993]
[78.77776337 73.04895782]
[93.36422729 66.80453491]
[108.98737335 67.83111572]
[110.51471710 52.90907288]
[112.04206085 37.98703766]
[113.56940460 23.06499863]
[100.53671265 15.12071705]
[92.24876404 2.30382752]
[90.35113525 -12.84086704]
[95.22061157 -27.30637741]
[105.89035034 -38.22056580]
[120.24185944 -43.41640854]
[135.42564392 -41.86227417]
[148.42695618 -33.86672974]
[156.66436768 -21.01730347]
[158.50233459 -5.86525249]
[153.57594299 8.58096886]
[142.86331177 19.45305443]
[128.49143982 24.59234428]
[126.96409607 39.51438141]
[125.43675232 54.43642044]
[123.90940857 69.35845947]
[133.73231506 80.69470215]
[148.71983337 81.30652618]
[163.70735168 81.91835785]
[177.81163025 74.75038910]
[190.21272278 83.00037384]
[205.20024109 83.61220551]
[216.76847839 73.18082428]
[231.95922852 74.01480865]
[241.83267212 85.10763550]
[256.82019043 85.71945953]
[271.80770874 86.33129120]
[286.79522705 86.94312286]
[301.78274536 87.55494690]
[316.77026367 88.16677856]
[331.75778198 88.77861023]
[346.74530029 89.39043427]
[361.73278809 90.00226593]
[367.58868408 80.95886230]
[376.61923218 75.23327637]
[387.13577271 73.81599426]
[397.20477295 76.89921570]
[405.00360107 83.85395813]
[409.15020752 93.35699463]
[424.07226562 94.88433838]
[438.99429321 96.41168213]
[453.91632080 97.93902588]
[467.21447754 88.96466827]
[482.47842407 93.90344238]
[487.99896240 108.96673584]
[479.54125977 122.59928894]
[463.59329224 124.34336853]
[452.38897705 112.86106110]
[437.46694946 111.33371735]
[422.54492188 109.80637360]
[407.62286377 108.27902985]
[393.54345703 121.66893768]
[373.84768677 120.46384430]
[361.12097168 104.98978424]
[346.13345337 104.37795258]
[331.14593506 103.76612091]
[316.15841675 103.15429688]
[301.17089844 102.54246521]
[286.18338013 101.93063354]
[271.19586182 101.31880951]
[256.20834351 100.70697784]
[241.22084045 100.09515381]
[230.47608948 110.34629059]
[215.26789856 109.93931580]
[204.58840942 98.59972382]
[189.60089111 97.98789215]
[176.56861877 105.19962311]
[163.09552002 96.90587616]
[148.10800171 96.29404449]
[133.12048340 95.68222046]
[132.67602539 108.49382019]
[127.40541077 120.33048248]
[117.98300934 129.42405701]
[105.71116638 134.37420654]
[92.34078217 134.36335754]
[91.42335510 149.33528137]
[90.50593567 164.30720520]
[89.58850861 179.27911377]
[88.67108154 194.25103760]
[99.32839203 205.92138672]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[17 66]
[18 65]
[21 62]
[22 61]
[23 60]
[24 59]
[25 58]
[26 57]
[27 56]
[33 48]
[34 47]
[35 46]
[36 45]
[37 44]
[70 89]
[71 88]
[72 87]
[73 86]
[90 143]
[91 142]
[92 141]
[94 139]
[95 138]
[98 135]
[99 134]
[100 133]
[101 132]
[102 131]
[103 130]
[104 129]
[105 128]
[106 127]
[112 124]
[113 123]
[114 122]
[115 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
