%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 06:47:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGCGGCAGGGCGCAGCGUCGGGAGCCGGGAGAGCCUAGUGCUCAUCCCUCCCGGGUUCGGGGGAUGGUUAUCGGG\
) } def
/len { sequence length } bind def

/coor [
[1.00003612 226.29188538]
[-8.58958817 237.82614136]
[-18.17921257 249.36039734]
[-27.76883698 260.89465332]
[-37.35845947 272.42892456]
[-35.66027069 288.14169312]
[-45.63503647 300.40057373]
[-61.36489868 301.93252563]
[-73.51761627 291.82870483]
[-74.88319397 276.08352661]
[-64.65145874 264.03833008]
[-48.89271927 262.83929443]
[-39.30309296 251.30502319]
[-29.71347046 239.77076721]
[-20.12384605 228.23651123]
[-10.53422165 216.70225525]
[-12.15110493 201.94009399]
[-2.59017205 190.10610962]
[12.90469933 188.51026917]
[22.49432373 176.97601318]
[32.08394623 165.44175720]
[41.67357254 153.90750122]
[43.86062241 139.17433167]
[58.63278580 133.50920105]
[68.22241211 121.97494507]
[77.81203461 110.44068909]
[87.40165710 98.90643311]
[92.50000000 84.79944611]
[92.50000000 69.79944611]
[92.50000000 54.79944611]
[92.50000000 39.79944611]
[92.19402313 24.80256844]
[91.58219147 9.81505203]
[90.97036743 -5.17246485]
[90.35853577 -20.15998268]
[79.58300018 -32.04557800]
[82.29921722 -47.85702133]
[96.42353821 -55.46512604]
[111.12098694 -49.03359985]
[115.11694336 -33.49616623]
[105.34605408 -20.77181053]
[105.95787811 -5.78429365]
[106.56970978 9.20322323]
[107.18154144 24.19074059]
[110.70040894 30.93396759]
[107.50000000 39.79944611]
[107.50000000 54.79944611]
[107.50000000 69.79944611]
[107.50000000 84.79944611]
[118.63351440 94.85155487]
[133.55555725 93.32421112]
[148.47758484 91.79686737]
[163.39962769 90.26952362]
[178.32167053 88.74217987]
[191.29093933 78.70574188]
[206.36279297 85.16880035]
[208.03260803 101.48271179]
[194.58261108 110.86512756]
[179.84901428 103.66421509]
[164.92697144 105.19155884]
[150.00492859 106.71890259]
[135.08290100 108.24625397]
[120.16085815 109.77359772]
[113.70022583 113.08403778]
[107.38794708 113.60747528]
[102.22817993 111.81479645]
[98.93592072 108.49605560]
[89.34629059 120.03031158]
[79.75666809 131.56457520]
[70.16704559 143.09883118]
[67.29408264 158.65699768]
[53.20782852 163.49711609]
[43.61820602 175.03137207]
[34.02857971 186.56564331]
[24.43895721 198.09989929]
[25.69883156 213.62568665]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[5 12]
[19 75]
[20 74]
[21 73]
[22 72]
[24 70]
[25 69]
[26 68]
[27 67]
[28 49]
[29 48]
[30 47]
[31 46]
[32 44]
[33 43]
[34 42]
[35 41]
[50 63]
[51 62]
[52 61]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
