%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 08:41:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUAUAUUGAACUGUAAAUAUGUCACUAGAGAAAUAAAAUAUGGACUUCCAAUCUACGUAAACUUA\
) } def
/len { sequence length } bind def

/coor [
[30.75913620 169.16870117]
[20.92221832 157.66551208]
[12.97657776 144.78315735]
[-0.84773278 150.60453796]
[-14.67204285 156.42590332]
[-28.49635315 162.24728394]
[-42.32066345 168.06866455]
[-56.14497375 173.89004517]
[-59.54760742 189.02944946]
[-71.22132111 199.25216675]
[-86.67734528 200.62734985]
[-99.97250366 192.62622070]
[-105.99456024 178.32536316]
[-102.42789459 163.22375488]
[-90.64396667 153.12826538]
[-75.17393494 151.92083740]
[-61.96635437 160.06573486]
[-48.14204025 154.24435425]
[-34.31772995 148.42297363]
[-20.49342155 142.60159302]
[-6.66911077 136.78022766]
[7.15520000 130.95884705]
[3.54211783 116.56755066]
[2.14611316 101.79545593]
[2.99927306 86.98209381]
[6.08198786 72.46794891]
[11.32340145 58.58662415]
[18.60304070 45.65718079]
[27.75358391 33.97680664]
[38.56470490 23.81396866]
[50.78791046 15.40226269]
[64.14225769 8.93502903]
[78.32078552 4.56091738]
[92.99761200 2.38046598]
[107.83538818 2.44379282]
[122.49306488 4.74944210]
[136.63374329 9.24441910]
[149.93240356 15.82540607]
[162.08335876 24.34114075]
[172.80734253 34.59589005]
[181.85784912 46.35394669]
[189.02685547 59.34505463]
[203.10884094 54.17805099]
[217.19081116 49.01104736]
[227.27810669 36.08128738]
[243.47956848 38.61991882]
[249.12852478 54.01541138]
[238.41381836 66.43020630]
[222.35781860 63.09302521]
[208.27584839 68.26002502]
[194.19386292 73.42703247]
[197.16467285 88.26828003]
[197.81163025 103.39011383]
[196.11924744 118.43086243]
[192.12802124 133.03080750]
[185.93339539 146.84077454]
[177.68353271 159.53045654]
[167.57574463 170.79637146]
[155.85176086 180.36907959]
[142.79199219 188.01960754]
[128.70878601 193.56501770]
[113.93894958 196.87266541]
[98.83574677 197.86343384]
[83.76039124 196.51364136]
[69.07343292 192.85556030]
[55.12612915 186.97668457]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 22]
[4 21]
[5 20]
[6 19]
[7 18]
[8 17]
[42 51]
[43 50]
[44 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
