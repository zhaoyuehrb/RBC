%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 12:42:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAGACGAGGGGACAGCCUAUCAGGCAAGUAUUUGGUUCCAGCCCACCAAAUCUGUAUGAAACUGAGAUUUCUAUCAUUUGGUGUUAAAACUCAUCUAAAAGAUGGUAUAAAUUAUAUGGAUACUGUUUAUGUGUGCCAAAGAUUUUU\
) } def
/len { sequence length } bind def

/coor [
[118.25389099 344.48419189]
[120.84755707 325.27682495]
[121.16168976 310.28012085]
[121.47582245 295.28341675]
[121.78996277 280.28671265]
[122.10409546 265.28997803]
[122.26117706 250.29081726]
[110.12275696 241.70030212]
[105.31344604 227.44076538]
[109.87619781 212.91372681]
[122.26117706 203.75302124]
[122.26117706 188.75302124]
[114.52387238 176.02575684]
[122.26117706 162.22558594]
[122.26117706 147.22558594]
[87.35840607 151.52345276]
[57.06656265 132.57723999]
[45.11861420 141.64622498]
[33.17066574 150.71522522]
[21.22271729 159.78421021]
[12.26198578 174.17662048]
[-4.04854584 169.55029297]
[-4.11822414 152.59649658]
[12.15373039 147.83625793]
[24.10167885 138.76727295]
[36.04962921 129.69828796]
[47.99757767 120.62929535]
[46.05643463 113.38484955]
[31.56754684 117.26713562]
[17.07865906 121.14942169]
[2.58970737 125.03147125]
[-1.29209757 110.54244995]
[13.19637299 106.66053772]
[27.68526077 102.77825165]
[42.17414856 98.89596558]
[40.23300552 91.65151978]
[25.35128403 89.77152252]
[10.46956444 87.89152527]
[-4.43029547 94.74179840]
[-17.65452003 85.04376221]
[-15.59916210 68.77392578]
[-0.37859702 62.66930008]
[12.34956264 73.00980377]
[27.23128319 74.88980103]
[42.11300278 76.76979828]
[51.18199158 64.82185364]
[45.36925507 50.99390411]
[39.55652237 37.16595840]
[33.74378967 23.33801079]
[27.93105507 9.51006317]
[22.11832237 -4.31788445]
[16.30558777 -18.14583206]
[10.49285412 -31.97377968]
[-1.16750157 -37.58765030]
[-5.70590067 -49.27722549]
[-1.18652844 -60.54246521]
[-6.70839691 -74.48911285]
[-12.23026466 -88.43576050]
[-18.33882141 -95.31805420]
[-17.71836662 -102.73275757]
[-22.94694710 -116.79198456]
[-28.17552757 -130.85121155]
[-33.40410995 -144.91044617]
[-47.87646484 -151.26075745]
[-53.54170227 -166.01475525]
[-47.03873825 -180.41915894]
[-32.22566223 -185.92810059]
[-17.89081192 -179.27320862]
[-12.53880024 -164.40270996]
[-19.34487915 -150.13902283]
[-14.11629868 -136.07978821]
[-8.88771820 -122.02056122]
[-3.65913701 -107.96133423]
[1.71638227 -93.95762634]
[7.23825073 -80.01097870]
[12.76011848 -66.06433105]
[27.07548523 -55.96247864]
[24.32080078 -37.78651428]
[30.13353539 -23.95856476]
[35.94626999 -10.13061810]
[41.75900269 3.69732904]
[47.57173538 17.52527618]
[53.38447189 31.35322380]
[59.19720459 45.18117142]
[65.00994110 59.00911713]
[80.15131378 50.19636536]
[97.23282623 46.73942947]
[114.42790985 48.94794846]
[129.91705322 56.52891541]
[142.08038330 68.62400818]
[149.66699219 83.90637970]
[162.49746704 76.13597107]
[168.26466370 68.96520996]
[175.67900085 68.34043884]
[188.66937256 60.84043503]
[201.65975952 53.34043503]
[214.65014648 45.84043503]
[227.64051819 38.34043503]
[238.33444214 25.18458557]
[253.93652344 31.81868362]
[251.88078308 48.64753342]
[235.14051819 51.33081818]
[222.15014648 58.83081818]
[209.15975952 66.33081818]
[196.16937256 73.83081818]
[183.17900085 81.33081818]
[170.26786804 88.96643829]
[157.43740845 96.73684692]
[157.51594543 104.23643494]
[172.50106812 103.56851196]
[186.85307312 99.20733643]
[195.67695618 111.33743286]
[187.10861206 123.64936066]
[172.66883850 119.58956146]
[157.67301941 119.23561096]
[157.75155640 126.73519897]
[170.74194336 134.23519897]
[183.73231506 141.73519897]
[196.72270203 149.23519897]
[209.71307373 156.73519897]
[222.70346069 164.23519897]
[235.69384766 171.73519897]
[248.68421936 179.23519897]
[265.42449951 181.91848755]
[267.48022461 198.74732971]
[251.87814331 205.38142395]
[241.18421936 192.22558594]
[228.19384766 184.72558594]
[215.20346069 177.22558594]
[202.21307373 169.72558594]
[189.22270203 162.22558594]
[176.23231506 154.72558594]
[163.24194336 147.22558594]
[150.25155640 139.72558594]
[137.26116943 147.22558594]
[137.26116943 162.22558594]
[144.99847412 176.02575684]
[137.26116943 188.75302124]
[137.26116943 203.75302124]
[149.64614868 212.91372681]
[154.20890808 227.44076538]
[149.39959717 241.70030212]
[137.26116943 250.29081726]
[140.40722656 258.93850708]
[137.10081482 265.60412598]
[136.78666687 280.60083008]
[136.47253418 295.59753418]
[136.15840149 310.59426880]
[135.84426880 325.59097290]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 143]
[11 139]
[12 138]
[14 136]
[15 135]
[17 27]
[18 26]
[19 25]
[20 24]
[36 45]
[37 44]
[38 43]
[46 85]
[47 84]
[48 83]
[49 82]
[50 81]
[51 80]
[52 79]
[53 78]
[56 76]
[57 75]
[58 74]
[60 73]
[61 72]
[62 71]
[63 70]
[91 108]
[92 107]
[94 106]
[95 105]
[96 104]
[97 103]
[98 102]
[116 134]
[117 133]
[118 132]
[119 131]
[120 130]
[121 129]
[122 128]
[123 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
