%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 03:37:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUCCCUGAGCCCCAAACCCUCCUCAGGGUGGUUGAGUUCCAGCCAUGCUCCCUAUAAAUGUCAUGUGGCUUACCUCUCC\
) } def
/len { sequence length } bind def

/coor [
[87.83054352 344.53875732]
[76.67994690 334.20761108]
[70.33625031 320.39361572]
[69.76680756 305.20336914]
[75.05846405 290.95321655]
[85.40427399 279.81622314]
[99.22658539 273.49069214]
[98.64495087 258.50198364]
[98.06332397 243.51325989]
[97.48168945 228.52453613]
[96.90006256 213.53581238]
[96.31842804 198.54708862]
[88.09344482 186.12940979]
[95.28981781 172.03959656]
[94.70819092 157.05088806]
[80.12632751 153.73866272]
[66.89812469 146.76614380]
[55.92457962 136.60824585]
[47.95314407 123.95685577]
[43.52676773 109.67369843]
[42.94694901 94.73163605]
[46.25317764 80.14841461]
[53.22025681 66.91734314]
[63.37364197 55.93962860]
[76.02175140 47.96299362]
[90.30309296 43.53075027]
[89.72145844 28.54203033]
[89.13983154 13.55331039]
[88.55819702 -1.43540883]
[86.81680298 -16.33398438]
[83.92612457 -31.05281448]
[81.03543854 -45.77164459]
[78.14475250 -60.49047470]
[75.25406647 -75.20930481]
[72.36338806 -89.92813110]
[59.90105057 -100.03108978]
[60.17380142 -116.07182312]
[72.97240448 -125.74525452]
[88.47886658 -121.63076019]
[94.79795837 -106.88462067]
[87.08221436 -92.81881714]
[89.97290039 -78.09998322]
[92.86358643 -63.38115692]
[95.75426483 -48.66232681]
[98.64495087 -33.94349670]
[101.53563690 -19.22466850]
[104.08634186 -17.53944206]
[106.02609253 -14.60945702]
[106.82173157 -10.70250130]
[106.06460571 -6.29538870]
[103.54692078 -2.01703954]
[104.12854767 12.97167969]
[104.71018219 27.96039963]
[105.29180908 42.94911957]
[119.87367249 46.26134109]
[133.10188293 53.23385620]
[144.07542419 63.39175034]
[152.04685974 76.04314423]
[156.47323608 90.32630157]
[157.05305481 105.26836395]
[153.74682617 119.85158539]
[146.77973938 133.08265686]
[136.62635803 144.06036377]
[123.97824860 152.03700256]
[109.69690704 156.46925354]
[110.27854156 171.45797729]
[118.54512787 184.94775391]
[111.30715179 197.96546936]
[111.88877869 212.95417786]
[112.47041321 227.94290161]
[113.05204010 242.93162537]
[113.63367462 257.92034912]
[114.21530151 272.90905762]
[128.48622131 278.14443970]
[139.66395569 288.44622803]
[146.04399109 302.24346924]
[146.65338135 317.43215942]
[141.39924622 331.69619751]
[131.08276367 342.86038208]
[117.27714539 349.22222900]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 73]
[8 72]
[9 71]
[10 70]
[11 69]
[12 68]
[14 66]
[15 65]
[26 54]
[27 53]
[28 52]
[29 51]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[35 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
