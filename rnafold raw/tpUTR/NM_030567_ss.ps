%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 21:08:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGGCGCCCGGCGCCCCGGGCCCCACCGGCGGACUCCUGGCCUGACUGCGGGGCUUUUUAAAUGCUUCCCUGGACUGCGGGGAGGGGCGGGGGGAGGGAGGGAUUUCUUAUCCCGUUUGUUACAUUUUGAGGAUAAUAAAGGUGUGUGAUCUGGUUUGGUACAA\
) } def
/len { sequence length } bind def

/coor [
[5.84000635 424.13449097]
[-3.57048345 425.02627563]
[-9.11346054 438.96456909]
[-14.65643883 452.90283203]
[-20.19941521 466.84109497]
[-25.74239349 480.77935791]
[-31.28536987 494.71765137]
[-36.82835007 508.65591431]
[-37.06304550 525.60821533]
[-53.41783524 530.07556152]
[-62.23805237 515.59661865]
[-50.76662064 503.11294556]
[-45.22364044 489.17465210]
[-39.68066406 475.23638916]
[-34.13768768 461.29812622]
[-28.59470940 447.35986328]
[-23.05173111 433.42156982]
[-17.50875473 419.48330688]
[-27.19108200 401.52444458]
[-20.46594048 381.95367432]
[-1.25637543 373.50491333]
[3.21659327 359.18737793]
[7.68956184 344.86981201]
[0.57133693 331.83651733]
[4.90360403 317.25274658]
[18.62237358 309.87487793]
[23.09534264 295.55731201]
[27.56831169 281.23974609]
[32.04127884 266.92221069]
[36.51424789 252.60462952]
[40.71546936 238.20498657]
[44.64343643 223.72842407]
[40.50895309 209.41914368]
[51.59003067 198.12666321]
[55.51799774 183.65008545]
[51.38351440 169.34082031]
[62.46459579 158.04832458]
[66.39256287 143.57176208]
[70.32052612 129.09518433]
[62.61660004 116.22470093]
[47.42867661 120.65614319]
[36.77030563 110.25189209]
[22.15546417 106.87454987]
[7.54062414 103.49721527]
[-7.07421732 100.11987305]
[-22.59117889 105.42609406]
[-34.76534653 94.43875122]
[-31.07298279 78.46068573]
[-15.31247234 73.92876434]
[-3.69687819 85.50503540]
[10.91796303 88.88237000]
[25.53280449 92.25971222]
[40.14764404 95.63705444]
[54.29021454 90.96404266]
[65.99393463 101.60986328]
[71.19593048 96.20715332]
[59.98937988 86.23652649]
[48.78283310 76.26590729]
[34.46602249 71.79054260]
[30.74501038 57.25939560]
[41.14879990 46.45378876]
[55.81045532 49.62172699]
[60.82480240 63.75929260]
[71.21235657 74.58051300]
[81.59990692 85.40172577]
[86.80190277 79.99901581]
[82.87393188 65.52244568]
[78.94596863 51.04587936]
[75.01799774 36.56930923]
[71.09003448 22.09273720]
[67.16206360 7.61616802]
[63.23409653 -6.86040163]
[59.30612946 -21.33697128]
[46.15822601 -30.53002357]
[45.29190063 -46.54966736]
[57.37172699 -57.10700607]
[73.13109589 -54.10335159]
[80.48076630 -39.84284973]
[73.78269958 -25.26493835]
[77.71067047 -10.78836918]
[81.63863373 3.68820095]
[85.56660461 18.16477013]
[89.49456787 32.64134216]
[93.42253876 47.11790848]
[97.35050201 61.59447861]
[101.27847290 76.07105255]
[108.56958771 77.82878876]
[130.44293213 83.10201263]
[140.53601074 72.00563812]
[150.62910461 60.90925598]
[160.72219849 49.81288147]
[170.81527710 38.71650314]
[180.90837097 27.62012672]
[184.47039795 12.20511627]
[198.75794983 7.99622631]
[208.85104370 -3.10015059]
[218.94413757 -14.19652748]
[229.03721619 -25.29290390]
[239.13031006 -36.38928223]
[249.22338867 -47.48565674]
[252.18328857 -63.61547470]
[267.72073364 -68.86138916]
[279.85214233 -57.82685471]
[276.09777832 -41.86325455]
[260.31976318 -37.39257050]
[250.22668457 -26.29619217]
[240.13359070 -15.19981575]
[230.04051208 -4.10343933]
[219.94741821 6.99293756]
[209.85433960 18.08931351]
[207.01423645 32.71063614]
[192.00474548 37.71321487]
[181.91165161 48.80959320]
[171.81857300 59.90596771]
[161.72547913 71.00234222]
[151.63238525 82.09872437]
[141.53930664 93.19509888]
[146.41685486 107.37992859]
[161.19979858 109.92250061]
[175.98274231 112.46508026]
[190.76568604 115.00765228]
[205.54862976 117.55022430]
[220.33155823 120.09280396]
[235.13789368 122.49537659]
[245.95147705 111.36676788]
[261.24679565 108.75276947]
[275.14248657 115.65853119]
[282.29537964 129.42864990]
[279.95501709 144.76821899]
[269.02133179 155.77886963]
[253.69856262 158.22677612]
[239.87861633 151.17068481]
[232.87553406 137.32379150]
[225.75750732 139.43289185]
[217.78898621 134.87574768]
[203.00604248 132.33316040]
[188.22311401 129.79058838]
[173.44017029 127.24801636]
[158.65722656 124.70544434]
[143.87428284 122.16287231]
[84.79709625 133.02316284]
[80.86913300 147.49972534]
[76.94116211 161.97630310]
[80.79469299 177.32102966]
[69.99456787 187.57806396]
[66.06660461 202.05462646]
[69.92012787 217.39936829]
[59.12000656 227.65638733]
[55.19203949 242.13296509]
[56.52559280 248.68138123]
[54.60980988 254.09080505]
[50.83181000 257.07760620]
[46.35884094 271.39517212]
[41.88587189 285.71273804]
[37.41290283 300.03027344]
[32.93993378 314.34783936]
[40.01895523 328.22320557]
[35.27877045 342.67950439]
[22.00712204 349.34277344]
[17.53415489 363.66033936]
[13.06118584 377.97790527]
[19.92661095 384.97290039]
[23.72667885 393.94442749]
[23.97136497 403.62637329]
[20.66916656 412.66925049]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 18]
[3 17]
[4 16]
[5 15]
[6 14]
[7 13]
[8 12]
[21 161]
[22 160]
[23 159]
[26 156]
[27 155]
[28 154]
[29 153]
[30 152]
[31 149]
[32 148]
[34 146]
[35 145]
[37 143]
[38 142]
[39 141]
[40 55]
[42 53]
[43 52]
[44 51]
[45 50]
[66 86]
[67 85]
[68 84]
[69 83]
[70 82]
[71 81]
[72 80]
[73 79]
[88 117]
[89 116]
[90 115]
[91 114]
[92 113]
[93 112]
[95 110]
[96 109]
[97 108]
[98 107]
[99 106]
[100 105]
[118 140]
[119 139]
[120 138]
[121 137]
[122 136]
[123 135]
[124 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
