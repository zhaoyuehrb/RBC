%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 03:39:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCCCCCUCCGCGGUGGGGGCUUGGAGGUGGGCGGCUGGACUCAAUCCACCCUGGGGGGCUCCUUUCCUUCUUCCUAUUUGUGUGUAUAUCCACAAAUAAAACGCGCGUGGCGUCCGUGGACCAGA\
) } def
/len { sequence length } bind def

/coor [
[-49.72536087 217.76040649]
[-61.32051849 227.27629089]
[-72.91567230 236.79219055]
[-84.51083374 246.30809021]
[-96.10598755 255.82398987]
[-101.86517334 270.55975342]
[-116.61197662 272.65283203]
[-128.20713806 282.16873169]
[-139.80229187 291.68463135]
[-151.39744568 301.20053101]
[-162.99259949 310.71643066]
[-174.58776855 320.23233032]
[-179.30085754 328.18289185]
[-186.58624268 329.83526611]
[-198.41143799 339.06372070]
[-210.23663330 348.29220581]
[-215.88323975 363.68856812]
[-232.08430481 366.22967529]
[-242.17358398 353.30148315]
[-235.77207947 338.20336914]
[-219.46511841 336.46701050]
[-207.63992310 327.23852539]
[-195.81472778 318.01007080]
[-184.10366821 308.63717651]
[-172.50849915 299.12127686]
[-160.91334534 289.60537720]
[-149.31819153 280.08947754]
[-137.72303772 270.57357788]
[-126.12787628 261.05767822]
[-121.19805908 247.00256348]
[-105.62188721 244.22883606]
[-94.02673340 234.71293640]
[-82.43157196 225.19703674]
[-70.83641815 215.68113708]
[-59.24126053 206.16523743]
[-54.01452255 189.45994568]
[-35.89128876 186.48860168]
[-24.53315544 176.69100952]
[-13.17502308 166.89341736]
[-1.81688988 157.09582520]
[-16.53958893 154.22491455]
[-25.10698700 141.91233826]
[-22.68200493 127.10965729]
[-10.63376713 118.17433167]
[4.23539877 120.15117645]
[13.53049374 131.92407227]
[12.00385094 146.84567261]
[24.67665482 138.82070923]
[37.34945679 130.79574585]
[50.02226257 122.77077484]
[62.69506454 114.74581146]
[59.95210266 97.70585632]
[64.62300873 81.09059906]
[75.84307098 67.97595215]
[91.53517914 60.78974533]
[91.16706085 45.79426575]
[90.79894257 30.79878235]
[90.43082428 15.80329990]
[90.06270599 0.80781746]
[89.69458771 -14.18766499]
[78.07699585 -24.90247154]
[77.52211761 -40.69701767]
[88.35916138 -52.20067596]
[104.15868378 -52.58853531]
[115.54712677 -41.63047791]
[115.76792145 -25.82773209]
[104.69007111 -14.55578327]
[105.05818939 0.43969902]
[105.42630768 15.43518162]
[105.79442596 30.43066406]
[106.16254425 45.42614746]
[106.53066254 60.42162704]
[113.14031219 62.09974670]
[119.37020111 64.87319183]
[125.04028320 68.66181946]
[129.98669434 73.35613251]
[134.06646729 78.82046509]
[148.06135559 73.42204285]
[162.05625916 68.02361298]
[176.05114746 62.62518692]
[190.04603577 57.22676468]
[204.04092407 51.82833862]
[218.03582764 46.42991257]
[232.03071594 41.03148651]
[235.89201355 26.00251389]
[247.87110901 16.13940430]
[263.36178589 15.23472214]
[276.40756226 23.63633728]
[281.99209595 38.11365509]
[277.96798706 53.09985733]
[265.88259888 62.83243561]
[250.38301086 63.56901932]
[237.42913818 55.02637863]
[223.43424988 60.42480469]
[209.43936157 65.82322693]
[195.44445801 71.22165680]
[181.44956970 76.62007904]
[167.45468140 82.01850891]
[153.45979309 87.41693115]
[139.46488953 92.81535339]
[140.09553528 101.20190430]
[138.96368408 109.53562164]
[136.11907959 117.45018005]
[148.16720581 126.38566589]
[160.21531677 135.32115173]
[172.26342773 144.25665283]
[188.27995300 143.33442688]
[198.87937927 155.37733459]
[195.93074036 171.14707947]
[181.69596863 178.54647827]
[167.09477234 171.89932251]
[163.32794189 156.30476379]
[151.27981567 147.36926270]
[139.23170471 138.43377686]
[127.18359375 129.49829102]
[108.89683533 139.11448669]
[88.24983215 138.35401917]
[70.72003174 127.41861725]
[58.04722595 135.44357300]
[45.37442398 143.46853638]
[32.70161819 151.49351501]
[20.02881622 159.51847839]
[7.98070288 168.45396423]
[-3.37742996 178.25155640]
[-14.73556232 188.04914856]
[-26.09369469 197.84674072]
[-27.84249496 210.69531250]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[3 33]
[4 32]
[5 31]
[7 29]
[8 28]
[9 27]
[10 26]
[11 25]
[12 24]
[14 23]
[15 22]
[16 21]
[37 126]
[38 125]
[39 124]
[40 123]
[47 122]
[48 121]
[49 120]
[50 119]
[51 118]
[55 72]
[56 71]
[57 70]
[58 69]
[59 68]
[60 67]
[77 100]
[78 99]
[79 98]
[80 97]
[81 96]
[82 95]
[83 94]
[84 93]
[103 115]
[104 114]
[105 113]
[106 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
