%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 01:45:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAGGAUGGGGCAGGACAGGACGCGGCCACCCCAGGCCUUUCCAGAGCAAACCUGGAGAAGAUUCACAAUAGACAGGCCAAGAAACCCGGUGCUUCCUCCAGAGCCGUUUAAAGCUGAUAUGAGGAAAUAAAGAGUGAACUGGAA\
) } def
/len { sequence length } bind def

/coor [
[134.05368042 157.61677551]
[122.62779999 167.33528137]
[107.93582916 170.35952759]
[93.60051727 165.94380188]
[83.15664673 155.17692566]
[79.17946625 140.71379089]
[82.64967346 126.12072754]
[92.71056366 114.99674225]
[80.78591156 124.09634399]
[68.86125946 133.19593811]
[56.93661118 142.29553223]
[45.01195908 151.39514160]
[42.50561142 164.09460449]
[32.32678604 171.42327881]
[20.28520012 169.87361145]
[8.16881466 178.71630859]
[3.03510952 186.35919189]
[-4.30230999 187.61523438]
[-11.19419003 201.85646057]
[-26.05938339 202.79202271]
[-32.52265167 217.86378479]
[-48.83658981 219.53337097]
[-58.21881485 206.08325195]
[-51.01770020 191.34974670]
[-34.64113235 190.48944092]
[-28.62921715 176.86203003]
[-12.88405991 175.31265259]
[-0.67387843 166.59992981]
[11.44250584 157.75723267]
[17.62912941 141.36721802]
[35.91236115 139.47048950]
[47.83701324 130.37088013]
[59.76166534 121.27128601]
[71.68631744 112.17169189]
[83.61096954 103.07209015]
[85.52912140 88.19524384]
[76.30262756 76.36849976]
[67.07612610 64.54176331]
[57.84962845 52.71503067]
[48.62312698 40.88829041]
[37.51895905 30.80377960]
[24.86091423 22.75555229]
[12.20287037 14.70732784]
[-0.45517281 6.65910196]
[-13.11321640 -1.38912380]
[-25.77125931 -9.43734932]
[-40.62533569 -4.54956579]
[-55.12675858 -10.40129471]
[-62.42840195 -24.22952843]
[-59.08264923 -39.50499725]
[-46.66926575 -49.01509094]
[-31.04947090 -48.26943970]
[-19.59845352 -37.62010956]
[-17.72303391 -22.09539223]
[-5.06499052 -14.04716682]
[7.59305286 -5.99894142]
[20.25109673 2.04928398]
[32.90914154 10.09750938]
[45.56718445 18.14573479]
[39.28940964 4.52261019]
[37.95128632 -10.41758442]
[41.70824432 -24.93947411]
[50.12389755 -37.35626984]
[62.22072220 -46.22569656]
[76.59362030 -50.51753616]
[91.57310486 -49.73326111]
[105.41923523 -43.96397781]
[116.52371979 -33.87981033]
[123.59671021 -20.65208435]
[125.81665802 -5.81726503]
[122.92569733 8.90151024]
[115.25962830 21.79458427]
[103.70890045 31.36436653]
[89.61518860 36.49927902]
[74.61554718 36.60287476]
[60.44986343 31.66179276]
[69.67636108 43.48852921]
[78.90286255 55.31526566]
[88.12936401 67.14200592]
[97.35586548 78.96874237]
[97.70166779 63.97272873]
[106.88597870 52.11319733]
[121.31846619 48.02625275]
[135.35722351 53.30955887]
[143.51423645 65.89777374]
[142.60076904 80.86993408]
[132.97393799 92.37315369]
[118.39798737 95.91067505]
[132.94723511 99.56024170]
[147.49649048 103.20980072]
[162.04574585 106.85935974]
[176.59498596 110.50892639]
[191.21891785 113.84674072]
[205.91081238 116.87127686]
[220.60272217 119.89582062]
[235.47956848 121.81398010]
[250.45817566 122.61502075]
[265.43676758 123.41606903]
[280.41537476 124.21711731]
[295.39395142 125.01815796]
[306.33242798 110.63150787]
[323.55145264 105.68121338]
[340.16781616 111.95166016]
[349.65505981 126.78022766]
[364.65420532 126.94050598]
[379.65335083 127.10079193]
[388.79922485 114.56554413]
[403.57675171 109.83218384]
[418.30361938 114.72078705]
[427.31710815 127.35157776]
[427.15130615 142.86776733]
[417.86996460 155.30305481]
[403.04196167 159.87583923]
[388.36898804 154.82775879]
[379.49307251 142.09992981]
[364.49392700 141.93965149]
[349.49478149 141.77937317]
[343.73272705 152.55473328]
[333.86117554 159.87855530]
[321.73587036 162.29698181]
[309.66937256 159.28562927]
[299.99008179 151.36180115]
[294.59292603 139.99674988]
[279.61431885 139.19570923]
[264.63571167 138.39466858]
[249.65711975 137.59361267]
[234.67852783 136.79257202]
[244.37039185 148.24105835]
[244.61567688 163.23905945]
[235.30339050 174.99836731]
[220.64831543 178.19664001]
[207.28346252 171.38630676]
[201.25782776 157.64979553]
[205.29869080 143.20433044]
[217.57818604 134.58772278]
[202.88627625 131.56318665]
[188.19436646 128.53865051]
[183.73110962 130.41204834]
[178.03916931 129.45097351]
[172.94543457 125.05817413]
[158.39617920 121.40861511]
[143.84692383 117.75904846]
[129.29768372 114.10948944]
[114.74842834 110.45993042]
[128.38603210 116.70619965]
[137.33767700 128.74230957]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 35]
[9 34]
[10 33]
[11 32]
[12 31]
[15 29]
[16 28]
[18 27]
[20 25]
[36 80]
[37 79]
[38 78]
[39 77]
[40 76]
[41 59]
[42 58]
[43 57]
[44 56]
[45 55]
[46 54]
[88 144]
[89 143]
[90 142]
[91 141]
[92 140]
[93 137]
[94 136]
[95 135]
[96 127]
[97 126]
[98 125]
[99 124]
[100 123]
[104 117]
[105 116]
[106 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
