%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 14:30:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGGCCCCUACCCCAUAAGAUUGGUGUAAACCUCUUGUUGUGCAUCCUCAACCUCCAUCCCUGCCCUCUCUGGGCUCUGAAUCCCCAGAGGCAACAAUAAAGGACGUUUCUCCAA\
) } def
/len { sequence length } bind def

/coor [
[136.90963745 245.77862549]
[122.06240845 247.91406250]
[107.14269257 246.36419678]
[93.05140686 241.22264099]
[80.63945770 232.79985046]
[70.65632629 221.60444641]
[63.70484924 208.31245422]
[60.20479202 193.72651672]
[60.36750793 178.72740173]
[64.18316650 164.22082520]
[71.41866302 151.08648682]
[58.10838318 158.00288391]
[44.79809952 164.91926575]
[36.12009811 178.14813232]
[21.25891685 177.15087891]
[7.94863653 184.06726074]
[-5.36164474 190.98364258]
[-9.88565540 206.12658691]
[-23.83179474 213.56169128]
[-38.92606735 208.87783813]
[-46.21330643 194.85386658]
[-41.37012100 179.80996704]
[-27.26989365 172.67140198]
[-12.27803230 177.67337036]
[1.03224897 170.75697327]
[14.34253025 163.84059143]
[22.06849098 151.10643005]
[37.88171387 151.60897827]
[51.19199371 144.69259644]
[64.50227356 137.77621460]
[66.28510284 133.54145813]
[69.83626556 130.03410339]
[74.82314301 127.99076843]
[82.43813324 115.06745911]
[90.05311584 102.14414978]
[91.13243866 94.04319763]
[98.04675293 88.98201752]
[106.00306702 76.26600647]
[113.95938110 63.54998779]
[121.91569519 50.83397293]
[129.87200928 38.11795425]
[137.82832336 25.40193939]
[145.78463745 12.68592262]
[140.86485291 1.69583225]
[141.91160583 -10.17845440]
[148.54255676 -19.93867493]
[158.98039246 -25.17790413]
[170.52764893 -24.67369652]
[179.14945984 -36.94823837]
[187.77127075 -49.22278214]
[196.39308167 -61.49732208]
[187.89155579 -73.11136627]
[183.41717529 -86.76868439]
[183.39836121 -101.11872864]
[187.82359314 -114.74678802]
[196.24392700 -126.31346130]
[207.81843567 -134.68632507]
[221.39825439 -139.05075073]
[235.64051819 -138.98919678]
[249.14120483 -134.52108765]
[258.08673096 -146.56176758]
[253.60830688 -161.30116272]
[258.60919189 -175.68325806]
[270.97360229 -184.26144409]
[285.84033203 -183.91819763]
[294.78585815 -195.95886230]
[303.73135376 -207.99954224]
[312.67687988 -220.04022217]
[311.76797485 -236.05749512]
[323.81970215 -246.64691162]
[339.58697510 -243.68515015]
[346.97454834 -229.44422913]
[340.31524658 -214.84857178]
[324.71755981 -211.09471130]
[315.77203369 -199.05403137]
[306.82653809 -187.01335144]
[297.88101196 -174.97268677]
[302.50155640 -160.83802795]
[297.85812378 -146.52360535]
[285.53210449 -137.58366394]
[270.12741089 -137.61625671]
[261.18188477 -125.57558441]
[269.98898315 -112.59597015]
[273.84780884 -97.36496735]
[272.27795410 -81.70451355]
[265.44955444 -67.49434662]
[254.16499329 -56.44636536]
[239.76470947 -49.89840698]
[223.96798706 -48.65225601]
[208.66761780 -52.87551117]
[200.04580688 -40.60096741]
[191.42399597 -28.32642746]
[182.80218506 -16.05188560]
[187.09640503 1.64675939]
[177.02743530 17.19997978]
[158.50065613 20.64223671]
[150.54434204 33.35825348]
[142.58802795 46.07426834]
[134.63171387 58.79028320]
[126.67539978 71.50630188]
[118.71908569 84.22232056]
[110.76277161 96.93833160]
[102.97643280 109.75913239]
[95.36144257 122.68244171]
[87.74645996 135.60575867]
[101.25161743 129.07807922]
[115.94094086 126.04100037]
[130.92741394 126.67793274]
[145.30607605 130.95040894]
[158.20867920 138.60043335]
[168.85609436 149.16606140]
[176.60537720 162.00929260]
[180.98860168 176.35458374]
[181.74108887 191.33569336]
[178.81736755 206.04800415]
[172.39402771 219.60308838]
[162.85891724 231.18244934]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 30]
[12 29]
[13 28]
[15 26]
[16 25]
[17 24]
[33 105]
[34 104]
[35 103]
[37 102]
[38 101]
[39 100]
[40 99]
[41 98]
[42 97]
[43 96]
[48 93]
[49 92]
[50 91]
[51 90]
[60 82]
[61 81]
[65 77]
[66 76]
[67 75]
[68 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
