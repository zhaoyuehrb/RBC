%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 09:32:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGCCCAGAGAUGCAGCCCCUCAUGCCCCACCCGCCAAGUCUCAUUUUAAUUGGAGAUAGCCCAGAAUGCAUGUGCCCAUCAGAGGGUACAUAUCAGUCUAUUUUUUAUUAUAAACAAAUAAAAGAUUAAAUCACA\
) } def
/len { sequence length } bind def

/coor [
[116.66815948 141.31332397]
[106.18297577 152.03996277]
[95.69779205 162.76660156]
[85.21260071 173.49324036]
[85.75486755 190.93698120]
[73.77993774 203.16574097]
[57.00188446 202.99595642]
[46.76358795 213.95849609]
[36.65073395 225.03684998]
[26.66463089 236.22961426]
[16.67852974 247.42236328]
[20.90900993 262.25836182]
[16.42510605 277.01974487]
[4.65761471 286.99618530]
[-10.63849926 289.00427246]
[-24.58230400 282.40322876]
[-32.72438049 269.29940796]
[-32.46661758 253.87419128]
[-23.89127541 241.04972839]
[-9.73470783 234.91822815]
[5.48577452 237.43626404]
[15.47187614 226.24351501]
[25.45797729 215.05075073]
[27.58204460 207.90403748]
[35.80104828 203.72019958]
[46.03934479 192.75765991]
[43.80506516 180.01695251]
[49.42495728 168.15020752]
[61.03748322 161.61457825]
[74.48596191 163.00805664]
[84.97114563 152.28141785]
[95.45632935 141.55477905]
[105.94152069 130.82812500]
[78.82970428 118.41762543]
[76.60255432 92.00569916]
[64.54808044 83.07878113]
[53.79279327 85.31490326]
[43.80532074 81.29900360]
[37.84167480 72.60359955]
[37.69921494 62.28128052]
[26.06354713 52.81496048]
[14.42787743 43.34864426]
[2.79220796 33.88232422]
[-8.84346104 24.41600418]
[-23.16593552 29.96238136]
[-38.34027863 27.58859062]
[-50.28466797 17.93317223]
[-55.78612518 3.59338236]
[-53.36478043 -11.57344532]
[-43.67197037 -23.48751259]
[-29.31500626 -28.94399261]
[-14.15584373 -26.47512054]
[-2.27221799 -16.74501228]
[3.13923359 -2.37101555]
[0.62285769 12.78033543]
[12.25852680 22.24665451]
[23.89419556 31.71297264]
[35.52986526 41.17929077]
[47.16553497 50.64561081]
[66.38741302 52.21369934]
[73.47499847 71.02431488]
[85.52946472 79.95123291]
[103.34091949 73.25907898]
[122.36788177 81.27323914]
[131.35229492 101.64601135]
[140.27920532 89.59154510]
[149.20611572 77.53707886]
[151.20104980 61.84214783]
[164.99333191 56.21879578]
[173.92025757 44.16432953]
[175.54637146 25.86216354]
[191.83317566 19.42648125]
[200.48338318 7.17193365]
[209.13359070 -5.08261442]
[217.78379822 -17.33716393]
[226.43399048 -29.59171104]
[235.08419800 -41.84626007]
[243.73440552 -54.10080719]
[252.38461304 -66.35535431]
[249.45265198 -81.88529968]
[258.42965698 -94.89256287]
[273.98971558 -97.66017151]
[286.90136719 -88.54615021]
[289.50430298 -72.95768738]
[280.25427246 -60.14313889]
[264.63916016 -57.70515060]
[255.98895264 -45.45060349]
[247.33874512 -33.19605637]
[238.68853760 -20.94150734]
[230.03834534 -8.68695831]
[221.38813782 3.56759024]
[212.73793030 15.82213879]
[204.08772278 28.07668686]
[205.82611084 40.10210037]
[198.64607239 50.39818192]
[185.97471619 53.09124756]
[177.04780579 65.14571381]
[175.69139099 79.97842407]
[161.26058960 86.46399689]
[152.33367920 98.51846313]
[143.40675354 110.57292938]
[146.45860291 125.25918579]
[159.44897461 132.75918579]
[172.43936157 140.25918579]
[185.42973328 147.75918579]
[198.42012024 155.25918579]
[211.41050720 162.75918579]
[224.40087891 170.25918579]
[237.39126587 177.75918579]
[250.38163757 185.25918579]
[263.37203979 192.75918579]
[278.00369263 187.24116516]
[292.74191284 192.46789551]
[300.62774658 205.97151184]
[297.93777466 221.37599182]
[285.94207764 231.40782166]
[270.30468750 231.33027649]
[258.40908813 221.17997742]
[255.87202454 205.74957275]
[242.88163757 198.24957275]
[229.89126587 190.74957275]
[216.90087891 183.24957275]
[203.91050720 175.74957275]
[190.92012024 168.24957275]
[177.92973328 160.74957275]
[164.93936157 153.24957275]
[151.94897461 145.74957275]
[138.95860291 138.24957275]
[146.76303101 151.05935669]
[157.10545349 161.92372131]
[160.26225281 176.58778381]
[155.30644226 190.74546814]
[143.69329834 200.23939514]
[128.83297729 202.28170776]
[115.08920288 196.27267456]
[106.49779510 183.97682190]
[105.58159637 169.00483704]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[2 32]
[3 31]
[4 30]
[7 26]
[8 25]
[9 23]
[10 22]
[11 21]
[35 62]
[36 61]
[40 59]
[41 58]
[42 57]
[43 56]
[44 55]
[65 101]
[66 100]
[67 99]
[69 97]
[70 96]
[72 93]
[73 92]
[74 91]
[75 90]
[76 89]
[77 88]
[78 87]
[79 86]
[102 128]
[103 127]
[104 126]
[105 125]
[106 124]
[107 123]
[108 122]
[109 121]
[110 120]
[111 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
