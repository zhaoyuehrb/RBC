%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 19:16:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACCCCGGUGCGGACCACAGAGCAGACCCUGGCGCCAGGAAGGAGCAUGUGUUAGCGUCUCGUCCCACCUGGAAUUGUAAUAAAUACAUCUAAAUAAAACAUGCCUUGGGAGUGUACAGAC\
) } def
/len { sequence length } bind def

/coor [
[109.59839630 202.82452393]
[107.30866241 188.00030518]
[105.01892090 173.17610168]
[102.72917938 158.35189819]
[100.25032043 143.55813599]
[97.58273315 128.79725647]
[94.91515350 114.03635406]
[85.67017365 102.22406006]
[71.98262024 96.08802795]
[58.29506302 89.95200348]
[44.60750961 83.81597137]
[35.37846375 83.14019775]
[30.65187073 77.34447479]
[17.12548637 70.86088562]
[3.59910250 64.37729645]
[-9.92728138 57.89370728]
[-20.10124588 62.13711548]
[-30.70153236 60.05735779]
[-38.20419693 52.59580994]
[-40.25437164 42.44039154]
[-53.43205261 35.27459335]
[-66.60974121 28.10879707]
[-79.87785339 21.11186790]
[-93.23424530 14.28494740]
[-109.04373932 14.89359570]
[-116.85497284 2.21156430]
[-130.21136475 -4.61535597]
[-143.56774902 -11.44227600]
[-159.37724304 -10.83362770]
[-167.18847656 -23.51565933]
[-182.06011963 -18.88186264]
[-195.50814819 -25.99559593]
[-199.83412170 -40.20198822]
[-213.19050598 -47.02890778]
[-229.00000000 -46.42026138]
[-236.81123352 -59.10229111]
[-250.16761780 -65.92921448]
[-265.81292725 -62.37906265]
[-278.25277710 -72.50971222]
[-277.94433594 -88.54980469]
[-265.12426758 -98.19474030]
[-249.62698364 -94.04576111]
[-243.34069824 -79.28560638]
[-229.98431396 -72.45867920]
[-215.13015747 -73.55564117]
[-206.36358643 -60.38529968]
[-193.00720215 -53.55838013]
[-178.95889282 -58.37303925]
[-165.31637573 -51.63983917]
[-160.36155701 -36.87204742]
[-145.50740051 -37.96900558]
[-136.74082947 -24.79866600]
[-123.38444519 -17.97174644]
[-110.02805328 -11.14482594]
[-95.17389679 -12.24178123]
[-86.40732574 0.92855686]
[-73.05093384 7.75547695]
[-65.57626343 8.00099087]
[-59.44393921 14.93111229]
[-46.26625824 22.09691048]
[-33.08857346 29.26270676]
[-13.92747021 27.24008369]
[-3.44369221 44.36732483]
[10.08269215 50.85091400]
[23.60907555 57.33450317]
[37.13545990 63.81809235]
[50.74353790 70.12841797]
[64.43109131 76.26445007]
[78.11864471 82.40047455]
[91.80619812 88.53650665]
[111.64153290 77.96627045]
[124.63191986 70.46627045]
[137.62229919 62.96627426]
[150.61267090 55.46627426]
[154.34690857 49.78251648]
[159.62246704 47.29993057]
[164.46343994 47.93446732]
[177.81983948 41.10754776]
[191.17622375 34.28062439]
[204.53260803 27.45370674]
[210.81889343 12.69354725]
[226.31616211 8.54456520]
[239.13624573 18.18950462]
[239.44468689 34.22959137]
[227.00485229 44.36024857]
[211.35952759 40.81009674]
[198.00314331 47.63701630]
[184.64675903 54.46393585]
[171.29035950 61.29085541]
[158.11267090 68.45665741]
[145.12229919 75.95665741]
[132.13191223 83.45665741]
[119.14153290 90.95665741]
[134.13735962 90.60270691]
[147.46720886 83.72410583]
[162.40008545 82.30670929]
[176.78604126 86.55458069]
[188.55383301 95.85614014]
[196.00920105 108.87219238]
[198.07875061 123.72873688]
[194.46452332 138.28680420]
[185.68687439 150.45039368]
[173.00956726 158.46823120]
[158.25782776 161.18597412]
[143.55552673 158.21231079]
[131.01945496 149.97538757]
[122.45449066 137.66111755]
[119.09381866 123.04376984]
[109.67604828 111.36877441]
[112.34362793 126.12966919]
[115.01121521 140.89056396]
[119.66636658 148.88815308]
[117.55339050 156.06216431]
[119.84312439 170.88636780]
[122.13286591 185.71057129]
[124.42260742 200.53477478]
[137.88856506 208.48475647]
[143.04516602 223.24766541]
[137.45761108 237.85292053]
[123.76419830 245.40435791]
[108.43051910 242.33642578]
[98.69666290 230.09770203]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 116]
[2 115]
[3 114]
[4 113]
[5 111]
[6 110]
[7 109]
[8 70]
[9 69]
[10 68]
[11 67]
[13 66]
[14 65]
[15 64]
[16 63]
[20 61]
[21 60]
[22 59]
[23 57]
[24 56]
[26 54]
[27 53]
[28 52]
[30 50]
[33 47]
[34 46]
[36 44]
[37 43]
[71 93]
[72 92]
[73 91]
[74 90]
[77 89]
[78 88]
[79 87]
[80 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
