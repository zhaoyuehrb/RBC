%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 10:35:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCAUCGUGACUCAAAACUCACUUGUAUAAUAAACAGUUUUUGAGGGAUUUUAAAGUUUCAAGAACUGUGUGUGGCCUUAUGUGUUGGUAUUGGAUGUUUAACCAGACAGAAAUCAGUAAACAUCCUGGACCUAU\
) } def
/len { sequence length } bind def

/coor [
[179.73583984 122.05977631]
[165.09036255 118.81784821]
[150.44488525 115.57592010]
[135.76321411 112.50212097]
[121.04724884 109.59685516]
[106.33129120 106.69158173]
[105.66797638 117.25458527]
[96.67460632 126.90655518]
[86.88719177 138.27345276]
[77.09977722 149.64036560]
[67.31236267 161.00726318]
[71.00511169 176.07853699]
[65.10278320 190.42922974]
[51.87495041 198.54118347]
[36.40797806 197.29522705]
[24.64923668 187.17042542]
[21.12020302 172.05996704]
[27.17786026 157.77415466]
[40.49291611 149.80616760]
[55.94546127 151.21984863]
[65.73287201 139.85295105]
[75.52028656 128.48603821]
[85.30770111 117.11914062]
[71.26885223 122.40219879]
[60.20961380 132.53596497]
[45.60599899 135.96151733]
[31.19411278 131.80249023]
[20.66101074 121.12288666]
[16.70141983 106.65493774]
[20.32834053 92.10002899]
[30.61387825 81.18180084]
[44.92664719 76.69351196]
[59.60494232 79.78342438]
[70.89344025 89.66085052]
[85.04972839 94.62062073]
[75.00425720 83.48111725]
[64.95877838 72.34162140]
[54.91330338 61.20212555]
[44.86782455 50.06262970]
[34.82234955 38.92313004]
[24.77687073 27.78363419]
[14.73139477 16.64413834]
[4.68591738 5.50464010]
[-5.35955906 -5.63485670]
[-15.40503597 -16.77435303]
[-25.45051193 -27.91385078]
[-35.49599075 -39.05334854]
[-50.49986267 -35.77014542]
[-65.13031769 -40.44403076]
[-75.45185089 -51.81775665]
[-78.68800354 -66.83184814]
[-73.96828461 -81.44758606]
[-62.56225967 -91.73340607]
[-47.53810120 -94.92249298]
[-32.93722916 -90.15697479]
[-22.68720627 -78.71876526]
[-19.54523659 -63.68468857]
[-24.35649300 -49.09882355]
[-14.31101608 -37.95932770]
[-4.26553917 -26.81982994]
[5.77993774 -15.68033314]
[15.82541466 -4.54083633]
[25.87089157 6.59866047]
[35.91636658 17.73815727]
[45.96184540 28.87765503]
[56.00732040 40.01715088]
[66.05279541 51.15665054]
[76.09827423 62.29614639]
[86.14375305 73.43564606]
[96.18923187 84.57514191]
[109.23655701 91.97562408]
[123.95251465 94.88088989]
[138.66847229 97.78616333]
[147.78413391 96.37346649]
[153.68681335 100.93044281]
[168.33229065 104.17237854]
[182.97776794 107.41430664]
[188.35231018 98.58792877]
[195.82432556 91.47416687]
[204.87376404 86.55580139]
[214.87402344 84.16323853]
[225.13528442 84.45234680]
[234.95210266 87.39431763]
[243.65190125 92.77829742]
[250.64108276 100.22640991]
[255.44546509 109.22033691]
[257.74252319 119.13732910]
[257.38296509 129.29336548]
[271.44540405 134.51333618]
[285.50781250 139.73332214]
[298.40588379 131.31037903]
[313.61273193 132.08822632]
[325.30734253 141.55921936]
[329.13674927 155.92842102]
[343.19918823 161.14840698]
[357.26159668 166.36837769]
[371.32403564 171.58836365]
[385.38644409 176.80834961]
[399.44888306 182.02833557]
[413.51129150 187.24830627]
[427.57373047 192.46829224]
[441.63613892 197.68827820]
[451.36230469 190.67138672]
[463.15277100 189.27661133]
[474.02484131 193.73902893]
[481.28521729 202.82672119]
[483.19692993 214.17825317]
[497.00524902 220.03746033]
[511.56219482 213.88359070]
[526.17535400 219.90280151]
[532.17498779 234.52400208]
[526.00164795 249.07272339]
[511.31781006 254.91743469]
[496.83517456 248.59059143]
[491.14602661 233.84577942]
[477.33770752 227.98657227]
[460.89254761 235.88154602]
[443.57092285 229.21821594]
[436.41616821 211.75070190]
[422.35375977 206.53071594]
[408.29132080 201.31074524]
[394.22888184 196.09075928]
[380.16647339 190.87077332]
[366.10403442 185.65078735]
[352.04162598 180.43080139]
[337.97918701 175.21083069]
[323.91677856 169.99084473]
[311.63906860 178.38105774]
[296.59716797 177.92745972]
[284.56597900 168.59451294]
[280.28784180 153.79574585]
[266.22540283 148.57575989]
[252.16297913 143.35578918]
[237.68673706 157.26927185]
[218.12100220 162.09892273]
[198.69003296 156.47843933]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 77]
[2 76]
[3 75]
[4 73]
[5 72]
[6 71]
[8 23]
[9 22]
[10 21]
[11 20]
[35 70]
[36 69]
[37 68]
[38 67]
[39 66]
[40 65]
[41 64]
[42 63]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
[88 133]
[89 132]
[90 131]
[94 127]
[95 126]
[96 125]
[97 124]
[98 123]
[99 122]
[100 121]
[101 120]
[102 119]
[107 116]
[108 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
