%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 22:46:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGUCCCGCCCCACUGGUGGCUCCCCUCCUUCCACGCCUGAAUUUGGCUUCAGGCUUCCUGUGGGCCUAGGCCCUCUGGUGGCGGGGGCAAAUUUGGCACCUGCCCCCACUUGGGACUUUGGUCUUGCUGAAAAUAAAUAUUUUUCUUUUUCAAAGAC\
) } def
/len { sequence length } bind def

/coor [
[138.75923157 227.81642151]
[131.46656799 212.76719666]
[134.59230042 196.16999817]
[124.14403534 185.40739441]
[113.69577026 174.64479065]
[103.24750519 163.88217163]
[92.79924011 153.11956787]
[77.87237549 154.59904480]
[69.74011230 167.20326233]
[61.60784912 179.80747986]
[53.60049820 192.49140930]
[45.71884155 205.25384521]
[42.54066849 221.90724182]
[25.65829086 223.46337891]
[19.48944855 207.67155457]
[32.95641708 197.37219238]
[40.83806992 184.60975647]
[41.68145752 177.22695923]
[49.00363159 171.67521667]
[57.13589859 159.07099915]
[65.26816559 146.46678162]
[62.44945526 139.51660156]
[49.26993942 146.67903137]
[36.09042358 153.84146118]
[22.91090393 161.00387573]
[14.41284752 173.36442566]
[-0.11894264 177.08290100]
[-13.50955677 170.32334900]
[-19.14752769 156.42323303]
[-14.24916935 142.24557495]
[-1.23299265 134.79043579]
[13.47586250 137.73960876]
[27.92125511 133.69848633]
[42.36664963 129.65737915]
[56.81204224 125.61626434]
[53.99333572 118.66609192]
[39.37889862 115.28701019]
[24.76445770 111.90793610]
[10.15001869 108.52885437]
[-4.46442032 105.14977264]
[-19.07885933 101.77069855]
[-33.69329834 98.39161682]
[-46.96442032 106.97373962]
[-62.39925766 103.57647705]
[-70.84059143 90.21535492]
[-67.28032684 74.81730652]
[-53.83071136 66.51770782]
[-38.47115707 70.24056244]
[-30.31422043 83.77717590]
[-15.69978046 87.15625763]
[-1.08534157 90.53533936]
[13.52909756 93.91441345]
[28.14353561 97.29349518]
[42.75797653 100.67256927]
[57.37241364 104.05165100]
[62.34493256 91.08090210]
[70.70529175 81.63710022]
[80.76863098 76.38970184]
[74.45175171 62.78466797]
[61.62239838 53.52625275]
[63.28037262 38.72421265]
[50.45101929 29.46579552]
[52.10898972 14.66375542]
[45.79210663 1.05871892]
[39.47522736 -12.54631710]
[33.15834427 -26.15135384]
[19.43667984 -35.13177109]
[20.62314796 -51.48794174]
[35.49721527 -58.39403915]
[48.75771332 -48.74566269]
[46.76338196 -32.46823502]
[53.08026505 -18.86319923]
[59.39714432 -5.25816250]
[65.71402740 8.34687424]
[78.09155273 16.63216591]
[76.88540649 32.40732956]
[89.26293182 40.69262314]
[88.05678558 56.46778488]
[94.37367249 70.07282257]
[103.30269623 69.72817230]
[111.94733429 71.99012756]
[121.04933929 60.06731415]
[123.27325439 44.40319061]
[137.14619446 38.98185730]
[146.24819946 27.05904198]
[155.35020447 15.13622475]
[164.45219421 3.21340775]
[173.55419922 -8.70940876]
[182.65620422 -20.63222504]
[191.75820923 -32.55504227]
[185.24435425 -46.40524673]
[185.92471313 -61.69562912]
[193.64294434 -74.91255951]
[206.62547302 -83.01889801]
[221.88899231 -84.15185547]
[235.92605591 -78.05109406]
[245.51106262 -66.11852264]
[248.44143677 -51.09615707]
[244.04380798 -36.43602753]
[233.32870483 -25.50692368]
[218.75839233 -20.82027626]
[203.68103027 -23.45303917]
[194.57902527 -11.53022289]
[185.47702026 0.39259335]
[176.37501526 12.31540966]
[167.27301025 24.23822594]
[158.17102051 36.16104507]
[149.06901550 48.08385849]
[147.49612427 62.89518356]
[132.97215271 69.16931915]
[123.87015533 81.09213257]
[133.61672974 114.56302643]
[103.56185150 142.67131042]
[114.01011658 153.43391418]
[124.45838165 164.19651794]
[134.90664673 174.95913696]
[145.35490417 185.72174072]
[158.84666443 182.75639343]
[171.93394470 186.82580566]
[181.21720886 196.76049805]
[184.34078979 209.88237000]
[180.59008789 222.72602844]
[190.82366943 233.69296265]
[201.05726624 244.65989685]
[211.29084778 255.62683105]
[221.52442932 266.59378052]
[227.80648804 268.91625977]
[231.39683533 273.40777588]
[231.93508911 278.20199585]
[241.72741699 289.56466675]
[251.51974487 300.92733765]
[261.31207275 312.29000854]
[271.10440063 323.65267944]
[280.89672852 335.01535034]
[296.41744995 336.33660889]
[306.18640137 347.99948120]
[304.83111572 362.78793335]
[314.62344360 374.15060425]
[330.45166016 376.76736450]
[338.14840698 390.84356689]
[331.80941772 405.58117676]
[316.29742432 409.67471313]
[303.51187134 399.98403931]
[303.26077271 383.94293213]
[293.46844482 372.58026123]
[278.64196777 371.73721313]
[268.54928589 360.35336304]
[269.53405762 344.80767822]
[259.74172974 333.44500732]
[249.94940186 322.08233643]
[240.15707397 310.71966553]
[230.36474609 299.35699463]
[220.57241821 287.99432373]
[210.55749512 276.82736206]
[200.32391357 265.86041260]
[190.09031677 254.89347839]
[179.85673523 243.92654419]
[169.62315369 232.95960999]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 117]
[4 116]
[5 115]
[6 114]
[7 113]
[8 21]
[9 20]
[10 19]
[11 17]
[12 16]
[36 55]
[37 54]
[38 53]
[39 52]
[40 51]
[41 50]
[42 49]
[58 79]
[59 78]
[61 76]
[63 74]
[64 73]
[65 72]
[66 71]
[81 111]
[82 110]
[84 108]
[85 107]
[86 106]
[87 105]
[88 104]
[89 103]
[90 102]
[122 158]
[123 157]
[124 156]
[125 155]
[126 154]
[129 153]
[130 152]
[131 151]
[132 150]
[133 149]
[134 148]
[137 145]
[138 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
