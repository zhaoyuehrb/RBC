%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:38:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCAGGCAUGAGACUAACCUUCCUCUGGGCCUGACCAUCUCUGGGACAGAGGCAAGAAUCCCCAAGGGGUGGGCAGUCGGGGUUGCAGGACUGUAAUAAAUGGAUCUCUGGUGUAAAUAUGA\
) } def
/len { sequence length } bind def

/coor [
[92.95147705 355.76483154]
[89.85779572 340.85345459]
[93.10291290 325.97430420]
[102.12460327 313.70529175]
[115.35980988 306.17205811]
[106.37461090 294.29287720]
[112.67607117 279.78073120]
[111.15854645 264.85769653]
[99.48864746 255.67350769]
[97.73708344 240.56103516]
[107.44941711 228.38285828]
[105.93189240 213.45980835]
[104.41436768 198.53677368]
[102.89684296 183.61373901]
[101.19040680 168.71112061]
[99.29532623 153.83129883]
[97.40024567 138.95149231]
[76.99251556 131.53781128]
[63.70208359 114.36798859]
[61.64031219 92.75347137]
[47.71051407 87.18922424]
[33.78071976 81.62498474]
[19.78155899 76.23764038]
[5.71527719 71.02806091]
[-8.35100460 65.81848145]
[-22.41728783 60.60890198]
[-36.48357010 55.39932251]
[-50.54985046 50.18974304]
[-64.77369690 56.53954315]
[-78.96469879 51.05590820]
[-84.93060303 37.45651245]
[-98.99687958 32.24693298]
[-114.62522888 34.70973206]
[-123.87304688 23.03381348]
[-137.93933105 17.82423592]
[-153.05886841 23.18884277]
[-166.60330200 14.59069538]
[-168.18247986 -1.37444592]
[-156.58500671 -12.45949078]
[-140.70747375 -10.16094017]
[-132.72975159 3.75795293]
[-118.66346741 8.96753216]
[-104.04123688 6.13211012]
[-93.78730011 18.18065262]
[-79.72102356 23.39023209]
[-66.33606720 16.95760536]
[-51.99664688 22.04047966]
[-45.34027100 36.12346268]
[-31.27399063 41.33304214]
[-17.20770836 46.54262161]
[-3.14142609 51.75220108]
[10.92485619 56.96177673]
[24.99113846 62.17135620]
[32.44115067 61.53673172]
[39.34496307 67.69519043]
[53.27476120 73.25942993]
[67.20455170 78.82367706]
[80.62384796 66.10984039]
[98.38782501 60.99514389]
[100.65924072 46.16811752]
[102.93066406 31.34109306]
[105.20207977 16.51406860]
[107.47349548 1.68704379]
[103.89536285 -14.88502026]
[118.82926178 -22.91092110]
[130.67561340 -10.78243637]
[122.30052185 3.95846033]
[120.02910614 18.78548622]
[117.75768280 33.61251068]
[115.48626709 48.43953323]
[113.21485138 63.26655960]
[120.26524353 66.63388062]
[126.50385284 71.33776855]
[131.68078613 77.18979645]
[145.31088257 70.92715454]
[158.94097900 64.66452026]
[172.57106018 58.40188980]
[186.20115662 52.13925171]
[199.83125305 45.87661743]
[205.39904785 31.32885551]
[219.31111145 25.17181778]
[233.14585876 30.56951141]
[242.18087769 16.88372803]
[258.53219604 18.13534164]
[265.37896729 33.03680038]
[255.67785645 46.25876236]
[239.40849304 44.19960403]
[234.49246216 58.21274567]
[220.75881958 64.75811768]
[206.09388733 59.50671005]
[192.46379089 65.76934814]
[178.83369446 72.03198242]
[165.20361328 78.29461670]
[151.57351685 84.55725098]
[137.94342041 90.81988525]
[139.02616882 99.03258514]
[138.35166931 107.28885651]
[135.95028687 115.21691895]
[131.93016052 122.45980835]
[126.47229767 128.69139099]
[119.82244873 133.63105774]
[112.28005219 137.05642700]
[114.17513275 151.93623352]
[116.07021332 166.81604004]
[120.30161285 175.04309082]
[117.81988525 182.09620667]
[119.33740997 197.01924133]
[120.85493469 211.94229126]
[122.37245941 226.86532593]
[134.33743286 236.83914185]
[135.66383362 251.99485779]
[126.08158875 263.34014893]
[127.59911346 278.26321411]
[136.69285583 291.20980835]
[130.28285217 304.65454102]
[144.76354980 309.36932373]
[156.07029724 319.57113647]
[162.24414062 333.49249268]
[162.21542358 348.72137451]
[155.98912048 362.61932373]
[144.64396667 372.77841187]
[130.14558411 377.43856812]
[115.00590515 375.79232788]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 115]
[7 113]
[8 112]
[11 109]
[12 108]
[13 107]
[14 106]
[15 104]
[16 103]
[17 102]
[20 57]
[21 56]
[22 55]
[23 53]
[24 52]
[25 51]
[26 50]
[27 49]
[28 48]
[31 45]
[32 44]
[34 42]
[35 41]
[59 71]
[60 70]
[61 69]
[62 68]
[63 67]
[74 95]
[75 94]
[76 93]
[77 92]
[78 91]
[79 90]
[82 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
