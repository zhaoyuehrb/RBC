%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 01:25:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGAUCCUUGACUCCUCUUCAUCUUAGCCCCCCUAGCAGCAUUCCAUCCCAGCCAGAGCACCCCCACCAUCAGGCCAGUCAACUGCACAAUACACAACUGUAUUUCCCAAUACACUUGAGCAGUUGCCUGUGAAUGUAAGAGGUGUCAACAAACUGGGAAAUAAAAUAAAAAAAAAUAAUAAUAAAUGUGU\
) } def
/len { sequence length } bind def

/coor [
[179.90979004 443.69357300]
[185.00788879 429.55297852]
[192.25540161 416.38409424]
[201.47386169 404.51113892]
[212.43623352 394.22656250]
[224.87258911 385.78359985]
[218.49032593 372.20910645]
[212.10804749 358.63461304]
[205.72578430 345.06015015]
[198.58091736 331.87109375]
[190.69665527 319.11029053]
[182.81237793 306.34945679]
[174.92811584 293.58865356]
[161.65614319 286.82815552]
[160.98481750 271.02120972]
[153.10055542 258.26040649]
[145.21627808 245.49958801]
[137.33201599 232.73876953]
[129.44775391 219.97796631]
[121.56347656 207.21714783]
[128.41571045 220.56056213]
[125.66629028 235.30642700]
[114.46578979 245.28384399]
[99.50143433 246.31741333]
[87.03558350 237.97460938]
[82.28497314 223.74676514]
[87.23767090 209.58798218]
[99.82226562 201.42320251]
[86.63322449 208.56806946]
[83.67851257 223.92396545]
[71.51194763 233.74784851]
[55.87821198 233.40118408]
[44.15906906 223.04765320]
[41.88794327 207.57586670]
[50.13719177 194.29115295]
[65.01177216 189.46612549]
[79.48835754 195.37901306]
[92.67740631 188.23416138]
[103.97801971 186.59716797]
[113.94446564 189.13618469]
[110.31826782 174.58108521]
[106.69207001 160.02600098]
[103.06587219 145.47090149]
[99.43968201 130.91581726]
[95.81348419 116.36071777]
[92.93682861 131.08229065]
[81.65058899 140.96261597]
[66.67787170 141.86692810]
[54.28451920 133.41679382]
[49.65694427 119.14845276]
[54.73171616 105.03297424]
[67.38512421 96.97746277]
[82.32307434 98.35353088]
[69.37358093 90.78315735]
[56.42407990 83.21278381]
[40.60544586 82.92755890]
[33.52294540 69.82460785]
[20.57345009 62.25423050]
[7.94486713 70.82637787]
[-7.15366650 73.06178284]
[-21.72432709 68.51660156]
[-32.87409592 58.09329605]
[-38.38918304 43.86140823]
[-37.17456055 28.64669609]
[-29.47139359 15.47005177]
[-16.80915260 6.94770527]
[-1.70193231 4.77177620]
[12.85071564 9.37429619]
[23.95935249 19.84143257]
[29.41835213 34.09492493]
[28.14382362 49.30473709]
[41.09331894 56.87511063]
[55.98572159 56.61884689]
[63.99445343 70.26329041]
[76.94395447 77.83366394]
[89.89344788 85.40403748]
[103.71633911 79.57929993]
[107.34253693 65.02420807]
[110.96873474 50.46911621]
[106.79706573 35.20779800]
[117.38164520 24.72848892]
[121.00784302 10.17339706]
[124.63404083 -4.38169479]
[128.26023865 -18.93678665]
[131.88642883 -33.49187851]
[135.51263428 -48.04697037]
[139.13882446 -62.60206223]
[134.47834778 -66.92427826]
[131.23672485 -72.34475708]
[129.65437317 -78.41741943]
[129.83619690 -84.64981079]
[131.74501038 -90.54302979]
[135.20628357 -95.63168335]
[139.92387390 -99.52060699]
[145.50520325 -101.91552734]
[151.49398804 -102.64527130]
[156.75154114 -116.69368744]
[162.00909424 -130.74211121]
[159.59965515 -146.37876892]
[171.30706787 -155.58668518]
[176.56462097 -169.63510132]
[181.82218933 -183.68351746]
[187.07974243 -197.73194885]
[192.33729553 -211.78036499]
[197.59484863 -225.82878113]
[194.36111450 -241.90594482]
[206.84463501 -252.54049683]
[222.20344543 -246.79252625]
[224.63771057 -230.57505798]
[211.64328003 -220.57122803]
[206.38571167 -206.52281189]
[201.12815857 -192.47438049]
[195.87060547 -178.42596436]
[190.61305237 -164.37754822]
[185.35548401 -150.32913208]
[188.14099121 -135.69731140]
[176.05751038 -125.48455048]
[170.79995728 -111.43613434]
[165.54240417 -97.38771057]
[172.38197327 -74.68697357]
[153.69392395 -58.97586823]
[150.06771851 -44.42077637]
[146.44152832 -29.86568260]
[142.81532288 -15.31059074]
[139.18913269 -0.75549901]
[135.56294250 13.79959297]
[131.93673706 28.35468483]
[136.36778259 42.57492447]
[125.52382660 54.09531021]
[121.89762878 68.65040588]
[118.27143097 83.20549774]
[120.56604004 101.48483276]
[110.36857605 112.73451996]
[113.99477386 127.28961182]
[117.62096405 141.84471130]
[121.24716187 156.39979553]
[124.87335968 170.95489502]
[128.49955750 185.50997925]
[134.32429504 199.33288574]
[142.20855713 212.09368896]
[150.09281921 224.85450745]
[157.97709656 237.61531067]
[165.86135864 250.37612915]
[173.74563599 263.13693237]
[187.58152771 270.81018066]
[187.68891907 285.70437622]
[195.57319641 298.46520996]
[203.45745850 311.22601318]
[211.34173584 323.98681641]
[214.81513977 309.39453125]
[226.77326965 300.33895874]
[241.76077271 300.95135498]
[252.94026184 310.95227051]
[255.21162415 325.77932739]
[247.53865051 338.66827393]
[233.42178345 343.73916626]
[219.30026245 338.67785645]
[225.68252563 352.25234985]
[232.06480408 365.82684326]
[238.44706726 379.40133667]
[252.88244629 375.21011353]
[267.79577637 373.32879639]
[282.81979370 373.80371094]
[297.58450317 376.62319946]
[311.72634888 381.71780396]
[324.89703369 388.96206665]
[336.77224731 398.17758179]
[347.05957031 409.13742065]
[355.50561523 421.57165527]
[361.90240479 435.17413330]
[366.09243774 449.60986328]
[367.97250366 464.52334595]
[367.49633789 479.54733276]
[364.67562866 494.31179810]
[359.57986450 508.45321655]
[352.33453369 521.62335205]
[343.11804199 533.49780273]
[332.15734863 543.78417969]
[319.72241211 552.22918701]
[306.11938477 558.62487793]
[291.68331909 562.81372070]
[276.76968384 564.69256592]
[261.74575806 564.21514893]
[246.98150635 561.39324951]
[232.84049988 556.29632568]
[219.67100525 549.04986572]
[207.79730225 539.83239746]
[197.51182556 528.87084961]
[189.06782532 516.43524170]
[182.67326355 502.83166504]
[178.48561096 488.39526367]
[176.60800171 473.48147583]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 160]
[7 159]
[8 158]
[9 157]
[10 149]
[11 148]
[12 147]
[13 146]
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[28 38]
[29 37]
[40 138]
[41 137]
[42 136]
[43 135]
[44 134]
[45 133]
[53 76]
[54 75]
[55 74]
[57 72]
[58 71]
[77 131]
[78 130]
[79 129]
[81 127]
[82 126]
[83 125]
[84 124]
[85 123]
[86 122]
[87 121]
[96 119]
[97 118]
[98 117]
[100 115]
[101 114]
[102 113]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
