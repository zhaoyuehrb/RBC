%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 21:24:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCUCUAAUGCACAGAAAUAAUGUUAAAUAGAAUAACUGUGGAAAUAUAUUUUAUUUUCUCAUAGAUUUUACAA\
) } def
/len { sequence length } bind def

/coor [
[76.41148376 138.86770630]
[68.66548920 132.94335938]
[62.36104965 125.50344849]
[57.78820038 116.89024353]
[55.15731430 107.50000000]
[40.15731430 107.50000000]
[25.15731430 107.50000000]
[10.15731430 107.50000000]
[2.42089725 120.69451141]
[-10.79391098 128.19555664]
[-25.88867950 128.07571411]
[-38.81029892 120.46732330]
[-46.13929367 107.50000000]
[-61.13929367 107.50000000]
[-76.13928986 107.50000000]
[-86.05166626 119.59458160]
[-101.42871094 122.43720245]
[-115.00985718 114.68566132]
[-120.38250732 100.00000000]
[-115.00985718 85.31433868]
[-101.42871094 77.56279755]
[-86.05166626 80.40541840]
[-76.13928986 92.50000000]
[-61.13929367 92.50000000]
[-46.13929367 92.50000000]
[-38.81029892 79.53267670]
[-25.88867950 71.92427826]
[-10.79391098 71.80444336]
[2.42089725 79.30548859]
[10.15731430 92.50000000]
[25.15731430 92.50000000]
[40.15731430 92.50000000]
[55.15731430 92.50000000]
[63.67055130 72.66343689]
[80.37309265 58.98901749]
[101.49987793 54.55919266]
[122.28856659 60.37253189]
[138.05302429 75.11859894]
[151.78962708 69.09317017]
[165.52621460 63.06773376]
[179.26281738 57.04230499]
[192.99942017 51.01687241]
[206.60855103 44.70883560]
[220.08442688 38.12088776]
[233.56028748 31.53293800]
[247.03614807 24.94498825]
[248.01339722 9.61721802]
[256.53695679 -3.15949917]
[270.31402588 -9.94828987]
[285.63867188 -8.92300415]
[298.38861084 -0.35943753]
[305.13418579 13.43885231]
[304.06085205 28.76019669]
[295.45736694 41.48322678]
[281.63800049 48.18551636]
[266.32009888 47.06418228]
[253.62409973 38.42085266]
[240.14823914 45.00880432]
[226.67237854 51.59675217]
[213.19650269 58.18470001]
[208.43521118 64.12207031]
[199.02485657 64.75347137]
[185.28825378 70.77890778]
[171.55165100 76.80433655]
[157.81504822 82.82976532]
[144.07844543 88.85520172]
[145.44117737 98.51134491]
[144.71336365 108.23598480]
[141.92851257 117.58171844]
[137.21470642 126.11860657]
[130.78884888 133.45390320]
[122.94653320 139.25013733]
[114.04856110 143.24066162]
[104.50428009 145.24188232]
[94.75277710 145.16174316]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 33]
[6 32]
[7 31]
[8 30]
[13 25]
[14 24]
[15 23]
[38 66]
[39 65]
[40 64]
[41 63]
[42 62]
[43 60]
[44 59]
[45 58]
[46 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
