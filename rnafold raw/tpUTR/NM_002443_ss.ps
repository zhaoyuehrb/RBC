%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 09:10:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUGCUUCUAGUAGGCACAGGGCUCCCAGGCCAGGCCUCAUUCUCCUCUGGCCUCUAAUAGUCAAUGAUUGUGUAGCCAUGCCUAUCAGUAAAAAGAUUUUUGAGCAAACACUUGAAU\
) } def
/len { sequence length } bind def

/coor [
[220.77600098 400.72195435]
[228.71836853 387.76095581]
[241.01907349 378.83004761]
[237.48851013 364.25143433]
[233.95796204 349.67285156]
[230.42741394 335.09426880]
[226.89685059 320.51568604]
[220.92874146 306.75408936]
[212.69836426 294.21371460]
[199.24642944 287.81878662]
[198.14295959 272.03613281]
[189.91259766 259.49575806]
[181.68222046 246.95538330]
[173.45184326 234.41500854]
[165.22146606 221.87463379]
[156.99108887 209.33425903]
[148.76071167 196.79389954]
[138.45941162 195.58711243]
[130.39897156 188.71408081]
[127.45887756 178.30737305]
[130.86761475 167.81181335]
[123.31053925 154.85456848]
[115.75345612 141.89730835]
[108.19636536 128.94004822]
[91.94227600 128.97895813]
[78.04123688 120.55529022]
[70.55271149 106.12895966]
[71.66352081 89.91282654]
[59.23287964 81.51763916]
[46.80224228 73.12245178]
[34.37160110 64.72726440]
[21.94095993 56.33207321]
[9.51031876 47.93688583]
[-2.92032170 39.54169846]
[-15.35096264 31.14651108]
[-28.80006790 38.45268250]
[-44.10416794 38.66027069]
[-57.74649429 31.72157288]
[-66.59214020 19.23105049]
[-68.60843658 4.05893326]
[-63.33205795 -10.30833530]
[-51.97547531 -20.56926346]
[-37.14834976 -24.36596489]
[-22.25784683 -20.82598495]
[-10.72569180 -10.76278496]
[-5.20189142 3.51118445]
[-6.95577478 18.71586990]
[5.47486591 27.11105919]
[17.90550613 35.50624466]
[30.33614731 43.90143204]
[42.76678848 52.29661942]
[55.19742966 60.69181061]
[67.62806702 69.08699799]
[80.05870819 77.48218536]
[84.69084930 74.10913086]
[89.87859344 71.67572784]
[95.43367004 70.27028656]
[101.15447235 69.94381714]
[105.44949341 55.57186890]
[109.74451447 41.19992447]
[114.03954315 26.82798195]
[118.33456421 12.45603752]
[122.62958527 -1.91590667]
[121.37170410 -18.82312584]
[137.26997375 -24.71223259]
[147.33000183 -11.06554794]
[137.00152588 2.37911606]
[132.70651245 16.75106049]
[128.41148376 31.12300491]
[124.11646271 45.49494934]
[119.82144165 59.86689377]
[115.52641296 74.23883820]
[127.43966675 87.68043518]
[129.56843567 105.51497650]
[121.15362549 121.38296509]
[128.71070862 134.34022522]
[136.26779175 147.29748535]
[143.82487488 160.25473022]
[161.74298096 169.30668640]
[161.30107117 188.56352234]
[169.53144836 201.10388184]
[177.76182556 213.64425659]
[185.99220276 226.18463135]
[194.22257996 238.72500610]
[202.45295715 251.26536560]
[210.68333435 263.80575562]
[224.72395325 271.09762573]
[225.23872375 285.98333740]
[233.46910095 298.52371216]
[234.54275513 283.56219482]
[241.48260498 270.26412964]
[253.14192200 260.82693481]
[267.59405518 256.81005859]
[282.45092773 258.87719727]
[295.25756836 266.68685913]
[303.89773560 278.94848633]
[306.94372559 293.63595581]
[303.89221191 308.32226562]
[295.24743652 320.58065796]
[282.43786621 328.38546753]
[267.58020020 330.44705200]
[253.12957764 326.42471313]
[241.47544861 316.98513794]
[245.00599670 331.56372070]
[248.53654480 346.14230347]
[252.06709290 360.72088623]
[255.59765625 375.29946899]
[270.62149048 377.61312866]
[283.61370850 385.50427246]
[292.59310913 397.76965332]
[296.19039917 412.53878784]
[293.85699463 427.55957031]
[285.94873047 440.54141235]
[273.67156982 449.50466919]
[258.89770508 453.08251953]
[243.88000488 450.72933960]
[230.90859985 442.80401611]
[221.96148682 430.51510620]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 107]
[4 106]
[5 105]
[6 104]
[7 103]
[8 89]
[9 88]
[11 86]
[12 85]
[13 84]
[14 83]
[15 82]
[16 81]
[17 80]
[21 78]
[22 77]
[23 76]
[24 75]
[28 54]
[29 53]
[30 52]
[31 51]
[32 50]
[33 49]
[34 48]
[35 47]
[58 72]
[59 71]
[60 70]
[61 69]
[62 68]
[63 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
