%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 19:06:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAGAAACAAAUCUCAAAGUGUACAAAUUUAUUGAUGUUGUGAAAUCAAUGUGUACAAGUGGACUUGUUACCUUAAAGUAUAAAUAAACACACUAUGGCAUGAAUGAAUCCAGAUCAUA\
) } def
/len { sequence length } bind def

/coor [
[228.52818298 230.85202026]
[206.77754211 226.88612366]
[187.27276611 216.44305420]
[171.89224243 200.51794434]
[162.12045288 180.63433838]
[158.90463257 158.69850159]
[162.56300354 136.81665039]
[148.91851807 130.58543396]
[135.27404785 124.35420990]
[121.62956238 118.12297821]
[107.98508453 111.89175415]
[94.04962158 113.02951813]
[85.78369141 101.75272369]
[72.13921356 95.52149963]
[58.49473572 89.29027557]
[48.39619827 96.88973999]
[36.08598328 99.41166687]
[23.95374680 96.43004608]
[14.32743263 88.58113098]
[9.02659035 77.42884827]
[9.01861000 65.15353394]
[-4.28405380 58.22250366]
[-17.58671761 51.29147720]
[-30.88938141 44.36045074]
[-44.19204712 37.42942429]
[-57.49470901 30.49839783]
[-62.10077667 30.88639069]
[-66.14603424 29.82280540]
[-69.22656250 27.68400764]
[-71.11190796 24.94204712]
[-71.76140594 22.09605598]
[-84.27387238 13.82331562]
[-96.78633881 5.55057716]
[-109.29880524 -2.72216177]
[-121.81127167 -10.99490070]
[-134.32373047 -19.26763916]
[-146.83619690 -27.54037857]
[-161.32009888 -21.97293854]
[-176.30154419 -26.01471901]
[-186.01985168 -38.11157608]
[-186.73815918 -53.61201477]
[-178.18025208 -66.55580902]
[-163.63681030 -71.96579742]
[-148.70008850 -67.76173401]
[-139.11357117 -55.56016541]
[-138.56346130 -40.05284500]
[-126.05099487 -31.78010559]
[-113.53852844 -23.50736618]
[-101.02606964 -15.23462677]
[-88.51360321 -6.96188831]
[-76.00113678 1.31085074]
[-63.48867035 9.58358955]
[-50.56368256 17.19573212]
[-37.26102066 24.12676048]
[-23.95835495 31.05778694]
[-10.65569115 37.98881149]
[2.64697289 44.91983795]
[15.94963646 51.85086441]
[31.26094818 43.24613571]
[48.83829117 45.48379517]
[61.72992325 57.86590958]
[64.72595978 75.64579010]
[78.37043762 81.87702179]
[92.01491547 88.10824585]
[105.95037842 86.97048187]
[114.21630859 98.24727631]
[127.86078644 104.47850037]
[141.50526428 110.70972443]
[155.14974976 116.94095612]
[168.79421997 123.17218018]
[174.26249695 115.22059631]
[180.74908447 108.07826233]
[188.13569641 101.87458038]
[196.28775024 96.72183228]
[205.05680847 92.71316528]
[214.28330994 89.92089844]
[223.79940796 88.39522552]
[233.43212891 88.16330719]
[243.00640869 89.22878265]
[252.34834290 91.57171631]
[261.28833008 95.14899445]
[269.66412354 99.89508057]
[277.32382202 105.72323608]
[284.12860107 112.52710724]
[289.95520020 120.18266296]
[294.69821167 128.55044556]
[298.27194214 137.47811890]
[300.61196899 146.80326843]
[301.67636108 156.35629272]
[301.44631958 165.96356201]
[299.92663574 175.45051575]
[297.14541626 184.64485168]
[293.15380859 193.37966919]
[288.02484131 201.49649048]
[281.85217285 208.84814453]
[291.52709961 220.31095886]
[301.20202637 231.77375793]
[310.87692261 243.23655701]
[320.55184937 254.69937134]
[336.05813599 256.18020630]
[345.70660400 267.94296265]
[344.19927979 282.71670532]
[353.87417603 294.17950439]
[369.33990479 292.91818237]
[382.57580566 301.01699829]
[388.49237061 315.36181641]
[384.81460571 330.43673706]
[372.95666504 340.44515991]
[357.47817993 341.53866577]
[344.33090210 333.29672241]
[338.57028198 318.88858032]
[342.41137695 303.85443115]
[332.73645020 292.39163208]
[317.91943359 291.39608765]
[307.94439697 279.90899658]
[309.08905029 264.37429810]
[299.41412354 252.91148376]
[289.73919678 241.44868469]
[280.06430054 229.98587036]
[270.38937378 218.52307129]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 70]
[8 69]
[9 68]
[10 67]
[11 66]
[13 64]
[14 63]
[15 62]
[21 58]
[22 57]
[23 56]
[24 55]
[25 54]
[26 53]
[31 52]
[32 51]
[33 50]
[34 49]
[35 48]
[36 47]
[37 46]
[95 120]
[96 119]
[97 118]
[98 117]
[99 116]
[102 113]
[103 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
