%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 16:06:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGUUGCUAAGUGGGGCUCAAGAAGCACCGCCUUCCCCACCCCCUGCCUGCCAUUCUGACCUCUUCUCAGAGCACCUAAUUAAAGGGGCUGAAAGUCUGA\
) } def
/len { sequence length } bind def

/coor [
[81.91675568 207.82493591]
[87.96308899 191.98579407]
[87.96308899 176.98579407]
[87.96308899 161.98579407]
[85.15219879 157.92881775]
[84.98214722 152.02711487]
[88.45346832 146.06950378]
[89.37688446 131.09794617]
[90.30029297 116.12639618]
[89.48937988 112.01658630]
[89.76450348 108.19291687]
[90.98853302 104.89810181]
[76.01698303 103.97468567]
[61.04542923 103.05126953]
[46.07387924 102.12786102]
[31.10232925 101.20444489]
[16.13077927 100.28102875]
[8.62253952 113.52443695]
[-3.84035492 122.15943146]
[-18.75546074 124.51735687]
[-33.15608978 120.18343353]
[-44.20138931 110.06855774]
[-49.73676300 96.21846008]
[-61.41138077 106.87110138]
[-77.19509888 106.06501007]
[-87.72371674 94.27841187]
[-86.75079346 78.50409698]
[-74.85353851 68.10068512]
[-59.09039688 69.24033356]
[-48.81335068 81.24691010]
[-41.61791611 68.18202209]
[-29.41333389 59.50115204]
[-14.58926582 56.96974182]
[-0.07697091 61.14268875]
[11.23032093 71.24378204]
[17.05419350 85.30947876]
[32.02574539 86.23289490]
[46.99729538 87.15631104]
[61.96884155 88.07971954]
[76.94039154 89.00313568]
[91.91194153 89.92655182]
[106.20606995 85.37925720]
[117.89228058 75.97540283]
[129.57849121 66.57154846]
[141.26469421 57.16768646]
[152.95091248 47.76383209]
[150.12149048 26.81271935]
[160.07659912 8.30714989]
[178.88760376 -0.76723003]
[199.31587219 2.91460252]
[209.07514954 -8.47647095]
[218.83442688 -19.86754417]
[219.83737183 -25.35060883]
[222.65081787 -29.40201950]
[226.37464905 -31.55827904]
[230.05842590 -31.80515099]
[240.82710266 -42.24716187]
[251.59577942 -52.68917084]
[262.36447144 -63.13117981]
[273.13314819 -73.57318878]
[271.82989502 -89.15637207]
[280.89041138 -101.90160370]
[296.03659058 -105.79097748]
[310.11688232 -98.98805237]
[316.48297119 -84.70495605]
[312.12902832 -69.68573761]
[299.11080933 -61.02200317]
[283.57516479 -62.80450821]
[272.80648804 -52.36249924]
[262.03778076 -41.92049026]
[251.26911926 -31.47848129]
[240.50044250 -21.03647232]
[230.22549438 -10.10827065]
[220.46621704 1.28280330]
[210.70695496 12.67387676]
[215.33470154 21.12128258]
[217.37684631 30.55862045]
[216.65188599 40.21099091]
[213.20608521 49.28190613]
[207.31076050 57.01900101]
[199.44102478 62.77645111]
[190.23745728 66.06886292]
[180.45399475 66.61215973]
[170.89616394 64.34807587]
[162.35476685 59.45003891]
[150.66856384 68.85389709]
[138.98234558 78.25775146]
[127.29614258 87.66161346]
[115.60993195 97.06546783]
[130.60398865 96.64315033]
[141.02885437 107.42842102]
[140.09739685 122.39947510]
[128.41601562 131.80934143]
[113.58995056 129.53167725]
[105.27184296 117.04981232]
[104.34843445 132.02136230]
[103.42501831 146.99290466]
[102.96308899 161.98579407]
[102.96308899 176.98579407]
[102.96308899 191.98579407]
[109.00942993 207.82493591]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 100]
[3 99]
[4 98]
[7 97]
[8 96]
[9 95]
[12 41]
[13 40]
[14 39]
[15 38]
[16 37]
[17 36]
[23 30]
[42 89]
[43 88]
[44 87]
[45 86]
[46 85]
[50 75]
[51 74]
[52 73]
[56 72]
[57 71]
[58 70]
[59 69]
[60 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
