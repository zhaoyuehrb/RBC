%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 00:18:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUUAAGAACAAUUUAACAAAAUGGAAGUUCAAAUUGUCUUAAAAAUAAAUUAUUUAGUCCUUACACUGAG\
) } def
/len { sequence length } bind def

/coor [
[185.24415588 197.02922058]
[172.36062622 182.87248230]
[166.44953918 164.62060547]
[168.59761047 145.51211548]
[155.39743042 138.38784790]
[142.19725037 131.26358032]
[128.99707031 124.13931274]
[115.79688263 117.01504517]
[102.59670258 109.89077759]
[94.30504608 109.08534241]
[88.99155426 102.16542053]
[76.11009979 94.47985077]
[63.22863770 86.79428101]
[50.34717560 79.10871124]
[37.46571732 71.42314148]
[24.58425903 63.73756790]
[11.54041767 56.33093262]
[-1.65976536 49.20666885]
[-14.85994816 42.08240128]
[-28.31388092 49.63191986]
[-43.71224594 48.68642807]
[-56.14147568 39.54762268]
[-61.63545227 25.13166809]
[-58.44107056 10.03864193]
[-47.57764053 -0.91532689]
[-32.51164627 -4.23486614]
[-18.05058861 1.13927734]
[-8.80894279 13.49223328]
[-7.73568249 28.88221931]
[5.46450090 36.00648499]
[18.66468430 43.13075256]
[26.27825165 43.54743576]
[32.26982880 50.85610962]
[45.15129089 58.54167938]
[58.03274918 66.22724915]
[70.91420746 73.91281891]
[83.79566956 81.59839630]
[96.67712402 89.28396606]
[109.72097015 96.69059753]
[122.92115021 103.81486511]
[136.12133789 110.93913269]
[149.32151794 118.06339264]
[162.52169800 125.18766022]
[175.72187805 132.31193542]
[183.99702454 124.14961243]
[194.05557251 118.35130310]
[205.24061584 115.28800201]
[216.82357788 115.15233612]
[228.05172729 117.94644928]
[238.19703674 123.48231506]
[246.60346985 131.39436340]
[252.72935486 141.16358948]
[256.18225098 152.15167236]
[256.74417114 163.64259338]
[254.38526917 174.88934326]
[249.26533508 185.16246033]
[260.20867920 195.42124939]
[271.15206909 205.68003845]
[282.09542847 215.93882751]
[293.03878784 226.19763184]
[308.82476807 225.43716431]
[320.46853638 236.12351990]
[321.06204224 251.91665649]
[310.25320435 263.44680786]
[294.45465088 263.87332153]
[283.03945923 252.94314575]
[282.77999878 237.14099121]
[271.83663940 226.88220215]
[260.89324951 216.62341309]
[249.94990540 206.36460876]
[239.00653076 196.10581970]
[221.83094788 204.25457764]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 44]
[5 43]
[6 42]
[7 41]
[8 40]
[9 39]
[11 38]
[12 37]
[13 36]
[14 35]
[15 34]
[16 33]
[17 31]
[18 30]
[19 29]
[56 71]
[57 70]
[58 69]
[59 68]
[60 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
