%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 19:28:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCCACUCAUAUUCUGGGCUCCUGGAACCAAUCCCGUGAAAGAAUUAUUUUUGUGUUUCUAAAACUAUGGUUCCCAAUAAAAGUGACUCUCAGCGAGC\
) } def
/len { sequence length } bind def

/coor [
[70.39155579 112.57245636]
[59.86775208 123.26121521]
[49.34394836 133.94998169]
[38.82014465 144.63873291]
[28.29634285 155.32749939]
[17.77254105 166.01625061]
[13.88906479 174.48449707]
[6.75132227 176.86738586]
[9.77900505 191.99473572]
[4.12632322 206.34919739]
[-8.40297222 215.35032654]
[-23.81082916 216.12588501]
[-37.18065643 208.42840576]
[-44.24618912 194.71411133]
[-42.75284576 179.35919189]
[-33.17714310 167.26335144]
[-18.57465172 162.28631592]
[-3.60497808 166.01625061]
[7.08378124 155.49244690]
[17.60758400 144.80369568]
[28.13138580 134.11492920]
[38.65518951 123.42617035]
[49.17899323 112.73741150]
[59.70279312 102.04865265]
[76.93586731 86.95419312]
[94.04280090 88.84404755]
[94.50930023 73.85130310]
[94.97579956 58.85855865]
[95.44229126 43.86581421]
[95.90879059 28.87306976]
[96.37528992 13.88032532]
[96.84178925 -1.11241913]
[87.57552338 -6.99790716]
[81.71514893 -16.18326187]
[80.30394745 -26.90467072]
[83.53860474 -37.13774490]
[90.74511719 -44.97975540]
[100.51788330 -49.00337601]
[102.37936401 -63.88742447]
[91.22695923 -74.51427460]
[88.50226593 -89.49524689]
[95.04399109 -103.04772949]
[108.15464783 -110.06546783]
[110.01612854 -124.94951630]
[111.87760925 -139.83357239]
[113.73908997 -154.71762085]
[107.77418518 -169.37129211]
[117.03111267 -181.03999329]
[118.89259338 -195.92404175]
[120.75407410 -210.80809021]
[113.88526917 -225.69941711]
[123.56684875 -238.93569946]
[139.83921814 -236.90058899]
[145.96278381 -221.68762207]
[135.63812256 -208.94660950]
[133.77664185 -194.06256104]
[131.91516113 -179.17851257]
[138.01321411 -165.58943176]
[128.62313843 -152.85614014]
[126.76165771 -137.97209167]
[124.90017700 -123.08803558]
[123.03869629 -108.20398712]
[134.01721191 -98.17352295]
[137.01974487 -83.42738342]
[130.68948364 -69.57887268]
[117.26341248 -62.02594376]
[115.40193176 -47.14189529]
[128.49774170 -32.93017960]
[127.17788696 -13.35138130]
[111.83453369 -0.64592117]
[111.36803436 14.34682274]
[110.90153503 29.33956718]
[110.43503571 44.33230972]
[109.96853638 59.32505417]
[109.50204468 74.31780243]
[109.03554535 89.31054688]
[114.06932831 75.18039703]
[124.56612396 64.46511078]
[138.58958435 59.14133835]
[153.55279541 60.19114685]
[166.69551086 67.42088318]
[175.59329224 79.49687195]
[178.60475159 94.19146729]
[175.17437744 108.79395294]
[165.93496704 120.61061096]
[152.59092712 127.46161652]
[137.60380554 128.08317566]
[123.73828888 122.36062622]
[113.55370331 111.35223389]
[119.88122559 124.95232391]
[126.20875549 138.55241394]
[140.72595215 145.38108826]
[144.29808044 161.02139282]
[134.18490601 173.47544861]
[118.14440155 173.18955994]
[108.48146057 160.38302612]
[112.60866547 144.87994385]
[106.28114319 131.27984619]
[99.95361328 117.67976379]
[92.56310272 116.40293884]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 24]
[2 23]
[3 22]
[4 21]
[5 20]
[6 19]
[8 18]
[26 76]
[27 75]
[28 74]
[29 73]
[30 72]
[31 71]
[32 70]
[38 67]
[39 66]
[43 62]
[44 61]
[45 60]
[46 59]
[48 57]
[49 56]
[50 55]
[89 99]
[90 98]
[91 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
