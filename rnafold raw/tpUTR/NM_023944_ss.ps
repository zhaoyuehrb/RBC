%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 14:16:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUCUGACCCAUCCACCUGUUUUUUUGCAGAUUGUCAUGAAUAAAACGGUGCUGUCACCUCUGCCUGGGCCUCACUGACAGCCUGCAG\
) } def
/len { sequence length } bind def

/coor [
[80.67282867 129.99052429]
[70.65546417 120.29457092]
[65.11846924 107.50000000]
[50.11846542 107.50000000]
[35.11846542 107.50000000]
[20.12075043 107.76178741]
[5.12988758 108.28527832]
[-9.86097431 108.80876923]
[-24.85183716 109.33226013]
[-28.54909325 119.15093231]
[-35.10602570 127.30276489]
[-43.85357666 132.98590088]
[-53.90842819 135.64881897]
[-64.26219940 135.04388428]
[-73.88257599 131.25019836]
[-81.81623077 124.66384125]
[-87.28327179 115.95665741]
[-89.75392914 106.00769043]
[-104.60794830 103.92008972]
[-119.46196747 101.83249664]
[-134.31599426 99.74489594]
[-146.78543091 109.45512390]
[-162.45829773 107.42118073]
[-172.03614807 94.84976959]
[-169.83660889 79.19928741]
[-157.16464233 69.75489044]
[-141.53829956 72.11976624]
[-132.22839355 84.89087677]
[-117.37437439 86.97847748]
[-102.52035522 89.06607056]
[-87.66632843 91.15366364]
[-75.12544250 75.52746582]
[-55.67678452 70.18818665]
[-36.66811371 77.31351471]
[-25.37532997 94.34140015]
[-10.38446712 93.81790924]
[4.60639524 93.29441833]
[19.59725761 92.77092743]
[26.31779861 89.31568909]
[35.11846542 92.50000000]
[50.11846542 92.50000000]
[65.11846924 92.50000000]
[71.79164886 78.15370941]
[84.01239014 68.10379791]
[99.37731934 64.32670593]
[114.86470795 67.56526947]
[127.42874146 77.18256378]
[134.59854126 91.28722382]
[149.58940125 90.76372528]
[164.58026123 90.24023438]
[173.26443481 86.75072479]
[180.10147095 89.96931458]
[195.10147095 89.96931458]
[210.10147095 89.96931458]
[225.10147095 89.96931458]
[240.10147095 89.96931458]
[255.10147095 89.96931458]
[270.10147095 89.96931458]
[276.78018188 76.28881073]
[288.68786621 66.90296173]
[303.42953491 63.63132477]
[318.06964111 67.07051086]
[329.71667480 76.48625183]
[336.09417725 89.96931458]
[351.09417725 89.96931458]
[365.01797485 81.30561066]
[379.35342407 89.26973724]
[379.35342407 105.66888428]
[365.01797485 113.63301849]
[351.09417725 104.96931458]
[336.09417725 104.96931458]
[329.71667480 118.45237732]
[318.06964111 127.86811066]
[303.42953491 131.30729675]
[288.68786621 128.03565979]
[276.78018188 118.64981079]
[270.10147095 104.96931458]
[255.10147095 104.96931458]
[240.10147095 104.96931458]
[225.10147095 104.96931458]
[210.10147095 104.96931458]
[195.10147095 104.96931458]
[180.10147095 104.96931458]
[165.10375977 105.23110199]
[150.11289978 105.75459290]
[135.12202454 106.27808380]
[130.03492737 119.25809479]
[120.36205292 129.29776001]
[107.58026123 134.86418152]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 42]
[4 41]
[5 40]
[6 38]
[7 37]
[8 36]
[9 35]
[18 31]
[19 30]
[20 29]
[21 28]
[48 86]
[49 85]
[50 84]
[52 83]
[53 82]
[54 81]
[55 80]
[56 79]
[57 78]
[58 77]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
