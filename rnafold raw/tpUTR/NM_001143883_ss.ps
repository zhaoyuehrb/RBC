%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 00:14:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAGUUUGACUUGUGUUUUAUUUUCACCACCAGACCCAUUCCUUCUGUAGCUCAGGAGAGCACCCCUCCACCACAUUUGCUUGCAAUAUC\
) } def
/len { sequence length } bind def

/coor [
[69.34588623 114.68947601]
[54.72196960 118.02729034]
[42.98950577 128.64143372]
[28.85962296 123.93020630]
[14.23570347 127.26802063]
[-0.38821521 130.60583496]
[-15.01213360 133.94364929]
[-29.63605309 137.28146362]
[-34.15502167 150.43122864]
[-44.53646851 159.51666260]
[-57.95558929 162.20965576]
[-70.83196259 157.90229797]
[-79.78482819 147.83978271]
[-94.51524353 150.67085266]
[-109.24565125 153.50192261]
[-114.89134979 167.85913086]
[-127.41625977 176.86636353]
[-142.82373047 177.64942932]
[-156.19731140 169.95845032]
[-163.26951599 156.24760437]
[-161.78364563 140.89195251]
[-152.21383667 128.79145813]
[-137.61376953 123.80731201]
[-122.64228058 127.52996063]
[-112.07671356 138.77149963]
[-97.34630585 135.94044495]
[-82.61589050 133.10937500]
[-76.20783234 118.10359192]
[-62.01556778 109.72372437]
[-45.45307922 111.39314270]
[-32.97386551 122.65753937]
[-18.34994698 119.31972504]
[-3.72602916 115.98191071]
[10.89788914 112.64409637]
[25.52180862 109.30628204]
[36.20827103 98.93089294]
[51.38415527 103.40337372]
[66.00807190 100.06555939]
[69.31178284 82.68241882]
[81.20092773 68.73386383]
[99.03217316 62.28459167]
[118.34292603 65.61337280]
[122.92890167 51.33161163]
[127.51488495 37.04984665]
[132.10086060 22.76808167]
[136.68684387 8.48631668]
[141.27281189 -5.79544830]
[135.24851990 -20.66445541]
[143.24273682 -34.57387924]
[159.12298584 -36.85359955]
[170.70730591 -25.75480843]
[169.10919189 -9.79155064]
[155.55458069 -1.20947099]
[150.96859741 13.07229424]
[146.38262939 27.35405922]
[141.79664612 41.63582230]
[137.21066284 55.91758728]
[132.62469482 70.19935608]
[140.71449280 82.83086395]
[155.60513306 84.63891602]
[170.49575806 86.44696808]
[185.38639832 88.25502014]
[192.50930786 74.85245514]
[203.99533081 64.93099213]
[218.29110718 59.83242416]
[233.46322632 60.24628830]
[247.45979309 66.11660767]
[258.38787842 76.64948273]
[264.76956177 90.42041779]
[265.74176025 105.56700897]
[261.17297363 120.04080963]
[251.68115234 131.88435364]
[238.54992676 139.49589539]
[223.55522156 141.84603882]
[208.72492981 138.61694336]
[196.06474304 130.24533081]
[187.28683472 117.86338043]
[183.57833862 103.14565277]
[168.68771362 101.33760071]
[153.79707336 99.52954865]
[138.90644836 97.72149658]
[137.81394958 107.34281921]
[134.40765381 116.28632355]
[128.95303345 124.01211548]
[121.83725739 130.06880188]
[113.54209137 134.11978149]
[104.61148071 135.96166992]
[95.61598206 135.53388977]
[87.11632538 132.91909790]
[79.62847137 128.33454895]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[4 35]
[5 34]
[6 33]
[7 32]
[8 31]
[13 27]
[14 26]
[15 25]
[42 58]
[43 57]
[44 56]
[45 55]
[46 54]
[47 53]
[59 81]
[60 80]
[61 79]
[62 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
