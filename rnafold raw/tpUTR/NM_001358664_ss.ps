%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 06:57:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUAGGCGCAGCCUGUCCCGCAGGGCCUGGCUGGCUUAGCAAUCUGAGCCACCUUCCUUAAAGGAAAUGUUAAAAAAAAAAAAACAAAAAAACAAAAAAACAACUGUUCUUUGCCUAAUAAAGAACUGGAACAACCAUCA\
) } def
/len { sequence length } bind def

/coor [
[87.21925354 134.97814941]
[96.88908386 123.51178741]
[89.50624847 122.19126892]
[79.25741577 133.14395142]
[69.00857544 144.09664917]
[58.75973892 155.04933167]
[48.51090240 166.00201416]
[38.26206207 176.95469666]
[37.40919876 181.39724731]
[35.35549545 184.94483948]
[32.54566956 187.32356262]
[29.46802139 188.43835449]
[26.59012985 188.37121582]
[15.41339970 198.37525940]
[4.23666811 208.37928772]
[-6.94006348 218.38331604]
[-18.11679459 228.38735962]
[-25.88625717 243.45625305]
[-42.51706314 240.16191101]
[-43.95532990 223.26908875]
[-28.12082863 217.21061707]
[-16.94409561 207.20658875]
[-5.76736498 197.20256042]
[5.40936661 187.19851685]
[16.58609772 177.19448853]
[27.30937767 166.70587158]
[37.55821609 155.75317383]
[47.80705261 144.80049133]
[58.05588913 133.84780884]
[68.30472565 122.89511871]
[78.55356598 111.94243622]
[74.77806091 97.42466736]
[71.00289917 82.90818787]
[56.71668625 78.33609772]
[42.43046570 73.76401520]
[28.14424896 69.19192505]
[13.85803127 64.61984253]
[-0.42818707 60.04775620]
[-14.71440506 55.47566986]
[-29.00062370 50.90358353]
[-44.90260315 54.91096115]
[-56.12836456 42.95628738]
[-51.12981033 27.33750153]
[-35.04902267 24.12187195]
[-24.42853737 36.61736298]
[-10.14231873 41.18944931]
[4.14389944 45.76153564]
[18.43011665 50.33362198]
[32.71633530 54.90571213]
[47.00255203 59.47779846]
[61.28877258 64.04988098]
[75.57498932 68.62197113]
[80.51488495 62.97861481]
[90.39466858 51.69190598]
[95.33456421 46.04854965]
[88.91186523 32.49314880]
[82.48916626 18.93774605]
[76.06646729 5.38234472]
[69.64376068 -8.17305756]
[57.39772797 -19.89785576]
[65.27427673 -34.91106033]
[81.88120270 -31.49839973]
[83.19916534 -14.59575748]
[89.62186432 -1.04035521]
[96.04456329 12.51504707]
[102.46726227 26.07044983]
[108.88996887 39.62585068]
[109.75231934 24.65065956]
[107.73583221 9.78682041]
[107.83978271 -5.21281958]
[110.06210327 -20.04728317]
[114.35820007 -34.41890717]
[120.64186096 -48.03931808]
[128.78700256 -60.63521194]
[138.63020325 -71.95384979]
[149.97393799 -81.76811218]
[162.59057617 -89.88108063]
[176.22698975 -96.12995148]
[190.60952759 -100.38933563]
[205.44961548 -102.57378387]
[220.44947815 -102.63944244]
[235.30812073 -100.58500671]
[249.72740173 -96.45170593]
[263.41799927 -90.32245636]
[276.10519409 -82.32026672]
[287.53442383 -72.60569000]
[297.47631836 -61.37366486]
[305.73144531 -48.84956360]
[312.13409424 -35.28468704]
[316.55584717 -20.95122719]
[318.90795898 -6.13678980]
[319.14324951 8.86136532]
[317.25695801 23.74229050]
[313.28695679 38.20738983]
[307.31292725 51.96641922]
[299.45471191 64.74329376]
[289.86999512 76.28163147]
[278.75109863 86.34991455]
[266.32116699 94.74611664]
[252.82954407 101.30176544]
[238.54701233 105.88531494]
[223.76011658 108.40480042]
[208.76557922 108.80965424]
[193.86427307 107.09175873]
[179.35520935 103.28559113]
[165.52810669 97.46681213]
[150.53750610 97.99767303]
[163.94750977 104.71868134]
[177.35751343 111.43968201]
[190.76751709 118.16068268]
[204.17752075 124.88168335]
[217.58750916 131.60269165]
[230.99751282 138.32368469]
[244.40751648 145.04469299]
[260.02426147 141.37083435]
[272.54385376 151.40270996]
[272.36239624 167.44474792]
[259.61901855 177.19084167]
[244.08941650 173.16464233]
[237.68650818 158.45469666]
[224.27651978 151.73368835]
[210.86651611 145.01268005]
[197.45651245 138.29168701]
[184.04650879 131.57067871]
[170.63650513 124.84967804]
[157.22650146 118.12867737]
[143.81651306 111.40767670]
[132.86381531 121.65651703]
[138.68063354 135.48274231]
[144.49745178 149.30897522]
[158.75035095 156.67338562]
[161.73771667 172.43583679]
[151.16789246 184.50474548]
[135.14915466 183.62187195]
[125.96969604 170.46447754]
[130.67121887 155.12579346]
[124.85440063 141.29956055]
[119.03759003 127.47332764]
[111.65475464 126.15281677]
[116.75028992 140.26080322]
[107.08009338 151.72760010]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 31]
[4 30]
[5 29]
[6 28]
[7 27]
[8 26]
[13 25]
[14 24]
[15 23]
[16 22]
[17 21]
[33 52]
[34 51]
[35 50]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
[55 67]
[56 66]
[57 65]
[58 64]
[59 63]
[107 127]
[108 126]
[109 125]
[110 124]
[111 123]
[112 122]
[113 121]
[114 120]
[128 138]
[129 137]
[130 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
