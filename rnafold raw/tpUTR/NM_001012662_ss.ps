%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 11:38:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCAGCCUGACAUGGACCCACUACCCUUCUCCUUUCCUUCCCAGGCCCUUUGGCUUCUGAUUUUUCUCUUUUUUAAAAACAAACAAACAAACUGUUGCAGAUUAUGAGUGAACCCCCAAAUAGGGUGUUUUCUGCCUUCAAAUAAAAGUCACCCCUGCAUGGUGAAGUCUUCCCUCUGCUUCUCUCAUA\
) } def
/len { sequence length } bind def

/coor [
[0.79801279 272.41064453]
[-6.10023642 270.95690918]
[-12.77348423 268.69036865]
[-19.12635994 265.64392090]
[-25.06813622 261.86169434]
[-30.51402092 257.39819336]
[-41.99587250 267.05050659]
[-53.47772217 276.70281982]
[-64.95957184 286.35513306]
[-76.44142914 296.00744629]
[-73.87281799 311.08557129]
[-79.16135406 325.33084106]
[-90.79286194 334.95242310]
[-105.57971191 337.44342041]
[-119.53404236 332.23361206]
[-131.01589966 341.88592529]
[-142.49774170 351.53820801]
[-136.80099487 365.55258179]
[-135.71574402 380.64157104]
[-139.34834290 395.32690430]
[-147.34289551 408.16989136]
[-158.91616821 417.91229248]
[-172.93434143 423.59967041]
[-188.02404785 424.67480469]
[-202.70695496 421.03237915]
[-215.54458618 413.02920532]
[-225.27923584 401.44940186]
[-230.95719910 387.42742920]
[-232.02223206 372.33700562]
[-228.36994934 357.65655518]
[-220.35820007 344.82427979]
[-208.77188110 335.09738159]
[-194.74610901 329.42883301]
[-179.65496826 328.37390137]
[-164.97694397 332.03601074]
[-152.15005493 340.05636597]
[-140.66821289 330.40405273]
[-129.18635559 320.75173950]
[-131.92063904 306.10971069]
[-126.92559814 291.97091675]
[-115.44831848 282.16589355]
[-100.50612640 279.40405273]
[-86.09373474 284.52560425]
[-74.61188507 274.87329102]
[-63.13003540 265.22097778]
[-51.64818192 255.56866455]
[-40.16633224 245.91635132]
[-48.94679642 222.76969910]
[-47.43475723 198.02639771]
[-35.87013626 176.06205750]
[-16.27297211 160.77218628]
[7.90935802 154.88119507]
[32.40856934 159.45712280]
[39.94415283 146.48735046]
[47.47973633 133.51757812]
[55.01531982 120.54779816]
[62.55090332 107.57802582]
[70.08648682 94.60825348]
[76.30751038 80.95912170]
[81.15342712 66.76345062]
[85.99935150 52.56777954]
[90.84526825 38.37211227]
[95.69119263 24.17644119]
[100.53711700 9.98077106]
[105.38303375 -4.21489859]
[110.22895813 -18.41056824]
[102.75167084 -22.64614487]
[95.97877502 -27.98362541]
[90.07206726 -34.30694199]
[85.17437744 -41.47635269]
[81.40608978 -49.33155060]
[78.86223602 -57.69521332]
[77.61009216 -66.37702942]
[77.68743896 -75.17800903]
[79.10146332 -83.89505768]
[81.82842255 -92.32566833]
[85.81396484 -100.27259827]
[90.97418213 -107.54851532]
[97.19737244 -113.98038483]
[104.34644318 -119.41360474]
[112.26193237 -123.71569061]
[120.76554108 -126.77951813]
[129.66416931 -128.52597046]
[126.96501923 -143.28112793]
[124.26586151 -158.03628540]
[121.56670380 -172.79142761]
[107.88587189 -180.36566162]
[102.32264709 -194.98019409]
[107.50381470 -209.73449707]
[120.98297882 -217.66204834]
[136.39570618 -215.01968384]
[146.46455383 -203.05506897]
[146.43534851 -187.41751099]
[136.32185364 -175.49058533]
[139.02101135 -160.73544312]
[141.72016907 -145.98028564]
[144.41932678 -131.22512817]
[158.90287781 -127.32299042]
[168.64929199 -138.72506714]
[178.39570618 -150.12715149]
[188.14210510 -161.52923584]
[197.88851929 -172.93132019]
[183.02601624 -170.90507507]
[169.75120544 -177.88931274]
[163.00292969 -191.28559875]
[165.29180908 -206.10993958]
[175.76631165 -216.84701538]
[190.52944946 -219.50218201]
[204.08868408 -213.08758545]
[211.39939880 -199.98974609]
[209.74082947 -185.07971191]
[220.89900208 -195.10444641]
[232.05717468 -205.12918091]
[243.21534729 -215.15391541]
[248.31002808 -230.13238525]
[262.94851685 -232.88259888]
[274.10668945 -242.90733337]
[285.26486206 -252.93206787]
[287.55444336 -268.81091309]
[301.46881104 -276.79650879]
[316.33407593 -270.76296997]
[320.74688721 -255.33876038]
[311.32208252 -242.35595703]
[295.28961182 -241.77389526]
[284.13143921 -231.74916077]
[272.97326660 -221.72442627]
[268.67666626 -207.46299744]
[253.24006653 -203.99574280]
[242.08190918 -193.97100830]
[230.92373657 -183.94627380]
[219.76556396 -173.92155457]
[209.29060364 -163.18490601]
[199.54418945 -151.78282166]
[189.79779053 -140.38075256]
[180.05137634 -128.97866821]
[170.30496216 -117.57658386]
[182.87173462 -104.79547882]
[191.02127075 -88.95565033]
[194.07566833 -71.51876831]
[191.82383728 -54.07207489]
[184.53466797 -38.18388367]
[172.92686462 -25.26264191]
[158.09857178 -16.43208313]
[141.42367554 -12.43366337]
[124.42462921 -13.56464767]
[119.57870483 0.63102245]
[114.73278046 14.82669258]
[109.88686371 29.02236176]
[105.04093933 43.21803284]
[100.19502258 57.41370392]
[95.34909821 71.60937500]
[90.50318146 85.80504608]
[101.98150635 83.89263916]
[111.39445496 89.67177582]
[114.52440643 99.64677429]
[127.55571747 107.07543945]
[143.34660339 104.24215698]
[155.31170654 114.92934418]
[154.27241516 130.93869019]
[141.02600098 139.98921204]
[125.73396301 135.13810730]
[120.12705231 120.10674286]
[107.09574127 112.67807770]
[92.88013458 114.10909271]
[83.05625916 102.14383698]
[75.52067566 115.11360931]
[67.98509216 128.08338928]
[60.44950867 141.05316162]
[52.91392517 154.02293396]
[45.37834167 166.99270630]
[50.73449326 171.64752197]
[55.49494171 176.90718079]
[59.59191513 182.69602966]
[62.96717453 188.93089294]
[65.57283783 195.52229309]
[67.37208557 202.37568665]
[68.33963013 209.39280701]
[68.46212769 216.47315979]
[67.73833466 223.51536560]
[66.17910004 230.41865540]
[63.80725098 237.08432007]
[60.65721130 243.41711426]
[56.77452469 249.32658386]
[52.21519470 254.72842407]
[47.04488373 259.54562378]
[41.33794785 263.70956421]
[35.17638397 267.16110229]
[28.64864349 269.85119629]
[21.84836960 271.74185181]
[14.87304878 272.80645752]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 47]
[7 46]
[8 45]
[9 44]
[10 43]
[15 38]
[16 37]
[17 36]
[53 170]
[54 169]
[55 168]
[56 167]
[57 166]
[58 165]
[59 152]
[60 151]
[61 150]
[62 149]
[63 148]
[64 147]
[65 146]
[66 145]
[83 97]
[84 96]
[85 95]
[86 94]
[98 136]
[99 135]
[100 134]
[101 133]
[102 132]
[111 131]
[112 130]
[113 129]
[114 128]
[116 126]
[117 125]
[118 124]
[155 163]
[156 162]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
