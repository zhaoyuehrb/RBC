%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:56:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAUGAUUUUCUAAUAUUUAUCCACUAAUAAAGAAGAGUGUAAAUGCACAUAUGGAAUUAAAGAAGCAAACCUAUUUAUGUUUUAA\
) } def
/len { sequence length } bind def

/coor [
[101.45820618 168.95455933]
[86.78826141 172.08389282]
[72.33667755 168.06494141]
[61.38850403 157.81129456]
[56.43239212 143.65371704]
[58.59493256 128.81040955]
[67.38455200 116.65547943]
[80.80294800 109.95193481]
[65.84116364 108.88185120]
[50.87938309 107.81175995]
[35.91760254 106.74167633]
[20.95581818 105.67158508]
[5.99403715 104.60150146]
[-4.38350773 112.50807190]
[-16.95491791 111.16973877]
[-24.90946007 101.86878967]
[-39.82351303 100.26536560]
[-54.73756790 98.66193390]
[-69.65162659 97.05850983]
[-79.96173859 108.65511322]
[-95.12627411 111.94393921]
[-109.31417084 105.66036224]
[-117.06987762 92.22055054]
[-115.41117859 76.79238129]
[-104.97587585 65.30830383]
[-89.77655029 62.18418121]
[-75.65765381 68.62129974]
[-68.04819489 82.14445496]
[-53.13414001 83.74788666]
[-38.22008896 85.35131073]
[-23.30603218 86.95473480]
[-7.79906225 78.95027161]
[7.06412506 89.63971710]
[22.02590752 90.70980835]
[36.98768997 91.77989197]
[51.94947052 92.84998322]
[66.91125488 93.92006683]
[81.87303162 94.99015808]
[93.03214264 84.96646881]
[93.56752777 69.97602844]
[94.10291290 54.98558426]
[94.63829803 39.99514389]
[86.47708893 25.77098274]
[94.94780731 11.72894096]
[111.33650208 12.31426525]
[118.78389740 26.92482376]
[109.62873840 40.53052902]
[109.09335327 55.52096939]
[108.55796814 70.51141357]
[108.02258301 85.50185394]
[108.69541931 70.51695251]
[115.21833801 57.00949097]
[126.53590393 47.16505814]
[140.81684875 42.57654190]
[155.75044250 43.98638916]
[168.92034912 51.16647720]
[178.19558716 62.95502853]
[182.07537842 77.44458771]
[179.93193054 92.29064941]
[172.11209106 105.09104919]
[159.88114929 113.77458954]
[145.21813965 116.93623352]
[130.49562073 114.06440735]
[118.09397125 105.62192535]
[130.41528320 114.17676544]
[142.73658752 122.73160553]
[155.05790710 131.28643799]
[167.37921143 139.84127808]
[179.70053101 148.39611816]
[193.56016541 141.77751160]
[208.87101746 142.99145508]
[221.51452637 151.71138000]
[228.08966064 165.59170532]
[226.82772827 180.89866638]
[218.06820679 193.51477051]
[204.16734314 200.04637146]
[188.86441040 198.73648071]
[176.27581787 189.93745422]
[169.78784180 176.01618958]
[171.14569092 160.71743774]
[158.82437134 152.16259766]
[146.50306702 143.60775757]
[134.18176270 135.05291748]
[121.86044312 126.49807739]
[109.53913116 117.94323730]
[117.57042694 130.61203003]
[118.82289886 145.55964661]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 38]
[9 37]
[10 36]
[11 35]
[12 34]
[13 33]
[16 31]
[17 30]
[18 29]
[19 28]
[39 50]
[40 49]
[41 48]
[42 47]
[64 85]
[65 84]
[66 83]
[67 82]
[68 81]
[69 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
