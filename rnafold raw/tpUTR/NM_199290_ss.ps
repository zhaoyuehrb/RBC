%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:46:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUCUGAAAGCAACUUUUUUUGGUGUCUCAAAGGAGUAACUGCAGCUUGGUUUGAAAUUUGUACUGUUUCUAUCAUAAAUAAAGUUAUGACUUCUUGCU\
) } def
/len { sequence length } bind def

/coor [
[24.80967712 199.14007568]
[13.99529743 192.83773804]
[2.52130914 202.49938965]
[-8.95267868 212.16104126]
[-20.42666626 221.82269287]
[-25.99919128 236.63005066]
[-40.71837234 238.90930176]
[-52.19235992 248.57095337]
[-63.66634750 258.23260498]
[-75.14033508 267.89425659]
[-86.61432648 277.55593872]
[-89.41204834 293.35314941]
[-103.57540894 300.88830566]
[-118.23950195 294.38107300]
[-122.15527344 278.82324219]
[-112.31889343 266.14944458]
[-96.27597809 266.08193970]
[-84.80199432 256.42028809]
[-73.32800293 246.75862122]
[-61.85401535 237.09696960]
[-50.38002777 227.43531799]
[-45.62820053 213.31903076]
[-30.08832359 210.34870911]
[-18.61433411 200.68705750]
[-7.14034700 191.02540588]
[4.33364105 181.36373901]
[-0.71934783 164.62358093]
[1.93436050 147.28752136]
[11.82188892 132.73970032]
[27.05386925 123.83940887]
[44.68534470 122.35911560]
[61.28509903 128.63168335]
[71.80890656 117.94293213]
[82.33270264 107.25417328]
[82.32498932 92.76464844]
[92.49064636 82.43965149]
[106.97853088 82.22203064]
[117.50233459 71.53326416]
[128.02613831 60.84450912]
[138.54994202 50.15575027]
[149.07374573 39.46698761]
[159.59754944 28.77823067]
[153.24932861 14.09702682]
[152.98509216 -1.85741389]
[158.81562805 -16.66950798]
[169.83113098 -28.10778236]
[184.34309387 -34.46104813]
[200.14302063 -34.79435349]
[214.83857727 -29.08646965]
[225.02487183 -40.09734726]
[235.21116638 -51.10822296]
[245.39746094 -62.11910248]
[245.70349121 -75.12921906]
[254.56303406 -84.10324860]
[266.76229858 -84.54597473]
[277.28610229 -95.23473358]
[287.80990601 -105.92349243]
[298.33370972 -116.61225128]
[308.85751343 -127.30101013]
[307.19348145 -142.84980774]
[315.95620728 -155.80158997]
[331.00820923 -160.04092407]
[345.24234009 -153.56611633]
[351.93774414 -139.43438721]
[347.93301392 -124.31829834]
[335.11904907 -115.35520172]
[319.54626465 -116.77720642]
[309.02246094 -106.08844757]
[298.49865723 -95.39968872]
[287.97485352 -84.71092987]
[277.45104980 -74.02217102]
[274.05929565 -56.88165283]
[256.40835571 -51.93280792]
[246.22204590 -40.92193222]
[236.03575134 -29.91105270]
[225.84945679 -18.90017509]
[232.22941589 -6.29985523]
[233.89991760 7.75468922]
[230.63751221 21.55788994]
[222.81860352 33.42755127]
[211.37617493 41.90985489]
[197.68850708 45.95742035]
[183.41317749 45.05859375]
[170.28630066 39.30203247]
[159.76249695 49.99079132]
[149.23870850 60.67955017]
[138.71490479 71.36830902]
[128.19110107 82.05706787]
[117.66729736 92.74582672]
[117.67501068 107.23535156]
[107.50935364 117.56034851]
[93.02146912 117.77796936]
[82.49766541 128.46673584]
[71.97386169 139.15548706]
[77.40127563 150.65371704]
[78.96555328 163.24697876]
[76.52571106 175.67504883]
[70.34072113 186.69908142]
[61.04204559 195.22509766]
[49.56926346 200.41256714]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 26]
[3 25]
[4 24]
[5 23]
[7 21]
[8 20]
[9 19]
[10 18]
[11 17]
[32 94]
[33 93]
[34 92]
[37 89]
[38 88]
[39 87]
[40 86]
[41 85]
[42 84]
[49 76]
[50 75]
[51 74]
[52 73]
[55 71]
[56 70]
[57 69]
[58 68]
[59 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
