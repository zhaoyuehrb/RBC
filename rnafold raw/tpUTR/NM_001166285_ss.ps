%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 20:00:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCACCCCACCCAUCACAUGGCUGGCUGGCUGCUGGGUGCACUUACCCUCCUUGGCUUGGUUACUUCAUUUUACAAGGAAGGGGUAGUAAUUGGCCCACUCUCUUCUUACUGGAGGCUAUUUAAAUAAAAUGUAAGACUUCAGAUAACUUUGUAAAUUA\
) } def
/len { sequence length } bind def

/coor [
[139.12738037 123.96751404]
[125.59487152 117.49672699]
[112.06235504 111.02593231]
[97.31619263 113.77376556]
[87.02256775 124.68437195]
[76.72894287 135.59497070]
[66.54159546 146.60487366]
[56.46147537 157.71302795]
[46.59865570 169.01457214]
[36.95684052 180.50523376]
[27.31502724 191.99591064]
[24.37156296 207.54089355]
[10.26351357 212.31710815]
[0.62169975 223.80776978]
[-9.02011395 235.29844666]
[-18.66192818 246.78910828]
[-24.21136093 262.80911255]
[-41.14152145 261.91131592]
[-44.96555710 245.39425659]
[-30.15259552 237.14729309]
[-20.51078033 225.65663147]
[-10.86896706 214.16595459]
[-1.22715271 202.67529297]
[1.02666402 187.95219421]
[15.82435989 182.35409546]
[25.46617317 170.86341858]
[35.10798645 159.37275696]
[35.58368301 154.57557678]
[39.11022949 150.04019165]
[45.35331345 147.63291931]
[55.43343353 136.52474976]
[57.61029434 129.42311096]
[65.81833649 125.30134583]
[76.11196136 114.39074707]
[86.40558624 103.48014069]
[88.29135895 88.59915161]
[81.04467010 75.46577454]
[73.79798126 62.33240128]
[66.55129242 49.19902802]
[59.30460358 36.06565475]
[39.76621628 31.58399582]
[29.90482903 14.48071003]
[35.63633728 -4.09450531]
[27.63827133 -16.78430176]
[19.64020538 -29.47409821]
[4.48732948 -33.08354568]
[-3.44307661 -46.06673813]
[0.09136295 -60.49044800]
[-7.90670347 -73.18024445]
[-15.90476990 -85.87004089]
[-23.90283585 -98.55983734]
[-32.02356720 -111.17148590]
[-40.26620483 -123.70380402]
[-48.50883865 -136.23611450]
[-56.75147247 -148.76843262]
[-64.99411011 -161.30075073]
[-83.08281708 -161.57995605]
[-97.28204346 -172.53527832]
[-102.05699921 -189.65965271]
[-95.68849182 -206.08958435]
[-104.41087341 -218.29286194]
[-113.13325500 -230.49613953]
[-128.65921021 -234.53645325]
[-135.04873657 -249.25221252]
[-127.40033722 -263.35473633]
[-111.58120728 -266.02578735]
[-99.72642517 -255.21636963]
[-100.92997742 -239.21852112]
[-92.20759583 -227.01524353]
[-83.48521423 -214.81196594]
[-71.41027832 -216.51919556]
[-59.69182968 -212.89057922]
[-50.58783722 -204.56069946]
[-45.87998581 -193.07606506]
[-46.52519226 -180.60826111]
[-52.46179199 -169.54339600]
[-44.21915436 -157.01107788]
[-35.97652054 -144.47875977]
[-27.73388672 -131.94644165]
[-19.49125099 -119.41412354]
[-13.15709114 -115.53462982]
[-11.21304035 -106.55789948]
[-3.21497369 -93.86810303]
[4.78309298 -81.17830658]
[12.78115940 -68.48851013]
[27.31846619 -65.45498657]
[35.61041260 -52.69966125]
[32.33000183 -37.47216415]
[40.32806778 -24.78236771]
[48.32613373 -12.09257126]
[58.66310883 -12.60039043]
[68.34385681 -8.71736240]
[75.57622528 -1.08947945]
[78.99106598 8.93751812]
[77.90109253 19.55528641]
[72.43797302 28.81896782]
[79.68466187 41.95233917]
[86.93135071 55.08571243]
[94.17803955 68.21908569]
[101.42472839 81.35246277]
[118.53314972 97.49342346]
[132.06565857 103.96421051]
[145.59817505 110.43500519]
[158.43237305 95.70456696]
[175.07217407 85.49449158]
[193.98971558 80.73195648]
[213.45108032 81.84440613]
[231.67523193 88.72125244]
[246.99693298 100.72472382]
[258.01904297 116.74909210]
[263.73974609 135.32243347]
[263.64379883 154.74191284]
[278.09436035 158.76449585]
[292.54492188 162.78707886]
[306.99548340 166.80967712]
[321.44604492 170.83226013]
[335.89660645 174.85485840]
[343.55801392 161.85617065]
[354.32333374 151.28402710]
[367.45855713 143.85922241]
[382.06817627 140.08801270]
[397.15600586 140.22752380]
[411.69338989 144.26823425]
[424.68908691 151.93463135]
[435.25708008 162.70404053]
[442.67681885 175.84214783]
[446.44238281 190.45320129]
[446.29705811 205.54098511]
[442.25073242 220.07679749]
[434.57931519 233.06954956]
[423.80584717 243.63339233]
[410.66485596 251.04803467]
[396.05233765 254.80796814]
[380.96463013 254.65681458]
[366.43035889 250.60487366]
[353.44058228 242.92843628]
[342.88092041 232.15087891]
[335.47134399 219.00703430]
[331.71704102 204.39308167]
[331.87402344 189.30541992]
[317.42346191 185.28282166]
[302.97290039 181.26023865]
[288.52233887 177.23764038]
[274.07177734 173.21505737]
[259.62121582 169.19247437]
[254.62974548 178.96836853]
[248.04278564 187.75393677]
[240.05194092 195.29127502]
[230.88999939 201.35885620]
[220.82424927 205.77795410]
[210.14862061 208.41799927]
[199.17509460 209.20037842]
[188.22462463 208.10078430]
[177.61775208 205.14997864]
[167.66516113 200.43293762]
[158.65864563 194.08638000]
[150.86253357 186.29484558]
[144.50590515 177.28527832]
[139.77589417 167.32044983]
[136.81217957 156.69131470]
[135.70280457 145.70846558]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 103]
[2 102]
[3 101]
[4 35]
[5 34]
[6 33]
[7 31]
[8 30]
[9 27]
[10 26]
[11 25]
[13 23]
[14 22]
[15 21]
[16 20]
[36 100]
[37 99]
[38 98]
[39 97]
[40 96]
[43 90]
[44 89]
[45 88]
[48 85]
[49 84]
[50 83]
[51 82]
[52 80]
[53 79]
[54 78]
[55 77]
[56 76]
[60 70]
[61 69]
[62 68]
[112 145]
[113 144]
[114 143]
[115 142]
[116 141]
[117 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
