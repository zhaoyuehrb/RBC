%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:56:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAAGGCACGUUGAAAUGAUGCAGGCUGCUCCUAUGUUGGAAAUUUGUUCAUUAAAAUUCUCCCAAUAAAGCUU\
) } def
/len { sequence length } bind def

/coor [
[104.79732513 122.87950897]
[98.24313354 123.31092834]
[91.82764435 121.90202332]
[86.05733490 118.76401520]
[81.38776398 114.14463806]
[78.18757629 108.40858459]
[63.20038986 109.02845764]
[48.21320343 109.64833069]
[33.22601700 110.26820374]
[22.55261803 121.61352539]
[7.34464979 122.02867126]
[-3.40560460 111.78330231]
[-18.39279175 112.40317535]
[-33.37997818 113.02304840]
[-41.86167145 126.01691437]
[-56.37306213 131.51228333]
[-71.33422852 127.39608002]
[-80.99229431 115.25106812]
[-81.63353729 99.74724579]
[-73.01138306 86.84616089]
[-58.44123459 81.50852966]
[-43.52560043 85.78678894]
[-33.99985123 98.03586578]
[-19.01266479 97.41598511]
[-4.02547932 96.79611206]
[5.84200191 85.69799042]
[21.03231049 84.85585022]
[32.60614014 95.28102112]
[47.59332657 94.66114044]
[62.58051300 94.04126740]
[77.56770325 93.42139435]
[95.20267487 77.12049103]
[117.90030670 84.96453857]
[131.87417603 79.51191711]
[141.91772461 67.28744507]
[156.58689880 69.86898041]
[170.56077576 64.41635895]
[184.53463745 58.96374130]
[198.50849915 53.51111984]
[212.48236084 48.05850220]
[226.45623779 42.60588074]
[237.98368835 26.30989456]
[256.90521240 29.32466316]
[270.38110352 22.73671532]
[283.85696411 16.14876556]
[297.33282471 9.56081772]
[310.80868530 2.97286844]
[313.35641479 -12.33362293]
[324.43807983 -23.19529915]
[339.79260254 -25.43562126]
[353.51577759 -18.19314194]
[360.33084106 -4.25274086]
[357.61721802 11.02521229]
[346.41833496 21.76603317]
[331.04046631 23.83965683]
[317.39663696 16.44873238]
[303.92077637 23.03668213]
[290.44491577 29.62462997]
[276.96902466 36.21258163]
[263.49316406 42.80052948]
[260.92471313 53.05414963]
[252.86297607 60.23126984]
[241.93838501 61.65399551]
[231.90885925 56.57974625]
[217.93498230 62.03236771]
[203.96112061 67.48498535]
[189.98725891 72.93760681]
[176.01338196 78.39022827]
[162.03952026 83.84284210]
[152.99548340 95.67730713]
[137.32679749 93.48578644]
[123.35292816 98.93840027]
[122.72642517 105.47682953]
[120.30574036 111.58287811]
[116.28196716 116.77449036]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 31]
[7 30]
[8 29]
[9 28]
[12 25]
[13 24]
[14 23]
[33 72]
[34 71]
[36 69]
[37 68]
[38 67]
[39 66]
[40 65]
[41 64]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
