%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 23:33:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCUGGAACUCCUAAACCUUUGCCCCUGGGGCUUCCAUCCCAACCAGUGCCAAGGACCUCCUCUUCCCCCUUCCAAAUAAUAAAGUCUAUGGACAGGGCUGUCUCUGAAGUACUAACACAAGGACA\
) } def
/len { sequence length } bind def

/coor [
[148.59680176 180.75852966]
[139.36831665 168.93333435]
[130.13984680 157.10813904]
[120.91137695 145.28294373]
[111.68289948 133.45774841]
[102.45442963 121.63254547]
[105.62405396 136.29383850]
[102.04040527 150.85946655]
[92.43003082 162.37643433]
[78.74130249 168.50984192]
[63.74942398 168.01622009]
[50.49380875 160.99563599]
[41.66185379 148.87141418]
[39.04412079 134.10159302]
[43.17132187 119.68056488]
[53.20672226 108.53199005]
[67.11577606 102.91609955]
[82.07888031 103.97151947]
[67.52841187 100.32682037]
[52.97794342 96.68211365]
[38.42747498 93.03741455]
[23.16086578 97.18966675]
[12.69502544 86.59176636]
[-1.85544360 82.94706726]
[-13.36721230 88.91558838]
[-25.46069145 85.50653839]
[-31.74385643 75.09262085]
[-46.20049667 71.09193420]
[-60.65713882 67.09123993]
[-75.11377716 63.09054947]
[-89.66424561 59.44584656]
[-104.29978180 56.15932846]
[-115.85998535 66.51023865]
[-131.29988098 68.05588531]
[-144.68252563 60.20194244]
[-150.86201477 45.96840286]
[-147.46220398 30.82836151]
[-135.79039001 20.60346603]
[-120.33463287 19.22540283]
[-107.03797913 27.22406006]
[-101.01325989 41.52379608]
[-86.37773132 44.81031418]
[-81.85545349 42.99683762]
[-76.14077759 44.08095169]
[-71.11309052 48.63390732]
[-56.65644836 52.63459778]
[-42.19980621 56.63529205]
[-27.74316406 60.63598251]
[-11.07557106 55.29023743]
[1.78925908 68.39659882]
[16.33972740 72.04129791]
[30.56558990 67.62834930]
[42.07217789 78.48694611]
[56.62264633 82.13164520]
[71.17311859 85.77635193]
[85.72358704 89.42105103]
[74.70171356 79.24665833]
[61.43734360 72.24261475]
[51.41332245 61.08380890]
[45.86646652 47.14707947]
[45.48118591 32.15202713]
[50.30501938 17.94883537]
[59.74276733 6.28998041]
[72.62994385 -1.38599706]
[87.37645721 -4.13198757]
[102.16278076 -1.60917330]
[115.16448975 5.87116480]
[124.77735901 17.38605690]
[129.81529236 31.51472473]
[129.65667725 46.51388550]
[124.32107544 60.53285217]
[114.46507263 71.84329987]
[107.84346008 85.30265045]
[120.10723114 76.66552734]
[132.37100220 68.02840424]
[144.63478088 59.39128494]
[141.27009583 44.56740570]
[143.83932495 29.58516502]
[151.95065308 16.72924614]
[164.36718750 7.96008205]
[179.19548035 4.61490679]
[194.17433167 7.20383596]
[207.01956177 15.33207607]
[215.77238464 27.76012993]
[219.09805298 42.59281158]
[216.48942566 57.56824112]
[208.34428406 70.40277100]
[195.90473938 79.13924408]
[181.06768799 82.44538879]
[166.09570312 79.81706238]
[153.27189636 71.65505981]
[141.00811768 80.29218292]
[128.74435425 88.92930603]
[116.48058319 97.56642914]
[114.27962494 112.40407562]
[123.50809479 124.22927094]
[132.73657227 136.05447388]
[141.96504211 147.87966919]
[151.19351196 159.70486450]
[160.42199707 171.53005981]
[169.79489136 183.24111938]
[179.31079102 194.83627319]
[188.82669067 206.43142700]
[198.34259033 218.02658081]
[206.29316711 222.73966980]
[207.94551086 230.02507019]
[217.17399597 241.85026550]
[232.57359314 241.45243835]
[245.10810852 250.09762573]
[250.08963013 264.29794312]
[245.80551147 278.53817749]
[255.03398132 290.36337280]
[270.43032837 296.00994873]
[272.97146606 312.21102905]
[260.04324341 322.30029297]
[244.94514465 315.89880371]
[243.20878601 299.59182739]
[233.98031616 287.76663208]
[219.12588501 288.46228027]
[206.56155396 280.17965698]
[201.22109985 265.92016602]
[205.34878540 251.07873535]
[196.12031555 239.25354004]
[186.74742126 227.54248047]
[177.23152161 215.94732666]
[167.71562195 204.35217285]
[158.19972229 192.75701904]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 100]
[2 99]
[3 98]
[4 97]
[5 96]
[6 95]
[18 56]
[19 55]
[20 54]
[21 53]
[23 51]
[24 50]
[27 48]
[28 47]
[29 46]
[30 45]
[31 42]
[32 41]
[73 94]
[74 93]
[75 92]
[76 91]
[101 127]
[102 126]
[103 125]
[104 124]
[106 123]
[107 122]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
