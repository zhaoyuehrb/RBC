%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 22:15:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCAGCACCACCCCUGGGCAGCAGCAUCCUCCUCUCUGGCCUUGCCCCAGGCCCUGCAGCGGUGGUUGUCACACCCUGACUUCAGGGAAGGUGAAACAGGGCUUGUCCCUCCAACUGCAGGAAAACCCUUAAUAAAAUCUUCUGAUGAGUUCUA\
) } def
/len { sequence length } bind def

/coor [
[52.32184219 145.52757263]
[46.16564941 159.20606995]
[40.00946045 172.88456726]
[33.85326767 186.56306458]
[27.69707489 200.24156189]
[21.54088211 213.92005920]
[29.36183739 227.32202148]
[27.77815628 242.75805664]
[17.39880180 254.29272461]
[2.21484303 257.49069214]
[-11.93517590 251.12229919]
[-19.61028290 237.63629150]
[-17.85924530 222.21833801]
[-7.35537148 210.79693604]
[7.86238480 207.76387024]
[14.01857662 194.08537292]
[20.17476845 180.40687561]
[26.33096123 166.72837830]
[32.48715210 153.04988098]
[38.64334488 139.37138367]
[59.08283997 93.06502533]
[93.77218628 92.04977417]
[89.30963898 77.72895813]
[84.84709167 63.40814972]
[80.38454437 49.08733368]
[73.65785217 49.72522354]
[66.90885162 49.51773834]
[60.24328995 48.46929932]
[53.76547241 46.59749603]
[47.57661057 43.93279648]
[41.77325058 40.51803589]
[36.44576645 36.40774918]
[31.67694092 31.66729546]
[27.54070854 26.37180328]
[24.10097694 20.60499954]
[21.41065979 14.45787811]
[19.51085281 8.02725887]
[18.43021393 1.41427231]
[18.18452835 -5.27723694]
[3.37877464 -7.68340635]
[-11.42697906 -10.08957577]
[-28.03090096 -6.66231012]
[-35.92065048 -21.66858101]
[-23.68492889 -33.40414429]
[-9.02081013 -24.89533043]
[5.78494358 -22.48916054]
[20.59069824 -20.08299065]
[36.58947372 -44.56284714]
[63.07436752 -56.96343994]
[62.77230835 -71.96039581]
[62.47025299 -86.95735931]
[62.16819763 -101.95431519]
[61.86614227 -116.95127106]
[61.56408691 -131.94822693]
[61.26203156 -146.94519043]
[60.95997620 -161.94215393]
[60.65792084 -176.93910217]
[56.19537354 -191.25991821]
[47.92471695 -203.77375793]
[39.65406036 -216.28761292]
[31.38340378 -228.80145264]
[16.47839165 -235.64050293]
[15.21828461 -251.99116516]
[28.89937401 -261.03326416]
[43.44772720 -253.46508789]
[43.89724731 -237.07209778]
[52.16790390 -224.55825806]
[60.43856049 -212.04441833]
[68.70921326 -199.53057861]
[83.40607452 -202.53096008]
[86.10990143 -217.28526306]
[88.81372833 -232.03956604]
[91.51755524 -246.79385376]
[83.86116791 -265.40093994]
[96.89022827 -279.64309692]
[98.99776459 -294.49429321]
[101.10530853 -309.34548950]
[103.21284485 -324.19671631]
[105.32038116 -339.04791260]
[98.69894409 -354.05087280]
[108.59823608 -367.12512207]
[124.83470917 -364.82098389]
[130.70567322 -349.50878906]
[120.17158508 -336.94036865]
[118.06404877 -322.08917236]
[115.95651245 -307.23794556]
[113.84897614 -292.38674927]
[111.74143219 -277.53555298]
[118.62954712 -269.89337158]
[120.17594147 -259.49920654]
[115.62419891 -249.78372192]
[106.27185059 -244.09002686]
[103.56802368 -229.33573914]
[100.86419678 -214.58143616]
[98.16037750 -199.82713318]
[93.77201080 -187.09730530]
[85.19337463 -179.30969238]
[75.65487671 -177.24116516]
[75.95693207 -162.24420166]
[76.25898743 -147.24725342]
[76.56104279 -132.25028992]
[76.86309814 -117.25333405]
[77.16515350 -102.25637054]
[77.46720886 -87.25941467]
[77.76927185 -72.26245117]
[78.07132721 -57.26549530]
[91.41796875 -53.91707230]
[103.48059845 -47.26811981]
[113.45765686 -37.75260925]
[120.68418884 -25.99524879]
[124.67612457 -12.77047825]
[125.16271973 1.04854894]
[122.10491180 14.54761219]
[115.69835663 26.83190346]
[106.36089325 37.08534241]
[94.70536041 44.62479019]
[99.16790771 58.94560242]
[103.63044739 73.26641846]
[108.09299469 87.58722687]
[118.59226227 98.30009460]
[132.82031250 103.05010986]
[147.04835510 107.80013275]
[161.98570251 101.94733429]
[175.80221558 110.10108185]
[177.89903259 126.00652313]
[166.66767883 137.46235657]
[150.72386169 135.68064880]
[142.29833984 122.02817535]
[128.07028198 117.27816010]
[113.84223938 112.52813721]
[109.15763855 118.38513947]
[120.87164307 127.75434875]
[134.90756226 133.04518127]
[134.21298218 148.02909851]
[119.74780273 151.99877930]
[111.50244141 139.46835327]
[99.78842926 130.09915161]
[95.10382843 135.95614624]
[102.86389923 148.79287720]
[110.62396240 161.62959290]
[125.24150848 169.06326294]
[125.84221649 185.45140076]
[111.80813599 193.93530273]
[97.57631683 185.78744507]
[97.78724670 169.38966370]
[90.02717590 156.55293274]
[82.26711273 143.71621704]
[74.78079224 144.16905212]
[75.68647003 159.14169312]
[76.59214783 174.11431885]
[82.08027649 188.07427979]
[70.49947357 197.60765076]
[57.85405350 189.53959656]
[61.61951447 175.02000427]
[60.71383667 160.04736328]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[3 18]
[4 17]
[5 16]
[6 15]
[22 119]
[23 118]
[24 117]
[25 116]
[39 47]
[40 46]
[41 45]
[49 106]
[50 105]
[51 104]
[52 103]
[53 102]
[54 101]
[55 100]
[56 99]
[57 98]
[58 69]
[59 68]
[60 67]
[61 66]
[70 95]
[71 94]
[72 93]
[73 92]
[75 88]
[76 87]
[77 86]
[78 85]
[79 84]
[120 130]
[121 129]
[122 128]
[138 147]
[139 146]
[140 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
