%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 03:08:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCUGAGCCCUUGGUUUGUCAAUCCUAGGGGACAGGAGCCAGGCUACUGUCUGUACCCCCACUCCAUCCCCCAGGGGAACACCCCUGCCCAGCUACUUUCCUAAUGAAAUAAAGAGCAUUGAAGCAGA\
) } def
/len { sequence length } bind def

/coor [
[86.63911438 119.37095642]
[74.09205627 127.59114075]
[61.64524460 135.96232605]
[49.30048752 144.48330688]
[36.95573044 153.00427246]
[24.61097145 161.52525330]
[21.63740158 176.81562805]
[8.99667645 185.28125000]
[-5.56203604 182.35217285]
[-17.90679359 190.87313843]
[-30.25155258 199.39411926]
[-42.59630966 207.91508484]
[-49.55834198 222.12214661]
[-64.42797089 222.98439026]
[-76.77272797 231.50535583]
[-76.16166687 246.92062378]
[-84.00141907 260.20751953]
[-97.79034424 267.12628174]
[-113.12844849 265.46911621]
[-125.12139130 255.76486206]
[-129.94227600 241.11007690]
[-126.05278015 226.18106079]
[-114.69401550 215.74162292]
[-99.49053192 213.12292480]
[-85.29370117 219.16059875]
[-72.94893646 210.63963318]
[-66.86988831 197.04203796]
[-51.11728287 195.57032776]
[-38.77252197 187.04934692]
[-26.42776489 178.52838135]
[-14.08300686 170.00741577]
[-11.65914822 155.35610962]
[0.73880702 146.53878784]
[16.09000015 149.18049622]
[28.43475914 140.65951538]
[40.77951813 132.13854980]
[53.12427521 123.61757660]
[56.87994003 117.16346741]
[65.87187195 115.04409027]
[78.41892242 106.82390594]
[79.50544739 91.86330414]
[68.27778625 81.91646576]
[57.05012512 71.96962738]
[45.82246399 62.02278519]
[34.59480286 52.07594681]
[18.42758751 49.32763290]
[12.97855473 33.86024475]
[23.85320091 21.58530617]
[39.86462402 25.13022041]
[44.54164124 40.84828568]
[55.76930237 50.79512405]
[66.99696350 60.74196625]
[78.22462463 70.68880463]
[89.45228577 80.63564301]
[84.36785889 66.52364349]
[79.28342438 52.41164398]
[74.19899750 38.29964066]
[63.82577896 27.46467972]
[58.22556305 13.54930782]
[58.20154572 -1.45067334]
[63.75717545 -15.38390636]
[74.09564209 -26.25202942]
[87.73416138 -32.49629593]
[102.71663666 -33.22112274]
[116.89422607 -28.32255936]
[128.23352051 -18.50317192]
[135.10820007 -5.17129803]
[136.53225708 9.76095104]
[132.30145264 24.15193176]
[123.02207947 35.93807602]
[119.32339478 50.47491455]
[115.62470245 65.01175690]
[111.92601013 79.54859161]
[122.14125061 68.56455994]
[132.35649109 57.58053207]
[142.57173157 46.59650421]
[152.78695679 35.61247253]
[163.00219727 24.62844276]
[166.14036560 8.53236008]
[181.73490906 3.45866823]
[193.74349976 14.62674809]
[189.81271362 30.54783630]
[173.98623657 34.84368134]
[163.77099609 45.82771301]
[153.55575562 56.81174088]
[143.34051514 67.79576874]
[133.12527466 78.77980042]
[122.91004181 89.76383209]
[124.52841949 97.08714294]
[139.17509460 93.85061646]
[142.41136169 108.49734497]
[127.76518250 111.73375702]
[129.38356018 119.05706024]
[143.27618408 124.71348572]
[157.16880798 130.36990356]
[166.40040588 130.72221375]
[171.32611084 136.33451843]
[185.07800293 142.32498169]
[198.82987976 148.31546021]
[212.58175659 154.30592346]
[224.47503662 144.67219543]
[239.48529053 141.68040466]
[254.16328430 146.01803589]
[265.13610840 156.68833923]
[269.88232422 171.23936462]
[267.31124878 186.32737732]
[258.01370239 198.48527527]
[244.12622070 204.91925049]
[228.84001160 204.15083313]
[215.66773987 196.35659790]
[207.63632202 183.32759094]
[206.59129333 168.05780029]
[192.83941650 162.06733704]
[179.08752441 156.07687378]
[165.33564758 150.08639526]
[151.51239014 144.26252747]
[137.61976624 138.60610962]
[123.72714233 132.94967651]
[133.20722961 144.57414246]
[137.45065308 158.96139526]
[135.52627563 173.83744812]
[127.76151276 186.67132568]
[115.47741699 195.27951050]
[100.76396942 198.19746399]
[86.12445831 194.92871094]
[74.04959869 186.02938843]
[66.59376526 173.01361084]
[65.02546692 158.09582520]
[69.61152649 143.81408691]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 37]
[4 36]
[5 35]
[6 34]
[9 31]
[10 30]
[11 29]
[12 28]
[14 26]
[15 25]
[41 54]
[42 53]
[43 52]
[44 51]
[45 50]
[73 88]
[74 87]
[75 86]
[76 85]
[77 84]
[78 83]
[93 118]
[94 117]
[95 116]
[97 115]
[98 114]
[99 113]
[100 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
