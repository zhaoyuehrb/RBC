%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:05:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUGACCACACCCAGCUCAGGACUGGAUUCUGCCCUUCACUUAGCACCUGCCUCAGCCCCACUCCAGAAUAGCCAAGAGAACCCAAACCAAUAAAGUUUAUGCUAAGUCGAGCCCAUUGUGAAAAUUUAUUAAAAUGACUACUGAGCACU\
) } def
/len { sequence length } bind def

/coor [
[111.74601746 259.54281616]
[104.87429810 273.00650024]
[94.33818054 283.84539795]
[81.07453918 291.09570312]
[66.26275635 294.11276245]
[51.21989822 292.62826538]
[37.28355408 286.77423096]
[25.69293976 277.07119751]
[17.47868538 264.38192749]
[13.37119389 249.83476257]
[13.73570251 234.72322083]
[18.53980064 220.39102173]
[27.35630798 208.11256409]
[39.40126801 198.97964478]
[53.60365295 193.80433655]
[68.70059204 193.04685974]
[72.38287354 178.50585938]
[76.06515503 163.96484375]
[79.74744415 149.42384338]
[83.42972565 134.88284302]
[87.11200714 120.34183502]
[81.64686584 115.20547485]
[71.37395477 126.13558960]
[60.44401169 115.86249542]
[70.71657562 104.93274689]
[65.25143433 99.79638672]
[50.96654892 104.37262726]
[43.95715714 118.53751373]
[28.95814514 123.51799011]
[14.86815929 116.35923004]
[10.04653931 101.30840302]
[17.35386658 87.29489136]
[32.45483398 82.63266754]
[46.39030457 90.08774567]
[60.67519379 85.51149750]
[69.13718414 73.12623596]
[68.20770264 58.15506363]
[67.27822113 43.18389130]
[58.70066071 29.88968277]
[65.63443756 16.70742416]
[64.70496368 1.73624980]
[63.77547836 -13.23492432]
[62.84599686 -28.20609856]
[61.91651917 -43.17727280]
[60.98703766 -58.14844894]
[60.05755615 -73.11962128]
[59.12807465 -88.09079742]
[46.19925308 -96.46646118]
[40.74509430 -110.68284607]
[44.66156387 -125.21298981]
[56.24434280 -134.53915405]
[55.31486130 -149.51033020]
[51.93388367 -164.12432861]
[46.19363022 -177.98251343]
[40.45338058 -191.84071350]
[23.92098045 -203.30230713]
[27.11490440 -222.33549500]
[20.80686760 -235.94464111]
[5.62040329 -235.28149414]
[-8.66212177 -240.48513794]
[-19.86272812 -250.76205444]
[-26.27340126 -264.54507446]
[-26.91656494 -279.73239136]
[-21.69413757 -294.00805664]
[-11.40250206 -305.19512939]
[2.38894105 -311.58767700]
[17.57709694 -312.21087646]
[31.84588242 -306.96966553]
[43.01941299 -296.66333008]
[49.39380264 -282.86349487]
[49.99700546 -267.67453003]
[44.73703766 -253.41264343]
[34.41600800 -242.25268555]
[40.72404480 -228.64353943]
[50.66715240 -225.97354126]
[57.61919785 -218.08370972]
[59.07659531 -207.44700623]
[54.31157303 -197.58096313]
[60.05182648 -183.72277832]
[65.79207611 -169.86457825]
[68.36866760 -184.64163208]
[75.76098633 -197.69358826]
[87.10932922 -207.50251770]
[101.09387970 -212.92767334]
[116.08826447 -213.33810425]
[130.34864807 -208.68608093]
[142.21656799 -199.51261902]
[150.31181335 -186.88458252]
[153.69290161 -172.27061462]
[151.96661377 -157.37026978]
[145.33372498 -143.91647339]
[134.56562805 -133.47386169]
[120.91464233 -127.25690460]
[105.96836090 -125.98862457]
[91.46500397 -129.81652832]
[79.09131622 -138.29542542]
[70.28603363 -150.43980408]
[71.21551514 -135.46862793]
[83.86292267 -127.64679718]
[89.54658508 -113.71266937]
[85.89277649 -98.93081665]
[74.09925079 -89.02027893]
[75.02873230 -74.04910278]
[75.95821381 -59.07793045]
[76.88769531 -44.10675430]
[77.81717682 -29.13558006]
[78.74665070 -14.16440582]
[79.67613220 0.80676883]
[80.60561371 15.77794361]
[89.11669922 28.00131226]
[82.24939728 42.25440979]
[83.17887878 57.22558594]
[84.10836029 72.19676208]
[105.84573364 66.81152344]
[126.99089813 77.13444519]
[137.04766846 99.65780640]
[149.93348694 107.33608246]
[162.81929016 115.01435852]
[175.70509338 122.69263458]
[191.52079773 123.10997772]
[198.49360657 136.27163696]
[211.37940979 143.94990540]
[224.26522827 151.62818909]
[238.97152710 146.31228638]
[253.63632202 151.74159241]
[261.33535767 165.35258484]
[258.43338013 180.71853638]
[246.30062866 190.58412170]
[230.66578674 190.29113770]
[218.91117859 179.97789001]
[216.58694458 164.51399231]
[203.70114136 156.83572388]
[190.81532288 149.15744019]
[175.92131042 149.28930664]
[168.02682495 135.57844543]
[155.14100647 127.90016937]
[142.25520325 120.22189331]
[129.36940002 112.54361725]
[122.44029999 115.41374207]
[128.18032837 129.27201843]
[114.32196808 135.01184082]
[108.58210754 121.15399170]
[101.65300751 124.02411652]
[97.97072601 138.56512451]
[94.28844452 153.10612488]
[90.60616302 167.64712524]
[86.92388153 182.18814087]
[83.24160004 196.72914124]
[96.15843964 204.58067322]
[106.18589020 215.89179993]
[112.43232727 229.65673828]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 148]
[17 147]
[18 146]
[19 145]
[20 144]
[21 143]
[26 35]
[27 34]
[36 113]
[37 112]
[38 111]
[40 109]
[41 108]
[42 107]
[43 106]
[44 105]
[45 104]
[46 103]
[47 102]
[51 98]
[52 97]
[53 80]
[54 79]
[55 78]
[57 74]
[58 73]
[116 138]
[117 137]
[118 136]
[119 135]
[121 133]
[122 132]
[123 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
