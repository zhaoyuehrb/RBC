%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 17:17:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGAGGAGGUGAUGUAGCACUUCCAAGAUGGCACCAGCAUUUGGUUCUUCUCAAGAGUUGACCAUUAUCUCUAUUCUUAAAAUUAAACAUGUUGGGGAAACAAGAA\
) } def
/len { sequence length } bind def

/coor [
[92.01702118 200.30094910]
[82.62606049 188.60437012]
[78.25104523 174.25657654]
[79.51788330 159.31016541]
[86.24533081 145.90339661]
[97.47248077 135.95335388]
[85.70624542 145.25688171]
[73.94001007 154.56042480]
[62.17377090 163.86395264]
[50.40753555 173.16748047]
[38.64130402 182.47102356]
[26.87506676 191.77455139]
[25.28947067 207.49909973]
[12.99666786 217.43200684]
[-2.71023774 215.68023682]
[-12.51261902 203.28311157]
[-10.59489632 187.59561157]
[1.90517962 177.92483521]
[17.57153511 180.00831604]
[29.33777046 170.70478821]
[41.10400391 161.40124512]
[52.87023926 152.09771729]
[64.63647461 142.79418945]
[76.40270996 133.49064636]
[88.16894531 124.18711853]
[77.89659882 111.25165558]
[77.66385651 96.07031250]
[85.96369171 84.98235321]
[80.42559814 71.04213715]
[74.88750458 57.10192490]
[69.34941101 43.16171265]
[63.81132126 29.22149849]
[53.41385651 25.41556549]
[47.03013229 16.64153290]
[46.62575150 6.02015781]
[52.09146881 -2.83663893]
[47.37329865 -17.07527924]
[42.65512848 -31.31391907]
[37.93695450 -45.55255890]
[26.25160789 -56.21854401]
[29.59288788 -70.73353577]
[24.87471581 -84.97217560]
[20.15654373 -99.21081543]
[15.43837357 -113.44945526]
[10.72020149 -127.68809509]
[-3.51373434 -134.55618286]
[-8.64322376 -149.50489807]
[-1.62503183 -163.66542053]
[13.37707329 -168.63658142]
[27.46260834 -161.46905518]
[32.27487564 -146.41523743]
[24.95884132 -132.40626526]
[29.67701340 -118.16763306]
[34.39518356 -103.92899323]
[39.11335373 -89.69035339]
[43.83152771 -75.45171356]
[55.17939758 -65.80416870]
[52.17559433 -50.27072906]
[56.89376831 -36.03208923]
[61.61193848 -21.79344940]
[66.33010864 -7.55481052]
[81.70269012 4.02175426]
[77.75153351 23.68340683]
[83.28962708 37.62361908]
[88.82772064 51.56383133]
[94.36581421 65.50404358]
[99.90390778 79.44425964]
[121.09015656 89.09902954]
[121.89292908 115.67451477]
[136.66503906 118.27923584]
[151.43716431 120.88395691]
[166.20927429 123.48867798]
[180.98139954 126.09340668]
[195.75350952 128.69812012]
[202.63548279 115.23967743]
[213.17985535 104.40880585]
[226.44900513 97.16859436]
[241.26307678 94.16281891]
[256.30480957 95.65877533]
[270.23669434 101.52342224]
[281.81991577 111.23529053]
[290.02450562 123.93080902]
[294.12091064 138.48109436]
[293.74490356 153.59234619]
[288.92987061 167.92089844]
[280.10403442 180.19262695]
[268.05209351 189.31637573]
[253.84577942 194.48086548]
[238.74827576 195.22685242]
[224.10203552 191.48800659]
[211.20938110 183.59680176]
[201.21675110 172.25489807]
[195.01266479 158.47082520]
[193.14878845 143.47024536]
[178.37666321 140.86552429]
[163.60455322 138.26080322]
[148.83244324 135.65608215]
[134.06031799 133.05134583]
[119.28820801 130.44662476]
[133.89103699 133.87553406]
[146.17578125 142.48280334]
[154.38497925 155.03703308]
[157.34422302 169.74223328]
[154.63014221 184.49465942]
[146.63102722 197.18379211]
[134.49122620 205.99430847]
[119.94748688 209.66578674]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 25]
[7 24]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[28 67]
[29 66]
[30 65]
[31 64]
[32 63]
[36 61]
[37 60]
[38 59]
[39 58]
[41 56]
[42 55]
[43 54]
[44 53]
[45 52]
[69 99]
[70 98]
[71 97]
[72 96]
[73 95]
[74 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
