%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 18:52:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUUCUGGGAGAUGAUGUUCACCUUCAUUUUCCAAAAUGAAUAUCUUAAAAAUCUUAUGCAGAAAUUUGCAUUUUGUACCUCAAUAUUUCUACGUCAUGUGCCUUAGUAAAAAAAAAUAAUAAAUAAAUAAAAGAUGA\
) } def
/len { sequence length } bind def

/coor [
[251.83404541 346.87872314]
[262.11621094 335.89358521]
[253.29943848 323.75833130]
[244.48265076 311.62307739]
[235.66587830 299.48782349]
[220.96028137 297.41870117]
[211.84594727 285.23742676]
[214.11593628 269.82687378]
[205.29916382 257.69161987]
[191.55865479 251.94291687]
[189.70672607 236.23046875]
[175.96621704 230.48176575]
[174.11427307 214.76931763]
[165.29750061 202.63406372]
[156.48072815 190.49880981]
[147.66394043 178.36355591]
[138.84716797 166.22830200]
[130.03038025 154.09304810]
[121.21360779 141.95779419]
[105.03907013 147.89366150]
[87.39936829 147.66290283]
[70.61953735 141.00314331]
[57.01482391 128.51835632]
[48.57216644 111.63452911]
[46.66328049 92.44017792]
[31.69725800 93.44921112]
[16.73123360 94.45824432]
[1.76521122 95.46727753]
[-13.20081234 96.47631836]
[-28.16683578 97.48535156]
[-43.13285828 98.49438477]
[-56.44232178 108.07510376]
[-71.28102875 101.09334564]
[-72.38417816 84.73134613]
[-58.61695480 75.82092285]
[-44.14189148 83.52836609]
[-29.17587090 82.51932526]
[-14.20984650 81.51029205]
[0.75617617 80.50125885]
[15.72219944 79.49222565]
[30.68822289 78.48318481]
[45.65424728 77.47415161]
[50.19766998 71.50696564]
[36.57999420 65.21738434]
[22.96231461 58.92780304]
[9.34463692 52.63822174]
[-5.53880167 50.77186966]
[-16.77782249 40.83786774]
[-20.45780754 26.29628181]
[-15.29700184 12.21203232]
[-3.09293962 3.49074435]
[11.90363312 3.17009139]
[24.46932411 11.36175919]
[30.22733879 25.21157455]
[39.91306686 36.66524887]
[49.59879303 48.11892700]
[59.28452301 59.57260132]
[63.82794571 53.60541534]
[60.81910706 38.91028595]
[57.81026459 24.21515465]
[54.80142212 9.52002335]
[51.79258347 -5.17510748]
[48.78374100 -19.87023926]
[37.50315857 -31.77319908]
[42.42988205 -47.41479111]
[58.49572372 -50.70428848]
[69.17352295 -38.25773239]
[63.47887039 -22.87907982]
[66.48771667 -8.18394852]
[69.49655151 6.51118231]
[72.50539398 21.20631409]
[75.51423645 35.90144348]
[78.52307892 50.59657669]
[96.93784332 49.65029144]
[113.38084412 54.92865372]
[119.88909912 41.41411972]
[126.39735413 27.89958763]
[122.47718048 12.34286118]
[132.30998230 -0.33371782]
[148.35285950 -0.40576231]
[158.29911804 12.18199444]
[154.51881409 27.77330208]
[139.91189575 34.40784454]
[133.40364075 47.92237854]
[126.89537811 61.43690872]
[134.59939575 68.16676331]
[140.66549683 76.40357971]
[144.80650330 85.75744629]
[146.82640076 95.78554535]
[146.62954712 106.01316071]
[144.22528076 115.95610809]
[139.72741699 125.14370728]
[133.34886169 133.14100647]
[142.16563416 145.27626038]
[150.98242188 157.41151428]
[159.79919434 169.54676819]
[168.61598206 181.68202209]
[177.43275452 193.81729126]
[186.24954224 205.95254517]
[200.62068176 212.56924438]
[201.84197998 227.41369629]
[216.21311951 234.03039551]
[217.43441772 248.87484741]
[226.25119019 261.01010132]
[241.60896301 263.61334229]
[250.37756348 276.04580688]
[247.80113220 290.67105103]
[256.61791992 302.80630493]
[265.43469238 314.94155884]
[274.25146484 327.07681274]
[287.87634277 320.69247437]
[302.46328735 317.00231934]
[317.48501587 316.13970947]
[332.39849854 318.13583374]
[346.66461182 322.91854858]
[359.76766968 330.31494141]
[371.23397827 340.05761719]
[380.64904785 351.79443359]
[387.67254639 365.10110474]
[392.05053711 379.49658203]
[393.62478638 394.46047974]
[392.33840942 409.45187378]
[388.23785400 423.92880249]
[381.47137451 437.36798096]
[372.28359985 449.28356934]
[361.00665283 459.24481201]
[348.04815674 466.89166260]
[333.87658691 471.94763184]
[319.00421143 474.22998047]
[303.96868896 473.65621948]
[289.31350708 470.24707031]
[275.56845093 464.12576294]
[263.23043823 455.51358032]
[252.74542236 444.72186279]
[244.49246216 432.14074707]
[238.76988220 418.22497559]
[235.78456116 403.47760010]
[235.64442444 388.43179321]
[238.35450745 373.63137817]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 110]
[3 109]
[4 108]
[5 107]
[8 104]
[9 103]
[11 101]
[13 99]
[14 98]
[15 97]
[16 96]
[17 95]
[18 94]
[19 93]
[25 42]
[26 41]
[27 40]
[28 39]
[29 38]
[30 37]
[31 36]
[58 73]
[59 72]
[60 71]
[61 70]
[62 69]
[63 68]
[75 85]
[76 84]
[77 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
