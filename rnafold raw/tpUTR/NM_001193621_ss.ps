%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 03:13:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGCUAUCUGAACAGAGGAAGAUAAUGUAGUGUGAAGUCCCCAUUUGUCCUCAGCCUGUAACUCCCCGUGUGCCUAUAAAGAAGUUAAUAGAGCAAGCCUGA\
) } def
/len { sequence length } bind def

/coor [
[121.32350159 189.95639038]
[107.72800446 192.12557983]
[93.96112823 192.25169373]
[80.32817841 190.33195496]
[67.13148499 186.40893555]
[54.66371155 180.56962585]
[43.20136261 172.94352722]
[32.99863434 163.69976807]
[24.28178787 153.04333496]
[17.24414062 141.21057129]
[12.04176617 128.46388245]
[8.79003525 115.08595276]
[7.56106234 101.37345886]
[8.38210201 87.63050842]
[11.23494625 74.16187286]
[16.05632782 61.26625061]
[2.99108672 53.89743042]
[-10.07415390 46.52861023]
[-23.13939476 39.15979385]
[-36.20463562 31.79097366]
[-47.00287628 37.22281265]
[-58.95764923 36.69270706]
[-69.02708435 30.45378304]
[-74.70680237 20.19669151]
[-74.65239716 8.59313011]
[-87.24888611 0.44889522]
[-99.84536743 -7.69533968]
[-112.44185638 -15.83957386]
[-127.70626068 -12.73542118]
[-140.36486816 -21.17427444]
[-143.23013306 -35.74568176]
[-157.65628052 -30.03028297]
[-172.67831421 -33.91851044]
[-182.51994324 -45.91526031]
[-183.39686584 -61.40753555]
[-174.97187805 -74.43824005]
[-160.48457336 -79.99681091]
[-145.50561523 -75.94584656]
[-135.79470825 -63.84304428]
[-135.08589172 -48.34216690]
[-120.62229156 -51.70962143]
[-107.73165131 -43.62965012]
[-104.29762268 -28.43605995]
[-91.70113373 -20.29182434]
[-79.10465240 -12.14758968]
[-66.50816345 -4.00335550]
[-49.02286911 -8.99113369]
[-33.08653259 0.39994419]
[-28.83581543 18.72573280]
[-15.77057457 26.09455299]
[-2.70533442 33.46337128]
[10.35990620 40.83219147]
[23.42514610 48.20101166]
[33.72653580 35.54325867]
[46.09313965 24.89411545]
[60.13959122 16.58542442]
[75.42817688 10.87610149]
[91.48247528 7.94406414]
[107.80219269 7.88067818]
[123.87877655 10.68792057]
[139.21125793 16.27831078]
[153.32182312 24.47764015]
[165.77078247 35.03040314]
[176.17018127 47.60774994]
[184.19595337 61.81774902]
[189.59802246 77.21758270]
[192.20802307 93.32736969]
[191.94464111 109.64508057]
[188.81607056 125.66223907]
[202.84130859 130.98130798]
[218.48837280 128.64042664]
[227.64489746 140.38807678]
[241.67013550 145.70715332]
[255.69538879 151.02621460]
[269.79937744 156.13285828]
[283.97885132 161.02590942]
[298.15835571 165.91894531]
[312.33786011 170.81198120]
[327.90707397 167.99957275]
[337.41424561 179.46531677]
[351.59375000 184.35835266]
[367.58203125 180.71054077]
[378.53540039 192.91528320]
[373.18594360 208.41740417]
[357.03674316 211.26963806]
[346.70071411 198.53785706]
[332.52120972 193.64480591]
[317.96618652 196.80720520]
[307.44482422 184.99148560]
[293.26531982 180.09843445]
[279.08581543 175.20539856]
[264.90631104 170.31236267]
[257.43225098 171.11929321]
[250.37631226 165.05146790]
[236.35107422 159.73239136]
[222.32582092 154.41331482]
[207.68193054 157.13465881]
[197.52223206 145.00656128]
[183.49699402 139.68748474]
[176.67730713 151.64720154]
[168.15716553 162.46153259]
[158.12550354 171.89067078]
[146.80479431 179.72549438]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 53]
[17 52]
[18 51]
[19 50]
[20 49]
[25 46]
[26 45]
[27 44]
[28 43]
[31 40]
[69 99]
[70 98]
[72 96]
[73 95]
[74 94]
[75 92]
[76 91]
[77 90]
[78 89]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
