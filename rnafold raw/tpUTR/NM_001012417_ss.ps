%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 01:08:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACCCUAGAAAUAUGAGAAUUUUGCUGUUGCUGAUGCCUGGUGUGGGUCCUAAUGAUAUCUCUGUAUAACAAAGCAGUUACGAAGCCUACAGAUUUUGUGCAAAAUAAAAUACAAACAAGGUGAAUUUUUCUCCUCAUUCAA\
) } def
/len { sequence length } bind def

/coor [
[72.77802277 484.95379639]
[60.10467529 493.53546143]
[44.89359665 495.23300171]
[30.64018440 489.65637207]
[20.61976624 478.08703613]
[17.13496208 463.18353271]
[20.98655319 448.37054443]
[31.28947258 437.05206299]
[45.67618561 431.82891846]
[47.63407898 416.95724487]
[49.59197235 402.08557129]
[37.69221115 393.12670898]
[31.83551788 379.32254028]
[33.68696976 364.34127808]
[42.84872055 352.21859741]
[56.94015503 346.27059937]
[58.89804459 331.39892578]
[60.85593796 316.52725220]
[62.81383133 301.65557861]
[64.77172089 286.78390503]
[56.03320694 269.58462524]
[68.35867310 253.69642639]
[69.66600800 238.75350952]
[70.97334290 223.81059265]
[72.28067780 208.86766052]
[73.58802032 193.92474365]
[74.89535522 178.98182678]
[75.87640381 164.01394653]
[76.53069305 149.02821350]
[77.18498230 134.04249573]
[66.46331024 123.55222321]
[51.49542999 124.53327179]
[38.16807175 134.08908081]
[23.34245110 127.07958984]
[22.26989555 110.71555328]
[36.05375671 101.83089447]
[50.51438141 109.56538391]
[65.48226929 108.58433533]
[65.50483704 98.97087860]
[68.07599640 90.00575256]
[72.85065460 82.32987213]
[79.33255768 76.44767761]
[86.92166901 72.69452667]
[83.99531555 57.98274612]
[81.06896210 43.27096939]
[78.14260864 28.55918884]
[75.21624756 13.84740925]
[72.28989410 -0.86436975]
[69.36354065 -15.57614899]
[55.86472321 -19.39660454]
[45.38980484 -28.62882233]
[39.95579910 -41.41873169]
[40.57598114 -55.23491287]
[47.07146835 -67.36958313]
[58.11752319 -75.46928406]
[55.51280212 -90.24140167]
[52.90807724 -105.01351166]
[50.30335617 -119.78562927]
[37.64106750 -128.85780334]
[35.20994186 -143.87593079]
[43.93690109 -155.89157104]
[41.33218002 -170.66369629]
[31.31605148 -182.91064453]
[36.72573853 -196.78813171]
[34.12101364 -211.56024170]
[31.51629257 -226.33236694]
[22.81137466 -240.88092041]
[34.38161469 -253.27310181]
[49.49245453 -245.58552551]
[46.28841019 -228.93708801]
[48.89313126 -214.16496277]
[51.49785233 -199.39285278]
[61.32767487 -188.20249939]
[56.10429764 -173.26841736]
[58.70901871 -158.49630737]
[71.01927185 -150.19007874]
[73.87126160 -135.24615479]
[65.07546997 -122.39035797]
[67.68019104 -107.61824036]
[70.28491974 -92.84612274]
[72.88964081 -78.07400513]
[88.17565918 -72.94325256]
[98.86632538 -60.74797058]
[101.98747253 -44.73799133]
[96.59900665 -29.24319267]
[84.07531738 -18.50250435]
[87.00167847 -3.79072452]
[89.92803192 10.92105484]
[92.85438538 25.63283348]
[95.78073883 40.34461212]
[98.70709229 55.05639267]
[101.63344574 69.76817322]
[116.54480743 74.64450836]
[127.01367188 86.32911682]
[141.65811157 83.08251953]
[156.30255127 79.83592987]
[170.94699097 76.58933258]
[185.59143066 73.34274292]
[200.23587036 70.09614563]
[214.88031006 66.84954834]
[224.67823792 54.14599991]
[240.72087097 54.02986526]
[250.70167542 66.59024048]
[246.96423340 82.19187927]
[232.37559509 88.86653900]
[218.12690735 81.49398804]
[203.48246765 84.74058533]
[188.83802795 87.98718262]
[174.19358826 91.23377228]
[159.54914856 94.48036957]
[144.90470886 97.72695923]
[130.26026917 100.97355652]
[128.13983154 114.37570953]
[120.14245605 126.04179382]
[107.41361237 133.43376160]
[92.17070770 134.69679260]
[91.51641083 149.68251038]
[90.86212158 164.66822815]
[93.62186432 170.81097412]
[92.91462708 176.54621887]
[89.83827209 180.28915405]
[88.53093719 195.23208618]
[87.22360229 210.17500305]
[85.91626740 225.11791992]
[84.60893250 240.06083679]
[83.30158997 255.00376892]
[90.82271576 262.99270630]
[92.62570190 273.59216309]
[88.34789276 283.21536255]
[79.64339447 288.74179077]
[77.68550110 303.61346436]
[75.72761536 318.48513794]
[73.76972198 333.35681152]
[71.81182861 348.22848511]
[83.88365173 357.62094116]
[89.59564209 371.70178223]
[87.50656891 386.65179443]
[78.27665710 398.46975708]
[64.46364594 404.04348755]
[62.50575256 418.91516113]
[60.54785919 433.78683472]
[73.09251404 442.55554199]
[80.11492157 456.15496826]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 141]
[10 140]
[11 139]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 126]
[23 125]
[24 124]
[25 123]
[26 122]
[27 121]
[28 118]
[29 117]
[30 116]
[31 38]
[32 37]
[43 92]
[44 91]
[45 90]
[46 89]
[47 88]
[48 87]
[49 86]
[55 81]
[56 80]
[57 79]
[58 78]
[61 75]
[62 74]
[64 72]
[65 71]
[66 70]
[94 112]
[95 111]
[96 110]
[97 109]
[98 108]
[99 107]
[100 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
