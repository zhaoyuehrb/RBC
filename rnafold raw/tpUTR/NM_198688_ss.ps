%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 09:32:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCCCUGGAUGUGAUCCGGAGUCCCUUCCCACCAGGGGCUGACCUCCCAGCUGCCCCAGCAAGCUCUGCCCUCUCUGGCUUUGACACCCUCAGAAGAUGGGGCAGGCUCUUUGUCUUA\
) } def
/len { sequence length } bind def

/coor [
[59.53434372 127.61059570]
[45.99556351 134.06825256]
[32.45678329 140.52592468]
[18.91800499 146.98359680]
[5.37922573 153.44125366]
[-8.15955353 159.89892578]
[-21.61264420 166.53324890]
[-34.97774124 173.34310913]
[-48.34283829 180.15296936]
[-54.66422272 186.92089844]
[-62.14812088 186.96098328]
[-75.68690491 193.41865540]
[-84.81173706 206.34335327]
[-99.63018036 204.83900452]
[-113.16896057 211.29667664]
[-116.25679779 221.88793945]
[-124.54041290 228.83493042]
[-135.06797791 229.98260498]
[-144.26159668 225.18786621]
[-158.11978149 230.92811584]
[-167.66824341 244.26074219]
[-183.96020508 242.38877869]
[-190.23588562 227.23794556]
[-180.03941345 214.39411926]
[-163.86003113 217.06993103]
[-150.00184631 211.32968140]
[-139.53405762 195.15864563]
[-119.62662506 197.75788879]
[-106.08785248 191.30023193]
[-97.93139648 178.83741760]
[-82.14456940 179.87986755]
[-68.60578918 173.42219543]
[-55.15269852 166.78787231]
[-41.78760147 159.97801208]
[-28.42250252 153.16815186]
[-23.83478737 147.25518799]
[-14.61721992 146.36013794]
[-1.07844055 139.90248108]
[12.46033859 133.44480896]
[25.99911880 126.98714447]
[39.53789902 120.52947998]
[53.07667542 114.07181549]
[51.39309311 106.09777832]
[51.05480576 97.95497894]
[52.07117462 89.86877441]
[54.41406631 82.06297302]
[58.01864243 74.75361633]
[62.78513718 68.14300537]
[68.58162689 62.41409683]
[75.24768066 57.72545624]
[82.59880829 54.20684814]
[79.48013306 39.53463364]
[76.36145782 24.86241913]
[73.24278259 10.19020557]
[64.03543091 -4.04569912]
[75.16614532 -16.83411598]
[90.53607178 -9.67858410]
[87.91500092 7.07153034]
[91.03367615 21.74374390]
[94.15235138 36.41595840]
[97.27102661 51.08817291]
[126.68072510 58.91529083]
[145.79315186 82.59880829]
[160.46536255 79.48013306]
[175.13757324 76.36145782]
[182.99523926 71.46024323]
[190.23449707 73.35849762]
[204.98332214 70.62496185]
[219.73214722 67.89142609]
[234.48097229 65.15789795]
[249.22979736 62.42436218]
[263.97860718 59.69083023]
[278.72744751 56.95729828]
[290.88650513 46.83467865]
[304.81066895 52.12305450]
[319.55950928 49.38952255]
[334.30831909 46.65599060]
[338.45736694 43.09203720]
[343.10144043 41.70411682]
[347.29537964 42.30161285]
[350.31869507 44.33459473]
[365.23654175 42.76667023]
[380.15435791 41.19874191]
[395.07220459 39.63081360]
[409.99002075 38.06288910]
[421.16305542 26.55015182]
[437.11569214 28.25084305]
[445.61047363 41.86034012]
[440.13088989 56.93859863]
[424.88043213 61.91886902]
[411.55795288 52.98071671]
[396.64010620 54.54864120]
[381.72229004 56.11656952]
[366.80447388 57.68449783]
[351.88662720 59.25242233]
[337.04187012 61.40481186]
[322.29302979 64.13834381]
[307.54421997 66.87187958]
[296.44006348 76.79898071]
[281.46096802 71.70612335]
[266.71215820 74.43965149]
[251.96333313 77.17318726]
[237.21450806 79.90672302]
[222.46568298 82.64025116]
[207.71685791 85.37378693]
[192.96803284 88.10732269]
[178.25625610 91.03367615]
[163.58404541 94.15235138]
[148.91183472 97.27102661]
[148.35585022 107.84389496]
[145.54116821 118.05037689]
[140.59928894 127.41372681]
[133.76101685 135.49659729]
[125.34577179 141.92143250]
[115.74664307 146.38812256]
[105.41199493 148.68803406]
[94.82454681 148.71374512]
[84.47884369 146.46405029]
[74.85813141 142.04403687]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[4 39]
[5 38]
[6 37]
[7 35]
[8 34]
[9 33]
[11 32]
[12 31]
[14 29]
[15 28]
[19 26]
[20 25]
[51 61]
[52 60]
[53 59]
[54 58]
[63 109]
[64 108]
[65 107]
[67 106]
[68 105]
[69 104]
[70 103]
[71 102]
[72 101]
[73 100]
[75 98]
[76 97]
[77 96]
[81 95]
[82 94]
[83 93]
[84 92]
[85 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
