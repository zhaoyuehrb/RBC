%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 12:48:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGGAGAAAUGGCCUCCCGUCUUGUGAACUUCAAUGGGGAGAAAUAAUUAGAAUGAGCAAUAGAAAUGCACAGAUGCCUAUACAUACAUAUACAAAUAAAAAGAUACGAUUCGCAAUGG\
) } def
/len { sequence length } bind def

/coor [
[32.73231506 251.10067749]
[29.73606491 254.08671570]
[26.29826927 255.27931213]
[18.57637596 268.13903809]
[10.85448456 280.99874878]
[3.13259268 293.85845947]
[9.32340050 308.08709717]
[5.93563509 323.22982788]
[-5.72803783 333.46401978]
[-21.18269730 334.85437012]
[-34.48571396 326.86627197]
[-40.52180481 312.57135010]
[-36.96996689 297.46624756]
[-25.19596100 287.35919189]
[-9.72712708 286.13656616]
[-2.00523472 273.27685547]
[5.71665716 260.41714478]
[13.43854904 247.55741882]
[20.65808296 234.40910339]
[27.36449051 220.99179077]
[34.07089615 207.57449341]
[40.77730560 194.15718079]
[40.09833527 189.32009888]
[42.53536606 184.02012634]
[48.18998337 180.23518372]
[55.57820511 167.18090820]
[62.96642685 154.12663269]
[70.35464478 141.07234192]
[77.74286652 128.01806641]
[85.13108826 114.96379089]
[79.83980560 100.92803955]
[65.67247009 95.99990082]
[51.50513077 91.07176971]
[37.33779144 86.14363098]
[22.32819748 91.80857849]
[8.61506367 83.48213959]
[6.71793318 67.55165863]
[18.09212303 56.23762131]
[34.01232529 58.21920013]
[42.26592636 71.97629547]
[56.43326569 76.90442657]
[70.60060120 81.83256531]
[84.76794434 86.76069641]
[91.29508209 83.06658936]
[81.22474670 71.94956207]
[71.15441132 60.83253098]
[61.08407593 49.71549988]
[48.17375946 42.07850266]
[41.80117798 28.49946785]
[44.17689514 13.68879795]
[54.47681046 2.78413177]
[69.12800598 -0.43183494]
[83.04816437 5.15647745]
[91.40854645 17.61055183]
[91.30939484 32.60913086]
[95.65605164 46.96554184]
[100.00270081 61.32195663]
[104.34935760 75.67836761]
[110.87650299 71.98426056]
[113.94477844 57.30142212]
[117.01306152 42.61858749]
[107.20180511 30.44183540]
[107.56469727 14.80846310]
[117.93038940 3.10007119]
[133.40452576 0.84500426]
[146.68067932 9.10803604]
[151.49026489 23.98761559]
[145.56234741 38.45806122]
[131.69589233 45.68686676]
[128.62760925 60.36970520]
[125.55933380 75.05253601]
[131.61558533 79.47653961]
[140.46379089 67.36417389]
[152.57600403 76.21257782]
[143.72810364 88.32453918]
[149.78436279 92.74853516]
[162.83863831 85.36031342]
[175.89291382 77.97209167]
[179.87219238 62.67696762]
[193.54336548 54.74761200]
[208.79556274 58.88837433]
[216.57992554 72.64261627]
[212.27815247 87.85018158]
[198.44236755 95.48870087]
[183.28112793 91.02637482]
[170.22685242 98.41459656]
[157.17257690 105.80281830]
[172.17088318 105.57759857]
[186.35049438 110.47030640]
[199.13145447 118.32186890]
[209.90534973 128.75849915]
[218.15928650 141.28338623]
[223.50033569 155.30026245]
[225.67424011 170.14190674]
[224.57752991 185.10176086]
[220.26240540 199.46768188]
[212.93426514 212.55578613]
[202.94200134 223.74302673]
[190.76124573 232.49684143]
[176.97187805 238.40052795]
[162.23033142 241.17301941]
[147.23835754 240.68234253]
[132.70964050 236.95185852]
[119.33582306 230.15914917]
[107.75354004 220.62759399]
[98.51416016 208.81091309]
[92.05751801 195.27165222]
[88.69098663 180.65431213]
[88.57482147 165.65475464]
[91.71454620 150.98704529]
[97.96014404 137.35032654]
[98.18536377 122.35201263]
[90.79714966 135.40629578]
[83.40892792 148.46057129]
[76.02070618 161.51484680]
[68.63248444 174.56912231]
[61.24426270 187.62339783]
[54.19461060 200.86358643]
[47.48820496 214.28089905]
[40.78179550 227.69819641]
[34.07538986 241.11550903]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 18]
[4 17]
[5 16]
[6 15]
[19 121]
[20 120]
[21 119]
[22 118]
[25 117]
[26 116]
[27 115]
[28 114]
[29 113]
[30 112]
[31 43]
[32 42]
[33 41]
[34 40]
[59 71]
[60 70]
[61 69]
[76 87]
[77 86]
[78 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
