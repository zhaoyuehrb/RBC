%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 13:07:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCCUCCCCCACCUGUCCUGCAGUCUUUGACUUUUCCUUUCUUUUUUGCCACCCUUUCAGGAACCCUGUAUGGUUUUUAGUUUAAAUUAAAGGAGUCGUUAUCGUGGUGGGAAUAUGAAAUAAAGUAGAAGAAAAGGCCAUGA\
) } def
/len { sequence length } bind def

/coor [
[13.81273937 566.49688721]
[5.88040209 579.37835693]
[-5.64561701 589.17663574]
[-19.63611603 594.93176270]
[-34.72044754 596.07983398]
[-49.42080307 592.50848389]
[-62.29698944 584.56750488]
[-72.08753204 573.03491211]
[-77.83325195 559.04058838]
[-78.97124481 543.95544434]
[-75.39002228 529.25750732]
[-67.44042206 516.38665771]
[-55.90128708 506.60382080]
[-41.90308762 500.86749268]
[-26.81723022 499.73962402]
[-23.27606201 485.16360474]
[-27.79003143 470.96945190]
[-17.01351738 459.38598633]
[-13.47234726 444.80996704]
[-9.93117809 430.23394775]
[-17.88810539 421.93762207]
[-20.84989357 410.70590210]
[-17.95939255 399.33145142]
[-9.82976818 390.70117188]
[1.58117843 387.06369019]
[5.75043821 372.65478516]
[9.91969776 358.24584961]
[14.08895779 343.83691406]
[18.25821686 329.42797852]
[14.36335659 315.05163574]
[25.63153839 303.94583130]
[29.80079651 289.53692627]
[33.97005844 275.12799072]
[38.13931656 260.71905518]
[42.30857849 246.31011963]
[36.55115891 237.75906372]
[36.48955917 227.23008728]
[42.38827133 218.24340820]
[52.47843170 213.93833923]
[57.26795197 199.72354126]
[62.05747604 185.50874329]
[66.84700012 171.29394531]
[58.12017441 161.13632202]
[55.54986954 147.88317871]
[59.91650391 134.99420166]
[70.17522430 125.88835907]
[83.70357513 123.03707123]
[88.79992676 108.92937469]
[86.52813721 95.13333893]
[97.09237671 85.97426605]
[102.18872833 71.86656952]
[107.28508759 57.75887299]
[112.38143921 43.65117264]
[117.47779083 29.54347420]
[122.42102051 15.38139439]
[115.65158844 1.35240638]
[120.71134186 -12.99519157]
[134.12754822 -19.36235619]
[131.20169067 -34.91066360]
[142.59780884 -44.50117111]
[139.67195129 -60.04948044]
[151.06806946 -69.63999176]
[155.85758972 -83.85478973]
[149.08815002 -97.88377380]
[154.14790344 -112.23137665]
[167.56411743 -118.59854126]
[172.35363770 -132.81333923]
[177.14315796 -147.02813721]
[171.71577454 -156.56167603]
[172.45835876 -167.28565979]
[178.87927246 -175.63043213]
[188.63758850 -178.95361328]
[194.03837585 -192.94760132]
[199.43917847 -206.94157410]
[204.83996582 -220.93554688]
[210.24076843 -234.92953491]
[215.64155579 -248.92350769]
[207.92710876 -262.52575684]
[210.81169128 -277.89498901]
[222.93328857 -287.77432251]
[238.56845093 -287.49902344]
[250.33473206 -277.19909668]
[252.67645264 -261.73782349]
[244.48793030 -248.41558838]
[229.63552856 -243.52272034]
[224.23474121 -229.52873230]
[218.83393860 -215.53475952]
[213.43315125 -201.54078674]
[208.03234863 -187.54679871]
[202.63156128 -173.55282593]
[207.07818604 -154.77937317]
[191.35795593 -142.23861694]
[186.56843567 -128.02381897]
[181.77891541 -113.80901337]
[188.60623169 -100.62100983]
[183.95146179 -86.13695526]
[170.07238770 -79.06526184]
[165.28286743 -64.85046387]
[168.55130005 -50.31889343]
[156.81260681 -39.71165085]
[160.08103943 -25.18007851]
[148.34234619 -14.57283306]
[155.16966248 -1.38483047]
[150.51490784 13.09922409]
[136.63581848 20.17091751]
[137.48706055 27.56869125]
[131.58549500 34.63982773]
[126.48913574 48.74752808]
[121.39278412 62.85522842]
[116.29642487 76.96292877]
[111.20007324 91.07062531]
[113.47186279 104.86666107]
[102.90762329 114.02573395]
[97.81127167 128.13342285]
[107.48514557 141.96513367]
[107.04049683 158.67247009]
[96.84870911 171.70887756]
[81.06179810 176.08346558]
[76.27227020 190.29826355]
[71.48274994 204.51306152]
[66.69322968 218.72785950]
[71.61863708 238.22494507]
[56.71750641 250.47938538]
[52.54824829 264.88830566]
[48.37898636 279.29724121]
[44.20972824 293.70617676]
[40.04046631 308.11511230]
[43.63711548 323.52206421]
[32.66714859 333.59722900]
[28.49788857 348.00616455]
[24.32862854 362.41510010]
[20.15936852 376.82403564]
[15.99010849 391.23297119]
[25.77281761 407.38897705]
[20.79982948 425.28033447]
[4.64483356 433.77511597]
[1.10366440 448.35113525]
[-2.43750477 462.92715454]
[1.82317758 478.16384888]
[-8.70004940 488.70477295]
[-12.24121857 503.28079224]
[0.64560014 511.20446777]
[10.45158958 522.72393799]
[16.21606064 536.71057129]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 141]
[16 140]
[18 138]
[19 137]
[20 136]
[25 133]
[26 132]
[27 131]
[28 130]
[29 129]
[31 127]
[32 126]
[33 125]
[34 124]
[35 123]
[39 121]
[40 120]
[41 119]
[42 118]
[47 114]
[48 113]
[50 111]
[51 110]
[52 109]
[53 108]
[54 107]
[55 105]
[58 102]
[60 100]
[62 98]
[63 97]
[66 94]
[67 93]
[68 92]
[72 90]
[73 89]
[74 88]
[75 87]
[76 86]
[77 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
