%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 03:12:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACCCCACCGGGUGUGGUUUUGAUACCCCUAAGUUAAGGCUGAGCCAGAGCACUGUCUCAGCAUUUGAACCGAAUGCUAAUAUAGUCACUUAUUAAAGGAUUAUGCUGAUGGAAAUGUACCAA\
) } def
/len { sequence length } bind def

/coor [
[111.40933228 171.00408936]
[110.65566254 156.02302551]
[95.92135620 153.21231079]
[89.70572662 166.86390686]
[83.49008942 180.51548767]
[77.27445221 194.16708374]
[79.38965607 210.42924500]
[66.20120239 220.17587280]
[51.27624130 213.38046265]
[49.96829605 197.03355408]
[63.62286758 187.95144653]
[69.83850098 174.29985046]
[76.05413055 160.64826965]
[82.26976776 146.99667358]
[62.89818954 131.62277222]
[53.68808365 109.46711731]
[56.29035568 86.35649109]
[41.34835052 87.67426300]
[26.40634727 88.99202728]
[11.46434307 90.30979919]
[-3.47766089 91.62756348]
[-18.41966438 92.94533539]
[-33.36166763 94.26309967]
[-48.30367279 95.58087158]
[-63.24567795 96.89863586]
[-71.11249542 110.27371979]
[-85.35196686 116.43950653]
[-100.48873901 113.02513123]
[-110.70239258 101.34349060]
[-112.06558990 85.88641357]
[-104.05413818 72.59745789]
[-89.74861908 66.58650208]
[-74.64978027 70.16487885]
[-64.56344604 81.95663452]
[-49.62144089 80.63886261]
[-34.67943573 79.32109833]
[-19.73743248 78.00332642]
[-4.79542875 76.68556213]
[10.14657497 75.36779022]
[25.08857918 74.05002594]
[40.03058243 72.73225403]
[54.97258759 71.41448975]
[61.69833755 58.00686646]
[53.82071686 45.24195099]
[45.94309616 32.47703552]
[32.11119843 24.79659653]
[32.01155472 9.90232468]
[24.13393784 -2.86259222]
[16.25631714 -15.62750912]
[1.57112622 -22.92663193]
[0.81994939 -39.30856705]
[14.77553368 -47.92098236]
[29.08156967 -39.90416336]
[29.02123451 -23.50512886]
[36.89885330 -10.74021149]
[44.77647400 2.02470565]
[58.04491425 8.79211044]
[58.70801544 24.59941483]
[66.58563232 37.36433029]
[74.46325684 50.12924957]
[89.40525818 48.81148148]
[94.92712402 34.86483383]
[100.44899750 20.91818619]
[105.97086334 6.97153902]
[111.49272919 -6.97510815]
[117.01459503 -20.92175484]
[122.53646851 -34.86840439]
[128.05833435 -48.81505203]
[128.26736450 -65.76770782]
[144.61537170 -70.25981140]
[153.45750427 -55.79422760]
[142.00498962 -43.29318237]
[136.48310852 -29.34653473]
[130.96124268 -15.39988708]
[125.43937683 -1.45324004]
[119.91751099 12.49340725]
[114.39563751 26.44005394]
[108.87377167 40.38670349]
[103.35190582 54.33334732]
[130.42753601 63.82562637]
[147.28910828 88.15582275]
[146.63481140 118.66127777]
[161.63362122 118.84976959]
[176.63244629 119.03826141]
[191.63125610 119.22675323]
[206.63006592 119.41524506]
[221.62889099 119.60372925]
[236.62770081 119.79222107]
[245.36019897 116.74417114]
[251.99983215 120.17864990]
[266.98916626 120.74400330]
[281.97851562 121.30935669]
[296.21896362 113.17659760]
[310.24404907 121.67536926]
[309.62594604 138.06286621]
[295.00051880 145.48103333]
[281.41314697 136.29869080]
[266.42382812 135.73333740]
[251.43447876 135.16798401]
[236.43920898 134.79104614]
[221.44039917 134.60255432]
[206.44158936 134.41406250]
[191.44276428 134.22557068]
[176.44395447 134.03707886]
[161.44512939 133.84858704]
[146.44631958 133.66009521]
[141.24391174 139.06240845]
[154.31625366 146.41864014]
[167.38858032 153.77487183]
[182.34851074 154.87054443]
[194.38731384 163.81858826]
[199.74925232 177.82749939]
[196.76161194 192.52694702]
[186.35639954 203.33119202]
[171.77973938 206.86965942]
[157.57905579 202.03846741]
[148.18449402 190.34477234]
[146.52651978 175.43861389]
[138.68281555 162.65283203]
[130.83912659 149.86705017]
[125.63671875 155.26936340]
[126.39038849 170.25042725]
[133.22491455 185.76574707]
[120.20791626 196.62826538]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 122]
[2 121]
[3 14]
[4 13]
[5 12]
[6 11]
[17 42]
[18 41]
[19 40]
[20 39]
[21 38]
[22 37]
[23 36]
[24 35]
[25 34]
[43 60]
[44 59]
[45 58]
[47 56]
[48 55]
[49 54]
[61 79]
[62 78]
[63 77]
[64 76]
[65 75]
[66 74]
[67 73]
[68 72]
[82 106]
[83 105]
[84 104]
[85 103]
[86 102]
[87 101]
[88 100]
[90 99]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
