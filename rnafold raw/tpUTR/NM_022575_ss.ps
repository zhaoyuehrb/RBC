%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 05:47:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGUCCAUCCUGUACAUCUCAAGCAAGGGGUUCCUCCCCUAGCACCUGGGCUUGGCAGAAGGGCCAUAGUUCAUCCAGCUCCUCCCCUAGAGCAAUGCUGAGGAGCGGGGGCAUGGUAGCAGGGCUGUCUGGUUUUAAAUAAAGUUGGAACACUUCA\
) } def
/len { sequence length } bind def

/coor [
[167.67988586 338.33306885]
[167.38352966 323.33599854]
[167.08717346 308.33892822]
[166.79081726 293.34185791]
[166.49446106 278.34478760]
[151.97187805 254.54801941]
[162.26055908 232.37777710]
[155.41111755 219.03291321]
[148.43017578 205.75637817]
[141.31842041 192.54945374]
[134.20666504 179.34252930]
[127.09490204 166.13560486]
[119.98314667 152.92866516]
[112.87138367 139.72174072]
[106.88838196 141.18299866]
[100.75550842 141.74827576]
[94.60620117 141.40527344]
[88.57423401 140.16143799]
[82.79085541 138.04385376]
[77.38188171 135.09858704]
[72.46498871 131.38969421]
[68.14715576 126.99788666]
[64.52231598 122.01871490]
[61.66933823 116.56049347]
[47.05489731 119.93957520]
[35.35244370 130.58677673]
[21.20931816 125.91545868]
[6.59487867 129.29454041]
[-8.01955986 132.67361450]
[-22.63399887 136.05268860]
[-37.24843979 139.43177795]
[-46.93091965 152.22354126]
[-62.97184372 152.48493958]
[-73.06598663 140.01547241]
[-69.46998596 124.38062286]
[-54.94238663 117.57412720]
[-40.62751770 124.81733704]
[-26.01307869 121.43825531]
[-11.39863873 118.05918121]
[3.21580005 114.68009949]
[17.83023834 111.30101776]
[28.48737144 100.89550781]
[43.67581940 105.32513428]
[58.29026031 101.94605255]
[58.59622574 94.59471893]
[60.18778992 87.41121674]
[63.01553345 80.61859894]
[66.99165344 74.42778015]
[56.97673798 63.26079559]
[46.96182251 52.09381104]
[36.94691086 40.92683029]
[26.93199539 29.75984764]
[16.91707993 18.59286690]
[6.79233503 7.52536726]
[-3.44125223 -3.44156885]
[-13.67483997 -14.40850544]
[-23.90842628 -25.37544060]
[-39.70994568 -25.67124939]
[-50.61381531 -37.11158371]
[-50.15095901 -52.90909195]
[-38.59598541 -63.69139481]
[-22.80425262 -63.06154633]
[-12.14471626 -51.39321899]
[-12.94149113 -35.60902786]
[-2.70790362 -24.64209175]
[7.52568388 -13.67515659]
[17.75927162 -2.70822024]
[24.65867233 0.05135157]
[28.08406258 8.57795238]
[38.09897614 19.74493408]
[48.11389160 30.91191673]
[58.12880707 42.07889938]
[68.14372253 53.24588013]
[78.15863800 64.41286469]
[98.76265717 58.26322174]
[119.69480133 63.18146515]
[129.03059387 51.44080734]
[138.36637878 39.70014572]
[147.58572388 27.86783218]
[156.68772888 15.94501495]
[165.78971863 4.02219868]
[174.89172363 -7.90061808]
[183.99372864 -19.82343483]
[193.09573364 -31.74625206]
[195.31965637 -47.41037369]
[209.19258118 -52.83170700]
[218.17636108 -64.84386444]
[227.04103088 -76.94418335]
[235.90568542 -89.04450226]
[234.71716309 -101.92270660]
[242.39352417 -111.82771301]
[254.36833191 -113.76101685]
[263.47033691 -125.68383026]
[272.57232666 -137.60664368]
[277.37756348 -153.86537170]
[294.33111572 -153.74879456]
[298.91229248 -137.42553711]
[284.49514771 -128.50465393]
[275.39315796 -116.58183289]
[266.29113770 -104.65901184]
[265.01129150 -87.17949677]
[248.00601196 -80.17983246]
[239.14134216 -68.07951355]
[230.27667236 -55.97919846]
[228.85304260 -48.68603516]
[221.11540222 -43.72970581]
[219.54252625 -28.91838264]
[205.01853943 -22.64424896]
[195.91654968 -10.72143269]
[186.81454468 1.20138419]
[177.71253967 13.12420082]
[168.61053467 25.04701805]
[159.50852966 36.96983337]
[157.94108582 44.23344803]
[150.10704041 49.03593445]
[140.77125549 60.77659225]
[131.43545532 72.51725006]
[141.07905579 92.51659393]
[139.10751343 114.63187408]
[126.07830811 132.60998535]
[133.19006348 145.81690979]
[140.30183411 159.02383423]
[147.41358948 172.23075867]
[154.52534485 185.43769836]
[161.63710022 198.64462280]
[168.49809265 204.75714111]
[168.75596619 212.18347168]
[175.60540771 225.52833557]
[186.60704041 224.74667358]
[197.46015930 229.05688477]
[205.81332397 238.12161255]
[209.61125183 250.52932739]
[207.57609558 264.00222778]
[216.67808533 275.92504883]
[225.78009033 287.84786987]
[234.88209534 299.77066040]
[243.98410034 311.69348145]
[253.08610535 323.61630249]
[262.18811035 335.53912354]
[277.88339233 337.39202881]
[287.60571289 349.85205078]
[285.58697510 365.52685547]
[273.02487183 375.11691284]
[257.37228394 372.93255615]
[247.91557312 360.26977539]
[250.26528931 344.64111328]
[241.16328430 332.71832275]
[232.06127930 320.79550171]
[222.95927429 308.87268066]
[213.85726929 296.94985962]
[204.75527954 285.02703857]
[195.65327454 273.10421753]
[181.49153137 278.04843140]
[181.78788757 293.04550171]
[182.08424377 308.04257202]
[182.38059998 323.03964233]
[182.67695618 338.03671265]
[185.24784851 357.24713135]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 157]
[2 156]
[3 155]
[4 154]
[5 153]
[7 128]
[8 127]
[9 125]
[10 124]
[11 123]
[12 122]
[13 121]
[14 120]
[24 44]
[25 43]
[27 41]
[28 40]
[29 39]
[30 38]
[31 37]
[48 74]
[49 73]
[50 72]
[51 71]
[52 70]
[53 69]
[54 67]
[55 66]
[56 65]
[57 64]
[76 117]
[77 116]
[78 115]
[79 113]
[80 112]
[81 111]
[82 110]
[83 109]
[84 108]
[86 106]
[87 104]
[88 103]
[89 102]
[92 100]
[93 99]
[94 98]
[133 152]
[134 151]
[135 150]
[136 149]
[137 148]
[138 147]
[139 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
