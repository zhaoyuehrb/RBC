%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 20:40:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCCCUGCCCCCUACCCUUGCCCUUUAACUUAUUGGGACUGAAUAAAGAAUGGAGAGGCCCUCUCAGGCUACCAA\
) } def
/len { sequence length } bind def

/coor [
[172.03067017 253.38160706]
[165.05981445 240.09976196]
[158.08897400 226.81793213]
[151.11811829 213.53608704]
[138.35243225 205.86235046]
[138.79020691 190.04719543]
[131.81935120 176.76536560]
[124.84851074 163.48352051]
[110.59619904 159.31130981]
[103.33757019 145.94094849]
[107.81039429 131.02009583]
[100.83954620 117.73825836]
[84.62101746 108.87905884]
[85.05799103 90.40380096]
[77.04100037 77.72595215]
[61.34989548 80.57332611]
[45.79272842 77.24507141]
[32.70304871 68.27009583]
[24.03296471 55.02208328]
[21.06206703 39.50928497]
[24.20862579 24.07010460]
[32.97098541 11.02061939]
[24.20315742 -1.15004826]
[15.19202232 -13.14168930]
[6.18088865 -25.13333130]
[-8.91605473 -22.61522102]
[-23.45032883 -27.41245842]
[-34.08206177 -38.42267227]
[-38.36816025 -53.11579895]
[-35.32371140 -68.11546326]
[-25.64830589 -79.97485352]
[-11.56527996 -85.96876526]
[3.68918729 -84.71984863]
[16.60973358 -76.51508331]
[24.22731018 -63.23987961]
[24.79145432 -47.94477081]
[18.17253113 -34.14446640]
[27.18366432 -22.15282440]
[36.19479752 -10.16118240]
[42.91556168 -6.60898924]
[45.31574631 2.49964809]
[59.05598831 -0.97993970]
[73.18402863 0.48798889]
[85.96952057 6.74449921]
[95.83937836 17.04289627]
[101.57129669 30.13778687]
[102.44512177 44.43566513]
[98.33327484 58.18881989]
[89.71884918 69.70896149]
[97.73583984 82.38681793]
[107.87850952 84.08522797]
[115.37898254 91.12094116]
[117.72184753 101.13439941]
[114.12138367 110.76741028]
[121.09223175 124.04925537]
[135.91270447 128.84419250]
[142.79292297 142.41317749]
[138.13035583 156.51268005]
[145.10119629 169.79450989]
[152.07205200 183.07635498]
[165.33634949 191.70010376]
[164.39996338 206.56524658]
[171.37081909 219.84707642]
[178.34165955 233.12892151]
[185.31250000 246.41076660]
[200.50703430 245.38793945]
[214.80171204 250.63980103]
[225.71989441 261.25643921]
[231.36994934 275.39846802]
[230.77296448 290.61569214]
[224.03236389 304.27160645]
[212.31600952 314.00027466]
[197.65382385 318.11611938]
[182.58612061 315.90609741]
[169.72348022 307.75302124]
[161.29441833 295.06954956]
[158.75932312 280.05313110]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 65]
[2 64]
[3 63]
[4 62]
[6 60]
[7 59]
[8 58]
[11 55]
[12 54]
[14 50]
[15 49]
[22 41]
[23 39]
[24 38]
[25 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
