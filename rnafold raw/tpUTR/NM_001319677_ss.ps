%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 19:56:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCUGGGGUCACCUCAGGGACAGCGUCCAGGCUUCAGCCAAGGGCUCCCUGGCAAGGGGCUGUUGGGUAGAAGUGGUGGUGGGGGGGACAAAAGACAAAAAAAUCCACCAGAGCUUUGUAUUUUUGUUACGUACUGUUUCUUUGAUAAUUGAUGUGAUAAGGAAAAAAGUCCUAUUUUUAUACUCCCAACAA\
) } def
/len { sequence length } bind def

/coor [
[118.03029633 139.06297302]
[97.47121429 148.36091614]
[92.23960114 162.41902161]
[87.00798798 176.47712708]
[81.77636719 190.53521729]
[76.54475403 204.59332275]
[71.31313324 218.65142822]
[66.08152008 232.70951843]
[60.84990311 246.76762390]
[60.99229050 263.72097778]
[44.74090195 268.55096436]
[35.60084915 254.27174377]
[46.79180527 241.53601074]
[52.02341843 227.47790527]
[57.25503540 213.41979980]
[62.48665237 199.36170959]
[67.71826935 185.30360413]
[72.94988251 171.24549866]
[78.18150330 157.18740845]
[83.41311646 143.12930298]
[77.98257446 137.95637512]
[71.49932098 151.48292542]
[56.63137817 149.49688721]
[53.92578506 134.74290466]
[67.12148285 127.61051941]
[61.69094086 122.43759155]
[47.90348434 128.34573364]
[34.11602783 134.25386047]
[20.32857323 140.16200256]
[9.65092087 155.15621948]
[-7.67663717 152.41578674]
[-21.36661339 158.54641724]
[-35.05659103 164.67703247]
[-44.22343445 178.27487183]
[-60.56188965 176.86529541]
[-67.26435852 161.89837646]
[-57.43590927 148.77078247]
[-41.18721390 150.98706055]
[-27.49723625 144.85644531]
[-13.80725956 138.72581482]
[-9.19939327 127.53160858]
[2.16762757 122.31597900]
[14.42043781 126.37454224]
[28.20789337 120.46640778]
[41.99534988 114.55827332]
[55.78280258 108.65013123]
[53.96548080 93.76062775]
[39.16172791 91.34217072]
[24.35797882 88.92370605]
[9.55422688 86.50524139]
[-5.24952316 84.08677673]
[-20.38801384 90.39218140]
[-33.25183105 80.22093201]
[-30.60778046 64.03633881]
[-15.17583656 58.48772430]
[-2.83105946 69.28302765]
[11.97269154 71.70149231]
[26.77644157 74.11994934]
[41.58019257 76.53841400]
[56.38394165 78.95687866]
[91.91597748 63.25917435]
[117.02819824 79.28907013]
[129.41525269 70.82971191]
[141.80232239 62.37036133]
[154.18937683 53.91100311]
[166.57644653 45.45164871]
[178.96350098 36.99229431]
[191.35057068 28.53293800]
[203.45719910 19.67690277]
[215.27072144 10.43347549]
[227.08422852 1.19004810]
[238.89773560 -8.05337906]
[250.71125793 -17.29680634]
[262.52474976 -26.54023361]
[274.33828735 -35.78366089]
[286.15179443 -45.02708817]
[297.96530151 -54.27051544]
[303.98486328 -68.00968170]
[302.77166748 -82.96054077]
[301.55847168 -97.91139221]
[300.34524536 -112.86225128]
[299.13204956 -127.81311035]
[297.91885376 -142.76396179]
[296.70562744 -157.71482849]
[281.91247559 -160.77084351]
[268.58016968 -167.87199402]
[257.78952026 -178.44262695]
[250.41525269 -191.62583923]
[247.05517578 -206.35290527]
[247.98168945 -221.42997742]
[253.11965942 -235.63482666]
[262.05261230 -247.81593323]
[274.05633545 -256.98583984]
[288.15780640 -262.40115356]
[303.21383667 -263.62289429]
[318.00390625 -260.55200195]
[331.32907104 -253.43746948]
[342.10910034 -242.85600281]
[349.47012329 -229.66539001]
[352.81539917 -214.93495178]
[351.87374878 -199.85881042]
[346.72149658 -185.65913391]
[337.77633667 -173.48699951]
[325.76336670 -164.32917786]
[311.65649414 -158.92802429]
[312.86968994 -143.97717285]
[314.08291626 -129.02632141]
[315.29611206 -114.07545471]
[316.50930786 -99.12460327]
[317.72253418 -84.17374420]
[318.93572998 -69.22288513]
[329.87664795 -69.85384369]
[338.95373535 -65.42212677]
[344.19183350 -57.80373764]
[359.12109375 -59.25888443]
[374.05035400 -60.71403122]
[388.97958374 -62.16917801]
[403.90884399 -63.62432861]
[411.21563721 -74.94931030]
[423.53283691 -79.92138672]
[436.27493286 -76.93135834]
[444.83612061 -67.29037476]
[459.78698730 -68.50358582]
[474.73782349 -69.71678925]
[489.68869019 -70.92999268]
[504.63955688 -72.14320374]
[519.59039307 -73.35640717]
[534.54125977 -74.56961823]
[549.49212646 -75.78282166]
[564.44299316 -76.99603271]
[579.39385986 -78.20923615]
[594.34466553 -79.42243958]
[609.29553223 -80.63565063]
[617.60986328 -84.45362091]
[624.49798584 -81.74544525]
[637.76837158 -90.35980225]
[650.96978760 -83.46256256]
[665.93835449 -84.43350983]
[680.90692139 -85.40445709]
[689.08172607 -98.59353638]
[703.46032715 -104.42749023]
[718.51385498 -100.66304779]
[728.45391846 -88.74771881]
[729.45831299 -73.26318359]
[721.14093018 -60.16356659]
[706.69982910 -54.48593521]
[691.68804932 -58.41345596]
[681.87786865 -70.43591309]
[666.90930176 -69.46496582]
[651.94073486 -68.49401855]
[639.74102783 -59.94911194]
[625.46893311 -66.77690125]
[610.50872803 -65.68479156]
[595.55792236 -64.47158813]
[580.60705566 -63.25837708]
[565.65618896 -62.04517365]
[550.70532227 -60.83196640]
[535.75445557 -59.61875916]
[520.80358887 -58.40555191]
[505.85275269 -57.19234467]
[490.90188599 -55.97913742]
[475.95104980 -54.76593399]
[461.00018311 -53.55272675]
[446.04931641 -52.33951950]
[435.72293091 -39.07345200]
[418.66183472 -37.33951569]
[405.36398315 -48.69507599]
[390.43475342 -47.23992920]
[375.50549316 -45.78478241]
[360.57623291 -44.32963181]
[345.64700317 -42.87448502]
[328.50189209 -28.62646866]
[307.20874023 -42.45700073]
[295.39520264 -33.21357346]
[283.58169556 -23.97014809]
[271.76818848 -14.72672081]
[259.95468140 -5.48329401]
[248.14117432 3.76013279]
[236.32765198 13.00356007]
[224.51414490 22.24698639]
[212.70063782 31.49041367]
[212.23318481 34.26812363]
[210.62939453 37.02652740]
[207.89155579 39.32894516]
[204.18096924 40.74783707]
[199.80992126 40.91999817]
[187.42286682 49.37935638]
[175.03579712 57.83871078]
[162.64874268 66.29806519]
[150.26167297 74.75742340]
[137.87461853 83.21677399]
[125.48754883 91.67613220]
[131.75698853 105.41896057]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 20]
[3 19]
[4 18]
[5 17]
[6 16]
[7 15]
[8 14]
[9 13]
[26 46]
[27 45]
[28 44]
[29 43]
[31 40]
[32 39]
[33 38]
[47 60]
[48 59]
[49 58]
[50 57]
[51 56]
[62 192]
[63 191]
[64 190]
[65 189]
[66 188]
[67 187]
[68 186]
[69 181]
[70 180]
[71 179]
[72 178]
[73 177]
[74 176]
[75 175]
[76 174]
[77 173]
[78 111]
[79 110]
[80 109]
[81 108]
[82 107]
[83 106]
[84 105]
[114 171]
[115 170]
[116 169]
[117 168]
[118 167]
[122 164]
[123 163]
[124 162]
[125 161]
[126 160]
[127 159]
[128 158]
[129 157]
[130 156]
[131 155]
[132 154]
[133 153]
[135 152]
[137 150]
[138 149]
[139 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
