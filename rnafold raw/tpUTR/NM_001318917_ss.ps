%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 00:17:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCCCACCUCAAGUGAUUCUGAGAGCUCAUCAGAAGACCAAGACCUAUCUCAUCUCUAGGUUAACCUCUAGAAAUGGUCUCCUGUGCAGAGAAACUACAUAUUGCACCAAGAUUCUUGGAUGUUGGUGAUUAAAAUUCAACCAA\
) } def
/len { sequence length } bind def

/coor [
[108.09443665 155.20814514]
[108.25558472 170.20729065]
[93.25644684 170.36819458]
[93.09530640 155.36953735]
[92.93392181 140.37039185]
[85.43435669 140.45109558]
[78.59575653 153.80149841]
[71.75715637 167.15191650]
[75.29361725 182.80033875]
[65.15209198 195.23129272]
[49.11227798 194.90884399]
[39.47855377 182.08032227]
[43.64109039 166.58668518]
[58.40674210 160.31330872]
[65.24534607 146.96290588]
[72.08394623 133.61248779]
[72.00856781 126.43605804]
[73.20149994 119.78408051]
[59.43774414 125.74722290]
[45.67398834 131.71037292]
[31.91023445 137.67350769]
[18.14648056 143.63665771]
[4.38272667 149.59979248]
[0.09541197 164.63818359]
[-12.88424969 173.35955811]
[-28.42765999 171.64595032]
[-39.19569397 160.30648804]
[-40.10401917 144.69531250]
[-30.72374725 132.18353271]
[-15.48395920 128.67884827]
[-1.58041561 135.83604431]
[12.18333912 129.87289429]
[25.94709396 123.90975952]
[39.71084595 117.94661713]
[53.47460175 111.98347473]
[67.23835754 106.02033234]
[69.58461761 86.41786194]
[82.61498260 71.58643341]
[101.75222015 66.73591614]
[105.89367676 52.31896591]
[110.03513336 37.90201950]
[114.17658997 23.48507500]
[118.31803894 9.06812763]
[122.45949554 -5.34881926]
[111.91317749 5.31772280]
[98.19361115 11.38184261]
[83.63619995 7.76495457]
[74.35013580 -4.01507235]
[74.23242950 -19.01461029]
[83.33246613 -30.93892670]
[97.83115387 -34.78385162]
[109.25537872 -25.06340790]
[103.88990784 -39.07096481]
[98.52443695 -53.07852554]
[86.36276245 -63.19802094]
[89.03561401 -77.85083771]
[83.67014313 -91.85839844]
[78.30466461 -105.86595917]
[72.93919373 -119.87351227]
[67.57372284 -133.88107300]
[62.20824814 -147.88862610]
[47.67463303 -154.09747314]
[41.86574554 -168.79550171]
[48.22789383 -183.26266479]
[62.98652649 -188.91583252]
[77.38561249 -182.40107727]
[82.88242340 -167.58351135]
[76.21580505 -153.25410461]
[81.58127594 -139.24655151]
[86.94675446 -125.23899078]
[92.31222534 -111.23143005]
[97.67769623 -97.22386932]
[103.04317474 -83.21631622]
[114.82107544 -74.09873199]
[112.53199005 -58.44399643]
[117.89746857 -44.43643951]
[123.26293945 -30.42888069]
[137.53872681 -25.82433319]
[150.07760620 -34.05698013]
[162.61650085 -42.28962326]
[175.15538025 -50.52226639]
[176.36541748 -63.98031616]
[184.99765015 -74.12107849]
[197.71188354 -77.36794281]
[209.78504944 -72.74711609]
[222.49815369 -80.70806885]
[235.21127319 -88.66901398]
[247.92439270 -96.62996674]
[260.63751221 -104.59091949]
[273.35061646 -112.55187225]
[271.61380005 -127.71585083]
[276.63650513 -142.12887573]
[287.42147827 -152.92921448]
[301.82730103 -157.97247314]
[316.99374390 -156.25730896]
[329.90948486 -148.12425232]
[338.01007080 -135.18812561]
[339.68716431 -120.01743317]
[334.60772705 -105.62429810]
[323.78033447 -94.86650085]
[309.35473633 -89.88001251]
[294.19515991 -91.65489960]
[281.31155396 -99.83875275]
[268.59844971 -91.87780762]
[255.88534546 -83.91685486]
[243.17222595 -75.95590210]
[230.45910645 -67.99494934]
[217.74600220 -60.03400040]
[214.70942688 -43.52585983]
[200.41096497 -34.10705948]
[183.38801575 -37.98338318]
[170.84913635 -29.75074005]
[158.31025696 -21.51809692]
[145.77137756 -13.28545189]
[136.87644958 -1.20736468]
[132.73498535 13.20958233]
[128.59353638 27.62652969]
[124.45207977 42.04347610]
[120.31062317 56.46042252]
[116.16916656 70.87737274]
[129.95660400 80.20502472]
[138.29420471 96.00756836]
[138.22410583 115.09720612]
[128.63279724 133.00405884]
[135.75706482 146.20423889]
[142.88133240 159.40443420]
[150.00559998 172.60461426]
[157.12986755 185.80479431]
[164.39573669 198.92756653]
[171.80236816 211.97140503]
[187.21417236 214.61909485]
[197.27890015 226.58718872]
[197.24427795 242.22473145]
[187.12666321 254.14814758]
[171.70329285 256.72756958]
[158.25659180 248.74507141]
[153.13569641 233.96974182]
[158.75852966 219.37803650]
[151.35189819 206.33419800]
[145.26995850 202.03962708]
[143.92968750 192.92906189]
[136.80541992 179.72888184]
[129.68115234 166.52870178]
[122.55688477 153.32850647]
[115.43261719 140.12832642]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 16]
[7 15]
[8 14]
[18 36]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[39 120]
[40 119]
[41 118]
[42 117]
[43 116]
[44 115]
[52 77]
[53 76]
[54 75]
[56 73]
[57 72]
[58 71]
[59 70]
[60 69]
[61 68]
[78 114]
[79 113]
[80 112]
[81 111]
[85 108]
[86 107]
[87 106]
[88 105]
[89 104]
[90 103]
[124 145]
[125 144]
[126 143]
[127 142]
[128 141]
[129 139]
[130 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
