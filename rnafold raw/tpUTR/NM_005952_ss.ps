%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 17:13:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCAGGACAGCUGUGCUCUCAGAUGUAAAUAGAGCAACCUAUAUAAACCUGGAUUUUUUUUUUUUUUUUUUUUGUACAACCCUGACCCGUUUGCUACAUCUUUUUUUCUAUGAAAUAUGUGAAUGGCAAUAAAUUCAUCUAGACUA\
) } def
/len { sequence length } bind def

/coor [
[-128.81820679 176.09977722]
[-142.65853882 161.44732666]
[-153.29609680 144.33247375]
[-167.21443176 149.92532349]
[-181.13276672 155.51817322]
[-195.05110168 161.11100769]
[-208.96943665 166.70385742]
[-207.90858459 184.41406250]
[-212.90101624 201.41458130]
[-223.34152222 215.70112610]
[-237.98358154 225.59495544]
[-255.08811951 229.94018555]
[-272.63012695 228.23884583]
[-288.53836060 220.70780945]
[-300.93988037 208.25135803]
[-314.33377075 215.00440979]
[-327.72766113 221.75746155]
[-341.12155151 228.51052856]
[-354.51544189 235.26358032]
[-367.90933228 242.01663208]
[-368.09545898 257.32101440]
[-375.38275146 270.78033447]
[-388.09667969 279.30178833]
[-403.31564331 280.92715454]
[-417.54244995 275.28298950]
[-427.50787354 263.66622925]
[-430.92193604 248.74635315]
[-427.00009155 233.95182800]
[-416.64361572 222.68232727]
[-402.23226929 217.52751160]
[-387.07772827 219.67190552]
[-374.66238403 228.62274170]
[-361.26849365 221.86968994]
[-347.87460327 215.11663818]
[-334.48071289 208.36357117]
[-321.08682251 201.61051941]
[-307.69293213 194.85746765]
[-310.18301392 182.64228821]
[-309.64215088 170.17649841]
[-306.09704590 158.20156860]
[-299.75341797 147.43112183]
[-290.98379517 138.50833130]
[-280.30584717 131.96752930]
[-268.35165405 128.20225525]
[-255.83047485 127.44154358]
[-243.48651123 129.73600769]
[-232.05477905 134.95449829]
[-222.21725464 142.79161072]
[-214.56228638 152.78552246]
[-200.64395142 147.19267273]
[-186.72561646 141.59983826]
[-172.80728149 136.00698853]
[-158.88894653 130.41413879]
[-161.63493347 119.82775879]
[-163.21470642 109.00474548]
[-163.60934448 98.07318878]
[-162.81396484 87.16247559]
[-160.83776855 76.40179443]
[-157.70393372 65.91855621]
[-153.44937134 55.83692551]
[-148.12423706 46.27632904]
[-141.79139709 37.35004425]
[-134.52561951 29.16386604]
[-126.41277313 21.81483841]
[-117.54874420 15.39012051]
[-108.03835297 9.96593571]
[-97.99406433 5.60667992]
[-87.53469086 2.36415362]
[-76.78400421 0.27694419]
[-65.86920929 -0.63003105]
[-54.91950226 -0.34582314]
[-44.06451416 1.12641644]
[-33.43276978 3.76947093]
[-23.15017319 7.55225897]
[-13.33852482 12.43020058]
[-4.11406755 18.34574318]
[4.41388607 25.22903633]
[12.14424992 32.99876785]
[18.98536301 41.56310654]
[24.85607338 50.82080460]
[29.68670845 60.66238403]
[33.41988754 70.97144318]
[36.01122284 81.62599945]
[37.42982864 92.50000000]
[52.42982864 92.50000000]
[67.42983246 92.50000000]
[73.89600372 79.12783051]
[85.51785278 69.87802124]
[100.00000000 66.57746124]
[114.48214722 69.87802124]
[126.10399628 79.12783051]
[132.57017517 92.50000000]
[147.57017517 92.50000000]
[162.57017517 92.50000000]
[177.57017517 92.50000000]
[192.57017517 92.50000000]
[207.55665588 91.86338043]
[222.50262451 90.59129333]
[237.44857788 89.31920624]
[252.39454651 88.04711914]
[265.48883057 79.16735077]
[278.82641602 85.79743195]
[293.77236938 84.52534485]
[308.71835327 83.25325012]
[323.66430664 81.98116302]
[332.51528931 69.08952332]
[347.59585571 64.95307922]
[361.78546143 71.52493286]
[368.38418579 85.70205688]
[364.27630615 100.79044342]
[351.40145874 109.66582489]
[335.83874512 108.13751221]
[324.93640137 96.92712402]
[309.99044800 98.19921875]
[295.04446411 99.47130585]
[280.09851074 100.74339294]
[268.07327271 109.53216553]
[253.66662598 102.99308014]
[238.72067261 104.26516724]
[223.77470398 105.53725433]
[208.82875061 106.80934143]
[206.90568542 108.93878174]
[203.99423218 110.40708923]
[200.35229492 110.82277679]
[196.37846375 109.89888000]
[192.57017517 107.50000000]
[177.57017517 107.50000000]
[162.57017517 107.50000000]
[147.57017517 107.50000000]
[132.57017517 107.50000000]
[126.10399628 120.87216949]
[114.48214722 130.12197876]
[100.00000000 133.42253113]
[85.51785278 130.12197876]
[73.89600372 120.87216949]
[67.42983246 107.50000000]
[52.42982864 107.50000000]
[37.42982864 107.50000000]
[33.89374161 127.39115906]
[26.46300316 146.17338562]
[15.43781281 163.09259033]
[1.26264107 177.46980286]
[-15.49167728 188.72853088]
[-34.15093231 196.41777039]
[-53.96466827 200.23013306]
[-74.13637543 200.01408386]
[-93.85549164 195.78007507]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 53]
[4 52]
[5 51]
[6 50]
[7 49]
[15 37]
[16 36]
[17 35]
[18 34]
[19 33]
[20 32]
[84 138]
[85 137]
[86 136]
[92 130]
[93 129]
[94 128]
[95 127]
[96 126]
[97 121]
[98 120]
[99 119]
[100 118]
[102 116]
[103 115]
[104 114]
[105 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
