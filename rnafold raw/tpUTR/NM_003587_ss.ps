%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 16:04:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAAGGACGUAAACAGAACCUGACACCAGCUCCUUUUCCUUCUAUACAUUAUUUAAUACCUAUUAAAUAAAAUUAUUUUUGGAAUAAAGCUUGUGGGAACAUUUGGGAUCUAGAGAAAGUGA\
) } def
/len { sequence length } bind def

/coor [
[92.21966553 412.39016724]
[77.15969086 412.49563599]
[62.42922211 409.36077881]
[48.71723938 403.13217163]
[36.66507339 394.10113525]
[26.83642769 382.69009399]
[19.69100380 369.43276978]
[15.56300545 354.94918823]
[14.64550877 339.91683960]
[16.98142624 325.03872681]
[22.46150208 311.01080322]
[30.82942390 298.48913574]
[41.69380951 288.05941772]
[54.54650879 280.20944214]
[68.78637695 275.30636597]
[83.74739838 273.57952881]
[85.26492310 258.65649414]
[86.78244781 243.73344421]
[80.37244415 230.28871155]
[89.46618652 217.34210205]
[90.98371124 202.41906738]
[92.50123596 187.49603271]
[94.01876068 172.57298279]
[95.53628540 157.64994812]
[95.72629547 142.65115356]
[94.58730316 127.69445801]
[93.44830322 112.73776245]
[85.71740723 101.08766174]
[91.59500122 88.40122986]
[90.45600891 73.44453430]
[89.31700897 58.48784256]
[88.17801666 43.53115082]
[75.88626099 37.15272903]
[68.43545532 25.60889626]
[67.69714355 11.99799728]
[73.75820160 -0.08984113]
[84.92618561 -7.51967525]
[84.16645050 -22.50042343]
[83.40671539 -37.48117065]
[82.64697266 -52.46191788]
[69.07756042 -59.52011490]
[60.91682434 -72.33804321]
[60.27196884 -87.41950226]
[67.21612549 -100.70989990]
[79.79560089 -108.68627167]
[79.03585815 -123.66701508]
[78.27612305 -138.64776611]
[65.10356903 -150.07534790]
[64.23109436 -167.15547180]
[75.71044922 -179.37545776]
[74.57144928 -194.33215332]
[73.43245697 -209.28884888]
[72.29345703 -224.24554443]
[71.15446472 -239.20223999]
[70.01546478 -254.15893555]
[68.87646484 -269.11563110]
[67.73747253 -284.07232666]
[66.59847260 -299.02902222]
[56.90250778 -312.25476074]
[63.75510788 -327.15353394]
[80.10691071 -328.39877319]
[89.13658142 -314.70947266]
[81.55516815 -300.16799927]
[82.69416809 -285.21130371]
[83.83316040 -270.25460815]
[84.97216034 -255.29792786]
[86.11115265 -240.34123230]
[87.25015259 -225.38453674]
[88.38915253 -210.42784119]
[89.52814484 -195.47114563]
[90.66714478 -180.51445007]
[101.56922913 -173.52287292]
[106.49424744 -161.33358765]
[103.41922760 -148.35083008]
[93.25687408 -139.40750122]
[94.01660919 -124.42675781]
[94.77634430 -109.44600677]
[108.09823608 -102.78320312]
[116.35133362 -90.26352692]
[117.23554993 -75.19420624]
[110.41345215 -61.61643219]
[97.62772369 -53.22165680]
[98.38745880 -38.24090958]
[99.14720154 -23.26016045]
[99.90693665 -8.27941227]
[113.90715790 0.19124967]
[120.20085907 15.47490883]
[116.14482117 31.66894341]
[103.13470459 42.39215469]
[104.27370453 57.34884644]
[105.41269684 72.30554199]
[106.55169678 87.26223755]
[114.28259277 98.91233826]
[108.40499878 111.59877014]
[109.54399109 126.55546570]
[110.68299103 141.51216125]
[121.02149200 130.64405823]
[135.90179443 128.75285339]
[148.63024902 136.68923950]
[153.48118591 150.88320923]
[148.27250671 164.94981384]
[135.34722900 172.56146240]
[120.51956940 170.29418945]
[110.45932770 159.16748047]
[108.94180298 174.09051514]
[107.42427826 189.01354980]
[105.90675354 203.93659973]
[104.38922882 218.85963440]
[110.69068909 233.37176514]
[101.70549011 245.25097656]
[100.18796539 260.17401123]
[98.67044067 275.09704590]
[112.97759247 279.80017090]
[125.93899536 287.46936035]
[136.94841003 297.74588013]
[145.49090576 310.14907837]
[151.16694641 324.09887695]
[153.71104431 338.94277954]
[153.00421143 353.98654175]
[149.07949829 368.52648926]
[142.12048340 381.88262939]
[132.45263672 393.43023682]
[120.52816772 402.62918091]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 112]
[17 111]
[18 110]
[20 108]
[21 107]
[22 106]
[23 105]
[24 104]
[25 96]
[26 95]
[27 94]
[29 92]
[30 91]
[31 90]
[32 89]
[37 85]
[38 84]
[39 83]
[40 82]
[45 77]
[46 76]
[47 75]
[50 71]
[51 70]
[52 69]
[53 68]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
