%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:16:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGACCUGGUUCUCAACAGACCCAGUGAGCCCUUCACUCCUGAGAAAAAGGAAAGAUGAAAUAAAUAAAUAAACAUAUAUAUAUAGAUAUA\
) } def
/len { sequence length } bind def

/coor [
[202.87504578 150.20803833]
[188.99273682 144.52635193]
[175.11042786 138.84466553]
[161.51586914 144.82156372]
[147.35629272 139.25729370]
[141.17935181 124.95752716]
[127.29704285 119.27584076]
[113.41473389 113.59415436]
[100.01147461 119.09858704]
[86.60160828 113.61026764]
[80.90357971 100.28814697]
[67.02127075 94.60646820]
[53.13896561 88.92478180]
[39.25665665 83.24310303]
[25.37434959 77.56141663]
[11.49204063 71.87973785]
[1.47762060 76.75144196]
[-9.32867813 75.21956635]
[-17.26452637 68.05406189]
[-19.78096962 57.89099121]
[-33.24803543 51.28507614]
[-38.04620743 51.82539368]
[-42.27682495 50.78336334]
[-45.48087311 48.57168198]
[-47.39918900 45.71598816]
[-47.99237442 42.77243042]
[-60.44679642 34.41256332]
[-72.90121460 26.05269623]
[-85.35563660 17.69283104]
[-101.31118774 19.36615372]
[-112.46444702 7.83426666]
[-110.25958252 -8.05655289]
[-96.38799286 -16.11622810]
[-81.49076080 -10.16206741]
[-76.99577332 5.23840857]
[-64.54135132 13.59827518]
[-52.08692932 21.95814133]
[-39.63250732 30.31800842]
[-26.64212418 37.81800842]
[-13.17505646 44.42391968]
[5.81543159 41.51224136]
[17.17372322 57.99742508]
[31.05603218 63.67910767]
[44.93833923 69.36079407]
[58.82064819 75.04247284]
[72.70295715 80.72415924]
[86.58526611 86.40584564]
[99.98852539 80.90141296]
[113.39839172 86.38973236]
[119.09642029 99.71185303]
[132.97872925 105.39353180]
[146.86103821 111.07521820]
[161.29122925 105.20944214]
[175.28892517 111.16923523]
[180.79211426 124.96236420]
[194.67442322 130.64404297]
[208.55673218 136.32572937]
[216.46192932 123.53675842]
[226.36441040 112.22346497]
[237.99404907 102.69448853]
[251.03356934 95.20977783]
[265.12722778 89.97352600]
[279.89056396 87.12858582]
[294.92083740 86.75256348]
[309.80795288 88.85571289]
[324.14584351 93.38066864]
[337.54330444 100.20397949]
[349.63488770 109.13951111]
[360.09069824 119.94348145]
[368.62551880 132.32115173]
[375.00646973 145.93486023]
[379.05953979 160.41320801]
[380.67410278 175.36122131]
[379.80612183 190.37110901]
[376.47930908 205.03337097]
[370.78436279 218.94802856]
[362.87670898 231.73547363]
[352.97204590 243.04685974]
[341.34057617 252.57360840]
[328.29962158 260.05578613]
[314.20492554 265.28933716]
[299.44104004 268.13143921]
[284.41073608 268.50454712]
[269.52401733 266.39852905]
[255.18699646 261.87081909]
[241.79084778 255.04492188]
[229.70098877 246.10707092]
[219.24725342 235.30108643]
[210.71482849 222.92176819]
[204.33648682 209.30682373]
[200.28622437 194.82769775]
[198.67453003 179.87937927]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 57]
[2 56]
[3 55]
[6 52]
[7 51]
[8 50]
[11 47]
[12 46]
[13 45]
[14 44]
[15 43]
[16 42]
[20 40]
[21 39]
[26 38]
[27 37]
[28 36]
[29 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
