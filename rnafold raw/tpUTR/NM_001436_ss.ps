%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 22:28:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUCAGCGCUGUCAGGAUUGCGAGAGAUGUGUGUUGAUACUGUUGCACGUGUGUUUUUCUAUUAAAAGACUCAUCCGUCUCCCA\
) } def
/len { sequence length } bind def

/coor [
[110.44426727 121.66552734]
[123.88934326 115.01931000]
[109.52533722 110.69782257]
[95.87328339 113.71662140]
[86.15317535 103.66619110]
[71.78916931 99.34470367]
[57.42515945 95.02321625]
[43.06114960 90.70172882]
[28.69714165 86.38024139]
[13.25298023 89.81366730]
[3.29444599 78.73770905]
[-11.06956291 74.41622162]
[-25.43357277 70.09473419]
[-39.79758072 65.77324677]
[-54.16159058 61.45176315]
[-68.52559662 57.13027573]
[-83.96976471 60.56370163]
[-93.92829895 49.48774338]
[-108.29230499 45.16625595]
[-118.55769348 56.46159363]
[-132.71055603 62.17639160]
[-147.94085693 61.17597961]
[-161.22459412 53.65898895]
[-169.92427063 41.11791992]
[-172.31256104 26.04281425]
[-167.91526794 11.42684460]
[-157.60548401 0.17202108]
[-143.43022156 -5.48700190]
[-128.20397949 -4.42662096]
[-114.94995117 3.14262366]
[-106.29972839 15.71785355]
[-103.97081757 30.80224800]
[-89.60681152 35.12373352]
[-75.19005585 31.38120651]
[-64.20410919 42.76626587]
[-49.84010315 47.08775330]
[-35.47609329 51.40924072]
[-21.11208534 55.73072815]
[-6.74807644 60.05221176]
[7.61593246 64.37370300]
[22.03268433 60.63117218]
[33.01862717 72.01623535]
[47.38263702 76.33771515]
[61.74664688 80.65920258]
[76.11065674 84.98069000]
[90.47466278 89.30217743]
[104.12671661 86.28337860]
[113.84682465 96.33380890]
[128.21083069 100.65529633]
[143.17082214 101.75022888]
[158.01097107 99.56620789]
[172.85112000 97.38219452]
[185.37767029 87.71802521]
[199.09587097 93.51976776]
[213.93601990 91.33574677]
[228.77616882 89.15173340]
[243.61631775 86.96771240]
[258.45648193 84.78369904]
[273.29663086 82.59967804]
[282.52337646 69.76837158]
[298.13406372 67.30207062]
[310.86709595 76.66397858]
[313.16821289 92.29984283]
[303.67221069 104.93318939]
[288.01287842 107.06887054]
[275.48065186 97.43982697]
[260.64047241 99.62384796]
[245.80033875 101.80786133]
[230.96018982 103.99188232]
[216.12004089 106.17590332]
[201.27989197 108.35991669]
[189.81480408 117.86786652]
[175.03514099 112.22234344]
[160.19497681 114.40636444]
[145.35482788 116.59037781]
[157.69027710 125.12483215]
[165.28161621 138.06204224]
[166.71551514 152.99334717]
[161.72499084 167.13883972]
[151.23918152 177.86488342]
[137.21035767 183.17449951]
[122.25041199 182.07914734]
[109.14458466 174.78274536]
[100.33293915 162.64376831]
[97.45603180 147.92224121]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 49]
[3 48]
[5 46]
[6 45]
[7 44]
[8 43]
[9 42]
[11 40]
[12 39]
[13 38]
[14 37]
[15 36]
[16 35]
[18 33]
[19 32]
[50 75]
[51 74]
[52 73]
[54 71]
[55 70]
[56 69]
[57 68]
[58 67]
[59 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
