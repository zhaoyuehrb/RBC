%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 04:50:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUAGAAAUCCUCAGUGACAAAGGCUGUCCUGAGGUAGGAAAAAAAAAAAGAAACAGCAUUUCUAGAAACCUAGUCACUUCCUAAAGCAAAAGGAGAAACAUUCUUUACCUCCAAAUGUUUUAGUUU\
) } def
/len { sequence length } bind def

/coor [
[61.02302551 137.11601257]
[50.08568192 120.13364410]
[46.17897034 100.31536102]
[31.31332588 98.31221008]
[16.44768143 96.30905151]
[1.58203769 94.30590057]
[-13.28360653 92.30274200]
[-28.14925003 90.29958344]
[-43.01489258 88.29643250]
[-57.88053894 86.29327393]
[-72.72068787 88.47729492]
[-86.37892914 94.67829132]
[-100.03717041 100.87929535]
[-113.69541168 107.08029938]
[-127.35365295 113.28129578]
[-141.01190186 119.48229980]
[-147.61555481 125.94582367]
[-155.07907104 125.66348267]
[-168.88426208 131.53005981]
[-182.68945312 137.39662170]
[-196.49464417 143.26319885]
[-203.80766296 157.54252625]
[-219.55926514 160.58663940]
[-231.66616821 150.06036377]
[-230.84098816 134.03854370]
[-217.71673584 124.81175995]
[-202.36122131 129.45800781]
[-188.55601501 123.59143066]
[-174.75082397 117.72486115]
[-160.94563293 111.85829163]
[-147.21290588 105.82405853]
[-133.55465698 99.62305450]
[-119.89641571 93.42205811]
[-106.23817444 87.22105408]
[-92.57993317 81.02005005]
[-78.92169189 74.81904602]
[-93.70959473 72.30552673]
[-107.44116211 66.26863861]
[-119.29066467 57.07139206]
[-128.54556274 45.26685715]
[-134.64930725 31.56487846]
[-137.23487854 16.78939819]
[-136.14678955 1.82891512]
[-131.45046997 -12.41694832]
[-123.42833710 -25.09154129]
[-112.56277466 -35.43270111]
[-99.50717163 -42.81857681]
[-85.04659271 -46.80503082]
[-70.05062103 -47.15234756]
[-55.42098999 -43.83964157]
[-42.03744507 -37.06611633]
[-30.70477104 -27.23908615]
[-22.10444641 -14.94948006]
[-16.75363159 -0.93631524]
[-14.97409153 13.95775223]
[-16.87283516 28.83709335]
[-22.33568382 42.80696106]
[-31.03414154 55.02730942]
[-42.44513702 64.76328278]
[-55.87738037 71.42762756]
[-41.01173782 73.43078613]
[-26.14609337 75.43394470]
[-11.28045082 77.43709564]
[3.58519340 79.44025421]
[18.45083809 81.44340515]
[33.31648254 83.44656372]
[48.18212509 85.44972229]
[51.92467880 75.80152130]
[57.44457245 67.04794312]
[64.53773499 59.51258850]
[72.94193268 53.47405624]
[82.34645844 49.15557861]
[92.40364075 46.71681213]
[102.74165344 46.24792099]
[112.97830963 47.76623535]
[122.73516083 51.21562576]
[131.65148926 56.46856689]
[139.39767456 63.33086395]
[145.68733215 71.54881287]
[150.28793335 80.81859589]
[153.02940369 90.79751587]
[153.81036377 101.11664581]
[152.60197449 111.39449310]
[166.67642212 116.58197021]
[180.75088501 121.76943970]
[194.82533264 126.95690918]
[208.89978027 132.14437866]
[222.97422791 137.33184814]
[237.04867554 142.51933289]
[251.12312317 147.70680237]
[264.00170898 139.25407410]
[279.21029663 139.99676514]
[290.92678833 149.44071960]
[294.78936768 163.80102539]
[308.86383057 168.98849487]
[322.93829346 174.17596436]
[337.01272583 179.36344910]
[347.60571289 168.42231750]
[361.73547363 162.74166870]
[376.95394897 163.30572510]
[390.62442017 170.01675415]
[400.37841797 181.71203613]
[404.52600098 196.36528015]
[402.34857178 211.43771362]
[394.22335815 224.31797791]
[381.55816650 232.77447510]
[366.54724121 235.34205627]
[351.79138184 231.57588196]
[339.84707642 222.12844849]
[332.78378296 208.63661194]
[331.82525635 193.43789673]
[317.75079346 188.25042725]
[303.67636108 183.06294250]
[289.60189819 177.87547302]
[277.34362793 186.29405212]
[262.30072021 185.87521362]
[250.24800110 176.57008362]
[245.93565369 161.78125000]
[231.86120605 156.59378052]
[217.78675842 151.40631104]
[203.71231079 146.21882629]
[189.63786316 141.03135681]
[175.56340027 135.84388733]
[161.48895264 130.65641785]
[147.41450500 125.46894836]
[134.68641663 141.15403748]
[117.07260895 151.04241943]
[97.05404663 153.74127197]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 67]
[4 66]
[5 65]
[6 64]
[7 63]
[8 62]
[9 61]
[10 60]
[11 36]
[12 35]
[13 34]
[14 33]
[15 32]
[16 31]
[18 30]
[19 29]
[20 28]
[21 27]
[83 125]
[84 124]
[85 123]
[86 122]
[87 121]
[88 120]
[89 119]
[90 118]
[94 114]
[95 113]
[96 112]
[97 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
