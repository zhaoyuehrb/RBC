%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 12:54:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCGCGGGACUUGGACACGGACCUCGGCGGGCGGGACUGGGCGGGGCGGGGCAUCAGAACUCAGGUGUUUUUUAUUUACGCGUCAGGGCUUUUCUUGUUUAAUAAAGUUAUGAUAGCUA\
) } def
/len { sequence length } bind def

/coor [
[234.14459229 149.13453674]
[219.80827332 144.72206116]
[205.47195435 140.30960083]
[191.13562012 135.89712524]
[176.79930115 131.48466492]
[162.46298218 127.07219696]
[149.45986938 134.24540710]
[134.85794067 129.97476196]
[127.42219543 116.28726959]
[113.08587646 111.87480164]
[95.24212646 117.01804352]
[82.65300751 103.36643219]
[68.10698700 99.70402527]
[53.56096268 96.04161835]
[39.01493835 92.37921143]
[26.24151421 103.37823486]
[9.59744263 104.62893677]
[-4.39609909 95.83829498]
[-10.37323952 80.60910034]
[-25.53243065 85.13784027]
[-36.25730133 74.80215454]
[-45.44052887 75.98030853]
[-51.22850037 71.23870087]
[-65.77452087 67.57629395]
[-80.32054138 63.91388702]
[-94.86656952 60.25147629]
[-109.41259003 56.58906937]
[-124.68424225 60.72274017]
[-135.13717651 50.11211395]
[-150.40882874 54.24578476]
[-160.86175537 43.63515854]
[-175.40779114 39.97274780]
[-189.86068726 46.93644714]
[-204.25329590 39.84895325]
[-207.54481506 24.14718819]
[-197.21029663 11.87620258]
[-181.17747498 12.44924450]
[-171.74537659 25.42672729]
[-157.19935608 29.08913612]
[-142.96812439 24.69350433]
[-131.47476196 35.56608963]
[-117.24354553 31.17045975]
[-105.75018311 42.04304886]
[-91.20415497 45.70545578]
[-76.65813446 49.36786270]
[-62.11211395 53.03027344]
[-47.56609344 56.69268036]
[-32.97375107 60.16595459]
[-18.86143875 55.40235138]
[-7.08968973 65.97290039]
[2.12582469 56.22087479]
[15.06928921 52.29383087]
[28.36177444 55.32956314]
[38.47713470 64.63331604]
[42.67734909 77.83318329]
[57.22336960 81.49559784]
[71.76939392 85.15800476]
[86.31541443 88.82041168]
[94.66676331 83.15341187]
[104.75787354 82.98195648]
[113.29691315 88.36199188]
[117.49834442 97.53848267]
[131.83467102 101.95094299]
[145.67999268 94.81339264]
[160.15620422 99.49248505]
[166.87544250 112.73587799]
[181.21176147 117.14834595]
[195.54809570 121.56080627]
[209.88441467 125.97327423]
[224.22073364 130.38574219]
[238.55705261 134.79820251]
[244.57441711 127.22069550]
[252.45947266 121.65333557]
[261.56896973 118.53403473]
[271.16427612 118.10161591]
[280.47140503 120.37764740]
[288.74325562 125.16573334]
[295.31976318 132.06838989]
[299.68045044 140.52005005]
[301.48562622 149.83334351]
[300.60290527 159.25502014]
[314.08102417 165.83836365]
[327.64346313 172.24618530]
[341.28793335 178.47741699]
[354.93240356 184.70863342]
[368.57690430 190.93986511]
[384.34414673 189.63456726]
[392.70709229 201.95976257]
[406.35159302 208.19099426]
[419.99606323 214.42221069]
[433.64053345 220.65344238]
[447.28503418 226.88465881]
[460.92950439 233.11589050]
[472.99023438 223.69267273]
[488.05075073 220.96513367]
[502.65026855 225.56005859]
[513.43389893 236.42155457]
[517.92364502 251.05374146]
[515.08776855 266.09423828]
[505.57800293 278.08685303]
[491.57958984 284.27578735]
[476.30923462 283.23883057]
[463.27600098 275.21429443]
[455.47479248 262.04617310]
[454.69827271 246.76037598]
[441.05380249 240.52914429]
[427.40933228 234.29791260]
[413.76483154 228.06669617]
[400.12036133 221.83546448]
[386.47589111 215.60424805]
[371.68453979 217.35523987]
[362.34567261 204.58435059]
[348.70117188 198.35311890]
[335.05670166 192.12188721]
[321.41223145 185.89067078]
[313.93048096 185.97518921]
[307.49768066 179.31648254]
[294.01956177 172.73313904]
[276.61596680 184.17485046]
[255.68719482 183.07049561]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[2 70]
[3 69]
[4 68]
[5 67]
[6 66]
[9 63]
[10 62]
[12 58]
[13 57]
[14 56]
[15 55]
[19 50]
[21 48]
[23 47]
[24 46]
[25 45]
[26 44]
[27 43]
[29 41]
[31 39]
[32 38]
[81 118]
[82 117]
[83 115]
[84 114]
[85 113]
[86 112]
[88 110]
[89 109]
[90 108]
[91 107]
[92 106]
[93 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
