%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 09:43:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGGGUAUGCACUUUGUCCCGUUUGUCUCUGUUUGUUUCAUAUCAUUUUCUUGAUUUAGUUAAUUUCCCAAAGUGAAAUUAUUCUGCUCUAGAA\
) } def
/len { sequence length } bind def

/coor [
[118.31504059 240.70303345]
[115.89658356 225.89927673]
[113.47811890 211.09553528]
[111.05965424 196.29177856]
[108.40178680 181.52912903]
[105.50521851 166.81146240]
[102.60865021 152.09379578]
[99.71208191 137.37611389]
[96.81551361 122.65844727]
[81.48715210 113.44695282]
[77.46743774 96.02134705]
[87.21182251 81.02610779]
[83.36865234 66.52679443]
[79.52548981 52.02748489]
[75.68231964 37.52817154]
[71.83915710 23.02886009]
[67.99598694 8.52954674]
[64.15281677 -5.96976614]
[49.41657639 -10.06736851]
[38.78013229 -20.91922760]
[35.02851868 -35.54084778]
[39.07228851 -49.98051071]
[49.72900391 -60.38724136]
[45.88583755 -74.88655090]
[42.04267120 -89.38586426]
[31.77406311 -88.92926025]
[21.58371735 -90.24130249]
[11.77387047 -93.28159332]
[2.63522124 -97.95850372]
[-5.56168604 -104.13191223]
[-12.57447147 -111.61743927]
[-18.19608498 -120.19192505]
[-22.26092339 -129.60008240]
[-24.64970016 -139.56211853]
[-25.29295731 -149.78204346]
[-24.17307091 -159.95645142]
[-21.32474136 -169.78355408]
[-16.83391762 -178.97210693]
[-10.83519554 -187.25007629]
[-3.50780034 -194.37265015]
[4.92978239 -200.12948608]
[14.22631359 -204.35096741]
[24.10528564 -206.91314697]
[34.27313995 -207.74142456]
[36.21096039 -222.61572266]
[38.14878464 -237.49002075]
[40.08660507 -252.36431885]
[30.25123024 -264.73529053]
[32.12715149 -280.42785645]
[44.60141754 -290.13189697]
[60.27326584 -288.09014893]
[69.84487152 -275.51400757]
[67.63756561 -259.86459351]
[54.96090698 -250.42649841]
[53.02308655 -235.55220032]
[51.08526230 -220.67790222]
[49.14744186 -205.80358887]
[68.25829315 -196.99325562]
[83.10019684 -182.04080200]
[91.78826141 -162.82135010]
[93.21080017 -141.75335693]
[87.17154694 -121.49439240]
[74.41653442 -104.60582733]
[56.54198456 -93.22903442]
[60.38515091 -78.72972107]
[64.22831726 -64.23040771]
[78.64057159 -60.46842194]
[89.30566406 -49.92746735]
[93.28894806 -35.36725616]
[89.42406464 -20.67169571]
[78.65213013 -9.81293297]
[82.49530029 4.68637991]
[86.33846283 19.18569183]
[90.18163300 33.68500519]
[94.02480316 48.18431854]
[97.86796570 62.68363190]
[101.71113586 77.18294525]
[112.58808136 80.89276886]
[120.28953552 89.42263031]
[122.87270355 100.62075806]
[119.68595886 111.66229248]
[111.53318787 119.76187134]
[114.42975616 134.47955322]
[117.32632446 149.19721985]
[120.22289276 163.91488647]
[123.11946106 178.63256836]
[127.93118286 186.62687683]
[125.86340332 193.87332153]
[128.28186035 208.67706299]
[130.70033264 223.48081970]
[133.11878967 238.28457642]
[146.09443665 247.30723572]
[148.80732727 262.87692261]
[139.64799500 275.75643921]
[124.05046844 278.30459595]
[111.26851654 269.00958252]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 91]
[2 90]
[3 89]
[4 88]
[5 86]
[6 85]
[7 84]
[8 83]
[9 82]
[12 77]
[13 76]
[14 75]
[15 74]
[16 73]
[17 72]
[18 71]
[23 66]
[24 65]
[25 64]
[44 57]
[45 56]
[46 55]
[47 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
