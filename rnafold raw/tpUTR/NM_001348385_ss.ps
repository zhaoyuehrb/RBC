%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 21:53:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUCUUAAAGAUCAUCUGAAGAAAAUUCAUCAGUUUUCUGCUUAACUCUAUAUCUUAUGUGAUUCUGAUAUUACAAUAAAAUUAUGGUAAACUUUAGGA\
) } def
/len { sequence length } bind def

/coor [
[90.36479950 290.95291138]
[74.03700256 289.42483521]
[67.44329071 274.40969849]
[77.36670685 261.35372925]
[78.76439667 246.41900635]
[80.16208649 231.48426819]
[81.55977631 216.54953003]
[82.95746613 201.61477661]
[84.35514832 186.68003845]
[85.75283813 171.74530029]
[87.15052795 156.81056213]
[78.55670166 154.15472412]
[70.47427368 150.20736694]
[63.09598160 145.06265259]
[56.59780121 138.84324646]
[51.13469696 131.69749451]
[46.83695984 123.79579926]
[43.80708313 115.32661438]
[42.11732483 106.49190521]
[41.80798340 97.50238037]
[42.88643646 88.57241821]
[28.67936325 83.76002502]
[14.47229004 78.94763947]
[0.26521620 74.13525391]
[-13.94185734 69.32286835]
[-28.14893150 64.51048279]
[-42.35600281 59.69809723]
[-56.56307602 54.88570786]
[-72.53038025 58.62431717]
[-83.55292511 46.48200989]
[-78.29165649 30.94975090]
[-62.15891647 28.00579643]
[-51.75069046 40.67863464]
[-37.54361725 45.49102020]
[-23.33654404 50.30340958]
[-9.12947083 55.11579514]
[5.07760286 59.92818069]
[19.28467560 64.74057007]
[33.49174881 69.55295563]
[47.69882202 74.36534119]
[55.06698227 62.93825912]
[64.88364410 53.53075790]
[76.61388397 46.65547562]
[89.61848450 42.68706131]
[103.18879700 41.84176254]
[116.58535004 44.16564560]
[129.07812500 49.53207397]
[139.98635864 57.64862061]
[148.71565247 68.07299042]
[162.21569824 61.53472519]
[175.71572876 54.99645615]
[189.21577454 48.45819092]
[202.71580505 41.91992569]
[208.07974243 25.35878944]
[223.42138672 17.86795425]
[239.14886475 23.59384346]
[252.43904114 16.63888931]
[265.72921753 9.68393707]
[279.01937866 2.72898388]
[292.19979858 -4.43181419]
[305.26724243 -11.79672527]
[318.33468628 -19.16163635]
[331.40213013 -26.52654839]
[344.46957397 -33.89146042]
[348.47613525 -49.17945862]
[362.16143799 -57.08440399]
[377.40621948 -52.91642761]
[385.16601562 -39.14831543]
[380.83709717 -23.94844818]
[366.98773193 -16.33463478]
[351.83447266 -20.82401466]
[338.76702881 -13.45910454]
[325.69958496 -6.09419298]
[312.63214111 1.27071810]
[299.56469727 8.63562965]
[295.20648193 14.77007580]
[285.97433472 16.01915359]
[272.68417358 22.97410774]
[259.39398193 29.92905998]
[246.10382080 36.88401413]
[243.97315979 49.69581223]
[234.67454529 59.04134750]
[221.48794556 61.30277634]
[209.25407410 55.41996384]
[195.75404358 61.95822906]
[182.25399780 68.49649811]
[168.75395203 75.03475952]
[155.25392151 81.57302856]
[158.17430115 102.88080597]
[153.16304016 123.79579926]
[140.90336609 141.46641541]
[123.06681824 153.48336792]
[102.08527374 158.20825195]
[100.68758392 173.14299011]
[99.28989410 188.07772827]
[97.89220428 203.01246643]
[96.49451447 217.94720459]
[95.09682465 232.88195801]
[93.69913483 247.81669617]
[92.30144501 262.75143433]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 100]
[5 99]
[6 98]
[7 97]
[8 96]
[9 95]
[10 94]
[11 93]
[21 40]
[22 39]
[23 38]
[24 37]
[25 36]
[26 35]
[27 34]
[28 33]
[49 88]
[50 87]
[51 86]
[52 85]
[53 84]
[56 80]
[57 79]
[58 78]
[59 77]
[60 75]
[61 74]
[62 73]
[63 72]
[64 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
