%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:08:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCAUAGACCUAAAAUAAACCUCAACAGGUCUUUUAAUAUAAAUUCUGCUUCAAAAUAGAAUAAAACCAUUCUUUAACAAC\
) } def
/len { sequence length } bind def

/coor [
[46.40943146 172.71455383]
[37.26435089 164.98919678]
[29.22118187 156.12232971]
[22.42119789 146.26971436]
[16.98383522 135.60438538]
[13.00459862 124.31370544]
[10.55338001 112.59597015]
[-4.42245054 113.44715118]
[-19.39828110 114.29832458]
[-34.37411118 115.14950562]
[-49.34994125 116.00068665]
[-64.32577515 116.85186768]
[-68.96875000 131.30203247]
[-78.52124023 143.09671021]
[-91.69134521 150.64076233]
[-106.69791412 152.91392517]
[-121.51143646 149.60877991]
[-134.12849426 141.17230225]
[-142.84275818 128.74546814]
[-146.47566223 114.00890350]
[-144.53591919 98.95560455]
[-137.28584290 85.62140656]
[-125.70594788 75.80965424]
[-111.36231995 70.84730530]
[-96.19482422 71.40547180]
[-82.25473785 77.40866852]
[-71.42734528 88.04501343]
[-65.17694855 101.87603760]
[-50.20112228 101.02485657]
[-35.22529221 100.17367554]
[-20.24946022 99.32249451]
[-5.27362967 98.47132111]
[9.70220089 97.62014008]
[12.29821777 78.37238312]
[18.94877815 60.12449646]
[29.34641647 43.72009659]
[43.01044464 29.91757202]
[59.30915451 19.35502815]
[77.48904419 12.52078342]
[96.70964050 9.73079205]
[116.08235168 11.11403847]
[134.71156311 16.60657120]
[151.73602295 25.95446777]
[166.36866760 38.72556686]
[178.19659424 29.50058937]
[190.02452087 20.27561188]
[201.85244751 11.05063534]
[213.68035889 1.82565880]
[225.50828552 -7.39931774]
[224.84523010 -22.90221977]
[233.44921875 -35.81543350]
[248.01184082 -41.17356110]
[262.93347168 -36.91629410]
[272.47647095 -24.68064117]
[272.97131348 -9.17145824]
[264.22775269 3.64765716]
[249.60784912 8.84749317]
[234.73326111 4.42860699]
[222.90534973 13.65358353]
[211.07742310 22.87856102]
[199.24949646 32.10353851]
[187.42156982 41.32851410]
[175.59364319 50.55348969]
[181.46853638 60.98418808]
[185.91249084 72.10017395]
[188.84744263 83.70620728]
[190.22184753 95.59842682]
[190.01156616 107.56795502]
[188.22029114 119.40455627]
[184.87947083 130.90032959]
[180.04780579 141.85336304]
[173.81016541 152.07127380]
[166.27607727 161.37457275]
[157.57789612 169.59986877]
[147.86839294 176.60269165]
[137.31813049 182.26004028]
[126.11238098 186.47253418]
[114.44799042 189.16619873]
[102.52983093 190.29371643]
[90.56723022 189.83529663]
[78.77031708 187.79895020]
[67.34628296 184.22048950]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 33]
[8 32]
[9 31]
[10 30]
[11 29]
[12 28]
[44 63]
[45 62]
[46 61]
[47 60]
[48 59]
[49 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
