%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 22:11:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACGGGAAGGUCCUUUCUUUCCUUCCCAGGGGCCGGGGCCGGAACAUGUGCCUCCCGUUCCAGCAUCUGGCUGCCCGGGGGAGGAAGGACACCCGGGGCGGGCGCCCCACGCCGAUGGGUCCAUGGUGAAAUAAAAAACAGUGCUCACG\
) } def
/len { sequence length } bind def

/coor [
[39.62470627 101.49260712]
[54.55760574 100.07536316]
[69.45214844 101.86094666]
[84.44963837 101.58662415]
[71.15658569 94.63718414]
[57.86353302 87.68774414]
[47.60931396 91.55791473]
[37.14105988 89.15795898]
[29.90053177 81.52688599]
[28.12944031 71.38128662]
[15.13905907 63.88129044]
[2.14867830 56.38129044]
[-10.84170246 48.88129044]
[-23.83208466 41.38129044]
[-22.91077805 56.35297012]
[-33.89655304 66.56632996]
[-48.76148605 64.55789185]
[-56.64292908 51.79533768]
[-51.78147507 37.60498047]
[-37.72891998 32.35657883]
[-49.86417770 23.53979874]
[-61.99943161 14.72301960]
[-74.13468933 5.90624142]
[-86.26994324 -2.91053748]
[-98.40519714 -11.72731590]
[-110.54045105 -20.54409599]
[-122.67570496 -29.36087418]
[-138.38815308 -31.21280479]
[-144.13685608 -44.95331573]
[-156.27210999 -53.77009201]
[-168.40736389 -62.58687210]
[-180.72460938 -71.14757538]
[-193.21842957 -79.44844818]
[-205.71224976 -87.74932098]
[-218.20606995 -96.05019379]
[-230.69987488 -104.35106659]
[-243.19369507 -112.65193939]
[-255.77375793 -120.82152557]
[-268.43869019 -128.85893250]
[-284.23638916 -129.72061157]
[-290.83654785 -143.07304382]
[-303.50146484 -151.11044312]
[-316.16638184 -159.14784241]
[-328.83129883 -167.18525696]
[-341.49621582 -175.22265625]
[-354.73156738 -167.53604126]
[-370.02352905 -166.89224243]
[-383.85812378 -173.43920898]
[-393.05624390 -185.67248535]
[-395.50427246 -200.78096008]
[-390.63961792 -215.29280090]
[-379.58016968 -225.87332153]
[-364.86730957 -230.09117126]
[-349.88192749 -226.97712708]
[-338.06756592 -217.24678040]
[-332.13909912 -203.13607788]
[-333.45880127 -187.88757324]
[-320.79388428 -179.85017395]
[-308.12896729 -171.81277466]
[-295.46405029 -163.77536011]
[-282.79913330 -155.73796082]
[-267.90728760 -155.45117188]
[-260.40127563 -141.52384949]
[-247.73635864 -133.48645020]
[-240.35469055 -132.55174255]
[-234.89282227 -125.14575958]
[-222.39900208 -116.84488678]
[-209.90518188 -108.54401398]
[-197.41137695 -100.24314117]
[-184.91755676 -91.94226837]
[-172.42373657 -83.64139557]
[-167.58798218 -83.70792389]
[-162.67289734 -80.69205475]
[-159.59059143 -74.72212982]
[-147.45533752 -65.90534973]
[-135.32008362 -57.08856964]
[-120.47563171 -55.86727524]
[-113.85892487 -41.49612808]
[-101.72367096 -32.67935181]
[-89.58841705 -23.86257172]
[-77.45316315 -15.04579258]
[-65.31790924 -6.22901392]
[-53.18265152 2.58776498]
[-41.04739761 11.40454388]
[-28.91214180 20.22132301]
[-16.33208466 28.39090729]
[-3.34170270 35.89090729]
[9.64867783 43.39090729]
[22.63905907 50.89090729]
[35.62944031 58.39090729]
[54.87000656 56.90912247]
[64.81297302 74.39469147]
[78.10602570 81.34413147]
[91.39907837 88.29357147]
[106.39826202 88.45064545]
[119.83393860 81.78112030]
[133.26960754 75.11159515]
[146.70529175 68.44206238]
[160.14096069 61.77253723]
[168.76049805 47.82134247]
[185.14204407 48.58086777]
[192.43368530 63.26977921]
[183.13439941 76.77738190]
[166.81048584 75.20821381]
[153.37481689 81.87773895]
[139.93913269 88.54727173]
[126.50346375 95.21679688]
[113.06778717 101.88632202]
[114.47948456 116.82041931]
[115.89103699 131.75318909]
[130.33847046 135.78698730]
[144.78591919 139.82077026]
[159.23335266 143.85456848]
[168.40853882 143.14996338]
[173.93943787 148.12709045]
[188.29922485 152.46257019]
[202.65902710 156.79803467]
[218.49263000 152.52853394]
[229.91433716 164.29614258]
[225.17446899 179.99536133]
[209.14898682 183.47618103]
[198.32354736 171.15783691]
[183.96374512 166.82235718]
[169.60395813 162.48687744]
[155.19955444 158.30201721]
[140.75212097 154.26821899]
[126.30467987 150.23442078]
[111.85723877 146.20062256]
[122.60215759 156.66708374]
[123.93003082 171.60818481]
[122.05565643 186.49061584]
[117.06446838 200.63586426]
[109.18402863 213.39904785]
[98.77360535 224.19827271]
[86.30783081 232.54118347]
[72.35501099 238.04745483]
[57.55127716 240.46601868]
[42.57154083 239.68663025]
[28.09873581 235.74481201]
[14.79268932 228.82028198]
[3.26003337 219.22872925]
[-5.97344923 207.40744019]
[-12.48679733 193.89537048]
[-15.98306274 179.30851746]
[-16.30284882 164.31192017]
[-13.43157482 149.58929443]
[-7.50014544 135.81184387]
[1.22102153 123.60769653]
[12.33432198 113.53324890]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 94]
[5 93]
[6 92]
[10 90]
[11 89]
[12 88]
[13 87]
[14 86]
[20 85]
[21 84]
[22 83]
[23 82]
[24 81]
[25 80]
[26 79]
[27 78]
[29 76]
[30 75]
[31 74]
[32 71]
[33 70]
[34 69]
[35 68]
[36 67]
[37 66]
[38 64]
[39 63]
[41 61]
[42 60]
[43 59]
[44 58]
[45 57]
[95 108]
[96 107]
[97 106]
[98 105]
[99 104]
[110 128]
[111 127]
[112 126]
[113 125]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
