%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 18:08:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUGUCCUGAUGCCAUGGAAUGACUGAAGACAGGCACAAAAUGUGACAUCUUUGGUCAUUUCCCUCUGUAAUUAUUGUGUAUUCUACCCUGUUGCAAAGGAAAUAAAGCAUAGGGUAGUUUGCAAACAAUA\
) } def
/len { sequence length } bind def

/coor [
[5.49963379 116.51399231]
[-2.00181031 126.01216888]
[-10.95522499 134.15116882]
[-21.11804771 140.71195984]
[-32.21519089 145.51823425]
[-43.94647980 148.44117737]
[-55.99479675 149.40289307]
[-68.03462219 148.37847900]
[-79.74084473 145.39668274]
[-90.79755402 140.53909302]
[-100.90653229 133.93791199]
[-109.79532623 125.77236176]
[-117.22458649 116.26377106]
[-122.99449158 105.66964722]
[-126.95015717 94.27666473]
[-128.98576355 82.39289856]
[-129.04737854 70.33951569]
[-127.13445282 58.44208908]
[-141.26319885 53.40438461]
[-155.39195251 48.36667633]
[-169.52069092 43.32896805]
[-183.64944458 38.29126358]
[-197.77819824 33.25355530]
[-211.90693665 28.21584892]
[-226.03569031 23.17814064]
[-240.16442871 18.14043427]
[-254.29318237 13.10272694]
[-268.42193604 8.06501961]
[-282.55068970 3.02731299]
[-296.67941284 -2.01039410]
[-310.80816650 -7.04810095]
[-321.62203979 1.58551300]
[-335.18618774 3.70691204]
[-347.91680908 -1.13549554]
[-356.50411987 -11.56764317]
[-358.77285767 -24.77759552]
[-372.77868652 -30.14760017]
[-386.78451538 -35.51760864]
[-400.79031372 -40.88761139]
[-417.74426270 -40.91242981]
[-422.41372681 -57.21066666]
[-408.04507446 -66.20944977]
[-395.42031860 -54.89343262]
[-381.41448975 -49.52342987]
[-367.40869141 -44.15342331]
[-353.40286255 -38.78341675]
[-339.98022461 -48.15753937]
[-323.44860840 -47.71397400]
[-310.28698730 -37.42969513]
[-305.77047729 -21.17684937]
[-291.64172363 -16.13914108]
[-277.51296997 -11.10143471]
[-263.38421631 -6.06372738]
[-249.25547791 -1.02602041]
[-235.12672424 4.01168680]
[-220.99798584 9.04939365]
[-206.86923218 14.08710098]
[-192.74047852 19.12480736]
[-178.61174011 24.16251564]
[-164.48298645 29.20022202]
[-150.35424805 34.23793030]
[-136.22549438 39.27563477]
[-122.09674835 44.31334305]
[-112.26681519 28.91010284]
[-98.92736053 16.40957069]
[-82.90376282 7.59108925]
[-65.18893433 3.00598884]
[-46.88178253 2.94312930]
[-29.11907196 7.41069984]
[-13.00480556 16.13544655]
[0.45836690 28.57938004]
[10.43155003 43.97294998]
[16.29186821 61.36263657]
[17.67136574 79.67000580]
[32.49491119 81.96401215]
[47.31845856 84.25801849]
[62.14200592 86.55203247]
[76.96555328 88.84603882]
[91.78909302 91.14005280]
[106.66268921 93.08330536]
[121.57803345 94.67472076]
[136.49337769 96.26613617]
[148.71951294 86.61423492]
[163.82312012 88.44063568]
[172.94938660 100.15586853]
[187.86473083 101.74729156]
[202.78007507 103.33870697]
[217.69540405 104.93012238]
[232.61074829 106.52153778]
[247.52609253 108.11295319]
[262.44143677 109.70436859]
[277.35678101 111.29578400]
[292.27212524 112.88720703]
[301.23468018 110.67218018]
[307.51947021 114.69641113]
[322.39303589 116.63966370]
[330.69799805 103.83379364]
[343.74124146 95.90681458]
[358.93298340 94.43265533]
[373.25695801 99.70399475]
[383.86907959 110.67420959]
[388.66232300 125.16516113]
[386.68496704 140.29965210]
[378.32965088 153.07272339]
[365.25531006 160.94827271]
[350.05786133 162.36259460]
[335.75476074 157.03489685]
[325.18594360 146.02296448]
[320.44979858 131.51325989]
[305.57620239 129.57000732]
[290.68069458 127.80254364]
[275.76535034 126.21112823]
[260.85000610 124.61971283]
[245.93467712 123.02829742]
[231.01933289 121.43688202]
[216.10398865 119.84545898]
[201.18865967 118.25404358]
[186.27331543 116.66262817]
[171.35797119 115.07121277]
[159.96534729 124.59715271]
[144.81639099 123.19570923]
[134.90194702 111.18148041]
[119.98661041 109.59006500]
[105.07127380 107.99864197]
[100.26070404 110.33712769]
[94.48231506 109.75806427]
[89.49508667 105.96359253]
[74.67153931 103.66958618]
[59.84799576 101.37557983]
[45.02444839 99.08156586]
[30.20090294 96.78755951]
[15.37735653 94.49354553]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 63]
[19 62]
[20 61]
[21 60]
[22 59]
[23 58]
[24 57]
[25 56]
[26 55]
[27 54]
[28 53]
[29 52]
[30 51]
[31 50]
[36 46]
[37 45]
[38 44]
[39 43]
[74 132]
[75 131]
[76 130]
[77 129]
[78 128]
[79 127]
[80 124]
[81 123]
[82 122]
[85 119]
[86 118]
[87 117]
[88 116]
[89 115]
[90 114]
[91 113]
[92 112]
[93 111]
[95 110]
[96 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
