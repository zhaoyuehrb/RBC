%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:02:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCCAGGAAAGGGGGAGCGGGGCGCCCAGGGCCACUGGAACAGCCCCACUGGAGUCAAGGCUCCGAGGGAGGAGAGAGGGGCUCGGGAAGGGAGCUGGGGCGGUGAGGGCAUGGGGUGAGGCAUGGCGAUGGGGGAGGGCGAGGGCGAGAAAGGGCAGGCACUCUGCGAAUUAAAGGCCUUGGACUUGAA\
) } def
/len { sequence length } bind def

/coor [
[108.17696381 237.03689575]
[105.98732758 222.19758606]
[103.79769135 207.35826111]
[101.60805511 192.51893616]
[99.41841888 177.67961121]
[97.22878265 162.84028625]
[90.03102875 160.73262024]
[85.81568909 175.12814331]
[81.60034943 189.52365112]
[77.38477325 203.91909790]
[62.98939514 199.70329285]
[67.20483398 185.30831909]
[71.42017365 170.91279602]
[75.63550568 156.51728821]
[68.43775177 154.40960693]
[58.58969879 165.72402954]
[48.74164963 177.03843689]
[45.51753235 192.52764893]
[31.32541084 197.04792786]
[21.47736168 208.36235046]
[15.63910866 224.27935791]
[-1.27204537 223.07553101]
[-4.79674006 206.49201965]
[10.16294956 198.51429749]
[20.01099968 187.19987488]
[22.53071976 172.51995850]
[37.42723846 167.19038391]
[47.27528763 155.87597656]
[57.12333679 144.56156921]
[48.92251587 132.73841858]
[43.81555939 119.57894897]
[41.96778107 105.86030579]
[43.35601807 92.36211395]
[47.77670670 79.82221222]
[54.86403656 68.89631653]
[43.79342651 58.77497101]
[32.72282028 48.65362549]
[21.65221024 38.53227997]
[10.58160210 28.41093445]
[-4.53621197 31.37030602]
[-18.33649635 24.93559265]
[-25.61550331 11.76441097]
[-23.76517296 -2.99073315]
[-34.83578110 -13.11207867]
[-45.90638733 -23.23342323]
[-56.97699738 -33.35477066]
[-68.12961578 -43.38567734]
[-79.36350250 -53.32548904]
[-90.59738922 -63.26529694]
[-108.71632385 -66.50992584]
[-113.64515686 -83.34581757]
[-125.03934479 -93.10145569]
[-140.55427551 -96.19940948]
[-145.18992615 -110.35426331]
[-156.58410645 -120.10990143]
[-167.97830200 -129.86553955]
[-179.37248230 -139.62118530]
[-190.76667786 -149.37681580]
[-206.29446411 -143.71624756]
[-222.46624756 -146.63764954]
[-234.88938904 -157.25135803]
[-240.23800659 -172.59150696]
[-237.14303589 -188.44421387]
[-248.69450378 -198.01309204]
[-260.24597168 -207.58197021]
[-271.79745483 -217.15086365]
[-287.50717163 -215.42443848]
[-299.78393555 -225.37715149]
[-301.34414673 -241.10424805]
[-291.26220703 -253.27510071]
[-275.51950073 -254.66896057]
[-263.45590210 -244.45889282]
[-262.22857666 -228.70233154]
[-250.67709351 -219.13345337]
[-239.12562561 -209.56455994]
[-227.57415771 -199.99568176]
[-215.10359192 -205.58348083]
[-201.37626648 -205.24824524]
[-189.07530212 -198.99841309]
[-180.62962341 -188.00405884]
[-177.73439026 -174.37825012]
[-181.01103210 -160.77101135]
[-169.61685181 -151.01536560]
[-158.22265625 -141.25973511]
[-146.82847595 -131.50408936]
[-135.43428040 -121.74845123]
[-120.73433685 -119.34829712]
[-115.28370667 -104.49564362]
[-103.88951874 -94.74000549]
[-91.79930878 -95.35925293]
[-82.22517395 -87.31172943]
[-80.65757751 -74.49918365]
[-69.42369080 -64.55937195]
[-58.18980408 -54.61956406]
[-51.08625793 -52.53855896]
[-46.85565186 -44.42537689]
[-35.78504181 -34.30403137]
[-24.71443558 -24.18268776]
[-13.64382648 -14.06134129]
[0.88679039 -17.22348595]
[14.65602303 -11.15123653]
[22.29881668 2.01846719]
[20.70294762 17.34032631]
[31.77355576 27.46167183]
[42.84416580 37.58301926]
[53.91477203 47.70436478]
[64.98538208 57.82571030]
[86.00885010 47.00054550]
[109.63605499 46.03852463]
[131.47000122 55.11867523]
[135.19657898 39.74261475]
[149.52832031 35.68667603]
[159.73942566 24.69880867]
[169.95053101 13.71094131]
[180.16165161 2.72307491]
[177.04264832 -12.47730255]
[183.48452759 -26.59402466]
[197.01025391 -34.19892120]
[212.41889954 -32.36775970]
[223.78553772 -21.80465508]
[226.73945618 -6.57133627]
[220.14482117 7.47467279]
[206.53739929 14.93239594]
[191.14952087 12.93418598]
[180.93840027 23.92205238]
[170.72729492 34.90991974]
[160.51618958 45.89778519]
[157.51997375 60.48791885]
[142.45787048 65.32978821]
[149.84753418 77.19831085]
[153.99440002 90.55018616]
[154.62867737 104.51681519]
[169.78359985 99.97380829]
[180.51820374 110.29938507]
[195.67312622 105.75637054]
[206.40771484 116.08195496]
[221.04699707 119.35172272]
[235.68627930 122.62149048]
[250.32557678 125.89125061]
[265.48049927 121.34823608]
[276.21508789 131.67382812]
[290.85437012 134.94358826]
[299.47326660 126.72887421]
[310.87261963 123.73227692]
[322.18438721 126.58789825]
[330.62020874 134.47225952]
[334.15853882 145.33737183]
[348.68362427 149.08190918]
[360.56320190 139.09916687]
[376.04403687 138.03918457]
[389.17340088 146.30953979]
[394.90283203 160.73013306]
[391.02923584 175.75592041]
[379.04205322 185.60922241]
[363.55062866 186.50120544]
[350.51174927 178.08889771]
[344.93908691 163.60700989]
[330.41400146 159.86247253]
[315.25140381 170.10020447]
[297.10629272 165.94760132]
[287.58459473 149.58287048]
[272.94531250 146.31311035]
[258.83749390 151.08999634]
[247.05580139 140.53053284]
[232.41651917 137.26077271]
[217.77723694 133.99101257]
[203.13795471 130.72123718]
[189.03013611 135.49812317]
[177.24842834 124.93866730]
[163.14060974 129.71556091]
[151.35891724 119.15610504]
[148.92259216 126.87556458]
[145.31469727 134.28308105]
[140.57591248 141.19947815]
[134.77439880 147.45109558]
[128.00517273 152.87394714]
[120.38853455 157.31791687]
[112.06810760 160.65065002]
[114.25774384 175.48997498]
[116.44738007 190.32929993]
[118.63701630 205.16862488]
[120.82664490 220.00794983]
[123.01628113 234.84727478]
[137.32536316 240.42813110]
[146.91441345 252.42585754]
[149.20405579 267.61312866]
[143.57836914 281.90463257]
[131.55064392 291.45605469]
[116.35627747 293.69805908]
[102.08247375 288.02761841]
[92.56881714 275.97000122]
[90.37442780 260.76867676]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 183]
[2 182]
[3 181]
[4 180]
[5 179]
[6 178]
[15 29]
[16 28]
[17 27]
[19 25]
[20 24]
[35 107]
[36 106]
[37 105]
[38 104]
[39 103]
[43 99]
[44 98]
[45 97]
[46 96]
[47 94]
[48 93]
[49 92]
[51 89]
[52 88]
[54 86]
[55 85]
[56 84]
[57 83]
[58 82]
[63 76]
[64 75]
[65 74]
[66 73]
[110 129]
[112 127]
[113 126]
[114 125]
[115 124]
[132 171]
[134 169]
[136 167]
[137 166]
[138 165]
[139 164]
[141 162]
[142 161]
[147 158]
[148 157]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
