%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 06:25:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCCAAGCCCCCACCCCAUCCCACUCCCCUUCCCUCCCCAGAUAUUUAUGUGAAAUGAACUGCAGCUUUAUUUUUUGAAAUAAAAACUUUUAAAAAGCA\
) } def
/len { sequence length } bind def

/coor [
[89.53460693 147.29113770]
[84.06483459 161.25830078]
[78.59506226 175.22546387]
[73.12528992 189.19262695]
[72.97953796 206.14595032]
[56.64841461 210.69903564]
[47.75235367 196.26655579]
[59.15813065 183.72285461]
[64.62789917 169.75569153]
[70.09767151 155.78852844]
[75.56744385 141.82136536]
[66.32783508 134.81611633]
[59.01791382 125.81559753]
[54.05661392 115.33563232]
[51.72825241 103.97680664]
[52.16627121 92.39008331]
[55.34556198 81.23946381]
[61.08392715 71.16398621]
[50.56012344 60.47522354]
[40.03632355 49.78646469]
[24.46218491 49.49665451]
[13.94181728 38.50681686]
[14.31408596 23.66104317]
[3.79028368 12.97228241]
[-6.73351908 2.28352332]
[-21.51167297 8.40265751]
[-37.46829224 8.41873360]
[-52.18791962 2.35854840]
[-63.45350266 -8.83351040]
[-69.58030701 -23.44251060]
[-69.66786194 -39.24570847]
[-63.73212051 -53.85073471]
[-74.58325195 -64.20703125]
[-89.82375336 -61.29040909]
[-103.85357666 -67.91941071]
[-111.27796936 -81.54505157]
[-109.24210358 -96.92799377]
[-98.52880096 -108.15317535]
[-83.25755310 -110.90429688]
[-69.30046844 -104.12348938]
[-62.02432632 -90.41811371]
[-64.22695160 -75.05816650]
[-53.37582016 -64.70186615]
[-40.67780304 -70.88507843]
[-26.59897995 -72.33681488]
[-12.84818554 -68.86013794]
[-1.10155845 -60.85757828]
[7.20176983 -49.28461838]
[11.03597736 -35.53566360]
[9.91525078 -21.27603912]
[3.95524049 -8.24027920]
[14.47904301 2.44848013]
[25.00284576 13.13723946]
[39.85261536 12.99589443]
[50.67751312 23.68590164]
[50.72508240 39.26266098]
[61.24888229 49.95142365]
[71.77268982 60.64018250]
[84.99502563 53.94755936]
[99.62207794 51.56619263]
[114.28450775 53.71901703]
[127.60967255 60.20449066]
[138.35012817 70.41547394]
[145.50038147 83.39604187]
[148.39106750 97.93101501]
[146.75157166 112.65968323]
[160.44841003 118.77493286]
[174.14526367 124.89019012]
[187.84211731 131.00544739]
[201.53895569 137.12069702]
[205.67379761 136.38772583]
[209.49096680 136.86021423]
[212.67320251 138.31335449]
[214.99986267 140.44720459]
[216.36219788 142.92176819]
[216.76716614 145.39405823]
[229.35147095 153.55711365]
[241.93576050 161.72018433]
[254.52005005 169.88323975]
[267.10433960 178.04629517]
[279.68862915 186.20936584]
[294.58657837 181.45693970]
[309.03414917 187.44036865]
[316.20965576 201.33445740]
[312.72506714 216.57885742]
[300.22567749 225.97561646]
[284.61331177 225.08787537]
[273.25964355 214.33479309]
[271.52557373 198.79365540]
[258.94128418 190.63059998]
[246.35697937 182.46752930]
[233.77268982 174.30447388]
[221.18840027 166.14140320]
[208.60411072 157.97834778]
[195.42370605 150.81755066]
[181.72685242 144.70228577]
[168.03001404 138.58703613]
[154.33316040 132.47178650]
[140.63630676 126.35652924]
[126.98815155 140.21960449]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[3 9]
[4 8]
[18 58]
[19 57]
[20 56]
[23 53]
[24 52]
[25 51]
[32 43]
[33 42]
[66 99]
[67 98]
[68 97]
[69 96]
[70 95]
[76 94]
[77 93]
[78 92]
[79 91]
[80 90]
[81 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
