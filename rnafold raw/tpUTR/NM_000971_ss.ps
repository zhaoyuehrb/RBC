%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 22:06:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGUCUACCAUGAUUAUUUUUCUAAGCUGGUUGGUUAAUAAACAGUACCUGCUCUCAAAUUGAAAUA\
) } def
/len { sequence length } bind def

/coor [
[8.53356075 282.71685791]
[1.33120656 295.87460327]
[-5.87114763 309.03234863]
[-4.95710897 325.40600586]
[-18.82636261 334.15676880]
[-33.21141052 326.28259277]
[-33.31414795 309.88375854]
[-19.02888680 301.82998657]
[-11.82653236 288.67224121]
[-4.62417841 275.51449585]
[-16.23232460 266.04397583]
[-25.90509224 254.59855652]
[-33.31193161 241.56713867]
[-38.19932175 227.39279175]
[-40.39941788 212.55775452]
[-39.83585358 197.56707764]
[-36.52634811 182.93133545]
[-30.58218575 169.14930725]
[-22.20446205 156.69093323]
[-11.67727852 145.98135376]
[0.64188457 137.38629150]
[14.33431435 131.19970703]
[28.93429184 127.63360596]
[43.94493484 126.81086731]
[58.85511017 128.76098633]
[73.15682983 133.41899109]
[80.35918427 120.26126099]
[87.56153870 107.10352325]
[87.43528748 93.12226105]
[99.28072357 85.69412231]
[106.48307800 72.53638458]
[113.68543243 59.37864685]
[108.42763519 42.86432648]
[116.43563843 27.87102699]
[132.44465637 23.24276352]
[139.04067993 9.77084732]
[145.63670349 -3.70106792]
[143.97836304 -20.01615143]
[157.43495178 -29.38909912]
[172.16348267 -22.17782402]
[173.01249695 -5.80066967]
[159.10861206 2.89495277]
[152.51258850 16.36686897]
[145.91656494 29.83878326]
[151.80311584 41.51752472]
[149.75376892 54.63341904]
[140.30958557 64.24037170]
[126.84317017 66.58100128]
[119.64081573 79.73873901]
[112.43846130 92.89647675]
[112.56471252 106.87773895]
[100.71927643 114.30587769]
[93.51692200 127.46361542]
[86.31456757 140.62135315]
[97.94551086 150.15850830]
[107.62330627 161.66748047]
[115.01947784 174.75537109]
[119.88340759 188.97573853]
[122.05083466 203.84378052]
[121.44939423 218.85295105]
[118.10103607 233.49211121]
[112.12121582 247.26306152]
[103.71493530 259.69735718]
[93.16970825 270.37237549]
[80.84570312 278.92556763]
[67.16348267 285.06683350]
[52.58961868 288.58837891]
[37.62079620 289.37170410]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[3 8]
[26 54]
[27 53]
[28 52]
[30 50]
[31 49]
[32 48]
[35 44]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
