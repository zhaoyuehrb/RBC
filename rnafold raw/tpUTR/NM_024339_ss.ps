%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 23:21:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCUGACGACACCCCCAGCCAGCUCAGGGUUUUAGAGUGUUUUUCAUUUUCUUUUUUUUUUUUUUUUUACAAUAAAGUUUCAGGCUUUUUUACCAUG\
) } def
/len { sequence length } bind def

/coor [
[117.43326569 239.87136841]
[125.03125763 226.75473022]
[136.65917969 217.03015137]
[131.52886963 202.93476868]
[126.39856720 188.83937073]
[121.26827240 174.74398804]
[116.13796997 160.64860535]
[110.79442596 155.34284973]
[111.07627106 146.02378845]
[106.39576721 131.77272034]
[101.71526337 117.52165222]
[88.72488403 110.02165222]
[74.04284668 113.09375000]
[59.36081314 116.16585541]
[44.67877579 119.23795319]
[36.01292419 132.18170166]
[21.07948685 135.08810425]
[8.79300022 126.74676514]
[-5.88903618 129.81886292]
[-17.74330521 141.15060425]
[-33.40597153 136.29129028]
[-36.76462555 120.23976898]
[-24.36417389 109.50846863]
[-8.96113682 115.13683319]
[5.72090006 112.06472778]
[13.63235855 99.49713898]
[28.47826767 96.17243958]
[41.60667419 104.55591583]
[56.28871155 101.48381805]
[70.97074890 98.41172028]
[85.65278625 95.33961487]
[89.08948517 88.67334747]
[80.97984314 76.05456543]
[95.96288300 75.34082031]
[99.39958191 68.67455292]
[93.38562012 54.93292618]
[87.37166595 41.19129944]
[81.35770416 27.44967270]
[75.34375000 13.70804596]
[69.32978821 -0.03358123]
[54.97302628 -7.19338846]
[51.76052856 -22.91151237]
[62.15665817 -35.13035583]
[78.18638611 -34.47666550]
[87.55308533 -21.45189667]
[83.07141876 -6.04753923]
[89.08537292 7.69408751]
[95.09933472 21.43571472]
[101.11328888 35.17734146]
[107.12725067 48.91896820]
[113.14120483 62.66059494]
[118.97962952 48.84347153]
[127.52797699 36.51765823]
[138.42276001 26.20729065]
[151.20069885 18.35079765]
[165.31840515 13.28226566]
[180.17558289 11.21722317]
[195.14044189 12.24348354]
[209.57661438 16.31740761]
[222.87023926 23.26575851]
[234.45602417 32.79306793]
[243.84129333 44.49420166]
[250.62696838 57.87159348]
[254.52450562 72.35639191]
[255.36813354 87.33264923]
[253.12202454 102.16352081]
[247.88165283 116.21836853]
[239.86988831 128.89950562]
[229.42738342 139.66772461]
[216.99821472 148.06507874]
[203.11090088 153.73452759]
[188.35598755 156.43496704]
[173.36088562 156.05155945]
[158.76324463 152.60061646]
[145.18382263 146.22888184]
[133.20002747 137.20730591]
[123.32147217 125.91951752]
[115.96633148 112.84114838]
[120.64683533 127.09221649]
[125.32733917 141.34329224]
[130.23335266 155.51829529]
[135.36366272 169.61369324]
[140.49395752 183.70907593]
[145.62426758 197.80445862]
[150.75456238 211.89985657]
[165.91290283 211.87503052]
[180.16452026 217.03906250]
[191.78845215 226.76840210]
[199.38107300 239.88815308]
[202.02551270 254.81405640]
[199.40246582 269.74374390]
[191.82865906 282.87435913]
[180.21868896 292.62036133]
[165.97448730 297.80480957]
[150.81613159 297.80169678]
[136.57405090 292.61141968]
[124.96807098 282.86068726]
[117.39964294 269.72695923]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 85]
[4 84]
[5 83]
[6 82]
[7 81]
[9 80]
[10 79]
[11 78]
[12 31]
[13 30]
[14 29]
[15 28]
[18 25]
[19 24]
[35 51]
[36 50]
[37 49]
[38 48]
[39 47]
[40 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
