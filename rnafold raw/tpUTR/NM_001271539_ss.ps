%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 11:48:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUGCGGAUCACAGGAAAACCUGCUCACGGGAAUCAGUUCACUCCAAGGUAUCCCCACUAAAUAAACAGUUUCCCAUCCAAAUCAAG\
) } def
/len { sequence length } bind def

/coor [
[127.29893494 227.48771667]
[125.69551086 212.57366943]
[124.09207916 197.65960693]
[112.36949921 188.54277039]
[110.53093719 173.44064331]
[120.17298889 161.20674133]
[118.56956482 146.29267883]
[116.96614075 131.37863159]
[115.36270905 116.46457672]
[104.66614532 120.73986816]
[93.93391418 119.05558777]
[86.07634735 112.53874207]
[71.84395599 117.27573395]
[57.61156845 122.01273346]
[43.37918091 126.74972534]
[32.90390778 139.36720276]
[16.78700829 136.33775330]
[11.60816479 120.77781677]
[22.69492912 108.69412231]
[38.64218903 112.51733398]
[52.87457657 107.78034210]
[67.10696411 103.04335022]
[81.33935547 98.30635071]
[83.38535309 90.04727936]
[89.00907898 83.29333496]
[97.27075195 79.55329132]
[106.61647034 79.79758453]
[115.16959381 84.22053528]
[121.10755157 92.15357971]
[129.21716309 79.53477478]
[137.32678223 66.91596985]
[145.43638611 54.29716873]
[153.54600525 41.67836380]
[154.49790955 25.88582039]
[167.88781738 19.36205864]
[168.83972168 3.56951499]
[182.22964478 -2.95424724]
[190.33924866 -15.57305050]
[198.44886780 -28.19185257]
[188.91629028 -39.92162323]
[183.48335266 -54.00443649]
[182.67036438 -69.05659485]
[186.54440308 -83.60330963]
[194.71388245 -96.22322083]
[206.36819458 -105.68724823]
[220.35806274 -111.07833862]
[235.30888367 -111.88024139]
[249.75579834 -108.02701569]
[257.86541748 -120.64582062]
[255.87396240 -136.56478882]
[267.18093872 -147.94599915]
[283.11257935 -146.05876160]
[291.44754028 -132.35079956]
[285.79190063 -117.33768463]
[270.48422241 -112.53620148]
[262.37460327 -99.91740417]
[271.88110352 -88.37670898]
[277.36245728 -74.44384003]
[278.27014160 -59.47867203]
[274.50274658 -44.94603348]
[266.41699219 -32.27230835]
[254.79415894 -22.70544243]
[240.76451111 -17.19206429]
[225.69741821 -16.28382874]
[211.06767273 -20.08224106]
[202.95805359 -7.46343803]
[194.84843445 5.15536499]
[194.47659302 20.04532814]
[180.50662231 27.47167206]
[180.13476562 42.36163330]
[166.16481018 49.78797913]
[158.05519104 62.40678024]
[149.94557190 75.02558136]
[141.83596802 87.64438629]
[133.72634888 100.26319122]
[130.27676392 114.86114502]
[131.88018799 129.77520752]
[133.48362732 144.68925476]
[135.08705139 159.60331726]
[147.10925293 169.50807190]
[148.52290344 184.65588379]
[139.00613403 196.05618286]
[140.60955811 210.97023010]
[142.21299744 225.88429260]
[152.31544495 238.80220032]
[145.92933655 253.90682983]
[129.62414551 255.65982056]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 84]
[2 83]
[3 82]
[6 79]
[7 78]
[8 77]
[9 76]
[12 23]
[13 22]
[14 21]
[15 20]
[29 75]
[30 74]
[31 73]
[32 72]
[33 71]
[35 69]
[37 67]
[38 66]
[39 65]
[48 56]
[49 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
