%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 01:07:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGUGUGCUCUUAUCACCAAUCAGUUCAGACCUGGUUGAUUUUGUACUUUGGAACUGUACCUUGGAUGGUUUUGUUUAUUAAAAGAGAAACCUGAAGUACUCA\
) } def
/len { sequence length } bind def

/coor [
[108.30706024 141.06623840]
[95.56343079 142.29476929]
[82.85240936 139.60264587]
[71.36943817 133.12657166]
[62.19357681 144.99263000]
[53.01771164 156.85870361]
[58.27908325 171.36116028]
[54.84232330 186.40084839]
[43.80409241 197.17864990]
[28.68664742 200.25540161]
[14.31391144 194.64933777]
[5.27217245 182.14932251]
[4.44661570 166.74406433]
[12.10067368 153.34931946]
[25.79196358 146.23931885]
[41.15164566 147.68283081]
[50.32751083 135.81677246]
[59.50337601 123.95069885]
[54.02325821 109.98759460]
[39.22589874 107.53032684]
[24.42854118 105.07305908]
[9.63118172 102.61579132]
[-5.16617680 100.15852356]
[-19.96353531 97.70124817]
[-34.76089478 95.24398041]
[-46.52066422 105.55135345]
[-62.15564728 105.83653259]
[-74.28348541 95.96487427]
[-77.17778015 80.59747314]
[-69.47193146 66.99034119]
[-54.80441666 61.56835556]
[-40.10077667 66.89160919]
[-32.30362701 80.44662476]
[-17.50626755 82.90389252]
[-2.70890808 85.36116028]
[12.08845043 87.81842804]
[26.88580894 90.27569580]
[41.68317032 92.73296356]
[56.48052597 95.19023895]
[62.84897232 78.45555878]
[75.19834137 65.97164917]
[91.22024536 59.67554092]
[108.07456207 60.38373184]
[122.89202881 67.69660187]
[133.26274109 80.11388397]
[147.38352966 75.05393982]
[161.50433350 69.99398804]
[175.62512207 64.93403625]
[189.74592590 59.87408829]
[203.86671448 54.81413651]
[217.98751831 49.75418854]
[232.10832214 44.69423676]
[246.22911072 39.63428879]
[258.86993408 31.55902863]
[269.39688110 20.87338638]
[279.92385864 10.18774605]
[277.53005981 -5.02987289]
[284.47470093 -18.58071327]
[297.90808105 -25.36370659]
[312.58398438 -22.96466255]
[323.11096191 -33.65030289]
[333.63790894 -44.33594513]
[333.26910400 -60.13592911]
[344.24087524 -71.51116180]
[360.04385376 -71.71292114]
[371.30245972 -60.62150574]
[371.33712769 -44.81725311]
[360.12728882 -33.67655182]
[344.32357788 -33.80897522]
[333.79660034 -23.12333488]
[323.26962280 -12.43769360]
[325.88793945 2.20069480]
[319.30667114 15.73401546]
[305.86123657 22.88059807]
[290.60949707 20.71471405]
[280.08255005 31.40035629]
[269.55557251 42.08599854]
[284.43511963 40.18897629]
[299.02917480 43.65512466]
[311.46670532 52.04007721]
[320.15325928 64.26888275]
[323.97521973 78.77380371]
[322.44259644 93.69529724]
[315.75186157 107.12042999]
[304.76080322 117.32809448]
[290.87844849 123.00965118]
[275.88452148 123.43673706]
[261.70126343 118.55459595]
[250.14697266 108.98912048]
[242.70291138 95.96659851]
[240.32341003 81.15653992]
[243.31352234 66.45758057]
[251.28906250 53.75508499]
[237.16825867 58.81503296]
[223.04747009 63.87498474]
[208.92666626 68.93493652]
[194.80587769 73.99488068]
[180.68507385 79.05483246]
[166.56428528 84.11478424]
[152.44348145 89.17473602]
[138.32269287 94.23468018]
[138.91192627 106.07150269]
[135.87216187 117.72322083]
[129.37364197 128.08610535]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 18]
[5 17]
[6 16]
[19 39]
[20 38]
[21 37]
[22 36]
[23 35]
[24 34]
[25 33]
[45 101]
[46 100]
[47 99]
[48 98]
[49 97]
[50 96]
[51 95]
[52 94]
[53 93]
[54 77]
[55 76]
[56 75]
[60 71]
[61 70]
[62 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
