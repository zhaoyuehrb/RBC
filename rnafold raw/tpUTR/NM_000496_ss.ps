%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 13:56:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCCUCCCCACCAUGCCUCCUUCCCAGGACCCAGGUCUGCUGCCCAGGAACCCUCCAGACCUCCCAGAGAGUGAAUAAAGUGUGACUUGCAACUUG\
) } def
/len { sequence length } bind def

/coor [
[135.21917725 376.54281616]
[132.82518005 361.73507690]
[130.43118286 346.92733765]
[115.88318634 343.56799316]
[103.69669342 334.87115479]
[95.74681091 322.13677979]
[93.27140045 307.28890991]
[96.67838287 292.58496094]
[105.47892761 280.27261353]
[118.35731506 272.24624634]
[115.96331024 257.43850708]
[113.56931305 242.63078308]
[100.00084686 239.30364990]
[88.71032715 231.00207520]
[81.44371033 218.96832275]
[79.34056854 205.02493286]
[82.75546265 191.29867554]
[91.19871521 179.89616394]
[103.40632629 172.58056641]
[101.48816681 157.70372009]
[99.33181000 142.85952759]
[96.93781281 128.05180359]
[94.54381561 113.24407196]
[85.85966492 102.28610229]
[90.64846039 89.14992523]
[78.11670685 79.89827728]
[75.89979553 64.84703064]
[84.79705811 52.95693970]
[82.40306091 38.14921570]
[80.00906372 23.34148788]
[76.82833099 19.77010918]
[75.23969269 15.75482178]
[75.17430115 11.89402676]
[76.36190033 8.69205856]
[78.38414764 6.49757624]
[77.90337372 -8.49471760]
[77.42259979 -23.48701096]
[76.94182587 -38.47930527]
[76.46105194 -53.47159576]
[75.98027802 -68.46389008]
[69.05039978 -72.47302246]
[64.07530975 -78.65697479]
[61.68528748 -86.15274811]
[62.15426254 -93.93698883]
[65.36936951 -100.96569824]
[70.85278320 -106.31420135]
[77.83209991 -109.29879761]
[79.75025940 -124.17565155]
[81.66841888 -139.05250549]
[77.69718170 -155.53477478]
[92.43598175 -163.91357422]
[104.56742859 -152.07025146]
[96.54526520 -137.13433838]
[94.62710571 -122.25749207]
[92.70895386 -107.38063812]
[104.04742432 -88.03067017]
[90.97257233 -68.94466400]
[91.45334625 -53.95236969]
[91.93412018 -38.96007919]
[92.41489410 -23.96778488]
[92.89566803 -8.97549057]
[93.37644196 6.01680231]
[94.81678772 20.94748878]
[97.21078491 35.75521469]
[99.60478210 50.56294250]
[111.79544830 59.04370499]
[114.43424225 74.02674103]
[105.45618439 86.75592804]
[114.14033508 97.71389771]
[109.35153961 110.85007477]
[111.74553680 125.65779877]
[114.13953400 140.46553040]
[118.67492676 148.61552429]
[116.36501312 155.78556824]
[118.28317261 170.66241455]
[133.68864441 175.61465454]
[145.38182068 186.71673584]
[151.08480835 201.73678589]
[149.71664429 217.68670654]
[141.59782410 231.41659546]
[128.37704468 240.23678589]
[130.77104187 255.04450989]
[133.16503906 269.85223389]
[147.91651917 273.41165161]
[160.14845276 282.32360840]
[168.01519775 295.20489502]
[170.34458923 310.07641602]
[166.81240845 324.66711426]
[157.98719788 336.76092529]
[145.23890686 344.53335571]
[147.63290405 359.34106445]
[150.02690125 374.14880371]
[162.98760986 383.19290161]
[165.67477417 398.76705933]
[156.49417114 411.63143921]
[140.89245605 414.15377808]
[128.12586975 404.83767700]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 92]
[2 91]
[3 90]
[10 83]
[11 82]
[12 81]
[19 75]
[20 74]
[21 72]
[22 71]
[23 70]
[25 68]
[28 65]
[29 64]
[30 63]
[35 62]
[36 61]
[37 60]
[38 59]
[39 58]
[40 57]
[47 55]
[48 54]
[49 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
