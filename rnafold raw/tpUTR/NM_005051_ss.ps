%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 15:53:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGGAAGCACUGAACCUACCUCAUCCUCCUGGAGGGUGUGGCUACCCUCGCCACCCCAAAUUCCAUGUCAAUAAAGAACAGCUAAAUUCUCCUAGA\
) } def
/len { sequence length } bind def

/coor [
[127.97542572 162.12266541]
[121.46717072 148.60813904]
[114.95891571 135.09359741]
[108.45066071 121.57907104]
[114.04547882 135.49661255]
[109.95030975 149.92677307]
[97.87889862 158.83076477]
[82.88294220 158.48240662]
[71.23800659 149.02749634]
[67.81730652 134.42274475]
[74.05234528 120.78000641]
[87.33512115 113.80835724]
[73.61892700 119.88010406]
[59.90274048 125.95185089]
[55.73442841 141.02365112]
[42.82410812 149.84735107]
[27.26764107 148.25666809]
[16.41031075 137.00267029]
[15.37861824 121.39916229]
[24.65969849 108.81362915]
[39.87130737 105.18859100]
[53.83098984 112.23566437]
[67.54718018 106.16391754]
[81.26336670 100.09216309]
[80.54236603 85.10950470]
[66.30652618 80.38288116]
[52.07069016 75.65625763]
[36.12622070 79.49108887]
[25.03065681 67.41547394]
[30.19816208 51.85176849]
[46.31285095 48.81057739]
[56.79731369 61.42042160]
[71.03314972 66.14704132]
[85.26898956 70.87366486]
[96.69067383 61.15024185]
[94.29667664 46.34251404]
[91.90267944 31.53478622]
[87.36728668 23.38478470]
[89.67720032 16.21475029]
[87.75904083 1.33790052]
[85.84088898 -13.53894997]
[83.92272949 -28.41580009]
[82.00457001 -43.29264832]
[68.74172211 -51.57701874]
[63.95606232 -66.46430969]
[69.90724945 -80.92520905]
[83.78530121 -88.13170624]
[99.03742981 -84.68112946]
[108.46205139 -72.20272827]
[107.60913849 -56.58841705]
[96.88142395 -45.21080780]
[98.79957581 -30.33395767]
[100.71773529 -15.45710754]
[102.63589478 -0.58025688]
[104.55404663 14.29659367]
[106.71040344 29.14078903]
[109.10440063 43.94851685]
[111.49840546 58.75624084]
[117.56522369 45.03787231]
[126.74330139 33.17351913]
[138.49755859 23.85486603]
[152.14274597 17.62518311]
[166.88334656 14.84765625]
[181.86000061 15.68421268]
[196.19958496 20.08608055]
[209.06610107 27.79663467]
[219.70945740 38.36635971]
[227.50914001 51.17904282]
[232.01045227 65.48772430]
[232.95094299 80.45820618]
[230.27581787 95.21773529]
[224.14100647 108.90583801]
[214.90417480 120.72450256]
[203.10382080 129.98472595]
[189.42788696 136.14662170]
[174.67369080 138.85098267]
[159.70137024 137.94012451]
[145.38380432 133.46716309]
[132.55570984 125.69287109]
[121.96519470 115.07080841]
[128.47344971 128.58534241]
[134.98170471 142.09988403]
[141.48995972 155.61441040]
[156.61779785 154.38435364]
[171.16731262 158.70590210]
[183.17082214 167.99462891]
[191.00492859 180.99427795]
[193.61015320 195.94677734]
[190.63415527 210.82992554]
[182.47940063 223.63087463]
[170.24876404 232.61842346]
[155.59634399 236.57707214]
[140.50375366 234.97145081]
[127.01213074 228.01870728]
[116.94612885 216.65911865]
[111.66707611 202.42901611]
[111.88892365 187.25286865]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 83]
[2 82]
[3 81]
[4 80]
[12 24]
[13 23]
[14 22]
[25 34]
[26 33]
[27 32]
[35 58]
[36 57]
[37 56]
[39 55]
[40 54]
[41 53]
[42 52]
[43 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
