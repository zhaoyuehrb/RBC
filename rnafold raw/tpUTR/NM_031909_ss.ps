%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 19:47:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCGGGCCAGAGAAGAGCCCGGGAGGGCCAGGGGCGUGCAUGCCAGGCCGGGCCGGAGGCUCGAAAGUCCCGCGCGAGCGCCACGGCCUCCGGGCGCGCCUGGACUCUGCCAAUAAAGCGGAAAGCGGGCACGCGCAGCGCCCGGCAGCCCAGGC\
) } def
/len { sequence length } bind def

/coor [
[28.27143478 369.18515015]
[21.80691338 370.93695068]
[15.17076206 370.57772827]
[7.24446774 383.31246948]
[-0.68182570 396.04721069]
[-8.60811901 408.78198242]
[-16.53441238 421.51672363]
[-24.46070671 434.25146484]
[-32.38700104 446.98623657]
[-40.18629837 459.79913330]
[-36.05611801 475.05422974]
[-43.99495316 488.71987915]
[-59.29283524 492.68853760]
[-72.87380219 484.60568237]
[-76.68051147 469.26669312]
[-68.45449829 455.77194214]
[-53.07612228 452.12762451]
[-52.35371780 444.73095703]
[-45.12174988 439.05993652]
[-37.19545746 426.32519531]
[-29.26916313 413.59042358]
[-21.34287071 400.85568237]
[-13.41657639 388.12094116]
[-5.49028254 375.38616943]
[2.43601131 362.65142822]
[0.29478970 339.60919189]
[21.13743210 328.00613403]
[27.49171829 314.41851807]
[33.84600449 300.83090210]
[40.20029449 287.24331665]
[31.80426979 273.16622925]
[33.45016098 256.69165039]
[44.68804550 244.30816650]
[61.25136185 241.01095581]
[67.33424377 227.29969788]
[73.41712189 213.58843994]
[79.50000000 199.87718201]
[85.58287811 186.16592407]
[91.52914429 172.39488220]
[97.33821869 158.56538391]
[103.14728546 144.73590088]
[76.09803772 133.02688599]
[64.42851257 108.99323273]
[70.62065125 85.84191132]
[88.23371887 74.00386810]
[85.85774994 59.19323730]
[83.48178101 44.38260651]
[81.10580444 29.57197762]
[78.72983551 14.76134777]
[76.35386658 -0.04928268]
[63.83338928 -9.31618023]
[61.63479996 -24.37011147]
[70.54653168 -36.24936676]
[60.72098923 -48.64974213]
[66.34463501 -62.44190979]
[63.96866608 -77.25254059]
[61.59269333 -92.06317139]
[59.21672440 -106.87380219]
[56.84075165 -121.68443298]
[54.46478271 -136.49505615]
[52.08881378 -151.30569458]
[49.71284103 -166.11631775]
[47.33687210 -180.92695618]
[36.34680939 -170.71820068]
[21.48421288 -172.74385071]
[13.62697983 -185.52133179]
[18.52579689 -199.69882202]
[32.59523392 -204.89988708]
[45.53705978 -197.31909180]
[44.64283371 -212.29240417]
[33.10395432 -222.75625610]
[32.41038132 -237.95407104]
[42.45716858 -248.89013672]
[41.56293869 -263.86346436]
[40.66871262 -278.83679199]
[31.19034958 -292.21932983]
[38.28570557 -307.00405884]
[54.65568542 -307.98168945]
[63.46025848 -294.14654541]
[55.64203644 -279.73101807]
[56.53626251 -264.75769043]
[57.43048859 -249.78436279]
[68.70745087 -240.12178040]
[69.82762909 -224.94943237]
[59.61615372 -213.18663025]
[60.51037979 -198.21331787]
[62.14750290 -183.30291748]
[64.52347565 -168.49229431]
[66.89944458 -153.68165588]
[69.27541351 -138.87103271]
[71.65138245 -124.06040192]
[74.02735138 -109.24977112]
[76.40332794 -94.43914032]
[78.77929688 -79.62850952]
[81.15526581 -64.81787872]
[90.81085968 -53.47686005]
[85.35716248 -38.62533569]
[97.53749084 -30.12973976]
[100.15804291 -15.14350128]
[91.16449738 -2.42525315]
[93.54046631 12.38537693]
[95.91643524 27.19600677]
[98.29241180 42.00663757]
[100.66838074 56.81726837]
[103.04434967 71.62789917]
[116.51403809 70.31174469]
[131.07417297 75.76182556]
[143.31954956 88.39731598]
[158.24548340 86.90850830]
[173.17141724 85.41970062]
[188.09735107 83.93089294]
[203.02328491 82.44208527]
[211.68627930 69.42338562]
[226.70524597 65.06857300]
[240.98870850 71.43386078]
[247.79243469 85.51374817]
[243.90393066 100.66014862]
[231.15921021 109.72139740]
[215.57594299 108.41904449]
[204.51208496 97.36801910]
[189.58615112 98.85682678]
[174.66023254 100.34563446]
[159.73429871 101.83444214]
[144.80836487 103.32324982]
[143.25389099 110.66038513]
[140.14494324 125.33466339]
[138.59045410 132.67179871]
[151.63026428 140.08554077]
[164.67007446 147.49928284]
[181.05633545 146.84957886]
[189.58216858 160.85823059]
[181.47689819 175.11434937]
[165.07855225 174.95243835]
[157.25633240 160.53907776]
[144.21652222 153.12535095]
[131.17672729 145.71160889]
[116.97676849 150.54496765]
[111.16770172 164.37445068]
[105.35863495 178.20394897]
[104.91197968 187.38340759]
[99.29413605 192.24880981]
[93.21125793 205.96006775]
[87.12837982 219.67132568]
[81.04550171 233.38258362]
[74.96261597 247.09384155]
[82.75153351 258.50326538]
[83.86272430 272.16427612]
[78.11178589 284.48596191]
[67.10399628 292.28271484]
[53.78789902 293.59759521]
[47.43361282 307.18521118]
[41.07932663 320.77279663]
[34.72503662 334.36041260]
[38.71706390 340.12084961]
[40.68851471 346.79235840]
[40.47196579 353.69384766]
[38.12165070 360.13128662]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 25]
[4 24]
[5 23]
[6 22]
[7 21]
[8 20]
[9 19]
[10 17]
[27 153]
[28 152]
[29 151]
[30 150]
[34 145]
[35 144]
[36 143]
[37 142]
[38 141]
[39 139]
[40 138]
[41 137]
[45 105]
[46 104]
[47 103]
[48 102]
[49 101]
[50 100]
[53 97]
[55 95]
[56 94]
[57 93]
[58 92]
[59 91]
[60 90]
[61 89]
[62 88]
[63 87]
[69 86]
[70 85]
[73 82]
[74 81]
[75 80]
[108 124]
[109 123]
[110 122]
[111 121]
[112 120]
[127 136]
[128 135]
[129 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
