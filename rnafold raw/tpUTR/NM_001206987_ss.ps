%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 10:31:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAUACCUACAACCUGUUCUGGGACAGUAUCAAUACUGAUGAGCAACCUGGCACACAAACUAUGAGCAGACCACUUCAGCUUGAGAAUGCAGUGGGUCUGAAGAUGGUCAAGUCUGUUUGCCUUAGAUUUUGAUGUCACCUAGACAACACUUAAACUCAUAUGAAACAAAAAUUAAAAUACGUAUUACAAGUAC\
) } def
/len { sequence length } bind def

/coor [
[81.85460663 413.37158203]
[68.65184021 406.25210571]
[56.39955902 397.59869385]
[45.27509308 387.53656006]
[35.43944168 376.21139526]
[27.03495789 363.78701782]
[20.18327713 350.44332886]
[14.98356342 336.37338257]
[11.51107216 321.78085327]
[9.81606007 306.87692261]
[9.92305851 291.87731934]
[11.83051968 276.99908447]
[15.51083565 262.45758057]
[20.91074181 248.46327209]
[27.95208740 235.21867371]
[36.53799438 222.90911865]
[22.82180405 228.98086548]
[9.10561562 235.05261230]
[-0.38150620 247.71377563]
[-15.15141487 245.79048157]
[-28.86760330 251.86222839]
[-42.58379364 257.93399048]
[-56.29998398 264.00573730]
[-70.01617432 270.07748413]
[-71.60754395 286.52935791]
[-81.22045135 299.85961914]
[-96.15660095 306.48822021]
[-112.30433655 304.69396973]
[-125.27039337 295.06024170]
[-138.88749695 301.35104370]
[-152.50460815 307.64187622]
[-166.12171936 313.93267822]
[-179.73883057 320.22348022]
[-188.74551392 333.92791748]
[-205.09938049 332.71014404]
[-211.97697449 317.82287598]
[-202.30322266 304.58087158]
[-186.02964783 306.60638428]
[-172.41253662 300.31555176]
[-158.79542542 294.02474976]
[-145.17831421 287.73394775]
[-131.56120300 281.44311523]
[-131.22033691 267.78359985]
[-124.99514008 255.54602051]
[-114.05067444 247.14646912]
[-100.48988342 244.27082825]
[-86.94961548 247.53656006]
[-76.08792114 256.36129761]
[-62.37173462 250.28955078]
[-48.65554428 244.21778870]
[-34.93935394 238.14604187]
[-21.22316551 232.07429504]
[-12.71711731 219.84742737]
[3.03386521 221.33642578]
[16.75005531 215.26467896]
[30.46624374 209.19293213]
[16.11800957 204.81935120]
[9.66953182 191.27618408]
[15.31911945 177.38078308]
[29.38858414 172.17980957]
[42.71793365 179.05937195]
[46.62910461 193.54006958]
[53.13735962 180.02554321]
[59.64561462 166.51100159]
[66.15386963 152.99647522]
[72.66213226 139.48193359]
[79.17038727 125.96740723]
[62.77248383 104.16676331]
[67.41619110 74.08851624]
[94.71318817 54.50486374]
[90.90837097 39.99544144]
[87.10355377 25.48601913]
[83.29873657 10.97659492]
[79.49391937 -3.53282762]
[75.57293701 -18.01129150]
[71.53605652 -32.45786667]
[67.49916840 -46.90444565]
[63.46228409 -61.35102081]
[59.42539978 -75.79759979]
[55.38851547 -90.24417114]
[51.23598099 -104.65793610]
[46.96806717 -119.03794861]
[42.70015335 -133.41796875]
[27.67193604 -136.31819153]
[15.72014809 -145.87921143]
[9.59122467 -159.90400696]
[10.69354630 -175.16976929]
[18.77380753 -188.16854858]
[31.97522545 -195.91329956]
[47.26420593 -196.62434387]
[61.12746048 -190.13829041]
[70.37931061 -177.94560242]
[72.89374542 -162.84803772]
[68.09297180 -148.31494141]
[57.08016968 -137.68588257]
[61.34808350 -123.30586243]
[65.61599731 -108.92584991]
[70.53917694 -103.40109253]
[69.83509064 -94.28105927]
[73.87197113 -79.83448029]
[77.90885925 -65.38790894]
[81.94574738 -50.94132996]
[85.98262787 -36.49475479]
[90.01951599 -22.04817772]
[94.85350800 -16.44522476]
[94.00334167 -7.33764648]
[97.80815887 7.17177677]
[101.61297607 21.68120003]
[105.41779327 36.19062424]
[109.22261047 50.70004654]
[123.79115295 54.27182007]
[133.87567139 43.16765213]
[143.96018982 32.06348038]
[154.04469299 20.95931053]
[164.12921143 9.85514069]
[174.21372986 -1.24902916]
[184.29823303 -12.35319901]
[182.00897217 -27.82230759]
[190.24264526 -41.11669159]
[205.11157227 -45.95914841]
[219.59507751 -40.06322098]
[226.85450745 -26.21278381]
[223.46218872 -10.94758987]
[211.01985168 -1.47539711]
[195.40240479 -2.26868582]
[185.31788635 8.83548450]
[175.23338318 19.93965340]
[165.14886475 31.04382324]
[155.06434631 42.14799500]
[144.97984314 53.25216293]
[134.89532471 64.35633087]
[142.25608826 77.42611694]
[156.97947693 74.55873871]
[169.04611206 64.32609558]
[183.01773071 69.48778534]
[197.74111938 66.62040710]
[212.46450806 63.75302505]
[227.18789673 60.88564682]
[237.31056213 48.43931961]
[253.35084534 48.73746109]
[263.00399780 61.55136490]
[258.86495972 77.05129242]
[244.10884094 83.34703827]
[230.05526733 75.60903168]
[215.33189392 78.47640991]
[200.60850525 81.34379578]
[185.88511658 84.21117401]
[174.87159729 94.23871613]
[159.84686279 89.28211975]
[145.12347412 92.14950562]
[143.75550842 104.76190948]
[139.07067871 116.01730347]
[131.70405579 125.10311890]
[122.47118378 131.44824219]
[112.28552246 134.75677490]
[102.07205963 135.01548767]
[92.68492126 132.47566223]
[86.17665863 145.99018860]
[79.66840363 159.50473022]
[73.16014862 173.01925659]
[66.65189362 186.53379822]
[60.14363861 200.04832458]
[72.71501160 191.86537170]
[86.17806244 185.25128174]
[100.33794403 180.30177307]
[114.98972321 177.08847046]
[129.92135620 175.65789795]
[144.91671753 176.03073120]
[159.75878906 178.20159912]
[174.23278809 182.13908386]
[188.12919617 187.78617859]
[201.24690247 195.06117249]
[213.39607239 203.85877991]
[224.40086365 214.05165100]
[234.10200500 225.49227905]
[242.35908508 238.01507568]
[249.05261230 251.43881226]
[254.08569336 265.56921387]
[257.38549805 280.20175171]
[258.90429688 295.12466431]
[258.62005615 310.12197876]
[256.53692627 324.97662354]
[252.68502808 339.47360229]
[247.12013245 353.40313721]
[239.92276001 366.56362915]
[231.19709778 378.76455688]
[221.06942749 389.82937622]
[209.68632507 399.59793091]
[197.21252441 407.92886353]
[183.82856750 414.70159912]
[169.72816467 419.81808472]
[155.11537170 423.20428467]
[140.20169067 424.81121826]
[125.20297241 424.61560059]
[110.33627319 422.62026978]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 56]
[17 55]
[18 54]
[20 52]
[21 51]
[22 50]
[23 49]
[24 48]
[29 42]
[30 41]
[31 40]
[32 39]
[33 38]
[62 162]
[63 161]
[64 160]
[65 159]
[66 158]
[67 157]
[70 110]
[71 109]
[72 108]
[73 107]
[74 106]
[75 104]
[76 103]
[77 102]
[78 101]
[79 100]
[80 99]
[81 97]
[82 96]
[83 95]
[111 131]
[112 130]
[113 129]
[114 128]
[115 127]
[116 126]
[117 125]
[132 150]
[133 149]
[135 147]
[136 146]
[137 145]
[138 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
