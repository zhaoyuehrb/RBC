%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 03:43:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAGUCGGUCCCCGCAGAGGUCACUGUGGCAAAGCCUCACAAAGCCCCCUCUCCUAGUUCAUUCACAAGCAUAUGCUGAGAAUAAACAUGUUACACAUGGA\
) } def
/len { sequence length } bind def

/coor [
[84.25870514 190.61711121]
[70.03635406 186.95646667]
[56.57795715 181.07881165]
[44.22663498 173.13398743]
[33.29730225 163.32455444]
[24.06860924 151.90060425]
[16.77584839 139.15339661]
[11.60495472 125.40795898]
[-3.10121918 128.36235046]
[-17.80739403 131.31674194]
[-27.52788162 147.42008972]
[-45.58709335 151.41149902]
[-60.66672897 141.25617981]
[-75.16543579 145.10162354]
[-89.66414642 148.94708252]
[-104.16284943 152.79252625]
[-118.66156006 156.63796997]
[-133.16026306 160.48341370]
[-140.87944031 174.27435303]
[-156.11187744 178.48727417]
[-169.82041931 170.62272644]
[-173.87205505 155.34660339]
[-165.86302185 141.72196960]
[-150.54492188 137.83206177]
[-137.00572205 145.98471069]
[-122.50700378 142.13926697]
[-108.00830078 138.29380798]
[-93.50959015 134.44836426]
[-79.01087952 130.60292053]
[-64.51217651 126.75747681]
[-60.97074890 115.70351410]
[-52.39107513 107.70702362]
[-40.88055801 104.89370728]
[-29.34649086 108.09578705]
[-20.76178741 116.61057281]
[-6.05561399 113.65618134]
[8.65056038 110.70178223]
[8.02582836 99.99335480]
[8.65210724 89.28501892]
[10.52087975 78.72241974]
[13.60672569 68.44924164]
[17.86767197 58.60520554]
[23.24576569 49.32421112]
[29.66785049 40.73249435]
[37.04657745 32.94692612]
[45.28158188 26.07339478]
[54.26085281 20.20539665]
[63.86225891 15.42274570]
[73.95520020 11.79049492]
[84.40239716 9.35804939]
[95.06175232 8.15849495]
[105.78826904 8.20814705]
[116.43606567 9.50633049]
[126.86029053 12.03538799]
[136.91917419 15.76091957]
[146.47589111 20.63225174]
[155.40045166 26.58312416]
[163.57147217 33.53259659]
[170.87780762 41.38614273]
[177.22007751 50.03694153]
[182.51202393 59.36732864]
[186.68165588 69.25038910]
[201.18035889 65.40494537]
[215.67907715 61.55949783]
[230.17778015 57.71405029]
[235.61511230 45.28007507]
[247.08268738 38.39591217]
[260.22296143 39.41318893]
[270.19375610 47.72979736]
[284.80300903 44.32829285]
[299.41223145 40.92679214]
[311.00866699 29.33132935]
[326.77667236 33.83718491]
[330.49545288 49.80912018]
[318.33944702 60.81657791]
[302.81375122 55.53602982]
[288.20449829 58.93753052]
[273.59527588 62.33903503]
[265.41018677 76.94193268]
[248.89234924 81.27165222]
[234.02322388 72.21276093]
[219.52452087 76.05820465]
[205.02581787 79.90364838]
[190.52709961 83.74909973]
[191.49783325 109.34858704]
[185.37007141 134.22280884]
[172.61921692 156.44198608]
[154.23451233 174.28234863]
[162.06222534 187.07792664]
[169.88995361 199.87348938]
[177.71768188 212.66906738]
[185.54539490 225.46464539]
[198.96878052 235.82075500]
[192.73335266 251.58641052]
[175.85769653 249.95903015]
[172.74983215 233.29237366]
[164.92210388 220.49679565]
[157.09437561 207.70121765]
[149.26664734 194.90563965]
[141.43893433 182.11006165]
[127.84167480 187.65893555]
[113.53456879 190.97286987]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 37]
[9 36]
[10 35]
[13 30]
[14 29]
[15 28]
[16 27]
[17 26]
[18 25]
[62 84]
[63 83]
[64 82]
[65 81]
[69 78]
[70 77]
[71 76]
[88 100]
[89 99]
[90 98]
[91 97]
[92 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
