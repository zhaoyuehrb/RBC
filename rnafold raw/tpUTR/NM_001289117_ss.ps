%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 16:27:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUUUCCCUAUGGGGGUGUCUGUACGUAGGAGAGUGGAGGCCCCACUCCCAGUUGGGCGUCCCGGAGCUCAGGGACUGAGCCCCAAGACGCCUCUGUAACCUCGCUGCAGCUUCAGUAGUAAACUGGGUCCUGUUUUUUUAA\
) } def
/len { sequence length } bind def

/coor [
[311.33248901 327.69229126]
[300.49703979 317.31961060]
[289.66159058 306.94689941]
[277.90322876 311.78897095]
[265.14001465 311.79809570]
[253.28794861 306.93728638]
[244.13978577 297.90322876]
[239.09391785 286.02676392]
[238.94061279 273.07681274]
[243.73857117 260.99707031]
[233.36587524 250.16159058]
[222.99317932 239.32614136]
[212.62048340 228.49067688]
[202.24778748 217.65521240]
[191.87509155 206.81976318]
[181.50239563 195.98429871]
[171.12969971 185.14883423]
[160.75700378 174.31338501]
[150.38430786 163.47792053]
[140.01161194 152.64245605]
[129.63891602 141.80700684]
[119.26622772 130.97154236]
[110.49710083 134.93185425]
[100.99749756 136.46133423]
[91.42848206 135.45353699]
[82.45594788 131.97859192]
[74.70426178 126.27831268]
[68.71286774 118.74938202]
[64.89868164 109.91571045]
[63.52713013 100.39202881]
[48.81534958 97.46567535]
[39.71022415 98.86467743]
[33.81612778 94.31167603]
[19.17168808 91.06507874]
[4.52724743 87.81848907]
[-10.11719227 84.57189178]
[-24.76163292 81.32530212]
[-39.40607452 78.07870483]
[-53.65476227 85.45125580]
[-68.24340057 78.77659607]
[-71.98084259 63.17495728]
[-62.00003433 50.61458206]
[-45.95740128 50.73071289]
[-36.15947723 63.43426514]
[-21.51503944 66.68086243]
[-6.87059832 69.92745209]
[7.77384186 73.17404938]
[22.41828156 76.42063904]
[37.06272125 79.66723633]
[51.74170303 82.75389099]
[66.45348358 85.68025208]
[69.45100403 80.07054901]
[73.37742615 75.06684113]
[78.11334991 70.82126617]
[83.51477814 67.46292114]
[89.41746521 65.09392548]
[88.11013031 50.15100479]
[86.80279541 35.20808411]
[85.49546051 20.26516533]
[83.69990540 5.37302017]
[81.41805267 -9.45240211]
[79.13619995 -24.27782440]
[76.85434723 -39.10324860]
[74.57250214 -53.92866898]
[60.71641159 -60.91354752]
[53.64215851 -74.72421265]
[56.06993103 -90.05019379]
[67.06620789 -100.99832153]
[82.40268707 -103.35883331]
[96.18218231 -96.22406006]
[103.10620117 -82.33745575]
[100.51231384 -67.03871918]
[89.39791870 -56.21052170]
[91.67977142 -41.38509750]
[93.96162415 -26.55967522]
[96.24347687 -11.73425293]
[98.52532196 3.09116960]
[101.21263885 5.48312473]
[102.83821869 9.32745838]
[102.71775055 14.09322357]
[100.43837738 18.95782852]
[101.74571228 33.90074921]
[103.05304718 48.84366989]
[104.36038971 63.78659058]
[126.25496674 74.68003845]
[136.34765625 96.95507812]
[130.10168457 120.59884644]
[140.47438049 131.43431091]
[150.84707642 142.26976013]
[161.21977234 153.10522461]
[171.59246826 163.94068909]
[181.96516418 174.77613831]
[192.33786011 185.61160278]
[202.71055603 196.44706726]
[213.08325195 207.28251648]
[223.45594788 218.11798096]
[233.82864380 228.95344543]
[244.20133972 239.78889465]
[254.57403564 250.62435913]
[271.47183228 246.03875732]
[288.29122925 250.57511902]
[300.46707153 262.90975952]
[304.74127197 279.61499023]
[300.03427124 296.11145020]
[310.86975098 306.48413086]
[321.70520020 316.85684204]
[332.86233521 319.97628784]
[337.21347046 329.30352783]
[349.68551636 337.63708496]
[362.15753174 345.97064209]
[374.62957764 354.30419922]
[392.99362183 355.04797363]
[400.20050049 371.01342773]
[412.85134888 379.07290649]
[425.50222778 387.13241577]
[438.15310669 395.19189453]
[450.80398560 403.25140381]
[463.45483398 411.31088257]
[479.36578369 409.25628662]
[490.79177856 420.51803589]
[488.96774292 436.45706177]
[475.29293823 444.84631348]
[460.25750732 439.25027466]
[455.39535522 423.96176147]
[442.74447632 415.90225220]
[430.09359741 407.84277344]
[417.44274902 399.78326416]
[404.79187012 391.72378540]
[392.14099121 383.66427612]
[380.21823120 385.97140503]
[369.59561157 379.29635620]
[366.29605103 366.77624512]
[353.82400513 358.44268799]
[341.35195923 350.10913086]
[328.87991333 341.77557373]
[331.95065308 356.45788574]
[326.96237183 370.60415649]
[315.36129761 380.11285400]
[300.51104736 382.22705078]
[286.71722412 376.33377075]
[277.97918701 364.14172363]
[276.83041382 349.18576050]
[283.60394287 335.80221558]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 106]
[2 105]
[3 104]
[10 99]
[11 98]
[12 97]
[13 96]
[14 95]
[15 94]
[16 93]
[17 92]
[18 91]
[19 90]
[20 89]
[21 88]
[22 87]
[30 51]
[31 50]
[33 49]
[34 48]
[35 47]
[36 46]
[37 45]
[38 44]
[56 84]
[57 83]
[58 82]
[59 81]
[60 77]
[61 76]
[62 75]
[63 74]
[64 73]
[108 135]
[109 134]
[110 133]
[111 132]
[113 129]
[114 128]
[115 127]
[116 126]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
