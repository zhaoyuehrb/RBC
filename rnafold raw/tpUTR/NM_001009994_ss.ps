%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 20:09:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGAUUAGCUACUUUUGAUUAUAUCCAAAGCUUGUGGGGUUUAAAUUUAGUGUACAAAUGUAUCAUAAUUAUUUUAAACUAAUUUAUUUGUAUAUAAAUUAUUAAUAAAAUGAAAUAUUUUGUAA\
) } def
/len { sequence length } bind def

/coor [
[70.62081909 127.11288452]
[57.88482666 135.03718567]
[45.14883423 142.96148682]
[37.51908875 156.82141113]
[22.62528229 156.97557068]
[9.88928986 164.89987183]
[2.25954461 178.75981140]
[-12.63426304 178.91397095]
[-25.37025452 186.83827209]
[-38.10624695 194.76257324]
[-50.84223557 202.68687439]
[-52.84082413 206.81965637]
[-55.79191971 209.74581909]
[-59.17541885 211.31141663]
[-62.47656631 211.55589294]
[-65.25143433 210.69215393]
[-78.70793915 217.31954956]
[-92.16445160 223.94694519]
[-94.66733551 239.26083374]
[-105.71714783 250.15492249]
[-121.06501770 252.44021606]
[-134.80937195 245.23796082]
[-141.66522217 231.31759644]
[-138.99636841 216.03175354]
[-127.82901764 205.25817871]
[-112.45726013 203.13951111]
[-98.79184723 210.49043274]
[-85.33533478 203.86303711]
[-71.87882996 197.23564148]
[-58.76653671 189.95088196]
[-46.03054428 182.02658081]
[-33.29455566 174.10227966]
[-20.55856323 166.17797852]
[-13.83977985 152.88485718]
[1.96499050 152.16387939]
[14.70098209 144.23959351]
[21.41976357 130.94645691]
[37.22453308 130.22549438]
[49.96052551 122.30119324]
[62.69651794 114.37689209]
[60.13773346 96.95951843]
[65.30855560 80.13171387]
[77.20632935 67.15653229]
[93.52397156 60.54995728]
[111.09736633 61.59305573]
[117.89068604 48.21954727]
[124.68400574 34.84603500]
[131.47732544 21.47252464]
[138.27064514 8.09901428]
[145.06398010 -5.27449608]
[146.18499756 -14.45100212]
[152.19430542 -18.89167023]
[159.31632996 -32.09305954]
[166.43835449 -45.29444885]
[173.56039429 -58.49584198]
[180.68241882 -71.69722748]
[187.80444336 -84.89862061]
[194.92648315 -98.10001373]
[202.04850769 -111.30139923]
[209.17053223 -124.50279236]
[216.29257202 -137.70417786]
[205.11778259 -147.82284546]
[196.68983459 -160.32218933]
[191.49874878 -174.47549438]
[189.84631348 -189.45991516]
[191.82859802 -204.40428162]
[197.33036804 -218.43972778]
[206.03172302 -230.75028992]
[217.42681885 -240.62020874]
[230.85313416 -247.47567749]
[245.53007507 -250.91813660]
[260.60437012 -250.74743652]
[275.19961548 -246.97349548]
[288.46722412 -239.81573486]
[299.63589478 -229.69029236]
[308.05624390 -217.18583679]
[313.23873901 -203.02938843]
[314.88211060 -188.04397583]
[312.89074707 -173.10081482]
[307.38049316 -159.06869507]
[298.67166138 -146.76341248]
[287.27059937 -136.90040588]
[273.84011841 -130.05307007]
[259.16107178 -126.61952209]
[244.08689880 -126.79936218]
[229.49395752 -130.58215332]
[222.37193298 -117.38076019]
[215.24989319 -104.17936707]
[208.12786865 -90.97798157]
[201.00584412 -77.77658844]
[193.88380432 -64.57520294]
[186.76177979 -51.37380981]
[179.63975525 -38.17242050]
[172.51771545 -24.97103119]
[165.39569092 -11.76964092]
[158.43748474 1.51882577]
[151.64416504 14.89233589]
[144.85084534 28.26584625]
[138.05752563 41.63935852]
[131.26419067 55.01286697]
[124.47087860 68.38637543]
[133.61476135 78.35993195]
[138.90800476 90.81240845]
[139.74424744 104.31733704]
[136.02769470 117.32771301]
[128.18409729 128.35314941]
[136.57540894 140.78640747]
[144.96672058 153.21966553]
[153.35803223 165.65292358]
[161.74934387 178.08618164]
[170.14065552 190.51943970]
[178.53196716 202.95269775]
[186.92327881 215.38595581]
[200.79573059 225.13230896]
[195.27053833 241.16069031]
[178.33905029 240.28851318]
[174.49002075 223.77726746]
[166.09870911 211.34400940]
[157.70739746 198.91075134]
[149.31608582 186.47749329]
[140.92477417 174.04423523]
[132.53346252 161.61097717]
[124.14215088 149.17771912]
[115.75083923 136.74446106]
[103.88574982 139.78875732]
[91.65585327 139.09756470]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[5 36]
[6 35]
[8 33]
[9 32]
[10 31]
[11 30]
[16 29]
[17 28]
[18 27]
[45 101]
[46 100]
[47 99]
[48 98]
[49 97]
[50 96]
[52 95]
[53 94]
[54 93]
[55 92]
[56 91]
[57 90]
[58 89]
[59 88]
[60 87]
[61 86]
[106 124]
[107 123]
[108 122]
[109 121]
[110 120]
[111 119]
[112 118]
[113 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
