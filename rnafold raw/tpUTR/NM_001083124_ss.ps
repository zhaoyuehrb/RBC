%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 14:16:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGGUCAGUCACAAAUUCUUUUUUAGCCUUCCCUGGAGAAAAACAAGUCCCCAAGAAAAAAUUCACUCUAUGUAGAGAAAAAAUAUUUUCUCUCAUGUUAGUACAUGCAGAACAUUUAAUAUUCCACAAUAUAUAUGGUUUUUUAUUCA\
) } def
/len { sequence length } bind def

/coor [
[98.58744812 125.47953033]
[93.39203644 139.55105591]
[88.19661713 153.62257385]
[83.00120544 167.69409180]
[91.73033905 180.52302551]
[91.21804047 196.03164673]
[81.66130066 208.25656128]
[66.73487854 212.49702454]
[52.17829514 207.12251282]
[43.58884048 194.19963074]
[44.26934814 178.69749451]
[53.95814133 166.57696533]
[68.92967987 162.49867249]
[74.12509918 148.42715454]
[79.32051086 134.35563660]
[84.51593018 120.28411102]
[79.58306885 114.63461304]
[68.28391266 124.50016022]
[58.41853714 113.20085144]
[69.71734619 103.33560944]
[64.78448486 97.68610382]
[50.14098358 100.93692780]
[35.49748230 104.18775940]
[20.85397911 107.43858337]
[6.21047783 110.68940735]
[-2.29696465 123.73782349]
[-17.19386673 126.82601929]
[-29.58111000 118.63506317]
[-44.22460938 121.88588715]
[-52.49990845 135.35046387]
[-67.89151001 138.93853760]
[-81.26784515 130.52134705]
[-84.69297791 115.09266663]
[-76.13483429 101.80606842]
[-60.67081070 98.54425049]
[-47.47543716 107.24238586]
[-32.83193588 103.99156189]
[-25.07424545 91.32846832]
[-10.26996326 87.82306671]
[2.95965195 96.04590607]
[17.60315323 92.79508209]
[32.24665451 89.54425812]
[46.89015579 86.29342651]
[61.53365707 83.04260254]
[47.12424850 78.87500000]
[32.42656326 81.87136078]
[17.47019196 80.72814941]
[3.39865422 75.53278351]
[-8.71217728 66.68248749]
[-17.93634033 54.85393143]
[-23.56858063 40.95148849]
[-25.17827225 26.03810883]
[-22.64233971 11.25402832]
[-16.15467644 -2.27040195]
[-6.21131039 -13.50114059]
[6.42751408 -21.57951355]
[20.79546738 -25.88787079]
[35.79401016 -26.09680748]
[50.27640152 -22.19034767]
[63.13534546 -14.46716976]
[73.38768768 -3.51776624]
[80.24956512 9.82069969]
[83.19633484 24.52840424]
[82.00268555 39.48083496]
[76.75754547 53.53910828]
[78.63518524 68.42112732]
[84.12222290 54.46073532]
[89.60925293 40.50034714]
[86.42982483 22.39313316]
[100.50602722 11.95951557]
[105.70144653 -2.11200404]
[110.89685822 -16.18352318]
[116.09227753 -30.25504303]
[116.13602448 -39.45558167]
[121.54492188 -44.56337357]
[127.03195190 -58.52376175]
[132.51898193 -72.48415375]
[138.00601196 -86.44454193]
[143.49304199 -100.40493011]
[148.98007202 -114.36531830]
[154.46710205 -128.32571411]
[159.95414734 -142.28610229]
[156.98425293 -158.41407776]
[169.64033508 -168.84266663]
[184.90290833 -162.84382629]
[187.07113647 -146.58865356]
[173.91453552 -136.79907227]
[168.42750549 -122.83867645]
[162.94046021 -108.87828827]
[157.45343018 -94.91790009]
[151.96640015 -80.95751190]
[146.47937012 -66.99712372]
[140.99234009 -53.03673172]
[135.50531006 -39.07633972]
[130.16380310 -25.05962753]
[124.96838379 -10.98810768]
[119.77296448 3.08341146]
[114.57755280 17.15493011]
[119.35804749 28.31083488]
[115.09442902 40.10237885]
[103.56964111 45.98737717]
[98.08261108 59.94776535]
[92.59558105 73.90815735]
[110.66334534 72.25785065]
[127.37693787 82.82243347]
[134.79798889 102.89907074]
[147.57534790 110.75649261]
[160.35270691 118.61392212]
[176.16104126 119.25202942]
[182.94941711 132.50975037]
[195.72677612 140.36717224]
[208.50413513 148.22460938]
[221.28147888 156.08203125]
[234.05883789 163.93945312]
[246.91416931 155.78459167]
[261.97399902 154.02706909]
[276.24505615 158.96231079]
[286.91430664 169.56080627]
[291.90332031 183.68240356]
[290.27301025 198.50830078]
[303.05035400 206.36573792]
[315.82772827 214.22315979]
[328.60507202 222.08058167]
[341.38244629 229.93800354]
[357.78134155 229.85174561]
[365.82077026 244.14508057]
[357.23043823 258.11425781]
[340.84735107 257.38900757]
[333.52499390 242.71536255]
[320.74765015 234.85794067]
[307.97030640 227.00051880]
[295.19293213 219.14309692]
[282.41558838 211.28565979]
[269.92025757 219.43014526]
[255.06681824 221.34963989]
[240.79446411 216.61032104]
[229.95094299 206.10136414]
[224.72427368 191.86868286]
[226.20141602 176.71681213]
[213.42405701 168.85939026]
[200.64669800 161.00195312]
[187.86933899 153.14453125]
[175.09199524 145.28710938]
[160.19757080 145.21101379]
[152.49528503 131.39128113]
[139.71792603 123.53385162]
[126.94056702 115.67642975]
[119.85228729 118.12720490]
[124.75361633 132.30383301]
[110.57690430 137.20495605]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[21 44]
[22 43]
[23 42]
[24 41]
[25 40]
[28 37]
[29 36]
[66 103]
[67 102]
[68 101]
[70 98]
[71 97]
[72 96]
[73 95]
[75 94]
[76 93]
[77 92]
[78 91]
[79 90]
[80 89]
[81 88]
[82 87]
[106 147]
[107 146]
[108 145]
[110 143]
[111 142]
[112 141]
[113 140]
[114 139]
[120 133]
[121 132]
[122 131]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
