%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 08:53:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCCGCCUGUCUGUUGACAGAACUCACUCCUCUGUCCUAUGAAGACCGCUGCCAUUGGUGUUGAGAAUAAUAAAGCUCUGUGUUUUUUUCUAGUGGUA\
) } def
/len { sequence length } bind def

/coor [
[115.78240967 134.58280945]
[104.04251099 143.91955566]
[89.10908508 142.50788879]
[79.32672882 131.13662720]
[80.16168976 116.15988922]
[91.14729309 105.94649506]
[76.41298676 103.13578033]
[65.21225739 109.76586151]
[52.90664291 106.99980164]
[46.07292175 96.88199615]
[31.43416977 93.60984802]
[16.79541779 90.33769989]
[2.15666676 87.06555176]
[-11.40935326 100.28563690]
[-30.02873039 102.85382080]
[-46.40954971 93.93991089]
[-54.24060440 77.17630005]
[-69.12232208 75.29630280]
[-84.00404358 73.41630554]
[-98.88576508 71.53630829]
[-113.76748657 69.65630341]
[-128.64920044 67.77630615]
[-138.47164917 79.67266846]
[-153.17340088 84.34833527]
[-168.06320190 80.31134033]
[-178.38975525 68.84985352]
[-180.85792542 53.62120438]
[-174.68009949 39.48479843]
[-161.82760620 30.95150757]
[-146.40162659 30.74427986]
[-133.32455444 38.92923355]
[-126.76921082 52.89458847]
[-111.88748932 54.77458572]
[-97.00576782 56.65458298]
[-82.12404633 58.53458405]
[-67.24232483 60.41458130]
[-52.36060715 62.29457855]
[-46.21396637 52.62507629]
[-36.81004715 45.98881149]
[-25.53854370 43.41482925]
[-14.08363056 45.32823944]
[-4.17233419 51.48061371]
[2.68585253 60.98143005]
[5.42881536 72.42680359]
[20.06756592 75.69895172]
[34.70631790 78.97109985]
[49.34506989 82.24324799]
[65.68140411 76.04856110]
[79.22370148 88.40146637]
[93.95801544 91.21218872]
[108.89144135 92.62380981]
[123.89144135 92.62380981]
[138.89143372 92.62380981]
[153.89143372 92.62380981]
[168.89143372 92.62380981]
[183.89143372 92.62380981]
[198.89143372 92.62380981]
[213.89143372 92.62380981]
[228.89143372 92.62380981]
[235.63854980 82.57584381]
[246.32922363 77.16474915]
[258.17962646 77.66696167]
[268.16818237 83.83599091]
[273.80590820 93.99556732]
[288.77630615 94.93743134]
[303.74670410 95.87928772]
[318.71710205 96.82114410]
[333.68750000 97.76300049]
[348.65789795 98.70485687]
[363.62832642 99.64671326]
[371.52349854 86.53470612]
[384.61380005 78.60358429]
[399.89114380 77.67587280]
[413.84497070 83.96473694]
[423.26873779 96.02505493]
[425.99694824 111.08544922]
[421.40267944 125.68515015]
[410.54165649 136.46925354]
[395.90966797 140.95965576]
[380.86904907 138.12449646]
[368.87600708 128.61526489]
[362.68646240 114.61711884]
[347.71606445 113.67526245]
[332.74566650 112.73339844]
[317.77523804 111.79154205]
[302.80484009 110.84968567]
[287.83444214 109.90782928]
[272.86404419 108.96597290]
[260.06643677 121.86837769]
[241.58297729 121.49555969]
[228.89143372 107.62380981]
[213.89143372 107.62380981]
[198.89143372 107.62380981]
[183.89143372 107.62380981]
[168.89143372 107.62380981]
[153.89143372 107.62380981]
[138.89143372 107.62380981]
[123.89144135 107.62380981]
[108.89144135 107.62380981]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 50]
[7 49]
[10 47]
[11 46]
[12 45]
[13 44]
[17 37]
[18 36]
[19 35]
[20 34]
[21 33]
[22 32]
[51 99]
[52 98]
[53 97]
[54 96]
[55 95]
[56 94]
[57 93]
[58 92]
[59 91]
[64 88]
[65 87]
[66 86]
[67 85]
[68 84]
[69 83]
[70 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
