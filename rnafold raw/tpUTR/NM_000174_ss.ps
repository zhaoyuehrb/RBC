%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:17:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAGGCCCCCAGAACCCCUGGCUCCAGGCCAGGGGGCCAGUCCCUGAGGCAGGUCCCCAGACUCCACCAAGCCUGGUCAGCCCAAACCACCAGAAGCCCAGAAUAAACUGGCAGCUCAGCUGUUUUAUAUAAGCUCA\
) } def
/len { sequence length } bind def

/coor [
[238.09892273 137.79214478]
[223.44335938 134.59614563]
[208.78779602 131.40013123]
[194.13223267 128.20413208]
[179.47666931 125.00811768]
[164.82110596 121.81211090]
[150.16554260 118.61610413]
[143.78787231 131.53440857]
[134.12510681 142.38325500]
[121.82437897 150.33918762]
[107.73574829 154.77574158]
[92.85348511 155.31225586]
[78.24596405 151.84577942]
[64.97894287 144.56303406]
[54.03785324 133.93147278]
[46.25465775 120.66970062]
[32.41273880 126.44908142]
[18.57081604 132.22845459]
[4.72889614 138.00784302]
[-9.11302471 143.78721619]
[-22.95494461 149.56660461]
[-36.79686356 155.34597778]
[-50.63878632 161.12536621]
[-64.48070526 166.90473938]
[-76.76736450 178.58695984]
[-91.39433289 170.01443481]
[-87.20596313 153.58598328]
[-70.26008606 153.06282043]
[-56.41816711 147.28344727]
[-42.57624435 141.50405884]
[-28.73432541 135.72468567]
[-14.89240456 129.94529724]
[-1.05048406 124.16592407]
[12.79143620 118.38654327]
[26.63335609 112.60716248]
[40.47527695 106.82778168]
[40.64478302 91.82873535]
[26.93700981 85.73801422]
[13.22923565 79.64728546]
[0.39404657 88.20658112]
[-15.03147411 88.44503784]
[-28.12509918 80.28657532]
[-34.70869827 66.33452606]
[-32.68147278 51.04093552]
[-22.69029999 39.28593445]
[-7.92332792 34.82050323]
[6.90735626 39.06954193]
[17.06933594 50.67720032]
[19.31995964 65.93951416]
[33.02773285 72.03023529]
[46.73550797 78.12096405]
[56.16516495 65.88510132]
[68.13704681 57.01286316]
[60.98214722 43.82925797]
[53.82724762 30.64565468]
[46.67234802 17.46204948]
[32.41620255 9.35685062]
[32.57802582 -7.04149866]
[46.99134827 -14.86378098]
[60.82898331 -6.06310320]
[59.85595322 10.30715179]
[67.01085663 23.49075699]
[74.16574860 36.67436218]
[81.32064819 49.85796356]
[94.31655121 46.79436111]
[107.66634369 47.04370880]
[120.53877258 50.59048080]
[132.13232422 57.21383667]
[141.72508240 66.50135803]
[148.71975708 77.87473297]
[152.68078613 90.62578583]
[153.36155701 103.96054077]
[168.01712036 107.15654755]
[182.67268372 110.35255432]
[197.32824707 113.54856110]
[211.98381042 116.74457550]
[226.63937378 119.94058228]
[241.29493713 123.13658905]
[260.12152100 116.08815002]
[273.95471191 129.52777100]
[288.73974609 132.05827332]
[303.52474976 134.58877563]
[310.36224365 120.46910858]
[320.87921143 108.84779358]
[334.22366333 100.65422821]
[349.31777954 96.54060364]
[364.94528198 96.82997894]
[379.84912109 101.49095917]
[392.83285522 110.14083862]
[402.85650635 122.07700348]
[409.11996460 136.33406067]
[411.12683105 151.76184082]
[425.96527100 153.95755005]
[440.80368042 156.15327454]
[459.10946655 147.84547424]
[473.82144165 160.31700134]
[488.74392700 161.83996582]
[503.66641235 163.36293030]
[518.61950684 164.54826355]
[533.59558105 165.39535522]
[548.57159424 166.24246216]
[563.54766846 167.08956909]
[575.16784668 156.37756348]
[590.95550537 157.10321045]
[601.54400635 168.83598328]
[600.65148926 184.61505127]
[588.80743408 195.07896423]
[573.03869629 194.01966858]
[562.70056152 182.06562805]
[547.72454834 181.21852112]
[532.74847412 180.37142944]
[517.77239990 179.52432251]
[513.62170410 182.03862000]
[507.83349609 181.91326904]
[502.14343262 178.28541565]
[487.22094727 176.76245117]
[472.29846191 175.23948669]
[464.90585327 182.44187927]
[454.54415894 184.38203430]
[444.64031982 180.16981506]
[438.60797119 170.99169922]
[423.76953125 168.79597473]
[408.93112183 166.60025024]
[403.17044067 179.77006531]
[394.17834473 191.00044250]
[382.56750488 199.51615906]
[369.13159180 204.72724915]
[354.79107666 206.26995850]
[340.53018188 204.03201294]
[327.32931519 198.16088867]
[316.09768677 189.05404663]
[307.61065674 177.33200073]
[302.45620728 163.79611206]
[300.99426270 149.37377930]
[286.20922852 146.84327698]
[271.42422485 144.31278992]
[263.56060791 150.99777222]
[253.09127808 152.23143005]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[4 75]
[5 74]
[6 73]
[7 72]
[16 36]
[17 35]
[18 34]
[19 33]
[20 32]
[21 31]
[22 30]
[23 29]
[24 28]
[37 51]
[38 50]
[39 49]
[53 64]
[54 63]
[55 62]
[56 61]
[80 136]
[81 135]
[82 134]
[92 123]
[93 122]
[94 121]
[96 117]
[97 116]
[98 115]
[99 112]
[100 111]
[101 110]
[102 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
