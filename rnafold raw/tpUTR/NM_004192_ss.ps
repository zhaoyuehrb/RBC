%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 10:51:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCCAGGCAGCAUGUUCAUUAUAGGGAUGUCCUCCCCCAGGCUGCAGGUGGACCGCCCGGUCCCCAAGUACCAUAGGACAGUCACAUAGGAGCGUGUAGUCGUGACUGAAUAAAGAAAGCAAAAGCCUG\
) } def
/len { sequence length } bind def

/coor [
[97.39702606 223.62705994]
[82.36753845 229.23901367]
[68.68386841 220.86422729]
[66.84297180 204.92715454]
[78.25701904 193.65332031]
[79.69371033 178.72229004]
[81.13040161 163.79124451]
[82.56709290 148.86021423]
[84.00378418 133.92916870]
[69.44477844 106.10153961]
[81.61556244 83.34611511]
[74.06369781 70.38581085]
[66.51184082 57.42551041]
[58.95997620 44.46520996]
[51.40811539 31.50491142]
[43.85625076 18.54461098]
[36.30438995 5.58431005]
[28.75252914 -7.37599039]
[21.65660477 -13.28837109]
[21.17924881 -20.73886108]
[13.94033813 -33.87652206]
[6.70142698 -47.01418304]
[-0.53748411 -60.15184784]
[-15.45219421 -64.64508057]
[-22.60632896 -78.07166290]
[-18.23080063 -92.26287079]
[-25.46971130 -105.40052795]
[-38.90626144 -113.75335693]
[-38.27169800 -128.63442993]
[-45.51060867 -141.77209473]
[-52.74951935 -154.90975952]
[-59.98843002 -168.04742432]
[-67.22734070 -181.18508911]
[-74.46625519 -194.32275391]
[-84.39117432 -194.20851135]
[-93.60083771 -197.75028992]
[-100.80603027 -204.40606689]
[-105.01526642 -213.20124817]
[-105.67112732 -222.87121582]
[-102.72372437 -232.04310608]
[-96.63169098 -239.43072510]
[-102.57900238 -253.20133972]
[-108.91672516 -259.92007446]
[-108.49942017 -267.37417603]
[-114.11481476 -281.28341675]
[-119.73020935 -295.19268799]
[-134.48536682 -306.13211060]
[-131.48062134 -323.37884521]
[-137.42793274 -337.14944458]
[-143.76565552 -343.86819458]
[-143.34834290 -351.32229614]
[-148.96374512 -365.23153687]
[-154.57913208 -379.14080811]
[-160.19451904 -393.05004883]
[-165.80992126 -406.95928955]
[-179.05613708 -416.62728882]
[-177.03773499 -432.90173340]
[-161.83106995 -439.04092407]
[-149.07946777 -428.72933960]
[-151.90066528 -412.57470703]
[-146.28527832 -398.66543579]
[-140.66987610 -384.75619507]
[-135.05448914 -370.84692383]
[-129.43908691 -356.93768311]
[-123.65732574 -343.09674072]
[-117.71001434 -329.32614136]
[-106.53527832 -324.53451538]
[-101.49659729 -313.02856445]
[-105.82095337 -300.80807495]
[-100.20555878 -286.89883423]
[-94.59016418 -272.98956299]
[-88.80839539 -259.14865112]
[-82.86108398 -245.37805176]
[-63.33329010 -239.63916016]
[-54.06978989 -221.19267273]
[-61.32859039 -201.56166077]
[-54.08967972 -188.42399597]
[-46.85076904 -175.28633118]
[-39.61185837 -162.14866638]
[-32.37294769 -149.01101685]
[-25.13403702 -135.87335205]
[-12.21526146 -128.46022034]
[-12.33204937 -112.63944244]
[-5.09313869 -99.50177765]
[9.24089241 -95.61962128]
[16.76932907 -82.39928436]
[12.60017776 -67.39075470]
[19.83908844 -54.25309753]
[27.07799911 -41.11543274]
[34.31690979 -27.97777176]
[41.71282959 -14.92785168]
[49.26469040 -1.96755171]
[56.81655121 10.99274826]
[64.36841583 23.95304871]
[71.92027283 36.91334915]
[79.47213745 49.87364960]
[87.02400208 62.83395004]
[94.57585907 75.79425049]
[105.45385742 73.20233917]
[117.41455841 75.70957947]
[128.01957703 83.67394257]
[134.77233887 96.28777313]
[135.66679382 111.61670685]
[147.52131653 120.80747223]
[164.78195190 118.27270508]
[178.30035400 128.75991821]
[180.06465149 145.43974304]
[192.13615417 154.34359741]
[207.72386169 151.73609924]
[220.54110718 160.98239136]
[222.98365784 176.59678650]
[213.60238647 189.31556702]
[197.96302795 191.59288025]
[185.34414673 182.07766724]
[183.23229980 166.41511536]
[171.16078186 157.51124573]
[158.75544739 161.20230103]
[146.31369019 156.98211670]
[138.48460388 146.18952942]
[138.33055115 132.66200256]
[126.47602081 123.47123718]
[119.59072113 126.44489288]
[125.53782654 140.21559143]
[111.76703644 146.16247559]
[105.82012177 132.39221191]
[98.93482208 135.36585999]
[97.49813080 150.29690552]
[96.06143951 165.22793579]
[94.62474823 180.15898132]
[93.18805695 195.09001160]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 130]
[6 129]
[7 128]
[8 127]
[9 126]
[11 98]
[12 97]
[13 96]
[14 95]
[15 94]
[16 93]
[17 92]
[18 91]
[20 90]
[21 89]
[22 88]
[23 87]
[26 84]
[27 83]
[29 81]
[30 80]
[31 79]
[32 78]
[33 77]
[34 76]
[41 73]
[42 72]
[44 71]
[45 70]
[46 69]
[48 66]
[49 65]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
[103 121]
[104 120]
[107 116]
[108 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
