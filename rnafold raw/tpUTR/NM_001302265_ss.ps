%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 12:47:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUGCAGAAAAAGAAAAAUGAGCUCAAAAUUUGCUUUGAGAGCUACAGGGAAUUGCUAUUACUCCUGUACCUUCUGCUCAAUUUCCUUUCCUCAUCCCAAAUAAAUGCCUUGUUACAAGA\
) } def
/len { sequence length } bind def

/coor [
[170.13954163 220.55622864]
[171.09916687 205.56681824]
[173.92993164 190.81588745]
[178.58721924 176.53607178]
[184.99755859 162.95260620]
[172.34092712 154.90216064]
[159.68429565 146.85171509]
[147.02764893 138.80126953]
[134.37101746 130.75082397]
[121.71438599 122.70038605]
[116.23603058 127.48125458]
[109.70771027 130.93710327]
[102.45056152 132.83848572]
[94.83545685 133.03388977]
[87.26411438 131.46038818]
[80.14785767 128.14979553]
[73.88532257 123.22956085]
[68.84022522 116.91857910]
[65.32039642 109.51770782]
[63.55940628 101.39562988]
[63.70173264 92.97048950]
[51.50742722 102.66258240]
[36.39789200 100.88590240]
[27.23311234 89.20076752]
[12.31261444 87.65845490]
[-2.60788393 86.11613464]
[-17.52838135 84.57382202]
[-32.44887924 83.03150940]
[-47.36937714 81.48919678]
[-59.47491837 91.64948273]
[-75.21174622 90.19076538]
[-85.24347687 77.97847748]
[-83.61846161 62.25795364]
[-71.30079651 52.35589981]
[-55.59833527 54.14702988]
[-45.82706451 66.56869507]
[-30.90656471 68.11100769]
[-15.98606682 69.65332794]
[-1.06556892 71.19564056]
[13.85492897 72.73795319]
[28.77542686 74.28027344]
[40.13664246 64.71688080]
[55.29011917 66.06845856]
[65.24404907 78.04998779]
[75.43315125 67.04170990]
[72.74393463 52.28474045]
[70.05472565 37.52777100]
[67.36551666 22.77080154]
[64.67630005 8.01383209]
[61.98709106 -6.74313688]
[59.10810852 -21.46426010]
[55.85103989 -36.10637283]
[52.40572357 -50.70533752]
[48.96040726 -65.30430603]
[37.33020782 -76.86589813]
[41.78873444 -92.64733124]
[57.74944305 -96.41401672]
[68.79331970 -84.29110718]
[63.55937195 -68.74961853]
[67.00468445 -54.15065384]
[70.45000458 -39.55168915]
[75.10372162 -33.69507599]
[73.79093933 -24.53253937]
[78.29232788 -18.55804443]
[76.74406433 -9.43234825]
[79.43327332 5.32462120]
[82.12248230 20.08159065]
[84.81169891 34.83855820]
[87.50090790 49.59552765]
[90.19011688 64.35250092]
[115.37220764 68.42330170]
[130.69026184 87.16327667]
[129.76483154 110.04375458]
[142.42146301 118.09419250]
[155.07809448 126.14463806]
[167.73472595 134.19508362]
[180.39137268 142.24552917]
[193.04800415 150.29595947]
[202.63314819 138.73187256]
[213.59211731 128.46035767]
[225.75205994 119.64337921]
[238.92120361 112.42002869]
[252.89186096 106.90420532]
[267.44366455 103.18291473]
[282.34713745 101.31484985]
[297.36721802 101.32946014]
[312.26702881 103.22652435]
[326.81158447 106.97611237]
[340.77148438 112.51910400]
[353.92654419 119.76806641]
[366.06930542 128.60867310]
[377.00827026 138.90150452]
[386.57089233 150.48422241]
[394.60638428 163.17414856]
[400.98800659 176.77114868]
[405.61508179 191.06076050]
[408.41467285 205.81765747]
[409.34259033 220.80905151]
[408.38424683 235.79853821]
[405.55471802 250.54971313]
[400.89862061 264.82992554]
[394.48944092 278.41394043]
[386.42822266 291.08752441]
[376.84207153 302.65078735]
[365.88226318 312.92141724]
[353.72155762 321.73733521]
[340.55181885 328.95959473]
[326.58068848 334.47424316]
[312.02856445 338.19430542]
[297.12493896 340.06112671]
[282.10485840 340.04525757]
[267.20520020 338.14691162]
[252.66098022 334.39611816]
[238.70155334 328.85192871]
[225.54710388 321.60186768]
[213.40507507 312.76025391]
[202.46697998 302.46649170]
[192.90531921 290.88296509]
[184.87089539 278.19238281]
[178.49043274 264.59484863]
[173.86454773 250.30482483]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 78]
[6 77]
[7 76]
[8 75]
[9 74]
[10 73]
[21 44]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[45 70]
[46 69]
[47 68]
[48 67]
[49 66]
[50 65]
[51 63]
[52 61]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
