%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 19:13:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCCUGACCGUCGACCUUGGGGCUCUCCACCCGCUCUGGCCCCAGUCGAACUGGGGGCUAGCCACCUCCUCGUCCAGCCCCCAAACCUCCCCUUCCUUUCCCCCUCCUCCGGGGGCCAAGGACAGGGUGGCCUUACUCAGUAAAGGUGUUUCCUGCA\
) } def
/len { sequence length } bind def

/coor [
[106.67191315 291.35195923]
[106.38282776 276.35473633]
[106.09374237 261.35751343]
[105.80465698 246.36030579]
[93.59188080 229.75451660]
[104.05840302 211.09095764]
[102.90313721 196.13551331]
[101.74786377 181.18006897]
[100.59259796 166.22462463]
[99.43732452 151.26918030]
[89.62570190 149.39884949]
[80.51484680 145.70007324]
[72.43552399 140.37236023]
[65.66805267 133.67303467]
[60.43271255 125.90521240]
[56.88277435 117.40447235]
[42.24971771 120.70201111]
[27.61666679 123.99954987]
[12.98361301 127.29708862]
[-1.64944088 130.59461975]
[-6.81893969 134.83952332]
[-12.50147438 135.67388916]
[-16.90970039 133.72573853]
[-31.65896225 136.45690918]
[-46.40822601 139.18806458]
[-61.15748596 141.91923523]
[-75.90675354 144.65039062]
[-90.65601349 147.38156128]
[-105.40527344 150.11273193]
[-108.92173004 164.93009949]
[-118.16609192 177.03222656]
[-131.53672791 184.32235718]
[-146.71710205 185.53741455]
[-161.07710266 180.46688843]
[-172.12878418 169.98928833]
[-177.95738220 155.91990662]
[-177.55303955 140.69636536]
[-170.98582458 126.95621490]
[-159.39355469 117.08003235]
[-144.78463745 112.77893066]
[-129.69017029 114.79808807]
[-116.72536469 122.78768158]
[-108.13643646 135.36346436]
[-93.38717651 132.63229370]
[-78.63791656 129.90113831]
[-63.88865280 127.16996765]
[-49.13938904 124.43880463]
[-34.39012527 121.70764160]
[-19.64086342 118.97647858]
[-4.94697714 115.96157074]
[9.68607616 112.66403198]
[24.31912994 109.36649323]
[38.95218277 106.06896210]
[53.58523560 102.77142334]
[55.77883911 85.62989807]
[64.08081055 70.47335052]
[77.34439087 59.39538956]
[72.24428558 45.28904343]
[67.14418030 31.18270111]
[62.04407883 17.07635689]
[56.94397354 2.97001410]
[51.84386826 -11.13632965]
[46.74376297 -25.24267387]
[41.64365768 -39.34901810]
[29.67516708 -49.69627762]
[32.62414169 -64.29603577]
[20.65565109 -74.64329529]
[23.60462379 -89.24304962]
[8.66101265 -93.42253876]
[-0.94556516 -105.60832214]
[-1.52118480 -121.11471558]
[7.15549135 -133.97920227]
[21.74810410 -139.25511169]
[36.64549637 -134.91375732]
[46.11931610 -122.62448120]
[46.52668762 -107.11275482]
[37.71096802 -94.34315491]
[49.31466293 -85.00487518]
[46.73048401 -69.39614105]
[58.33417892 -60.05785751]
[55.75000000 -44.44912338]
[60.85010529 -30.34277725]
[65.95021057 -16.23643494]
[71.05031586 -2.13009095]
[76.15042114 11.97625256]
[81.25052643 26.08259583]
[86.35063171 40.18893814]
[91.45073700 54.29528427]
[110.48554230 54.70028305]
[127.76232147 62.70034409]
[140.38439941 76.95415497]
[154.44094849 71.71834564]
[164.67239380 59.65069962]
[179.29988098 62.45884323]
[193.35643005 57.22303772]
[207.41296387 51.98723221]
[214.04306030 37.89185715]
[228.37298584 32.78224564]
[241.76989746 39.18989563]
[255.82644653 33.95409012]
[269.88299561 28.71828461]
[283.93951416 23.48247719]
[297.99606323 18.24667168]
[309.36401367 3.78860927]
[326.53277588 7.32187653]
[340.48580933 1.81614029]
[354.43884277 -3.68959618]
[368.39184570 -9.19533253]
[382.34487915 -14.70106888]
[388.40759277 -29.29624176]
[403.04663086 -35.25229645]
[417.57687378 -29.03561401]
[423.37783813 -14.33443928]
[417.00787354 0.12927997]
[402.24618530 5.77447605]
[387.85061646 -0.74804568]
[373.89758301 4.75769091]
[359.94458008 10.26342773]
[345.99154663 15.76916409]
[332.03851318 21.27490044]
[326.91525269 32.26605225]
[315.29666138 36.95209885]
[303.23187256 32.30321121]
[289.17532349 37.53901672]
[275.11880493 42.77482605]
[261.06225586 48.01063156]
[247.00570679 53.24643707]
[241.06518555 66.85693359]
[226.88442993 72.36702728]
[212.64877319 66.04376984]
[198.59222412 71.27957916]
[184.53569031 76.51538086]
[175.30966187 88.20853424]
[159.67674255 85.77488708]
[145.62020874 91.01069641]
[147.81114197 105.16242981]
[145.56965637 119.78821564]
[138.82322693 133.49032593]
[149.27540588 144.24914551]
[159.72758484 155.00794983]
[170.17976379 165.76675415]
[185.55342102 172.91427612]
[182.94108582 189.66575623]
[166.12109375 191.79277039]
[159.42095947 176.21893311]
[148.96878052 165.46012878]
[138.51660156 154.70132446]
[128.06442261 143.94250488]
[114.39277649 150.11390686]
[115.54804230 165.06935120]
[116.70330811 180.02479553]
[117.85858154 194.98023987]
[119.01384735 209.93568420]
[126.99842834 215.10951233]
[131.61351013 223.27131653]
[131.92193604 232.50434875]
[127.98130035 240.70701599]
[120.80187225 246.07121277]
[121.09095764 261.06842041]
[121.38004303 276.06564331]
[121.66912842 291.06286621]
[124.23070526 310.27453613]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 161]
[2 160]
[3 159]
[4 158]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[16 54]
[17 53]
[18 52]
[19 51]
[20 50]
[23 49]
[24 48]
[25 47]
[26 46]
[27 45]
[28 44]
[29 43]
[57 88]
[58 87]
[59 86]
[60 85]
[61 84]
[62 83]
[63 82]
[64 81]
[66 79]
[68 77]
[91 135]
[92 134]
[94 132]
[95 131]
[96 130]
[99 127]
[100 126]
[101 125]
[102 124]
[103 123]
[105 120]
[106 119]
[107 118]
[108 117]
[109 116]
[138 148]
[139 147]
[140 146]
[141 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
