%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 03:44:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUGAGAGGGAUAAUGUGCCCAUGUCUCUUAAGGAGUUUGUGCUACUUAAAUAAAAAAAACAUUUUUAAAGUUA\
) } def
/len { sequence length } bind def

/coor [
[81.86285400 165.96951294]
[80.55425262 151.02670288]
[82.17320251 136.11431885]
[86.65804291 121.80047607]
[93.83674622 108.63217163]
[79.04132843 111.10108948]
[64.24591064 113.57000732]
[49.45048904 116.03892517]
[34.83649063 119.41990662]
[20.46007919 123.69995117]
[6.08366632 127.97998810]
[1.05131698 142.65838623]
[-11.66699696 151.54792786]
[-27.18082428 151.23043823]
[-39.52478027 141.82797241]
[-43.95236206 126.95597076]
[-38.76107788 112.33303833]
[-25.94707870 103.58198547]
[-10.43760872 104.06775665]
[1.80362308 113.60357666]
[16.18003464 109.32353210]
[30.55644798 105.04349518]
[32.58887863 101.82667542]
[36.43058014 99.56435394]
[41.54669571 99.16912079]
[46.98157120 101.24350739]
[61.77699280 98.77458954]
[76.57241058 96.30567169]
[91.36782837 93.83674622]
[102.19137573 83.45162201]
[105.26959991 68.77086639]
[108.34783173 54.09011459]
[111.42606354 39.40936279]
[114.50429535 24.72860909]
[109.76367188 9.63433456]
[119.94812775 -1.23424828]
[123.02635956 -15.91500092]
[126.10459137 -30.59575272]
[120.48265839 -46.00114059]
[131.21913147 -58.39710999]
[147.26925659 -55.03175354]
[152.12203979 -39.36705780]
[140.78533936 -27.51752281]
[137.70710754 -12.83677101]
[134.62889099 1.84398186]
[139.58967590 15.88819027]
[129.18504333 27.80683899]
[126.10681915 42.48759079]
[123.02858734 57.16834259]
[119.95035553 71.84909821]
[116.87212372 86.52984619]
[130.32778931 79.90072632]
[144.81484985 76.01162720]
[159.78141785 75.01071167]
[174.65733337 76.93611145]
[188.87588501 81.71446991]
[201.89540100 89.16376495]
[213.21990967 99.00019836]
[222.41799927 110.84905243]
[229.13923645 124.25892639]
[233.12759399 138.71897888]
[234.23114014 153.67832947]
[232.40779114 168.56709290]
[227.72705078 182.81808472]
[220.36723328 195.88839722]
[210.60868835 207.28009033]
[198.82319641 216.55921936]
[185.45971680 223.37226868]
[171.02737427 227.45970154]
[156.07592773 228.66580200]
[141.17501831 226.94461060]
[126.89225769 222.36170959]
[113.77178955 215.09169006]
[102.31343079 205.41149902]
[92.95369720 193.68992615]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 29]
[6 28]
[7 27]
[8 26]
[9 22]
[10 21]
[11 20]
[30 51]
[31 50]
[32 49]
[33 48]
[34 47]
[36 45]
[37 44]
[38 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
