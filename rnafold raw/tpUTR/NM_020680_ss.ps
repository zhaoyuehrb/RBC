%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 13:57:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGUGGCGGUGGCCCUUCCCGGCUGCGGAGAGCCCGCCCCACAGAUGUAUUUAUUGUACAAACCAUGUGAGCCCGGCCGGCCCAGCCAGGCCAUCUCACGUGUACAUAAUCAGAGCCACAAUAAAUUCUAUUUCACACCCCUUG\
) } def
/len { sequence length } bind def

/coor [
[94.65863037 153.39178467]
[90.26511383 139.04963684]
[91.24484253 124.08167267]
[97.47219086 110.43204498]
[84.75907898 118.39299774]
[72.04595947 126.35394287]
[59.33284760 134.31489563]
[53.66878891 141.57556152]
[46.25944138 142.30696106]
[33.37798309 149.99252319]
[20.49652290 157.67810059]
[7.61506319 165.36366272]
[-5.26639605 173.04924011]
[-9.20016193 185.38256836]
[-20.14718628 191.50680542]
[-31.93528175 188.59712219]
[-44.97912216 196.00375366]
[-58.02296448 203.41038513]
[-66.20295715 216.95285034]
[-81.09095001 216.50898743]
[-94.13478851 223.91561890]
[-107.17862701 231.32225037]
[-115.00869751 245.73135376]
[-131.40713501 245.88432312]
[-139.50462341 231.62379456]
[-130.97117615 217.61978149]
[-114.58526611 218.27841187]
[-101.54141998 210.87178040]
[-88.49758148 203.46514893]
[-81.25057220 190.45245361]
[-65.42959595 190.36654663]
[-52.38575745 182.95991516]
[-39.34191513 175.55328369]
[-31.33155251 159.97389221]
[-12.95196724 160.16778564]
[-0.07050808 152.48220825]
[12.81095123 144.79664612]
[25.69241142 137.11106873]
[38.57387161 129.42549133]
[51.37189865 121.60178375]
[64.08501434 113.64083099]
[76.79812622 105.67987823]
[89.51123810 97.71893311]
[100.77996063 87.81863403]
[110.31144714 76.23628998]
[119.84293365 64.65393829]
[129.37442017 53.07159042]
[138.90589905 41.48924255]
[141.47216797 23.28866386]
[158.07714844 17.70676804]
[167.35722351 5.92202044]
[176.63729858 -5.86272717]
[185.91735840 -17.64747429]
[195.19743347 -29.43222237]
[204.47750854 -41.21697235]
[213.75758362 -53.00172043]
[223.03764343 -64.78646851]
[232.31771851 -76.57121277]
[221.26527405 -93.79939270]
[217.42054749 -113.87493134]
[221.31474304 -133.91210938]
[232.36822510 -151.03868103]
[248.97660828 -162.80763245]
[268.74365234 -167.54672241]
[288.82699585 -164.59617615]
[295.66558838 -177.94659424]
[302.50418091 -191.29701233]
[309.34277344 -204.64741516]
[316.18139648 -217.99783325]
[323.01998901 -231.34825134]
[329.85858154 -244.69866943]
[336.69717407 -258.04907227]
[331.10415649 -270.34954834]
[333.60339355 -283.43023682]
[343.05633545 -292.53164673]
[355.83670044 -294.47485352]
[362.96096802 -307.67504883]
[370.08523560 -320.87521362]
[377.20950317 -334.07540894]
[384.19134521 -347.35147095]
[391.02993774 -360.70187378]
[397.86853027 -374.05230713]
[399.70828247 -390.90612793]
[416.41275024 -393.80386353]
[423.82153320 -378.55438232]
[411.21893311 -367.21368408]
[404.38034058 -353.86328125]
[397.54174805 -340.51287842]
[397.28982544 -333.07177734]
[390.40966797 -326.95114136]
[383.28540039 -313.75094604]
[376.16113281 -300.55078125]
[369.03686523 -287.35058594]
[374.54763794 -271.49591064]
[366.76461792 -256.24517822]
[350.04760742 -251.21047974]
[343.20901489 -237.86006165]
[336.37039185 -224.50964355]
[329.53179932 -211.15924072]
[322.69320679 -197.80882263]
[315.85461426 -184.45840454]
[309.01599121 -171.10800171]
[302.17739868 -157.75758362]
[309.94692993 -151.13012695]
[316.32110596 -143.14353943]
[321.06634521 -134.08671570]
[324.00799561 -124.28785706]
[325.03680420 -114.10258484]
[324.11306763 -103.90098572]
[321.26797485 -94.05420685]
[316.60272217 -84.92093658]
[310.28485107 -76.83432007]
[302.54214478 -70.08985138]
[293.65463257 -64.93454742]
[283.94427490 -61.55788422]
[273.76333618 -60.08488083]
[263.48168945 -60.57143402]
[253.47323608 -63.00221634]
[244.10246277 -67.29114532]
[234.82240295 -55.50639725]
[225.54232788 -43.72164917]
[216.26225281 -31.93689919]
[206.98217773 -20.15215111]
[197.70211792 -8.36740398]
[188.42204285 3.41734385]
[179.14196777 15.20209122]
[169.86189270 26.98683929]
[170.96978760 39.07808304]
[163.27221680 48.98218155]
[150.48825073 51.02072525]
[140.95677185 62.60307312]
[131.42527771 74.18542480]
[121.89379883 85.76776886]
[112.36231232 97.35012054]
[126.69699860 92.93233490]
[141.66661072 93.88672638]
[155.32418823 100.08917999]
[165.89344788 110.73299408]
[171.99974060 124.43383789]
[172.84889221 139.40979004]
[168.33045959 153.71305847]
[159.03210449 165.48338318]
[146.16316223 173.18991089]
[131.39738464 175.83033752]
[116.65520477 173.06123352]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 43]
[5 42]
[6 41]
[7 40]
[9 39]
[10 38]
[11 37]
[12 36]
[13 35]
[16 33]
[17 32]
[18 31]
[20 29]
[21 28]
[22 27]
[44 134]
[45 133]
[46 132]
[47 131]
[48 130]
[50 127]
[51 126]
[52 125]
[53 124]
[54 123]
[55 122]
[56 121]
[57 120]
[58 119]
[65 103]
[66 102]
[67 101]
[68 100]
[69 99]
[70 98]
[71 97]
[72 96]
[76 93]
[77 92]
[78 91]
[79 90]
[80 88]
[81 87]
[82 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
