%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 18:45:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGGCUAUCUCGCCACCUGAGAGGUUGCGCAACGUUCACCCCAAAGGCUCUUUUAAGAGCCACCCACCU\
) } def
/len { sequence length } bind def

/coor [
[85.29270935 188.11331177]
[86.76518250 172.54521179]
[97.93637848 161.60270691]
[96.61067963 146.66140747]
[95.28497314 131.72010803]
[83.57454681 129.00067139]
[73.27209473 121.95608521]
[65.96877289 111.27474976]
[62.93159485 98.22513580]
[48.11111450 100.53887177]
[33.29063416 102.85260773]
[18.47015572 105.16634369]
[3.64967489 107.48007202]
[-6.93220997 119.53839874]
[-22.95005989 118.63949585]
[-32.11635208 105.47292328]
[-27.39949036 90.13894653]
[-12.41784763 84.40048981]
[1.33594096 92.65959167]
[16.15642166 90.34586334]
[30.97690201 88.03212738]
[45.79738235 85.71839142]
[60.61786270 83.40465546]
[68.77816772 70.81858063]
[64.84248352 56.34410477]
[60.90679932 41.86963272]
[47.55682373 29.40643120]
[52.30753708 12.65718079]
[47.73545074 -1.62903738]
[43.16336441 -15.91525555]
[32.57688141 -29.15771675]
[42.37119293 -42.99634933]
[58.38034439 -37.41572189]
[57.44958115 -20.48734283]
[62.02166748 -6.20112371]
[66.59375763 8.08509445]
[77.34796143 14.04777622]
[81.15293884 26.16621971]
[75.38127136 37.93394852]
[79.31695557 52.40842056]
[83.25263977 66.88289642]
[94.60589600 64.13285065]
[105.98204041 65.07853699]
[116.23544312 69.45722961]
[124.38609314 76.66893768]
[129.71298218 85.85289764]
[131.81665039 95.98784637]
[146.72496033 97.64375305]
[161.63328552 99.29966736]
[176.54159546 100.95557404]
[191.44992065 102.61148071]
[206.35824585 104.26739502]
[221.15336609 97.19374847]
[234.52198792 106.69174957]
[232.71160889 122.99066162]
[217.58460999 129.32356262]
[204.70233154 119.17571259]
[189.79400635 117.51980591]
[174.88569641 115.86389160]
[159.97737122 114.20798492]
[145.06906128 112.55207062]
[130.16073608 110.89616394]
[122.42371368 122.92538452]
[110.22628021 130.39440918]
[111.55197906 145.33570862]
[112.87767792 160.27700806]
[125.80099487 169.08166504]
[129.99151611 184.14730835]
[123.47061157 198.36039734]
[109.31725311 205.00994873]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 66]
[4 65]
[5 64]
[9 23]
[10 22]
[11 21]
[12 20]
[13 19]
[24 41]
[25 40]
[26 39]
[28 36]
[29 35]
[30 34]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
