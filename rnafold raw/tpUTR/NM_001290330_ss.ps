%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 12:15:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCAUGUUCUCAUUUCCUUAUCAUACAAUUCUUUGAGAGGUAUCAUUAGCUGCGUCUUAUUUUAUUUUCACCUUCUUUUCUGUUACCUGUAUGUUUGAAUUUUCCUAUAAGUAUUUUUGUUUCAUCUUUGCUUUUUUAAAUUAAAAAAUCAGUUUUAAAAUUG\
) } def
/len { sequence length } bind def

/coor [
[21.31940269 172.45516968]
[9.13412666 156.42500305]
[-4.13236713 163.42501831]
[-17.39886093 170.42503357]
[-30.66535568 177.42503357]
[-36.82956314 184.22877502]
[-44.25173187 184.42930603]
[-57.64909363 191.17546082]
[-71.04645538 197.92163086]
[-69.32692719 212.96385193]
[-72.85095978 227.65919495]
[-81.17446136 240.23852539]
[-93.27673340 249.19425964]
[-107.68563843 253.46099854]
[-122.65662384 252.54228210]
[-136.38397217 246.56825256]
[-147.21859741 236.27766418]
[-160.61595154 243.02381897]
[-174.01330566 249.76998901]
[-187.41067505 256.51614380]
[-193.70330811 263.20129395]
[-201.12794495 263.26046753]
[-214.65132141 269.75033569]
[-228.17468262 276.24020386]
[-229.26325989 291.56048584]
[-237.87942505 304.27493286]
[-251.70545959 310.96347046]
[-267.02224731 309.82687378]
[-279.70962524 301.17089844]
[-286.35476685 287.32394409]
[-285.17016602 272.01080322]
[-276.47448730 259.35061646]
[-262.60678101 252.74891663]
[-247.29742432 253.98150635]
[-234.66455078 262.71685791]
[-221.14118958 256.22695923]
[-207.61781311 249.73710632]
[-194.15682983 243.11878967]
[-180.75947571 236.37261963]
[-167.36212158 229.62646484]
[-153.96475220 222.88029480]
[-155.78048706 208.04829407]
[-152.40582275 193.46266174]
[-144.22927856 180.88813782]
[-132.22151184 171.85292053]
[-117.82019806 167.46290588]
[-102.75784302 168.26643372]
[-88.85340118 174.18577576]
[-77.79261780 184.52426147]
[-64.39525604 177.77810669]
[-50.99789810 171.03193665]
[-37.66536331 164.15853882]
[-24.39887047 157.15853882]
[-11.13237667 150.15852356]
[2.13411713 143.15850830]
[-1.74876392 132.97843933]
[-4.57585335 122.45616150]
[-6.31781530 111.70086670]
[-6.95657492 100.82416534]
[-6.48550415 89.93891144]
[-4.90949106 79.15805054]
[-2.24488878 68.59346008]
[1.48065341 58.35475159]
[6.22847748 48.54817963]
[11.94931793 39.27549362]
[18.58381271 30.63291359]
[26.06311989 22.71011734]
[34.30962753 15.58931732]
[43.23777390 9.34440041]
[52.75490570 4.04016829]
[62.76227570 -0.26834083]
[73.15604401 -3.53641963]
[83.82835388 -5.73015690]
[94.66847229 -6.82678986]
[105.56391144 -6.81493855]
[116.40161133 -5.69472694]
[127.06912994 -3.47777796]
[137.45576477 -0.18709601]
[147.45373535 4.14317322]
[156.95930481 9.46809673]
[165.87384033 15.73242092]
[174.10484314 22.87114334]
[181.56689453 30.81019211]
[188.18257141 39.46718597]
[193.88322449 48.75229263]
[198.60971069 58.56917191]
[202.31297302 68.81595612]
[204.95458984 79.38632202]
[219.83985901 77.53466034]
[234.72512817 75.68299866]
[240.48703003 63.13314819]
[251.61628723 55.14215088]
[265.13391113 53.71690369]
[277.48638916 59.12422943]
[285.47973633 69.84887695]
[300.39755249 68.28094482]
[315.31536865 66.71302032]
[328.23120117 57.57559204]
[341.69750977 63.94014740]
[356.61532593 62.37221909]
[371.53317261 60.80429077]
[386.45098877 59.23636627]
[401.36883545 57.66843796]
[405.49786377 45.37920761]
[413.94955444 35.61031342]
[425.43353271 29.79889488]
[438.21701050 28.78201103]
[450.38610840 32.67626953]
[460.13247681 40.86566544]
[466.02194214 52.09874344]
[480.98864746 51.09988403]
[495.95535278 50.10102463]
[510.92205811 49.10216904]
[525.88879395 48.10330963]
[530.38897705 33.60805130]
[539.82470703 21.71972466]
[552.91973877 14.04612637]
[567.90313721 11.62504673]
[582.74853516 14.78391743]
[595.44824219 23.09552765]
[604.28460693 35.43579865]
[608.06274414 50.13581467]
[606.27154541 65.20751190]
[599.15332031 78.61257935]
[587.67077637 88.53807831]
[573.37683105 93.64167023]
[558.20458984 93.23313904]
[544.20593262 87.36773682]
[533.27416992 76.83870697]
[526.88763428 63.07001495]
[511.92092896 64.06887054]
[496.95422363 65.06773376]
[481.98751831 66.06658936]
[467.02081299 67.06544495]
[460.02087402 82.75476074]
[445.98269653 92.81157684]
[428.69882202 94.40867615]
[412.89471436 87.01937866]
[402.93673706 72.58626556]
[388.01892090 74.15419006]
[373.10110474 75.72212219]
[358.18325806 77.29004669]
[343.26544189 78.85797119]
[331.41665649 87.88325500]
[316.88330078 81.63084412]
[301.96548462 83.19877625]
[287.04763794 84.76670074]
[279.31774902 99.22506714]
[264.35021973 106.31282043]
[247.94140625 103.06665039]
[236.57678223 90.56827545]
[221.69151306 92.41993713]
[206.80624390 94.27159119]
[205.98725891 114.39064789]
[201.41207886 133.99969482]
[193.24285889 152.40379333]
[181.76910400 168.95071411]
[167.39747620 183.05401611]
[150.63726807 194.21388245]
[132.08247375 202.03480530]
[112.39069366 206.23962402]
[92.25977325 206.67932129]
[72.40317535 203.33830261]
[53.52460098 196.33496094]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 55]
[3 54]
[4 53]
[5 52]
[7 51]
[8 50]
[9 49]
[17 41]
[18 40]
[19 39]
[20 38]
[22 37]
[23 36]
[24 35]
[88 153]
[89 152]
[90 151]
[95 147]
[96 146]
[97 145]
[99 143]
[100 142]
[101 141]
[102 140]
[103 139]
[110 134]
[111 133]
[112 132]
[113 131]
[114 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
