%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 23:18:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGACUGAAUGAAAAUAAGUAACUACAUCUGCAUCAUUAUCACUGCCACUCUCUUCAGCUACUGCUGCAUGUGA\
) } def
/len { sequence length } bind def

/coor [
[111.94624329 119.19107056]
[105.59925842 121.90110016]
[98.73039246 122.56984711]
[91.97985840 121.13497925]
[85.97684479 117.73022461]
[81.28085327 112.67293549]
[78.32957458 106.43447113]
[77.39807892 99.59628296]
[63.33884811 94.36769867]
[49.27961731 89.13912201]
[35.22038651 83.91053772]
[21.16115761 78.68196106]
[11.47562695 87.10412598]
[-0.83375764 90.47235870]
[-13.31378937 88.18129730]
[-23.50573921 80.74696350]
[-29.42974663 69.69223785]
[-29.96929359 57.23526764]
[-43.54169846 50.84857559]
[-56.55956650 59.12738419]
[-71.98663330 59.03112411]
[-84.90016937 50.59050369]
[-91.17951965 36.49890137]
[-88.82096863 21.25289345]
[-78.57711792 9.71742535]
[-63.71673965 5.57342339]
[-48.98173141 10.14322376]
[-39.07397842 21.96862030]
[-37.15501022 37.27617264]
[-23.58260536 43.66286087]
[-8.79790497 34.44976425]
[8.72797871 35.74600220]
[22.23010826 47.23272324]
[26.38973808 64.62272644]
[40.44896698 69.85131073]
[54.50819778 75.07988739]
[68.56742859 80.30847168]
[82.62665558 85.53704834]
[104.69995117 77.88845825]
[121.75395203 93.85381317]
[136.72434998 94.79566956]
[151.69474792 95.73752594]
[166.66514587 96.67938995]
[181.65199280 97.30752563]
[196.64871216 97.62165833]
[211.64541626 97.93579102]
[201.68849182 86.71707916]
[198.40805054 72.08017731]
[202.62435913 57.68494415]
[213.28315735 47.13078690]
[227.71928406 43.05669403]
[242.32310486 46.48135757]
[253.44305420 56.54846954]
[258.29867554 70.74082184]
[255.67584229 85.50973511]
[246.23040771 97.16236115]
[232.32165527 102.78536224]
[245.89405823 109.17205048]
[259.46646118 115.55873871]
[275.75393677 113.64805603]
[285.33404541 126.95794678]
[278.35162354 141.79634094]
[261.98959351 142.89877319]
[253.07977295 129.13114929]
[239.50737000 122.74445343]
[225.93496704 116.35776520]
[211.33128357 112.93250275]
[196.33456421 112.61837006]
[181.33786011 112.30422974]
[174.38209534 115.40426636]
[165.72329712 111.64978790]
[150.75289917 110.70793152]
[135.78248596 109.76607513]
[120.81208801 108.82421112]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 38]
[9 37]
[10 36]
[11 35]
[12 34]
[18 30]
[19 29]
[40 74]
[41 73]
[42 72]
[43 71]
[44 69]
[45 68]
[46 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
