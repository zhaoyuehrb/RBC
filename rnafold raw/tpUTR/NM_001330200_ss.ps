%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:13:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCUCCCACUUUGUCUGUACAUACUGGCCUCUGUGAUUACAUAGAUCAGCCAUUAAAAUAAAACAAGCCUUAAUCUGCCUU\
) } def
/len { sequence length } bind def

/coor [
[93.59439087 334.61614990]
[81.71928406 325.33828735]
[72.30436707 313.57156372]
[65.85736084 299.95050049]
[62.72596359 285.20971680]
[63.07903671 270.14413452]
[66.89753723 255.56620789]
[73.97554779 242.26213074]
[83.93135071 230.94935608]
[96.22805023 222.23799133]
[110.20249176 216.59780884]
[107.94013214 201.76940918]
[105.67776489 186.94099426]
[103.41539764 172.11257935]
[101.15303802 157.28417969]
[86.29132080 155.63163757]
[72.36334229 150.18984985]
[60.31778336 141.32949829]
[50.97509003 129.65408325]
[44.97162628 115.95883179]
[42.71630096 101.17657471]
[44.36273956 86.31418610]
[49.79878998 72.38397217]
[58.65419006 60.33477020]
[70.32577515 50.98728180]
[84.01855469 44.97818756]
[81.75618744 30.14978027]
[79.49382782 15.32137012]
[77.23146057 0.49296176]
[63.86303329 -14.36666298]
[71.04151154 -32.15749741]
[67.66416931 -46.77233887]
[64.28683472 -61.38718033]
[60.90949249 -76.00202179]
[57.53215408 -90.61685944]
[54.15481567 -105.23170471]
[42.57854462 -116.84729767]
[47.11046982 -132.60780334]
[63.08853149 -136.30017090]
[74.07587433 -124.12600708]
[68.76965332 -108.60903931]
[72.14699554 -93.99420166]
[75.52433014 -79.37936401]
[78.90167236 -64.76451874]
[82.27901459 -50.14967728]
[85.65634918 -35.53483582]
[95.02781677 -30.74607277]
[100.20306396 -21.32740974]
[99.17897034 -10.40574455]
[92.05986786 -1.76940274]
[94.32223511 13.05900574]
[96.58460236 27.88741493]
[98.84696198 42.71582413]
[113.70867920 44.36836624]
[127.63665771 49.81014252]
[139.68222046 58.67049408]
[149.02491760 70.34591675]
[155.02838135 84.04116821]
[157.28369141 98.82342529]
[155.63726807 113.68581390]
[150.20121765 127.61602783]
[141.34580994 139.66522217]
[129.67422485 149.01272583]
[115.98144531 155.02180481]
[118.24381256 169.85021973]
[120.50617218 184.67863464]
[122.76853943 199.50703430]
[125.03089905 214.33544922]
[140.05145264 215.55186462]
[154.38641357 220.20005798]
[167.26271057 228.02934265]
[177.98594666 238.61749268]
[185.97782898 251.39350891]
[190.80737305 265.66839600]
[192.21411133 280.67230225]
[190.12219238 295.59613037]
[184.64442444 309.63504028]
[176.07621765 322.03192139]
[164.87965393 332.11822510]
[151.65853882 339.35003662]
[137.12586975 343.33731079]
[122.06539154 343.86505127]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 68]
[12 67]
[13 66]
[14 65]
[15 64]
[26 53]
[27 52]
[28 51]
[29 50]
[31 46]
[32 45]
[33 44]
[34 43]
[35 42]
[36 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
