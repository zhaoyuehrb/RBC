%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 03:57:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUGGCCUGAAGAUGCAGGGCAGAGGAAUUGCCCAUGGACAGUGACGCAAGGACUAGGCUGGGAGGGAGCGUGCCAACCCCUUUUGCCUCUGGGUUUGGGGAGCGGAGGGCCUCUUCUUGGUGCCCUGCCCCAAAUAAAGGAACUGGACAAAGAGAA\
) } def
/len { sequence length } bind def

/coor [
[20.75324440 287.00067139]
[12.92405224 290.33532715]
[4.34345341 291.93478394]
[-2.80955911 305.11938477]
[-2.58951783 320.93908691]
[-15.45963573 328.43637085]
[-22.61264801 341.62100220]
[-29.76566124 354.80560303]
[-36.91867447 367.99023438]
[-32.18526840 383.06906128]
[-39.57452774 397.03955078]
[-54.70253754 401.61325073]
[-68.59411621 394.07669067]
[-73.00763702 378.90118408]
[-65.32463074 365.09005737]
[-50.10330200 360.83721924]
[-42.95028687 347.65261841]
[-35.79727554 334.46798706]
[-28.64426231 321.28335571]
[-29.37593651 306.40673828]
[-15.99418736 297.96636963]
[-8.84117413 284.78176880]
[-13.87441254 279.22149658]
[-23.94088936 268.10098267]
[-28.97412682 262.54071045]
[-42.80361557 268.34976196]
[-48.54621887 283.07385254]
[-63.05170822 289.34808350]
[-77.71423340 283.45013428]
[-83.83477783 268.87911987]
[-77.78213501 254.27976990]
[-63.14722443 248.31362915]
[-48.61268234 254.52029419]
[-34.78319550 248.71122742]
[-14.05563164 222.17556763]
[14.74123478 222.87048340]
[22.66752815 210.13574219]
[19.05171013 195.73220825]
[26.90868759 182.70445251]
[42.04094315 179.00950623]
[49.96723557 166.27476501]
[57.89353180 153.54000854]
[65.81982422 140.80525208]
[62.20400620 126.40174103]
[70.06098175 113.37397766]
[85.19323730 109.67903137]
[82.07692719 97.24153900]
[88.22547913 85.62908173]
[84.68031311 71.05404663]
[81.13514709 56.47900391]
[77.58998108 41.90396500]
[64.37282562 33.66111374]
[60.98515320 18.82944870]
[68.92490387 6.27970934]
[55.90533066 -6.70654202]
[61.42649841 -23.33987427]
[57.59225082 -37.84154892]
[53.75799942 -52.34321976]
[49.92375183 -66.84489441]
[44.67749786 -74.39067078]
[46.16049576 -81.67304993]
[42.61532593 -96.24809265]
[39.07015991 -110.82313538]
[35.52499390 -125.39817047]
[31.97982788 -139.97320557]
[28.43466187 -154.54824829]
[24.88949394 -169.12329102]
[19.79430389 -176.77188110]
[21.42179680 -184.02334595]
[7.13519859 -190.07914734]
[-0.83452457 -203.39315796]
[0.57714921 -218.84588623]
[10.82740211 -230.49543762]
[25.97480392 -233.86231995]
[40.19487000 -227.65188599]
[48.01969147 -214.25219727]
[46.44046783 -198.81568909]
[36.06444168 -187.27803040]
[39.46453476 -172.66845703]
[43.00970078 -158.09341431]
[46.55486679 -143.51837158]
[50.10003281 -128.94334412]
[53.64520264 -114.36830139]
[57.19036865 -99.79325867]
[60.73553467 -85.21821594]
[64.42542267 -70.67914581]
[68.25967407 -56.17747116]
[72.09392548 -41.67579651]
[75.92816925 -27.17412376]
[86.24683380 -20.79605675]
[89.53761292 -8.70356464]
[83.49993896 2.73454285]
[96.31674194 10.23555279]
[100.11967468 24.96621323]
[92.16502380 38.35879517]
[95.71018982 52.93383789]
[99.25535583 67.50888062]
[102.80052185 82.08391571]
[115.12570190 90.63318634]
[130.01907349 88.84791565]
[144.91246033 87.06264496]
[153.11311340 82.91399384]
[160.11932373 85.39296722]
[175.04525757 83.90415955]
[189.97119141 82.41535950]
[204.89710999 80.92655182]
[217.86119080 71.85773468]
[231.29357910 78.29360199]
[244.25764465 69.22478485]
[257.69003296 75.66065216]
[272.61596680 74.17184448]
[287.54190063 72.68303680]
[296.20489502 59.66433334]
[311.22384644 55.30952072]
[325.50732422 61.67480469]
[332.31103516 75.75469208]
[328.42254639 90.90110016]
[315.67782593 99.96234131]
[300.09454346 98.65998840]
[289.03070068 87.60897064]
[274.10476685 89.09777832]
[259.17883301 90.58658600]
[247.28236389 99.54890442]
[232.78237915 93.21952820]
[220.88591003 102.18185425]
[206.38592529 95.85247803]
[191.45999146 97.34128571]
[176.53405762 98.83009338]
[161.60812378 100.31890106]
[146.69773865 101.95602417]
[131.80435181 103.74129486]
[116.91097260 105.52656555]
[131.37048340 109.51686096]
[140.36189270 121.52330017]
[140.12243652 136.52139282]
[130.75231934 148.23466492]
[116.17279053 151.76132202]
[102.48513794 145.62550354]
[95.41743469 132.39495850]
[97.92799377 117.60532379]
[101.29432678 132.81405640]
[93.07452393 145.61599731]
[78.55457306 148.73155212]
[70.62828064 161.46630859]
[62.70198822 174.20104980]
[54.77569580 186.93580627]
[58.14202881 202.14453125]
[49.92222595 214.94647217]
[35.40227890 218.06202698]
[27.47598457 230.79678345]
[32.20055389 235.32867432]
[35.94030762 240.96514893]
[38.43714905 247.48548889]
[39.48388290 254.60893250]
[38.93806839 262.00680542]
[36.73290634 269.31756592]
[32.88461304 276.16461182]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 22]
[4 21]
[6 19]
[7 18]
[8 17]
[9 16]
[25 34]
[26 33]
[36 150]
[37 149]
[40 146]
[41 145]
[42 144]
[43 143]
[46 140]
[48 98]
[49 97]
[50 96]
[51 95]
[54 92]
[56 89]
[57 88]
[58 87]
[59 86]
[61 85]
[62 84]
[63 83]
[64 82]
[65 81]
[66 80]
[67 79]
[69 78]
[99 132]
[100 131]
[101 130]
[103 129]
[104 128]
[105 127]
[106 126]
[108 124]
[110 122]
[111 121]
[112 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
