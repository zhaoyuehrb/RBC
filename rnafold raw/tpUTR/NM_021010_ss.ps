%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:52:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUCCUAGAUAGAAACCAAAGCAGUGCAAGAUUCAGUUCAAGGUCCUGAAAAAAGAAAAACAUUUUACUCUGUGUACCUUGUGUCUUUCUAAAUUUCUCUCUCCAAAAUAAAGUUCAAGCAUUAAACUUA\
) } def
/len { sequence length } bind def

/coor [
[-1.82331502 369.95620728]
[-9.93292713 382.57501221]
[-18.04253960 395.19381714]
[-26.15215111 407.81262207]
[-17.18658447 420.05938721]
[-13.25425816 434.71890259]
[-14.88698864 449.80856323]
[-21.86396027 463.28768921]
[-33.24159622 473.33328247]
[-47.48116684 478.58676147]
[-62.65688324 478.33764648]
[-76.71635437 472.61962891]
[-87.75815582 462.20602417]
[-94.28897858 448.50521851]
[-95.42556763 433.37005615]
[-91.01422119 418.84750366]
[-81.65153503 406.90161133]
[-68.60373688 399.14794922]
[-53.63542557 396.63513184]
[-38.77095413 399.70300293]
[-30.66134262 387.08419800]
[-22.55173111 374.46539307]
[-14.44211769 361.84661865]
[-7.56872034 348.51406860]
[-1.99378335 334.58856201]
[3.58115363 320.66302490]
[9.15609074 306.73751831]
[14.73102760 292.81198120]
[8.64994240 279.26370239]
[14.10534668 265.06182861]
[28.35726547 258.77529907]
[33.93220139 244.84977722]
[21.92931366 235.91221619]
[12.64184666 224.16317749]
[6.70760870 210.39984131]
[4.53663206 195.55804443]
[6.28284693 180.64860535]
[11.83318520 166.68856812]
[20.81488037 154.63174438]
[32.62049866 145.30361938]
[46.44901276 139.34474182]
[61.36015701 137.16685486]
[76.33835602 138.92433167]
[81.91329193 124.99880981]
[71.81504059 112.55697632]
[69.31829834 96.72851562]
[75.09642792 81.78237152]
[87.59107971 71.74954224]
[103.43242645 69.33588409]
[108.67438507 55.28163528]
[113.91635132 41.22739029]
[119.15831757 27.17314529]
[111.59671783 11.45022392]
[117.58234406 -4.57889986]
[132.98106384 -11.23016453]
[137.88708496 -25.40517616]
[142.79310608 -39.58018875]
[147.69911194 -53.75519943]
[152.60513306 -67.93021393]
[149.80697632 -83.50201416]
[161.28141785 -92.99867249]
[166.18743896 -107.17368317]
[171.09346008 -121.34869385]
[175.99948120 -135.52371216]
[167.05741882 -152.13874817]
[172.90278625 -169.74557495]
[189.43222046 -177.44595337]
[193.65820312 -191.83834839]
[197.88420105 -206.23074341]
[191.48851013 -220.94381714]
[199.13101196 -235.04956055]
[214.94902039 -237.72723389]
[226.80833435 -226.92276001]
[225.61148071 -210.92440796]
[212.27659607 -202.00474548]
[208.05059814 -187.61235046]
[203.82461548 -173.21995544]
[211.39561462 -164.53399658]
[213.81478882 -153.14518738]
[210.35752869 -141.90130615]
[201.78375244 -133.67225647]
[190.17448425 -130.61769104]
[185.26846313 -116.44267273]
[180.36244202 -102.26766205]
[175.45642090 -88.09265137]
[178.60549927 -73.53474426]
[166.78015137 -63.02419281]
[161.87413025 -48.84918213]
[156.96810913 -34.67417145]
[152.06208801 -20.49915695]
[147.15606689 -6.32414484]
[154.37275696 4.41857529]
[154.04919434 17.55143929]
[146.07894897 28.23874092]
[133.21255493 32.41510773]
[127.97059631 46.46935272]
[122.72863770 60.52359772]
[117.48667145 74.57784271]
[126.73796844 84.60029602]
[130.76461792 97.63188171]
[128.77981567 111.12619781]
[121.17137909 122.44643402]
[109.42602539 129.38059998]
[95.83881378 130.57374573]
[90.26387024 144.49926758]
[102.31690979 153.56346130]
[111.60569000 165.42955017]
[117.50177002 179.28494263]
[119.60874176 194.18284607]
[117.78894806 209.10685730]
[112.17238617 223.04037476]
[103.14749146 235.03587341]
[91.33426666 244.27925110]
[77.54166412 250.14514160]
[62.71224976 252.23924255]
[47.85771942 250.42471313]
[42.28278351 264.35025024]
[48.25917435 278.73495483]
[42.40702057 292.77801514]
[28.65654564 298.38693237]
[23.08160973 312.31243896]
[17.50667191 326.23797607]
[11.93173599 340.16348267]
[6.35679865 354.08901978]
[20.06786537 348.00570679]
[34.77329636 350.96377563]
[45.06570435 361.87554932]
[47.16043091 376.72854614]
[40.28721237 390.06118774]
[26.97342682 396.97082520]
[12.11473751 394.91671753]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[4 20]
[24 124]
[25 123]
[26 122]
[27 121]
[28 120]
[31 117]
[32 116]
[43 105]
[44 104]
[49 98]
[50 97]
[51 96]
[52 95]
[55 91]
[56 90]
[57 89]
[58 88]
[59 87]
[61 85]
[62 84]
[63 83]
[64 82]
[67 77]
[68 76]
[69 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
