%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 01:18:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCAGACGACAGAGGUGCCGGCUGAGGCAGAGGAGAAACUAUGGGGGUGCUGGGAGACUGAGCCUGUGGGCGUGGCUUGCUCCCAGAGAACCUUAUGGAAGAGGACAUCAAAGAAAGAAAUGCCAGACCUGUAUCCCAGAAAAUAAAGCCACAUGAUAUAGCAA\
) } def
/len { sequence length } bind def

/coor [
[94.28597260 165.70457458]
[95.46362305 150.75082397]
[96.19581604 135.76869202]
[88.73641205 136.54795837]
[80.91103363 149.34497070]
[73.08566284 162.14198303]
[72.48718262 177.95185852]
[59.24652100 184.77345276]
[51.42114639 197.57046509]
[50.82266998 213.38034058]
[37.58200455 220.20193481]
[29.75663376 232.99894714]
[29.88400459 249.39759827]
[15.61085892 257.47283936]
[1.62018538 248.91754150]
[2.30438924 232.53266907]
[16.95961952 225.17356873]
[24.78499222 212.37655640]
[24.82374763 197.48200989]
[38.62413406 189.74508667]
[46.44950867 176.94807434]
[46.48826218 162.05352783]
[60.28865051 154.31660461]
[68.11402130 141.51959229]
[75.93939209 128.72257996]
[68.31044006 97.77002716]
[86.22428131 77.87018585]
[82.29631042 63.39361572]
[78.36834717 48.91704559]
[74.44037628 34.44047928]
[58.58859253 34.51593399]
[43.28012848 30.44857788]
[29.57770348 22.52746582]
[18.43079567 11.30894470]
[10.60984802 -2.42241168]
[6.65301895 -17.70867157]
[6.82915831 -33.48537827]
[11.11954784 -48.65566254]
[19.21965408 -62.16651535]
[30.56073570 -73.08186340]
[23.22522545 -86.16583252]
[15.88971519 -99.24980927]
[8.55420589 -112.33377838]
[1.21869564 -125.41774750]
[-6.11681414 -138.50172424]
[-13.45232391 -151.58569336]
[-20.78783417 -164.66966248]
[-37.59128189 -166.40989685]
[-49.93504715 -177.69871521]
[-53.10206604 -193.95457458]
[-46.04173279 -208.75207520]
[-53.62353134 -221.69488525]
[-61.20532990 -234.63769531]
[-68.78713226 -247.58050537]
[-76.36892700 -260.52331543]
[-83.95072937 -273.46612549]
[-91.53252411 -286.40893555]
[-98.60219574 -292.26425171]
[-99.13267517 -299.66918945]
[-106.09027100 -305.65725708]
[-106.48052216 -313.07092285]
[-113.56711578 -326.29135132]
[-120.65370941 -339.51181030]
[-127.74030304 -352.73223877]
[-134.82690430 -365.95269775]
[-150.21376038 -367.06985474]
[-162.54031372 -376.34667969]
[-167.87319946 -390.82299805]
[-164.51071167 -405.87945557]
[-153.52580261 -416.71160889]
[-138.42372131 -419.86294556]
[-124.02349854 -414.32788086]
[-114.92017365 -401.87265015]
[-114.01860046 -386.47164917]
[-121.60645294 -373.03927612]
[-114.51985931 -359.81884766]
[-107.43326569 -346.59838867]
[-100.34667206 -333.37796021]
[-93.26007843 -320.15750122]
[-86.04870605 -307.00469971]
[-78.58971405 -293.99072266]
[-71.00791931 -281.04791260]
[-63.42611694 -268.10510254]
[-55.84431839 -255.16230774]
[-48.26251984 -242.21949768]
[-40.68072128 -229.27668762]
[-33.09892273 -216.33387756]
[-19.72406769 -216.25544739]
[-8.04645538 -209.51470947]
[-1.17957127 -197.78506470]
[-1.01527691 -184.08580017]
[-7.70386314 -172.00517273]
[-0.36835316 -158.92120361]
[6.96715689 -145.83723450]
[14.30266666 -132.75325012]
[21.63817596 -119.66928864]
[28.97368622 -106.58531189]
[36.30919647 -93.50134277]
[43.64470673 -80.41737366]
[65.54794312 -84.78241730]
[87.52189636 -80.78859711]
[106.48832703 -68.99538422]
[117.95869446 -78.66134644]
[120.75049591 -94.45961761]
[134.91102600 -102.00008392]
[149.57756042 -95.49834442]
[153.49916077 -79.94197845]
[143.66752625 -67.26449585]
[127.62464905 -67.19097900]
[116.15428162 -57.52502060]
[120.37845612 -49.89388275]
[123.44743347 -41.72325516]
[125.29411316 -33.18701935]
[125.87744141 -24.46709061]
[125.18329620 -15.74954796]
[123.22483063 -7.22066402]
[120.04225922 0.93707538]
[115.70196533 8.54887772]
[110.29518890 15.45138741]
[103.93606567 21.49619102]
[96.75922394 26.55301094]
[88.91694641 30.51251030]
[92.84491730 44.98907852]
[96.77288055 59.46564865]
[100.70085144 73.94222260]
[112.80618286 74.71003723]
[124.19161224 81.21631622]
[132.12654114 92.87071991]
[134.31336975 107.79827881]
[129.47741699 123.12965393]
[139.77868652 134.03303528]
[150.07997131 144.93643188]
[160.38124084 155.83981323]
[170.68251038 166.74319458]
[180.98377991 177.64659119]
[191.28504944 188.54997253]
[204.83737183 181.85476685]
[219.76132202 179.45327759]
[234.72985840 181.55903625]
[248.41200256 187.98480225]
[259.59112549 198.15919495]
[267.27322388 211.17753601]
[270.77517700 225.88221741]
[269.78558350 240.96571350]
[264.39248657 255.08683777]
[255.07539368 266.98989868]
[242.66279602 275.61654663]
[228.25840759 280.19964600]
[213.14305115 280.33172607]
[198.66078186 276.00097656]
[186.09934998 267.59255981]
[176.57569885 255.85408020]
[170.93669128 241.82936096]
[169.68371582 226.76544189]
[172.92820740 212.00181580]
[180.38165283 198.85124207]
[170.08038330 187.94786072]
[159.77911377 177.04446411]
[149.47784424 166.14108276]
[139.17657471 155.23770142]
[128.87530518 144.33430481]
[118.57403564 133.43092346]
[111.11463165 134.21017456]
[114.92748260 148.71749878]
[119.17032623 163.10493469]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 25]
[5 24]
[6 23]
[8 21]
[9 20]
[11 18]
[12 17]
[27 125]
[28 124]
[29 123]
[30 122]
[40 99]
[41 98]
[42 97]
[43 96]
[44 95]
[45 94]
[46 93]
[47 92]
[51 87]
[52 86]
[53 85]
[54 84]
[55 83]
[56 82]
[57 81]
[59 80]
[61 79]
[62 78]
[63 77]
[64 76]
[65 75]
[102 110]
[103 109]
[130 162]
[131 161]
[132 160]
[133 159]
[134 158]
[135 157]
[136 156]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
