%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 13:14:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCCAGUCCUGGGUGGGGGUGGCGGUGGCCGCAGCUGCCUGGCCUGCUCCUCCCAGCCCCAGUCCCUCCAAGCCACGAG\
) } def
/len { sequence length } bind def

/coor [
[161.16920471 320.75405884]
[152.03796387 317.88131714]
[143.99609375 312.65316772]
[137.63912964 305.44427490]
[133.44113159 296.77648926]
[131.71942139 287.28097534]
[132.61054993 277.65231323]
[136.05955505 268.59765625]
[141.82324219 260.78485107]
[149.48728943 254.79313660]
[144.90739441 240.50941467]
[140.32749939 226.22569275]
[135.74761963 211.94197083]
[131.16772461 197.65826416]
[126.03742218 183.56286621]
[120.36442566 169.67700195]
[114.69142914 155.79115295]
[109.01842499 141.90528870]
[103.34542847 128.01942444]
[97.67243195 114.13356781]
[86.73998260 105.41731262]
[88.44171143 91.53942871]
[82.76870728 77.65356445]
[77.09571075 63.76770782]
[71.42271423 49.88184738]
[66.11550903 45.25648117]
[64.41030121 39.48605728]
[65.89455414 34.69335175]
[61.31466293 20.40963364]
[56.73477554 6.12591457]
[52.15488434 -8.15780354]
[47.02458191 -22.25319290]
[41.35158539 -36.13905334]
[28.06540680 -45.75204086]
[30.01633263 -62.03472900]
[45.19741440 -68.23688507]
[57.99166107 -57.97826004]
[55.23744202 -41.81204987]
[60.91044235 -27.92619133]
[65.12813568 -25.20882416]
[67.53102875 -19.69233704]
[66.43859863 -12.73769379]
[71.01849365 1.54602468]
[75.59838104 15.82974339]
[80.17827606 30.11346054]
[85.30857086 44.20885086]
[90.98157501 58.09471130]
[96.65457153 71.98056793]
[102.32756805 85.86643219]
[113.26001740 94.58268738]
[111.55828857 108.46057129]
[117.23129272 122.34643555]
[122.90428925 136.23228455]
[128.57728577 150.11814880]
[134.25028992 164.00401306]
[139.92327881 177.88987732]
[145.23048401 182.51524353]
[146.93569946 188.28565979]
[145.45144653 193.07836914]
[150.03132629 207.36209106]
[154.61122131 221.64579773]
[159.19111633 235.92951965]
[163.77099609 250.21324158]
[184.85845947 254.80072021]
[199.41320801 270.57293701]
[202.26374817 291.72445679]
[192.51290894 310.57565308]
[200.75555420 323.10797119]
[208.99818420 335.64028931]
[224.50413513 336.22769165]
[236.68263245 345.84350586]
[240.85076904 360.79028320]
[235.40583801 375.32067871]
[222.44149780 383.84747314]
[206.94284058 383.09188843]
[194.86938477 373.34451294]
[190.86363220 358.35339355]
[196.46586609 343.88293457]
[188.22323608 331.35061646]
[179.98060608 318.81829834]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 63]
[11 62]
[12 61]
[13 60]
[14 59]
[15 56]
[16 55]
[17 54]
[18 53]
[19 52]
[20 51]
[22 49]
[23 48]
[24 47]
[25 46]
[28 45]
[29 44]
[30 43]
[31 42]
[32 39]
[33 38]
[67 80]
[68 79]
[69 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
