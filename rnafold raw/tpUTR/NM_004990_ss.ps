%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:39:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGACCUUGGCUCAUAGAAAGUCACUUUAAUAGAUAGGGACAGUAAUAAAUAAAUGUACAAUCUCUAUAUACAA\
) } def
/len { sequence length } bind def

/coor [
[114.53799438 161.72711182]
[101.50337982 163.39819336]
[88.40420532 162.34683228]
[75.80297089 158.61820984]
[64.24079895 152.37242126]
[54.21418381 143.87767029]
[46.15369034 133.49873352]
[40.40544510 121.68131256]
[25.80176163 125.10657501]
[11.19807720 128.53184509]
[-3.40560627 131.95710754]
[-18.00929070 135.38237000]
[-24.89795685 149.42089844]
[-39.21960831 155.69976807]
[-54.21200180 151.25430298]
[-62.79618454 138.18350220]
[-60.91896820 122.65900421]
[-49.46671677 112.01099396]
[-33.84683609 111.26715088]
[-21.43455315 120.77867889]
[-6.83086920 117.35341644]
[7.77281427 113.92815399]
[22.37649727 110.50289154]
[36.98018265 107.07762909]
[37.37058640 90.04275513]
[42.28253174 73.72674561]
[51.36139679 59.30753326]
[63.95174026 47.82612610]
[79.14459229 40.11141968]
[95.84310150 36.72037888]
[112.84172058 37.89781952]
[128.91322327 43.55874252]
[142.89733887 53.29444885]
[153.78446960 66.40206909]
[167.35687256 60.01538086]
[180.92929077 53.62869263]
[194.50169373 47.24200439]
[208.07409668 40.85531235]
[221.64649963 34.46862411]
[235.21890259 28.08193398]
[240.65377808 13.48399448]
[254.50910950 7.20032740]
[268.39251709 12.47161484]
[281.96493530 6.08492517]
[295.53735352 -0.30176422]
[296.13919067 -15.59543514]
[303.78945923 -28.85182762]
[316.73016357 -37.02472305]
[331.98767090 -38.23604202]
[346.05587769 -32.20743942]
[355.70202637 -20.32424355]
[358.70950317 -5.31712151]
[354.38720703 9.36539650]
[343.72836304 20.34937668]
[329.18231201 25.11077881]
[314.09164429 22.55547142]
[301.92404175 13.27064133]
[288.35162354 19.65733147]
[274.77920532 26.04401970]
[269.99118042 40.10141754]
[256.31781006 46.77177429]
[241.60559082 41.65433884]
[228.03318787 48.04103088]
[214.46078491 54.42771912]
[200.88838196 60.81440735]
[187.31597900 67.20109558]
[173.74357605 73.58778381]
[160.17115784 79.97447968]
[163.00666809 92.80622101]
[163.13655090 105.94687653]
[160.55526733 118.83216858]
[155.37362671 130.90876770]
[147.81414795 141.65809631]
[138.20146179 150.61856079]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 24]
[9 23]
[10 22]
[11 21]
[12 20]
[34 68]
[35 67]
[36 66]
[37 65]
[38 64]
[39 63]
[40 62]
[43 59]
[44 58]
[45 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
