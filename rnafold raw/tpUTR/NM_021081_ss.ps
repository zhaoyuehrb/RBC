%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 11:37:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUUCCUCCUGUGACCCGGGCUACCUGUAGCCAAAAUGCAACUGGAUCCAGUUAAUCCUCUCAUUUCUGACCCACUUUUUCCUUUGAAAAUACAAUAAAAUUCCCCCAUACCGGUGUGCAUUUAA\
) } def
/len { sequence length } bind def

/coor [
[4.36152363 275.94857788]
[14.51432419 286.99035645]
[21.53497124 300.24594116]
[24.96442795 314.84863281]
[24.57846069 329.84365845]
[20.40230942 344.25061035]
[12.70902443 357.12744141]
[2.00162315 367.63229370]
[-11.01980305 375.07824707]
[-25.50386238 378.97851562]
[-40.50353241 379.07803345]
[-55.03807449 375.37033081]
[-68.15716553 368.09783936]
[-79.00302887 357.73602295]
[-86.86652374 344.96237183]
[-91.23348999 330.61215210]
[-91.81841278 315.62353516]
[-88.58304596 300.97662354]
[-81.73892975 287.62902832]
[-71.73635101 276.45593262]
[-86.23320770 280.30834961]
[-100.73006439 284.16073608]
[-115.22692871 288.01315308]
[-129.72378540 291.86557007]
[-140.95547485 303.81466675]
[-156.85546875 299.79940796]
[-161.06721497 283.95034790]
[-149.25802612 272.57162476]
[-133.57620239 277.36871338]
[-119.07933807 273.51629639]
[-104.58247375 269.66387939]
[-90.08561707 265.81146240]
[-75.58876038 261.95907593]
[-70.71342468 256.44567871]
[-62.74536514 254.61436462]
[-52.07337189 244.07356262]
[-41.40138245 233.53274536]
[-30.72938919 222.99194336]
[-20.05739784 212.45114136]
[-9.38540459 201.91033936]
[1.28658748 191.36953735]
[11.82739258 180.69754028]
[22.23539925 169.89599609]
[32.64340591 159.09445190]
[43.05141068 148.29289246]
[53.45941925 137.49134827]
[41.31962585 111.32435608]
[42.85067368 82.51911163]
[57.69586563 57.78640747]
[82.39670563 42.88825607]
[79.81228638 28.11257362]
[77.22786713 13.33689213]
[62.33631134 10.40328026]
[49.51218796 2.28501439]
[40.48984909 -9.91997719]
[36.48949051 -24.56106949]
[38.05213165 -39.65817642]
[44.96643829 -53.16953278]
[56.29730225 -63.26784515]
[70.51232147 -68.58739471]
[85.68903351 -68.40876007]
[99.77490997 -62.75609970]
[110.86494446 -52.39388657]
[117.45931244 -38.72352600]
[118.66617584 -23.59382439]
[114.32231903 -9.05094624]
[105.01520538 2.93830228]
[92.00354767 10.75247288]
[94.58796692 25.52815437]
[97.17238617 40.30383682]
[104.34247589 40.39488220]
[111.45005035 41.34402466]
[118.39279175 43.13759995]
[125.07073975 45.74979019]
[131.38775635 49.14298248]
[137.25289917 53.26833725]
[142.58174133 58.06645584]
[147.29756165 63.46826553]
[160.22566223 55.86140823]
[173.15376282 48.25454712]
[186.08186340 40.64768982]
[199.00994873 33.04083252]
[206.61694336 18.51272583]
[223.01106262 18.10695457]
[231.32746887 32.24094009]
[223.01094055 46.37485123]
[206.61680603 45.96892929]
[193.68872070 53.57578659]
[180.76062012 61.18264771]
[167.83251953 68.78950500]
[154.90441895 76.39636230]
[157.41316223 83.40612030]
[159.03085327 90.67340851]
[159.73242188 98.08544922]
[159.50695801 105.52719879]
[158.35795593 112.88316345]
[156.30326843 120.03919220]
[153.37477112 126.88421631]
[149.61791992 133.31201172]
[145.09100342 139.22280884]
[139.86430359 144.52488708]
[134.01890564 149.13594055]
[127.64556122 152.98443604]
[120.84316254 156.01062012]
[113.71728516 158.16754150]
[106.37851715 159.42172241]
[98.94075775 159.75370789]
[91.51943970 159.15832520]
[84.22973633 157.64482117]
[77.18478394 155.23669434]
[70.49391174 151.97131348]
[64.26096344 147.89935303]
[53.85295868 158.70091248]
[43.44495392 169.50245667]
[33.03694534 180.30400085]
[22.62893867 191.10554504]
[18.87278366 199.55281067]
[11.82739258 202.04151917]
[1.15540087 212.58232117]
[-9.51659107 223.12313843]
[-20.18858337 233.66394043]
[-30.86057663 244.20474243]
[-41.53256989 254.74554443]
[-52.20455933 265.28634644]
[-37.49851990 262.33129883]
[-22.52383232 263.20236206]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 33]
[21 32]
[22 31]
[23 30]
[24 29]
[35 124]
[36 123]
[37 122]
[38 121]
[39 120]
[40 119]
[41 118]
[42 116]
[43 115]
[44 114]
[45 113]
[46 112]
[50 70]
[51 69]
[52 68]
[78 91]
[79 90]
[80 89]
[81 88]
[82 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
