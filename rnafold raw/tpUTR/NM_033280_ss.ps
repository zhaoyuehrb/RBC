%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 14:14:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGAGAAGCAGUUCCUGGGACCAGAUUGAAAUGAAUUCUGUUGAAAAAGAGAAAAACUAAUAUAUUUGAGAUGUUCCAUUUUCUGUAUAAAAGGGAACAGUGUGGAGAUGUUUUUGUCUUGUCCAAAUAAAAGAUUCACCAGUAAAGAUGG\
) } def
/len { sequence length } bind def

/coor [
[133.47346497 337.09005737]
[129.24716187 331.01669312]
[127.40621948 323.77954102]
[128.23173523 316.28881836]
[131.66632080 309.50408936]
[137.31527710 304.31140137]
[134.55903625 289.56680298]
[131.80279541 274.82220459]
[116.87931061 273.70910645]
[102.74163818 268.76712036]
[90.35549164 260.32745361]
[80.56856537 248.96047974]
[74.05255127 235.43708801]
[71.25704193 220.67652893]
[72.37849426 205.68385315]
[77.34645081 191.48153687]
[85.82793427 179.03965759]
[97.24975586 169.20973206]
[110.83724213 162.66638184]
[108.08099365 147.92178345]
[105.32475281 133.17718506]
[102.56851196 118.43258667]
[89.89699554 110.40559387]
[75.38836670 114.21344757]
[60.87974548 118.02130890]
[46.37112045 121.82917023]
[42.99384308 136.75741577]
[33.05708694 148.39869690]
[18.84424400 154.07792664]
[3.62132430 152.49008179]
[-9.11355877 144.00000000]
[-16.43402100 130.55867004]
[-16.65787506 115.25479889]
[-9.73368168 101.60511017]
[2.74743271 92.74619293]
[17.91739845 90.71376801]
[32.29026794 95.97487640]
[42.56325912 107.32054138]
[57.07188416 103.51268005]
[71.58051300 99.70482635]
[86.08913422 95.89696503]
[71.35108948 93.10592651]
[62.28925705 81.15254974]
[63.58229065 66.20838928]
[74.56259155 55.98913956]
[89.56100464 55.77103043]
[100.83381653 65.66667175]
[102.56034088 80.56890106]
[107.40015411 66.37115479]
[112.23997498 52.17340088]
[117.07978821 37.97564697]
[114.20899200 22.41707802]
[125.63898468 12.86697388]
[130.47880554 -1.33077848]
[135.31861877 -15.52853107]
[140.15843201 -29.72628403]
[144.99824524 -43.92403793]
[149.83807373 -58.12178802]
[138.96264648 -72.56575012]
[138.88731384 -90.48960114]
[149.45487976 -104.77291107]
[166.31726074 -109.85337067]
[170.57011414 -124.23785400]
[174.82295227 -138.62232971]
[179.07580566 -153.00682068]
[183.32864380 -167.39129639]
[169.50320435 -161.57263184]
[155.54212952 -167.05793762]
[149.37522888 -180.73161316]
[154.50526428 -194.82710266]
[168.01838684 -201.33828735]
[182.23925781 -196.56683350]
[189.09060669 -183.22213745]
[195.07890320 -196.97496033]
[201.06719971 -210.72779846]
[207.05549622 -224.48062134]
[213.04379272 -238.23345947]
[219.03208923 -251.98628235]
[217.44740295 -267.72793579]
[229.62236023 -276.30810547]
[235.61065674 -290.06094360]
[241.59895325 -303.81375122]
[247.58724976 -317.56658936]
[241.57000732 -332.18057251]
[247.72583008 -346.73672485]
[262.40261841 -352.59912109]
[276.89285278 -346.28973389]
[282.59976196 -331.55178833]
[276.13754272 -317.12905884]
[261.34008789 -311.57830811]
[255.35179138 -297.82546997]
[249.36349487 -284.07263184]
[243.37519836 -270.31982422]
[245.38819885 -255.56185913]
[232.78491211 -245.99798584]
[226.79661560 -232.24516296]
[220.80831909 -218.49232483]
[214.82002258 -204.73950195]
[208.83172607 -190.98666382]
[202.84342957 -177.23384094]
[197.71313477 -163.13845825]
[193.46028137 -148.75396729]
[189.20744324 -134.36949158]
[184.95458984 -119.98500824]
[180.70173645 -105.60052490]
[189.48603821 -97.12139893]
[193.83464050 -85.63565063]
[192.85711670 -73.32057190]
[186.67898560 -62.53902435]
[176.42953491 -55.38606644]
[164.03582764 -53.28197098]
[159.19599915 -39.08422089]
[154.35618591 -24.88646698]
[149.51637268 -10.68871498]
[144.67655945 3.50903797]
[139.83674622 17.70679092]
[143.05371094 32.24984360]
[131.27754211 42.81546402]
[126.43772888 57.01321411]
[121.59790802 71.21096802]
[116.75809479 85.40872192]
[117.31311035 115.67634583]
[120.06935120 130.42094421]
[122.82559204 145.16554260]
[125.58183289 159.91014099]
[140.61552429 161.10325623]
[154.81703186 166.14335632]
[167.22030640 174.68119812]
[176.98326111 186.12983704]
[183.44496155 199.70497131]
[186.17034912 214.47863770]
[184.97955322 229.44267273]
[179.95974731 243.57752991]
[171.45877075 255.92166138]
[160.06103516 265.63702393]
[146.54739380 272.06594849]
[149.30363464 286.81054688]
[152.05987549 301.55514526]
[168.69519043 317.69793701]
[160.93687439 338.76281738]
[165.18972778 353.14730835]
[169.44256592 367.53179932]
[183.85124207 373.60830688]
[190.93696594 387.54843140]
[187.35408020 402.77001953]
[174.79431152 412.08590698]
[159.18798828 411.09747314]
[147.90396118 400.27136230]
[146.27018738 384.71936035]
[155.05809021 371.78463745]
[150.80523682 357.40014648]
[146.55239868 343.01565552]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 138]
[7 137]
[8 136]
[19 125]
[20 124]
[21 123]
[22 122]
[23 41]
[24 40]
[25 39]
[26 38]
[48 121]
[49 120]
[50 119]
[51 118]
[53 116]
[54 115]
[55 114]
[56 113]
[57 112]
[58 111]
[62 105]
[63 104]
[64 103]
[65 102]
[66 101]
[73 100]
[74 99]
[75 98]
[76 97]
[77 96]
[78 95]
[80 93]
[81 92]
[82 91]
[83 90]
[140 152]
[141 151]
[142 150]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
