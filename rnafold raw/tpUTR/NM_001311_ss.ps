%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 23:44:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAGGUGGUGGAGACCCCAUCCUUGGCUGCUUGCAGGGCCACUGUCCAGGCAAAUGCCAGGCCUUGUCCCCAGAUGCCCAGGGCUCCCUUGUUGCCCCUAAUGCUCUCAGUAAACCUGAACACUUGGAA\
) } def
/len { sequence length } bind def

/coor [
[56.60033798 243.24331665]
[64.92766571 229.11576843]
[64.56797791 214.12007141]
[64.20829010 199.12438965]
[63.84859848 184.12870789]
[63.48890686 169.13301086]
[63.12921906 154.13732910]
[62.76952744 139.14164734]
[71.59369659 112.75218964]
[91.75002289 100.27644348]
[78.05171967 94.16443634]
[64.35341644 88.05243683]
[48.59813309 89.49517822]
[40.12802505 77.24338531]
[26.42972565 71.13137817]
[12.73142433 65.01937866]
[2.95531702 73.62433624]
[-9.31616783 77.84419250]
[-22.22320366 77.07720184]
[-33.82398605 71.47457886]
[-42.38688278 61.91233063]
[-46.64886475 49.85447693]
[-46.00175095 37.12897110]
[-59.39125824 30.36723518]
[-72.78076935 23.60549927]
[-86.17027283 16.84376335]
[-99.55978394 10.08202744]
[-112.94928741 3.32029176]
[-126.57331848 -2.95552063]
[-140.41424561 -8.73728943]
[-154.25517273 -14.51905727]
[-168.09608459 -20.30082512]
[-181.93701172 -26.08259392]
[-195.77793884 -31.86436272]
[-209.75352478 -37.31257248]
[-223.85572815 -42.42409134]
[-237.95794678 -47.53561020]
[-253.03976440 -42.06586456]
[-266.64373779 -50.56949997]
[-268.33401489 -66.52326202]
[-256.81402588 -77.68878174]
[-240.92085266 -75.50083160]
[-232.84642029 -61.63782120]
[-218.74421692 -56.52630234]
[-204.64199829 -51.41478348]
[-199.93173218 -52.63866425]
[-194.40679932 -50.84506226]
[-189.99617004 -45.70528412]
[-176.15524292 -39.92351913]
[-162.31431580 -34.14175034]
[-148.47340393 -28.35997963]
[-134.63247681 -22.57821274]
[-120.79154968 -16.79644394]
[-117.33087158 -17.85939407]
[-113.17263031 -17.23554611]
[-109.14543152 -14.61135960]
[-106.18755341 -10.06921673]
[-92.79804993 -3.30748034]
[-79.40853882 3.45425558]
[-66.01902771 10.21599197]
[-52.62952042 16.97772789]
[-39.24001312 23.73946381]
[-25.27459526 13.81076622]
[-8.12151146 12.25532532]
[7.56218147 19.58476448]
[17.47337151 33.88630676]
[18.84342575 51.32107925]
[32.54172516 57.43308258]
[46.24002838 63.54508209]
[61.01551819 61.66516495]
[70.46542358 74.35413361]
[84.16371918 80.46614075]
[97.86202240 86.57814026]
[112.85771179 86.93782806]
[126.83329773 81.48961639]
[133.77563477 75.39762878]
[141.20989990 76.08274841]
[155.31210327 70.97122955]
[159.74542236 53.47534180]
[173.62374878 42.18167114]
[191.34387207 41.40993881]
[205.89335632 51.27924728]
[219.73426819 45.49747849]
[233.57519531 39.71570969]
[247.41612244 33.93394089]
[250.00846863 18.72594070]
[260.42822266 7.34910393]
[275.35046387 3.43374038]
[290.01358032 8.22922707]
[299.73861694 20.20534134]
[301.42233276 35.54055023]
[294.52749634 49.34144211]
[281.25418091 57.20420456]
[265.83789062 56.61985779]
[253.19789124 47.77486420]
[239.35696411 53.55663300]
[225.51603699 59.33840179]
[211.67512512 65.12017059]
[210.63482666 77.32705688]
[204.43273926 87.97634888]
[194.20913696 94.98670959]
[181.89703369 96.95735168]
[169.85679626 93.44758606]
[160.42362976 85.07344055]
[146.32141113 90.18495941]
[132.28150940 95.46520233]
[118.30591583 100.91341400]
[115.44574738 115.63820648]
[126.36548615 125.92213440]
[137.28523254 136.20606995]
[148.20497131 146.48999023]
[164.21937561 147.44830322]
[173.33677673 160.64878845]
[168.56306458 175.96516418]
[153.56024170 181.64801025]
[139.83718872 173.33795166]
[137.92105103 157.40972900]
[127.00130463 147.12580872]
[116.08155823 136.84187317]
[105.16181183 126.55794525]
[98.31266785 129.61395264]
[77.76521301 138.78195190]
[78.12490082 153.77763367]
[78.48459625 168.77333069]
[78.84428406 183.76901245]
[79.20397186 198.76469421]
[79.56366730 213.76039124]
[79.92335510 228.75607300]
[88.91844940 242.46812439]
[81.30036163 256.99041748]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 128]
[3 127]
[4 126]
[5 125]
[6 124]
[7 123]
[8 122]
[10 73]
[11 72]
[12 71]
[14 69]
[15 68]
[16 67]
[23 62]
[24 61]
[25 60]
[26 59]
[27 58]
[28 57]
[29 53]
[30 52]
[31 51]
[32 50]
[33 49]
[34 48]
[35 45]
[36 44]
[37 43]
[74 107]
[75 106]
[77 105]
[78 104]
[82 98]
[83 97]
[84 96]
[85 95]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
