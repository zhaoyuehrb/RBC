%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 21:15:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAGUCCCCGAGGGCGAAGGCCAUUGGGUUUGGGGCCAUGGUGGAGGGCACUUCAGGUCCGUGGGCCGUAUCUGUCACAAUAAAUGGCCAGUGCUGCUUCUUGCA\
) } def
/len { sequence length } bind def

/coor [
[97.09249115 138.34716797]
[89.05860138 151.01432800]
[74.14599609 152.63117981]
[63.58390427 141.98027039]
[65.32559967 127.08172607]
[78.06098175 119.15404510]
[70.99240875 116.64700317]
[58.07675552 124.27497101]
[45.16109848 131.90293884]
[32.24544525 139.53089905]
[19.32979202 147.15887451]
[11.38189888 160.83883667]
[-3.51149487 160.64889526]
[-16.42714882 168.27687073]
[-29.34280396 175.90483093]
[-36.92604065 190.44534302]
[-53.31948471 190.87789917]
[-61.65896225 176.75752258]
[-53.36553574 162.61004639]
[-36.97077179 162.98918152]
[-24.05511665 155.36120605]
[-11.13946152 147.73324585]
[-4.11538363 134.59887695]
[11.70182514 134.24320984]
[24.61747932 126.61524963]
[37.53313446 118.98728180]
[50.44878769 111.35931396]
[63.36444092 103.73134613]
[68.57669830 93.59384918]
[76.07841492 86.81576538]
[84.38593292 83.71813965]
[92.06668091 84.06195831]
[97.93097687 87.11719513]
[95.27762604 72.35373688]
[85.22122192 60.13983917]
[90.58518219 46.24461365]
[87.93182373 31.48115730]
[85.27847290 16.71769714]
[82.62511444 1.95423937]
[79.97176361 -12.80921936]
[77.31840515 -27.57267761]
[74.01155853 -42.20362854]
[70.05775452 -56.67316437]
[66.10394287 -71.14270020]
[62.15013885 -85.61222839]
[58.19633102 -100.08176422]
[46.16888046 -111.22952271]
[50.07272339 -127.15723419]
[65.89192963 -131.47984314]
[77.35304260 -119.75061035]
[72.66586304 -104.03557587]
[76.61967468 -89.56604004]
[80.57347870 -75.09650421]
[84.52729034 -60.62697220]
[88.48109436 -46.15743637]
[91.51271820 -44.07184982]
[93.61315155 -40.33558273]
[93.98094940 -35.43848801]
[92.08187103 -30.22603226]
[94.73522186 -15.46257305]
[97.38857269 -0.69911480]
[100.04193115 14.06434345]
[102.69528198 28.82780266]
[105.34864044 43.59126282]
[115.21525574 54.74917984]
[110.04108429 69.70038605]
[112.69444275 84.46384430]
[123.76194000 94.58858490]
[138.70268250 95.92052460]
[153.64343262 97.25246429]
[168.58418274 98.58440399]
[180.64071655 88.72145844]
[195.77378845 90.28507233]
[205.10229492 101.83992004]
[220.04304504 103.17185974]
[234.98379517 104.50379944]
[249.92454529 105.83573914]
[260.87170410 94.66910553]
[276.44042969 93.20313263]
[289.27963257 102.13000488]
[293.32702637 117.23472595]
[286.67156982 131.38529968]
[272.45574951 137.90028381]
[257.39187622 133.70346069]
[248.59260559 120.77648163]
[233.65185547 119.44454193]
[218.71110535 118.11260986]
[203.77035522 116.78067017]
[192.54501343 126.50318146]
[177.37399292 125.36524200]
[167.25224304 113.52514648]
[152.31149292 112.19321442]
[137.37074280 110.86127472]
[122.43000031 109.52933502]
[113.32799530 121.45214844]
[118.55102539 135.51344299]
[123.77404785 149.57473755]
[137.70056152 157.53913879]
[140.01428223 173.41447449]
[128.94033813 185.02253723]
[112.97369385 183.45861816]
[104.36260223 169.92242432]
[109.71275330 154.79776001]
[104.48973083 140.73646545]
[99.26670074 126.67517853]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 28]
[8 27]
[9 26]
[10 25]
[11 24]
[13 22]
[14 21]
[15 20]
[33 67]
[34 66]
[36 64]
[37 63]
[38 62]
[39 61]
[40 60]
[41 59]
[42 55]
[43 54]
[44 53]
[45 52]
[46 51]
[68 94]
[69 93]
[70 92]
[71 91]
[74 88]
[75 87]
[76 86]
[77 85]
[95 105]
[96 104]
[97 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
