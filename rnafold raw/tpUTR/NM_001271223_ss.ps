%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:37:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUCGCCCCGGCCACACCCUUGGUCUCCCCGCUGGGGGUCGCUGCAGACGCGCCAAUAAAAACGCACAGCCGGGCGAG\
) } def
/len { sequence length } bind def

/coor [
[89.09657288 238.54115295]
[75.26937866 230.40554810]
[73.15167236 214.50286865]
[84.36798859 203.03231812]
[85.54487610 188.07855225]
[86.72176361 173.12478638]
[87.89865112 158.17103577]
[89.07553864 143.21726990]
[90.25241852 128.26351929]
[79.27864075 121.55149078]
[72.14096832 110.84968567]
[57.24493790 112.61274719]
[42.34891129 114.37580872]
[27.45288658 116.13886261]
[12.55685902 117.90192413]
[2.97057605 130.46690369]
[-12.70364761 132.49032593]
[-25.16657448 122.77174377]
[-27.02416801 107.07700348]
[-17.17435455 94.71752167]
[-1.46085143 93.02596283]
[10.79379845 103.00589752]
[25.68982506 101.24283600]
[40.58585358 99.47978210]
[55.48188019 97.71672058]
[70.37790680 95.95365906]
[73.36141968 86.42696381]
[79.31501007 78.41360474]
[71.98568726 65.32616425]
[64.65637207 52.23872375]
[57.32705307 39.15128326]
[42.96454239 31.23608971]
[42.90861511 14.83703709]
[57.21680450 6.82406569]
[71.17007446 15.44023228]
[70.41448975 31.82196426]
[77.74381256 44.90940475]
[85.07312775 57.99684525]
[92.40245056 71.08428192]
[105.23927307 70.56547546]
[117.10862732 75.48191833]
[125.81877899 84.92578125]
[140.25559998 80.85417175]
[154.69242859 76.78256989]
[169.12925720 72.71096039]
[171.96589661 64.22781372]
[177.98741150 57.74374390]
[186.06072998 54.36241531]
[194.71385193 54.61439896]
[202.40419006 58.37548065]
[207.79348755 64.90294647]
[222.68951416 63.13988113]
[237.58554077 61.37682343]
[243.57456970 47.23372650]
[255.84242249 37.99277115]
[271.08911133 36.13972473]
[285.21337891 42.17305374]
[294.41583252 54.46981430]
[296.22106934 69.72224426]
[290.14349365 83.82752228]
[277.81796265 92.99138641]
[262.55993652 94.74880981]
[248.47378540 88.62705994]
[239.34860229 76.27285004]
[224.45257568 78.03591156]
[209.55654907 79.79897308]
[194.10092163 94.78321838]
[173.20086670 87.14778900]
[158.76403809 91.21939850]
[144.32720947 95.29100037]
[129.89038086 99.36260986]
[123.11083221 118.96656799]
[105.20618439 129.44039917]
[104.02929688 144.39416504]
[102.85240936 159.34791565]
[101.67552185 174.30168152]
[100.49863434 189.25543213]
[99.32174683 204.20919800]
[108.60558319 217.29315186]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 78]
[5 77]
[6 76]
[7 75]
[8 74]
[9 73]
[11 26]
[12 25]
[13 24]
[14 23]
[15 22]
[28 39]
[29 38]
[30 37]
[31 36]
[42 71]
[43 70]
[44 69]
[45 68]
[51 66]
[52 65]
[53 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
