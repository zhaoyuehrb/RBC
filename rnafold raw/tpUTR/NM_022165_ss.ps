%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 02:20:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCACAGAUCUGGACGUUCACGUGCACUCUCUUCCUGUACAGUAUUUAUUGUUCCUGGCACUUUAUUUAAAGAUAUUUGACCCUCA\
) } def
/len { sequence length } bind def

/coor [
[63.00107956 157.77743530]
[56.72663498 153.24066162]
[51.00333023 148.02580261]
[45.90405273 142.19929504]
[41.49374771 135.83531189]
[37.82858658 129.01493835]
[34.95524597 121.82502747]
[20.29804420 125.01350403]
[5.64084148 128.20198059]
[-2.08880234 138.71197510]
[-14.52803135 140.96963501]
[-24.78073883 134.28649902]
[-39.54240799 136.94978333]
[-51.74953079 147.01441956]
[-65.64836121 141.65982056]
[-80.41003418 144.32312012]
[-95.17169952 146.98641968]
[-107.33599854 157.98468018]
[-122.85771942 152.69239807]
[-125.76943970 136.55381775]
[-113.07583618 126.17092133]
[-97.83499908 132.22474670]
[-83.07332611 129.56144714]
[-68.31166077 126.89815521]
[-57.16039276 117.02402496]
[-42.20570374 122.18812561]
[-27.44403648 119.52482605]
[-14.82032681 107.47577667]
[2.45236206 113.54478455]
[17.10956573 110.35630035]
[31.76676750 107.16782379]
[35.32723236 77.09617615]
[51.48633194 51.48633194]
[77.09617615 35.32723236]
[107.16782379 31.76676750]
[110.35630035 17.10956573]
[98.96751404 4.75224876]
[97.12266541 -11.78541756]
[105.34396362 -26.06311226]
[120.27149200 -32.63654709]
[122.93479156 -47.39821625]
[125.59809113 -62.15988541]
[128.26138306 -76.92155457]
[130.92468262 -91.68321991]
[124.87084961 -106.92405701]
[135.25373840 -119.61766052]
[151.39233398 -116.70594025]
[156.68461609 -101.18422699]
[145.68635559 -89.01992035]
[143.02305603 -74.25825500]
[140.35975647 -59.49658585]
[137.69645691 -44.73491669]
[135.03315735 -29.97324944]
[145.20120239 -21.12969780]
[149.65257263 -8.29489136]
[147.10305786 5.15948343]
[138.12284851 15.64153290]
[125.01350403 20.29804420]
[121.82502747 34.95524597]
[129.01493835 37.82858658]
[135.83531189 41.49374771]
[142.19929504 45.90405273]
[148.02580261 51.00333023]
[153.24066162 56.72663498]
[157.77743530 63.00107956]
[161.57833862 69.74674225]
[164.59498596 76.87771606]
[166.78894043 84.30318451]
[168.13224792 91.92856598]
[168.60783386 99.65674591]
[168.20960999 107.38929749]
[166.94265747 115.02773285]
[164.82312012 122.47477722]
[161.87797546 129.63558960]
[158.14476013 136.41894531]
[153.67098999 142.73846436]
[148.51367188 148.51367188]
[142.73846436 153.67098999]
[136.41894531 158.14476013]
[129.63558960 161.87797546]
[122.47477722 164.82312012]
[115.02773285 166.94265747]
[107.38929749 168.20960999]
[99.65674591 168.60783386]
[91.92856598 168.13224792]
[84.30318451 166.78894043]
[76.87771606 164.59498596]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 31]
[8 30]
[9 29]
[12 27]
[13 26]
[15 24]
[16 23]
[17 22]
[35 59]
[36 58]
[40 53]
[41 52]
[42 51]
[43 50]
[44 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
