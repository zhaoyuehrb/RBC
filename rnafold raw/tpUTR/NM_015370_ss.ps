%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 05:39:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACAAGAACUCAUGGGAUUAGAGUAUUCUCUGCUAGAGAUCUGAAAAAUAAACACAACUUUGCACCUUC\
) } def
/len { sequence length } bind def

/coor [
[168.82873535 231.45242310]
[164.38264465 217.08329773]
[162.57391357 202.15116882]
[163.46069336 187.13606262]
[167.01448059 172.52064514]
[173.12104797 158.77474976]
[160.71856689 150.33801270]
[148.31608582 141.90127563]
[133.44093323 141.14027405]
[126.38235474 126.98092651]
[113.97988129 118.54418945]
[101.57740021 110.10745239]
[93.40029144 108.45483398]
[88.82425690 101.01308441]
[76.80709839 92.03599548]
[64.78994751 83.05891418]
[58.94038773 82.40735626]
[54.53719711 79.66509247]
[52.16801453 75.83692932]
[51.88310242 72.01071167]
[41.15982056 61.52208328]
[30.43654251 51.03345871]
[19.71326256 40.54483414]
[8.98998165 30.05620766]
[-7.02196312 26.51365852]
[-11.70130444 10.79628468]
[-0.23433642 -0.92722505]
[15.58270645 3.40326977]
[19.47860718 19.33292770]
[30.20188713 29.82155228]
[40.92516708 40.31017685]
[51.64844894 50.79880524]
[62.37172699 61.28742981]
[73.76703644 71.04176331]
[85.78418732 80.01884460]
[97.80133820 88.99593353]
[110.01414490 97.70497131]
[122.41661835 106.14171600]
[134.81909180 114.57845306]
[150.58135986 115.94290161]
[156.75282288 129.49879456]
[169.15530396 137.93553162]
[181.55778503 146.37226868]
[192.09991455 135.64366150]
[204.38842773 126.97000885]
[218.02828979 120.63014221]
[232.58103943 116.82785034]
[247.57885742 115.68536377]
[262.53964233 117.23941803]
[276.98242188 121.44004822]
[290.44299316 128.15222168]
[302.48858643 137.16018677]
[312.73202515 148.17434692]
[320.84399414 160.84065247]
[326.56378174 174.75193787]
[329.70745850 189.46101379]
[330.17401123 204.49505615]
[327.94842529 219.37075806]
[323.10223389 233.60993958]
[315.79125977 246.75486755]
[306.25045776 258.38299561]
[294.78659058 268.12051392]
[281.76812744 275.65438843]
[267.61358643 280.74249268]
[252.77795410 283.22119141]
[237.73815918 283.01086426]
[222.97766113 280.11825562]
[208.97093201 274.63632202]
[196.16824341 266.74133301]
[184.98115540 256.68704224]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 43]
[7 42]
[8 41]
[10 39]
[11 38]
[12 37]
[14 36]
[15 35]
[16 34]
[20 33]
[21 32]
[22 31]
[23 30]
[24 29]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
