%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 09:21:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGUGGCAGUUGUGGACCAUAUGACACAGCUUGUCCCCAUCGUUCACCUUUAGAAUUAAAUAUAAAUUAACUCCUCACAUUG\
) } def
/len { sequence length } bind def

/coor [
[183.91551208 75.12253571]
[169.95239258 80.60265350]
[155.98928833 86.08277130]
[142.02618408 91.56288147]
[128.06307983 97.04299927]
[114.09997559 102.52311707]
[105.23312378 113.33378601]
[91.38014221 111.43999481]
[77.41703796 116.92010498]
[71.03372955 131.12895203]
[56.79508591 136.48765564]
[43.28846741 130.31459045]
[29.32535934 135.79469299]
[21.61779213 149.86499023]
[5.78757858 152.46957397]
[-6.02169609 141.61044312]
[-4.75096607 125.61779785]
[8.62497234 116.75981903]
[23.84524536 121.83158875]
[37.80834961 116.35147858]
[43.51065063 102.63945770]
[57.59315872 96.88293457]
[71.93692017 102.95700073]
[85.90002441 97.47688293]
[94.76687622 86.66621399]
[108.61985779 88.56000519]
[122.58296204 83.07989502]
[136.54606628 77.59977722]
[150.50918579 72.11965942]
[164.47229004 66.63954926]
[178.43539429 61.15943146]
[174.73915100 42.45552826]
[174.81118774 23.39488983]
[178.64672852 4.72896385]
[186.09268188 -12.80673885]
[196.85374451 -28.52163315]
[210.50407410 -41.79725266]
[226.50418091 -52.11158371]
[244.22221375 -59.05960083]
[262.95895386 -62.36917114]
[281.97540283 -61.91170502]
[300.52188110 -57.70714951]
[317.86761475 -49.92314529]
[326.31741333 -62.31672668]
[334.76724243 -74.71031189]
[343.21704102 -87.10388947]
[338.80786133 -102.10699463]
[345.12136841 -116.41341400]
[359.17651367 -123.26808167]
[374.33691406 -119.43444824]
[383.44424438 -106.72263336]
[382.19833374 -91.13475800]
[371.18746948 -80.03095245]
[355.61059570 -78.65409088]
[347.16079712 -66.26050568]
[338.71099854 -53.86692429]
[330.26119995 -41.47334290]
[339.30416870 -33.21711349]
[347.22030640 -23.87323189]
[353.87988281 -13.59430885]
[359.17367554 -2.54828072]
[363.01480103 9.08432865]
[365.34011841 21.11336136]
[366.11123657 33.34213638]
[365.31518555 45.57065201]
[362.96469116 57.59888458]
[359.09783936 69.23002625]
[353.77752686 80.27372742]
[347.09051514 90.54920959]
[339.14587402 99.88821411]
[330.07327271 108.13777924]
[320.02087402 115.16271210]
[309.15292358 120.84783173]
[297.64700317 125.09985352]
[285.69119263 127.84890747]
[273.48095703 129.04969788]
[261.21597290 128.68223572]
[249.09687805 126.75219727]
[237.32192993 123.29080963]
[226.08384705 118.35436249]
[215.56654358 112.02328491]
[205.94223022 104.40083313]
[197.36854553 95.61141205]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 31]
[2 30]
[3 29]
[4 28]
[5 27]
[6 26]
[8 24]
[9 23]
[12 20]
[13 19]
[43 57]
[44 56]
[45 55]
[46 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
