%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 10:21:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAUCGCCCGCCCGCCCGCCCGCCCGCCAGGCGCUGCCCUGCAGGUGCUCUCGUCCUCCCGUGCCAGCCCCCGCCCGCCCGUGUCCCAGAAUGCACUGCUGAGGAGCAUGCCCACCCCCACCCCCGCAGUGUGCAGAUUAAAGCAAGUCAGAUCAUC\
) } def
/len { sequence length } bind def

/coor [
[159.58642578 232.51777649]
[152.73699951 219.17291260]
[145.88755798 205.82806396]
[139.03811646 192.48320007]
[132.18867493 179.13835144]
[119.49349213 171.34852600]
[120.07546997 155.53802490]
[113.22602844 142.19316101]
[100.10886383 144.21740723]
[86.98188782 142.25778198]
[75.02780914 136.49082947]
[64.57954407 147.25344849]
[64.64167786 162.83015442]
[53.89233398 173.59613037]
[39.04193497 173.55937195]
[28.59367180 184.32197571]
[29.07843971 200.11883545]
[18.19045067 211.57427979]
[2.38935685 211.89199829]
[-8.95033550 200.88351440]
[-9.10098648 185.07994080]
[2.02678227 173.85726929]
[17.83106232 173.87370300]
[28.27932739 163.11109924]
[27.80251694 148.26831055]
[38.24522400 137.20466614]
[53.81693649 136.80517578]
[64.26520538 126.04256439]
[55.84189987 102.29201508]
[61.76103210 77.79701996]
[80.10008240 60.51349258]
[75.71923065 46.16747665]
[71.33837891 31.82146263]
[66.95752716 17.47544670]
[61.42991638 10.13502979]
[62.63486099 2.80256224]
[58.53829956 -11.62720585]
[54.44174194 -26.05697250]
[50.20282745 -40.44556808]
[45.82197571 -54.79158020]
[41.44112396 -69.13759613]
[36.77769089 -83.39425659]
[31.83349800 -97.55599976]
[26.88930511 -111.71774292]
[21.94511032 -125.87948608]
[16.13182068 -132.99578857]
[17.04614449 -140.37014771]
[12.38271141 -154.62680054]
[7.71927786 -168.88346863]
[-6.09662437 -176.07780457]
[-10.62291718 -190.60252380]
[-3.67906594 -203.72953796]
[-8.34249878 -217.98620605]
[-23.42143250 -220.08074951]
[-36.04420090 -228.48031616]
[-43.73682785 -241.47430420]
[-45.01961899 -256.45812988]
[-39.69150162 -270.45529175]
[-28.85933685 -280.70858765]
[-40.50362015 -291.41937256]
[-37.10660172 -305.92141724]
[-41.77003479 -320.17810059]
[-53.41431808 -330.88888550]
[-50.01729965 -345.39096069]
[-54.68072891 -359.64761353]
[-68.49663544 -366.84194946]
[-73.02292633 -381.36666870]
[-66.07907104 -394.49368286]
[-70.74250793 -408.75033569]
[-83.30571747 -419.29061890]
[-80.19308472 -435.39166260]
[-64.60661316 -440.49008179]
[-52.58032990 -429.34106445]
[-56.48584747 -413.41378784]
[-51.82241440 -399.15710449]
[-38.46311951 -392.67135620]
[-33.53064346 -378.27951050]
[-40.42406845 -364.31103516]
[-35.76063538 -350.05438232]
[-24.44991302 -340.36331177]
[-27.51337242 -324.84152222]
[-22.84993935 -310.58486938]
[-11.53921604 -300.89379883]
[-14.60267544 -285.37200928]
[0.19495781 -283.50238037]
[12.76509762 -275.35983276]
[20.58540154 -262.51446533]
[22.05900764 -247.48619080]
[16.84032631 -233.25059509]
[5.91416264 -222.64962769]
[10.57759571 -208.39297485]
[23.93688774 -201.90722656]
[28.86936378 -187.51538086]
[21.97593880 -173.54689026]
[26.63937187 -159.29023743]
[31.30280495 -145.03356934]
[36.10685349 -130.82368469]
[41.05104828 -116.66193390]
[45.99523926 -102.50019073]
[50.93943405 -88.33844757]
[54.82224655 -85.47520447]
[56.91683960 -80.12010193]
[55.78713989 -73.51844788]
[60.16799164 -59.17243195]
[64.54884338 -44.82641983]
[69.53664398 -39.31834793]
[68.87150574 -30.15353394]
[72.96807098 -15.72376537]
[77.06462860 -1.29399776]
[81.30354309 13.09459591]
[85.68439484 27.44061089]
[90.06524658 41.78662491]
[94.44609833 56.13264084]
[102.71379852 55.86581421]
[110.88652039 57.14355469]
[118.67825317 59.92115021]
[125.81629181 64.10138702]
[132.05084229 69.53797913]
[137.16369629 76.04064941]
[140.97593689 83.38182831]
[143.35414124 91.30459595]
[144.21505737 99.53167725]
[143.52859497 107.77514648]
[141.31874084 115.74651337]
[137.66285706 123.16679382]
[132.68888855 129.77630615]
[126.57088470 135.34371948]
[133.42033386 148.68858337]
[146.60543823 157.43292236]
[145.53353882 172.28890991]
[152.38296509 185.63377380]
[159.23240662 198.97862244]
[166.08184814 212.32348633]
[172.93128967 225.66833496]
[195.45623779 230.52865601]
[207.06735229 250.12716675]
[200.65928650 271.71234131]
[209.28315735 283.98544312]
[217.90701294 296.25851440]
[226.53088379 308.53161621]
[242.14073181 311.00314331]
[251.36320496 323.83752441]
[248.72679138 339.42037964]
[235.79562378 348.50665283]
[220.24151611 345.70562744]
[211.29248047 332.67910767]
[214.25778198 317.15548706]
[205.63391113 304.88238525]
[197.01005554 292.60928345]
[188.38618469 280.33621216]
[180.89332581 281.98410034]
[173.20739746 281.53622437]
[165.90553284 279.01147461]
[159.54003906 274.58532715]
[154.59660339 268.57760620]
[151.45718384 261.42944336]
[150.37065125 253.67094421]
[151.43296814 245.88177490]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 134]
[2 133]
[3 132]
[4 131]
[5 130]
[7 128]
[8 127]
[11 28]
[12 27]
[15 24]
[16 23]
[31 113]
[32 112]
[33 111]
[34 110]
[36 109]
[37 108]
[38 107]
[39 105]
[40 104]
[41 103]
[42 100]
[43 99]
[44 98]
[45 97]
[47 96]
[48 95]
[49 94]
[52 91]
[53 90]
[59 84]
[61 82]
[62 81]
[64 79]
[65 78]
[68 75]
[69 74]
[137 150]
[138 149]
[139 148]
[140 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
