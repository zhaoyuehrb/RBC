%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 10:12:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGUUCAUAAAAGCCAGGUGUGGUUGUGGCGGGUGCCUGUAGUCCCAGCUACUCAGGAGGCUGAGGUAGGAUGAUGGCUUGAGCCCAGGAGUUCGAGACCAGCCUGGGCAACACAGCGAGAUCUCUUGGGGGUAAAACAAAAAGAAAAAAAAAAGUUCAUACUUCUCCAAUAAAUAAAGUCUCACCUGUG\
) } def
/len { sequence length } bind def

/coor [
[308.18386841 221.68693542]
[301.86389160 226.74916077]
[294.70983887 230.55816650]
[286.96743774 232.98001099]
[278.90319824 233.92842102]
[270.79528809 233.36791992]
[262.92385864 231.31509399]
[255.56140137 227.83816528]
[248.96328735 223.05470276]
[243.35902405 217.12762451]
[238.94407654 210.25971985]
[235.87326050 202.68663025]
[234.25514221 194.66880798]
[234.14830017 186.48258972]
[235.55918884 178.41058350]
[221.99935913 171.99726868]
[208.43951416 165.58393860]
[194.87968445 159.17060852]
[181.31983948 152.75727844]
[167.75999451 146.34396362]
[160.35722351 146.32614136]
[154.03207397 139.71316528]
[140.57897949 133.07882690]
[127.12589264 126.44450378]
[113.67280579 119.81017303]
[100.21971130 113.17584229]
[85.29193878 111.70558167]
[70.80305481 115.58786774]
[56.31416702 119.47015381]
[41.82527924 123.35243988]
[27.33639145 127.23472595]
[12.87975121 131.23541260]
[-1.54367602 135.35424805]
[-15.96710300 139.47308350]
[-23.37391472 144.84692383]
[-30.66028786 143.53923035]
[-45.14917374 147.42150879]
[-54.38365173 160.54035950]
[-70.40595245 161.35614014]
[-80.92513275 149.24308777]
[-77.87178802 133.49327087]
[-63.58817291 126.18861389]
[-49.03145981 132.93263245]
[-34.54257202 129.05033875]
[-20.08593178 125.04965210]
[-5.66250515 120.93081665]
[8.76092148 116.81198883]
[14.33836174 111.94439697]
[23.45410538 112.74584198]
[37.94299316 108.86355591]
[52.43188095 104.98126984]
[66.92076874 101.09898376]
[81.40965271 97.21669769]
[85.41034698 82.76005554]
[74.97870636 71.98133087]
[59.40763092 71.55780792]
[48.98201370 60.47804642]
[49.48173523 45.63601685]
[41.25087738 41.63700485]
[38.96939087 34.59455490]
[28.71550751 23.64659500]
[18.46162224 12.69863319]
[8.20773792 1.75067222]
[-6.87313128 -3.03241873]
[-9.92621899 -17.61075592]
[-20.18010330 -28.55871773]
[-30.43398857 -39.50667953]
[-40.68787384 -50.45463943]
[-55.84300232 -47.56922913]
[-70.14372253 -53.35653687]
[-79.02672577 -65.96985626]
[-79.65747833 -81.38432312]
[-71.83470917 -94.68122864]
[-58.05463409 -101.61759186]
[-42.71442795 -99.98003387]
[-30.70909119 -90.29109955]
[-25.86948586 -75.64249420]
[-29.73991203 -60.70852280]
[-19.48602676 -49.76056290]
[-9.23214245 -38.81260300]
[1.02174222 -27.86464119]
[15.36918449 -23.86462212]
[19.15569878 -8.50321198]
[29.40958405 2.44474888]
[39.66346741 13.39270973]
[49.91735077 24.34067154]
[60.26045990 35.20437622]
[75.11089325 35.19054031]
[85.84360504 45.97309494]
[85.75743103 61.54969025]
[96.18907166 72.32841492]
[102.52072144 75.20547485]
[107.29682159 79.33876038]
[110.32151794 84.16553497]
[111.57344818 89.11061859]
[111.19853973 93.63594818]
[109.48950958 97.28559113]
[106.85404205 99.72274780]
[120.30713654 106.35707855]
[133.76022339 112.99140930]
[147.21331787 119.62574005]
[160.66641235 126.26007080]
[174.17332458 132.78411865]
[187.73316956 139.19744873]
[201.29299927 145.61076355]
[214.85284424 152.02409363]
[228.41268921 158.43742371]
[241.97251892 164.85075378]
[259.54202271 150.32040405]
[281.95687866 146.53027344]
[303.20230103 154.43003845]
[317.61090088 171.84147644]
[321.37454224 194.05859375]
[335.86343384 197.94087219]
[350.35232544 201.82316589]
[364.84121704 205.70544434]
[379.33010864 209.58773804]
[396.99234009 204.40577698]
[408.91656494 217.27201843]
[423.46701050 220.91671753]
[438.01748657 224.56141663]
[452.56796265 228.20613098]
[467.11843872 231.85083008]
[482.13076782 217.58451843]
[502.57205200 215.27743530]
[520.14770508 225.69720459]
[527.82757568 244.48129272]
[542.62725830 246.92472839]
[557.42687988 249.36816406]
[572.22650146 251.81158447]
[587.02618408 254.25502014]
[601.82580566 256.69845581]
[616.62548828 259.14187622]
[621.83782959 245.02706909]
[629.62744141 232.15390015]
[639.71270752 220.98774719]
[651.72912598 211.93225098]
[665.24230957 205.31475830]
[679.76367188 201.37449646]
[694.76837158 200.25389099]
[709.71398926 201.99346924]
[724.06018066 206.53034973]
[737.28839111 213.70050049]
[748.92041016 223.24473572]
[758.53576660 234.81805420]
[765.78686523 248.00205994]
[770.41156006 262.32019043]
[772.24267578 277.25482178]
[771.21405029 292.26608276]
[767.36285400 306.81137085]
[760.82830811 320.36480713]
[751.84667969 332.43652344]
[740.74249268 342.59005737]
[727.91735840 350.45843506]
[713.83471680 355.75717163]
[699.00378418 358.29473877]
[683.96057129 357.97940063]
[669.24902344 354.82257080]
[655.40081787 348.93832397]
[642.91662598 340.53942871]
[632.24774170 329.92947388]
[623.77978516 317.49200439]
[617.81896973 303.67660522]
[614.58068848 288.98272705]
[614.18206787 273.94152832]
[599.38238525 271.49810791]
[584.58276367 269.05465698]
[569.78308105 266.61123657]
[554.98345947 264.16781616]
[540.18377686 261.72436523]
[525.38415527 259.28094482]
[520.35510254 267.57797241]
[513.03814697 273.99423218]
[504.10122681 277.92034912]
[494.36740112 278.97534180]
[484.73892212 277.04345703]
[476.11367798 272.28674316]
[469.30148315 265.13143921]
[464.94805908 256.22991943]
[463.47372437 246.40129089]
[448.92324829 242.75659180]
[434.37280273 239.11189270]
[419.82232666 235.46719360]
[405.27185059 231.82247925]
[394.72839355 237.77281189]
[382.56857300 234.84367371]
[375.44781494 224.07661438]
[360.95892334 220.19433594]
[346.47003174 216.31204224]
[331.98114014 212.42976379]
[317.49227905 208.54747009]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 108]
[16 107]
[17 106]
[18 105]
[19 104]
[20 103]
[22 102]
[23 101]
[24 100]
[25 99]
[26 98]
[27 53]
[28 52]
[29 51]
[30 50]
[31 49]
[32 47]
[33 46]
[34 45]
[36 44]
[37 43]
[54 91]
[55 90]
[58 87]
[60 86]
[61 85]
[62 84]
[63 83]
[65 81]
[66 80]
[67 79]
[68 78]
[113 191]
[114 190]
[115 189]
[116 188]
[117 187]
[119 184]
[120 183]
[121 182]
[122 181]
[123 180]
[127 171]
[128 170]
[129 169]
[130 168]
[131 167]
[132 166]
[133 165]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
