%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:56:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAAGGCACGUUGAAAUGAUGCAGGCUGCUCCUAUGUUGGAAAUUUGUUCAUUAAAAUUCUCCCAAUAAAGCUUUACAGCCUUCUGCAAAGAAGUCUUGCGCA\
) } def
/len { sequence length } bind def

/coor [
[115.42460632 161.03141785]
[101.06128693 165.35519409]
[88.13255310 157.74942017]
[84.93420410 143.09437561]
[93.51847839 130.79354858]
[99.32655334 116.96363831]
[91.88020325 116.06818390]
[80.15272522 125.42053223]
[68.42525482 134.77287292]
[56.83900070 144.29962158]
[45.39655685 153.99861145]
[33.95411301 163.69760132]
[28.93457222 179.30966187]
[12.84947681 182.50367737]
[2.24579453 169.99391174]
[8.03168583 154.64935303]
[24.25512123 152.25515747]
[35.69756317 142.55616760]
[47.14000702 132.85717773]
[50.25818253 126.01948547]
[59.07291031 123.04540253]
[70.80038452 113.69306183]
[82.52785492 104.34071350]
[89.43749237 91.02692413]
[90.33455658 76.05377197]
[91.23161316 61.08061981]
[92.12867737 46.10746765]
[93.02574158 31.13431740]
[93.92280579 16.16116524]
[79.64250946 5.21359015]
[74.71281433 -11.93040180]
[80.88860321 -28.50050545]
[95.57653809 -38.06667328]
[95.57653809 -53.06667328]
[87.83924103 -66.86684418]
[95.57653809 -79.59411621]
[95.57653809 -94.59411621]
[95.57653809 -109.59411621]
[95.57653809 -124.59411621]
[95.57653809 -139.59411621]
[95.57653809 -154.59411621]
[84.64116669 -171.39767456]
[94.63148499 -187.83886719]
[93.73442841 -202.81201172]
[92.83736420 -217.78517151]
[91.94029999 -232.75831604]
[91.04323578 -247.73146057]
[77.89466858 -255.97129822]
[72.13174438 -270.37854004]
[75.97043610 -285.41329956]
[87.93467712 -295.29440308]
[103.42397308 -296.22241211]
[116.48238373 -287.84042358]
[122.08867645 -273.37152100]
[118.08712006 -258.37927246]
[106.01638794 -248.62852478]
[106.91345215 -233.65538025]
[107.81051636 -218.68222046]
[108.70758057 -203.70907593]
[109.60463715 -188.73591614]
[117.97243500 -182.52888489]
[121.53223419 -172.50178528]
[118.84207916 -161.97828674]
[110.57653809 -154.59411621]
[110.57653809 -139.59411621]
[110.57653809 -124.59411621]
[110.57653809 -109.59411621]
[110.57653809 -94.59411621]
[110.57653809 -79.59411621]
[118.31384277 -66.86684418]
[110.57653809 -53.06667328]
[110.57653809 -38.06667328]
[121.49888611 -32.35950470]
[128.95001221 -22.45245171]
[131.43214417 -10.23285675]
[128.40162659 1.93745148]
[120.38656616 11.67864323]
[108.89595032 17.05822754]
[107.99889374 32.03137970]
[107.10182953 47.00453186]
[106.20476532 61.97768402]
[105.30770111 76.95083618]
[104.41064453 91.92398834]
[114.59516907 89.73327637]
[126.16889191 95.90748596]
[133.53167725 110.47414398]
[142.70753479 122.34020996]
[151.88340759 134.20628357]
[161.05926514 146.07234192]
[170.23513794 157.93841553]
[185.86643982 158.38124084]
[197.52166748 168.80668640]
[199.69757080 184.29214478]
[191.36674500 197.52586365]
[176.46276855 202.25929260]
[162.02282715 196.25744629]
[154.86503601 182.35421753]
[158.36906433 167.11427307]
[149.19320679 155.24821472]
[140.01733398 143.38214111]
[130.84147644 131.51608276]
[121.66561127 119.65000916]
[114.21925354 118.75455475]
[116.58293915 133.56715393]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 23]
[8 22]
[9 21]
[10 19]
[11 18]
[12 17]
[24 83]
[25 82]
[26 81]
[27 80]
[28 79]
[29 78]
[33 72]
[34 71]
[36 69]
[37 68]
[38 67]
[39 66]
[40 65]
[41 64]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
[86 102]
[87 101]
[88 100]
[89 99]
[90 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
