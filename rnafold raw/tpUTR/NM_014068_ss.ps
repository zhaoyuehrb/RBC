%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 15:02:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUCCCAGAGAGACCCCUAGAACGUUUCCCUCAAGGACCUUUCUGCCUGGAAGUCUGUUAGCCUUUCAGAAGUAACAUGUCCAAAAUAAAAUUUGAUUCCUCCCAGGUUGUUCCCUGCCUGGUCCGCUACCCCACAGUAAGGAACACCUUAUUAUGCAA\
) } def
/len { sequence length } bind def

/coor [
[94.78413391 158.64517212]
[94.19889069 143.65658569]
[87.90132141 142.34587097]
[81.86186218 140.13175964]
[76.20935059 137.06150818]
[71.06437683 133.20060730]
[66.53669739 128.63142395]
[53.64498138 136.29977417]
[40.75326157 143.96810913]
[27.86154175 151.63645935]
[14.96982193 159.30480957]
[2.07810235 166.97315979]
[-10.81361771 174.64151001]
[-12.61516190 188.02000427]
[-21.67292023 197.76487732]
[-34.50277328 200.45791626]
[-46.35654068 195.33212280]
[-59.39543152 202.74748230]
[-72.43431854 210.16282654]
[-80.60526276 223.71075439]
[-95.49354553 223.27684021]
[-108.53243256 230.69218445]
[-109.26401520 246.10220337]
[-118.22934723 258.65713501]
[-132.56762695 264.35076904]
[-147.70355225 261.36627197]
[-158.80731201 250.65599060]
[-162.33573914 235.63754272]
[-157.16291809 221.10325623]
[-144.93948364 211.69096375]
[-129.56588745 210.40409851]
[-115.94778442 217.65330505]
[-102.90888977 210.23796082]
[-95.67057800 197.22042847]
[-79.84967041 197.12393188]
[-66.81077576 189.70858765]
[-53.77189255 182.29324341]
[-50.03028488 165.92030334]
[-35.32798386 157.12530518]
[-18.48196602 161.74978638]
[-5.59024572 154.08143616]
[7.30147362 146.41308594]
[20.19319344 138.74475098]
[33.08491135 131.07640076]
[45.97663116 123.40805054]
[58.86835098 115.73970032]
[58.27331161 68.89376831]
[104.55206299 40.12249374]
[93.39184570 30.10004425]
[82.23162842 20.07759476]
[71.07140350 10.05514526]
[59.91118622 0.03269593]
[48.75096512 -9.98975372]
[37.59074783 -20.01220322]
[22.15343475 -23.47630692]
[17.85393906 -37.73686981]
[6.69371939 -47.75931931]
[-9.13076973 -53.84387970]
[-7.66464901 -70.73431396]
[8.97156525 -74.00122833]
[16.71616936 -58.91953659]
[27.87638855 -48.89708710]
[42.51544571 -46.14985657]
[47.61319733 -31.17242241]
[58.77341461 -21.14997292]
[69.93363190 -11.12752342]
[81.09385681 -1.10507417]
[92.25407410 8.91737556]
[103.41429138 18.93982506]
[114.57451630 28.96227455]
[121.85251617 27.15101624]
[116.86352539 13.00499535]
[111.87452698 -1.14102650]
[106.88552856 -15.28704739]
[99.00116730 -28.04780197]
[104.65876770 -41.93994522]
[119.21495056 -45.56175232]
[130.72300720 -35.94069672]
[129.73872375 -20.97446251]
[131.96199036 -6.14014244]
[134.18525696 8.69417858]
[136.40852356 23.52849960]
[143.68652344 21.71724129]
[148.84738159 7.63300753]
[154.00822449 -6.45122528]
[159.16908264 -20.53545952]
[152.29443359 -34.76622391]
[157.57479858 -49.66230392]
[171.87745667 -56.38611603]
[186.71687317 -50.94854355]
[193.28909302 -36.57560349]
[187.69493103 -21.79450226]
[173.25331116 -15.37460804]
[168.09246826 -1.29037499]
[162.93161011 12.79385853]
[157.77076721 26.87809181]
[162.88990784 32.35935974]
[173.85244751 22.12106323]
[181.11465454 8.99626541]
[195.84123230 11.84727383]
[197.68049622 26.73408318]
[184.09074402 33.08360291]
[173.12820435 43.32189941]
[178.24736023 48.80316925]
[192.65093994 44.61549377]
[207.05453491 40.42781448]
[221.45812988 36.24013901]
[235.86170959 32.05245972]
[250.26530457 27.86478424]
[255.39175415 13.21899891]
[268.16687012 4.41126585]
[283.67834473 4.82833767]
[295.96170044 14.30984116]
[300.29373169 29.20994568]
[295.00869751 43.79925537]
[282.13879395 52.46788788]
[266.63275146 51.88256836]
[254.45297241 42.26837158]
[240.04939270 46.45605087]
[225.64579773 50.64372635]
[211.24221802 54.83140564]
[196.83862305 59.01908112]
[182.43502808 63.20676041]
[179.92343140 70.27371216]
[194.57145691 73.50412750]
[209.21946716 76.73455048]
[223.86749268 79.96496582]
[238.81398010 78.69916534]
[250.14810181 88.52453613]
[251.01579285 103.49941254]
[240.89236450 114.56811523]
[225.89970398 115.03710175]
[215.10417175 104.62258148]
[201.70286560 97.88426208]
[188.30155945 91.14595032]
[174.90023804 84.40763092]
[172.38864136 91.47458649]
[180.91888428 103.81294250]
[189.44911194 116.15130615]
[197.97933960 128.48966980]
[206.50958252 140.82801819]
[215.03981018 153.16638184]
[223.57005310 165.50474548]
[238.61465454 172.03097534]
[240.21601868 188.35174561]
[226.72677612 197.67765808]
[212.02351379 190.41499329]
[211.23168945 174.03497314]
[202.70146179 161.69662476]
[194.17121887 149.35826111]
[185.64099121 137.01989746]
[177.11074829 124.68154144]
[168.58052063 112.34317780]
[160.05029297 100.00482178]
[149.18075562 123.97572327]
[130.41711426 138.89582825]
[109.18746948 143.07135010]
[109.77271271 158.05992126]
[116.43242645 173.65109253]
[103.29416656 184.36660767]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[7 46]
[8 45]
[9 44]
[10 43]
[11 42]
[12 41]
[13 40]
[17 37]
[18 36]
[19 35]
[21 33]
[22 32]
[48 70]
[49 69]
[50 68]
[51 67]
[52 66]
[53 65]
[54 64]
[56 62]
[57 61]
[83 96]
[84 95]
[85 94]
[86 93]
[104 123]
[105 122]
[106 121]
[107 120]
[108 119]
[109 118]
[137 154]
[138 153]
[139 152]
[140 151]
[141 150]
[142 149]
[143 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
