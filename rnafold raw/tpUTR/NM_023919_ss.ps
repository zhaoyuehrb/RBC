%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 19:24:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGAAACUAUGCUUUUCUAGGACAAACAAAGAUAAGAUGUUUCUAAAUUAACUUCAGUUCUUGCAUUAAUGUUUUAUGUGA\
) } def
/len { sequence length } bind def

/coor [
[214.63478088 171.51911926]
[197.28874207 154.56326294]
[191.91429138 130.81396484]
[177.36598206 127.16065979]
[162.81767273 123.50735474]
[148.26936340 119.85404205]
[133.72105408 116.20073700]
[119.17274475 112.54743195]
[110.60604095 120.31118011]
[99.33921814 122.90405273]
[88.24062347 119.66593933]
[80.13575745 111.42121124]
[77.08799744 100.26884460]
[62.85764694 95.52572632]
[48.62729645 90.78261566]
[33.08861923 93.75919342]
[23.46097755 82.39443207]
[9.23062706 77.65131378]
[-4.99972296 72.90820312]
[-19.00654793 79.72337341]
[-33.37057877 74.71046448]
[-39.78148651 61.31510162]
[-54.71599197 67.17514038]
[-68.53645325 59.02809906]
[-70.64099884 43.12368393]
[-59.41520309 31.66240120]
[-43.47052765 33.43637085]
[-35.03837204 47.08475113]
[-21.87271690 40.21444321]
[-7.37355089 44.82191849]
[-0.25660786 58.67785263]
[13.97374249 63.42096710]
[28.20409203 68.16408539]
[42.72492218 64.84824371]
[53.37041473 76.55226135]
[67.60076141 81.29537964]
[81.83111572 86.03849030]
[97.34914398 77.24027252]
[114.47383881 82.23654938]
[122.82604980 97.99912262]
[137.37435913 101.65242767]
[151.92266846 105.30573273]
[166.47097778 108.95904541]
[181.01928711 112.61235046]
[195.56761169 116.26565552]
[199.70581055 109.07437897]
[205.14158630 102.81596375]
[211.67094421 97.72093201]
[219.04966736 93.97621918]
[227.00247192 91.71832275]
[235.23324585 91.02834320]
[243.43614197 91.92904663]
[251.30685425 94.38413239]
[258.55398560 98.29972839]
[264.90979004 103.52789307]
[270.14004517 109.87230682]
[274.05279541 117.09554291]
[276.50521851 124.92802429]
[277.40899658 133.07804871]
[276.73342896 141.24267578]
[274.50640869 149.11897278]
[270.81344604 156.41522217]
[281.90982056 166.50830078]
[293.00619507 176.60139465]
[304.10256958 186.69448853]
[315.19894409 196.78756714]
[326.29531860 206.88066101]
[341.17123413 202.79280090]
[355.88888550 207.41819763]
[365.75192261 219.28091431]
[367.61309814 234.59559631]
[360.87847900 248.47538757]
[347.69711304 256.49130249]
[332.27508545 256.08547974]
[319.53350830 247.38742065]
[313.53820801 233.17263794]
[316.20223999 217.97703552]
[305.10586548 207.88394165]
[294.00949097 197.79086304]
[282.91311646 187.69776917]
[271.81674194 177.60469055]
[260.72033691 167.51159668]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 45]
[4 44]
[5 43]
[6 42]
[7 41]
[8 40]
[13 37]
[14 36]
[15 35]
[17 33]
[18 32]
[19 31]
[22 28]
[62 82]
[63 81]
[64 80]
[65 79]
[66 78]
[67 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
