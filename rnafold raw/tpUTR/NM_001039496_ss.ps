%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 11:57:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACGCCACCUUGGGCUCGAGCAGCGACCCGAACCAGCCCCGUGCCAGCCCGGUCCCCAGACCCAAGCCUGACCCCAUCCGAGUGGAAUUUGAGUCCUAAAGAAAUAAAAGAGUCGAUGCA\
) } def
/len { sequence length } bind def

/coor [
[100.92607117 190.42816162]
[85.16891479 189.20845032]
[74.95299530 177.14982605]
[76.33922577 161.40644836]
[88.50518036 151.31858826]
[89.66281128 136.36332703]
[78.45807648 132.95521545]
[68.42264557 126.05448151]
[60.65177155 116.07665253]
[56.08945084 103.78084564]
[55.42121506 90.21405792]
[58.98739624 76.62237549]
[66.72701263 64.33654785]
[51.77175140 63.17891693]
[36.81649017 62.02128601]
[21.86122513 60.86365128]
[6.90596294 59.70602036]
[-2.01217270 62.18439102]
[-8.41783905 58.32117081]
[-17.39683151 60.56909561]
[-23.70090294 56.54222488]
[-38.57674408 54.61624908]
[-53.45258331 52.69027328]
[-62.48647690 54.70626450]
[-68.68477631 50.51840973]
[-83.50609589 48.21005249]
[-94.46360779 59.03775024]
[-109.51976013 61.31057739]
[-122.86933136 54.36414337]
[-129.48951721 41.04832458]
[-142.10205078 50.57196045]
[-157.74291992 48.30506516]
[-167.13267517 35.59255219]
[-164.70054626 19.97652435]
[-151.88946533 10.72169781]
[-136.30001831 13.31879520]
[-127.18115997 26.22700500]
[-116.82499695 15.55517960]
[-101.99520874 12.99756718]
[-88.34339142 19.74153900]
[-81.19773865 33.38873291]
[-66.37641907 35.69709015]
[-51.52660751 37.81443405]
[-36.65076828 39.74040985]
[-21.77492905 41.66638565]
[-6.87552404 43.40067291]
[8.06359482 44.75075912]
[23.01885796 45.90839005]
[37.97412109 47.06602097]
[52.92938232 48.22365570]
[67.88464355 49.38128662]
[77.93116760 38.24273300]
[75.24195862 23.48576355]
[72.55274963 8.72879410]
[69.86353302 -6.02817488]
[58.84393311 -18.17314911]
[64.10895538 -33.70413589]
[80.24240875 -36.64418793]
[90.64756775 -23.96883011]
[84.62050629 -8.71738625]
[87.30971527 6.03958321]
[89.99892426 20.79655266]
[92.68814087 35.55352020]
[99.56051636 38.55692673]
[104.27537537 24.31719017]
[108.99024200 10.07745457]
[106.94360352 -4.78226471]
[116.73272705 -16.14769936]
[131.73165894 -16.32595253]
[141.78811646 -5.19636917]
[140.09521484 9.70779228]
[127.80057526 18.29805183]
[120.55292511 31.43089294]
[113.30526733 44.56373596]
[120.17764282 47.56713867]
[132.83427429 39.51669693]
[145.49090576 31.46625328]
[158.14755249 23.41580963]
[165.24633789 8.63273716]
[181.61654663 7.65890121]
[190.41790771 21.49610138]
[182.59632874 35.90981293]
[166.19798279 36.07244492]
[153.54135132 44.12288666]
[140.88471985 52.17332840]
[128.22808838 60.22377396]
[137.71345520 73.60593414]
[141.74804688 88.55130005]
[140.43177795 103.05126953]
[134.54461670 115.35637665]
[146.77005005 124.04769135]
[158.99546814 132.73901367]
[171.22090149 141.43032837]
[186.95158386 143.12031555]
[192.84150696 156.80088806]
[205.06694031 165.49220276]
[217.92674255 157.38703918]
[232.91021729 154.82499695]
[247.73248291 158.19677734]
[260.13323975 166.98822021]
[268.22149658 179.85867310]
[270.76382446 194.84550476]
[267.37252808 209.66331482]
[258.56478882 222.05252075]
[245.68371582 230.12382507]
[230.69355774 232.64643860]
[215.88020325 229.23565674]
[203.50260925 220.41162109]
[195.44825745 207.51992798]
[192.94537354 192.52647400]
[196.37562561 177.71762085]
[184.15019226 169.02630615]
[169.29396057 167.95797729]
[162.52957153 153.65574646]
[150.30415344 144.96443176]
[138.07873535 136.27311707]
[125.85330200 127.58180237]
[116.02569580 134.23924255]
[104.61807251 137.52096558]
[103.46044159 152.47622681]
[113.92905426 164.31614685]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 120]
[6 119]
[13 51]
[14 50]
[15 49]
[16 48]
[17 47]
[19 46]
[21 45]
[22 44]
[23 43]
[25 42]
[26 41]
[30 37]
[52 63]
[53 62]
[54 61]
[55 60]
[75 86]
[76 85]
[77 84]
[78 83]
[90 117]
[91 116]
[92 115]
[93 114]
[95 112]
[96 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
