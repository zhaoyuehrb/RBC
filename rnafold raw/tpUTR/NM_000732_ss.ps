%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 12:43:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUGAGACUGGUGGCUUCUAGAAGCAGCCAUUACCAACUGUACCUUCCCUUCUUGCUCAGCCAAUAAAUAUAUCCUCUUUCACUCAG\
) } def
/len { sequence length } bind def

/coor [
[117.67913818 204.13702393]
[104.88567352 193.01213074]
[112.03422546 177.63894653]
[113.09230804 162.67631531]
[114.15039825 147.71368408]
[115.20848083 132.75105286]
[116.26656342 117.78840637]
[102.37932587 122.57329559]
[89.22312927 118.36341858]
[81.71780396 107.82386780]
[66.72013855 108.08860016]
[51.72247314 108.35332489]
[36.72481155 108.61804962]
[21.72714806 108.88278198]
[6.72948360 109.14750671]
[-8.26817989 109.41223145]
[-23.26584435 109.67696381]
[-36.92731476 117.65660858]
[-49.78915787 110.14513397]
[-64.78681946 110.40985870]
[-80.51677704 116.73479462]
[-90.94901276 103.37048340]
[-80.99491882 89.64633179]
[-65.05154419 95.41219330]
[-50.05388260 95.14746857]
[-37.46514511 87.18675232]
[-23.53057098 94.67929840]
[-8.53290749 94.41457367]
[6.46475649 94.14984131]
[21.46241951 93.88511658]
[36.46008301 93.62039185]
[51.45774841 93.35565948]
[66.45541382 93.09093475]
[81.45307159 92.82621002]
[86.30846405 84.43524933]
[94.84707642 79.05104828]
[105.30863953 78.22053528]
[115.32652283 82.50247192]
[122.46308899 91.25709534]
[128.14213562 77.37371063]
[133.82118225 63.49032211]
[122.41325378 53.53352356]
[114.85856628 40.41081619]
[111.97659302 25.54565811]
[114.07995605 10.55050564]
[120.94049072 -2.94807696]
[131.81402588 -13.48586559]
[145.52107239 -19.91979790]
[160.57479858 -21.55197144]
[175.34230042 -18.20533943]
[188.22167969 -10.24291897]
[197.81590271 1.47158670]
[203.08424377 15.66747475]
[203.45526123 30.80488014]
[198.88867188 45.24181366]
[189.87985229 57.41226196]
[177.40599060 65.99607086]
[162.82017517 70.06211853]
[147.70457458 69.16937256]
[142.02551270 83.05275726]
[136.34646606 96.93614197]
[144.19467163 84.15311432]
[155.02812195 73.77832031]
[168.13850403 66.49011230]
[182.66859436 62.76501465]
[197.66836548 62.84659195]
[212.15708923 66.72950745]
[225.18742371 74.15988922]
[235.90737915 84.65190125]
[243.61607361 97.51953888]
[247.80946350 111.92146301]
[248.21337891 126.91602325]
[244.80140686 141.52281189]
[237.79663086 154.78678894]
[227.65705872 165.84071350]
[215.04563904 173.96180725]
[200.78697205 178.61909485]
[185.81333923 179.50808716]
[171.10377502 176.57061768]
[157.62004089 169.99879456]
[146.24377441 160.22227478]
[137.71876526 147.88029480]
[132.60244751 133.77981567]
[131.22920227 118.84649658]
[130.17111206 133.80912781]
[129.11303711 148.77175903]
[128.05494690 163.73440552]
[126.99686432 178.69703674]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 88]
[4 87]
[5 86]
[6 85]
[7 84]
[10 34]
[11 33]
[12 32]
[13 31]
[14 30]
[15 29]
[16 28]
[17 27]
[19 25]
[20 24]
[39 61]
[40 60]
[41 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
