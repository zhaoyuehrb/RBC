%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:58:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAAUCCCCUUUUUUCCAUCAAGCUGUAGCCUGCAGAGAAUGGAAACGUGGGAAAGGAAUGGUAUGUGGGGGAAAUGCAUCCCCUCAGAGGACUGAGGCAUAGUCUCUCAUCUGCUAUUGAAUAAAGACCUUCUAUCUUG\
) } def
/len { sequence length } bind def

/coor [
[59.58679199 222.10064697]
[45.22053528 217.78663635]
[33.11055374 208.93518066]
[24.63895607 196.55648804]
[20.77260590 182.06333923]
[21.95276833 167.10984802]
[28.04475212 153.40263367]
[38.35530090 142.50459290]
[23.72090721 145.79615784]
[9.08651257 149.08773804]
[2.86682749 163.18106079]
[-10.30488586 170.82038879]
[-25.27221680 169.25740051]
[-36.31697845 159.29992676]
[-50.95137405 162.59150696]
[-65.58576965 165.88308716]
[-80.22016144 169.17465210]
[-94.85456085 172.46623230]
[-109.48895264 175.75781250]
[-124.12335205 179.04939270]
[-128.64590454 192.11730957]
[-138.96679688 201.15689087]
[-152.30410767 203.87448120]
[-165.13290405 199.66152954]
[-174.11683655 189.72685242]
[-188.82046509 192.69389343]
[-203.52409363 195.66091919]
[-218.22772217 198.62794495]
[-232.93135071 201.59497070]
[-247.26155090 210.65486145]
[-259.93438721 199.39271545]
[-252.62054443 184.09747314]
[-235.89837646 186.89134216]
[-221.19474792 183.92431641]
[-206.49111938 180.95729065]
[-191.78749084 177.99026489]
[-177.08386230 175.02322388]
[-170.76379395 159.91213989]
[-156.55448914 151.43634033]
[-139.92539978 153.08773804]
[-127.41492462 164.41499329]
[-112.78053284 161.12341309]
[-98.14613342 157.83184814]
[-83.51174164 154.54026794]
[-68.87734985 151.24868774]
[-54.24295044 147.95710754]
[-39.60855484 144.66552734]
[-33.89106750 130.93788147]
[-21.03443146 123.11669922]
[-5.86023188 124.38044739]
[5.79493427 134.45335388]
[20.42932892 131.16177368]
[35.06372452 127.87019348]
[41.33658600 121.59886932]
[51.31001663 121.24578857]
[64.07353973 113.36591339]
[76.83706665 105.48603058]
[89.60058594 97.60615540]
[101.51770020 88.49668884]
[112.47039032 78.24785614]
[123.42307281 67.99901581]
[134.37576294 57.75017929]
[145.32844543 47.50133896]
[156.28112793 37.25250244]
[167.23382568 27.00366592]
[172.02386475 11.92500305]
[186.60360718 8.87863445]
[197.55628967 -1.37020254]
[208.50897217 -11.61903954]
[219.46165466 -21.86787796]
[230.41435242 -32.11671448]
[241.36703491 -42.36555099]
[252.31971741 -52.61438751]
[263.27239990 -62.86322784]
[268.17315674 -80.57525635]
[285.35745239 -83.96401978]
[296.08071899 -94.45264435]
[306.80401611 -104.94126892]
[317.52728271 -115.42990112]
[302.87704468 -118.65014648]
[296.05783081 -132.01048279]
[302.04452515 -145.76399231]
[316.46963501 -149.87696838]
[328.80944824 -141.34883118]
[330.06188965 -126.40202332]
[341.87750244 -135.64276123]
[353.69314575 -144.88348389]
[365.50875854 -154.12422180]
[377.32437134 -163.36495972]
[382.95498657 -178.76716614]
[399.15344238 -181.32508850]
[409.25610352 -168.40734863]
[402.87026978 -153.30261230]
[386.56509399 -151.54933167]
[374.74948120 -142.30860901]
[362.93386841 -133.06787109]
[351.11825562 -123.82714081]
[339.30264282 -114.58640289]
[328.01593018 -104.70661926]
[317.29263306 -94.21799469]
[306.56936646 -83.72937012]
[295.84606934 -73.24073792]
[295.38299561 -61.10353851]
[286.46591187 -52.27545929]
[273.52124023 -51.91054153]
[262.56854248 -41.66170502]
[251.61587524 -31.41286659]
[240.66317749 -21.16402817]
[229.71049500 -10.91519165]
[218.75781250 -0.66635382]
[207.80513000 9.58248329]
[196.85244751 19.83132172]
[192.84580994 34.17691803]
[177.48265076 37.95635223]
[166.52996826 48.20518875]
[155.57728577 58.45402527]
[144.62460327 68.70286560]
[133.67190552 78.95169830]
[122.71922302 89.20053864]
[111.76654053 99.44937897]
[126.75776672 98.93650055]
[139.72627258 106.47425842]
[146.70057678 119.75428772]
[145.54484558 134.70970154]
[136.61303711 146.76054382]
[122.64041138 152.21633911]
[107.90596771 149.40632629]
[96.92198944 139.19104004]
[93.05222321 124.69880676]
[97.48046875 110.36967468]
[84.71694183 118.24955750]
[71.95342255 126.12943268]
[59.18989563 134.00930786]
[74.17864990 134.59007263]
[88.11869049 140.12860107]
[99.41904449 149.99278259]
[106.79000854 163.05680847]
[109.39032745 177.82969666]
[106.92322540 192.62542725]
[99.67028046 205.75534058]
[88.45927429 215.72094727]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 53]
[9 52]
[10 51]
[14 47]
[15 46]
[16 45]
[17 44]
[18 43]
[19 42]
[20 41]
[25 37]
[26 36]
[27 35]
[28 34]
[29 33]
[55 133]
[56 132]
[57 131]
[58 130]
[59 120]
[60 119]
[61 118]
[62 117]
[63 116]
[64 115]
[65 114]
[67 112]
[68 111]
[69 110]
[70 109]
[71 108]
[72 107]
[73 106]
[74 105]
[76 102]
[77 101]
[78 100]
[79 99]
[85 98]
[86 97]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
