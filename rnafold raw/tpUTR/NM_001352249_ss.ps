%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 15:11:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUGGGGUGAACCCAGGGGUCCAAACUCUGUUUCUCUUCAGUGCUCCAUUUUUUUAAUGAAAGAAAAAAUAAUAAAGCUUUUGUUUACCACAAGG\
) } def
/len { sequence length } bind def

/coor [
[114.55478668 184.58439636]
[113.08453369 169.65663147]
[111.61427307 154.72885132]
[110.14402008 139.80108643]
[108.67375946 124.87331390]
[94.18487549 120.99102783]
[85.44770813 133.18373108]
[84.37966156 149.54806519]
[69.55597687 156.56164551]
[56.22598648 147.00950623]
[58.10243988 130.71806335]
[73.25500488 124.44656372]
[81.99217224 112.25386047]
[74.28063202 99.38793182]
[59.40895844 101.34582520]
[44.53728485 103.30371857]
[29.66561317 105.26161194]
[14.79394054 107.21950531]
[6.54503107 120.50444031]
[-8.32942486 125.32984924]
[-22.80616570 119.41732025]
[-30.04971504 105.55857086]
[-26.63989258 90.29727173]
[-14.18671036 80.83935547]
[1.42981887 81.65054321]
[12.83604717 92.34783173]
[27.70771980 90.38993835]
[42.57939148 88.43204498]
[57.45106506 86.47415161]
[72.32273865 84.51625824]
[82.39612579 73.40199280]
[82.88690948 58.41002655]
[83.37769318 43.41805649]
[83.86848450 28.42608833]
[84.35926819 13.43411922]
[81.46979523 4.55811596]
[85.11936951 -2.03807306]
[86.10041809 -17.00595665]
[87.08145905 -31.97384071]
[88.06250763 -46.94172287]
[74.08504486 -52.76488876]
[62.75735092 -62.81287766]
[55.30817413 -75.99576569]
[52.54553986 -90.88356018]
[54.76912308 -105.86135864]
[61.73772049 -119.30447388]
[72.69543457 -129.75469971]
[86.45365906 -136.07847595]
[101.51999664 -137.58982849]
[116.26016235 -134.12484741]
[129.07525635 -126.05937195]
[138.57521057 -114.26828003]
[143.72950745 -100.03058624]
[143.97906494 -84.89069366]
[139.29682922 -70.49085236]
[130.19065857 -58.39306641]
[117.64835358 -49.90959930]
[103.03039551 -45.96067810]
[102.04934692 -30.99279404]
[101.06829834 -16.02490997]
[100.08724976 -1.05702615]
[99.35123444 13.92490578]
[98.86045074 28.91687393]
[98.36966705 43.90884399]
[97.87887573 58.90081024]
[97.38809204 73.89278412]
[151.14611816 90.01715088]
[165.50021362 94.37142181]
[179.85432434 98.72569275]
[194.20843506 103.07996368]
[208.56253052 107.43423462]
[222.91664124 111.78850555]
[235.20698547 102.31606293]
[250.71875000 101.91043091]
[263.48736572 110.72758484]
[268.60302734 125.37714386]
[264.09866333 140.22605896]
[251.70628357 149.56462097]
[236.19102478 149.80195618]
[223.51881409 140.84680176]
[218.56237793 126.14260864]
[204.20826721 121.78833771]
[189.85415649 117.43406677]
[175.50006104 113.07979584]
[161.14595032 108.72553253]
[146.79183960 104.37126160]
[140.99426270 109.12921143]
[123.60153198 123.40306091]
[125.07179260 138.33082581]
[126.54204559 153.25860596]
[128.01229858 168.18637085]
[129.48255920 183.11413574]
[139.46931458 196.12170410]
[132.94865417 211.16873169]
[116.62847137 212.77612305]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 92]
[2 91]
[3 90]
[4 89]
[5 88]
[6 13]
[7 12]
[14 30]
[15 29]
[16 28]
[17 27]
[18 26]
[31 66]
[32 65]
[33 64]
[34 63]
[35 62]
[37 61]
[38 60]
[39 59]
[40 58]
[67 86]
[68 85]
[69 84]
[70 83]
[71 82]
[72 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
