%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 20:16:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGGCGCUCCUCCCCUGCUUCCCAAGUCUCCCCUGGAUGGGCGGGGGAGGGGAAGGGGUGGCAGAGGGAGGCCUCACUC\
) } def
/len { sequence length } bind def

/coor [
[101.12919617 259.65615845]
[99.36613464 244.76014709]
[97.60307312 229.86412048]
[95.84001160 214.96809387]
[91.81990051 208.52627563]
[94.31202698 199.45414734]
[93.13513947 184.50038147]
[89.94049072 180.62515259]
[89.33228302 174.63192749]
[92.50000000 168.33506775]
[92.50000000 153.33506775]
[92.50000000 138.33506775]
[92.50000000 123.33506012]
[92.50000000 108.33506012]
[92.20549774 93.33795166]
[91.61660004 78.34951782]
[91.02770233 63.36108398]
[90.43880463 48.37264633]
[89.84990692 33.38421249]
[81.57677460 19.89844322]
[88.80844116 6.87721872]
[88.21954346 -8.11121655]
[87.63064575 -23.09965324]
[72.38726044 -32.49376297]
[65.70121765 -48.93833160]
[69.98963928 -66.00585938]
[83.41793060 -77.14064026]
[81.65486908 -92.03666687]
[79.89180756 -106.93269348]
[78.12874603 -121.82872009]
[76.36568451 -136.72474670]
[74.60262299 -151.62077332]
[72.83956146 -166.51679993]
[71.07649994 -181.41282654]
[69.31343842 -196.30885315]
[56.74845886 -205.89514160]
[54.72503281 -221.56936646]
[64.44362640 -234.03228760]
[80.13836670 -235.88987732]
[92.49784851 -226.04006958]
[94.18939972 -210.32656860]
[84.20946503 -198.07191467]
[85.97252655 -183.17588806]
[87.73558807 -168.27986145]
[89.49864960 -153.38383484]
[91.26171112 -138.48780823]
[93.02477264 -123.59178162]
[94.78783417 -108.69575500]
[96.55089569 -93.79972839]
[98.31395721 -78.90370178]
[109.93189240 -74.46495056]
[118.53334045 -65.38089752]
[122.37662506 -53.39878082]
[120.64374542 -40.86137772]
[113.61354065 -30.24893570]
[102.61908722 -23.68854904]
[103.20798492 -8.70011425]
[103.79687500 6.28832150]
[112.02788544 18.70201683]
[104.83834076 32.79531479]
[105.42723846 47.78374863]
[106.01613617 62.77218628]
[106.60503387 77.76062012]
[107.19393158 92.74905396]
[110.71021271 100.26105499]
[107.50000000 108.33506012]
[107.50000000 123.33506012]
[107.50000000 138.33506775]
[107.50000000 153.33506775]
[107.50000000 168.33506775]
[108.08889771 183.32350159]
[109.26578522 198.27725220]
[110.73603821 213.20503235]
[112.49909973 228.10105896]
[114.26216125 242.99708557]
[116.02522278 257.89309692]
[126.26544189 270.70208740]
[120.04146576 285.87423706]
[103.75598907 287.80175781]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 76]
[2 75]
[3 74]
[4 73]
[6 72]
[7 71]
[10 70]
[11 69]
[12 68]
[13 67]
[14 66]
[15 64]
[16 63]
[17 62]
[18 61]
[19 60]
[21 58]
[22 57]
[23 56]
[27 50]
[28 49]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
[34 43]
[35 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
