%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 13:27:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCCCAACAGCAGAACCCCAAAGUGAAGUUACAGUGGAAAUGAGUGGAGGGGGAUUGUCUUUCAACGCAGCGUGAGUCUAAUGGUUGAAUAAAACUUACUGAUGAUCAUGGG\
) } def
/len { sequence length } bind def

/coor [
[109.56134796 150.69267273]
[97.91029358 151.54415894]
[86.36640930 149.75230408]
[80.34098053 163.48890686]
[86.31873322 178.11907959]
[80.12359619 192.65853882]
[65.43103790 198.48127747]
[50.95788956 192.13276672]
[45.29081726 177.37947083]
[51.79199219 162.97425842]
[66.60437775 157.46348572]
[72.62981415 143.72688293]
[67.44531250 140.01699829]
[62.75800323 135.69595337]
[58.63946533 130.82974243]
[55.15260315 125.49270630]
[52.35066223 119.76632690]
[50.27643967 113.73806763]
[48.96161270 107.50000000]
[33.96161270 107.50000000]
[18.96161079 107.50000000]
[7.82848644 118.39455414]
[-7.38364649 118.18087006]
[-17.70132828 107.50000000]
[-32.70132828 107.50000000]
[-47.70132828 107.50000000]
[-61.62512970 116.16370392]
[-75.96056366 108.19957733]
[-75.96056366 91.80042267]
[-61.62512970 83.83629608]
[-47.70132828 92.50000000]
[-32.70132828 92.50000000]
[-17.70132828 92.50000000]
[-7.38364649 81.81912994]
[7.82848644 81.60544586]
[18.96161079 92.50000000]
[33.96161270 92.50000000]
[48.96161270 92.50000000]
[51.17390823 83.35128021]
[55.01167679 74.75682068]
[60.34716415 67.00273132]
[67.00273132 60.34716415]
[74.75682068 55.01167679]
[83.35128021 51.17390823]
[92.50000000 48.96161270]
[92.50000000 33.96161270]
[92.50000000 18.96161079]
[81.60544586 7.82848644]
[81.81912994 -7.38364649]
[92.50000000 -17.70132828]
[92.50000000 -32.70132828]
[92.50000000 -47.70132828]
[92.50000000 -62.70132828]
[92.50000000 -77.70132446]
[92.50000000 -92.70132446]
[86.45365906 -108.54045868]
[100.00000000 -118.73521423]
[113.54634094 -108.54045868]
[107.50000000 -92.70132446]
[107.50000000 -77.70132446]
[107.50000000 -62.70132828]
[107.50000000 -47.70132828]
[107.50000000 -32.70132828]
[107.50000000 -17.70132828]
[118.18087006 -7.38364649]
[118.39455414 7.82848644]
[107.50000000 18.96161079]
[107.50000000 33.96161270]
[107.50000000 48.96161270]
[132.53599548 59.96781540]
[148.42755127 82.22531891]
[150.70823669 109.47850800]
[164.89549255 114.34899902]
[179.08274841 119.21949005]
[193.27000427 124.08998108]
[207.45727539 128.96047974]
[221.77334595 133.43820190]
[236.20736694 137.51974487]
[250.64138794 141.60130310]
[261.67614746 131.00975037]
[276.43341064 127.38753510]
[290.92602539 131.61018372]
[301.28979492 142.44752502]
[304.81381226 156.91979980]
[319.24783325 161.00135803]
[333.68185425 165.08290100]
[348.11587524 169.16445923]
[361.78631592 161.23385620]
[377.03887939 165.37322998]
[384.82452393 179.12677002]
[380.52410889 194.33473206]
[366.68902588 201.97450256]
[351.52740479 197.51354980]
[344.03430176 183.59848022]
[329.60028076 179.51692200]
[315.16629028 175.43537903]
[300.73226929 171.35382080]
[290.15133667 181.83761597]
[275.64700317 185.64291382]
[261.08920288 181.65089417]
[250.41406250 170.83708191]
[246.55982971 156.03532410]
[232.12580872 151.95376587]
[217.69178772 147.87222290]
[213.05113220 149.45368958]
[207.36653137 148.03611755]
[202.58677673 143.14773560]
[188.39952087 138.27723694]
[174.21226501 133.40675354]
[160.02499390 128.53625488]
[145.83773804 123.66576385]
[139.33758545 133.37246704]
[130.82009888 141.36772156]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 12]
[4 11]
[19 38]
[20 37]
[21 36]
[24 33]
[25 32]
[26 31]
[45 69]
[46 68]
[47 67]
[50 64]
[51 63]
[52 62]
[53 61]
[54 60]
[55 59]
[72 111]
[73 110]
[74 109]
[75 108]
[76 107]
[77 104]
[78 103]
[79 102]
[84 97]
[85 96]
[86 95]
[87 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
