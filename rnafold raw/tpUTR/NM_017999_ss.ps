%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 13:11:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGAGGGCAAGGGUCCCGAUGAGGGUCCCAUGGCCUGCUCCCUCAGGAACAGCUCCAGCACCAAUAAAGAGGCAUCUUACCACCCAGG\
) } def
/len { sequence length } bind def

/coor [
[94.38258362 182.57742310]
[93.85321045 167.58676147]
[93.32383728 152.59611511]
[89.86438751 145.87405396]
[93.04976654 137.06907654]
[93.04976654 122.06907654]
[87.34243011 117.20324707]
[77.61059570 128.61778259]
[66.19622040 118.88578033]
[75.92774200 107.47159576]
[70.22040558 102.60577393]
[55.40924454 104.97843170]
[40.59808350 107.35109711]
[28.19551086 117.17386627]
[14.40460110 111.54713440]
[-0.40655968 113.91979980]
[-15.21772003 116.29245758]
[-25.75156212 128.39277649]
[-41.77286148 127.55759430]
[-50.99144745 114.42758179]
[-46.33560944 99.07496643]
[-31.37691116 93.27696228]
[-17.59038162 101.48130035]
[-2.77922106 99.10864258]
[12.03193951 96.73597717]
[23.37511826 87.08291626]
[38.22542191 92.53993225]
[53.03658295 90.16727448]
[67.84774017 87.79460907]
[82.35451508 79.73047638]
[95.68861389 81.12903595]
[95.15924072 66.13838196]
[94.62986755 51.14772415]
[84.48424530 35.90565109]
[93.04844666 20.69845009]
[91.99036407 5.73581457]
[90.93228149 -9.22682095]
[82.24079895 -22.44683647]
[89.06105804 -35.68818665]
[88.00297546 -50.65082169]
[86.94489288 -65.61345673]
[77.32060242 -78.89144897]
[84.25368500 -93.75295258]
[100.61198425 -94.90973663]
[109.56747437 -81.17179108]
[101.90752411 -66.67153931]
[102.96561432 -51.70890427]
[104.02369690 -36.74626923]
[112.63948822 -24.59648323]
[105.89491272 -10.28490543]
[106.95299530 4.67773008]
[108.01108551 19.64036560]
[117.01406860 27.92661667]
[117.89516449 40.53552628]
[109.62052917 50.61835480]
[110.14990234 65.60900879]
[110.67926788 80.59966278]
[121.92042542 90.53125000]
[136.86206055 89.20926666]
[146.99169922 77.37591553]
[162.16346741 76.24808502]
[173.38233948 85.97807312]
[183.33583069 73.70193481]
[199.06301880 72.14270020]
[211.23323059 82.22542572]
[212.62609863 97.96821594]
[202.41526794 110.03115082]
[186.65863037 111.25750732]
[174.70431519 100.91970062]
[165.36811829 112.46833801]
[150.23400879 114.02186584]
[138.18405151 104.15089417]
[123.24241638 105.47288513]
[136.98872375 111.47612762]
[151.75567627 114.10993195]
[162.34893799 124.72986603]
[164.94558716 139.50340271]
[158.60855103 153.09907532]
[145.62474060 160.61044312]
[130.67976379 159.32682800]
[119.16696930 149.71145630]
[115.24114990 135.23281860]
[108.04976654 122.06907654]
[108.04976654 137.06907654]
[108.31449890 152.06674194]
[108.84386444 167.05738831]
[109.37323761 182.04804993]
[112.24234772 201.21620178]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 87]
[2 86]
[3 85]
[5 84]
[6 83]
[11 29]
[12 28]
[13 27]
[15 25]
[16 24]
[17 23]
[31 57]
[32 56]
[33 55]
[35 52]
[36 51]
[37 50]
[39 48]
[40 47]
[41 46]
[58 73]
[59 72]
[62 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
