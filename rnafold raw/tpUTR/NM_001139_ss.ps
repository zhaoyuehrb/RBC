%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 03:03:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCGCGCUUCCCGUCUCUCCUCUCCCCAUUCUGUGCCCUACUAUUUUCAACAAAACAAAACAAACAAGCAAAAAACACAAAAACCUCAGAGACCAAAACACCAAACAAACAAAAAAACAAAAAACCUUCCUUUC\
) } def
/len { sequence length } bind def

/coor [
[103.16515350 111.29073334]
[96.79100037 124.86903381]
[90.41685486 138.44734192]
[89.58528900 147.63615417]
[83.73545837 152.26304626]
[77.04938507 165.69049072]
[70.36331177 179.11793518]
[74.07780457 194.72505188]
[64.07853699 207.27073669]
[48.03609467 207.13102722]
[38.25685883 194.41307068]
[42.24263000 178.87301636]
[56.93585968 172.43186951]
[63.62193680 159.00440979]
[70.30801392 145.57696533]
[76.83855438 132.07319641]
[83.21269989 118.49488831]
[89.58684540 104.91658783]
[88.72846222 102.13610840]
[88.59645081 99.24012756]
[89.19377899 96.41454315]
[81.59397125 83.48229980]
[73.99417114 70.55004883]
[66.39437103 57.61780167]
[51.62474823 60.82962036]
[36.60586548 59.32109070]
[22.80730820 53.25246811]
[11.57534695 43.22959137]
[4.00158167 30.24341774]
[0.81686664 15.57206821]
[2.32079291 0.65501976]
[8.35355568 -13.04811478]
[18.31283188 -24.20041656]
[10.71302891 -37.13266373]
[3.11322641 -50.06491089]
[-4.48657608 -62.99715424]
[-18.43281746 -57.39715576]
[-33.05795288 -53.93838501]
[-48.03524780 -52.69810867]
[-63.03010559 -53.70403671]
[-77.70753479 -56.93369675]
[-91.73963928 -62.31493759]
[-104.81293488 -69.72753906]
[-116.63535309 -79.00590515]
[-126.94278717 -89.94274139]
[-135.50495911 -102.29373169]
[-142.13058472 -115.78293610]
[-146.67164612 -130.10900879]
[-149.02670288 -144.95190430]
[-149.14314270 -159.98001099]
[-147.01834106 -174.85760498]
[-142.69979858 -189.25231934]
[-136.28396606 -202.84257507]
[-127.91419983 -215.32473755]
[-117.77745819 -226.41996765]
[-106.10021973 -235.88040161]
[-93.14334869 -243.49467468]
[-79.19631195 -249.09268188]
[-64.57067871 -252.54937744]
[-49.59321213 -253.78752136]
[-34.59849548 -252.77944946]
[-19.92152596 -249.54769897]
[-5.89019012 -244.16445923]
[7.18204737 -236.75000000]
[19.00314713 -227.46995544]
[29.30902290 -216.53164673]
[37.86943436 -204.17944336]
[44.49314117 -190.68928528]
[49.03216934 -176.36256409]
[51.38510895 -161.51934814]
[51.49940109 -146.49121094]
[49.37248993 -131.61392212]
[45.05189133 -117.21982574]
[38.63412857 -103.63049316]
[30.26257515 -91.14951324]
[20.12425804 -80.05572510]
[8.44567108 -70.59696198]
[16.04547310 -57.66471100]
[23.64527512 -44.73246384]
[31.24507713 -31.80021858]
[45.83420563 -35.07410431]
[60.74114227 -33.67645645]
[74.50482178 -27.73161507]
[85.77234650 -17.81023216]
[93.43193054 -4.87449217]
[96.72261810 9.81517887]
[95.30986786 24.82292557]
[89.31949615 38.67781448]
[79.32661438 50.01800156]
[86.92641449 62.95024872]
[94.52622223 75.88249207]
[102.12602234 88.81474304]
[103.96332550 73.92768860]
[107.78929138 59.42382812]
[113.53416443 45.56755066]
[121.09322357 32.61145020]
[130.32867432 20.79170418]
[141.07217407 10.32378006]
[153.12785339 1.39850259]
[166.27595520 -5.82142878]
[180.27679443 -11.20439911]
[194.87515259 -14.65227985]
[209.80491638 -16.10221863]
[224.79391479 -15.52778625]
[239.56890869 -12.93945217]
[253.86056519 -8.38440037]
[267.40835571 -1.94566548]
[279.96533203 6.25937748]
[291.30255127 16.08115768]
[301.21334839 27.34062767]
[309.51712036 39.83253860]
[316.06240845 53.32917023]
[320.72994995 67.58448792]
[323.43463135 82.33863068]
[324.12716675 97.32263184]
[322.79492188 112.26335907]
[319.46218872 126.88843536]
[314.18972778 140.93125916]
[307.07363892 154.13584900]
[298.24362183 166.26148987]
[287.86068726 177.08714294]
[276.11410522 186.41545105]
[263.21798706 194.07638550]
[249.40739441 199.93028259]
[234.93414307 203.87042236]
[220.06202698 205.82498169]
[205.06217957 205.75834656]
[190.20802307 203.67170715]
[175.77033997 199.60311890]
[162.01232910 193.62673950]
[149.18476868 185.85153198]
[137.52153015 176.41920471]
[127.23519897 165.50172424]
[118.51329041 153.29811096]
[111.51480865 140.03080750]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[3 16]
[5 15]
[6 14]
[7 13]
[21 92]
[22 91]
[23 90]
[24 89]
[33 80]
[34 79]
[35 78]
[36 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
