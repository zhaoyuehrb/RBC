%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 11:16:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACUCGCGAACCCAAGGCCAGGGGCACACAUGGGCCAGGCAAUGAGGAGCGUCCUUCCUUGCCCCACAAAUAAAGGCACAUCCCAGGUGGCUGGGACCUGCCAGUAGGUGUCACACCACAA\
) } def
/len { sequence length } bind def

/coor [
[130.57200623 246.76744080]
[126.78231812 232.25405884]
[122.99262238 217.74067688]
[119.20293427 203.22729492]
[115.41324615 188.71391296]
[104.71145630 178.35433960]
[108.71118927 163.04705811]
[104.92150116 148.53367615]
[97.74372864 148.73036194]
[90.61483765 147.87126160]
[83.68928528 145.97499084]
[77.11711884 143.08262634]
[71.04073334 139.25685120]
[65.59177399 134.58052063]
[60.88829803 129.15499878]
[57.03221130 123.09779358]
[54.10705948 116.54015350]
[39.38143158 119.39601898]
[24.65580750 122.25189209]
[9.93018341 125.10775757]
[3.29503202 139.01029968]
[-10.09757042 146.25541687]
[-25.01193047 144.24896240]
[-35.75635147 133.96813965]
[-45.88875198 146.40653992]
[-61.92879486 146.09585571]
[-71.57193756 133.27441406]
[-67.42077637 117.77772522]
[-52.65973282 111.49352264]
[-38.61221695 119.24250793]
[-32.48989105 105.69056702]
[-19.40682983 98.25434113]
[-4.27681351 99.96781158]
[7.07431698 110.38213348]
[21.79994202 107.52626038]
[36.52556610 104.67039490]
[51.25119019 101.81452942]
[55.74419785 79.47774506]
[69.89122009 61.61771011]
[62.55772400 48.53261185]
[55.22422409 35.44750977]
[47.89072800 22.36241150]
[40.55723190 9.27731228]
[27.06077576 1.02163494]
[27.58797073 -13.86363697]
[20.25447464 -26.94873619]
[12.92097759 -40.03383636]
[5.58748102 -53.11893463]
[-9.69085026 -57.16222000]
[-17.56289291 -70.86647034]
[-13.35830402 -86.10119629]
[0.42840835 -93.82791138]
[15.61783314 -89.46248627]
[23.19835281 -75.59485626]
[18.67258072 -60.45243073]
[26.00607681 -47.36733246]
[33.33957291 -34.28223419]
[40.67306900 -21.19713402]
[53.64498520 -13.87739086]
[53.64233017 1.94381571]
[60.97583008 15.02891541]
[68.30932617 28.11401367]
[75.64282227 41.19911575]
[82.97631836 54.28421402]
[89.33343506 52.39786530]
[95.88764191 51.39107513]
[102.51783752 51.28245163]
[109.10150909 52.07400131]
[115.51700592 53.75109482]
[121.64579010 56.28274155]
[127.37461853 59.62217331]
[132.59764099 63.70767593]
[137.21833801 68.46376801]
[141.15135193 73.80255890]
[144.32397461 79.62541962]
[146.67762756 85.82473755]
[161.52986145 83.72450256]
[176.38211060 81.62425995]
[191.23434448 79.52401733]
[200.73239136 67.17796326]
[215.82458496 65.25959778]
[227.53611755 74.39060974]
[242.38836670 72.29036713]
[257.24060059 70.19012451]
[272.09283447 68.08988190]
[286.94506836 65.98963928]
[301.79730225 63.88940048]
[314.37091064 53.36148453]
[329.68023682 59.23996735]
[331.97637939 75.47756958]
[318.89724731 85.37043762]
[303.89755249 78.74163818]
[289.04531860 80.84188080]
[274.19308472 82.94212341]
[259.34085083 85.04236603]
[244.48860168 87.14260864]
[229.63636780 89.24285126]
[220.91581726 101.26314545]
[205.88345337 103.60466766]
[193.33457947 94.37625122]
[178.48234558 96.47649384]
[163.63011169 98.57673645]
[148.77786255 100.67697906]
[140.60443115 127.03736115]
[119.43488312 144.74398804]
[123.22457123 159.25737000]
[134.19741821 170.65504456]
[129.92662048 184.92422485]
[133.71632385 199.43760681]
[137.50601196 213.95098877]
[141.29570007 228.46437073]
[145.08538818 242.97775269]
[160.00939941 246.37371826]
[171.63822937 256.32504272]
[177.29966736 270.54498291]
[175.69274902 285.76589966]
[167.18673706 298.49014282]
[153.73625183 305.79376221]
[138.43211365 305.99847412]
[124.79109955 299.05718994]
[115.94781494 286.56500244]
[113.93438721 271.39248657]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 112]
[2 111]
[3 110]
[4 109]
[5 108]
[7 106]
[8 105]
[17 37]
[18 36]
[19 35]
[20 34]
[24 30]
[39 64]
[40 63]
[41 62]
[42 61]
[43 60]
[45 58]
[46 57]
[47 56]
[48 55]
[76 103]
[77 102]
[78 101]
[79 100]
[82 97]
[83 96]
[84 95]
[85 94]
[86 93]
[87 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
