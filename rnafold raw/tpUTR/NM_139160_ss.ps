%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 06:21:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUUUAAUAUCUGUAUAUAAGUUGUGUAUUUUAAGAAUAAAUUAUGUAUCCUAAAUAUCCAAUCACAUUUGUAAGCGUGGAAGCUCUAAAUUUGAAACUGUACUUAAUAAAAAUUUUUUUGUAUAA\
) } def
/len { sequence length } bind def

/coor [
[118.15148163 173.60186768]
[108.32086182 175.34901428]
[98.34588623 175.78901672]
[88.39961243 174.91423035]
[78.65457916 172.73983765]
[69.27984619 169.30355835]
[60.43804550 164.66499329]
[52.28256226 158.90464783]
[44.95487976 152.12240601]
[38.58211517 144.43595886]
[33.27482605 135.97863770]
[29.12508392 126.89714813]
[26.20487404 117.34906006]
[24.56485939 107.50000000]
[9.56485844 107.50000000]
[-5.43514156 107.50000000]
[-20.43514061 107.50000000]
[-35.43514252 107.50000000]
[-50.43514252 107.50000000]
[-65.43514252 107.50000000]
[-80.43514252 107.50000000]
[-94.23531342 115.23729706]
[-106.96258545 107.50000000]
[-121.96258545 107.50000000]
[-136.96258545 107.50000000]
[-151.96258545 107.50000000]
[-159.01887512 121.08187866]
[-171.58534241 129.81929016]
[-186.77430725 131.70445251]
[-201.09545898 126.30416107]
[-211.25790405 114.85936737]
[-214.92637634 100.00000000]
[-211.25790405 85.14063263]
[-201.09545898 73.69583893]
[-186.77430725 68.29554749]
[-171.58534241 70.18070221]
[-159.01887512 78.91812134]
[-151.96258545 92.50000000]
[-136.96258545 92.50000000]
[-121.96258545 92.50000000]
[-106.96258545 92.50000000]
[-94.23531342 84.76270294]
[-80.43514252 92.50000000]
[-65.43514252 92.50000000]
[-50.43514252 92.50000000]
[-35.43514252 92.50000000]
[-20.43514061 92.50000000]
[-5.43514156 92.50000000]
[9.56485844 92.50000000]
[24.56485939 92.50000000]
[26.61075401 81.00712585]
[30.39692879 69.96463776]
[35.83360291 59.63437271]
[42.79185104 50.26129913]
[51.10667801 42.06768036]
[60.58091354 35.24781036]
[70.98989105 29.96340752]
[82.08679199 26.33978462]
[93.60845947 24.46286392]
[105.28170013 24.37715721]
[116.82968903 26.08469582]
[127.97859192 29.54498672]
[138.46405029 34.67597961]
[148.03739929 41.35599899]
[158.64399719 30.74939728]
[169.25059509 20.14279556]
[173.53770447 4.91350269]
[188.00833130 1.38505995]
[198.61494446 -9.22154140]
[209.22154236 -19.82814407]
[219.82814026 -30.43474579]
[230.43473816 -41.04134750]
[231.23361206 -53.98375320]
[240.37493896 -62.60407639]
[252.53744507 -62.63950348]
[263.40115356 -72.98261261]
[274.26486206 -83.32572174]
[274.40209961 -99.12940979]
[285.73245239 -110.14751434]
[301.53381348 -109.84318542]
[312.43151855 -98.39698029]
[311.96014404 -82.59972382]
[300.39935303 -71.82364655]
[284.60797119 -72.46201324]
[273.74426270 -62.11890411]
[262.88055420 -51.77579498]
[258.89688110 -34.73126221]
[241.04135132 -30.43474579]
[230.43473816 -19.82814407]
[219.82814026 -9.22154140]
[209.22154236 1.38505995]
[198.61494446 11.99166203]
[195.08650208 26.46229935]
[179.85720825 30.74939728]
[169.25059509 41.35599899]
[158.64399719 51.96260071]
[171.69508362 75.37226105]
[175.78422546 101.86039734]
[170.40029907 128.11598206]
[156.21627808 150.85705566]
[166.28965759 161.97132874]
[176.36305237 173.08560181]
[186.43643188 184.19985962]
[196.50981140 195.31413269]
[212.05870056 196.24690247]
[222.11621094 207.66183472]
[221.13113403 222.47956848]
[231.20452881 233.59384155]
[246.40483093 230.95678711]
[260.60894775 236.97729492]
[269.28439331 249.73426819]
[269.66284180 265.15698242]
[261.62356567 278.32412720]
[247.73184204 285.03408813]
[232.42048645 283.14575195]
[220.57528687 273.26168823]
[215.97599792 258.53585815]
[220.09025574 243.66722107]
[210.01687622 232.55296326]
[195.17393494 232.08090210]
[184.79977417 220.95294189]
[185.39555359 205.38751221]
[175.32215881 194.27323914]
[165.24877930 183.15898132]
[155.17539978 172.04470825]
[145.10200500 160.93045044]
[136.70297241 166.32949829]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 50]
[15 49]
[16 48]
[17 47]
[18 46]
[19 45]
[20 44]
[21 43]
[23 41]
[24 40]
[25 39]
[26 38]
[64 96]
[65 95]
[66 94]
[68 92]
[69 91]
[70 90]
[71 89]
[72 88]
[75 86]
[76 85]
[77 84]
[100 126]
[101 125]
[102 124]
[103 123]
[104 122]
[107 119]
[108 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
