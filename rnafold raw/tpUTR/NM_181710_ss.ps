%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 20:19:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUCUAGGGCAGGGAGGGGGGUGCAAUGAGGAAUGUUUCUGGUCUGAAAAGAAUAAAGUGGGUUUGAAAGCGGA\
) } def
/len { sequence length } bind def

/coor [
[217.78840637 270.92221069]
[214.03202820 256.35989380]
[212.86160278 241.36651611]
[214.31272888 226.39770508]
[218.34130859 211.90834045]
[224.82490540 198.33872986]
[212.61717224 189.62258911]
[200.40943909 180.90643311]
[188.20170593 172.19027710]
[173.34767151 171.09175110]
[166.61238098 156.77580261]
[154.40464783 148.05964661]
[142.19691467 139.34349060]
[129.98918152 130.62733459]
[117.78145599 121.91118622]
[105.57372284 113.19503784]
[91.67668915 111.65752411]
[85.71012115 99.01269531]
[71.74682617 105.25557709]
[56.63328934 103.68147278]
[44.41806412 94.81272888]
[38.32288361 81.11219025]
[39.89319992 66.30004120]
[24.34767342 69.14823151]
[11.38899899 60.10122299]
[8.70532703 44.52645493]
[17.88883209 31.66415405]
[33.49110413 29.14529800]
[46.25559235 38.46427917]
[48.60935211 54.09231186]
[62.10905457 47.79758072]
[77.04636383 49.11395264]
[89.40085602 57.78764343]
[95.79702759 71.57117462]
[94.42627716 86.80496216]
[108.32331085 88.34247589]
[114.28987885 100.98730469]
[126.49761200 109.70346069]
[138.70533752 118.41960907]
[150.91307068 127.13576508]
[163.12080383 135.85191345]
[175.32853699 144.56806946]
[191.05575562 146.29003906]
[196.91786194 159.98254395]
[209.12559509 168.69869995]
[221.33331299 177.41485596]
[233.54104614 186.13101196]
[244.27020264 175.59266663]
[256.66641235 167.07768250]
[270.35299683 160.84481812]
[284.91403198 157.08348083]
[299.90698242 155.90795898]
[314.87631226 157.35400391]
[329.36703491 161.37763977]
[342.93884277 167.85661316]
[355.17929077 176.59402466]
[365.71643066 187.32437134]
[374.22998047 199.72155762]
[380.46130371 213.40884399]
[384.22100830 227.97029114]
[385.39480591 242.96340942]
[383.94708252 257.93255615]
[379.92178345 272.42282104]
[373.44128418 285.99389648]
[364.70248413 298.23336792]
[353.97094727 308.76925659]
[341.57278442 317.28143311]
[327.88479614 323.51119995]
[313.32290649 327.26922607]
[298.32968140 328.44134521]
[283.36068726 326.99191284]
[268.87088013 322.96499634]
[255.30053711 316.48294067]
[243.06207275 307.74273682]
[232.52738953 297.01000977]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 47]
[7 46]
[8 45]
[9 44]
[11 42]
[12 41]
[13 40]
[14 39]
[15 38]
[16 37]
[18 35]
[23 30]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
