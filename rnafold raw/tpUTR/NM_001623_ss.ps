%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 09:43:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGAAGGGAAAAGGGAUGAUGGGAUUGAAGGGGCUUCUAAUGACCCAGAUAUGGAAACAGAAGACAAAAUUGUAAGCCAGAGUCAACAAAUUAAAUAAAUUACCCCCUCCUCCAGAUCAAGUCA\
) } def
/len { sequence length } bind def

/coor [
[137.70294189 391.24920654]
[136.58200073 376.29116821]
[135.46104431 361.33309937]
[134.34008789 346.37503052]
[133.21914673 331.41699219]
[120.03343964 321.05801392]
[118.33325958 304.03829956]
[129.64526367 290.76354980]
[128.15174866 275.83810425]
[126.65822601 260.91262817]
[115.00312042 251.70970154]
[113.27585602 236.59443665]
[123.00777435 224.43188477]
[121.51425934 209.50642395]
[120.02073669 194.58096313]
[118.52722168 179.65550232]
[112.68943024 172.04104614]
[114.35057068 161.35639954]
[109.22026825 147.26101685]
[104.08996582 133.16563416]
[98.95966339 119.07023621]
[85.87239838 112.85173798]
[80.91669464 99.23604584]
[86.94494629 86.06006622]
[81.00572968 78.97264862]
[81.86724091 71.54881287]
[77.08993530 57.32990265]
[72.31263733 43.11099243]
[67.53533936 28.89208221]
[51.37397766 24.08250999]
[41.33076859 10.74452972]
[41.17768478 -5.78560781]
[50.77803040 -19.03921509]
[45.64772797 -33.13460541]
[40.51742554 -47.22999573]
[35.38712311 -61.32538223]
[30.25682068 -75.42077637]
[18.26619911 -85.74237823]
[21.18390083 -100.34841919]
[16.05359840 -114.44380951]
[10.92329597 -128.53919983]
[5.79299402 -142.63458252]
[-8.67114449 -141.49772644]
[-22.92141914 -144.15861511]
[-35.97871399 -150.42797852]
[-46.94755554 -159.86883545]
[-55.07752609 -171.82696533]
[-59.81459808 -185.47618103]
[-60.83888245 -199.87550354]
[-58.08624268 -214.03395081]
[-51.75224304 -226.97874451]
[-42.27828598 -237.82220459]
[-30.32085228 -245.82257080]
[-35.09815216 -260.04147339]
[-47.74525833 -270.48095703]
[-44.76148605 -286.60638428]
[-29.21628571 -291.82928467]
[-17.10122681 -280.77682495]
[-20.87924194 -264.81878662]
[-16.10194206 -250.59986877]
[-0.57379007 -251.34570312]
[14.55410194 -247.70198059]
[28.06485748 -239.95344543]
[38.86934280 -228.71536255]
[46.09395599 -214.88468933]
[49.15127182 -199.56845093]
[47.78778458 -183.99516296]
[42.10490799 -169.41627502]
[32.55149841 -157.00561523]
[19.88838387 -147.76489258]
[25.01868439 -133.66949463]
[30.14898682 -119.57410431]
[35.27928925 -105.47872162]
[46.90295792 -96.16530609]
[44.35221100 -80.55107880]
[49.48251343 -66.45568848]
[54.61281586 -52.36029816]
[59.74311447 -38.26490784]
[64.87342072 -24.16951752]
[78.05019379 -21.67268372]
[88.33692169 -12.89944363]
[92.95563507 -0.07749267]
[90.58910370 13.45419693]
[81.75424957 24.11478233]
[86.53154755 38.33369064]
[91.30884552 52.55260086]
[96.08615112 66.77151489]
[101.04033661 80.92976379]
[114.12760162 87.14826202]
[119.08330536 100.76395416]
[113.05505371 113.93993378]
[118.18535614 128.03532410]
[123.31565857 142.13070679]
[128.44596863 156.22610474]
[133.74061584 142.19161987]
[144.76452637 132.01943970]
[159.17857361 127.86791992]
[173.92433167 130.61796570]
[185.87295532 139.68605042]
[192.48915100 153.14808655]
[192.36903381 168.14759827]
[185.53810120 181.50193787]
[173.44578552 190.37751770]
[158.65788269 192.89106750]
[144.31216431 188.50924683]
[133.45268250 178.16198730]
[134.94619751 193.08744812]
[136.43971252 208.01290894]
[137.93324280 222.93836975]
[149.88215637 232.93142700]
[151.18417358 248.08923340]
[141.58367920 259.41912842]
[143.07720947 274.34457397]
[144.57072449 289.27005005]
[155.95646667 296.58786011]
[160.94288635 308.96017456]
[157.90365601 321.74804688]
[148.17720032 330.29602051]
[149.29815674 345.25408936]
[150.41909790 360.21215820]
[151.54005432 375.17019653]
[152.66101074 390.12826538]
[162.34100342 403.36569214]
[155.47044373 418.25619507]
[139.11714172 419.48171997]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 122]
[2 121]
[3 120]
[4 119]
[5 118]
[8 114]
[9 113]
[10 112]
[13 109]
[14 108]
[15 107]
[16 106]
[18 94]
[19 93]
[20 92]
[21 91]
[24 88]
[26 87]
[27 86]
[28 85]
[29 84]
[33 79]
[34 78]
[35 77]
[36 76]
[37 75]
[39 73]
[40 72]
[41 71]
[42 70]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
