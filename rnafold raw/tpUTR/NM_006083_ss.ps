%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 16:03:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACUAGUUACAACCAGAGAUGCUCCACAAGGAUAUGCUCCCCACUGUUUUCUUUCUACAAUUUCCAAAGGUUGCAAGAUGUUUUUUUGUGGAUGAAUAUAAAAUUUUAUUGUGUAAUUACUUGGUUCCAUUAAAAUUGGUUAACUUGCUA\
) } def
/len { sequence length } bind def

/coor [
[64.17406464 330.60040283]
[52.72927094 320.43795776]
[47.32897949 306.11679077]
[49.21413803 290.92782593]
[57.95155716 278.36135864]
[71.53343201 271.30508423]
[71.53343201 256.30508423]
[71.53343201 241.30506897]
[71.53343201 226.30506897]
[71.53343201 211.30506897]
[68.80414581 207.31593323]
[68.59513092 201.55696106]
[71.85625458 195.68840027]
[72.47612762 180.70121765]
[73.09600067 165.71403503]
[73.71587372 150.72685242]
[61.41872406 142.13731384]
[47.56053162 147.87756348]
[33.70233536 153.61781311]
[19.90420341 159.50097656]
[6.16760397 165.52639771]
[-7.56899595 171.55183411]
[-14.22212791 177.90473938]
[-21.65230942 177.55657959]
[-35.51050186 183.29682922]
[-49.36869431 189.03709412]
[-58.91715622 202.36972046]
[-75.20911407 200.49775696]
[-81.48479462 185.34690857]
[-71.28832245 172.50308228]
[-55.10894775 175.17889404]
[-41.25075531 169.43864441]
[-27.39256096 163.69839478]
[-13.59442711 157.81523132]
[0.14217262 151.78981018]
[13.87877274 145.76437378]
[18.77177620 140.16194153]
[27.96208572 139.75962830]
[41.82027817 134.01937866]
[55.67847061 128.27911377]
[52.10614777 120.01091766]
[50.03804016 111.36245728]
[49.49777603 102.60141754]
[50.46232224 93.99221802]
[52.86380768 85.78800964]
[56.59268570 78.22324371]
[44.38495255 69.50709534]
[32.17722321 60.79093933]
[17.88619804 66.60214996]
[2.72626567 63.74208069]
[-8.46509552 53.12337112]
[-12.11676311 38.13441467]
[-7.06350231 23.55812836]
[5.08220911 14.04575539]
[20.44471931 12.63265800]
[34.12190628 19.76975250]
[41.74942780 33.17961502]
[40.89337540 48.58320999]
[53.10110474 57.29936218]
[65.30883789 66.01551056]
[76.27192688 57.62783051]
[89.15206909 52.66349411]
[102.90864563 51.52359390]
[116.43022156 54.30021667]
[128.62435913 60.76903915]
[139.23095703 50.16243744]
[149.83755493 39.55583572]
[160.44416809 28.94923401]
[164.76287842 11.07875347]
[181.83598328 7.13770533]
[192.22111511 -3.68583655]
[202.60624695 -14.50937843]
[212.99136353 -25.33292007]
[223.37649536 -36.15646362]
[233.76162720 -46.98000336]
[244.14675903 -57.80354691]
[248.11820984 -73.11818695]
[262.51281738 -76.94493866]
[272.89794922 -87.76847839]
[283.28308105 -98.59202576]
[293.66821289 -109.41556549]
[291.07394409 -124.60028839]
[297.83926392 -138.24154663]
[311.18200684 -145.20109558]
[325.88827515 -142.99581909]
[336.27340698 -153.81935120]
[346.65853882 -164.64289856]
[357.04367065 -175.46643066]
[367.42880249 -186.28997803]
[377.81393433 -197.11352539]
[388.19906616 -207.93705750]
[387.62191772 -223.73080444]
[398.44268799 -235.24975586]
[414.24166870 -235.65989685]
[425.64556885 -224.71792603]
[425.88864136 -208.91551208]
[414.82672119 -197.62794495]
[399.02261353 -197.55192566]
[388.63748169 -186.72839355]
[378.25234985 -175.90484619]
[367.86721802 -165.08131409]
[357.48208618 -154.25776672]
[347.09695435 -143.43421936]
[336.71182251 -132.61068726]
[339.52297974 -118.00809479]
[333.12072754 -104.38916016]
[319.77072144 -97.06587982]
[304.49176025 -99.03043365]
[294.10662842 -88.20689392]
[283.72149658 -77.38335419]
[273.33636475 -66.55980682]
[270.10775757 -52.01934052]
[254.97030640 -47.41841507]
[244.58517456 -36.59487534]
[234.20004272 -25.77133179]
[223.81491089 -14.94779015]
[213.42977905 -4.12424803]
[203.04464722 6.69929409]
[192.65951538 17.52283669]
[192.58460999 29.65869141]
[183.96595764 38.76440048]
[171.05076599 39.55583572]
[160.44416809 50.16243744]
[149.83755493 60.76903915]
[139.23095703 71.37564087]
[144.12588501 78.99066162]
[147.54806519 87.43327332]
[149.35955811 96.41960907]
[149.47700500 105.64322662]
[147.87518311 114.78559113]
[144.58856201 123.52706146]
[139.71093750 131.55805969]
[133.39276123 138.59001160]
[125.83666992 144.36575317]
[117.29091644 148.66883850]
[108.04131317 151.33163452]
[98.40164948 152.24177551]
[88.70306396 151.34672546]
[88.08318329 166.33390808]
[87.46331024 181.32109070]
[86.84343719 196.30827332]
[86.53343201 211.30506897]
[86.53343201 226.30506897]
[86.53343201 241.30506897]
[86.53343201 256.30508423]
[86.53343201 271.30508423]
[100.11531067 278.36135864]
[108.85272980 290.92782593]
[110.73789215 306.11679077]
[105.33760071 320.43795776]
[93.89279938 330.60040283]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[13 141]
[14 140]
[15 139]
[16 138]
[17 40]
[18 39]
[19 38]
[20 36]
[21 35]
[22 34]
[24 33]
[25 32]
[26 31]
[46 60]
[47 59]
[48 58]
[65 125]
[66 124]
[67 123]
[68 122]
[70 119]
[71 118]
[72 117]
[73 116]
[74 115]
[75 114]
[76 113]
[78 111]
[79 110]
[80 109]
[81 108]
[85 104]
[86 103]
[87 102]
[88 101]
[89 100]
[90 99]
[91 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
