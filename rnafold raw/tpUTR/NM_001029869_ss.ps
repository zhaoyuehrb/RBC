%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 04:22:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCAAGAUAACUCCUCCUCCUUACUCCCCAACACCCUCCUCUCAAACCUCUCAGUGGAACAAUUGCUUUUUCCUAAGUUUUUACUGAAAUGGUAUGAAAAUAAAUGAUUUCCCCCCUA\
) } def
/len { sequence length } bind def

/coor [
[16.88361359 472.94421387]
[2.57412982 477.48110962]
[-12.10182285 480.63723755]
[-27.01133347 482.38403320]
[-42.01937485 482.70565796]
[-56.99002838 481.59918213]
[-71.78771973 479.07467651]
[-86.27842712 475.15496826]
[-100.33092499 469.87554932]
[-113.81793976 463.28427124]
[-126.61734009 455.44079590]
[-138.61318970 446.41613770]
[-149.69688416 436.29208374]
[-159.76800537 425.16027832]
[-168.73538208 413.12155151]
[-176.51777649 400.28491211]
[-183.04472351 386.76663208]
[-188.25709534 372.68914795]
[-192.10771179 358.17993164]
[-194.56167603 343.37036133]
[-195.59678650 328.39462280]
[-195.20364380 313.38827515]
[-193.38581848 298.48724365]
[-190.15979004 283.82650757]
[-185.55476379 269.53881836]
[-179.61242676 255.75355530]
[-172.38661194 242.59556580]
[-163.94276428 230.18403625]
[-154.35734558 218.63134766]
[-143.71717834 208.04214478]
[-132.11859131 198.51231384]
[-119.66665649 190.12815857]
[-106.47412872 182.96562195]
[-92.66049194 177.08955383]
[-78.35083771 172.55317688]
[-63.67477417 169.39758301]
[-48.76519775 167.65133667]
[-33.75714493 167.33026123]
[-18.78653145 168.43727112]
[-3.98893452 170.96232605]
[10.50163078 174.88256836]
[24.55393410 180.16247559]
[38.04071045 186.75425720]
[45.87818909 173.96466064]
[53.71566772 161.17506409]
[53.76851654 146.28054810]
[67.57621765 138.55668640]
[75.41369629 125.76708984]
[83.25117493 112.97748566]
[79.01343536 97.08409119]
[87.42353058 82.94800568]
[103.41299438 79.08852386]
[110.91299438 66.09814453]
[118.41299438 53.10776520]
[125.91299438 40.11738205]
[133.41299438 27.12700081]
[140.91299438 14.13662052]
[148.41299438 1.14623928]
[155.91299438 -11.84414196]
[163.41299438 -24.83452225]
[148.42468262 -24.24223518]
[138.41537476 -35.41424179]
[140.64465332 -50.24766159]
[153.49566650 -57.98404312]
[167.64776611 -53.01231384]
[172.83662415 -38.93798828]
[181.96804810 -50.83828735]
[191.09947205 -62.73859024]
[200.23089600 -74.63888550]
[197.91978455 -90.27328491]
[207.40773010 -102.91268921]
[223.06568909 -105.05836487]
[235.60406494 -95.43732452]
[237.58407593 -79.75756073]
[227.83100891 -67.32159424]
[212.13119507 -65.50746918]
[202.99977112 -53.60716629]
[193.86834717 -41.70686722]
[184.73692322 -29.80656624]
[176.40336609 -17.33452225]
[168.90336609 -4.34414196]
[161.40336609 8.64623928]
[153.90336609 21.63661957]
[146.40336609 34.62700272]
[138.90336609 47.61738205]
[131.40336609 60.60776520]
[123.90337372 73.59814453]
[116.40337372 86.58852386]
[121.12963104 98.42616272]
[118.20924377 110.83335876]
[108.69907379 119.32005310]
[96.04077911 120.81496429]
[88.20330048 133.60456848]
[80.36582184 146.39416504]
[79.75238800 162.20347595]
[66.50527191 169.01254272]
[58.66779327 181.80213928]
[50.83031464 194.59173584]
[62.82650375 203.61593628]
[73.91056061 213.73960876]
[83.98209381 224.87104797]
[92.94990540 236.90943909]
[100.73276520 249.74578857]
[107.26020050 263.26382446]
[112.47309113 277.34112549]
[116.32423401 291.85021973]
[118.77873993 306.65966797]
[119.81439209 321.63540649]
[119.42179871 336.64175415]
[117.60452271 351.54284668]
[114.37902832 366.20370483]
[109.77451324 380.49157715]
[103.83268738 394.27703857]
[96.60735321 407.43530273]
[88.16395569 419.84713745]
[78.57896423 431.40017700]
[67.93916321 441.98974609]
[56.34093475 451.52001953]
[43.88930511 459.90463257]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[43 98]
[44 97]
[45 96]
[47 94]
[48 93]
[49 92]
[52 88]
[53 87]
[54 86]
[55 85]
[56 84]
[57 83]
[58 82]
[59 81]
[60 80]
[66 79]
[67 78]
[68 77]
[69 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
