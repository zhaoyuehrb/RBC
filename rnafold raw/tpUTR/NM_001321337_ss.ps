%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 06:57:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGUGAUAAAAGGAAGUUUAGCAUAAAUUAUAGCAGUUUUCUGUUAUUGCUUAAUUUACCAUCUCCAUAGUUUUAUAGCUACUAUUGUAUUUCACUUGUUGAAUUAAAGUAUUUGAAUUCUUUUAAAUGUGGAA\
) } def
/len { sequence length } bind def

/coor [
[164.61843872 133.07644653]
[150.63136292 127.65782928]
[136.64427185 122.23920441]
[122.65719604 116.82057953]
[108.67011261 111.40195465]
[94.82559204 113.35668182]
[85.91126251 102.58512878]
[71.92417908 97.16650391]
[57.93709564 91.74787903]
[43.95001221 86.32925415]
[29.96292877 80.91062927]
[15.97584629 75.49200439]
[1.45749497 71.72139740]
[-13.39866161 69.64904785]
[-28.27776146 67.74842834]
[-43.17782211 66.01978302]
[-58.07788086 64.29113770]
[-72.97794342 62.56248856]
[-87.87799835 60.83384323]
[-102.47789764 66.92921448]
[-114.22869873 57.77673721]
[-129.12875366 56.04809189]
[-144.02882385 54.31944275]
[-158.92887878 52.59079742]
[-150.98751831 65.31616211]
[-154.16213989 79.97637177]
[-166.65647888 88.27646637]
[-181.40104675 85.52011871]
[-190.05316162 73.26692200]
[-187.71731567 58.44990921]
[-175.71543884 49.45284653]
[-190.23379517 45.68223953]
[-204.75213623 41.91163254]
[-219.27049255 38.14102554]
[-233.78884888 34.37041473]
[-248.30718994 30.59980965]
[-262.82553101 26.82920074]
[-278.48007202 31.71463394]
[-290.35324097 20.40267944]
[-286.23092651 4.53010702]
[-270.35382080 0.42525873]
[-259.05493164 12.31085014]
[-244.53659058 16.08145714]
[-230.01823425 19.85206604]
[-215.49987793 23.62267303]
[-200.98153687 27.39328003]
[-186.46318054 31.16388702]
[-171.94482422 34.93449402]
[-157.20024109 37.69073868]
[-142.30017090 39.41938400]
[-127.40011597 41.14803314]
[-112.50005341 42.87667847]
[-98.96591187 36.65765762]
[-86.14935303 45.93378448]
[-71.24929810 47.66242981]
[-56.34923553 49.39107513]
[-41.44917679 51.11972427]
[-26.54911613 52.84836960]
[-19.47896767 50.47316360]
[-11.32631588 54.79289627]
[3.52984023 56.86524200]
[-6.60928535 45.81091309]
[-10.01166630 31.20188141]
[-5.79994678 16.80530548]
[4.93981695 6.33355904]
[19.43821526 2.48694086]
[33.95661545 6.25735998]
[44.75122833 16.67255592]
[49.03850174 31.04681396]
[45.71289444 45.67351532]
[35.63196564 56.78094101]
[21.39447021 61.50492096]
[35.38155365 66.92354584]
[49.36863708 72.34217072]
[63.35572052 77.76079559]
[77.34280396 83.17942047]
[91.32988739 88.59804535]
[105.17440796 86.64331818]
[114.08873749 97.41487122]
[128.07582092 102.83349609]
[142.06289673 108.25212097]
[156.04998779 113.67074585]
[170.03706360 119.08937073]
[175.59103394 114.64511871]
[182.21636963 112.20257568]
[189.22215271 111.98144531]
[195.88873291 113.97160339]
[201.54167175 117.93742371]
[205.61999512 123.44521332]
[207.73171997 129.91046143]
[207.69146729 136.65975952]
[220.79580688 143.95881653]
[233.90013123 151.25788879]
[247.00447083 158.55696106]
[260.10879517 165.85601807]
[273.21313477 173.15509033]
[286.40090942 180.30232239]
[299.67034912 187.29675293]
[315.60644531 178.80593872]
[333.30517578 181.48849487]
[345.78982544 194.09843445]
[348.25173950 211.51399231]
[361.83004761 217.88813782]
[375.40835571 224.26228333]
[388.98666382 230.63642883]
[402.56497192 237.01057434]
[415.12277222 228.16766357]
[430.42105103 226.80438232]
[444.34460449 233.28741455]
[453.14810181 245.87289429]
[454.46343994 261.17535400]
[447.93676758 275.07852173]
[435.32379150 283.84252930]
[420.01727295 285.10989380]
[406.13461304 278.53970337]
[397.41018677 265.89929199]
[396.19082642 250.58886719]
[382.61251831 244.21472168]
[369.03421021 237.84057617]
[355.45590210 231.46643066]
[341.87759399 225.09228516]
[332.14288330 232.51266479]
[320.09860229 235.07041931]
[308.04727173 232.21318054]
[298.32000732 224.42984009]
[292.82553101 213.16827393]
[292.67590332 200.56619263]
[279.40646362 193.57174683]
[271.95571899 193.23252869]
[265.91409302 186.25942993]
[252.80973816 178.96035767]
[239.70541382 171.66128540]
[226.60107422 164.36222839]
[213.49673462 157.06315613]
[200.39239502 149.76408386]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 83]
[2 82]
[3 81]
[4 80]
[5 79]
[7 77]
[8 76]
[9 75]
[10 74]
[11 73]
[12 72]
[13 61]
[14 60]
[15 58]
[16 57]
[17 56]
[18 55]
[19 54]
[21 52]
[22 51]
[23 50]
[24 49]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
[91 135]
[92 134]
[93 133]
[94 132]
[95 131]
[96 130]
[97 128]
[98 127]
[102 121]
[103 120]
[104 119]
[105 118]
[106 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
