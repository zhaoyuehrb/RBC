%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 16:03:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCCUGAGGCAUCCUGGGUCUCACUCGGCCCCCAAAAACUGAUAAAAGAAUAAAACACUUAAAUGAAUAACAA\
) } def
/len { sequence length } bind def

/coor [
[170.64993286 94.15804291]
[155.91563416 96.96876526]
[141.18132019 99.77948761]
[126.44701385 102.59020233]
[111.71269989 105.40092468]
[97.18395233 109.13127136]
[82.91810608 113.76652527]
[68.65225983 118.40177917]
[54.38640976 123.03703308]
[40.12056351 127.67229462]
[25.85471535 132.30754089]
[20.16492271 146.87327576]
[6.41890097 154.32853699]
[-8.89289761 151.15318298]
[-18.54071045 138.84652710]
[-17.96913528 123.21939087]
[-7.44805288 111.65043640]
[8.05480385 109.60215759]
[21.21945953 118.04170227]
[35.48530960 113.40644073]
[49.75115585 108.77118683]
[64.01700592 104.13593292]
[78.28285217 99.50067902]
[92.54869843 94.86542511]
[94.89463043 91.38830566]
[98.87342072 89.08446503]
[103.86148834 88.70616150]
[108.90198517 90.66661835]
[123.63629150 87.85589600]
[138.37060547 85.04517365]
[153.10490417 82.23445892]
[167.83921814 79.42373657]
[167.10359192 64.41690826]
[168.46376038 49.45374680]
[171.89323425 34.82552719]
[177.32525635 20.81698227]
[184.65409851 7.70079994]
[193.73709106 -4.26771307]
[204.39744568 -14.85558605]
[216.42764282 -23.85672379]
[229.59352112 -31.09591293]
[243.63879395 -36.43224716]
[258.29006958 -39.76184464]
[273.26214600 -41.01990128]
[288.26361084 -40.18192291]
[303.00244141 -37.26422501]
[317.19174194 -32.32360077]
[330.55532837 -25.45621681]
[342.83306885 -16.79575539]
[353.78594971 -6.51079082]
[363.20077515 5.19847631]
[370.89431763 18.10412216]
[376.71676636 31.95493317]
[380.55484009 46.48130035]
[382.33380127 61.40046310]
[382.01904297 76.42201233]
[379.61666870 91.25356293]
[375.17343140 105.60639191]
[368.77584839 119.20113373]
[360.54843140 131.77316284]
[350.65133667 143.07775879]
[339.27722168 152.89486694]
[326.64749146 161.03340149]
[313.00796509 167.33493042]
[298.62414551 171.67681885]
[283.77603149 173.97453308]
[268.75262451 174.18334961]
[253.84638977 172.29919434]
[239.34744263 168.35876465]
[225.53805542 162.43873596]
[212.68698120 154.65437317]
[201.04441833 145.15718079]
[190.83695984 134.13203430]
[182.26330566 121.79352570]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[3 30]
[4 29]
[5 28]
[6 24]
[7 23]
[8 22]
[9 21]
[10 20]
[11 19]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
