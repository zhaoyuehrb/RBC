%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 02:02:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGGUGAACGUGUCACACUUGUGUGGUAGGACCUUGAAGUCUAAGUUGCUUUCCUGAGUAUUCUUUUCCUGCUUGUGAUAGUCAACAACUGAAACCCCUCAGCCAUGCCCUGAAAUAAAGGUCCCGGAUGCCUGUGACUCCUCAGGAUCAUACAGUUAA\
) } def
/len { sequence length } bind def

/coor [
[112.40293884 295.70471191]
[105.73524475 300.52935791]
[97.96858978 303.14816284]
[89.80856323 303.34442139]
[84.06831360 317.20260620]
[78.32805634 331.06079102]
[72.58780670 344.91900635]
[77.37409210 360.23144531]
[68.26754761 373.43939209]
[52.25393295 374.41085815]
[41.61752319 362.40060425]
[44.51766586 346.62185669]
[58.72961426 339.17874146]
[64.46986389 325.32055664]
[70.21012115 311.46234131]
[75.95037079 297.60415649]
[65.44953918 278.38265991]
[72.52941895 257.36880493]
[93.01690674 248.19857788]
[97.08851624 233.76174927]
[101.16011810 219.32492065]
[105.23172760 204.88809204]
[109.30333710 190.45126343]
[113.37493896 176.01443481]
[117.44654846 161.57760620]
[121.51815796 147.14077759]
[125.58975983 132.70394897]
[91.28149414 135.19380188]
[71.71843719 112.66909790]
[56.95204163 115.30603790]
[42.18564224 117.94298553]
[27.41924477 120.57992554]
[18.58929825 133.68746948]
[3.06138086 136.63014221]
[-9.95207119 127.66210175]
[-12.73040581 112.10394287]
[-3.62528777 99.18603516]
[11.96137905 96.57234192]
[24.78230095 105.81352997]
[39.54869843 103.17658234]
[54.31509781 100.53964233]
[69.08149719 97.90269470]
[70.37143707 90.91701508]
[73.21826935 84.40861511]
[77.47239685 78.71949768]
[69.38532257 66.08624268]
[61.29824829 53.45298004]
[53.21117401 40.81972122]
[45.00046539 28.26646614]
[36.66691208 15.79442215]
[22.56661606 8.61861229]
[21.92905235 -6.26234102]
[13.59549904 -18.73438454]
[-0.50479585 -25.91019630]
[-1.14235914 -40.79114914]
[-9.47591305 -53.26319504]
[-17.80946541 -65.73523712]
[-26.14302063 -78.20728302]
[-34.47657394 -90.67932892]
[-42.81012726 -103.15136719]
[-58.23285294 -102.77320099]
[-71.39984131 -110.81273651]
[-78.10954285 -124.70458221]
[-76.22092438 -140.01589966]
[-66.33663177 -151.86091614]
[-51.61071396 -156.45991516]
[-36.74214935 -152.34538269]
[-26.47545052 -140.83024597]
[-24.08667755 -125.58894348]
[-30.33808327 -111.48492432]
[-22.00452805 -99.01287842]
[-13.67097569 -86.54083252]
[-5.33742189 -74.06879425]
[2.99613142 -61.59674835]
[11.32968521 -49.12470245]
[24.83390808 -42.84097672]
[26.06754303 -27.06793976]
[34.40109634 -14.59589481]
[47.90531921 -8.31216812]
[49.13895416 7.46086931]
[57.47250748 19.93291283]
[63.83646011 23.76722336]
[65.84443665 32.73264694]
[73.93151093 45.36590576]
[82.01858521 57.99916458]
[90.10565948 70.63242340]
[104.25579071 65.76187897]
[120.58695221 68.04354095]
[135.40469360 78.29996490]
[143.98152161 65.99394226]
[152.55833435 53.68792343]
[161.13516235 41.38190079]
[158.11044312 25.86975670]
[167.00955200 12.80907822]
[182.55281067 9.94853497]
[195.51867676 18.98523712]
[198.21472168 34.55786896]
[189.04144287 47.42746353]
[173.44117737 49.95872116]
[164.86436462 62.26474380]
[156.28753662 74.57076263]
[147.71072388 86.87678528]
[150.16793823 93.96282959]
[159.98403931 82.62068176]
[174.71469116 85.45050812]
[179.62940979 99.62250519]
[169.81352234 110.96483612]
[155.08239746 108.13491821]
[157.53962708 115.22097015]
[171.89372253 119.57523346]
[186.24783325 123.92950439]
[200.60194397 128.28378296]
[214.95603943 132.63804626]
[221.90646362 125.70276642]
[230.86404419 121.82591248]
[240.56129456 121.50955963]
[249.64302063 124.75523376]
[256.85568237 131.06962585]
[261.22045898 139.53910828]
[262.16586304 148.96166992]
[276.13409424 154.42872620]
[290.10232544 159.89578247]
[304.07055664 165.36285400]
[319.74148560 163.18751526]
[328.77328491 175.03131104]
[342.74151611 180.49838257]
[356.70974731 185.96543884]
[372.83346558 182.97247314]
[383.28015137 195.61363220]
[377.30313110 210.88476562]
[361.05108643 213.07624817]
[351.24267578 199.93365479]
[337.27447510 194.46659851]
[323.30624390 188.99954224]
[308.63439941 191.56591797]
[298.60348511 179.33106995]
[284.63525391 173.86401367]
[270.66702271 168.39695740]
[256.69882202 162.92990112]
[238.80471802 172.71739197]
[219.19499207 166.12916565]
[210.60177612 146.99215698]
[196.24766541 142.63787842]
[181.89356995 138.28361511]
[167.53945923 133.92933655]
[153.18534851 129.57507324]
[140.02659607 136.77555847]
[135.95498657 151.21238708]
[131.88337708 165.64921570]
[127.81176758 180.08604431]
[123.74016571 194.52287292]
[119.66855621 208.95970154]
[115.59694672 223.39653015]
[111.52534485 237.83335876]
[107.45373535 252.27018738]
[113.85924530 257.75592041]
[118.33115387 264.86614990]
[120.48390961 272.95016479]
[120.14316559 281.27502441]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 16]
[5 15]
[6 14]
[7 13]
[19 155]
[20 154]
[21 153]
[22 152]
[23 151]
[24 150]
[25 149]
[26 148]
[27 147]
[29 42]
[30 41]
[31 40]
[32 39]
[45 86]
[46 85]
[47 84]
[48 83]
[49 81]
[50 80]
[52 78]
[53 77]
[55 75]
[56 74]
[57 73]
[58 72]
[59 71]
[60 70]
[89 102]
[90 101]
[91 100]
[92 99]
[109 146]
[110 145]
[111 144]
[112 143]
[113 142]
[120 139]
[121 138]
[122 137]
[123 136]
[125 134]
[126 133]
[127 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
