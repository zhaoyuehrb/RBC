%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 07:37:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGAGGGUGUGGUGGGUUCUCCACUCCACUGCCACCCCCAGCGUGGCUGCUUUCAAGUUCUUUGCAAUUAAAGGUUCUGUAUAAAACCAAGA\
) } def
/len { sequence length } bind def

/coor [
[78.92226410 111.93759918]
[64.22283936 114.92539215]
[49.52341080 117.91317749]
[34.82398605 120.90097046]
[26.08399200 133.79476929]
[11.13412285 136.61541748]
[-1.10429013 128.20370483]
[-15.80371571 131.19149780]
[-30.50314140 134.17929077]
[-45.15058899 137.41229248]
[-59.74197006 140.88958740]
[-74.33335114 144.36689758]
[-88.92472839 147.84419250]
[-100.55530548 158.56988525]
[-114.72953033 153.99378967]
[-129.26077271 157.71443176]
[-143.72779846 161.67735291]
[-154.86798096 173.71183777]
[-170.79814148 169.81803894]
[-175.13072205 154.00157166]
[-163.40872192 142.53305054]
[-147.69073486 147.21032715]
[-133.22369385 143.24739075]
[-127.48913574 138.34518433]
[-118.20683289 139.40240479]
[-107.61993408 128.92544556]
[-92.40203094 133.25282288]
[-77.81065369 129.77551270]
[-63.21927261 126.29821014]
[-48.62789154 122.82090759]
[-42.73272324 118.11306763]
[-33.49093246 119.47986603]
[-18.79150581 116.49207306]
[-4.09207964 113.50428772]
[3.89137292 100.98229980]
[18.75611877 97.74285889]
[31.83619690 106.20154572]
[46.53562164 103.21375275]
[61.23504639 100.22595978]
[75.93447113 97.23817444]
[89.53372192 74.10552216]
[120.09608459 75.56690979]
[126.86123657 62.17913055]
[133.62638855 48.79134750]
[132.94471741 32.98483276]
[145.59053040 25.11510468]
[152.35568237 11.72732162]
[149.07096863 -0.88204229]
[155.14071655 -11.95404816]
[166.77011108 -15.71709156]
[173.97883606 -28.87133980]
[181.18756104 -42.02558899]
[180.28144836 -58.39968491]
[194.15493774 -67.14373016]
[208.53617859 -59.26259613]
[208.63096619 -42.86372375]
[194.34181213 -34.81686401]
[187.13308716 -21.66261482]
[179.92436218 -8.50836563]
[181.34811401 8.89536381]
[165.74346924 18.49247360]
[158.97831726 31.88025665]
[160.14387512 46.72918701]
[147.01417542 55.55649948]
[140.24902344 68.94428253]
[133.48387146 82.33206177]
[142.58700562 70.41011810]
[157.08316040 66.55503845]
[170.90591431 72.38011932]
[178.27067566 85.44764709]
[176.09539795 100.28907776]
[165.29042053 110.69351959]
[150.37744141 112.30687714]
[137.59648132 104.45301056]
[148.72126770 114.51478577]
[159.84605408 124.57655334]
[170.97082520 134.63832092]
[186.12770081 131.31430054]
[200.33013916 137.56492615]
[208.11703491 150.98669434]
[206.49415588 166.41867065]
[196.08554077 177.92694092]
[180.89350891 181.08634949]
[166.75970459 174.68202209]
[159.11886597 161.17657471]
[160.90905762 145.76310730]
[149.78427124 135.70133972]
[138.65950012 125.63956451]
[127.53471375 115.57779694]
[119.67823792 123.17230225]
[110.05908203 127.37547302]
[100.00644684 127.92967987]
[90.80466461 125.06053162]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[4 37]
[7 34]
[8 33]
[9 32]
[10 30]
[11 29]
[12 28]
[13 27]
[15 25]
[16 23]
[17 22]
[42 66]
[43 65]
[44 64]
[46 62]
[47 61]
[50 59]
[51 58]
[52 57]
[74 89]
[75 88]
[76 87]
[77 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
