%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 10:40:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCAAAGAGGUGGACAGGAUAACACAGAUAAGGGCUUUAUUGUACAAUAAAAGAUAUGUAUGAAUGCAUCAGUAGCUGAA\
) } def
/len { sequence length } bind def

/coor [
[132.48196411 181.38816833]
[125.74997711 167.98368835]
[119.01799011 154.57919312]
[112.28600311 141.17469788]
[101.91754150 142.92581177]
[91.43424988 142.10617065]
[81.46393585 138.76489258]
[72.60371399 133.10205078]
[65.38420105 125.45679474]
[60.23775482 116.28698730]
[45.57774734 119.46253967]
[30.91773796 122.63809967]
[26.30473900 137.28787231]
[14.97403908 147.65661621]
[-0.02646086 150.95518494]
[-14.66170120 146.29629517]
[-24.99487495 134.93315125]
[-28.24641228 119.92237854]
[-23.54166412 105.30181122]
[-12.14618587 95.00431061]
[2.87469792 91.79984283]
[17.48044395 96.55039215]
[27.74217987 107.97809601]
[42.40218735 104.80253601]
[57.06219482 101.62697601]
[57.31303406 95.08828735]
[58.55382156 88.66349792]
[60.75578308 82.50161743]
[63.86785126 76.74553680]
[67.81785583 71.52875519]
[72.51419830 66.97224426]
[77.84796143 63.18167114]
[83.69544983 60.24495316]
[89.92105103 58.23019028]
[96.38039398 57.18410873]
[102.92368317 57.13096619]
[109.39916229 58.07199097]
[115.65666962 59.98537064]
[121.55108643 62.82672119]
[126.94571686 66.53015137]
[138.24725342 56.66733551]
[149.54879761 46.80451202]
[160.85032654 36.94169235]
[172.15187073 27.07887268]
[183.45339966 17.21605110]
[194.75494385 7.35323143]
[191.71640015 -7.70209503]
[196.62782288 -22.25453568]
[208.16804504 -32.38956070]
[223.23283386 -35.38089371]
[237.76980591 -30.42388344]
[247.86860657 -18.85194397]
[250.81269836 -3.77786422]
[245.81015015 10.74350166]
[234.20661926 20.80597878]
[219.12338257 23.70281410]
[204.61776733 18.65476990]
[193.31622314 28.51758957]
[182.01469421 38.38040924]
[170.71315002 48.24323273]
[159.41160583 58.10605240]
[148.11007690 67.96887207]
[136.80853271 77.83169556]
[142.16317749 108.28057861]
[125.69049072 134.44271851]
[132.42248535 147.84719849]
[139.15446472 161.25169373]
[145.88645935 174.65618896]
[153.13314819 187.78955078]
[160.88363647 200.63206482]
[168.63412476 213.47456360]
[176.38461304 226.31706238]
[189.74536133 236.75387573]
[183.41505432 252.48165894]
[166.54949951 250.75263977]
[163.54211426 234.06756592]
[155.79162598 221.22505188]
[148.04113770 208.38255310]
[140.29063416 195.54005432]
[135.70372009 193.50703430]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 68]
[2 67]
[3 66]
[4 65]
[10 25]
[11 24]
[12 23]
[40 63]
[41 62]
[42 61]
[43 60]
[44 59]
[45 58]
[46 57]
[69 79]
[70 78]
[71 77]
[72 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
