%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:10:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAACAGGUCCAACCCUAAGUGAGACAUGUUUCUCCAGGAUGCCAAAGGAAAUGCUACCUCGUGGCUACACAUAUUAUGAAUAAAUGAGGAAGGGCCUGAAAGUGACACACAGGCCUGCAUGU\
) } def
/len { sequence length } bind def

/coor [
[104.20553589 128.29856873]
[93.63631439 127.89263153]
[83.93689728 123.67429352]
[72.55552673 133.44488525]
[61.17415619 143.21546936]
[49.79278183 152.98605347]
[44.36165619 167.84584045]
[29.66486931 170.26530457]
[18.28349686 180.03588867]
[6.90212584 189.80647278]
[5.55118895 205.32461548]
[-6.13032627 215.07125854]
[-20.91617775 213.68771362]
[-32.29755020 223.45829773]
[-34.94456482 239.28146362]
[-49.03546143 246.95129395]
[-63.76091003 240.58413696]
[-67.82480621 225.06433105]
[-58.10967636 212.29734802]
[-42.06813812 212.07691956]
[-30.68676376 202.30633545]
[-29.81536674 187.48147583]
[-18.41222191 177.41058350]
[-2.86846137 178.42510986]
[8.51291084 168.65451050]
[19.89428139 158.88392639]
[24.51133919 144.72299194]
[40.02219772 141.60467529]
[51.40356827 131.83409119]
[62.78493881 122.06350708]
[74.16631317 112.29292297]
[71.95365906 105.64784241]
[71.42183685 98.66428375]
[72.60272980 91.76077271]
[59.87306213 83.82631683]
[47.14339828 75.89185333]
[27.06366158 76.23431396]
[18.49226189 58.97678757]
[5.37706232 51.69725800]
[-11.40612984 49.29709244]
[-13.74581337 32.50535965]
[1.74200058 25.60869789]
[12.65659237 38.58205795]
[25.77179146 45.86158752]
[35.44011307 42.14642334]
[45.75916290 44.47521210]
[53.19953918 52.30283356]
[55.07786179 63.16218948]
[67.80752563 71.09664917]
[80.53718567 79.03111267]
[103.25467682 71.57637787]
[123.69902039 83.97339630]
[137.89276123 79.12182617]
[152.08650208 74.27025604]
[166.28024292 69.41868591]
[160.93562317 51.12445450]
[170.58178711 36.22686005]
[186.86645508 33.99119949]
[195.43548584 21.67974854]
[204.00450134 9.36829567]
[212.57353210 -2.94315553]
[221.14254761 -15.25460720]
[229.71157837 -27.56605911]
[220.09786987 -39.20561218]
[213.98202515 -53.00775146]
[211.81790161 -67.94827271]
[213.76606750 -82.91847992]
[219.68196106 -96.80749512]
[229.12658691 -108.58465576]
[241.39910889 -117.37602234]
[255.58879089 -122.52920532]
[270.64270020 -123.66181946]
[285.44369507 -120.68981171]
[298.89346313 -113.83371735]
[309.99395752 -103.60231781]
[317.92144775 -90.75483704]
[322.08761597 -76.24465179]
[322.18338013 -61.14851379]
[318.20156860 -46.58665466]
[310.43768311 -33.63965988]
[299.46783447 -23.26828575]
[286.10610962 -16.24215508]
[271.34399414 -13.08265400]
[256.27691650 -14.02423763]
[242.02302551 -18.99703598]
[233.45399475 -6.68558407]
[224.88497925 5.62586784]
[216.31594849 17.93731880]
[207.74693298 30.24877167]
[199.17790222 42.56022263]
[203.63240051 52.26618195]
[202.24121094 63.70199966]
[194.55543518 73.38439178]
[206.86689758 81.95341492]
[219.17834473 90.52243805]
[231.48979187 99.09146118]
[243.80123901 107.66048431]
[256.11270142 116.22950745]
[268.42416382 124.79853058]
[281.97457886 117.68205261]
[297.28009033 117.68952942]
[310.82357788 124.81922913]
[319.49282837 137.43281555]
[321.29574585 152.63175964]
[315.81802368 166.92347717]
[304.31838989 177.02381897]
[289.43936157 180.61180115]
[274.60006714 176.86294556]
[263.21044922 166.63870239]
[257.88778687 152.28852844]
[259.85513306 137.10998535]
[247.54367065 128.54095459]
[235.23222351 119.97193909]
[222.92077637 111.40291595]
[210.60931396 102.83389282]
[198.29786682 94.26486969]
[185.98641968 85.69584656]
[171.13180542 83.61242676]
[156.93806458 88.46399689]
[142.74432373 93.31556702]
[128.55058289 98.16713715]
[127.26535797 108.66577148]
[122.25346375 117.97995758]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 31]
[4 30]
[5 29]
[6 28]
[8 26]
[9 25]
[10 24]
[13 21]
[14 20]
[34 50]
[35 49]
[36 48]
[38 44]
[39 43]
[52 121]
[53 120]
[54 119]
[55 118]
[58 90]
[59 89]
[60 88]
[61 87]
[62 86]
[63 85]
[93 117]
[94 116]
[95 115]
[96 114]
[97 113]
[98 112]
[99 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
