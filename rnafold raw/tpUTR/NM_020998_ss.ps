%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:33:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCAGCCUUGAUGCCAUAUGCCUUGGGGAGGACAAAACUUCUUGUCAGACAUAAAGCCAUGUUUCCUCUUUAUGCCUGUA\
) } def
/len { sequence length } bind def

/coor [
[95.13599396 115.72232056]
[89.48569489 113.09600830]
[85.11472321 108.48044586]
[70.50929260 111.89825439]
[62.93135452 122.54090118]
[50.50817871 124.98123932]
[40.15133667 118.42737579]
[25.42571068 121.28324127]
[10.70008659 124.13910675]
[-4.02553844 126.99497223]
[-18.75116348 129.85084534]
[-33.47678757 132.70671082]
[-45.55141830 142.92991638]
[-59.51900101 137.75729370]
[-74.24462891 140.61315918]
[-84.37702942 153.05157471]
[-100.41706848 152.74089050]
[-110.06021118 139.91944885]
[-105.90904999 124.42275238]
[-91.14801025 118.13854980]
[-77.10049438 125.88754272]
[-62.37486649 123.03166962]
[-51.35351181 113.01274109]
[-36.33265305 117.98107910]
[-21.60702896 115.12521362]
[-6.88140488 112.26934814]
[7.84421968 109.41348267]
[22.56984520 106.55761719]
[37.29547119 103.70175171]
[49.74247360 91.48807526]
[67.09148407 97.29282379]
[81.69692230 93.87501526]
[90.32669830 81.60607910]
[88.60644531 66.70504761]
[86.88619232 51.80401611]
[85.16594696 36.90298462]
[72.62856293 27.28063583]
[70.65018463 11.60066223]
[80.40454865 -0.83428645]
[96.10456085 -2.64677644]
[108.43568420 7.23851061]
[110.08208466 22.95681000]
[100.06697845 35.18273163]
[101.78722382 50.08376312]
[103.50747681 64.98479462]
[105.22772980 79.88582611]
[115.83432770 90.49243164]
[130.73536682 92.21267700]
[145.63639832 93.93292999]
[160.23284912 87.82933044]
[171.98881531 96.97518921]
[186.88984680 98.69544220]
[201.79087830 100.41569519]
[216.69190979 102.13594055]
[231.59294128 103.85619354]
[246.49397278 105.57644653]
[261.39498901 107.29669952]
[269.96234131 94.61367035]
[283.44793701 87.37506866]
[298.75289917 87.24427032]
[312.36022949 94.25132751]
[321.14309692 106.78607178]
[323.08325195 121.96811676]
[317.73483276 136.30873108]
[306.32693481 146.51255798]
[291.48092651 150.23481750]
[276.60836792 146.62016296]
[265.12686157 136.49923706]
[259.67474365 122.19773102]
[244.77371216 120.47747803]
[229.87268066 118.75722504]
[214.97164917 117.03697205]
[200.07061768 115.31672668]
[185.16958618 113.59647369]
[170.26855469 111.87622070]
[156.73793030 118.10286713]
[143.91613770 108.83396149]
[129.01510620 107.11370850]
[114.11408234 105.39346313]
[111.39149475 110.43207550]
[106.90615845 114.19239044]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 32]
[4 31]
[7 29]
[8 28]
[9 27]
[10 26]
[11 25]
[12 24]
[14 22]
[15 21]
[33 46]
[34 45]
[35 44]
[36 43]
[47 79]
[48 78]
[49 77]
[51 75]
[52 74]
[53 73]
[54 72]
[55 71]
[56 70]
[57 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
