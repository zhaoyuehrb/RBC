%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 23:20:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAGUGUAAUAAACUCCAACCCACAUUCCCCAAACAUGUCAGGAAGGGCUGCGGAAAAAAGAUGUCCCUUUAAUAAAACGUUAUCAACAUAUAUCGUACACAAACUA\
) } def
/len { sequence length } bind def

/coor [
[94.72001648 228.37228394]
[93.42936707 213.06771851]
[99.97843933 199.17507935]
[112.60555267 190.43142700]
[111.29821777 175.48851013]
[109.99088287 160.54559326]
[108.68354797 145.60266113]
[96.91670990 145.73603821]
[85.64360809 142.92025757]
[75.58150482 137.41165161]
[67.35094452 129.63531494]
[61.43755341 120.15309906]
[58.16373062 109.62342834]
[57.67166138 98.75582886]
[59.91868591 88.26311493]
[46.51419449 81.53112793]
[33.10970688 74.79914093]
[15.51740837 81.49137115]
[-1.16692066 73.48229218]
[-6.75436068 56.16962051]
[-20.52760315 50.22842407]
[-34.30084229 44.28722382]
[-39.79633331 44.94900513]
[-44.47277069 43.48342896]
[-47.63199997 40.59852219]
[-48.97963333 37.18068314]
[-62.18265533 30.06167793]
[-75.38567352 22.94267082]
[-88.58869934 15.82366657]
[-108.57610321 17.46552277]
[-118.28974152 0.85293239]
[-131.88436890 -5.48634148]
[-148.16505432 -3.51881385]
[-157.79158020 -16.79518318]
[-150.86100769 -31.65785789]
[-134.50289917 -32.81739426]
[-125.54508972 -19.08095741]
[-111.95046997 -12.74168396]
[-102.51902771 -17.14223289]
[-92.01641846 -15.50752258]
[-84.04281616 -8.14835739]
[-81.46968842 2.62064528]
[-68.26667023 9.73965073]
[-55.06364822 16.85865593]
[-41.86063004 23.97766113]
[-28.35964775 30.51398468]
[-14.58640575 36.45518112]
[-0.81316417 42.39637756]
[8.78813076 35.90546036]
[20.45667076 34.91643143]
[31.23369980 39.79843521]
[38.32870102 49.41685486]
[39.84169388 61.39465332]
[53.24618530 68.12664032]
[66.65067291 74.85862732]
[80.96979523 62.82315826]
[99.10626984 58.24515152]
[117.42201996 62.04292679]
[126.02566528 49.75564575]
[134.62931824 37.46836472]
[143.23295593 25.18108559]
[140.24209595 9.66237736]
[149.16967773 -3.37885451]
[164.71914673 -6.20548010]
[177.66525269 2.85948730]
[180.32733154 18.43796349]
[171.12599182 31.28751564]
[155.52023315 33.78473282]
[146.91659546 46.07201385]
[138.31294250 58.35929108]
[129.70930481 70.64657593]
[135.02845764 76.05642700]
[139.35284424 82.43447876]
[142.50578308 89.59598541]
[144.34526062 97.32396698]
[144.76971436 105.37572479]
[143.72277832 113.49045563]
[141.19641113 121.39774323]
[155.13662720 126.93582916]
[169.07682800 132.47392273]
[184.75865173 130.37838745]
[193.73004150 142.26802063]
[207.67025757 147.80610657]
[221.61047363 153.34420776]
[236.02113342 146.85510254]
[250.76968384 152.53453064]
[257.10607910 167.01298523]
[251.27102661 181.70065308]
[236.72637939 187.88362122]
[222.10121155 181.89361572]
[216.07238770 167.28442383]
[202.13217163 161.74632263]
[188.19195557 156.20823669]
[173.50723267 158.69989014]
[163.53874207 146.41413879]
[149.59852600 140.87603760]
[135.65830994 135.33795166]
[123.62646484 144.29533386]
[124.93380737 159.23825073]
[126.24114227 174.18116760]
[127.54847717 189.12409973]
[141.50207520 195.54223633]
[150.36408997 208.08657837]
[151.75065613 223.38275146]
[145.28880310 237.31616211]
[132.71675110 246.13880920]
[117.41630554 247.47741699]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 101]
[5 100]
[6 99]
[7 98]
[15 55]
[16 54]
[17 53]
[20 48]
[21 47]
[22 46]
[26 45]
[27 44]
[28 43]
[29 42]
[31 38]
[32 37]
[58 71]
[59 70]
[60 69]
[61 68]
[78 97]
[79 96]
[80 95]
[82 93]
[83 92]
[84 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
