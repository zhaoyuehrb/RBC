%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:19:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUUAACUCGACAAUAUGGCCAGCUAAUGAAAUUAAAAAGGAUUCUUCAUCAUGGAUUUCGCCUAAGUGAUAUUACAGCCACCUCAUUCUUCUAAAAGUGGAUAUUUUUCUGUAAAUAGCUGGAAAUAUUAUAAAUCACUAUUUUGGUCAAAGUCAA\
) } def
/len { sequence length } bind def

/coor [
[145.31884766 404.41732788]
[135.73590088 416.25317383]
[122.16442871 423.16220093]
[106.95577240 423.94744873]
[92.74491882 418.47283936]
[81.99398804 407.68685913]
[76.56564331 393.45825195]
[77.40037537 378.25222778]
[84.35356140 364.70330811]
[96.22052765 355.15893555]
[110.94524384 351.27273560]
[113.30639648 336.45971680]
[115.66754913 321.64672852]
[114.77893829 306.67306519]
[110.68238068 292.24331665]
[106.58582306 277.81353760]
[102.48925781 263.38375854]
[98.39270020 248.95401001]
[85.30006409 241.94554138]
[80.94001770 227.37005615]
[88.37990570 213.68482971]
[84.28334808 199.25505066]
[80.18678284 184.82528687]
[76.09022522 170.39552307]
[71.99366760 155.96575928]
[67.89710236 141.53598022]
[63.80054474 127.10621643]
[67.27007294 141.69944763]
[65.07137299 156.53742981]
[57.51898575 169.49742126]
[45.69337082 178.72535706]
[31.28631020 182.90107727]
[16.35889626 181.42718506]
[3.04666495 174.51455688]
[-6.74592113 163.15209961]
[-11.61792278 148.96536255]
[-10.87234497 133.98390198]
[-4.61585236 120.35099030]
[6.25649500 110.01696777]
[20.18928528 104.46022797]
[35.18927765 104.47573090]
[49.11204910 110.06221771]
[35.44527054 103.88004303]
[21.77849197 97.69787598]
[8.11171532 91.51570892]
[-5.55506134 85.33354187]
[-18.97184753 93.12902069]
[-34.40485764 91.51601410]
[-45.91978836 81.11476898]
[-49.08890915 65.92475891]
[-42.69363403 51.78686523]
[-29.19306946 44.13739395]
[-13.77846432 45.91772079]
[-2.37704611 56.44327164]
[0.62710661 71.66676331]
[14.29388428 77.84893036]
[27.96066093 84.03109741]
[41.62743759 90.21327209]
[55.29421616 96.39543915]
[65.19831848 85.13005829]
[57.31666565 72.36763763]
[49.43501282 59.60520935]
[41.55335999 46.84278488]
[26.86585999 39.54830170]
[26.10950470 23.16660690]
[40.06236649 14.54977989]
[54.37093353 22.56207466]
[54.31578445 38.96112823]
[62.19743729 51.72355652]
[70.07909393 64.48598480]
[77.96074677 77.24840546]
[88.27419281 74.11296082]
[97.96084595 74.92089081]
[105.69589996 78.84866333]
[114.31976318 66.57556152]
[122.94363403 54.30246353]
[131.56750488 42.02936554]
[140.19136047 29.75626945]
[148.81523132 17.48317146]
[156.44319153 4.56751728]
[163.02764893 -8.91005993]
[169.61209106 -22.38763618]
[176.19653320 -35.86521530]
[165.86538696 -46.98419952]
[160.25215149 -61.08583450]
[160.11598206 -76.26298523]
[165.47528076 -90.46306610]
[175.60525513 -101.76563263]
[189.13591003 -108.64211273]
[204.23731995 -110.16251373]
[218.86717224 -106.12120819]
[231.04687500 -97.06475830]
[239.12922668 -84.21797180]
[242.02116394 -69.31826782]
[239.33157349 -54.38071442]
[231.42419434 -41.42548752]
[219.36843872 -32.20468140]
[204.79475403 -27.96532822]
[189.67410278 -29.28076935]
[183.08966064 -15.80319214]
[176.50521851 -2.32561469]
[169.92077637 11.15196228]
[183.91484070 5.75140524]
[198.44909668 9.46025562]
[208.14436340 20.90585709]
[209.41239929 35.85216522]
[201.78390503 48.76750565]
[188.08219910 54.87188339]
[173.37834167 51.90604782]
[163.11422729 40.96766281]
[161.08833313 26.10703850]
[152.46446228 38.38013458]
[143.84059143 50.65323257]
[135.21673584 62.92633057]
[126.59286499 75.19943237]
[117.96899414 87.47252655]
[117.48223877 120.30014801]
[78.23031616 123.00965881]
[82.32687378 137.43942261]
[86.42343140 151.86918640]
[90.51998901 166.29896545]
[94.61655426 180.72872925]
[98.71311188 195.15849304]
[102.80966949 209.58825684]
[116.33056641 217.32281494]
[120.27950287 232.01499939]
[112.82246399 244.85743713]
[116.91902924 259.28720093]
[121.01558685 273.71697998]
[125.11214447 288.14675903]
[129.20870972 302.57650757]
[135.30097961 298.29998779]
[143.35914612 296.14096069]
[152.68121338 296.73440552]
[162.38876343 300.49478149]
[171.49301147 307.57156372]
[180.59501648 319.49438477]
[189.69702148 331.41720581]
[198.79902649 343.34002686]
[214.49432373 345.19290161]
[224.21664429 357.65292358]
[222.19790649 373.32775879]
[209.63580322 382.91778564]
[193.98318481 380.73345947]
[184.52648926 368.07064819]
[186.87620544 352.44201660]
[177.77420044 340.51919556]
[168.67219543 328.59637451]
[159.57020569 316.67355347]
[152.29779053 318.50714111]
[155.96470642 333.05203247]
[141.41975403 336.71871948]
[137.75296021 322.17431641]
[130.48054504 324.00787354]
[128.11940002 338.82089233]
[125.75824738 353.63388062]
[138.54505920 361.90536499]
[146.85664368 374.66613770]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 156]
[12 155]
[13 154]
[14 131]
[15 130]
[16 129]
[17 128]
[18 127]
[21 124]
[22 123]
[23 122]
[24 121]
[25 120]
[26 119]
[27 118]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[60 71]
[61 70]
[62 69]
[63 68]
[74 116]
[75 115]
[76 114]
[77 113]
[78 112]
[79 111]
[80 102]
[81 101]
[82 100]
[83 99]
[136 149]
[137 148]
[138 147]
[139 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
