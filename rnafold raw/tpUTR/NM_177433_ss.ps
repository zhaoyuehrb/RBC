%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 00:52:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUUUAGAUAUUGUUAAUCCUGCCAGUCUUUCUCUUCAAGCCAGGGUGCAUCCUCAGAAACCUACUCAACACAGCACUCUAGGCAGCCACUAUCAAUCAAUUGAAGUUGACACUCUGCAUUAAAUCUAUUUGCCAUUUCUGA\
) } def
/len { sequence length } bind def

/coor [
[87.58877563 430.74075317]
[83.35894775 416.18450928]
[84.36583710 401.05963135]
[90.48785400 387.19250488]
[100.98574066 376.25769043]
[114.59181976 369.57562256]
[112.95881653 354.66476440]
[111.32581329 339.75390625]
[109.69281006 324.84307861]
[108.05980682 309.93222046]
[106.42680359 295.02139282]
[93.42531586 287.80340576]
[87.09220123 274.15219116]
[90.04631805 259.21478271]
[101.36038208 248.76020813]
[99.72737885 233.84934998]
[98.09437561 218.93850708]
[96.46137238 204.02766418]
[93.88095856 201.52076721]
[92.42460632 197.60919189]
[92.75284576 192.85321045]
[95.24223328 188.09266663]
[94.58794403 173.10693359]
[93.93365479 158.12121582]
[90.47332001 151.52604675]
[93.43215942 142.80218506]
[93.10493469 127.80574799]
[80.15131378 120.65747833]
[72.49165344 107.99952698]
[72.16889954 93.20797729]
[79.26914215 80.22797394]
[91.89862823 72.52147675]
[91.57141113 57.52504349]
[81.64750671 42.05548859]
[90.59193420 26.99457359]
[89.93764496 12.00885010]
[89.28334808 -2.97687316]
[88.62905884 -17.96259689]
[87.97476959 -32.94831848]
[87.32048035 -47.93404388]
[84.07388306 -62.57848358]
[78.33363342 -76.43667603]
[72.59338379 -90.29486847]
[66.70230865 -104.08962250]
[60.66110611 -117.81929779]
[54.61990356 -131.54896545]
[48.57870483 -145.27864075]
[42.53750610 -159.00831604]
[36.49630356 -172.73797607]
[30.45510292 -186.46765137]
[15.60595226 -183.86647034]
[0.56583518 -184.89521790]
[-13.79083633 -189.49406433]
[-26.62938309 -197.39566040]
[-37.20338821 -208.14059448]
[-44.89809799 -221.10420227]
[-49.26614380 -235.53276062]
[-50.05358124 -250.58744812]
[-47.21462250 -265.39297485]
[-40.91432571 -279.08859253]
[-31.51898193 -290.87802124]
[-19.57482147 -300.07586670]
[-5.77626419 -306.14739990]
[9.07446098 -308.73956299]
[24.11395264 -307.70172119]
[38.46783066 -303.09414673]
[51.30158615 -295.18478394]
[61.86907578 -284.43344116]
[69.55592346 -271.46517944]
[73.91522217 -257.03396606]
[74.69353485 -241.97880554]
[71.84559631 -227.17498779]
[65.53700256 -213.48321533]
[56.13451004 -201.69946289]
[44.18477631 -192.50885010]
[50.22597504 -178.77919006]
[56.26717758 -165.04951477]
[62.30837631 -151.31983948]
[68.34957886 -137.59016418]
[74.39077759 -123.86049652]
[80.43197632 -110.13082123]
[86.04737854 -105.23822784]
[86.45157623 -96.03511810]
[92.19182587 -82.17692566]
[97.93207550 -68.31873322]
[100.68508148 -83.06393433]
[108.22840881 -96.02920532]
[119.68650818 -105.70969391]
[133.72947693 -110.98180389]
[148.72735596 -111.23361969]
[162.93939209 -106.43589783]
[174.71601868 -97.14551544]
[182.69032288 -84.44077301]
[185.93676758 -69.79630280]
[184.07855225 -54.91184998]
[177.33132935 -41.51502228]
[166.47824097 -31.16076469]
[152.77900696 -25.05087471]
[137.82363892 -23.89451599]
[123.34799957 -27.82590485]
[111.03223419 -36.38873291]
[102.30620575 -48.58833313]
[102.96049500 -33.60261154]
[103.61478424 -18.61688805]
[104.26907349 -3.63116407]
[104.92336273 11.35455894]
[105.57765961 26.34028244]
[114.30615234 34.78353500]
[114.93115234 47.31371689]
[106.56784058 57.19781876]
[106.89506531 72.19425201]
[119.84868622 79.34252167]
[127.50834656 92.00047302]
[127.83110046 106.79202271]
[120.73085785 119.77202606]
[108.10137177 127.47852325]
[108.42858887 142.47496033]
[108.91938019 157.46691895]
[109.57366943 172.45265198]
[110.22795868 187.43836975]
[111.37222290 202.39466858]
[113.00522614 217.30551147]
[114.63822937 232.21635437]
[116.27123260 247.12719727]
[129.57989502 254.88514709]
[135.69703674 268.82910156]
[132.46870422 283.52746582]
[121.33765411 293.38839722]
[122.97065735 308.29922485]
[124.60366058 323.21008301]
[126.23666382 338.12091064]
[127.86966705 353.03176880]
[129.50267029 367.94259644]
[144.23249817 371.52142334]
[156.84826660 379.92486572]
[165.82656860 392.13821411]
[170.08320618 406.68664551]
[169.10420227 421.81335449]
[163.00775146 435.69174194]
[152.53002930 446.64587402]
[138.93627930 453.35302734]
[123.86801910 455.00326538]
[109.14480591 451.39733887]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 133]
[7 132]
[8 131]
[9 130]
[10 129]
[11 128]
[15 124]
[16 123]
[17 122]
[18 121]
[22 120]
[23 119]
[24 118]
[26 117]
[27 116]
[32 111]
[33 110]
[35 107]
[36 106]
[37 105]
[38 104]
[39 103]
[40 102]
[41 85]
[42 84]
[43 83]
[44 81]
[45 80]
[46 79]
[47 78]
[48 77]
[49 76]
[50 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
