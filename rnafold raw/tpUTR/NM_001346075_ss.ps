%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:47:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGCAUGCAGGUGCAGGGCCCUGUGGUCCAGACUCCCCUGGGUUGGGAUUCAAGUCCAGGGUGAGCCCAUGUGCUGGAGAAAAUACACACUCAUUGGUCUCCUUGCUUUGAAAGAUCCAAUAAAGUCCUGAGGCAAGGUUUGGAAAACCAACUUA\
) } def
/len { sequence length } bind def

/coor [
[199.45246887 116.65711212]
[184.45321655 116.50703430]
[169.45396423 116.35696411]
[154.45472717 116.20688629]
[139.45547485 116.05681610]
[124.45622253 115.90673828]
[109.45697784 115.75666809]
[96.67129517 123.60054016]
[90.00893402 137.03977966]
[91.58681488 153.36283875]
[78.08417511 162.66932678]
[63.39138031 155.38552856]
[62.62311172 139.00439453]
[76.56970215 130.37742615]
[83.23206329 116.93818665]
[77.49745941 112.10451508]
[60.29365921 97.60350800]
[48.17607117 106.44455719]
[36.05848312 115.28559875]
[23.94089508 124.12664032]
[11.82330608 132.96768188]
[5.68152380 148.17329407]
[-10.59328365 150.18890381]
[-20.25898933 136.94102478]
[-13.37234402 122.05794525]
[2.98226213 120.85009766]
[15.09985065 112.00905609]
[27.21743774 103.16800690]
[39.33502579 94.32696533]
[51.45261383 85.48592377]
[50.70348740 78.02342987]
[37.02892685 71.85848999]
[49.20522690 63.09844208]
[48.45609665 55.63594818]
[34.82297516 49.37991333]
[21.18985367 43.12387848]
[7.49482298 37.00455093]
[-6.26074553 31.02255249]
[-20.01631355 25.04055214]
[-33.77188110 19.05855179]
[-47.52745056 13.07655048]
[-61.28302002 7.09454966]
[-75.03858948 1.11254895]
[-88.85331726 -4.73152924]
[-102.72582245 -10.43709946]
[-116.59833527 -16.14266968]
[-131.89875793 -11.31810093]
[-145.12947083 -20.39158249]
[-146.14097595 -36.40271759]
[-134.15736389 -47.06912994]
[-118.37140656 -44.20846558]
[-110.89276123 -30.01517677]
[-97.02025604 -24.30960655]
[-83.14775085 -18.60403633]
[-75.72388458 -18.97035217]
[-69.05658722 -12.64301968]
[-55.30101776 -6.66101885]
[-41.54545212 -0.67901844]
[-27.78988266 5.30298233]
[-14.03431320 11.28498268]
[-0.27874488 17.26698303]
[13.47682381 23.24898338]
[20.90652657 23.03128433]
[27.44589043 29.49075508]
[41.07901001 35.74679184]
[54.71213531 42.00282669]
[82.75772095 39.48186493]
[105.62620544 48.03513718]
[119.70245361 63.34952164]
[123.83003235 80.24652863]
[119.34754944 93.87215424]
[109.60704803 100.75741577]
[124.60630035 100.90749359]
[139.60554504 101.05756378]
[154.60479736 101.20764160]
[169.60404968 101.35771179]
[184.60328674 101.50778961]
[199.60253906 101.65785980]
[201.87628174 92.83970642]
[205.69085693 84.57706451]
[210.92085266 77.13651276]
[217.39523315 70.75768280]
[224.90293884 65.64555359]
[233.19976807 61.96384048]
[242.01628113 59.82979584]
[251.06658936 59.31044006]
[260.05761719 60.42046356]
[268.69857788 63.12183380]
[276.71041870 67.32508850]
[283.83471680 72.89228821]
[289.84225464 79.64156342]
[294.54006958 87.35301208]
[297.77792358 95.77593231]
[299.45303345 104.63690186]
[299.51318359 113.64869690]
[314.11779785 117.07006836]
[328.72238159 120.49143219]
[343.32699585 123.91279602]
[358.02767944 126.89433289]
[372.81121826 129.43333435]
[387.59478760 131.97235107]
[402.44787598 134.06655884]
[417.35711670 135.71405029]
[432.26638794 137.36155701]
[447.17562866 139.00906372]
[462.08486938 140.65657043]
[476.99411011 142.30407715]
[491.90338135 143.95158386]
[506.81262207 145.59909058]
[521.72186279 147.24659729]
[536.63110352 148.89410400]
[544.76953125 141.57206726]
[555.38110352 140.00169373]
[564.89239502 144.46588135]
[570.23553467 153.25592041]
[585.06689453 155.49862671]
[599.89831543 157.74131775]
[610.69714355 146.59837341]
[625.98895264 143.96411133]
[639.89379883 150.85144043]
[647.06494141 164.61204529]
[644.74493408 179.95471191]
[633.82586670 190.97984314]
[618.50634766 193.44807434]
[604.67706299 186.41030884]
[597.65557861 172.57272339]
[582.82421875 170.33001709]
[567.99279785 168.08731079]
[550.60949707 176.48060608]
[534.98364258 163.80335999]
[520.07434082 162.15585327]
[505.16513062 160.50834656]
[490.25585938 158.86083984]
[475.34661865 157.21333313]
[460.43737793 155.56582642]
[445.52810669 153.91831970]
[430.61886597 152.27081299]
[415.70962524 150.62330627]
[400.80035400 148.97579956]
[397.80340576 150.93194580]
[393.69445801 151.50157166]
[389.15069580 150.17109680]
[385.05578613 146.75590515]
[370.27221680 144.21688843]
[355.48867798 141.67788696]
[352.37976074 143.45069885]
[348.24401855 143.77278137]
[343.78826904 142.17210388]
[339.90560913 138.51739502]
[325.30102539 135.09602356]
[310.69641113 131.67466736]
[296.09182739 128.25329590]
[283.91375732 146.25337219]
[265.22647095 157.42698669]
[243.52604675 159.64393616]
[222.88912964 152.45338440]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[4 75]
[5 74]
[6 73]
[7 72]
[8 15]
[9 14]
[17 30]
[18 29]
[19 28]
[20 27]
[21 26]
[34 66]
[35 65]
[36 64]
[37 62]
[38 61]
[39 60]
[40 59]
[41 58]
[42 57]
[43 56]
[44 54]
[45 53]
[46 52]
[95 152]
[96 151]
[97 150]
[98 149]
[99 145]
[100 144]
[101 143]
[102 139]
[103 138]
[104 137]
[105 136]
[106 135]
[107 134]
[108 133]
[109 132]
[110 131]
[111 130]
[115 128]
[116 127]
[117 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
