%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 06:44:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUAGAAUGCCAUCCUUCUUCAGGAGCUAGUUUGGAGAUGGGUUUUUCUGGUGCCACUGACACCUGGGCUGCCCAUGCCGCUCAGGCUACCCUUAUCUCCUCUGCACUUAUGUUAUCAAUAAAGAGGCAAAUUCUCAA\
) } def
/len { sequence length } bind def

/coor [
[23.28026199 166.09063721]
[14.25519657 153.86761475]
[7.16057491 140.43182373]
[-6.99767542 145.38600159]
[-21.15592575 150.34019470]
[-35.31417465 155.29437256]
[-49.47242355 160.24856567]
[-63.63067627 165.20274353]
[-66.63956451 176.80569458]
[-74.82093048 185.40074158]
[-86.03166199 188.90596008]
[-97.41616821 186.55094910]
[-106.13365936 179.04270935]
[-120.49991608 183.35670471]
[-134.86618042 187.67068481]
[-149.23243713 191.98468018]
[-160.22431946 203.36399841]
[-174.63912964 199.61395264]
[-189.00538635 203.92794800]
[-203.37164307 208.24192810]
[-217.73791504 212.55592346]
[-232.10417175 216.86991882]
[-246.47042847 221.18389893]
[-260.83670044 225.49789429]
[-275.20297241 229.81188965]
[-282.47045898 243.84608459]
[-297.55813599 248.55116272]
[-311.51470947 241.13568115]
[-316.06002808 225.99911499]
[-308.49740601 212.12171936]
[-293.31362915 207.73669434]
[-279.51693726 215.44561768]
[-265.15069580 211.13163757]
[-250.78442383 206.81764221]
[-236.41816711 202.50364685]
[-222.05189514 198.18966675]
[-207.68563843 193.87567139]
[-193.31938171 189.56167603]
[-178.95310974 185.24769592]
[-168.98880005 174.17692566]
[-153.54643250 177.61842346]
[-139.18017578 173.30442810]
[-124.81391144 168.99043274]
[-110.44764709 164.67645264]
[-102.83488464 148.09440613]
[-85.24518585 142.16197205]
[-68.58486176 151.04449463]
[-54.42661285 146.09031677]
[-40.26836014 141.13612366]
[-26.11011124 136.18194580]
[-11.95186138 131.22775269]
[2.20638871 126.27356720]
[-0.80199558 109.63578796]
[-1.00014234 92.72937775]
[1.61747241 76.02565765]
[6.97787285 59.99031830]
[14.93161774 45.07040024]
[25.25696564 31.68185043]
[37.66605759 20.19792938]
[51.81294632 10.93879318]
[67.30323029 4.16257477]
[83.70506287 0.05818819]
[100.56118011 -1.25994182]
[117.40164948 0.24493270]
[121.06674957 -14.30041027]
[124.73185730 -28.84575272]
[128.39695740 -43.39109421]
[132.06207275 -57.93643951]
[135.72717285 -72.48178101]
[139.39228821 -87.02712250]
[135.26144409 -102.29954529]
[145.87400818 -112.75051117]
[149.53910828 -127.29585266]
[144.54016113 -142.91450500]
[155.76562500 -154.86947632]
[171.66769409 -150.86250305]
[175.88771057 -135.01562500]
[164.08445740 -123.63074493]
[160.41935730 -109.08540344]
[164.81234741 -94.85336304]
[153.93762207 -83.36201477]
[150.27252197 -68.81667328]
[146.60740662 -54.27133179]
[142.94230652 -39.72599030]
[139.27720642 -25.18064690]
[135.61209106 -10.63530445]
[131.94699097 3.91003871]
[143.35845947 8.49079800]
[154.13056946 14.42096329]
[164.10446167 21.61308861]
[173.13307190 29.96111679]
[181.08323669 39.34194946]
[187.83773804 49.61724854]
[193.29698181 60.63550186]
[197.38044739 72.23423004]
[200.02793884 84.24239349]
[201.20039368 96.48292542]
[200.88053894 108.77531433]
[199.07308960 120.93830109]
[195.80470276 132.79252625]
[209.59761047 138.68791199]
[223.39053345 144.58328247]
[237.18345642 150.47865295]
[250.97636414 156.37403870]
[260.73825073 144.83293152]
[273.46914673 136.68334961]
[288.03701782 132.64991760]
[303.14651489 133.09129333]
[317.45407104 137.96824646]
[329.68753052 146.84710693]
[338.75906372 158.93838501]
[343.86203003 173.16691589]
[344.54269409 188.26750183]
[340.74053955 202.89744568]
[332.79364014 215.75582886]
[321.40859985 225.69931030]
[307.59780884 231.84370422]
[292.58932495 233.64266968]
[277.71765137 230.93624878]
[264.30517578 223.96508789]
[253.54454041 213.34904480]
[246.39257812 200.03211975]
[243.48521423 185.19841003]
[245.08099365 170.16694641]
[231.28807068 164.27157593]
[217.49516296 158.37620544]
[203.70223999 152.48081970]
[189.90931702 146.58544922]
[181.92695618 159.51356506]
[172.10011292 171.10179138]
[160.65000916 181.08924866]
[147.83444214 189.25108337]
[133.94194031 195.40353394]
[119.28527832 199.40809631]
[104.19443512 201.17459106]
[89.00915527 200.66325378]
[74.07131958 197.88562012]
[59.71723938 192.90419006]
[46.27007675 185.83114624]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 52]
[4 51]
[5 50]
[6 49]
[7 48]
[8 47]
[13 44]
[14 43]
[15 42]
[16 41]
[18 39]
[19 38]
[20 37]
[21 36]
[22 35]
[23 34]
[24 33]
[25 32]
[64 87]
[65 86]
[66 85]
[67 84]
[68 83]
[69 82]
[70 81]
[72 79]
[73 78]
[100 128]
[101 127]
[102 126]
[103 125]
[104 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
