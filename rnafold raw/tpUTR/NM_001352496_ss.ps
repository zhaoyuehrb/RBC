%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 21:59:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGUCUUUAUGCUGUAAUGUGAAAGCAAAUAUUUCUUCGUGUUGGAUGGGGACUGUGGGUAGAUAGGGGAACAAUGAGAGUCAACUCAGGCUAACUUGGGUGUGAAAAAAAUAAAAGUCCUAAAUCUAAACCAUUGCUGUA\
) } def
/len { sequence length } bind def

/coor [
[85.36479187 136.79618835]
[86.53954315 121.84226227]
[94.91498566 109.39636230]
[80.56987762 113.78018951]
[66.22476959 118.16400909]
[51.87966156 122.54783630]
[37.53455734 126.93166351]
[23.18944931 131.31549072]
[8.84434319 135.69931030]
[-5.50076294 140.08312988]
[-19.84586906 144.46696472]
[-30.78226852 155.89962769]
[-45.21513748 152.21974182]
[-48.74078369 165.59013367]
[-58.35085297 175.38070679]
[-71.44457245 179.09527588]
[-84.55354309 175.86160278]
[-94.26041412 166.63336182]
[-108.69835663 170.70100403]
[-123.13630676 174.76864624]
[-135.63102722 188.24620056]
[-152.45021057 183.35502625]
[-166.79531860 187.73884583]
[-181.14042664 192.12268066]
[-195.48553467 196.50650024]
[-201.43043518 210.96997070]
[-215.30535889 218.18251038]
[-230.55899048 214.73855591]
[-239.98902893 202.26425171]
[-239.14289856 186.64956665]
[-228.42012024 175.26730347]
[-212.88366699 173.49179077]
[-199.86935425 182.16139221]
[-185.52426147 177.77757263]
[-171.17915344 173.39373779]
[-156.83404541 169.00991821]
[-150.84310913 158.44538879]
[-138.86676025 154.70509338]
[-127.20394897 160.33070374]
[-112.76599884 156.26306152]
[-98.32805634 152.19541931]
[-93.16520691 136.65005493]
[-79.63448334 127.12696838]
[-62.92744446 127.52098846]
[-49.59896088 137.87463379]
[-39.68862152 126.75553131]
[-24.22969437 130.12185669]
[-9.88458824 125.73802948]
[4.46051884 121.35420227]
[18.80562592 116.97038269]
[33.15073013 112.58655548]
[47.49583817 108.20272827]
[61.84094620 103.81890869]
[76.18605042 99.43508148]
[90.53115845 95.05125427]
[104.30922699 89.12126923]
[117.35418701 81.71659851]
[130.39913940 74.31192780]
[143.44409180 66.90725708]
[152.35034180 50.83115387]
[169.85134888 51.55511093]
[182.73048401 43.86566162]
[195.60963440 36.17621613]
[208.48878479 28.48676872]
[221.36791992 20.79732132]
[225.34205627 5.73597908]
[238.51289368 -1.87874556]
[252.84707642 2.00280380]
[265.72622681 -5.68664360]
[278.60537720 -13.37609100]
[291.48452759 -21.06553841]
[286.95327759 -36.52304840]
[286.54144287 -52.61508560]
[290.27114868 -68.26337433]
[297.88720703 -82.42079926]
[308.87451172 -94.14141846]
[322.49291992 -102.64373779]
[337.82717896 -107.36275482]
[353.84829712 -107.98755646]
[369.48266602 -104.48173523]
[383.68402100 -97.08554077]
[395.50344849 -86.29933929]
[408.03240967 -94.54706573]
[420.56137085 -102.79479980]
[432.99899292 -111.17965698]
[445.34375000 -119.70063019]
[457.68850708 -128.22160339]
[470.03326416 -136.74256897]
[482.37802124 -145.26354980]
[494.72277832 -153.78451538]
[507.06753540 -162.30548096]
[513.60504150 -177.34519958]
[529.92700195 -178.93429565]
[539.24279785 -165.43806458]
[531.96911621 -150.74026489]
[515.58850098 -149.96072388]
[503.24374390 -141.43975830]
[490.89898682 -132.91879272]
[478.55422974 -124.39781189]
[466.20947266 -115.87684631]
[453.86471558 -107.35587311]
[441.51995850 -98.83489990]
[437.77297974 -92.39679718]
[428.80911255 -90.26583862]
[416.28015137 -82.01810455]
[403.75119019 -73.77037048]
[408.53720093 -60.65118408]
[410.25726318 -46.78465271]
[408.82006836 -32.87803650]
[404.29547119 -19.64142418]
[396.91104126 -7.75150108]
[387.04058838 2.18305922]
[375.18539429 9.65274811]
[361.94860840 14.27335167]
[348.00457764 15.80571747]
[334.06460571 14.16812134]
[320.84048462 9.44062805]
[309.00836182 1.86117589]
[299.17398071 -8.18639278]
[286.29483032 -0.49694523]
[273.41567993 7.19250202]
[260.53652954 14.88194942]
[257.15301514 29.34180260]
[244.20126343 37.32346344]
[229.05737305 33.67646790]
[216.17822266 41.36591339]
[203.29908752 49.05536270]
[190.41993713 56.74480820]
[177.54078674 64.43425751]
[174.25219727 76.12551880]
[163.51896667 82.62326050]
[150.84877014 79.95220947]
[137.80380249 87.35688019]
[124.75885773 94.76155090]
[111.71389771 102.16622162]
[126.50876617 104.63844299]
[138.17723083 114.06430817]
[143.70480347 128.00869751]
[141.66346741 142.86914062]
[132.58059692 154.80653381]
[118.80269623 160.73692322]
[103.88921356 159.12820435]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 55]
[4 54]
[5 53]
[6 52]
[7 51]
[8 50]
[9 49]
[10 48]
[11 47]
[13 45]
[18 41]
[19 40]
[20 39]
[22 36]
[23 35]
[24 34]
[25 33]
[56 135]
[57 134]
[58 133]
[59 132]
[61 129]
[62 128]
[63 127]
[64 126]
[65 125]
[68 122]
[69 121]
[70 120]
[71 119]
[82 106]
[83 105]
[84 104]
[85 102]
[86 101]
[87 100]
[88 99]
[89 98]
[90 97]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
