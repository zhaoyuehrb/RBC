%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:46:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUAGGAUUCAAUGACAGGAAGUGAAUAAGAAGAUAUCAGUGAAUUCAAAUAAUUCAAUUGCUACAAAUGCCGUGACAUUGGAACAAGGUCAUCAUAGCUCUAACUUUAAUAUACCAAUAAAAUAAUCAGCUUGCAA\
) } def
/len { sequence length } bind def

/coor [
[-76.55484009 347.22048950]
[-83.85325623 339.22573853]
[-90.45260620 330.64541626]
[-96.30611420 321.54043579]
[-101.37229156 311.97543335]
[-115.26292419 317.63671875]
[-129.15356445 323.29800415]
[-143.04420471 328.95928955]
[-156.93484497 334.62057495]
[-170.82548523 340.28186035]
[-184.71611023 345.94314575]
[-194.57545471 358.31668091]
[-209.28166199 355.95513916]
[-223.17230225 361.61642456]
[-237.06292725 367.27770996]
[-235.33624268 382.27508545]
[-237.72097778 397.18197632]
[-244.04014587 410.89221191]
[-253.82484436 422.38839722]
[-266.34899902 430.81744385]
[-280.68316650 435.55383301]
[-295.76373291 436.24612427]
[-310.47158813 432.84292603]
[-323.71530151 425.59680176]
[-334.51211548 415.04544067]
[-342.06085205 401.97183228]
[-345.80130005 387.34609985]
[-345.45593262 372.25360107]
[-341.05035400 357.81430054]
[-332.91149902 345.09967041]
[-321.64334106 335.05325317]
[-308.08200073 328.42050171]
[-293.23388672 325.69366455]
[-278.20077515 327.07507324]
[-264.09826660 332.46221924]
[-251.97280884 341.45532227]
[-242.72422791 353.38705444]
[-228.83358765 347.72576904]
[-214.94294739 342.06448364]
[-206.07714844 330.09591675]
[-190.37741089 332.05252075]
[-176.48677063 326.39123535]
[-162.59613037 320.72994995]
[-148.70549011 315.06866455]
[-134.81484985 309.40737915]
[-120.92421722 303.74609375]
[-107.03357697 298.08480835]
[-112.25511169 277.26113892]
[-113.93680573 255.85617065]
[-112.03084564 234.46739197]
[-106.58956909 213.69198608]
[-97.76404572 194.11016846]
[-85.79987335 176.26898193]
[-71.03033447 160.66699219]
[-53.86712265 147.74035645]
[-34.78887177 137.85064697]
[-14.32780075 131.27474976]
[6.94514036 128.19705200]
[28.43618774 128.70434570]
[49.54534531 132.78332520]
[69.68313599 140.32099915]
[76.88549042 127.16325378]
[84.08784485 114.00551605]
[91.29019928 100.84777832]
[90.63290405 97.77323914]
[91.12065887 94.38585663]
[92.87322235 91.12478638]
[95.84061432 88.46752167]
[99.79341888 86.86483002]
[108.16242981 74.41654968]
[109.01085663 67.71896362]
[112.61727905 63.18693924]
[117.20644379 61.60409546]
[126.13336182 49.54962921]
[135.06027222 37.49515915]
[143.98719788 25.44069481]
[152.91410828 13.38622761]
[154.90904236 -2.30870271]
[168.70132446 -7.93205214]
[177.62825012 -19.98651886]
[186.55516052 -32.04098511]
[191.12243652 -48.36814880]
[208.07588196 -48.49916840]
[212.89495850 -32.24454498]
[198.60963440 -23.11406898]
[189.68270874 -11.05960274]
[180.75579834 0.99486381]
[179.39938354 15.82757759]
[164.96858215 22.31314278]
[156.04165649 34.36761093]
[147.11474609 46.42207718]
[138.18783569 58.47654343]
[129.26091003 70.53101349]
[120.61071014 82.78556061]
[112.24169922 95.23384094]
[104.44793701 108.05013275]
[97.24558258 121.20787048]
[90.04322815 134.36560059]
[82.84087372 147.52334595]
[91.77839661 153.66062927]
[100.16730499 160.52812195]
[107.94812012 168.07705688]
[115.06565857 176.25378418]
[121.46946716 185.00022888]
[127.11414337 194.25428772]
[131.95970154 203.95024109]
[135.97181702 214.01925659]
[139.12205505 224.38981628]
[141.38816833 234.98834229]
[142.75410461 245.73956299]
[143.21025085 256.56719971]
[142.75344849 267.39437866]
[141.38700867 278.14428711]
[139.12068176 288.74060059]
[135.97064209 299.10818481]
[131.95930481 309.17343140]
[127.11521149 318.86495972]
[121.47279358 328.11401367]
[115.07215118 336.85501099]
[107.95878601 345.02593994]
[100.18321991 352.56884766]
[91.80068207 359.43023682]
[82.87072754 365.56152344]
[73.45674896 370.91918945]
[63.62561417 375.46533203]
[53.44711304 379.16769409]
[42.99350739 382.00012207]
[32.33900452 383.94253540]
[21.55923843 384.98123169]
[10.73071480 385.10891724]
[-0.06971198 384.32473755]
[-10.76539707 382.63436890]
[-21.28044319 380.04983521]
[-31.54024315 376.58956909]
[-41.47200012 372.27816772]
[-51.00526428 367.14633179]
[-60.07240295 361.23056030]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 47]
[6 46]
[7 45]
[8 44]
[9 43]
[10 42]
[11 41]
[13 39]
[14 38]
[15 37]
[61 99]
[62 98]
[63 97]
[64 96]
[69 95]
[70 94]
[73 93]
[74 92]
[75 91]
[76 90]
[77 89]
[79 87]
[80 86]
[81 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
