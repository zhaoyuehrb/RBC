%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 15:06:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCCCGUGCUUAUGCUCUUCUAUGAGAGAGAUGAAUUGGGGAGAAUUGUCUCCAUUUUAUAGAUUAGUUUCUUUCUAAAUUAUGACCAAAAAUAUUUUGCUAUUUCUUUCUUUGUAUAUGGACAUCUUUUCUGUAAACUUCUUCCCCUAGUUCCAUCCUCACUAGUAAAAAAUAAAUACUUUUUAAAAAAACAA\
) } def
/len { sequence length } bind def

/coor [
[119.13644409 481.21881104]
[114.63859558 495.52859497]
[110.14075470 509.83834839]
[105.64290619 524.14813232]
[116.08827209 535.40820312]
[119.48851776 550.38598633]
[114.92900848 565.05249023]
[103.63621521 575.46252441]
[88.64785767 578.81579590]
[73.99571228 574.21032715]
[63.62114334 562.88500977]
[60.31485367 547.88616943]
[64.96622467 533.24853516]
[76.32405090 522.90954590]
[91.33313751 519.65026855]
[95.83098602 505.34051514]
[100.32883453 491.03073120]
[104.82668304 476.72097778]
[114.81306458 461.93447876]
[128.07617188 455.02603149]
[140.44215393 455.90560913]
[138.28579712 441.06140137]
[136.12944031 426.21719360]
[133.85420227 411.39077759]
[131.46018982 396.58303833]
[129.06619263 381.77532959]
[126.67220306 366.96759033]
[122.49593353 360.85864258]
[124.36048126 351.90350342]
[122.20412445 337.05932617]
[110.89549255 330.86813354]
[105.13507080 319.11694336]
[107.22924805 306.00128174]
[116.63420868 296.34921265]
[114.71605682 281.47238159]
[112.79789734 266.59552002]
[110.87973785 251.71867371]
[108.96157837 236.84181213]
[107.04342651 221.96496582]
[105.12526703 207.08811951]
[103.20710754 192.21127319]
[101.28894806 177.33441162]
[97.31063080 171.09474182]
[99.46125031 162.20397949]
[97.78178406 147.29829407]
[96.10231781 132.39260864]
[71.29069519 124.98278046]
[56.51924133 99.18081665]
[64.33238220 66.51947021]
[52.02980042 57.93771744]
[39.72721481 49.35596848]
[25.12820625 54.27278900]
[10.60311127 49.70387268]
[1.65931737 37.60129166]
[1.55821264 22.73092461]
[-10.74437141 14.14917469]
[-23.04695511 5.56742477]
[-35.34953690 -3.01432514]
[-51.24932480 2.73824739]
[-67.28707123 -2.06756210]
[-77.20439148 -15.34977341]
[-77.25466919 -31.75977135]
[-89.69321442 -40.14323425]
[-102.13176727 -48.52669907]
[-117.59474945 -45.25994110]
[-130.79290771 -53.95386505]
[-133.89599609 -69.45052338]
[-125.06301117 -82.55602264]
[-109.53441620 -85.49509430]
[-96.52304077 -76.52405548]
[-93.74830627 -60.96524811]
[-81.30975342 -52.58178329]
[-68.87120056 -44.19832230]
[-56.79865646 -49.91491318]
[-43.37041855 -48.90847397]
[-32.10512161 -41.33538818]
[-26.00761032 -29.08670044]
[-26.76778793 -15.31690884]
[-14.46520519 -6.73515892]
[-2.16262126 1.84659088]
[10.13996220 10.42834091]
[24.13024902 5.38751984]
[38.57701492 9.60117817]
[47.88125992 21.65457726]
[48.30896378 37.05338287]
[60.61154938 45.63513565]
[72.91413116 54.21688461]
[85.74127197 46.44099426]
[83.82312012 31.56414604]
[81.90496063 16.68729591]
[79.98680115 1.81044519]
[78.06864166 -13.06640530]
[70.04647827 -28.00230980]
[82.17793274 -39.84563446]
[96.91673279 -31.46684456]
[92.94549561 -14.98456287]
[94.86365509 -0.10771229]
[96.78180695 14.76913834]
[98.69996643 29.64598846]
[100.61812592 44.52283859]
[107.52399445 47.44840240]
[112.97299957 33.47312546]
[118.42199707 19.49784660]
[123.87099457 5.52256918]
[129.31999207 -8.45270920]
[128.79789734 -23.44362068]
[141.15716553 -31.94353676]
[154.96890259 -26.09239388]
[157.46109009 -11.30087566]
[146.32917786 -1.24703956]
[140.08081055 12.38960361]
[133.83245850 26.02624702]
[127.58409882 39.66288757]
[121.33573914 53.29953384]
[128.24160767 56.22509766]
[140.26281738 47.25343704]
[146.69470215 32.79863358]
[161.52227783 31.38709450]
[173.54347229 22.41543770]
[185.56468201 13.44377899]
[197.58589172 4.47212124]
[209.60708618 -4.49953699]
[221.62829590 -13.47119427]
[222.33830261 -29.09265137]
[232.96147156 -40.56793976]
[248.48187256 -42.47877502]
[261.57122803 -33.92292786]
[266.04916382 -18.94019890]
[259.80133057 -4.60497904]
[245.77775574 2.31407952]
[230.59994507 -1.44999039]
[218.57875061 7.52166748]
[206.55754089 16.49332619]
[194.53634644 25.46498299]
[182.51513672 34.43664169]
[170.49392700 43.40829849]
[164.92187500 57.22139359]
[149.23448181 59.27464294]
[137.21327209 68.24629974]
[143.73440552 90.07588959]
[139.40126038 110.48676300]
[127.01759338 124.83767700]
[111.00799561 130.71315002]
[112.68746185 145.61883545]
[114.36692810 160.52452087]
[116.16580200 175.41625977]
[118.08396149 190.29310608]
[120.00211334 205.16995239]
[121.92027283 220.04681396]
[123.83843231 234.92366028]
[125.75659180 249.80050659]
[127.67474365 264.67736816]
[129.59291077 279.55419922]
[131.51106262 294.43106079]
[145.55169678 304.85565186]
[147.67327881 321.87374878]
[137.04832458 334.90295410]
[139.20468140 349.74716187]
[141.47991943 364.57357788]
[143.87393188 379.38131714]
[146.26792908 394.18905640]
[148.66192627 408.99676514]
[153.12591553 416.98071289]
[150.97363281 424.06085205]
[153.12998962 438.90505981]
[155.28634644 453.74923706]
[160.91535950 467.65298462]
[169.69319153 479.81643677]
[178.47102356 491.97991943]
[187.24885559 504.14337158]
[196.02668762 516.30682373]
[204.80451965 528.47027588]
[220.32135010 528.38537598]
[232.90499878 537.46453857]
[237.71675110 552.21673584]
[232.90643311 566.96936035]
[220.32368469 576.04974365]
[204.80682373 575.96636963]
[192.32241821 566.75122070]
[187.67097473 551.94769287]
[192.64105225 537.24810791]
[183.86322021 525.08465576]
[175.08538818 512.92120361]
[166.30755615 500.75775146]
[157.52972412 488.59426880]
[148.75189209 476.43081665]
[141.34803772 477.62783813]
[143.74203491 492.43554688]
[146.13603210 507.24328613]
[148.53002930 522.05102539]
[150.92378235 536.85876465]
[136.11598206 539.25225830]
[133.72230530 524.44500732]
[131.32830811 509.63726807]
[128.93431091 494.82955933]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[3 16]
[4 15]
[21 166]
[22 165]
[23 164]
[24 162]
[25 161]
[26 160]
[27 159]
[29 158]
[30 157]
[34 154]
[35 153]
[36 152]
[37 151]
[38 150]
[39 149]
[40 148]
[41 147]
[42 146]
[44 145]
[45 144]
[46 143]
[49 87]
[50 86]
[51 85]
[55 81]
[56 80]
[57 79]
[58 78]
[62 73]
[63 72]
[64 71]
[88 100]
[89 99]
[90 98]
[91 97]
[92 96]
[115 139]
[116 138]
[118 136]
[119 135]
[120 134]
[121 133]
[122 132]
[123 131]
[167 186]
[168 185]
[169 184]
[170 183]
[171 182]
[172 181]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
