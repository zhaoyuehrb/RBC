%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 11:08:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCAGCAGGCGUGUCCACAGAGGAAGGGGCGAAGAAAAUGUCGAAUGGACAGGCGACCUGCAUCCUGCCCAGCUCGGAAGAGGAGGACGUCCUGAGAUUUGCCACAGCCUGGAGGCGAUUGCGCUCGUGACAAAAGCCAGACACAGAAAGACAAAUACCACGUUCUAAUUUGUGCAUGGGAGCUAAAAUA\
) } def
/len { sequence length } bind def

/coor [
[479.15243530 266.42553711]
[465.20217896 260.91278076]
[451.25192261 255.40005493]
[437.30166626 249.88731384]
[423.78067017 256.02880859]
[409.55459595 250.63682556]
[403.20449829 236.41310120]
[389.25424194 230.90036011]
[375.30398560 225.38761902]
[361.35372925 219.87487793]
[347.40347290 214.36215210]
[340.01538086 214.82853699]
[333.27127075 208.64340210]
[319.41308594 202.90313721]
[305.55487061 197.16288757]
[294.44830322 203.71377563]
[281.40225220 202.65069580]
[271.20376587 194.13870239]
[267.72427368 181.11689758]
[253.96183777 175.15066528]
[240.19941711 169.18443298]
[226.43701172 163.21821594]
[214.55496216 172.20056152]
[199.67321777 174.04167175]
[185.77618408 168.14768982]
[176.63520813 156.00935364]
[174.78518677 140.82632446]
[161.02276611 134.86009216]
[147.26034546 128.89385986]
[133.49792480 122.92764282]
[119.73551178 116.96141052]
[105.97309113 110.99518585]
[116.40007782 121.77841949]
[122.37610626 135.53657532]
[123.13994598 150.51712036]
[118.59429169 164.81176758]
[109.31818390 176.59963989]
[96.49324036 184.37915039]
[81.75313568 187.15931702]
[66.97551727 184.58601379]
[54.04279327 176.98703003]
[44.60237503 165.33033752]
[39.85681152 151.10079956]
[40.41060638 136.11102295]
[46.19321442 122.27045441]
[56.46803284 111.34214020]
[69.92622375 104.71815491]
[84.85107422 103.24210358]
[70.49697113 98.88783264]
[56.14286423 94.53356171]
[41.71943665 90.41473389]
[27.23054886 86.53244781]
[12.74166107 82.65016174]
[-1.74722600 78.76787567]
[-18.61156082 80.50872040]
[-24.95288658 64.78536987]
[-11.59945965 54.33920288]
[2.13505960 64.27899170]
[16.62394714 68.16127777]
[31.11283493 72.04355621]
[45.60172272 75.92584229]
[50.12474442 74.34746552]
[55.68767166 75.60505676]
[60.49713516 80.17945862]
[74.85124207 84.53372955]
[89.20534515 88.88800049]
[93.72222137 82.90069580]
[87.86849976 69.09004974]
[102.75598145 70.92608643]
[107.27285767 64.93878174]
[99.14448547 52.33205795]
[83.95523071 48.87890625]
[75.89148712 35.97810364]
[79.27714539 21.51874733]
[71.14877319 8.91202164]
[63.02040100 -3.69470406]
[48.19381332 -10.70215416]
[47.11899948 -27.06604195]
[60.90163803 -35.95260239]
[75.36332703 -28.22010422]
[75.62712860 -11.82307816]
[83.75550079 0.78364831]
[91.88387299 13.39037418]
[106.45166016 16.27397919]
[114.87457275 28.94319916]
[111.75121307 44.20368195]
[119.87958527 56.81040955]
[123.18219757 81.11551666]
[111.93932343 97.23276520]
[125.70173645 103.19899750]
[139.46415710 109.16522217]
[153.22657776 115.13144684]
[166.98898315 121.09767914]
[180.75140381 127.06390381]
[193.09762573 118.03516388]
[208.20565796 116.40916443]
[222.00737000 122.52303314]
[230.83665466 134.64324951]
[232.40322876 149.45579529]
[246.16564941 155.42202759]
[259.92807007 161.38824463]
[273.69049072 167.35447693]
[289.83035278 160.62730408]
[305.53601074 167.51142883]
[311.29513550 183.30470276]
[325.15332031 189.04495239]
[339.01153564 194.78520203]
[352.91619873 200.41188049]
[366.86645508 205.92462158]
[380.81674194 211.43736267]
[394.76699829 216.95010376]
[408.71725464 222.46284485]
[423.07516479 216.42231750]
[437.14416504 222.21174622]
[442.81442261 235.93705750]
[456.76467896 241.44979858]
[470.71493530 246.96253967]
[484.66519165 252.47528076]
[497.49807739 239.93740845]
[514.46881104 234.28242493]
[532.15252686 236.60287476]
[547.00140381 246.38665771]
[556.05700684 261.62905884]
[557.53924561 279.24340820]
[571.74322510 284.06500244]
[585.94714355 288.88659668]
[600.15112305 293.70819092]
[591.65747070 281.34460449]
[590.37542725 266.39950562]
[596.63928223 252.76998901]
[608.81567383 244.01014709]
[623.72949219 242.40423584]
[637.49163818 248.37101746]
[646.51354980 260.35458374]
[648.44256592 275.23001099]
[642.77569580 289.11837769]
[630.99066162 298.39807129]
[616.16290283 300.64953613]
[629.39172363 307.72048950]
[642.62054443 314.79144287]
[657.57470703 310.43142700]
[670.88989258 317.79083252]
[674.95434570 332.07421875]
[688.18316650 339.14517212]
[701.41198730 346.21612549]
[714.64080811 353.28707886]
[727.86962891 360.35803223]
[741.09844971 367.42898560]
[759.47601318 366.39306641]
[768.16711426 381.63092041]
[781.50982666 388.48446655]
[794.85260010 395.33804321]
[806.99536133 386.09054565]
[821.94964600 383.03579712]
[836.74633789 386.78030396]
[848.44744873 396.58062744]
[854.72979736 410.49087524]
[854.34594727 425.74917603]
[847.37219238 439.32595825]
[835.19311523 448.52557373]
[820.22686768 451.52139282]
[805.44506836 447.71862793]
[793.78265381 437.87231445]
[787.55511475 423.93743896]
[787.99902344 408.68075562]
[774.65631104 401.82720947]
[761.31353760 394.97366333]
[749.69433594 398.37435913]
[738.51727295 392.76052856]
[734.02752686 380.65780640]
[720.79870605 373.58685303]
[707.56988525 366.51589966]
[694.34106445 359.44494629]
[681.11224365 352.37399292]
[667.88342285 345.30303955]
[653.74908447 349.85900879]
[640.23248291 342.87652588]
[635.54956055 328.02026367]
[622.32073975 320.94931030]
[609.09191895 313.87835693]
[595.32952881 307.91213989]
[581.12554932 303.09054565]
[566.92163086 298.26895142]
[552.71765137 293.44735718]
[545.11706543 303.06625366]
[534.90820312 309.89801025]
[523.07055664 313.26904297]
[510.74523926 312.83880615]
[499.12542725 308.63381958]
[489.34048462 301.04687500]
[482.34634399 290.80014038]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 118]
[2 117]
[3 116]
[4 115]
[7 112]
[8 111]
[9 110]
[10 109]
[11 108]
[13 107]
[14 106]
[15 105]
[19 102]
[20 101]
[21 100]
[22 99]
[27 94]
[28 93]
[29 92]
[30 91]
[31 90]
[32 89]
[48 66]
[49 65]
[50 64]
[51 61]
[52 60]
[53 59]
[54 58]
[70 87]
[71 86]
[74 83]
[75 82]
[76 81]
[124 184]
[125 183]
[126 182]
[127 181]
[138 180]
[139 179]
[140 178]
[143 175]
[144 174]
[145 173]
[146 172]
[147 171]
[148 170]
[150 167]
[151 166]
[152 165]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
