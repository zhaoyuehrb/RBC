%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 16:08:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGGCAUUGGGAGAGGGAGGGAGGAAGGAAGGGAGGGAGGGGCUGGAAGAUACUGAAGGAUUCCUUUUUGAAAGGUUUUUUUUAUUGUAACUUACA\
) } def
/len { sequence length } bind def

/coor [
[98.52842712 360.80563354]
[95.03498840 345.98281860]
[97.87893677 331.02178955]
[106.56753540 318.51467896]
[119.59543610 310.62838745]
[117.67727661 295.75152588]
[115.75912476 280.87466431]
[106.45781708 269.24130249]
[112.36686707 254.56501770]
[110.44870758 239.68817139]
[108.53055573 224.81132507]
[106.61239624 209.93446350]
[104.69423676 195.05761719]
[102.77607727 180.18077087]
[100.85792542 165.30392456]
[98.93976593 150.42706299]
[97.02160645 135.55021667]
[81.92717743 130.75811768]
[70.39431763 119.90458679]
[64.69578552 105.12849426]
[65.95458221 89.34174347]
[73.92263031 75.65539551]
[87.02969360 66.76658630]
[84.63569641 51.95885849]
[82.24169922 37.15113068]
[79.84770203 22.34340286]
[77.45369720 7.53567696]
[75.05970001 -7.27204990]
[72.66570282 -22.07977676]
[70.27170563 -36.88750458]
[67.87770844 -51.69522858]
[53.83641815 -54.60169983]
[41.67246628 -62.13716507]
[32.85424042 -73.36771393]
[28.43788910 -86.91487122]
[28.94087601 -101.12477875]
[34.28141785 -114.27011871]
[43.79094696 -124.76005554]
[56.29773712 -131.33276367]
[54.37958145 -146.20962524]
[40.92483902 -153.71136475]
[34.54187012 -167.53565979]
[37.48822784 -182.29312134]
[48.42845917 -192.36534119]
[46.51030350 -207.24218750]
[38.48814011 -222.17808533]
[50.61958694 -234.02140808]
[65.35839081 -225.64262390]
[61.38715363 -209.16033936]
[63.30530930 -194.28349304]
[76.44260406 -187.31573486]
[83.03589630 -173.78826904]
[80.36827850 -158.79702759]
[69.25643158 -148.12777710]
[71.17459106 -133.25093079]
[86.45372009 -129.38629150]
[99.13350677 -119.96194458]
[107.27843475 -106.38008881]
[109.63134003 -90.68026733]
[105.80741119 -75.23310089]
[96.35674286 -62.38232803]
[82.68543243 -54.08922958]
[85.07942963 -39.28150177]
[87.47342682 -24.47377586]
[89.86743164 -9.66604805]
[92.26142883 5.14167833]
[94.65542603 19.94940567]
[97.04942322 34.75713348]
[99.44342041 49.56485748]
[101.83741760 64.37258911]
[115.33677673 67.79018402]
[126.49935150 76.11542511]
[133.62437439 88.07981873]
[135.62622070 101.86043549]
[132.19990540 115.35758209]
[123.86745453 126.51477814]
[111.89846039 133.63206482]
[113.81661224 148.50891113]
[115.73477173 163.38575745]
[117.65293121 178.26260376]
[119.57109070 193.13946533]
[121.48924255 208.01631165]
[123.40740204 222.89315796]
[125.32556152 237.77000427]
[127.24372101 252.64686584]
[136.68222046 265.34429932]
[130.63597107 278.95651245]
[132.55412292 293.83337402]
[134.47229004 308.71020508]
[149.07450867 313.03399658]
[160.65142822 322.92819214]
[167.19729614 336.67849731]
[167.57798767 351.90267944]
[161.72755432 365.96298218]
[150.65960693 376.42340088]
[136.29174805 381.47161865]
[121.11328125 380.23297119]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 89]
[6 88]
[7 87]
[9 85]
[10 84]
[11 83]
[12 82]
[13 81]
[14 80]
[15 79]
[16 78]
[17 77]
[23 70]
[24 69]
[25 68]
[26 67]
[27 66]
[28 65]
[29 64]
[30 63]
[31 62]
[39 55]
[40 54]
[44 50]
[45 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
