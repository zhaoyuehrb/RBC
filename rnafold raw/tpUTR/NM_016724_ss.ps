%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 22:32:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCUUUUACCUUCUGAUACCUGGAAAUCCCUGCCCUGUUCAGCCCCACAGCUCCCAACUAUUUGGUUCCUGCUCCAUGGUCGGGCCUCUGACAGCCACUUUGAAUAAACCAGACACCGCACAUGUGUCUUGAGAAUUAUUUGGA\
) } def
/len { sequence length } bind def

/coor [
[95.25623322 471.85531616]
[82.15788269 461.09103394]
[88.87550354 445.52471924]
[89.51644897 430.53842163]
[90.15739441 415.55212402]
[78.39713287 406.45080566]
[74.20152283 391.99877930]
[79.38084412 377.67996216]
[92.14594269 369.05685425]
[92.78688812 354.07055664]
[82.57089233 337.70223999]
[93.46237183 320.79489136]
[93.46237183 305.79489136]
[93.46237183 290.79489136]
[82.78149414 280.47720337]
[82.56781769 265.26507568]
[93.46237183 254.13194275]
[93.46237183 239.13194275]
[93.46237183 224.13194275]
[93.46237183 209.13194275]
[93.46237183 194.13194275]
[85.72506714 181.40467834]
[93.46237183 167.60450745]
[93.46237183 152.60450745]
[93.30208588 137.60536194]
[79.43279266 132.18719482]
[68.68890381 121.87784576]
[62.70304871 108.24393463]
[62.38485336 93.35727692]
[67.78266144 79.48004913]
[78.07623291 68.72103882]
[91.70133972 62.71518707]
[91.38079071 47.71861267]
[91.06024170 32.72203827]
[78.48233795 23.82808876]
[73.61018372 9.40187740]
[78.11367798 -4.95718193]
[90.06574249 -13.80512238]
[89.74520111 -28.80169678]
[89.42465210 -43.79827118]
[89.10410309 -58.79484558]
[88.78356171 -73.79141998]
[88.46301270 -88.78799438]
[87.34206390 -103.74605560]
[85.42390442 -118.62290192]
[72.83639526 -124.33694458]
[64.79476929 -135.44732666]
[63.32312393 -148.97427368]
[68.70101166 -161.35501099]
[79.41804504 -169.38198853]
[77.81823730 -184.29643250]
[76.21842957 -199.21087646]
[62.41585541 -209.90304565]
[60.61655426 -226.93089294]
[71.44525909 -239.75677490]
[69.52709961 -254.63362122]
[67.60894012 -269.51046753]
[58.17044067 -282.20791626]
[64.21669006 -295.82012939]
[62.29853058 -310.69696045]
[60.38037491 -325.57382202]
[58.46221542 -340.45068359]
[56.54405975 -355.32751465]
[44.31527710 -364.97607422]
[42.58192062 -380.09063721]
[51.85570526 -391.68945312]
[49.93754959 -406.56631470]
[48.01939392 -421.44317627]
[37.64628220 -434.14477539]
[43.71184921 -449.38092041]
[59.97636032 -451.47799683]
[69.70828247 -438.27868652]
[62.89624405 -423.36132812]
[64.81439972 -408.48446655]
[66.73255920 -393.60760498]
[78.64513397 -384.74047852]
[80.80234528 -369.68057251]
[71.42091370 -357.24569702]
[73.33906555 -342.36883545]
[75.25722504 -327.49197388]
[77.17538452 -312.61514282]
[79.09353638 -297.73828125]
[88.39484406 -286.10491943]
[82.48579407 -271.42861938]
[84.40395355 -256.55178833]
[86.32210541 -241.67492676]
[97.55548096 -235.27955627]
[103.11725616 -223.39527893]
[100.76209259 -210.28884888]
[91.13287354 -200.81068420]
[92.73268127 -185.89624023]
[94.33248138 -170.98179626]
[108.79956818 -163.29313660]
[115.92758942 -148.35787964]
[112.74275970 -131.94932556]
[100.30075073 -120.54106140]
[102.21891022 -105.66420746]
[113.57983398 -115.45856476]
[128.35974121 -112.89845276]
[135.76454163 -99.85356903]
[130.38635254 -85.85089111]
[116.15296173 -81.11688995]
[103.45958710 -89.10854340]
[103.78013611 -74.11196899]
[104.10067749 -59.11539078]
[104.42122650 -44.11881638]
[104.74177551 -29.12224388]
[105.06231689 -14.12566853]
[117.38153839 -5.79651785]
[122.49447632 8.35699368]
[118.24320984 22.97821426]
[106.05681610 32.40149307]
[106.37736511 47.39806747]
[106.69791412 62.39464188]
[120.56720734 67.81281281]
[131.31109619 78.12215424]
[137.29695129 91.75606537]
[137.61514282 106.64272308]
[132.21733093 120.51995087]
[121.92376709 131.27896118]
[108.29866028 137.28480530]
[111.63006592 145.86795044]
[108.46237183 152.60450745]
[108.46237183 167.60450745]
[116.19966888 181.40467834]
[108.46237183 194.13194275]
[108.46237183 209.13194275]
[108.46237183 224.13194275]
[108.46237183 239.13194275]
[108.46237183 254.13194275]
[119.35692596 265.26507568]
[119.14324188 280.47720337]
[108.46237183 290.79489136]
[108.46237183 305.79489136]
[108.46237183 320.79489136]
[116.64692688 328.09344482]
[119.36845398 338.48876953]
[115.95310974 348.44442749]
[107.77318573 354.71148682]
[107.13224030 369.69778442]
[119.11447144 379.37933350]
[123.05232239 394.08807373]
[117.63809204 408.12908936]
[105.14369202 416.19308472]
[104.50274658 431.17938232]
[103.86180115 446.16567993]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 146]
[4 145]
[5 144]
[9 140]
[10 139]
[12 135]
[13 134]
[14 133]
[17 130]
[18 129]
[19 128]
[20 127]
[21 126]
[23 124]
[24 123]
[25 121]
[32 114]
[33 113]
[34 112]
[38 108]
[39 107]
[40 106]
[41 105]
[42 104]
[43 103]
[44 97]
[45 96]
[50 92]
[51 91]
[52 90]
[55 86]
[56 85]
[57 84]
[59 82]
[60 81]
[61 80]
[62 79]
[63 78]
[66 75]
[67 74]
[68 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
