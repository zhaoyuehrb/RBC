%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 21:32:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAGUCAGCAGGGGCCGCCUGCCCCGGCCAGAACGGGCAGGGCUGCCACUGACCUGAAGACUCCGGACUGGGACCCCACUCCGAGGGCAGCUCCCGGCCUUGCCGGCCCAAUAAAGGACUUCAGAAGUGUUCCCUGA\
) } def
/len { sequence length } bind def

/coor [
[-34.32027817 100.43275452]
[-36.90306473 95.48468018]
[-51.84091568 96.84870148]
[-66.77877045 98.21272278]
[-81.71662140 99.57674408]
[-96.65447235 100.94077301]
[-106.75077820 112.80257416]
[-121.91931915 113.97309113]
[-133.16551208 104.27471161]
[-148.10336304 105.63873291]
[-163.04121399 107.00275421]
[-177.97906494 108.36677551]
[-192.81515503 110.57829285]
[-207.50140381 113.63012695]
[-222.18766785 116.68196869]
[-234.12500000 127.06516266]
[-248.16026306 122.07913971]
[-262.84652710 125.13098145]
[-277.53280640 128.18281555]
[-292.21905518 131.23466492]
[-300.90277100 144.16644287]
[-315.84017944 147.05223083]
[-328.11514282 138.69395447]
[-342.80142212 141.74578857]
[-357.48767090 144.79763794]
[-372.17395020 147.84947205]
[-379.41827393 161.70782471]
[-393.89532471 167.61953735]
[-408.76953125 162.79328918]
[-417.01770020 149.50788879]
[-414.74530029 134.03630066]
[-403.02529907 123.68372345]
[-387.39154053 123.33833313]
[-375.22576904 133.16320801]
[-360.53952026 130.11137390]
[-345.85327148 127.05953217]
[-331.16699219 124.00769043]
[-323.23818970 111.45102692]
[-308.38772583 108.14681244]
[-295.27090454 116.54840088]
[-280.58462524 113.49655914]
[-265.89837646 110.44471741]
[-251.21211243 107.39287567]
[-240.32524109 97.22796631]
[-225.23951721 101.99571228]
[-210.55325317 98.94387054]
[-195.86698914 95.89202881]
[-206.44067383 85.25260925]
[-204.94697571 70.32717133]
[-192.47459412 61.99413300]
[-178.11402893 66.32705688]
[-172.33201599 80.16787720]
[-179.34309387 93.42892456]
[-164.40524292 92.06490326]
[-149.46739197 90.70088196]
[-134.52954102 89.33685303]
[-125.22586823 77.76200104]
[-110.09619141 76.16589355]
[-98.01849365 86.00291443]
[-83.08064270 84.63889313]
[-68.14279175 83.27487183]
[-53.20493698 81.91085052]
[-38.26708603 80.54682922]
[-27.07433128 70.56072235]
[-24.02249146 55.87446213]
[-20.97064972 41.18820190]
[-17.91880989 26.50193977]
[-22.68655014 11.41621017]
[-12.52164268 0.52934128]
[-9.46980190 -14.15692043]
[-6.41796207 -28.84318161]
[-12.06757355 -44.23843765]
[-1.35339153 -56.65368271]
[14.70275307 -53.31717682]
[19.58367348 -37.66123199]
[8.26829910 -25.79134178]
[5.21645927 -11.10507965]
[2.16461897 3.58118153]
[7.15064669 17.61645126]
[-3.23254895 29.55377960]
[-6.28438902 44.24003983]
[-9.33622932 58.92630386]
[-12.38806915 73.61256409]
[-4.59431028 86.42885590]
[9.84944916 90.47580719]
[24.29320908 94.52275848]
[38.73696899 98.56970978]
[46.08966064 97.33473206]
[53.46146393 102.87666321]
[67.80935669 107.25135803]
[82.15725708 111.62604523]
[70.56098938 91.97502899]
[82.32456207 64.41815948]
[118.27228546 54.59128952]
[133.08222961 52.21105194]
[147.89218140 49.83081436]
[162.70211792 47.45057678]
[177.51206970 45.07033920]
[192.19105530 36.58721542]
[204.40620422 48.34418869]
[196.49018860 63.33662033]
[179.89230347 59.88028336]
[165.08235168 62.26052094]
[150.27241516 64.64076233]
[135.46246338 67.02099609]
[120.65251923 69.40123749]
[119.71591187 76.84252167]
[116.90607452 99.16638947]
[130.66424561 105.14240265]
[145.27284241 99.11210632]
[159.83447266 105.25493622]
[165.70999146 119.92647552]
[159.41354370 134.42234802]
[144.68070984 140.14241028]
[130.25221252 133.69305420]
[124.68823242 118.90057373]
[110.93006134 112.92455292]
[101.86651611 124.87663269]
[111.33283234 136.51229858]
[120.79915619 148.14796448]
[130.26547241 159.78364563]
[144.95156860 168.25445557]
[140.87730408 184.71157837]
[123.93547821 185.35232544]
[118.62980652 169.24995422]
[109.16348267 157.61428833]
[99.69716644 145.97862244]
[90.23084259 134.34295654]
[77.78256989 125.97393799]
[63.43466949 121.59925079]
[49.08677673 117.22456360]
[34.69001770 113.01346588]
[20.24625587 108.96651459]
[5.80249739 104.91956329]
[-8.64126205 100.87261200]
[-15.54167271 105.04016876]
[-22.90438271 106.08457184]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 63]
[3 62]
[4 61]
[5 60]
[6 59]
[9 56]
[10 55]
[11 54]
[12 53]
[13 47]
[14 46]
[15 45]
[17 43]
[18 42]
[19 41]
[20 40]
[23 37]
[24 36]
[25 35]
[26 34]
[64 83]
[65 82]
[66 81]
[67 80]
[69 78]
[70 77]
[71 76]
[84 135]
[85 134]
[86 133]
[87 132]
[89 131]
[90 130]
[91 129]
[94 106]
[95 105]
[96 104]
[97 103]
[98 102]
[108 117]
[109 116]
[118 128]
[119 127]
[120 126]
[121 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
