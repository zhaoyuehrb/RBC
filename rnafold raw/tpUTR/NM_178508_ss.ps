%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 16:08:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCCUGGGCUGGGCUUGGGCACAAAUCCCCAGGCAGGCUUUGGAGUUGUUUCCAUGGUGAUGGGGCCAGAUGUAUAGUAUUCAGUAUAUAUUUUGUAAAUAAAAUGUUUUGUGGCUAGGGGUUUUGAUUUCA\
) } def
/len { sequence length } bind def

/coor [
[105.67980957 150.38917542]
[101.54524994 135.97024536]
[97.41069031 121.55132294]
[83.85317993 115.13307190]
[70.07994080 121.07426453]
[56.30669785 127.01546478]
[46.69974518 139.58595276]
[31.94877052 137.52244568]
[18.17552948 143.46363831]
[4.40228796 149.40484619]
[-9.37095356 155.34603882]
[-23.14419556 161.28723145]
[-28.65946198 173.01287842]
[-40.32653809 177.65293884]
[-51.63949203 173.21069336]
[-65.54724884 178.82978821]
[-79.45500946 184.44888306]
[-93.36276245 190.06799316]
[-107.27052307 195.68708801]
[-121.17828369 201.30618286]
[-135.08604431 206.92527771]
[-138.70915222 222.01344299]
[-150.53074646 232.06478882]
[-166.00518799 233.21437073]
[-179.18222046 225.02014160]
[-184.99501038 210.63294983]
[-181.20843506 195.58499146]
[-169.27850342 185.66247559]
[-153.79251099 184.68083191]
[-140.70513916 193.01753235]
[-126.79737854 187.39842224]
[-112.88961792 181.77932739]
[-98.98186493 176.16023254]
[-85.07410431 170.54112244]
[-71.16635132 164.92202759]
[-57.25859070 159.30293274]
[-47.27296066 144.91952515]
[-29.08539200 147.51399231]
[-15.31215000 141.57279968]
[-1.53890836 135.63159180]
[12.23433304 129.69039917]
[26.00757408 123.74920654]
[34.62937164 111.60367584]
[50.36550140 113.24221802]
[64.13874054 107.30102539]
[77.91198730 101.35982513]
[63.76690292 106.35149384]
[49.52602768 101.64007568]
[41.14892960 89.19723511]
[42.14129257 74.23010254]
[52.08782578 63.00216675]
[66.82606506 60.21214676]
[80.18830109 67.02761841]
[86.58279419 80.59767151]
[81.12589264 66.62548065]
[75.66899872 52.65328217]
[70.21209717 38.68108368]
[57.07664871 28.86314011]
[59.27994156 12.61267757]
[74.55541229 6.64677906]
[87.18897247 17.10264969]
[84.18429565 33.22418594]
[89.64118958 47.19638443]
[95.09809113 61.16857910]
[100.55499268 75.14077759]
[114.46274567 80.75987244]
[128.09400940 74.49979401]
[141.72528076 68.23972321]
[155.35655212 61.97964478]
[168.98780823 55.71956635]
[180.91462708 46.62279892]
[190.55644226 35.13213348]
[200.19825745 23.64146614]
[209.84007263 12.15080070]
[219.48188782 0.66013366]
[229.12370300 -10.83053303]
[238.76551819 -22.32119942]
[248.40733337 -33.81186676]
[244.52288818 -48.83487320]
[250.24191284 -63.25958633]
[263.36532593 -71.53940582]
[278.84692383 -70.49057770]
[290.73370361 -60.51639175]
[294.45492554 -45.45213318]
[288.57977295 -31.09030914]
[275.36727905 -22.95333862]
[259.89797974 -24.17005157]
[250.25617981 -12.67938519]
[240.61436462 -1.18871880]
[230.97254944 10.30194759]
[221.33073425 21.79261398]
[211.68891907 33.28327942]
[202.04710388 44.77394867]
[192.40528870 56.26461411]
[206.76376343 51.92478561]
[221.76376343 51.91701889]
[236.12673950 56.24197388]
[248.62840271 64.53100586]
[258.20318604 76.07759094]
[264.03497314 89.89752197]
[265.62661743 104.81283569]
[262.84252930 119.55219269]
[255.91996765 132.85926819]
[245.44900513 143.59979248]
[232.32214355 150.85829163]
[217.65829468 154.01605225]
[202.70735168 152.80393982]
[188.74368286 147.32525635]
[176.95751953 138.04699707]
[168.35345459 125.76000214]
[163.66490173 111.51158142]
[163.29147339 96.51623535]
[167.26501465 82.05210876]
[175.24789429 69.35083008]
[161.61662292 75.61090851]
[147.98535156 81.87098694]
[134.35409546 88.13106537]
[120.72282410 94.39114380]
[119.93627167 107.38858795]
[111.82961273 117.41676331]
[115.96417236 131.83569336]
[120.09873199 146.25462341]
[135.18525696 148.33227539]
[148.11900330 156.37207031]
[156.65910339 168.98104858]
[159.32595825 183.97463989]
[155.65750122 198.75511169]
[146.28932190 210.76165771]
[132.84449768 217.91406250]
[117.65245819 218.97314453]
[103.34529114 213.75540161]
[92.40180969 203.16482544]
[86.71803284 189.03633118]
[87.27870941 173.81773376]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 122]
[2 121]
[3 120]
[4 46]
[5 45]
[6 44]
[8 42]
[9 41]
[10 40]
[11 39]
[12 38]
[15 36]
[16 35]
[17 34]
[18 33]
[19 32]
[20 31]
[21 30]
[54 65]
[55 64]
[56 63]
[57 62]
[66 118]
[67 117]
[68 116]
[69 115]
[70 114]
[71 94]
[72 93]
[73 92]
[74 91]
[75 90]
[76 89]
[77 88]
[78 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
