%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 22:26:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCACUGCCCAUGAUUCAGAGCUUUCAAGGAUAGGCUUUAUUCUGCAAGCAAUACAAAUAAUAAAUCUAUUCUGCUGAGAGAUCAC\
) } def
/len { sequence length } bind def

/coor [
[3.22139907 266.94720459]
[-2.02056360 281.00143433]
[3.30920696 296.13330078]
[-5.32011414 309.65786743]
[-21.28885078 311.20028687]
[-32.34715271 299.57730103]
[-30.01204109 283.70510864]
[-16.07481003 275.75946045]
[-10.83284664 261.70523071]
[-18.02817535 255.64242554]
[-23.36059761 247.86672974]
[-26.43664932 238.93362427]
[-27.02450371 229.48458862]
[-25.07140732 220.20111084]
[-20.70823479 211.75544739]
[-14.24077034 204.76203918]
[-6.12829876 199.73272705]
[3.04900646 197.03936768]
[12.63156605 196.88629150]
[21.92780113 199.29489136]
[30.48264122 186.97358704]
[31.38571358 172.10638428]
[45.61184311 165.18339539]
[54.16668320 152.86207581]
[62.72152328 140.54077148]
[71.27635956 128.21945190]
[79.83119965 115.89813995]
[88.38603973 103.57682800]
[96.49565125 90.95803070]
[104.14970398 78.05781555]
[111.80375671 65.15760040]
[119.45780182 52.25738525]
[127.11185455 39.35717392]
[134.76589966 26.45696068]
[142.41995239 13.55674648]
[150.07400513 0.65653265]
[151.82875061 -8.54562664]
[158.23851013 -12.56057072]
[166.34811401 -25.17937279]
[174.45773315 -37.79817581]
[182.56733704 -50.41698074]
[190.67695618 -63.03578186]
[198.78656006 -75.65458679]
[198.60942078 -95.65843201]
[215.79873657 -104.21063995]
[222.98745728 -117.37582397]
[215.50382996 -130.86651611]
[216.52461243 -146.26007080]
[225.72409058 -158.64445496]
[240.16674805 -164.06787109]
[255.24397278 -160.79971313]
[266.14468384 -149.88284302]
[269.39050293 -134.80079651]
[263.94570923 -120.36619568]
[251.54769897 -111.18507385]
[236.15264893 -110.18708801]
[228.96391296 -97.02190399]
[232.77767944 -87.24382782]
[230.40890503 -76.79091644]
[222.42817688 -69.30760193]
[211.40536499 -67.54497528]
[203.29576111 -54.92617035]
[195.18614197 -42.30736542]
[187.07653809 -29.68856430]
[178.96691895 -17.06976128]
[170.85729980 -4.45095825]
[162.97421265 8.31058311]
[155.32017517 21.21079636]
[147.66612244 34.11101151]
[140.01206970 47.01122284]
[132.35801697 59.91143799]
[124.70396423 72.81165314]
[117.04991913 85.71186829]
[109.39586639 98.61207581]
[109.53691101 104.10445404]
[106.46685791 109.22688293]
[100.70735168 112.13166809]
[92.15251160 124.45298004]
[83.59767151 136.77429199]
[75.04283142 149.09561157]
[66.48799133 161.41691589]
[57.93315506 173.73823547]
[56.41818237 189.48674011]
[42.80395126 195.52842712]
[34.24911118 207.84973145]
[43.38529205 227.46415710]
[39.52762985 248.63284302]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 9]
[2 8]
[20 85]
[21 84]
[23 82]
[24 81]
[25 80]
[26 79]
[27 78]
[28 77]
[29 74]
[30 73]
[31 72]
[32 71]
[33 70]
[34 69]
[35 68]
[36 67]
[38 66]
[39 65]
[40 64]
[41 63]
[42 62]
[43 61]
[45 57]
[46 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
