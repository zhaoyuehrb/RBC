%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 20:17:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGACUUGGUGGGGGGAACAGGGAAUUGGGGAUGGGAGGGAGGCAAUAAAGAUAUUUGGCCUUCUUUGGCUUUCUUUGCUUAGCAGCGCCUA\
) } def
/len { sequence length } bind def

/coor [
[87.02153778 288.81726074]
[93.06787872 272.97814941]
[93.06787872 257.97814941]
[93.06787872 242.97813416]
[82.38700104 232.66046143]
[82.17332458 217.44831848]
[93.06787872 206.31520081]
[93.06787872 191.31520081]
[93.06787872 176.31520081]
[85.33057404 163.58792114]
[93.06787872 149.78775024]
[93.06787872 134.78775024]
[93.06787872 119.78775024]
[93.06787872 104.78775024]
[91.12543488 102.84185791]
[89.78902435 100.15708160]
[89.32400513 96.93997955]
[89.92134857 93.48764038]
[91.66825867 90.16033936]
[94.52866364 87.34513855]
[97.02359772 72.55408478]
[99.51853943 57.76303482]
[102.01348114 42.97198105]
[104.50842285 28.18092537]
[107.00336456 13.38987160]
[109.49829865 -1.40118217]
[107.61779785 -5.83798075]
[107.40985107 -10.18192387]
[108.61117554 -13.87819099]
[110.79426575 -16.53017235]
[113.44012451 -17.94175529]
[117.88425446 -32.26829147]
[110.27227020 -41.71136475]
[108.28017426 -53.55284882]
[112.30144501 -64.73870087]
[121.19396210 -72.44265747]
[132.60130310 -74.78019714]
[137.99241638 -88.77790833]
[143.38352966 -102.77561951]
[148.77464294 -116.77332306]
[154.16575623 -130.77104187]
[159.55688477 -144.76873779]
[164.94799805 -158.76644897]
[170.33911133 -172.76416016]
[175.73022461 -186.76187134]
[175.04832458 -193.67080688]
[177.69308472 -198.99075317]
[181.97741699 -201.49452209]
[188.29142761 -215.10089111]
[194.60545349 -228.70724487]
[200.91947937 -242.31361389]
[198.92172241 -258.59063721]
[212.18019104 -268.24179077]
[227.05570984 -261.33880615]
[228.24562073 -244.98289490]
[214.52584839 -235.99958801]
[208.21182251 -222.39323425]
[201.89779663 -208.78686523]
[195.58377075 -195.18049622]
[189.72793579 -181.37075806]
[184.33682251 -167.37304688]
[178.94570923 -153.37533569]
[173.55458069 -139.37762451]
[168.16346741 -125.37992096]
[162.77235413 -111.38220978]
[157.38124084 -97.38449860]
[151.99012756 -83.38678741]
[146.59899902 -69.38908386]
[155.07131958 -53.33084106]
[149.20982361 -35.81561661]
[132.21078491 -27.82415962]
[127.76665497 -13.49762154]
[124.28935242 1.09375811]
[121.79441833 15.88481236]
[119.29947662 30.67586517]
[116.80453491 45.46691895]
[114.30959320 60.25797272]
[111.81465149 75.04902649]
[109.31971741 89.84008026]
[108.06787872 104.78775024]
[108.06787872 119.78775024]
[108.06787872 134.78775024]
[108.06787872 149.78775024]
[115.80517578 163.58792114]
[108.06787872 176.31520081]
[108.06787872 191.31520081]
[108.06787872 206.31520081]
[118.96243286 217.44831848]
[118.74874878 232.66046143]
[108.06787872 242.97813416]
[108.06787872 257.97814941]
[108.06787872 272.97814941]
[114.11421967 288.81726074]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 92]
[3 91]
[4 90]
[7 87]
[8 86]
[9 85]
[11 83]
[12 82]
[13 81]
[14 80]
[20 79]
[21 78]
[22 77]
[23 76]
[24 75]
[25 74]
[26 73]
[31 72]
[32 71]
[37 68]
[38 67]
[39 66]
[40 65]
[41 64]
[42 63]
[43 62]
[44 61]
[45 60]
[48 59]
[49 58]
[50 57]
[51 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
