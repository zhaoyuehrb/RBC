%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 21:08:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUAGAAUUCAGUGGCAGAAAAUAAAUAAGAAGAUAACUUCCUUCAGAAAGCCAUGACAUUGAAAUAAUGUGGUCAUAACUCUUUCUUCAGUAUACCAAUAAAAUAUUAAUAGCAUGCAA\
) } def
/len { sequence length } bind def

/coor [
[38.86278152 142.44586182]
[34.39853668 135.15478516]
[30.79986572 127.39984894]
[28.11425018 119.28340149]
[26.37712669 110.91251373]
[25.61141396 102.39764404]
[25.82721519 93.85114288]
[27.02168274 85.38576508]
[12.68536091 80.97330475]
[-1.65096164 76.56083679]
[-15.98728466 72.14836884]
[-30.32360649 67.73590088]
[-44.65992737 63.32343674]
[-58.99625015 58.91097260]
[-74.46186829 62.24641418]
[-84.34998322 51.10754395]
[-98.68630981 46.69507599]
[-106.38002777 60.13013458]
[-116.84981537 71.52587891]
[-129.57490540 80.32001495]
[-143.92333984 86.07955170]
[-159.18341064 88.52209473]
[-174.59886169 87.52971649]
[-189.40647888 83.15462494]
[-202.87377930 75.61643219]
[-214.33531189 65.29114532]
[-223.22550964 52.69239426]
[-229.10661316 38.44588470]
[-231.69018555 23.25833511]
[-230.85131836 7.88240957]
[-245.29736328 3.84361100]
[-259.74340820 -0.19518758]
[-274.18945312 -4.23398590]
[-289.93176270 0.36073196]
[-301.59341431 -11.16913891]
[-297.17788696 -26.96265602]
[-281.22750854 -30.77280426]
[-270.15063477 -18.68002701]
[-255.70460510 -14.64122868]
[-241.25856018 -10.60243034]
[-226.81253052 -6.56363201]
[-220.02989197 -19.44504356]
[-210.69836426 -30.62694168]
[-199.22904968 -39.61272812]
[-186.12803650 -46.00263596]
[-171.97415161 -49.51153183]
[-157.39329529 -49.98162079]
[-143.03079224 -47.38954163]
[-129.52285767 -41.84752655]
[-117.46838379 -33.59853745]
[-107.40240479 -23.00560379]
[-99.77233887 -10.53587055]
[-94.91809845 3.26002359]
[-93.05696106 17.77225113]
[-94.27384186 32.35875320]
[-79.93751526 36.77122116]
[-65.49732971 33.12016678]
[-54.58378601 44.57464981]
[-40.24746323 48.98711395]
[-25.91114044 53.39958191]
[-11.57481861 57.81204605]
[2.76150441 62.22451401]
[17.09782600 66.63697815]
[31.43414879 71.04944611]
[44.56171799 50.34109116]
[63.70577240 35.02200699]
[86.78868103 26.75471687]
[111.30536652 26.43642807]
[134.59512329 34.10168457]
[154.13041687 48.91861343]
[167.79116821 69.27919006]
[182.00810242 64.49603271]
[196.22505188 59.71287155]
[210.44198608 54.92971039]
[217.68267822 49.15978241]
[225.09051514 50.21212769]
[239.42683411 45.79966354]
[253.76315308 41.38719559]
[261.15121460 35.80718613]
[268.52923584 37.05149078]
[282.97525024 33.01269150]
[288.25259399 18.42059517]
[301.11795044 9.74517918]
[316.62426758 10.32231808]
[328.80911255 19.93008995]
[332.98715210 34.87411118]
[327.55181885 49.40810013]
[314.59310913 57.94343948]
[299.09396362 57.19812012]
[287.01406860 47.45873260]
[272.56802368 51.49753189]
[258.17562866 55.72351837]
[243.83930969 60.13598633]
[229.50297546 64.54845428]
[215.22514343 69.14665222]
[201.00820923 73.92980957]
[186.79125977 78.71296692]
[172.57432556 83.49613190]
[173.98815918 91.92764282]
[174.42576599 100.46566010]
[173.88136292 108.99754333]
[172.36213684 117.41069794]
[169.88812256 125.59413910]
[166.49198914 133.43988037]
[162.21853638 140.84439087]
[157.12414551 147.70999146]
[151.27603149 153.94607544]
[144.75135803 159.47038269]
[137.63621521 164.21002197]
[130.02447510 168.10243225]
[122.01659393 171.09626770]
[113.71821594 173.15203857]
[105.23883057 174.24261475]
[96.69032288 174.35359192]
[88.18548584 173.48352051]
[79.83653259 171.64387512]
[71.75362396 168.85893250]
[64.04341125 165.16543579]
[56.80762100 160.61212158]
[50.14173126 155.25906372]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[13 59]
[14 58]
[16 56]
[17 55]
[30 41]
[31 40]
[32 39]
[33 38]
[71 98]
[72 97]
[73 96]
[74 95]
[76 94]
[77 93]
[78 92]
[80 91]
[81 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
