%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 16:13:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUCUCCGAGGCCCACCGAAGGGUACUGAAGAGCCUCACCUGGGGGCAUUUUGUGGGUGGAGGGCCAGAGUGUGUAUACCCAGGCUUGUCUGGAAGGAGAAGGCCUUUGCUGCCUGAAAGUCUCAUGUUA\
) } def
/len { sequence length } bind def

/coor [
[169.80767822 215.27661133]
[159.98475647 203.94036865]
[150.16184998 192.60412598]
[140.33894348 181.26788330]
[130.51603699 169.93164062]
[120.69312286 158.59539795]
[110.73600769 147.37684631]
[100.64610291 136.27757263]
[85.91716766 133.43879700]
[72.42484283 139.99296570]
[58.93251419 146.54713440]
[45.44018936 153.10130310]
[31.94786263 159.65547180]
[22.91553688 172.64498901]
[8.08673191 171.24649048]
[-4.90364885 178.74649048]
[-17.32588768 187.15411377]
[-29.74812698 195.56172180]
[-36.42304230 210.54095459]
[-52.75887680 211.98059082]
[-61.95072556 198.39964294]
[-54.54280090 183.76904297]
[-38.15574265 183.13948059]
[-25.73350143 174.73187256]
[-13.31126308 166.32424927]
[-27.61553955 161.80899048]
[-34.73159409 148.60437012]
[-30.63726997 134.17398071]
[-17.64677048 126.67417908]
[-3.10262871 130.34403992]
[4.77447033 143.10928345]
[1.53256452 157.75416565]
[9.59982777 145.23344421]
[25.39369392 146.16314697]
[38.88602066 139.60897827]
[52.37834930 133.05480957]
[65.87067413 126.50064087]
[79.36299896 119.94647217]
[74.21829224 95.96016693]
[88.91210175 79.28977203]
[86.42465210 64.49745941]
[83.93720245 49.70513916]
[81.44975281 34.91282654]
[78.96230316 20.12051010]
[76.47485352 5.32819510]
[62.92279434 -9.50789452]
[70.21640015 -27.35397148]
[67.02792358 -42.01117325]
[63.83944702 -56.66837692]
[60.65096664 -71.32557678]
[50.15705109 -83.16569519]
[55.01215363 -97.24678802]
[51.82367325 -111.90399170]
[41.32975769 -123.74410248]
[46.18486023 -137.82519531]
[42.99637985 -152.48240662]
[39.80789948 -167.13960266]
[29.31398392 -178.97972107]
[34.16908646 -193.06082153]
[22.74365997 -204.82481384]
[27.47856712 -220.52554321]
[43.50294113 -224.01142883]
[54.33228302 -211.69650269]
[48.82629013 -196.24929810]
[59.09214401 -185.45756531]
[54.46510315 -170.32807922]
[57.65358353 -155.67088318]
[60.84206009 -141.01368713]
[71.10791779 -130.22195435]
[66.48087311 -115.09246826]
[69.66935730 -100.43527222]
[79.93521118 -89.64353943]
[75.30816650 -74.51406097]
[78.49665070 -59.85685730]
[81.68512726 -45.19965363]
[84.87360382 -30.54244995]
[94.02942657 -25.74385643]
[99.09210968 -16.47895813]
[98.14678955 -5.74179459]
[91.26716614 2.84074497]
[93.75461578 17.63306046]
[96.24206543 32.42537689]
[98.72951508 47.21768951]
[101.21697235 62.01000595]
[103.70442200 76.80232239]
[111.11769104 78.56940460]
[117.76464081 82.70383453]
[122.89165497 88.89025879]
[125.87054443 96.57485199]
[126.27331543 105.01402283]
[123.92835999 113.34614563]
[118.95124054 120.67953491]
[111.74536896 126.18766785]
[121.83527374 137.28694153]
[130.00697327 141.58741760]
[132.02935791 148.77247620]
[141.85227966 160.10871887]
[151.67518616 171.44497681]
[161.49809265 182.78121948]
[171.32101440 194.11746216]
[181.14392090 205.45370483]
[192.93470764 214.72608948]
[206.26724243 221.59948730]
[219.59977722 228.47288513]
[232.93231201 235.34628296]
[247.28483582 229.13829041]
[262.25506592 233.65785217]
[270.77450562 246.77093506]
[268.82055664 262.28594971]
[257.31579590 272.87719727]
[241.69241333 273.54379272]
[229.32731628 263.97100830]
[226.05891418 248.67881775]
[212.72637939 241.80541992]
[199.39384460 234.93202209]
[186.06130981 228.05862427]
[193.21186829 241.24458313]
[195.52964783 256.06442261]
[192.74655151 270.80398560]
[185.18449402 283.75833130]
[173.71817017 293.42907715]
[159.67387390 298.69763184]
[144.67607117 298.95458984]
[130.45954895 294.17022705]
[118.66868591 284.89791870]
[110.66732025 272.21020508]
[107.38095856 257.57461548]
[109.18972015 242.68408203]
[115.88439941 229.26092529]
[126.69062042 218.85777283]
[140.35845947 212.67794800]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 101]
[2 100]
[3 99]
[4 98]
[5 97]
[6 96]
[7 94]
[8 93]
[9 38]
[10 37]
[11 36]
[12 35]
[13 34]
[15 32]
[16 25]
[17 24]
[18 23]
[40 85]
[41 84]
[42 83]
[43 82]
[44 81]
[45 80]
[47 76]
[48 75]
[49 74]
[50 73]
[52 71]
[53 70]
[55 68]
[56 67]
[57 66]
[59 64]
[102 116]
[103 115]
[104 114]
[105 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
