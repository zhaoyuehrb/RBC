%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 13:46:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAUGAGAACAGAGAGAAAUAUAUUCAUAAUUUACUUUAUGACCUAGAAGGAAACUGUCGUGUGUCCUAUACAUUGCCAUCAACUUUGUUUCCUCAUCUCAAAUAAAGUCCUUUCAGCAAGUU\
) } def
/len { sequence length } bind def

/coor [
[263.81030273 347.84207153]
[255.61437988 335.27914429]
[247.41845703 322.71621704]
[239.22254944 310.15332031]
[231.02662659 297.59039307]
[222.83071899 285.02746582]
[214.63479614 272.46453857]
[206.43888855 259.90161133]
[197.92985535 247.54862976]
[189.11306763 235.41337585]
[180.29629517 223.27812195]
[171.47950745 211.14286804]
[162.66273499 199.00761414]
[153.84596252 186.87236023]
[145.02917480 174.73710632]
[129.35568237 182.16754150]
[112.52208710 186.35078430]
[95.19362640 187.12152100]
[78.05511475 184.44929504]
[61.78383636 178.43969727]
[47.02283096 169.33023071]
[34.35544205 157.48089600]
[24.28226662 143.35997009]
[17.20139122 127.52548218]
[13.39264774 110.60321808]
[13.00655174 93.26192474]
[-1.79373741 90.82236481]
[-16.59402657 88.38280487]
[-31.39431572 85.94324493]
[-46.19460678 83.50369263]
[-60.99489594 81.06413269]
[-73.69129181 90.47566986]
[-89.31146240 88.07032013]
[-98.58824158 75.27512360]
[-96.01787567 59.68125916]
[-83.12532043 50.54027557]
[-67.55950165 53.27536392]
[-58.55533600 66.26384735]
[-43.75504684 68.70339966]
[-28.95475769 71.14295959]
[-14.15446949 73.58251953]
[0.64582002 76.02207184]
[15.44610882 78.46163177]
[19.78248596 65.67198944]
[26.04051208 53.70468903]
[34.07027054 42.84641647]
[43.67940140 33.35728073]
[54.63772202 25.46460152]
[66.68271637 19.35745239]
[79.52584076 15.18213367]
[77.27245331 0.35235706]
[75.01907349 -14.47741890]
[72.76568604 -29.30719566]
[63.04305267 -41.78841782]
[68.78058624 -55.53359985]
[66.52720642 -70.36337280]
[53.65289688 -79.53004456]
[51.11362457 -95.12900543]
[60.41589355 -107.90567780]
[76.04083252 -110.27988434]
[88.71843719 -100.84305573]
[90.92732239 -85.19388580]
[81.35697937 -72.61676025]
[83.61036682 -57.78698349]
[93.17182159 -46.36648560]
[87.59546661 -31.56057930]
[89.84884644 -16.73080254]
[92.10223389 -1.90102673]
[94.35561371 12.92874908]
[107.93022919 13.10711670]
[121.31287384 15.38898849]
[134.17956543 19.71912575]
[146.21885681 25.99270439]
[157.13926697 34.05785370]
[166.67643738 43.71933365]
[174.59951782 54.74325562]
[180.71669006 66.86275482]
[184.87986755 79.78443909]
[186.98828125 93.19550323]
[186.99087524 106.77128601]
[184.88758850 120.18315887]
[180.72933960 133.10643005]
[174.61679077 145.22825623]
[166.69792175 156.25520325]
[157.16442871 165.92033386]
[165.98121643 178.05558777]
[174.79798889 190.19084167]
[183.61476135 202.32609558]
[192.43154907 214.46134949]
[201.24832153 226.59660339]
[210.06510925 238.73185730]
[216.10154724 241.84819031]
[219.12159729 246.82891846]
[219.00180054 251.70570374]
[227.19772339 264.26861572]
[235.39363098 276.83154297]
[243.58955383 289.39447021]
[251.78546143 301.95739746]
[259.98138428 314.52032471]
[268.17730713 327.08322144]
[276.37319946 339.64614868]
[290.60073853 334.66210938]
[305.60766602 333.22842407]
[320.52151489 335.42852783]
[334.47521973 341.13446045]
[346.65753174 350.01449585]
[356.36016846 361.55233765]
[363.01904297 375.07723999]
[366.24700928 389.80285645]
[365.85641479 404.87304688]
[361.86996460 419.41168213]
[354.51940918 432.57348633]
[344.23208618 443.59323120]
[331.60614014 451.83026123]
[317.37561035 456.80569458]
[302.36779785 458.23025513]
[287.45529175 456.02111816]
[273.50503540 450.30673218]
[261.32812500 441.41931152]
[251.63247681 429.87557983]
[244.98181152 416.34664917]
[241.76277161 401.61907959]
[242.16250610 386.54910278]
[246.15777588 372.01290894]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 101]
[2 100]
[3 99]
[4 98]
[5 97]
[6 96]
[7 95]
[8 94]
[9 91]
[10 90]
[11 89]
[12 88]
[13 87]
[14 86]
[15 85]
[26 43]
[27 42]
[28 41]
[29 40]
[30 39]
[31 38]
[50 69]
[51 68]
[52 67]
[53 66]
[55 64]
[56 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
