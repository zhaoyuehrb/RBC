%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 18:34:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUAAUACCUGGAAGCAUCAUAGUGGUUUCUUAACUCUCCAAAAUAAGAUUUCUUCUCUGUAGCCUACUUGUCUGGUUUAUCCCUUACAGAAUAUUAGUAAGAUUUAAUCAAUUAAAAUAUAUAUAUAUGCCAA\
) } def
/len { sequence length } bind def

/coor [
[227.80755615 173.65496826]
[242.48922729 170.62117004]
[228.63104248 164.88090515]
[214.77284241 159.14065552]
[200.91465759 153.40040588]
[187.05645752 147.66015625]
[179.60620117 148.00985718]
[172.94692993 141.62394714]
[159.22502136 135.56512451]
[145.50311279 129.50631714]
[138.04676819 129.68383789]
[131.53675842 123.14581299]
[117.95846558 116.77166748]
[104.38016510 110.39752197]
[106.43013000 125.25678253]
[96.26342773 136.28575134]
[81.28675079 135.44955444]
[72.41098022 123.35738373]
[76.10233307 108.81867981]
[89.67005920 102.42524719]
[76.91680145 94.52876282]
[67.88504791 92.64379120]
[63.96313477 86.29972076]
[51.39567184 78.11077118]
[38.82820892 69.92182159]
[26.16700554 61.87857056]
[13.41374779 53.98208618]
[0.66049051 46.08560562]
[-12.09276676 38.18912125]
[-25.81467438 32.13030624]
[-40.24205780 28.02536201]
[-54.66944504 23.92041779]
[-69.09683228 19.81547165]
[-83.52421570 15.71052742]
[-94.02798462 26.84288025]
[-108.50584412 31.80777550]
[-123.63088226 29.46431351]
[-135.92747498 20.35100555]
[-142.56996155 6.56202316]
[-142.03193665 -8.73402596]
[-134.43704224 -22.02222252]
[-121.53052521 -30.24903488]
[-106.27821350 -31.52400398]
[-92.18497467 -25.55414772]
[-82.48932648 -13.71129990]
[-79.41926575 1.28314292]
[-64.99188232 5.38808775]
[-50.56449890 9.49303246]
[-36.13711548 13.59797764]
[-21.70973015 17.70292282]
[-30.82149887 5.78756762]
[-33.99161148 -8.87361908]
[-30.61643600 -23.48896027]
[-21.33865356 -35.27550888]
[-7.92486811 -41.98895645]
[7.07076263 -42.35097504]
[20.79287910 -36.29263306]
[30.62861824 -24.96751785]
[34.70512390 -10.53207207]
[32.24618530 4.26500845]
[23.72000885 16.60617256]
[10.75009155 24.14150429]
[-4.19628429 25.43586540]
[8.55697250 33.33234787]
[21.31023026 41.22882843]
[34.06348801 49.12531281]
[41.47285461 49.97963715]
[47.01715851 57.35435867]
[59.58462143 65.54330444]
[72.15208435 73.73225403]
[84.81328583 81.77551270]
[97.56654358 89.67198944]
[110.75431061 96.81922150]
[124.33261108 103.19336700]
[137.91090393 109.56751251]
[151.56192017 115.78440857]
[165.28382874 121.84322357]
[179.00573730 127.90203857]
[192.79670715 133.80197144]
[206.65490723 139.54222107]
[220.51309204 145.28247070]
[234.37129211 151.02272034]
[248.22947693 156.76296997]
[254.14964294 155.48844910]
[259.56909180 156.89395142]
[273.55618286 151.47532654]
[287.54327393 146.05670166]
[301.53036499 140.63807678]
[315.51742554 135.21945190]
[318.50573730 120.08427429]
[329.21881104 108.98320770]
[344.23815918 105.45857239]
[358.77114868 110.63505554]
[368.18035889 122.86086273]
[369.46334839 138.23478699]
[362.21069336 151.85105896]
[348.73675537 159.36477661]
[333.34094238 158.37835693]
[320.93606567 149.20652771]
[306.94897461 154.62515259]
[292.96191406 160.04377747]
[278.97482300 165.46240234]
[264.98773193 170.88102722]
[279.60321045 174.25566101]
[293.42465210 180.08383179]
[306.04354858 188.19326782]
[317.08697510 198.34428406]
[326.22845459 210.23686218]
[333.19781494 223.51948547]
[337.78906250 237.79954529]
[339.86651611 252.65499878]
[339.36874390 267.64672852]
[336.31048584 282.33166504]
[330.78210449 296.27572632]
[322.94702148 309.06680298]
[313.03683472 320.32681274]
[301.34439087 329.72293091]
[288.21536255 336.97747803]
[274.03775024 341.87600708]
[259.23062134 344.27371216]
[244.23164368 344.09976196]
[229.48410034 341.35928345]
[215.42391968 336.13327026]
[202.46665955 328.57620239]
[190.99530029 318.91143799]
[181.34889221 307.42462158]
[173.81256104 294.45529175]
[168.60905457 280.38674927]
[165.89218140 265.63485718]
[165.74223328 250.63560486]
[168.16365051 235.83233643]
[173.08485413 221.66258240]
[180.36039734 208.54516602]
[189.77522278 196.86779785]
[201.05107117 186.97563171]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 83]
[3 82]
[4 81]
[5 80]
[6 79]
[8 78]
[9 77]
[10 76]
[12 75]
[13 74]
[14 73]
[20 72]
[21 71]
[23 70]
[24 69]
[25 68]
[26 66]
[27 65]
[28 64]
[29 63]
[30 50]
[31 49]
[32 48]
[33 47]
[34 46]
[85 103]
[86 102]
[87 101]
[88 100]
[89 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
