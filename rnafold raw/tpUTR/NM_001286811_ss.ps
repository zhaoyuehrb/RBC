%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 03:23:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGGCACCCCCGGACCUUCCGCCCUGGCGCCGAGCCCGGGGGUGGUGGGACCCACAGCCCUCCACCAGCUUGCUUAAUAAAGCUGCUCUCUGACCCUC\
) } def
/len { sequence length } bind def

/coor [
[25.95384598 160.37850952]
[12.52353191 151.54704285]
[-0.69826865 158.63111877]
[-13.92006874 165.71517944]
[-27.14187050 172.79924011]
[-35.65197372 186.13673401]
[-50.52457428 185.32739258]
[-63.74637604 192.41145325]
[-68.37928009 210.63043213]
[-84.49030304 219.69195557]
[-101.86443329 214.37260437]
[-114.61031342 222.28099060]
[-127.35619354 230.18936157]
[-140.10208130 238.09774780]
[-150.37319946 251.58627319]
[-166.17791748 245.45053101]
[-164.65715027 228.56492615]
[-148.01045227 225.35186768]
[-135.26457214 217.44348145]
[-122.51869202 209.53511047]
[-109.77281189 201.62672424]
[-109.60824585 190.00488281]
[-103.71978760 179.84371948]
[-93.50976562 173.79920959]
[-81.52690125 173.51776123]
[-70.83044434 179.18965149]
[-57.60863876 172.10559082]
[-50.04424667 159.27479553]
[-34.22593689 159.57743835]
[-21.00413513 152.49337769]
[-7.78233480 145.40931702]
[5.43946552 138.32524109]
[4.98679495 124.57772827]
[10.56443977 111.93162537]
[21.12282562 102.90954590]
[34.61270523 99.33840179]
[48.38276291 101.97972870]
[59.70070267 110.36814117]
[73.14060974 103.70714569]
[86.58052063 97.04614258]
[96.03881073 85.40394592]
[99.80603027 70.88471985]
[103.57324982 56.36548615]
[107.34046936 41.84625626]
[111.10768890 27.32702637]
[107.08425903 12.02595997]
[117.77000427 1.64982116]
[121.53722382 -12.86940956]
[125.30444336 -27.38863945]
[115.34026337 -39.28379822]
[114.30445862 -54.76626205]
[122.59531403 -67.88271332]
[137.02484131 -73.58960724]
[152.04457092 -69.69252014]
[161.87911987 -57.68997192]
[162.74690247 -42.19718170]
[154.31425476 -29.17144394]
[139.82366943 -23.62141991]
[136.05645752 -9.10219002]
[132.28923035 5.41704082]
[136.58210754 19.67959404]
[125.62691498 31.09424591]
[121.85969543 45.61347580]
[118.09247589 60.13270569]
[114.32525635 74.65193939]
[110.55803680 89.17116547]
[118.66764832 101.78997040]
[133.43977356 104.39469147]
[148.21188354 106.99942017]
[159.32112122 100.21282196]
[171.66592407 102.80912781]
[178.63880920 112.83416748]
[193.32084656 115.90626526]
[208.00286865 118.97836304]
[222.68490601 122.05046844]
[238.08795166 116.42209625]
[250.48840332 127.15340424]
[247.12974548 143.20492554]
[231.46708679 148.06423950]
[219.61280823 136.73249817]
[204.93077087 133.66040039]
[190.24873352 130.58830261]
[175.56669617 127.51620483]
[159.31842041 133.93417358]
[145.60716248 121.77153015]
[130.83503723 119.16680908]
[116.06292725 116.56208801]
[121.23494720 130.64222717]
[115.73181915 144.59626770]
[102.34117126 151.35575867]
[87.84609985 147.49661255]
[79.58914948 134.97372437]
[81.75292206 120.13059998]
[93.24151611 110.48605347]
[79.80161285 117.14704895]
[66.36170197 123.80805206]
[65.51706696 140.23320007]
[56.60074997 153.94229126]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 32]
[3 31]
[4 30]
[5 29]
[7 27]
[8 26]
[11 21]
[12 20]
[13 19]
[14 18]
[38 96]
[39 95]
[40 94]
[41 66]
[42 65]
[43 64]
[44 63]
[45 62]
[47 60]
[48 59]
[49 58]
[67 87]
[68 86]
[69 85]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
