%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:35:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCAGCUGCUGGAGAUAUGUAAAGAAAAAAGCACCAAAGGGAAGGCUUCCUAUCUGUGUGGUGAUGAAUCGCAUUUCCUGAGAACAAAAUAAAAGGAUUUUUCUGUAACUGUCACCUGAAAUAAUACAUUGCAGCAAGCAAUAAACACAACAUUUUGUAAAGUUA\
) } def
/len { sequence length } bind def

/coor [
[315.82104492 421.35498047]
[325.58389282 411.79534912]
[318.78662109 398.42385864]
[304.58984375 394.06637573]
[297.50595093 380.60260010]
[302.17272949 365.74127197]
[295.37542725 352.36978149]
[288.57815552 338.99829102]
[281.78085327 325.62680054]
[274.98358154 312.25527954]
[266.75033569 307.24462891]
[264.46099854 296.62673950]
[254.62840271 285.29891968]
[240.44245911 280.75927734]
[237.23948669 265.26568604]
[227.40687561 253.93783569]
[217.57427979 242.60998535]
[207.74168396 231.28215027]
[200.95321655 228.27922058]
[197.83309937 219.64750671]
[188.21533203 208.13670349]
[171.43450928 207.36668396]
[160.16529846 194.45790100]
[161.72782898 177.05499268]
[151.89523315 165.72715759]
[142.06263733 154.39932251]
[132.23002625 143.07148743]
[122.39743042 131.74363708]
[112.56482697 120.41580200]
[102.73223114 109.08795929]
[96.31554413 118.09129333]
[82.45450592 121.09182739]
[66.24263763 113.63872528]
[51.72377014 109.87012482]
[37.20489502 106.10153198]
[22.68602371 102.33293152]
[8.16715050 98.56433105]
[-7.13429737 102.58630371]
[-17.50942039 91.89957428]
[-32.81087112 95.92154694]
[-43.18599319 85.23482513]
[-57.70486450 81.46622467]
[-72.22373962 77.69762421]
[-86.77741241 74.06575012]
[-101.36460876 70.57093048]
[-115.95180511 67.07611084]
[-132.76376343 69.26572418]
[-139.52182007 53.71693039]
[-126.45149231 42.91864777]
[-112.45698547 52.48891830]
[-97.86978912 55.98373795]
[-83.28259277 59.47855759]
[-76.01399231 57.97248077]
[-68.45513916 63.17875290]
[-53.93626785 66.94734955]
[-39.41739273 70.71595001]
[-25.15443230 66.42442322]
[-13.74082184 77.38070679]
[0.52213955 73.08917999]
[11.93575001 84.04545593]
[26.45462227 87.81405640]
[40.97349548 91.58265686]
[55.49236679 95.35125732]
[70.01123810 99.11985779]
[76.27165222 94.98980713]
[65.33690643 84.72183228]
[54.40215683 74.45385742]
[41.07978439 67.56079102]
[35.24295044 53.74300003]
[39.58918762 39.38645935]
[52.10985184 31.12613678]
[67.01844025 32.77958679]
[77.42486572 43.58266068]
[78.51950073 58.54344559]
[83.65598297 72.63658142]
[88.79246521 86.72972107]
[95.05287933 82.59967041]
[97.30179596 67.76921844]
[99.55072021 52.93876648]
[101.79963684 38.10831451]
[88.76864624 30.28133202]
[79.72885132 18.06042480]
[76.05876160 3.30919218]
[78.31803131 -11.72291088]
[86.16214752 -24.74359703]
[98.39493561 -33.76730728]
[113.15098572 -37.41799164]
[128.18009949 -35.13894653]
[141.19046021 -27.27770805]
[150.19807434 -15.03306007]
[153.82934570 -0.27222300]
[151.53053284 14.75388432]
[143.65217590 27.75388908]
[131.39569092 36.74538422]
[116.63008881 40.35723114]
[114.38117218 55.18768692]
[112.13225555 70.01814270]
[109.88333130 84.84859467]
[114.06006622 99.25535583]
[123.89266968 110.58319855]
[133.72526550 121.91104126]
[143.55787659 133.23887634]
[153.39047241 144.56671143]
[163.22306824 155.89456177]
[173.05567932 167.22239685]
[186.53701782 166.62266541]
[197.73144531 173.80386353]
[202.66018677 185.94665527]
[199.72612000 198.51893616]
[209.34390259 210.02972412]
[219.06951904 221.44955444]
[228.90211487 232.77738953]
[238.73471069 244.10522461]
[248.56732178 255.43307495]
[263.45654297 260.78295898]
[265.95623779 275.46630859]
[275.78884888 286.79415894]
[274.07229614 271.89270020]
[278.01306152 257.41961670]
[287.04739380 245.44541931]
[299.88278198 237.68319702]
[314.68304443 235.24337769]
[329.33078003 238.47503662]
[341.73049927 246.91583252]
[350.10827637 259.35821533]
[353.26556396 274.02215576]
[350.75070190 288.80984497]
[342.92343140 301.60571289]
[330.90356445 310.57916260]
[316.41067505 314.44644165]
[301.51812744 312.65429688]
[288.35507202 305.45800781]
[295.15237427 318.82949829]
[301.94964600 332.20101929]
[308.74691772 345.57250977]
[315.54421997 358.94400024]
[330.30096436 363.93154907]
[337.00390625 377.58898926]
[332.15811157 391.62655640]
[338.95538330 404.99804688]
[355.40634155 402.77145386]
[371.60382080 406.29052734]
[385.60452271 415.11517334]
[395.73483276 428.16986084]
[400.79086304 443.87463379]
[400.18142700 460.33633423]
[393.99731445 475.57684326]
[382.99804688 487.77075195]
[390.29348755 500.87710571]
[397.58892822 513.98345947]
[404.88439941 527.08984375]
[419.22637939 535.04211426]
[419.23989868 551.44128418]
[404.91101074 559.41723633]
[390.98007202 550.76495361]
[391.77801514 534.38525391]
[384.48257446 521.27893066]
[377.18713379 508.17254639]
[369.89169312 495.06619263]
[356.67626953 497.88247681]
[343.18664551 496.85076904]
[330.52169800 492.04559326]
[319.71582031 483.84921265]
[311.65447998 472.92129517]
[307.00155640 460.14578247]
[306.14480591 446.55950928]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 140]
[3 139]
[6 136]
[7 135]
[8 134]
[9 133]
[10 132]
[12 117]
[13 116]
[15 114]
[16 113]
[17 112]
[18 111]
[20 110]
[21 109]
[24 105]
[25 104]
[26 103]
[27 102]
[28 101]
[29 100]
[30 99]
[33 64]
[34 63]
[35 62]
[36 61]
[37 60]
[39 58]
[41 56]
[42 55]
[43 54]
[44 52]
[45 51]
[46 50]
[77 98]
[78 97]
[79 96]
[80 95]
[148 159]
[149 158]
[150 157]
[151 156]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
