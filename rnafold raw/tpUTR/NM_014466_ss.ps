%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 02:59:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUGGAGGACUGCAGGAGGAGGGCAGGGUUGGGUGGGCAAUGGAAGGAGGGAGGAGAGAAAUGAAUGGAAUAAAUGCAGAGGAUCUCA\
) } def
/len { sequence length } bind def

/coor [
[182.56117249 128.31440735]
[168.00672913 124.68558502]
[153.45230103 121.05675507]
[138.89785767 117.42792511]
[131.19671631 129.04377747]
[120.16026306 137.55450439]
[106.96842194 142.05017090]
[93.03157806 142.05017090]
[79.83973694 137.55450439]
[68.80328369 129.04377747]
[61.10213852 117.42792511]
[46.54770279 121.05675507]
[31.99326706 124.68558502]
[17.43882942 128.31440735]
[12.58315659 142.95770264]
[0.56719744 152.63346863]
[-14.77479744 154.25418091]
[-28.54725266 147.30271912]
[-36.35543060 133.99722290]
[-35.70776367 118.58346558]
[-26.81092834 105.97989655]
[-12.50386715 100.20828247]
[2.64808726 103.11032104]
[13.81000233 113.75997925]
[28.36443710 110.13114929]
[42.91887283 106.50231934]
[57.47330856 102.87348938]
[59.69853973 86.12309265]
[68.25760651 71.55361176]
[59.02268600 59.73345184]
[49.78776550 47.91328812]
[40.55284119 36.09312820]
[24.83778572 34.41607666]
[14.97656631 22.06569481]
[16.81967354 6.36924696]
[29.27362251 -3.36084509]
[44.94970703 -1.35188901]
[54.54758453 11.20423698]
[52.37300491 26.85820580]
[61.60792542 38.67836761]
[70.84284973 50.49852753]
[80.07777405 62.31869125]
[94.37968445 57.74850845]
[109.37898254 58.42102814]
[123.21450806 64.25279236]
[134.16950989 74.52017975]
[140.88464355 87.94918823]
[142.52668762 102.87348938]
[157.08113098 106.50231934]
[171.63555908 110.13114929]
[186.19000244 113.75997925]
[196.97889709 105.48072815]
[210.37402344 105.00535583]
[221.39559937 112.28315735]
[226.07797241 124.42315674]
[240.49690247 128.55772400]
[254.91581726 132.69227600]
[269.33474731 136.82684326]
[281.01092529 125.26753998]
[296.81674194 121.13531494]
[312.47674561 125.45149994]
[323.80307007 136.96507263]
[327.81536865 152.51338196]
[342.36978149 156.14221191]
[357.63186646 151.97331238]
[368.10925293 162.55978394]
[382.66369629 166.18861389]
[395.20758057 156.85130310]
[410.81555176 157.81317139]
[422.11801147 168.62004089]
[423.77828979 184.16923523]
[415.01245117 197.11889648]
[399.95944214 201.35461426]
[385.72686768 194.87638855]
[379.03488159 180.74304199]
[364.48043823 177.11421204]
[350.25939941 181.54267883]
[338.74096680 170.69665527]
[324.18652344 167.06782532]
[315.27621460 177.57070923]
[302.63015747 183.19387817]
[288.73007202 182.77056885]
[276.33142090 176.32684326]
[267.91708374 165.08798218]
[265.20019531 151.24577332]
[250.78126526 147.11120605]
[236.36233521 142.97663879]
[221.94340515 138.84208679]
[207.71482849 147.61984253]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 51]
[2 50]
[3 49]
[4 48]
[11 27]
[12 26]
[13 25]
[14 24]
[29 42]
[30 41]
[31 40]
[32 39]
[55 88]
[56 87]
[57 86]
[58 85]
[63 79]
[64 78]
[66 76]
[67 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
