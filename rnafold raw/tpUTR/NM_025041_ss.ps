%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:40:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACGGCUUCUACUCCGGCCCCCAGUGUGACUAAUCUCCUUCUCUUCGCUCCACAGGUCUAUAAAUGGGCCACAGUAGGCACCCCUUUUUAAAUCUGUAAAAUCCCCAAAUCCAUUAAAAGUGACUUCAGAGGUCCCAGAUAGGGACCAACAUUUGUUUAA\
) } def
/len { sequence length } bind def

/coor [
[51.27995300 124.20429230]
[48.52784729 116.95779419]
[46.84250641 109.42206573]
[46.25007629 101.75263214]
[31.33638000 100.14589691]
[19.10033226 109.78523254]
[3.99860930 107.94332886]
[-5.11562252 96.21871948]
[-20.02932167 94.61199188]
[-34.94301987 93.00525665]
[-49.85671997 91.39852142]
[-64.77041626 89.79178619]
[-79.68411255 88.18505096]
[-91.92016602 97.82439423]
[-107.02188873 95.98249054]
[-116.13611603 84.25788116]
[-131.04981995 82.65114594]
[-145.96351624 81.04441071]
[-160.87721252 79.43768311]
[-175.79090881 77.83094788]
[-184.27615356 88.72954559]
[-196.94316101 93.95860291]
[-210.43037415 92.24651337]
[-221.21568298 84.14853668]
[-226.53614807 71.87334442]
[-241.41566467 69.97592926]
[-256.29516602 68.07850647]
[-271.19247437 66.32634735]
[-286.10617065 64.71961212]
[-301.01986694 63.11287689]
[-315.93356323 61.50614548]
[-321.21844482 75.63133240]
[-329.85073853 87.99798584]
[-341.28784180 97.82872772]
[-354.81082153 104.50559235]
[-369.56954956 107.60886383]
[-384.63635254 106.94345856]
[-399.06405640 102.55122375]
[-411.94577026 94.70823669]
[-422.47171021 83.90753174]
[-429.98022461 70.82804871]
[-433.99932861 56.29196167]
[-434.27633667 41.21303558]
[-430.79388428 26.53913498]
[-423.77087402 13.19267941]
[-413.64874268 2.01263571]
[-401.06378174 -6.29820824]
[-386.80712891 -11.21742630]
[-371.77496338 -12.43579197]
[-356.91220093 -9.87671852]
[-343.15310669 -3.70107079]
[-331.36264038 5.70294476]
[-322.28192139 17.74418449]
[-316.48178101 31.66572380]
[-314.32684326 46.59244537]
[-299.41314697 48.19918060]
[-284.49945068 49.80591202]
[-269.58575439 51.41264725]
[-262.56301880 48.99020386]
[-254.39775085 53.19899750]
[-239.51823425 55.09641647]
[-224.63873291 56.99383545]
[-213.79946899 44.69633865]
[-197.60781860 41.23021698]
[-182.38209534 48.14989471]
[-174.18417358 62.91724777]
[-159.27047729 64.52397919]
[-144.35678101 66.13071442]
[-129.44308472 67.73744965]
[-114.52938080 69.34418488]
[-103.12697601 59.82994843]
[-87.97947693 61.24695206]
[-78.07738495 73.27135468]
[-63.16368484 74.87808990]
[-48.24998474 76.48482513]
[-33.33628464 78.09156036]
[-18.42258644 79.69828796]
[-3.50888872 81.30502319]
[7.89351892 71.79078674]
[23.04101944 73.20779419]
[32.94311523 85.23219299]
[47.85681152 86.83892822]
[52.33610153 74.36941528]
[59.76694870 63.29911423]
[69.73458862 54.31884766]
[81.66459656 48.00080109]
[94.85597229 44.76220703]
[108.52223206 44.83798218]
[121.83836365 48.26417542]
[133.99058533 54.87336349]
[144.22607422 64.30235291]
[151.89959717 76.01199341]
[156.51406860 89.31787109]
[170.54728699 84.01985931]
[184.58049011 78.72183990]
[198.61370850 73.42382812]
[196.14262390 58.57862473]
[196.61547852 43.53659439]
[200.01409912 28.87591362]
[206.20785522 15.16009521]
[214.95866394 2.91634178]
[225.93017578 -7.38473082]
[238.70068359 -15.34717655]
[252.77931213 -20.66493988]
[267.62490845 -23.13361931]
[282.66687012 -22.65832901]
[297.32699585 -19.25733376]
[311.04180908 -13.06136036]
[323.28414917 -4.30856562]
[333.58343506 6.66461611]
[341.54382324 19.43640518]
[346.85931396 33.51588821]
[349.32559204 48.36188889]
[348.84783936 63.40376282]
[345.44448853 78.06334686]
[339.24630737 91.77716064]
[330.49151611 104.01807404]
[319.51666260 114.31559753]
[306.74359131 122.27391052]
[292.66323853 127.58711243]
[277.81683350 130.05099487]
[262.77505493 129.57083130]
[248.11601257 126.16508484]
[234.40321350 119.96467590]
[222.16371155 111.20791626]
[211.86796570 100.23139954]
[203.91172791 87.45703888]
[189.87850952 92.75505066]
[175.84529114 98.05307007]
[161.81208801 103.35108185]
[159.19134521 118.12036896]
[170.54499817 127.92314911]
[181.89865112 137.72593689]
[193.25230408 147.52873230]
[204.60595703 157.33151245]
[215.95960999 167.13429260]
[232.00045776 167.40016174]
[241.67938232 180.19461060]
[237.57154846 195.70283508]
[222.82812500 202.02825928]
[208.75900269 194.31855774]
[206.15681458 178.48794556]
[194.80316162 168.68516541]
[183.44952393 158.88237000]
[172.09587097 149.07958984]
[160.74221802 139.27680969]
[149.38856506 129.47401428]
[144.52886963 136.07345581]
[138.79949951 141.89231873]
[132.32328796 146.81784058]
[125.23741913 150.75630188]
[117.69048309 153.63476562]
[109.83938599 155.40238953]
[101.84607697 156.03135681]
[93.87423706 155.51725769]
[86.08589172 153.87898254]
[78.63813019 151.15818787]
[71.67996216 147.41827393]
[65.34928131 142.74293518]
[59.77020645 137.23432922]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 82]
[5 81]
[8 78]
[9 77]
[10 76]
[11 75]
[12 74]
[13 73]
[16 70]
[17 69]
[18 68]
[19 67]
[20 66]
[25 62]
[26 61]
[27 60]
[28 58]
[29 57]
[30 56]
[31 55]
[93 130]
[94 129]
[95 128]
[96 127]
[131 147]
[132 146]
[133 145]
[134 144]
[135 143]
[136 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
