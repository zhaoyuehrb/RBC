%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 22:22:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUGACGUCCGGCCCAAGUGGGCCCAGCCCGGCCCGCGUCUCGAAGGGGCACCUGUGAACUCAAAAGGCUCUUUUCAGAGCCACCCA\
) } def
/len { sequence length } bind def

/coor [
[87.60359955 133.57676697]
[79.57513428 146.24736023]
[71.54667664 158.91795349]
[63.51821899 171.58854675]
[55.48976135 184.25914001]
[57.58334732 200.16499329]
[46.34965134 211.61854553]
[30.40620613 209.83358765]
[21.98345566 196.17939758]
[27.54261398 181.13031006]
[42.81917191 176.23068237]
[50.84762955 163.56008911]
[58.87608719 150.88949585]
[66.90454865 138.21890259]
[74.93300629 125.54831696]
[66.22563171 114.87103271]
[62.00817108 101.31571960]
[63.18656921 86.74835205]
[69.90043640 73.29708862]
[56.33706284 66.89124298]
[42.77368927 60.48539352]
[29.21031380 54.07954788]
[15.64693832 47.67370224]
[2.08356428 41.26785278]
[-11.47981071 34.86200714]
[-26.27086830 40.42978287]
[-40.63206100 33.83192444]
[-46.04314423 18.98282814]
[-39.29382324 4.69219542]
[-24.38834572 -0.56159312]
[-10.16986847 6.33844233]
[-5.07396364 21.29863358]
[8.48941040 27.70447922]
[22.05278587 34.11032486]
[35.61616135 40.51617050]
[49.17953491 46.92201996]
[62.74290848 53.32786560]
[76.30628204 59.73371124]
[90.28773499 54.30056763]
[95.96678162 40.41718292]
[96.35211182 31.06166267]
[102.09903717 26.14975739]
[108.26451111 12.47544289]
[114.42999268 -1.19887292]
[113.04881287 -16.95967674]
[125.33361053 -25.38184929]
[131.49908447 -39.05616379]
[137.66456604 -52.73048019]
[135.48966980 -68.98477173]
[148.64225769 -78.77973938]
[163.59207153 -72.03916931]
[164.96002197 -55.69717789]
[151.33888245 -46.56500626]
[145.17340088 -32.89068985]
[139.00791931 -19.21637344]
[140.83009338 -4.43364859]
[128.10430908 4.96660280]
[121.93882751 18.64091873]
[115.77335358 32.31523514]
[109.85016632 46.09622955]
[104.17111969 59.97961807]
[114.37619781 63.09939194]
[123.24456787 68.72497559]
[130.18807983 76.37732697]
[134.77487183 85.44734955]
[136.75563049 95.24384308]
[136.07588196 105.04592133]
[132.87365723 114.15602875]
[145.10159302 122.84381104]
[157.32954407 131.53158569]
[169.55747986 140.21936035]
[181.78541565 148.90715027]
[194.01335144 157.59492493]
[210.38186646 158.59677124]
[217.45535278 173.39196777]
[207.95721436 186.76048279]
[191.65830994 184.94993591]
[185.32557678 169.82286072]
[173.09764099 161.13508606]
[160.86968994 152.44731140]
[148.64175415 143.75952148]
[136.41381836 135.07174683]
[124.18588257 126.38397217]
[119.77748108 129.83155823]
[114.88556671 132.54981995]
[109.62972260 134.47229004]
[104.13845062 135.55198669]
[98.54599762 135.76249695]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[3 13]
[4 12]
[5 11]
[19 38]
[20 37]
[21 36]
[22 35]
[23 34]
[24 33]
[25 32]
[39 61]
[40 60]
[42 59]
[43 58]
[44 57]
[46 55]
[47 54]
[48 53]
[68 83]
[69 82]
[70 81]
[71 80]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
