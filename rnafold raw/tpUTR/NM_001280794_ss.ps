%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 18:56:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAUGACGAUACCCGUGACUCAGCCCUGGACACUGGUCCGAGAAGGGACAUGUGGGACGUGAGCCGGGCUCCAACAGCCUCUGUGAGAGAUGCCCCACACCAAACCCAACCCUCCCGAUGGCUGCAUUCCCUGGUCCUCCGCCUCUCCACCAGCCCCCUCCUCAUUAAAGGGAAAGAAGGGAAUUUGCAA\
) } def
/len { sequence length } bind def

/coor [
[92.39261627 429.80136108]
[78.20861053 422.30514526]
[75.36750793 406.51565552]
[86.04876709 394.54525757]
[86.54212189 379.55337524]
[76.20638275 368.88998413]
[76.49314880 353.67904663]
[87.74797821 342.91027832]
[88.24133301 327.91839600]
[88.73468781 312.92651367]
[81.42018127 299.95166016]
[89.60718536 286.41342163]
[90.10054016 271.42153931]
[90.59389496 256.42965698]
[78.70772552 252.21615601]
[68.47360229 244.81687927]
[60.72499084 234.82194519]
[56.09643173 223.03341675]
[54.97159958 210.40083313]
[57.45149231 197.94480896]
[63.34547424 186.67456055]
[72.18588257 177.50608826]
[83.26512146 171.18777466]
[95.69229126 168.23930359]
[96.92450714 153.29000854]
[98.15672302 138.34069824]
[99.38894653 123.39140320]
[86.94266510 115.01942444]
[73.56080627 121.79628754]
[60.17894363 128.57315063]
[46.79708481 135.35000610]
[38.28950882 149.36975098]
[21.90240669 148.74137878]
[14.49342155 134.11131287]
[23.68428612 120.52970123]
[40.02022552 121.96814728]
[53.40208435 115.19128418]
[66.78394318 108.41442871]
[80.16580200 101.63756561]
[89.24002838 89.69359589]
[92.18150330 74.98483276]
[95.12297821 60.27606583]
[90.24209595 45.22656250]
[100.32497406 34.26367569]
[103.26644897 19.55491066]
[106.20792389 4.84614801]
[109.14940643 -9.86261463]
[96.62176514 -20.64145660]
[91.26528931 -36.17659378]
[94.45088196 -52.20185852]
[105.21730042 -64.36672211]
[120.55844116 -69.41735077]
[123.25759888 -84.17250061]
[125.95675659 -98.92765808]
[128.65591431 -113.68280792]
[131.23364258 -128.45965576]
[133.68974304 -143.25721741]
[128.31652832 -158.13804626]
[138.03337097 -169.42662048]
[140.48947144 -184.22418213]
[142.94558716 -199.02172852]
[134.18652344 -218.56710815]
[147.90385437 -233.97579956]
[149.62709045 -248.87649536]
[151.35032654 -263.77719116]
[153.07356262 -278.67785645]
[154.79681396 -293.57855225]
[156.52005005 -308.47924805]
[144.28843689 -315.57772827]
[135.71470642 -326.77005005]
[132.06855774 -340.34439087]
[133.86920166 -354.24035645]
[140.81167603 -366.36181641]
[151.81793213 -374.89303589]
[165.20410156 -378.57058716]
[167.17218018 -393.44091797]
[169.14027405 -408.31121826]
[171.10835266 -423.18154907]
[173.07644653 -438.05187988]
[174.92216492 -452.93789673]
[176.64540100 -467.83859253]
[170.54473877 -482.43627930]
[179.69294739 -494.19039917]
[177.56784058 -503.09210205]
[181.56903076 -509.32125854]
[183.53712463 -524.19158936]
[185.50520325 -539.06188965]
[179.64544678 -553.75793457]
[188.98574829 -565.36004639]
[183.12600708 -580.05609131]
[192.46630859 -591.65814209]
[194.43438721 -606.52844238]
[181.25772095 -614.10766602]
[171.98844910 -626.15545654]
[168.04008484 -640.83459473]
[170.01470947 -655.90673828]
[177.61120605 -669.07342529]
[189.67117310 -678.32684326]
[204.35556030 -682.25592041]
[219.42507935 -680.26147461]
[232.58175659 -672.64764404]
[241.81930542 -660.57550049]
[245.72903442 -645.88598633]
[243.71476746 -630.81909180]
[236.08364868 -617.67242432]
[223.99937439 -608.45080566]
[209.30471802 -604.56036377]
[207.33662415 -589.69006348]
[213.33715820 -576.05761719]
[203.85607910 -563.39190674]
[209.85659790 -549.75952148]
[200.37553406 -537.09381104]
[198.40744019 -522.22351074]
[196.43936157 -507.35314941]
[194.59364319 -492.46716309]
[200.81756592 -478.93527222]
[191.54609680 -466.11535645]
[189.82284546 -451.21466064]
[192.18156433 -444.19696045]
[187.94676208 -436.08380127]
[185.97868347 -421.21347046]
[184.01060486 -406.34313965]
[182.04251099 -391.47280884]
[180.07443237 -376.60247803]
[193.59745789 -368.10375977]
[202.09480286 -354.51126099]
[203.82418823 -338.51629639]
[198.38938904 -323.31213379]
[186.82949829 -311.95632935]
[171.42073059 -306.75598145]
[169.69749451 -291.85531616]
[167.97425842 -276.95462036]
[166.25100708 -262.05392456]
[164.52777100 -247.15325928]
[162.80453491 -232.25256348]
[169.40020752 -226.26452637]
[172.53933716 -217.78051758]
[171.39555359 -208.66813660]
[166.10066223 -200.99632263]
[157.74313354 -196.56561279]
[155.28703308 -181.76806641]
[152.83091736 -166.97052002]
[158.37982178 -153.14811707]
[148.48730469 -140.80110168]
[146.03118896 -126.00355530]
[148.04089355 -118.87804413]
[143.41107178 -110.98365021]
[140.71191406 -96.22850037]
[138.01275635 -81.47334290]
[135.31359863 -66.71819305]
[146.28594971 -58.57124329]
[152.70527649 -46.43157959]
[153.26690674 -32.64440155]
[147.80407715 -19.90114784]
[137.33166504 -10.71410084]
[123.85816956 -6.92113781]
[120.91668701 7.78762531]
[117.97521210 22.49638748]
[115.03373718 37.20515060]
[120.12500763 51.20258713]
[109.83174133 63.21754456]
[106.89026642 77.92630768]
[103.94879150 92.63507080]
[108.76751709 92.23316193]
[114.04250336 94.53304291]
[118.42252350 99.67624664]
[120.56273651 107.18408966]
[119.39051819 115.99738312]
[114.33824921 124.62361908]
[113.10602570 139.57292175]
[111.87380981 154.52221680]
[110.64158630 169.47152710]
[126.43674469 177.13401794]
[138.06315613 190.24099731]
[143.76373291 206.77088928]
[142.69255066 224.18804932]
[135.04029846 239.83158875]
[122.00099945 251.32199097]
[105.58577728 256.92300415]
[105.09242249 271.91488647]
[104.59906769 286.90676880]
[111.87828827 300.95397949]
[103.72657013 313.41986084]
[103.23321533 328.41174316]
[102.73986053 343.40362549]
[113.26235199 354.88906860]
[112.54845428 370.08593750]
[101.53400421 380.04675293]
[101.04064941 395.03863525]
[110.91180420 407.68536377]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 189]
[5 188]
[8 185]
[9 184]
[10 183]
[12 181]
[13 180]
[14 179]
[24 172]
[25 171]
[26 170]
[27 169]
[28 39]
[29 38]
[30 37]
[31 36]
[40 163]
[41 162]
[42 161]
[44 159]
[45 158]
[46 157]
[47 156]
[52 150]
[53 149]
[54 148]
[55 147]
[56 145]
[57 144]
[59 142]
[60 141]
[61 140]
[63 135]
[64 134]
[65 133]
[66 132]
[67 131]
[68 130]
[75 124]
[76 123]
[77 122]
[78 121]
[79 120]
[80 118]
[81 117]
[83 115]
[85 114]
[86 113]
[87 112]
[89 110]
[91 108]
[92 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
