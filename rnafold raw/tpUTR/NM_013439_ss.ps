%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 07:33:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAUGGACAGCCCUCUCAAGACUGAAUGGUGAGGCCAGGUACAGUGGCGCACACCUGUAAUCCCAGCUACUCUGAAGCCUGAGGCAGAAUCAAGUGAGCCCAGGAGUUCAGGGCCAGCUUUGAUAAUGGAGCGAGAUGCCAUCUCUAGUUAAAAAUAUAUAUUAACAAUAAAGUAACAAAUUUAAAAAGAU\
) } def
/len { sequence length } bind def

/coor [
[99.02593994 144.05961609]
[89.74192810 155.84126282]
[88.41344452 162.34289551]
[84.57077789 166.55577087]
[79.95894623 167.84880066]
[70.29636383 179.32200623]
[60.63378143 190.79521179]
[57.49252319 199.38906860]
[50.71934509 202.37487793]
[51.62773895 217.92520142]
[41.47923660 229.25932312]
[26.64878273 230.02951050]
[16.89314461 241.42370605]
[7.23056364 252.89691162]
[8.39194870 268.43038940]
[-1.57072258 279.92819214]
[-16.38667679 280.93966675]
[-26.04925728 292.41290283]
[-35.71183777 303.88610840]
[-38.05446625 320.11706543]
[-53.38055801 325.95169067]
[-65.92395020 315.38781738]
[-62.78107071 299.29266357]
[-47.18504715 294.22351074]
[-37.52246857 282.75030518]
[-27.85988617 271.27709961]
[-29.38311577 256.50497437]
[-19.74732590 244.73187256]
[-4.24264574 243.23432922]
[5.41993523 231.76112366]
[7.32689428 224.60888672]
[15.33437061 220.18145752]
[14.05178738 205.38650513]
[23.87793159 193.77180481]
[39.40493393 192.52682495]
[49.16057205 181.13262939]
[58.82315445 169.65942383]
[68.48573303 158.18621826]
[77.96028900 146.55725098]
[87.24430084 134.77560425]
[73.24401855 123.78368378]
[66.38619995 108.01509094]
[67.79322815 91.48389435]
[76.55757141 78.11367035]
[90.09380341 70.80629730]
[88.87432098 55.85594940]
[87.65484619 40.90560532]
[86.43536377 25.95525742]
[85.21588898 11.00490952]
[83.99640656 -3.94543695]
[82.65528870 -18.88536453]
[73.60919952 -31.86529922]
[80.06858063 -45.28638840]
[71.02248383 -58.26632690]
[77.48186493 -71.68741608]
[75.89775085 -86.60353851]
[74.19228363 -101.50626373]
[72.48682404 -116.40899658]
[70.78136444 -131.31172180]
[61.52519608 -144.14270020]
[67.76526642 -157.66716003]
[66.05980682 -172.56988525]
[64.35434723 -187.47261047]
[52.26462936 -197.29486084]
[50.74734497 -212.43264771]
[60.18586349 -223.89781189]
[58.48040390 -238.80053711]
[56.77494049 -253.70327759]
[55.06948090 -268.60601807]
[43.76768494 -283.13504028]
[51.36167908 -298.94869995]
[49.41387558 -313.82168579]
[47.46606827 -328.69470215]
[45.51826477 -343.56768799]
[43.57045746 -358.44070435]
[41.62265015 -373.31369019]
[39.67484665 -388.18667603]
[28.13805771 -402.52984619]
[35.47364807 -418.46499634]
[33.28401184 -433.30432129]
[31.09437752 -448.14364624]
[28.90474319 -462.98297119]
[24.55015755 -471.03030396]
[26.80227852 -478.08145142]
[24.85447311 -492.95446777]
[22.90666771 -507.82745361]
[8.39550686 -512.55914307]
[-2.61964893 -523.12463379]
[-7.95173168 -537.42608643]
[-6.54205322 -552.62396240]
[1.32949424 -565.70068359]
[14.10000896 -574.05993652]
[29.23389626 -576.04193115]
[43.72631073 -571.25311279]
[54.69977570 -560.64434814]
[59.97549820 -546.32202148]
[58.50598145 -531.12976074]
[50.58300018 -518.08410645]
[37.77966309 -509.77526855]
[39.72747040 -494.90225220]
[41.67527771 -480.02926636]
[43.74406433 -465.17260742]
[45.93370056 -450.33328247]
[48.12333679 -435.49395752]
[50.31296921 -420.65463257]
[59.83910370 -413.18408203]
[61.77732086 -400.82809448]
[54.54784393 -390.13449097]
[56.49564743 -375.26150513]
[58.44345474 -360.38848877]
[60.39126205 -345.51550293]
[62.33906555 -330.64251709]
[64.28687286 -315.76950073]
[66.23468018 -300.89651489]
[75.63794708 -293.27188110]
[77.37479401 -280.88598633]
[69.97221375 -270.31146240]
[71.67767334 -255.40873718]
[73.38313293 -240.50601196]
[75.08859253 -225.60327148]
[86.87329865 -216.56687927]
[88.81517792 -201.47769165]
[79.25707245 -189.17808533]
[80.96253204 -174.27534485]
[82.66799927 -159.37261963]
[91.80217743 -147.60758972]
[85.68409729 -133.01719666]
[87.38955688 -118.11445618]
[89.09501648 -103.21172333]
[90.80047607 -88.30899811]
[94.69039917 -82.01141357]
[92.41037750 -73.15007782]
[101.35185242 -61.23793030]
[94.99709320 -46.74905396]
[103.93856812 -34.83690643]
[97.58380890 -20.34802628]
[101.37070465 -13.98796558]
[98.94675446 -5.16491556]
[100.16623688 9.78543091]
[101.38571167 24.73577881]
[102.60519409 39.68612671]
[103.82466888 54.63647079]
[105.04415131 69.58681488]
[115.92363739 72.40006256]
[125.40362549 79.09467316]
[132.10795593 89.01554871]
[134.95533752 101.02475739]
[133.32604980 113.63049316]
[127.17370605 125.17221832]
[140.79968262 131.44380188]
[154.42565918 137.71537781]
[168.05163574 143.98695374]
[181.67761230 150.25852966]
[194.62493896 141.86984253]
[210.05227661 141.83551025]
[223.03678894 150.16653442]
[229.43519592 164.20448303]
[227.20576477 179.46989441]
[217.05992126 191.09165955]
[202.23515320 195.36129761]
[187.46199036 190.91638184]
[177.45449829 179.17527771]
[175.40603638 163.88450623]
[161.78005981 157.61293030]
[148.15408325 151.34135437]
[134.52810669 145.06977844]
[120.90212250 138.79818726]
[129.85328674 150.83467102]
[138.80445862 162.87113953]
[147.75561523 174.90760803]
[156.70678711 186.94407654]
[169.52145386 194.74050903]
[179.87825012 205.59117126]
[187.06971741 218.75486755]
[190.60459900 233.33239746]
[190.24143982 248.32800293]
[186.00506592 262.71734619]
[178.18482971 275.51748657]
[167.31494141 285.85409546]
[154.13790894 293.02108765]
[139.55381775 296.52886963]
[124.55892181 296.13784790]
[110.17748260 291.87472534]
[97.39188385 284.03073120]
[87.07549286 273.14166260]
[79.93301392 259.95132446]
[76.45233917 245.36073303]
[76.87122345 230.36659241]
[81.16106415 215.99310303]
[89.02967834 203.22105408]
[91.52873993 188.43069458]
[94.02780914 173.64033508]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[5 38]
[6 37]
[7 36]
[9 35]
[12 32]
[13 30]
[14 29]
[17 26]
[18 25]
[19 24]
[45 143]
[46 142]
[47 141]
[48 140]
[49 139]
[50 138]
[51 136]
[53 134]
[55 132]
[56 130]
[57 129]
[58 128]
[59 127]
[61 125]
[62 124]
[63 123]
[66 120]
[67 119]
[68 118]
[69 117]
[71 114]
[72 113]
[73 112]
[74 111]
[75 110]
[76 109]
[77 108]
[79 105]
[80 104]
[81 103]
[82 102]
[84 101]
[85 100]
[86 99]
[149 167]
[150 166]
[151 165]
[152 164]
[153 163]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
