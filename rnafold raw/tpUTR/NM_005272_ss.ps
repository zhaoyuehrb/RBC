%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 12:47:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUCACCAUUCCUCAGGUAUAAGUUCUAUAAACAGGCUUGGAAUCUGGGUAAUUAAAAACAGAAAAUUAUAGUCAAUAUACCAUGA\
) } def
/len { sequence length } bind def

/coor [
[58.85684586 263.20773315]
[57.79735565 278.37170410]
[51.01104355 291.97372437]
[39.53276825 301.93954468]
[25.11288834 306.74948120]
[9.95032787 305.67004395]
[-3.64273286 298.86584473]
[-13.59345055 287.37445068]
[-18.38441086 272.94827271]
[-17.28503036 257.78713989]
[-10.46295547 244.20303345]
[1.04149806 234.26744080]
[15.47398376 229.49546814]
[30.63365173 230.61479187]
[37.34791183 217.20141602]
[44.06216812 203.78802490]
[50.53594208 190.25694275]
[56.76716614 176.61247253]
[62.99839020 162.96798706]
[69.22961426 149.32350159]
[75.46084595 135.67903137]
[81.69207001 122.03454590]
[73.13986969 109.96168518]
[71.75169373 95.23188019]
[77.89778900 81.77381134]
[89.93889618 73.17695618]
[104.66345215 71.73423004]
[110.89467621 58.08974838]
[117.12590027 44.44527054]
[123.35712433 30.80078888]
[129.58834839 17.15630913]
[135.81958008 3.51182961]
[129.27005005 -2.59647584]
[124.33486176 -10.05372047]
[121.28147125 -18.44435310]
[120.27270508 -27.30256653]
[121.35806274 -36.13815308]
[124.47131348 -44.46363068]
[129.43453979 -51.82114792]
[135.96826172 -57.80764771]
[143.70719910 -62.09695816]
[152.22064209 -64.45755768]
[161.03645325 -64.76506042]
[169.66728210 -63.00876236]
[177.63745117 -59.29187393]
[187.85871887 -70.27028656]
[198.07998657 -81.24871063]
[208.30125427 -92.22712708]
[202.70121765 -106.42579651]
[203.82489014 -121.64749908]
[211.44917297 -134.86994934]
[224.06025696 -143.46780396]
[239.15420532 -145.73397827]
[253.73410034 -141.21850586]
[264.90509033 -130.81794739]
[270.44915771 -116.59733582]
[269.26556396 -101.38018036]
[261.58926392 -88.18785858]
[248.94442749 -79.63972473]
[233.84167480 -77.43300629]
[219.27966309 -82.00585938]
[209.05839539 -71.02743530]
[198.83712769 -60.04902267]
[188.61585999 -49.07060242]
[195.73663330 -27.90414429]
[189.52163696 -6.33873844]
[172.05665588 7.93223953]
[149.46406555 9.74305439]
[143.23283386 23.38753510]
[137.00160217 37.03201294]
[130.77038574 50.67649460]
[124.53915405 64.32097626]
[118.30792999 77.96545410]
[126.86013031 90.03831482]
[128.24830627 104.76811981]
[122.10221100 118.22618866]
[110.06110382 126.82304382]
[95.33654785 128.26577759]
[89.10532379 141.91024780]
[82.87409973 155.55473328]
[76.64287567 169.19920349]
[70.41164398 182.84368896]
[64.18041992 196.48817444]
[63.41939545 205.82518005]
[57.47554779 210.50228882]
[50.76128769 223.91566467]
[44.04703140 237.32904053]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 87]
[15 86]
[16 85]
[17 83]
[18 82]
[19 81]
[20 80]
[21 79]
[22 78]
[27 73]
[28 72]
[29 71]
[30 70]
[31 69]
[32 68]
[45 64]
[46 63]
[47 62]
[48 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
