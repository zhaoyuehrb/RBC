%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 10:01:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGGUAUAUGUCUUCCACUUUCCAUCAUGUAUGUAAAAUUUCAUAGUAAAACUUCCUGAUAGUUUCAAUAAAGAAAUUAUCUGCAAGUUGUCUAAAGAA\
) } def
/len { sequence length } bind def

/coor [
[-8.14478588 195.84478760]
[-23.48133659 191.13265991]
[-36.89266586 182.35153198]
[-47.32635117 170.19964600]
[-60.89875793 176.58633423]
[-74.47116089 182.97302246]
[-88.04357147 189.35971069]
[-101.61597443 195.74639893]
[-115.18837738 202.13308716]
[-128.76078796 208.51977539]
[-127.66655731 223.65803528]
[-132.11854553 238.16818237]
[-141.51461792 250.08782959]
[-154.58407593 257.80496216]
[-169.55935669 260.27584839]
[-184.41519165 257.16638184]
[-197.14242554 248.89706421]
[-206.01983643 236.58624268]
[-209.84680176 221.89888000]
[-208.10577393 206.82130432]
[-201.03221130 193.39263916]
[-189.58273315 183.42900085]
[-175.30581665 178.27789307]
[-160.13227844 178.63595581]
[-146.11422729 184.45475769]
[-135.14747620 194.94737244]
[-121.57507324 188.56068420]
[-108.00266266 182.17399597]
[-94.43025970 175.78730774]
[-80.85784912 169.40061951]
[-67.28544617 163.01391602]
[-53.71303940 156.62722778]
[-56.32465363 142.92092896]
[-55.53102493 128.98060608]
[-51.37477493 115.64016724]
[-44.09980011 103.69879150]
[-34.13699722 93.87310791]
[-22.07872772 86.75413513]
[-8.64359570 82.77177429]
[5.36636114 82.16882324]
[19.11356544 84.98619080]
[31.77496529 91.06015015]
[42.59131622 100.03186798]
[50.91270447 111.36858368]
[64.85935211 105.84671021]
[78.80599976 100.32484436]
[82.47106934 88.08245850]
[92.50757599 80.17186737]
[105.26743317 79.46842957]
[116.11267853 86.22782135]
[130.22589111 81.14675903]
[144.33909607 76.06568909]
[158.45231628 70.98461914]
[172.56552124 65.90354919]
[182.92892456 53.94903183]
[197.52468872 56.91769791]
[207.88809204 44.96318054]
[222.48385620 47.93184662]
[236.59706116 42.85077667]
[250.71026611 37.76971054]
[264.82348633 32.68864059]
[278.93670654 27.60757065]
[293.04989624 22.52650261]
[307.16311646 17.44543266]
[321.27633667 12.36436462]
[335.38955688 7.28329563]
[341.89105225 -7.12176847]
[356.70358276 -12.63219547]
[371.03909302 -5.97874641]
[376.39260864 8.89120483]
[369.58798218 23.15558052]
[354.66223145 28.35157967]
[340.47061157 21.39650726]
[326.35739136 26.47757530]
[312.24420166 31.55864525]
[298.13098145 36.63971329]
[284.01776123 41.72078323]
[269.90454102 46.80185318]
[255.79133606 51.88291931]
[241.67813110 56.96398926]
[227.56492615 62.04505920]
[218.21098328 73.63614655]
[202.60575867 71.03090668]
[193.25183105 82.62199402]
[177.64659119 80.01676178]
[163.53338623 85.09783173]
[149.42016602 90.17890167]
[135.30696106 95.25996399]
[121.19374847 100.34103394]
[114.58874512 115.37725067]
[99.22598267 121.18235779]
[84.32786560 114.27149200]
[70.38121796 119.79335785]
[56.43457031 125.31523132]
[58.08496094 141.37121582]
[55.21068573 157.23982239]
[48.04573059 171.67218018]
[37.16144943 183.53465271]
[23.42100906 191.89782715]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 32]
[5 31]
[6 30]
[7 29]
[8 28]
[9 27]
[10 26]
[44 94]
[45 93]
[46 92]
[50 89]
[51 88]
[52 87]
[53 86]
[54 85]
[56 83]
[58 81]
[59 80]
[60 79]
[61 78]
[62 77]
[63 76]
[64 75]
[65 74]
[66 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
