%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 04:30:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAGCUGGAGCAGAUCGUGCUGCACAACCGGAGAAGACAGAAUUACCUCUGCUCUUUUAAUAUAUAAUGAUGGCUUUAAAUAAAAUUAGGAGAAAAUGUCGAAGCAGCA\
) } def
/len { sequence length } bind def

/coor [
[35.64164352 237.57196045]
[28.26564980 250.63316345]
[20.88965607 263.69433594]
[20.84087944 279.51547241]
[7.84523773 286.79302979]
[0.46924365 299.85421753]
[-6.90675020 312.91540527]
[-9.43054676 329.68045044]
[-26.23906517 331.89630127]
[-33.02138901 316.35809326]
[-19.96794128 305.53939819]
[-12.59194756 292.47821045]
[-5.21595383 279.41702271]
[-5.69475889 264.53012085]
[7.82846403 256.31835938]
[15.20445824 243.25715637]
[22.58045197 230.19596863]
[29.76918602 217.03079224]
[36.76919556 203.76429749]
[43.76920700 190.49780273]
[50.76921463 177.23130798]
[57.76922607 163.96481323]
[64.76923370 150.69831848]
[55.20383835 142.48329163]
[47.50694275 132.49623108]
[41.99959946 121.15371704]
[38.91152573 108.92884827]
[38.37152863 96.33155060]
[40.40213013 83.88726807]
[44.91863632 72.11506653]
[51.73265457 61.50598145]
[60.55996323 52.50252914]
[52.45035172 39.88372803]
[44.34074020 27.26492500]
[36.23112488 14.64612198]
[28.12151337 2.02731895]
[20.01190186 -10.59148407]
[11.72292614 -23.09319878]
[3.25627780 -35.47527695]
[-5.21037054 -47.85735703]
[-13.67701912 -60.23943329]
[-29.25407219 -62.90982056]
[-38.31212616 -75.86077118]
[-35.47719955 -91.40872192]
[-22.43120384 -100.32934570]
[-6.91409636 -97.33020020]
[1.86809850 -84.19061279]
[-1.29494023 -68.70608521]
[7.17170811 -56.32400513]
[15.63835621 -43.94192505]
[24.10500526 -31.55984688]
[30.57455063 -27.75828552]
[32.63070297 -18.70109558]
[40.74031830 -6.08229351]
[48.84992981 6.53650951]
[56.95954132 19.15531349]
[65.06915283 31.77411652]
[73.17876434 44.39291763]
[81.78279877 41.01136017]
[90.79531097 38.95248032]
[100.01422119 38.26244354]
[109.23280334 38.95672607]
[118.24436951 41.01975632]
[126.84684753 44.40528107]
[134.84735107 49.03738022]
[142.06648254 54.81219864]
[148.34237671 61.60024261]
[153.53430176 69.24931335]
[157.52584839 77.58789062]
[160.22752380 86.42900848]
[161.57873535 95.57441711]
[161.54919434 104.81906891]
[176.25042725 107.79792023]
[190.95166016 110.77677917]
[197.51998901 97.20077515]
[207.25880432 85.68529510]
[219.55592346 76.95420837]
[233.63832092 71.55635834]
[248.62078857 69.83106232]
[263.56149292 71.88677979]
[277.52127075 77.59426880]
[289.62258911 86.59476471]
[299.10473633 98.32249451]
[305.37167358 112.04022980]
[308.02947998 126.88566589]
[306.91101074 141.92561340]
[302.08663940 156.21463013]
[293.85961914 168.85452271]
[282.74707031 179.05072021]
[269.44760132 186.16227722]
[254.79716492 189.74217224]
[239.71672058 189.56535339]
[225.15425110 185.64294434]
[212.02516174 178.22151184]
[201.15473938 167.76756287]
[193.22633362 154.93826294]
[188.73831177 140.54005432]
[187.97280884 125.47801971]
[173.27157593 122.49916077]
[158.57032776 119.52030182]
[146.21421814 140.93620300]
[126.44600677 155.78651428]
[102.43624115 161.68946838]
[78.03572845 157.69833374]
[71.03572083 170.96482849]
[64.03571320 184.23130798]
[57.03570175 197.49780273]
[50.03569031 210.76429749]
[43.03567886 224.03079224]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[5 13]
[6 12]
[7 11]
[18 109]
[19 108]
[20 107]
[21 106]
[22 105]
[23 104]
[32 58]
[33 57]
[34 56]
[35 55]
[36 54]
[37 53]
[38 51]
[39 50]
[40 49]
[41 48]
[72 100]
[73 99]
[74 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
