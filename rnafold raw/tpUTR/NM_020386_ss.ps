%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 10:37:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAUUUACCAAAGAGAUAUUGAUAUUGAAGGAAUUUGGGAGGAGGAAAAGAAACCUGGGGUGAAUACUUAUUUUCAGUGCAUCAUUACUGUUCCAGAUUCCUAUGAUGGAUGGCAGACUCUUUAAUAAAUUGCUUACUGAUAUUAUCUUA\
) } def
/len { sequence length } bind def

/coor [
[306.98260498 641.99847412]
[301.49554443 628.03808594]
[296.00851440 614.07769775]
[290.52148438 600.11730957]
[285.03445435 586.15692139]
[279.54742432 572.19653320]
[274.06039429 558.23614502]
[260.34555054 552.54064941]
[254.58206177 538.46099854]
[260.64901733 524.11425781]
[255.16198730 510.15383911]
[249.67495728 496.19345093]
[244.18792725 482.23306274]
[238.70089722 468.27267456]
[233.21386719 454.31228638]
[223.44560242 451.05450439]
[216.97509766 442.76284790]
[216.15502930 432.05627441]
[221.50209045 422.49099731]
[216.60054016 408.31445312]
[211.69898987 394.13787842]
[200.22755432 384.63760376]
[203.03062439 369.06671143]
[198.12907410 354.89013672]
[193.22752380 340.71359253]
[188.32597351 326.53701782]
[176.85452271 317.03674316]
[179.65759277 301.46585083]
[174.17056274 287.50543213]
[168.10754395 273.78540039]
[162.04454041 260.06533813]
[155.98152161 246.34529114]
[149.91850281 232.62522888]
[143.85549927 218.90518188]
[137.79248047 205.18511963]
[131.72947693 191.46507263]
[125.66645813 177.74501038]
[119.60344696 164.02496338]
[113.54042816 150.30491638]
[107.47741699 136.58485413]
[95.25596619 128.07102966]
[96.75499725 112.32099152]
[86.54151917 101.33532715]
[73.29893494 94.29019165]
[60.05635071 87.24505615]
[46.16765213 94.16486359]
[30.86970329 91.56633759]
[20.04487228 80.44866943]
[17.85552979 65.08681488]
[25.14352226 51.38773727]
[39.10646820 44.61900330]
[54.37532806 47.38332748]
[65.07891846 58.61777878]
[67.10148621 74.00247192]
[80.34407043 81.04760742]
[93.58665466 88.09274292]
[105.18799591 78.58438110]
[93.81357574 67.58742523]
[97.57005310 53.17430496]
[86.19562531 42.17734909]
[89.95210266 27.76422310]
[85.64451599 13.39603996]
[81.33692932 -0.97214442]
[77.02935028 -15.34032822]
[62.34134293 -20.34454155]
[53.42743683 -33.04579544]
[53.71520615 -48.56020355]
[63.09400177 -60.92215347]
[77.95748138 -65.37822723]
[92.59033203 -60.21497345]
[101.36593628 -47.41776657]
[100.90988159 -31.90739632]
[91.39752960 -19.64791298]
[95.70511627 -5.27972889]
[100.01270294 9.08845520]
[104.32028961 23.45663834]
[115.38660431 33.42588806]
[111.93823242 48.86671829]
[123.00454712 58.83596802]
[119.55618286 74.27680206]
[133.55850220 68.89767456]
[148.29760742 71.68312836]
[159.37121582 81.80119324]
[163.47183228 96.22980499]
[159.37471008 110.65941620]
[148.30355835 120.78016663]
[133.56512451 123.56919098]
[119.56150055 118.19345856]
[110.47505188 106.25798035]
[123.13017273 115.75316620]
[121.19747162 130.52185059]
[127.26048279 144.24189758]
[133.32350159 157.96194458]
[139.38650513 171.68200684]
[145.44952393 185.40205383]
[151.51254272 199.12211609]
[157.57554626 212.84216309]
[163.63856506 226.56222534]
[169.70156860 240.28227234]
[175.76458740 254.00231934]
[181.82760620 267.72238159]
[187.89060974 281.44244385]
[191.61474609 283.95089722]
[194.06208801 287.20382690]
[195.15571594 290.69464111]
[194.99586487 293.94555664]
[193.83415222 296.56430054]
[205.65618896 307.07855225]
[202.50253296 321.63546753]
[207.40408325 335.81204224]
[212.30563354 349.98858643]
[217.20718384 364.16516113]
[229.02922058 374.67944336]
[225.87554932 389.23632812]
[230.77709961 403.41290283]
[235.67864990 417.58944702]
[251.49645996 430.01705933]
[247.17425537 448.82525635]
[252.66128540 462.78564453]
[258.14831543 476.74603271]
[263.63534546 490.70642090]
[269.12237549 504.66680908]
[274.60940552 518.62719727]
[288.82141113 525.00347900]
[294.18716431 539.23944092]
[288.02078247 552.74914551]
[293.50781250 566.70953369]
[298.99484253 580.66992188]
[304.48187256 594.63031006]
[309.96890259 608.59069824]
[315.45596313 622.55108643]
[320.94299316 636.51147461]
[336.01489258 635.35864258]
[350.75662231 638.70111084]
[363.85739136 646.24182129]
[374.15225220 657.31011963]
[380.72579956 670.92187500]
[382.99353027 685.86669922]
[380.75378418 700.81579590]
[374.20571899 714.43981934]
[363.93157959 725.52734375]
[350.84497070 733.09252930]
[336.10949707 736.46264648]
[321.03546143 735.33801270]
[306.96322632 729.81860352]
[295.14407349 720.39532471]
[286.62896729 707.90594482]
[282.17507935 693.46105957]
[282.17840576 678.34515381]
[286.63867188 663.90222168]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 132]
[2 131]
[3 130]
[4 129]
[5 128]
[6 127]
[7 126]
[10 123]
[11 122]
[12 121]
[13 120]
[14 119]
[15 118]
[19 116]
[20 115]
[21 114]
[23 112]
[24 111]
[25 110]
[26 109]
[28 107]
[29 102]
[30 101]
[31 100]
[32 99]
[33 98]
[34 97]
[35 96]
[36 95]
[37 94]
[38 93]
[39 92]
[40 91]
[42 89]
[43 56]
[44 55]
[45 54]
[57 80]
[59 78]
[61 76]
[62 75]
[63 74]
[64 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
