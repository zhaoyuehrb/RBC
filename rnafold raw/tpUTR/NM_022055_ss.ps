%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 12:55:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGCCCGUCCGCCCGCGCCGGGGACCCUCUCCAGGCCGCGGGGCCGCCGGGCGUGGUUUGCUUCUCUCAGUCACUGCUGGCGCUUUCUUAAUCUUUAUCCAAUAAAAUGAAACAAAAAAAAUUUUUUUAA\
) } def
/len { sequence length } bind def

/coor [
[195.01182556 107.26281738]
[202.97645569 94.55199432]
[212.72607422 83.15335083]
[198.06887817 86.34182739]
[183.41166687 89.53031158]
[168.75447083 92.71878815]
[154.09725952 95.90726471]
[139.44006348 99.09574890]
[128.64833069 109.36160278]
[113.51885223 104.73455811]
[103.04477692 113.99659729]
[89.66963196 109.92264557]
[75.01242828 113.11112213]
[60.35522079 116.29959869]
[45.69802094 119.48808289]
[31.07979584 122.85074615]
[16.50262260 126.38713074]
[1.92544925 129.92352295]
[-12.60861015 133.63311768]
[-27.09749794 137.51539612]
[-41.53916168 141.56982422]
[-55.93155670 145.79580688]
[-70.32395172 150.02180481]
[-84.71634674 154.24778748]
[-99.10874176 158.47378540]
[-112.60282898 168.73759460]
[-126.20106506 158.61216736]
[-120.23571777 142.74235535]
[-103.33472443 144.08139038]
[-88.94233704 139.85539246]
[-74.54994202 135.62940979]
[-60.15754318 131.40341187]
[-45.76514816 127.17742920]
[-40.17926788 122.22636414]
[-30.97978401 123.02651215]
[-16.49089622 119.14422607]
[-10.78877068 114.32749176]
[-1.61093485 115.34634399]
[12.96623898 111.80995941]
[27.54341316 108.27357483]
[33.35855103 103.59390259]
[42.50954056 104.83087921]
[57.16674423 101.64239502]
[71.82394409 98.45391846]
[86.48114777 95.26544189]
[96.95522308 86.00340271]
[110.33036804 90.07735443]
[122.17048645 79.58344269]
[136.25158691 84.43854523]
[150.90878296 81.25006866]
[165.56597900 78.06158447]
[180.22319031 74.87310791]
[194.88038635 71.68462372]
[209.53759766 68.49614716]
[212.64570618 64.90559387]
[216.60102844 62.80407333]
[222.83226013 49.15959167]
[229.06347656 35.51511383]
[235.29470825 21.87063217]
[223.62162781 11.26248837]
[215.79420471 -2.40917277]
[212.56356812 -17.80839157]
[214.23231506 -33.43462372]
[220.62623596 -47.76895523]
[231.11242676 -59.42175674]
[244.66186523 -67.26737976]
[259.95043945 -70.55289459]
[275.48828125 -68.97034454]
[281.39303589 -82.75925446]
[287.29779053 -96.54815674]
[293.20254517 -110.33705902]
[299.10729980 -124.12596893]
[296.62420654 -140.33602905]
[309.58847046 -150.37895203]
[324.66354370 -143.92341614]
[326.34152222 -127.61034393]
[312.89620972 -118.22121429]
[306.99145508 -104.43230438]
[301.08670044 -90.64340210]
[295.18194580 -76.85449982]
[289.27719116 -63.06559372]
[300.26699829 -53.91226959]
[308.22955322 -42.01211929]
[312.50765991 -28.33107185]
[312.74368286 -13.98270798]
[308.90930176 -0.13759050]
[301.30871582 12.07221889]
[290.55435181 21.64572334]
[277.51773071 27.79506111]
[263.25866699 30.01032829]
[248.93917847 28.10185814]
[242.70796204 41.74633789]
[236.47673035 55.39081955]
[230.24551392 69.03530121]
[243.45657349 61.93122482]
[257.56994629 56.85057449]
[272.27770996 53.90418243]
[287.25906372 53.15632629]
[302.18716431 54.62331772]
[316.73632812 58.27315140]
[330.58920288 64.02621460]
[343.44360352 71.75699615]
[355.01904297 81.29685211]
[365.06304932 92.43766785]
[373.35653687 104.93640137]
[379.71850586 118.52040863]
[384.01022339 132.89334106]
[386.13806152 147.74163818]
[386.05560303 162.74142456]
[383.76464844 177.56542969]
[379.31515503 191.89030457]
[372.80416870 205.40353394]
[364.37380981 217.81033325]
[354.20788574 228.84004211]
[342.52825928 238.25204468]
[329.58966064 245.84101868]
[315.67434692 251.44142151]
[301.08590698 254.93107605]
[286.14260864 256.23382568]
[271.17037964 255.32130432]
[256.49588013 252.21337891]
[242.43923950 246.97785950]
[229.30708313 239.72895813]
[217.38591003 230.62481689]
[206.93576050 219.86402893]
[198.18461609 207.68135071]
[191.32337952 194.34255981]
[186.50173950 180.13862610]
[183.82487488 165.37940979]
[183.35118103 150.38688660]
[185.09098816 135.48812866]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 54]
[4 53]
[5 52]
[6 51]
[7 50]
[8 49]
[10 47]
[12 45]
[13 44]
[14 43]
[15 42]
[16 40]
[17 39]
[18 38]
[19 36]
[20 35]
[21 33]
[22 32]
[23 31]
[24 30]
[25 29]
[56 94]
[57 93]
[58 92]
[59 91]
[68 81]
[69 80]
[70 79]
[71 78]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
