%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 12:29:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAUACUUGUCCCUGGAGGAUUAUCACACCCCAAAUGCAUAAUCUCAUUAAUGAUUGAGGAGAGAAAAGGAUCAGAUUGCUGUUUUCUACAAUGGAGCAGGAUAUUGCUGAAGUCUCCUGGCAUAUGUUACCGAAUCAACUGGCCUUCCAGAGGCUAAGAAAUUUCUGUUAGUAAAAGAUGUUCUUUUUCCCAA\
) } def
/len { sequence length } bind def

/coor [
[211.15458679 345.41104126]
[204.61524963 331.91152954]
[198.07589722 318.41201782]
[180.45979309 313.46875000]
[171.89233398 296.94186401]
[178.21929932 279.09555054]
[171.24845886 265.81372070]
[164.27760315 252.53187561]
[157.30676270 239.25003052]
[144.54106140 231.57629395]
[144.97885132 215.76115417]
[138.00799561 202.47930908]
[130.93038940 189.25404358]
[123.74647522 176.08622742]
[116.56256104 162.91841125]
[109.37864685 149.75059509]
[102.19473267 136.58277893]
[87.69032288 132.75888062]
[74.94830322 140.67349243]
[62.20628738 148.58808899]
[49.46426773 156.50270081]
[36.72224808 164.41729736]
[23.98023033 172.33190918]
[11.23821068 180.24650574]
[-1.43964016 188.26348877]
[-14.05250072 196.38233948]
[-13.93837547 211.80929565]
[-22.20210648 224.83673096]
[-36.20676804 231.30766296]
[-51.48352051 229.15724182]
[-63.15761185 219.07165527]
[-67.50388336 204.26916504]
[-63.13544846 189.47322083]
[-51.44626236 179.40512085]
[-36.16630554 177.27758789]
[-22.17135239 183.76948547]
[-9.55849075 175.65063477]
[-5.63051033 169.37835693]
[3.32360744 167.50448608]
[16.06562614 159.58988953]
[28.80764580 151.67527771]
[41.54966354 143.76068115]
[54.29168320 135.84606934]
[67.03369904 127.93147278]
[79.77571869 120.01686859]
[76.30342102 105.42429352]
[61.36227036 104.09690094]
[51.26833725 115.88214874]
[36.16719818 119.45079803]
[21.86555099 113.43062592]
[13.86266804 100.13651276]
[15.23582268 84.68031311]
[25.45700836 73.00525665]
[40.59597015 69.60063171]
[54.83147049 75.77559662]
[62.68966675 89.15574646]
[77.63082123 90.48314667]
[87.11750031 78.86406708]
[82.82831573 64.49037933]
[78.53913116 50.11669540]
[74.24994659 35.74300766]
[69.96075439 21.36931992]
[65.67156982 6.99563313]
[50.81579208 3.35515690]
[39.84923172 -7.16298723]
[35.64778137 -21.66175079]
[39.24361420 -36.21942902]
[49.57380295 -46.95035553]
[45.28461456 -61.32404327]
[33.92428207 -72.33555603]
[37.69920731 -86.74385834]
[22.68017578 -89.23183441]
[10.28127480 -97.95847321]
[2.93092561 -111.14910126]
[2.04023743 -126.16135406]
[7.73240614 -140.01446533]
[18.82887840 -149.98109436]
[14.53969288 -164.35478210]
[10.25050735 -178.72846985]
[5.96132231 -193.10215759]
[1.67213714 -207.47584534]
[-9.68819809 -218.48735046]
[-5.91327095 -232.89566040]
[-20.87335587 -236.37292480]
[-32.07956696 -246.87609863]
[-36.51748657 -261.57983398]
[-32.99333572 -276.52896118]
[-22.45509911 -287.70217896]
[-7.73750496 -292.09399414]
[7.20048714 -288.52301025]
[18.34063148 -277.94979858]
[22.68628693 -263.21850586]
[19.06849289 -248.29179382]
[8.46041679 -237.18484497]
[19.51395988 -227.20143127]
[16.04582405 -211.76502991]
[20.33501053 -197.39134216]
[24.62419510 -183.01765442]
[28.91337967 -168.64396667]
[33.20256424 -154.27027893]
[47.94627380 -152.01449585]
[60.29927826 -143.54615784]
[67.78114319 -130.50074768]
[68.86142731 -115.43910980]
[63.27242279 -101.34477997]
[52.07289505 -91.03304291]
[63.12643814 -81.04963684]
[59.65830231 -65.61322784]
[63.94748688 -51.23954010]
[78.46906281 -47.92451477]
[89.45465851 -37.71801376]
[93.88577271 -23.28778076]
[90.47664642 -8.47985458]
[80.04525757 2.70644784]
[84.33444214 17.08013535]
[88.62362671 31.45382309]
[92.91281891 45.82751083]
[97.20200348 60.20119858]
[101.49118805 74.57488251]
[115.19436646 80.67593384]
[128.74612427 74.24554443]
[142.29788208 67.81515503]
[144.03672791 56.03841782]
[151.17652893 46.66308594]
[161.84771729 41.95284271]
[173.34701538 42.97426224]
[182.82192993 49.35765457]
[196.57380676 43.36718750]
[210.32568359 37.37671661]
[213.54240417 22.19672012]
[225.08988953 11.83161354]
[240.52787781 10.26699543]
[253.92016602 18.10449028]
[260.11712646 32.33042526]
[256.73593140 47.47463226]
[245.07669067 57.71386337]
[229.62263489 59.11091614]
[216.31616211 51.12860107]
[202.56427002 57.11906815]
[188.81239319 63.10953903]
[183.16381836 80.51231384]
[166.30532837 88.40735626]
[148.72827148 81.36691284]
[135.17651367 87.79730225]
[121.62475586 94.22769165]
[125.42743683 111.17903900]
[115.36254883 129.39886475]
[122.54646301 142.56668091]
[129.73037720 155.73449707]
[136.91429138 168.90231323]
[144.09820557 182.07012939]
[150.96467590 188.11488342]
[151.28984070 195.50845337]
[158.26068115 208.79029846]
[171.52497864 217.41404724]
[170.58860779 232.27919006]
[177.55944824 245.56101990]
[184.53030396 258.84286499]
[191.50114441 272.12469482]
[203.33834839 273.38793945]
[212.99357605 280.14443970]
[218.12968445 290.61730957]
[217.57211304 302.14840698]
[211.57542419 311.87268066]
[218.11476135 325.37219238]
[224.65409851 338.87170410]
[239.72099304 337.38369751]
[254.36041260 341.13330078]
[266.81027222 349.64926147]
[275.57882690 361.88781738]
[279.62347412 376.36062622]
[278.47463989 391.31573486]
[272.29022217 404.94958496]
[261.83422852 415.62466431]
[268.37359619 429.12417603]
[274.91293335 442.62371826]
[281.45227051 456.12322998]
[287.99160767 469.62274170]
[294.53094482 483.12225342]
[306.87762451 494.74102783]
[299.13082886 509.82159424]
[282.49508667 506.55224609]
[281.03143311 489.66159058]
[274.49209595 476.16207886]
[267.95275879 462.66256714]
[261.41342163 449.16305542]
[254.87406921 435.66354370]
[248.33471680 422.16400146]
[233.47654724 423.75143433]
[218.94453430 420.15289307]
[206.49723816 411.78393555]
[197.64773560 399.63864136]
[193.47972107 385.17153931]
[194.51477051 370.12332153]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 166]
[2 165]
[3 164]
[6 159]
[7 158]
[8 157]
[9 156]
[11 154]
[12 153]
[13 151]
[14 150]
[15 149]
[16 148]
[17 147]
[18 45]
[19 44]
[20 43]
[21 42]
[22 41]
[23 40]
[24 39]
[25 37]
[26 36]
[46 57]
[47 56]
[58 119]
[59 118]
[60 117]
[61 116]
[62 115]
[63 114]
[68 109]
[69 108]
[71 106]
[77 100]
[78 99]
[79 98]
[80 97]
[81 96]
[83 94]
[120 145]
[121 144]
[122 143]
[127 140]
[128 139]
[129 138]
[174 188]
[175 187]
[176 186]
[177 185]
[178 184]
[179 183]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
