%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 19:12:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUCUGCAAGACCUUUGGCUCACAGAACUGCAGGGUAUGGUGAGAAACCAACUACGGAUUGCUGCAAACCACACCUUCUCUUUCUUAUGUCUUUUUACUACAAACUACAAGACAAUUGUUGAAACCUGCUAUACAUGUUUAUUUUAAUAAAUUGAUGGCAA\
) } def
/len { sequence length } bind def

/coor [
[87.62094116 137.90365601]
[86.75437164 122.92916870]
[79.26690674 123.36257935]
[70.82848358 135.76391602]
[62.39006042 148.16523743]
[53.95163727 160.56657410]
[45.51321411 172.96791077]
[48.25727844 188.30113220]
[39.52285767 200.75764465]
[24.88805771 203.27919006]
[16.44963455 215.68052673]
[14.19225025 224.58224487]
[7.72716475 228.23739624]
[-0.94869363 240.47380066]
[-5.17753649 256.89187622]
[-22.12464905 257.37326050]
[-27.27865982 241.22172546]
[-13.18509293 231.79794312]
[-4.50923491 219.56153870]
[4.04830313 207.24209595]
[12.48672581 194.84077454]
[9.46058655 180.30192566]
[17.84168625 167.60499573]
[33.11188507 164.52947998]
[41.55030823 152.12815857]
[49.98873138 139.72682190]
[58.42715073 127.32549286]
[66.86557770 114.92415619]
[74.41884613 104.10561371]
[84.60841370 98.37910461]
[70.27279663 93.96435547]
[55.93717575 89.54960632]
[41.60155487 85.13485718]
[27.26593590 80.72010803]
[12.63288307 77.42256927]
[-2.21067548 75.26184082]
[-17.05423355 73.10110474]
[-26.04622269 74.96673584]
[-32.16194916 70.75302887]
[-46.96110916 68.30662537]
[-61.76026917 65.86022186]
[-76.55942535 63.41381836]
[-90.38665009 71.54938507]
[-105.31628418 65.67694855]
[-109.89559937 50.30133438]
[-100.61172485 37.21740341]
[-84.58646393 36.46202469]
[-74.11302185 48.61465836]
[-59.31386566 51.06106186]
[-44.51470566 53.50746536]
[-29.71554756 55.95386887]
[-14.89350033 58.25754547]
[-0.04994145 60.41827774]
[14.79361725 62.57901382]
[5.34841251 50.92619705]
[4.40775442 35.95571899]
[12.32003784 23.21226120]
[26.15475655 17.41566467]
[40.78789139 20.71284103]
[50.79970551 31.88260269]
[52.48208618 46.78795624]
[45.21191788 59.90834808]
[31.68068695 66.38449097]
[46.01630402 70.79924011]
[60.35192490 75.21398926]
[74.68754578 79.62873840]
[89.02316284 84.04348755]
[78.55902100 73.29631805]
[68.09487152 62.54914856]
[54.51068115 56.18756485]
[43.31007004 46.21027756]
[35.42666626 33.44892883]
[31.51758766 18.96724892]
[31.90867615 3.97234750]
[36.56732941 -10.28587627]
[45.10523224 -22.61893082]
[56.81070328 -31.99879837]
[70.70803833 -37.64362335]
[85.63883209 -39.08288193]
[100.35852814 -36.19660187]
[113.64016724 -29.22537231]
[124.37666321 -18.75027847]
[131.67308044 -5.64446735]
[134.92123413 8.99962902]
[133.85035706 23.96135330]
[128.54972839 37.99357986]
[119.45812988 49.92962265]
[115.16573334 64.30235291]
[110.87333679 78.67507935]
[121.53092957 68.11970520]
[132.18850708 57.56433487]
[142.84609985 47.00896454]
[153.50367737 36.45359039]
[164.16127014 25.89822006]
[158.07073975 11.99606419]
[157.41743469 -3.16763091]
[162.28971863 -17.54209900]
[172.02864075 -29.18331146]
[185.31709290 -36.51689148]
[200.35792542 -38.55103302]
[215.11698914 -35.01063156]
[227.59825134 -26.37449837]
[236.11370850 -13.81060219]
[239.51170349 0.98189497]
[237.33271790 16.00242996]
[229.87142944 29.21959686]
[218.13690186 38.84588242]
[203.71615601 43.57941437]
[188.55946350 42.78001785]
[174.71664429 36.55580521]
[164.05905151 47.11117554]
[153.40147400 57.66654968]
[142.74388123 68.22192383]
[132.08630371 78.77729034]
[121.42871094 89.33266449]
[135.84213257 85.17897034]
[146.61827087 74.74465942]
[160.97662354 70.40439606]
[175.72837830 73.12208557]
[187.59735107 82.29416656]
[193.94763184 95.88365173]
[193.36888123 110.87248230]
[185.98963928 123.93183899]
[173.44874573 132.16140747]
[158.53135681 133.73352051]
[144.55043030 128.29901123]
[134.61231995 117.06739807]
[120.56161499 111.81594849]
[130.37458801 123.16079712]
[140.18756104 134.50564575]
[150.00054932 145.85047913]
[159.81352234 157.19532776]
[169.62649536 168.54017639]
[177.64784241 173.01170349]
[179.51670837 180.19952393]
[189.10920715 191.73138428]
[197.04289246 196.35665894]
[198.77287292 203.57916260]
[208.14135742 215.29374695]
[217.50984192 227.00834656]
[226.87832642 238.72293091]
[236.24681091 250.43751526]
[245.61529541 262.15209961]
[261.07772827 267.61514282]
[263.81140137 283.78485107]
[251.00410461 294.02719116]
[235.83091736 287.80572510]
[233.90071106 271.52056885]
[224.53222656 259.80599976]
[215.16374207 248.09141541]
[205.79525757 236.37681580]
[196.42677307 224.66223145]
[187.05828857 212.94764709]
[177.57736206 201.32388306]
[167.98484802 189.79203796]
[158.28164673 178.35314941]
[148.46867371 167.00830078]
[138.65570068 155.66346741]
[128.84272766 144.31861877]
[119.02974701 132.97377014]
[109.21677399 121.62892914]
[101.72930908 122.06233978]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 28]
[4 27]
[5 26]
[6 25]
[7 24]
[10 21]
[11 20]
[13 19]
[14 18]
[30 67]
[31 66]
[32 65]
[33 64]
[34 63]
[35 54]
[36 53]
[37 52]
[39 51]
[40 50]
[41 49]
[42 48]
[89 115]
[90 114]
[91 113]
[92 112]
[93 111]
[94 110]
[128 161]
[129 160]
[130 159]
[131 158]
[132 157]
[133 156]
[135 155]
[136 154]
[138 153]
[139 152]
[140 151]
[141 150]
[142 149]
[143 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
