%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 15:03:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCUCAGAUGAAACCCAAGACCAUGAUCACAUAUGCAGCCUCAAAUGUUACACAGAUAAAACUAGCCAAGGGCACCUGUAACUGGGAAUCUGAGUUUGACCUAAAAGUCAUUAAAAUAACAUGAAUCACAUUAAAGGAAGAAUUUUGACCUGCA\
) } def
/len { sequence length } bind def

/coor [
[6.53605223 321.23739624]
[2.94631696 335.80154419]
[-0.64341795 350.36566162]
[-4.23315287 364.92977905]
[-2.15306139 381.75564575]
[-17.74553299 388.41229248]
[-28.45847702 375.27194214]
[-18.79727936 361.34005737]
[-15.20754528 346.77590942]
[-11.61781025 332.21179199]
[-8.02807522 317.64767456]
[-18.48862267 328.39834595]
[-31.25512314 336.27340698]
[-45.55667114 340.79730225]
[-60.52967453 341.69686890]
[-75.26998138 338.91778564]
[-88.88751221 332.62786865]
[-100.55995941 323.20693970]
[-109.58249664 311.22387695]
[-115.41028595 297.40228271]
[-117.69142914 282.57675171]
[-116.28817749 267.64251709]
[-111.28525543 253.50141907]
[-102.98477173 241.00733948]
[-91.88795471 230.91474915]
[-78.66487885 223.83305359]
[-64.11402130 220.18992615]
[-49.11402893 220.20532227]
[-34.57067871 223.87831116]
[-21.36216545 230.98713684]
[-10.28608894 241.10249329]
[-2.01127481 253.61358643]
[2.96260381 267.76492310]
[4.33519936 282.70199585]
[2.02489018 297.51840210]
[11.51157093 285.89932251]
[20.99825096 274.28024292]
[30.48493195 262.66116333]
[39.97161102 251.04209900]
[47.98860168 238.36424255]
[54.41898727 224.81248474]
[60.84937668 211.26072693]
[55.62285233 197.36039734]
[61.95112991 183.52539062]
[76.56650543 178.13757324]
[82.99689484 164.58581543]
[89.42728424 151.03407288]
[95.85767365 137.48231506]
[102.28806305 123.93054962]
[80.23893738 107.26492310]
[89.65971375 85.18257904]
[86.95588684 70.42828369]
[76.85777283 58.24884796]
[82.17417908 44.33536148]
[79.47035217 29.58106232]
[76.76652527 14.82676411]
[74.06270599 0.07246517]
[71.35887909 -14.68183327]
[60.38747025 -19.43512154]
[53.16817093 -28.81523132]
[51.41804504 -40.40013123]
[55.46053314 -51.26880646]
[64.17321777 -58.73773575]
[62.06568146 -73.58893585]
[59.95814514 -88.44014740]
[57.85060883 -103.29135132]
[42.81809998 -110.98509216]
[35.38806152 -125.96478271]
[38.30068588 -142.26187134]
[50.21826553 -153.51292419]
[47.81209946 -168.31867981]
[45.40592957 -183.12443542]
[36.89711380 -197.78855896]
[48.63267517 -210.02427673]
[63.63894653 -202.13452148]
[60.21168137 -185.53060913]
[62.61785126 -170.72485352]
[65.02401733 -155.91909790]
[77.47753143 -151.02026367]
[85.94072723 -140.51423645]
[88.11032104 -127.08915710]
[83.31131744 -114.24897003]
[72.70181274 -105.39888763]
[74.80934906 -90.54768372]
[76.91688538 -75.69647217]
[79.02442169 -60.84527206]
[94.28121185 -50.80420685]
[97.46537781 -32.49671173]
[86.11317444 -17.38565826]
[88.81700134 -2.63136029]
[91.52082825 12.12293816]
[94.22465515 26.87723732]
[96.92848206 41.63153458]
[106.83319855 52.75564575]
[101.71018219 67.72445679]
[104.41400909 82.47875977]
[116.83008575 87.34982300]
[124.02503967 100.83899689]
[137.16381836 93.60210419]
[150.30259705 86.36521149]
[163.44136047 79.12831879]
[167.59710693 63.88019562]
[181.35897827 56.10933304]
[196.56231689 60.42605209]
[204.18725586 74.26931763]
[199.71003723 89.42617035]
[185.78692627 96.90431213]
[170.67825317 92.26709747]
[157.53948975 99.50399017]
[144.40071106 106.74087524]
[131.26193237 113.97776794]
[145.00874329 107.97566986]
[159.94857788 106.63359833]
[174.54502869 110.08956146]
[187.29698181 117.98815918]
[196.89300537 129.51708984]
[202.34625244 143.49070740]
[203.09590149 158.47196960]
[199.06486511 172.92018127]
[190.66769409 185.34947205]
[178.76795959 194.48162842]
[164.58943176 199.37747192]
[149.59024048 199.53352356]
[135.31291199 194.93373108]
[123.22574615 186.05114746]
[114.57178497 173.79925537]
[110.24101257 159.43803406]
[110.67880249 144.44442749]
[115.83981323 130.36094666]
[109.40943146 143.91270447]
[102.97904205 157.46444702]
[96.54865265 171.01620483]
[90.11826324 184.56796265]
[95.18826294 199.29660034]
[88.47388458 212.94841003]
[74.40113068 217.69111633]
[67.97074127 231.24287415]
[61.54035568 244.79463196]
[74.62057495 237.45242310]
[89.58335114 236.39633179]
[103.56518555 241.82847595]
[113.89032745 252.70925903]
[118.58278656 266.95639038]
[116.74455261 281.84332275]
[108.72741699 294.52108765]
[96.06565094 302.56347656]
[81.18241119 304.43136597]
[66.92595673 299.76727295]
[56.02461624 289.46383667]
[50.56463623 275.49285889]
[51.59068680 260.52877808]
[42.10400772 272.14785767]
[32.61732483 283.76690674]
[23.13064575 295.38598633]
[13.64396477 307.00506592]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[3 9]
[4 8]
[35 155]
[36 154]
[37 153]
[38 152]
[39 151]
[40 138]
[41 137]
[42 136]
[45 133]
[46 132]
[47 131]
[48 130]
[49 129]
[51 96]
[52 95]
[54 93]
[55 92]
[56 91]
[57 90]
[58 89]
[63 86]
[64 85]
[65 84]
[66 83]
[70 78]
[71 77]
[72 76]
[98 111]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
