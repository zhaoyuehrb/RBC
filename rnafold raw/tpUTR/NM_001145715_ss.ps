%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 08:54:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAGCUCCCUACCUCCUAAACCAACAACCCAGUGCUAAAGGAUAACUUCUUUAAGAAGCAGCAGUCCUCUAUCUUAGUGUAACCCAAAUGUGAAGCUUUUAAAACUUGACAUUAAUAAAAUGUUCAACACUUU\
) } def
/len { sequence length } bind def

/coor [
[104.11404419 148.00410461]
[90.00625610 147.13220215]
[76.75859833 142.20375061]
[65.51126862 133.64292908]
[53.27425385 142.31791687]
[41.03723526 150.99290466]
[47.00582504 164.81568909]
[49.96968079 179.57743835]
[49.79923630 194.63282776]
[46.50193787 209.32369995]
[40.22193146 223.00781250]
[31.23375511 235.08699036]
[19.93032837 245.03315735]
[6.80579138 252.41151428]
[-7.56610870 256.89950562]
[-22.55709267 258.30096436]
[-37.51182175 256.55459595]
[-51.77653503 251.73677063]
[-64.72764587 244.05805969]
[-75.79898071 233.85418701]
[-84.50656128 221.57119751]
[-90.46971130 207.74604797]
[-93.42775726 192.98313904]
[-93.25138855 177.92782593]
[-89.94831085 163.23825073]
[-83.66292572 149.55661011]
[-74.66999817 137.48097229]
[-63.36265945 127.53925323]
[-50.23521805 120.16605377]
[-35.86155319 115.68370056]
[-20.87001991 114.28814697]
[-5.91597986 116.04039764]
[8.34683895 120.86385345]
[21.29492569 128.54765320]
[32.36224747 138.75588989]
[44.59926987 130.08090210]
[56.83628845 121.40591431]
[51.85309219 101.78732300]
[55.36800385 81.85325623]
[66.76062775 65.12216187]
[58.22861481 52.78503418]
[49.69659805 40.44791031]
[41.16458130 28.11078262]
[32.63256454 15.77365685]
[17.33953094 12.81377316]
[8.86259937 0.18063037]
[11.77864265 -14.38069820]
[3.24662566 -26.71782494]
[-10.96666431 -33.66713715]
[-11.84221458 -48.53598785]
[-20.37423134 -60.87311172]
[-28.90624809 -73.21024323]
[-43.95180130 -79.73429871]
[-45.55551529 -96.05484009]
[-32.06762695 -105.38269043]
[-17.36331749 -98.12216187]
[-16.56912231 -81.74225616]
[-8.03710461 -69.40512848]
[0.49491191 -57.06800461]
[14.09793568 -51.00112534]
[15.58375168 -35.24983978]
[24.11576843 -22.91271400]
[38.76922989 -20.50197029]
[47.59765625 -8.11191177]
[44.96968842 7.24163961]
[53.50170517 19.57876587]
[62.03372192 31.91589355]
[70.56574249 44.25301743]
[79.09775543 56.59014511]
[90.57296753 52.75118637]
[102.64278412 51.89246368]
[114.54591370 54.06814194]
[125.53154755 59.14098358]
[134.90676880 66.79102325]
[142.08024597 76.53572845]
[146.59948730 87.76044464]
[148.17945862 99.75718689]
[163.00817871 102.01747131]
[177.83691406 104.27775574]
[192.66563416 106.53804016]
[207.49436951 108.79832458]
[217.13066101 96.92024231]
[231.32489014 91.49613190]
[246.22923279 93.88916016]
[257.85684204 103.35778809]
[263.14816284 117.28141785]
[277.97689819 119.54170990]
[292.94033813 120.58805084]
[307.93933105 120.41352081]
[322.93832397 120.23899841]
[337.93728638 120.06446838]
[352.93627930 119.88993835]
[366.64550781 111.99259186]
[379.46194458 119.58128357]
[394.46090698 119.40675354]
[409.45989990 119.23222351]
[417.56167603 106.10343933]
[431.48510742 99.45956421]
[446.78732300 101.42063904]
[458.58541870 111.36087799]
[463.11468506 126.10840607]
[458.92980957 140.95732117]
[447.36621094 151.16940308]
[432.11376953 153.48600769]
[418.03948975 147.16792297]
[409.63442993 134.23121643]
[394.63543701 134.40574646]
[379.63647461 134.58026123]
[367.00009155 142.46513367]
[353.11080933 134.88891602]
[338.11181641 135.06344604]
[323.11285400 135.23797607]
[308.11386108 135.41250610]
[293.11486816 135.58703613]
[303.41839600 146.48829651]
[304.49929810 161.44929504]
[295.86981201 173.71844482]
[281.42425537 177.75891113]
[267.68157959 171.74731445]
[260.84362793 158.39657593]
[263.99618530 143.73161316]
[275.71661377 134.37043762]
[260.88787842 132.11015320]
[251.68856812 143.82502747]
[237.76802063 149.39944458]
[222.82754517 147.24334717]
[210.89393616 137.83666992]
[205.23406982 123.62705231]
[190.40534973 121.36676788]
[175.57662964 119.10648346]
[160.74789429 116.84619141]
[145.91917419 114.58590698]
[139.71028137 127.28392792]
[130.08363342 137.63368225]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 37]
[5 36]
[6 35]
[40 69]
[41 68]
[42 67]
[43 66]
[44 65]
[47 62]
[48 61]
[50 59]
[51 58]
[52 57]
[77 132]
[78 131]
[79 130]
[80 129]
[81 128]
[86 123]
[87 122]
[88 114]
[89 113]
[90 112]
[91 111]
[92 110]
[94 108]
[95 107]
[96 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
