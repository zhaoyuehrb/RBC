%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 03:10:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCCAGCUCUAUCACCACUCUCCUGCCAACCCUUGUUCUACAAUCUAAACCAAACAUGUGCUAGGAAGAGAA\
) } def
/len { sequence length } bind def

/coor [
[54.45145798 237.40248108]
[47.89059830 250.98988342]
[38.03588104 262.41558838]
[25.55921745 270.90060425]
[11.31128502 275.86636353]
[-3.73646665 276.97433472]
[-18.55805779 274.14892578]
[-32.14292908 267.58282471]
[-43.56483841 257.72369385]
[-52.04502106 245.24375916]
[-57.00528717 230.99391174]
[-58.10743713 215.94573975]
[-55.27632141 201.12522888]
[-48.70497131 187.54289246]
[-38.84143448 176.12480164]
[-26.35822105 167.64942932]
[-12.10645866 162.69467163]
[2.94214439 161.59832764]
[17.76154900 164.43516541]
[31.34134483 171.01176453]
[41.14265442 159.65682983]
[50.94396210 148.30191040]
[60.74527359 136.94699097]
[70.30663300 125.38928223]
[79.62384796 113.63388062]
[88.94106293 101.87847900]
[98.01005554 89.93053436]
[106.82682800 77.79528046]
[115.38753510 65.47804260]
[123.68840790 52.98422241]
[123.60877228 48.45407486]
[124.82913971 44.50531006]
[127.01530457 41.46971512]
[129.76077271 39.53914642]
[132.63789368 38.75424957]
[135.24864197 39.01030731]
[145.96572876 28.51535606]
[156.68281555 18.02040482]
[167.39990234 7.52545547]
[161.38807678 -6.41091108]
[160.82051086 -21.57805634]
[165.77398682 -35.92475128]
[175.57856750 -47.51071548]
[188.90826416 -54.76905441]
[203.96035767 -56.71812439]
[218.69917297 -53.09434128]
[231.13140869 -44.38778305]
[239.57568359 -31.77594376]
[242.89001465 -16.96447372]
[240.62614441 -1.95649803]
[233.09024048 11.21827507]
[221.30148315 20.77806664]
[206.85420227 25.42999268]
[191.70227051 24.54491997]
[177.89485168 18.24254608]
[167.17776489 28.73749542]
[156.46067810 39.23244476]
[145.74359131 49.72739792]
[136.18222046 61.28509521]
[127.88135529 73.77891541]
[126.77171326 81.31294250]
[118.96208191 86.61206055]
[110.14530945 98.74731445]
[108.24776459 106.84758759]
[100.69646454 111.19570160]
[91.37924957 122.95110321]
[82.06203461 134.70649719]
[79.05828857 143.65348816]
[72.10019684 146.74829102]
[62.29888916 158.10322571]
[52.49757767 169.45814514]
[42.69626999 180.81306458]
[51.18608856 193.28645325]
[56.15735626 207.53247070]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 72]
[21 71]
[22 70]
[23 69]
[24 67]
[25 66]
[26 65]
[27 63]
[28 62]
[29 60]
[30 59]
[36 58]
[37 57]
[38 56]
[39 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
