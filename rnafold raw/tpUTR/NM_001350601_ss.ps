%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 08:31:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACGAAGCAAGAAGGCCCCUGCCAAAUGCAGGUCCCCAGGUCUUAGACUUCUCAGCCUCCAGAACUAUAAGAAAUAAAUCUCUGUUCUCUAUAA\
) } def
/len { sequence length } bind def

/coor [
[61.01848221 141.64683533]
[52.07230377 130.93466187]
[45.99506378 118.37074280]
[43.15055084 104.70715332]
[43.70903397 90.76180267]
[29.35492706 86.40753174]
[15.00082207 82.05326080]
[0.64671749 77.69898987]
[-9.78931141 86.87069702]
[-23.29780006 89.61621094]
[-36.27940369 85.31448364]
[-45.32993317 75.20763397]
[-48.13294601 62.04477310]
[-62.33689880 57.22317886]
[-76.54084778 52.40158844]
[-90.74480438 47.57999420]
[-104.94875336 42.75840378]
[-119.15270996 37.93681335]
[-133.76086426 34.53066635]
[-148.63253784 32.57277298]
[-163.50421143 30.61488152]
[-178.37588501 28.65698814]
[-193.24755859 26.69909668]
[-206.79945374 35.28544235]
[-221.91432190 29.90766907]
[-226.99731445 14.69113827]
[-218.14920044 1.30867434]
[-202.15748596 0.02615647]
[-191.28965759 11.82742310]
[-176.41798401 13.78531647]
[-161.54631042 15.74320889]
[-146.67463684 17.70110130]
[-131.80296326 19.65899467]
[-138.94313049 6.46740103]
[-134.95358276 -7.99232101]
[-122.05924225 -15.65625095]
[-107.45102692 -12.25035572]
[-99.27568054 0.32595938]
[-102.09243774 15.05911446]
[-114.33111572 23.73285866]
[-100.12716675 28.55445099]
[-85.92321014 33.37604523]
[-71.71926117 38.19763565]
[-57.51530838 43.01922607]
[-43.31135559 47.84082031]
[-30.31275940 37.96297836]
[-13.82390022 37.70650482]
[-0.25560659 47.36658859]
[5.00098753 63.34488678]
[19.35509300 67.69915771]
[33.70919800 72.05342865]
[48.06330109 76.40769958]
[56.65185928 62.91960144]
[68.64659119 52.34518814]
[83.10499573 45.51535797]
[98.89096069 42.96678543]
[114.76406860 44.89973068]
[129.47706604 51.16230774]
[141.87382507 61.26242065]
[150.98025513 74.40642548]
[156.08079529 89.56150818]
[156.77465820 105.53681183]
[171.38281250 108.94295502]
[185.99096680 112.34909821]
[200.59912109 115.75524902]
[215.20727539 119.16139221]
[224.07339478 110.89777374]
[235.73191833 108.05997467]
[247.17076111 111.25917816]
[255.49401855 119.56237030]
[258.65496826 130.76034546]
[273.00906372 135.11462402]
[287.36315918 139.46888733]
[301.18139648 131.79869080]
[316.35281372 136.22628784]
[323.87649536 150.12484741]
[319.28875732 165.24861145]
[305.31143188 172.62490845]
[290.23699951 167.87751770]
[283.00888062 153.82299805]
[268.65478516 149.46871948]
[254.30068970 145.11445618]
[238.89659119 154.73582458]
[220.99742126 150.15525818]
[211.80113220 133.76954651]
[197.19297791 130.36340332]
[182.58482361 126.95726013]
[167.97666931 123.55110931]
[153.36849976 120.14496613]
[146.87948608 132.50123596]
[137.58427429 142.91200256]
[126.03927612 150.75404358]
[112.93556976 155.55796814]
[99.05754089 157.03620911]
[85.23593140 155.10026550]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 52]
[6 51]
[7 50]
[8 49]
[13 45]
[14 44]
[15 43]
[16 42]
[17 41]
[18 40]
[19 33]
[20 32]
[21 31]
[22 30]
[23 29]
[62 89]
[63 88]
[64 87]
[65 86]
[66 85]
[71 82]
[72 81]
[73 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
