%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 21:09:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGUUCUUCGGGCCCUGUCCUGGCCCAGGCCUCUGCCCUCUGCCCACCCAGCGUCAGCCCCCAGAAAAAAGGCAAUAAAGACGAGUCUCCAUU\
) } def
/len { sequence length } bind def

/coor [
[205.51518250 244.80578613]
[196.30198669 232.96867371]
[187.08879089 221.13156128]
[172.35420227 223.31265259]
[158.41348267 217.78884888]
[149.04751587 205.95056152]
[146.85018921 190.91499329]
[152.51069641 176.70562744]
[143.29751587 164.86853027]
[134.08432007 153.03141785]
[124.67667389 141.34826660]
[115.07714844 129.82225037]
[105.47762299 118.29622650]
[91.05788422 116.87586212]
[81.78504944 105.74210358]
[82.99636078 91.30329895]
[73.39683533 79.77728271]
[63.79730606 68.25126648]
[49.02027893 62.59882736]
[46.82057571 47.86754990]
[37.03179169 36.50182724]
[27.05642128 25.29950523]
[17.08105278 14.09718227]
[7.10568428 2.89486027]
[-6.58439255 5.27634954]
[-19.54317665 0.57051021]
[-28.37453651 -9.87416077]
[-30.82151413 -23.22066307]
[-26.34236717 -35.91359711]
[-35.94189453 -47.43961334]
[-45.54142380 -58.96562958]
[-60.49355316 -55.69571686]
[-75.24954224 -59.76013184]
[-86.41856384 -70.22490692]
[-91.43405914 -84.68531799]
[-89.14350891 -99.81845856]
[-80.07326508 -112.14685059]
[-66.30760193 -118.83751678]
[-51.00976181 -118.35298920]
[-37.69508362 -110.80461884]
[-29.42318344 -97.92695618]
[-28.09487915 -82.67919159]
[-34.01540756 -68.56516266]
[-24.41587830 -57.03914261]
[-14.81635094 -45.51312637]
[1.42498088 -47.15543365]
[15.62341690 -38.77127457]
[22.15806770 -23.45284653]
[18.30800629 -7.08050823]
[28.28337479 4.12181377]
[38.25874329 15.32413578]
[48.23411179 26.52645874]
[55.17032242 29.48643875]
[58.34659195 38.26802063]
[72.43699646 43.09604263]
[75.32332611 58.65174103]
[84.92285156 70.17775726]
[94.52237701 81.70377350]
[108.94211578 83.12413788]
[118.21495056 94.25789642]
[117.00363922 108.69670105]
[126.60316467 120.22271729]
[136.20269775 131.74873352]
[144.26489258 136.46102905]
[145.92143250 143.81822205]
[155.13461304 155.65533447]
[164.34780884 167.49244690]
[179.51193237 165.49333191]
[193.54801941 171.31443787]
[202.72485352 183.29992676]
[204.65737915 198.17007446]
[198.92590332 211.91838074]
[208.13909912 223.75547791]
[217.35227966 235.59259033]
[231.32081604 229.86695862]
[246.31623840 228.12344360]
[261.22579956 230.49145508]
[274.94311523 236.79524231]
[286.45025635 246.56704712]
[294.89334106 259.08169556]
[299.64581299 273.41058350]
[300.35504150 288.49035645]
[296.96835327 303.20202637]
[289.73706055 316.45385742]
[279.19781494 327.26251221]
[266.13269043 334.82589722]
[251.51118469 338.58273315]
[236.41830444 338.25430298]
[221.97407532 333.86492920]
[209.25032043 325.74035645]
[199.19125366 314.48345947]
[192.54331970 300.92959595]
[189.79981995 286.08453369]
[191.16435242 271.04986572]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 74]
[2 73]
[3 72]
[8 67]
[9 66]
[10 65]
[11 63]
[12 62]
[13 61]
[16 58]
[17 57]
[18 56]
[20 54]
[21 52]
[22 51]
[23 50]
[24 49]
[29 45]
[30 44]
[31 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
