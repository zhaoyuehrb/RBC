%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 16:59:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACACUUUCCUGCUCCUCUCUGUCUCUAGCACACAACUGUGAAUGUCCUGUGGAAUUAUGCCUUCAGUUCUUUUCCAAAUCAUUCCUAGCCAAAGCUCUGACUCGUUACCUAUGUGUUUUUUAAUAAAUCUGAAAUAGGCUACUGGUAA\
) } def
/len { sequence length } bind def

/coor [
[143.24195862 191.52679443]
[141.88671875 206.46543884]
[136.78726196 220.57202148]
[128.27703857 232.92419434]
[116.91246033 242.71430969]
[103.43659973 249.30227661]
[88.73056030 252.25732422]
[73.75587463 251.38624573]
[59.49164200 246.74601746]
[46.87052536 238.63999939]
[36.71773529 227.59822083]
[29.69709778 214.34263611]
[26.26765442 199.73992920]
[26.65363121 184.74490356]
[30.82979584 170.33796692]
[38.52309036 157.46112061]
[49.23050308 146.95629883]
[62.25193405 139.51034546]
[76.73600006 135.61009216]
[91.73566437 135.51057434]
[106.27021027 139.21829224]
[119.38631439 146.48861694]
[111.61591339 133.65815735]
[103.84550476 120.82769012]
[91.22716522 119.27739716]
[81.76972198 110.78135681]
[78.88073730 98.40073395]
[83.60114288 86.59633636]
[76.10114288 73.60595703]
[68.60114288 60.61557770]
[54.52285385 62.20789337]
[40.94556046 58.31395340]
[29.91912079 49.55614471]
[23.09508133 37.28855896]
[21.47934341 23.38769531]
[25.28400040 9.96546173]
[33.90018082 -0.95169026]
[26.67387390 -14.09629059]
[19.44756889 -27.24089050]
[6.01903725 -35.60660172]
[6.66787529 -50.48706818]
[-0.55843008 -63.63166809]
[-7.78473520 -76.77626801]
[-15.01104069 -89.92086792]
[-22.23734474 -103.06546783]
[-34.81328964 -102.99112701]
[-46.15058899 -108.26454926]
[-54.10319901 -117.81930542]
[-57.19500351 -129.78518677]
[-54.89353561 -141.85415649]
[-47.70050049 -151.72543335]
[-54.37002563 -165.16111755]
[-61.03955460 -178.59678650]
[-67.70908356 -192.03247070]
[-74.37860870 -205.46813965]
[-89.63697052 -206.53099060]
[-102.23151398 -215.03242493]
[-108.83583832 -228.60627747]
[-107.76631927 -243.56327820]
[-99.41006470 -255.89367676]
[-106.07958984 -269.32934570]
[-120.76487732 -275.78860474]
[-124.73149872 -291.33355713]
[-114.93659973 -304.03945923]
[-98.89399719 -304.15939331]
[-88.91019440 -291.60140991]
[-92.64391327 -275.99887085]
[-85.97438812 -262.56320190]
[-71.10067749 -261.76425171]
[-58.54033661 -253.57318115]
[-51.72133636 -240.10589600]
[-52.56433868 -224.93400574]
[-60.94293213 -212.13766479]
[-54.27340698 -198.70199585]
[-47.60387802 -185.26631165]
[-40.93434906 -171.83064270]
[-34.26482391 -158.39495850]
[-16.78226280 -156.30084229]
[-3.90880609 -144.06030273]
[-0.88391292 -126.39712524]
[-9.09274483 -110.29177094]
[-1.86644006 -97.14717102]
[5.35986519 -84.00257111]
[12.58617020 -70.85797119]
[19.81247520 -57.71337128]
[32.72413254 -50.28785324]
[32.59217072 -34.46719742]
[39.81847382 -21.32259560]
[47.04478073 -8.17799568]
[62.95086288 -9.35037231]
[77.83580017 -3.46211123]
[88.71386719 8.36001015]
[93.37945557 23.79359818]
[90.85418701 39.77676773]
[81.59152222 53.11557770]
[89.09152222 66.10595703]
[96.59152222 79.09633636]
[112.60205078 82.97739410]
[120.98810577 97.15744019]
[116.67597198 113.05728912]
[124.44637299 125.88775635]
[132.21678162 138.71821594]
[136.92361450 140.40859985]
[140.51124573 143.35861206]
[142.70335388 147.04629517]
[143.43280029 150.91555786]
[155.56805420 159.73233032]
[167.70330811 168.54910278]
[179.83856201 177.36589050]
[191.97381592 186.18266296]
[207.95346069 180.73481750]
[223.88104248 185.81120300]
[233.56713867 199.23214722]
[233.37118530 215.61642456]
[245.68841553 224.17712402]
[261.43618774 225.69958496]
[267.47140503 239.31669617]
[283.21917725 240.83915710]
[289.25439453 254.45626831]
[301.57162476 263.01696777]
[313.88888550 271.57766724]
[326.20611572 280.13836670]
[338.52334595 288.69906616]
[353.56542969 284.42474365]
[367.81460571 290.86642456]
[374.54284668 304.98254395]
[370.57327271 320.10791016]
[357.78021240 329.10076904]
[342.20416260 327.71499634]
[331.19964600 316.60488892]
[329.96264648 301.01632690]
[317.64541626 292.45562744]
[305.32815552 283.89489746]
[293.01092529 275.33419800]
[280.69369507 266.77349854]
[265.82693481 265.86334229]
[258.91070557 251.63392639]
[244.04393005 250.72378540]
[237.12771606 236.49435425]
[224.81047058 227.93365479]
[212.62780762 233.48350525]
[199.18745422 232.26240540]
[188.02644348 224.48388672]
[182.13529968 212.10119629]
[183.15704346 198.31791687]
[171.02178955 189.50114441]
[158.88653564 180.68435669]
[146.75128174 171.86758423]
[134.61602783 163.05081177]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 102]
[23 101]
[24 100]
[28 97]
[29 96]
[30 95]
[37 89]
[38 88]
[39 87]
[41 85]
[42 84]
[43 83]
[44 82]
[45 81]
[51 77]
[52 76]
[53 75]
[54 74]
[55 73]
[60 68]
[61 67]
[106 149]
[107 148]
[108 147]
[109 146]
[110 145]
[114 140]
[115 139]
[117 137]
[119 135]
[120 134]
[121 133]
[122 132]
[123 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
