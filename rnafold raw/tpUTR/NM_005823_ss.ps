%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 23:33:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCCCCACUCCCUUGCUGGCCCCAGCCCUGCUGGGGAUCCCCGCCUGGCCAGGAGCAGGCACGGGUGGUCCCCGUUCCACCCCAAGAGAACUCGCGCUCAGUAAACGGGAACAUGCCCCCUGCAGACACGU\
) } def
/len { sequence length } bind def

/coor [
[174.24263000 362.29504395]
[169.70858765 347.99670410]
[165.17454529 333.69836426]
[160.64048767 319.40002441]
[147.08901978 317.33474731]
[135.70634460 309.57806396]
[128.76077271 297.60632324]
[127.66625214 283.74243164]
[132.69499207 270.70529175]
[142.91265869 261.07653809]
[138.71757507 246.67509460]
[134.52250671 232.27366638]
[130.32743835 217.87222290]
[125.79338837 203.57389832]
[120.92289734 189.38662720]
[116.05239868 175.19937134]
[111.18190765 161.01211548]
[106.31141663 146.82485962]
[101.44092560 132.63760376]
[96.57043457 118.45034027]
[83.55062866 111.00154114]
[68.85195160 113.99301910]
[54.15327835 116.98450470]
[39.45460510 119.97599030]
[24.75592995 122.96746826]
[10.05725574 125.95895386]
[-4.64141798 128.95043945]
[-18.95653343 138.03414917]
[-31.64806747 126.79309845]
[-24.35968590 111.48571777]
[-7.63290167 114.25176239]
[7.06577253 111.26028442]
[21.76444626 108.26879883]
[36.46311951 105.27731323]
[51.16179657 102.28582764]
[65.86047363 99.29434967]
[80.55914307 96.30286407]
[83.16125488 89.26873016]
[68.37564850 91.79576874]
[58.79445267 80.25450897]
[63.99897766 66.18636322]
[78.78463745 63.65964127]
[88.36547089 75.20046234]
[90.96758270 68.16633606]
[81.75439453 56.32922363]
[72.54119873 44.49211884]
[63.32801056 32.65501022]
[54.11481857 20.81790161]
[38.61126709 21.46552086]
[25.70663071 12.84867573]
[20.36301041 -1.71928024]
[24.63513565 -16.63667107]
[36.88029099 -26.16745567]
[52.38995743 -26.64685440]
[65.20035553 -17.89052582]
[70.38562775 -3.26545811]
[65.95192719 11.60471058]
[75.16511536 23.44181824]
[84.37831116 35.27892685]
[93.59149933 47.11603546]
[102.80468750 58.95314026]
[110.20240021 57.71868134]
[124.99781799 55.24976349]
[132.39552307 54.01530457]
[137.26602173 39.82804489]
[142.13652039 25.64078712]
[147.00700378 11.45352840]
[151.87750244 -2.73373055]
[156.74798584 -16.92098999]
[147.72618103 -29.54583168]
[147.88174438 -45.06212616]
[157.15487671 -57.50354385]
[171.97984314 -62.08610153]
[186.65615845 -57.04771423]
[195.54048157 -44.32574844]
[195.21659851 -28.81205177]
[185.80906677 -16.47196388]
[170.93524170 -12.05049706]
[166.06475830 2.13676143]
[161.19425964 16.32402039]
[156.32377625 30.51127815]
[151.45327759 44.69853592]
[146.58279419 58.88579559]
[157.65878296 48.77034378]
[172.65187073 49.22544861]
[186.81332397 54.17046738]
[198.83079529 63.14713669]
[207.59059143 75.32357788]
[212.28096008 89.57140350]
[212.46723938 104.57024384]
[208.13215637 118.93016052]
[199.67744446 131.32038879]
[187.88661194 140.59272766]
[173.85232544 145.88790894]
[158.87516785 146.71522522]
[144.34304810 142.99798584]
[131.60270691 135.08070374]
[121.83368683 123.69529724]
[110.75769043 113.57984924]
[115.62818146 127.76710510]
[120.49868011 141.95436096]
[125.36917114 156.14161682]
[130.23965454 170.32888794]
[135.11015320 184.51614380]
[139.98065186 198.70339966]
[144.81845093 203.43409729]
[146.25070190 209.05834961]
[144.72886658 213.67715454]
[148.92395020 228.07858276]
[153.11901855 242.48002625]
[157.31408691 256.88146973]
[173.37318420 260.62319946]
[185.30499268 271.86822510]
[189.93789673 287.49816895]
[186.10557556 303.24716187]
[174.93882751 314.86599731]
[179.47288513 329.16433716]
[184.00692749 343.46267700]
[188.54096985 357.76098633]
[203.68916321 359.02612305]
[217.19784546 365.99636841]
[227.00700378 377.60882568]
[231.62084961 392.09262085]
[230.33578491 407.23913574]
[223.34777832 420.73864746]
[211.72244263 430.53253174]
[197.23257446 435.12731934]
[182.08776855 433.82232666]
[168.59747314 426.81655884]
[158.81889343 415.17834473]
[154.24317932 400.68246460]
[155.56808472 385.53936768]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 119]
[2 118]
[3 117]
[4 116]
[10 111]
[11 110]
[12 109]
[13 108]
[14 105]
[15 104]
[16 103]
[17 102]
[18 101]
[19 100]
[20 99]
[21 37]
[22 36]
[23 35]
[24 34]
[25 33]
[26 32]
[27 31]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[64 83]
[65 82]
[66 81]
[67 80]
[68 79]
[69 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
