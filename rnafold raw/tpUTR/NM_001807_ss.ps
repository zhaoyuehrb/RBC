%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 11:23:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUCCCAUGAGCCUUGGUAUCAAGAGGCCACAAGAGUGGGACCCCAGGGGCUCCCCUCCCAUCUUGAGCUCUUCCUGAAUAAAGCCUCAUACCCCUGUC\
) } def
/len { sequence length } bind def

/coor [
[88.21955109 119.60868835]
[80.17727661 111.41662598]
[65.44297028 114.22734833]
[50.70866013 117.03807068]
[35.97434998 119.84878540]
[21.24004173 122.65950775]
[6.50573254 125.47023010]
[-8.22857666 128.28094482]
[-18.69028282 147.21972656]
[-39.34979630 152.66384888]
[-57.32357788 141.62419128]
[-71.43679047 146.70526123]
[-85.55000305 151.78633118]
[-99.66320801 156.86740112]
[-113.77642059 161.94847107]
[-117.97606659 176.88642883]
[-130.17480469 186.47654724]
[-145.68196106 187.03125000]
[-158.53472900 178.33721924]
[-163.79093933 163.73750305]
[-159.42950439 148.84599304]
[-147.12745667 139.38874817]
[-131.61518860 139.00230408]
[-118.85749054 147.83525085]
[-104.74427795 142.75418091]
[-90.63106537 137.67311096]
[-76.51786041 132.59204102]
[-62.40464401 127.51097870]
[-61.52389145 118.45259094]
[-57.63385010 110.17598724]
[-51.15945053 103.65486145]
[-42.83150101 99.66732025]
[-33.60427475 98.70309448]
[-24.54617500 100.90361023]
[-16.71602058 106.04209900]
[-11.03929615 113.54663849]
[3.69501281 110.73591614]
[18.42932129 107.92520142]
[33.16363144 105.11447906]
[47.89793777 102.30375671]
[62.63224792 99.49304199]
[77.36655426 96.68231964]
[86.67717743 81.40477753]
[104.13739014 77.50196075]
[119.06674957 87.36122131]
[133.59550476 83.63087463]
[148.12425232 79.90052795]
[162.65299988 76.17017365]
[177.18174744 72.43982697]
[191.71049500 68.70948029]
[192.27638245 61.81435394]
[194.22734070 55.18873978]
[197.47764587 49.10737991]
[201.88777161 43.82147217]
[207.27040100 39.54828644]
[213.39839172 36.46223450]
[220.01432800 34.68775177]
[226.84135437 34.29429626]
[233.59474182 35.29362488]
[239.99378967 37.63951874]
[245.77348328 41.22987747]
[250.69544983 45.91116333]
[254.55781555 51.48497009]
[257.20346069 57.71641541]
[258.52642822 64.34405518]
[273.40814209 66.22405243]
[288.28985596 68.10405731]
[303.17156982 69.98405457]
[313.93389893 62.66374969]
[326.38891602 64.65167999]
[333.84445190 74.32041931]
[348.65975952 76.66693878]
[363.47509766 79.01345825]
[374.35168457 67.94641876]
[389.66159058 65.41930389]
[403.51785278 72.40385437]
[410.59243774 86.21434784]
[408.16503906 101.54038239]
[397.16903687 112.48878479]
[381.83261108 114.84966278]
[368.05294800 107.71520996]
[361.12857056 93.82878113]
[346.31326294 91.48226166]
[331.49792480 89.13574982]
[315.58279419 96.34397888]
[301.29156494 84.86577606]
[286.40985107 82.98577118]
[271.52813721 81.10577393]
[256.64642334 79.22577667]
[239.99378967 97.85348511]
[214.85948181 99.62194824]
[195.44084167 83.23822784]
[180.91209412 86.96857452]
[166.38334656 90.69892120]
[151.85459900 94.42927551]
[137.32585144 98.15962219]
[122.79710388 101.88996887]
[119.00824738 112.72660065]
[110.43215942 120.35803986]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 42]
[3 41]
[4 40]
[5 39]
[6 38]
[7 37]
[8 36]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[45 97]
[46 96]
[47 95]
[48 94]
[49 93]
[50 92]
[65 89]
[66 88]
[67 87]
[68 86]
[71 84]
[72 83]
[73 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
