%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 13:54:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUCCUAUAGGAGCCGGGGCUGUCCAACUCCCCUAACUCAAUCCCUGGUACAUUCCUAAUAAAGCAGUUUUGAGGAAAAUCAA\
) } def
/len { sequence length } bind def

/coor [
[72.67350006 129.52464294]
[70.82157135 145.23709106]
[57.08105850 150.98579407]
[48.26428223 163.12104797]
[39.44750214 175.25631714]
[30.63072395 187.39157104]
[29.45559883 203.74855042]
[14.58632660 210.66496277]
[1.31913793 201.02578735]
[3.30217934 184.74697876]
[18.49546814 178.57478333]
[27.31224632 166.43952942]
[36.12902451 154.30427551]
[44.94580460 142.16902161]
[46.16709900 127.32456970]
[60.53824615 120.70787048]
[55.90298843 106.44201660]
[41.63714218 101.80676270]
[27.37129402 97.17150879]
[13.10544682 92.53625488]
[1.12263131 97.71822357]
[-10.76407146 93.38703918]
[-16.24182892 82.43321228]
[-30.32665443 77.27397919]
[-47.27904510 77.50356293]
[-52.19255447 61.27723694]
[-37.96054840 52.06385422]
[-25.16741943 63.18915176]
[-11.08259487 68.34838104]
[5.89155245 64.32273865]
[17.74070168 78.27040863]
[32.00654984 82.90566254]
[46.27239609 87.54091644]
[60.53824615 92.17617035]
[71.35202789 73.60984802]
[89.67172241 63.77223587]
[109.74012756 64.93569946]
[125.66339874 76.03566742]
[138.56039429 68.37619781]
[151.45739746 60.71673203]
[164.35438538 53.05726242]
[177.25138855 45.39779663]
[179.09960938 31.91102600]
[188.30168152 22.14727402]
[201.27078247 19.58044052]
[213.14086914 24.94158363]
[226.31208801 17.76391029]
[239.48330688 10.58623600]
[236.92654419 -4.33829832]
[239.35678101 -19.28395653]
[246.51037598 -32.62954712]
[257.61138916 -42.92743683]
[271.45562744 -49.06058884]
[286.54138184 -50.36372375]
[301.23229980 -46.69549179]
[313.93478394 -38.45378876]
[323.27096558 -26.53261948]
[328.22814941 -12.22509861]
[328.26858521 2.91679955]
[323.38790894 17.25059509]
[314.11553955 29.22146606]
[301.45724487 37.53089905]
[286.78616333 41.27755356]
[271.69363403 40.05501556]
[257.81683350 33.99590302]
[246.66098022 23.75745583]
[233.48976135 30.93512917]
[220.31854248 38.11280060]
[216.35629272 54.34415817]
[201.65061951 62.95747375]
[184.91085815 58.29479218]
[172.01385498 65.95426178]
[159.11685181 73.61373138]
[146.21986389 81.27319336]
[133.32286072 88.93266296]
[135.46171570 97.12755585]
[135.58834839 105.70717621]
[133.64266968 114.17830658]
[129.68522644 122.04143524]
[123.89663696 128.82020569]
[116.56990814 134.09019470]
[108.09584045 137.50523376]
[98.94226837 138.81985474]
[89.62832642 137.90615845]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[3 14]
[4 13]
[5 12]
[6 11]
[17 34]
[18 33]
[19 32]
[20 31]
[23 29]
[24 28]
[38 75]
[39 74]
[40 73]
[41 72]
[42 71]
[46 68]
[47 67]
[48 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
