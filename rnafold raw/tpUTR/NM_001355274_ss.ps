%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 22:52:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCAGCUCAGGCUCGCCUGCCAUCUCCCCAAGGCUGCGUUGUGUUUGCUAUUAUUUUCUGUGUGUUUUCUUUGUGAGUGUUUUGUUUUGUUGUUUUUCUAUUAAACUGCAUAAAGAAACGGCA\
) } def
/len { sequence length } bind def

/coor [
[224.03465271 123.55237579]
[207.63833618 132.02723694]
[189.22532654 133.70262146]
[171.50741577 128.30752563]
[157.10316467 116.61409760]
[148.15090942 100.32713318]
[133.31845093 102.56276703]
[118.48598480 104.79840088]
[109.79759216 116.39400482]
[95.46990967 118.55355835]
[83.74964905 110.03405762]
[71.25679779 119.74175262]
[57.51849365 113.98777008]
[42.68603134 116.22340393]
[28.62877274 128.03868103]
[12.54898262 121.12769318]
[-2.22313404 123.73241425]
[-16.99525070 126.33714294]
[-25.07527924 136.48254395]
[-37.51086044 138.29872131]
[-47.49402237 131.34683228]
[-62.32648468 133.58245850]
[-77.15895081 135.81809998]
[-82.69541168 150.14439392]
[-94.66335297 159.77061462]
[-109.84345245 162.10733032]
[-124.15233612 156.52598572]
[-133.74098206 144.52793884]
[-136.03010559 129.34059143]
[-130.40394592 115.04927063]
[-118.37589264 105.49826813]
[-103.18144989 103.25676727]
[-88.90782928 108.92770386]
[-79.39458466 120.98563385]
[-64.56211853 118.75000000]
[-49.72965622 116.51435852]
[-36.68824387 104.84204102]
[-19.59997368 111.56502533]
[-4.82785702 108.96030426]
[9.94425964 106.35557556]
[17.19348907 96.58618164]
[29.55994415 94.34722137]
[40.45039749 101.39094543]
[55.28285980 99.15531158]
[66.71479797 89.60752869]
[81.51401520 95.20159912]
[90.20240784 83.60599518]
[104.53009033 81.44644165]
[116.25035095 89.96594238]
[131.08280945 87.73030853]
[145.91526794 85.49466705]
[147.49122620 73.71048737]
[151.88650513 62.67652893]
[158.83078003 53.05571365]
[167.90075684 45.42451859]
[178.54600525 40.23846054]
[190.12234497 37.80489349]
[201.93080139 38.26479721]
[213.25985718 41.58464050]
[223.42829895 47.55872726]
[231.82618713 55.82195663]
[237.95140076 65.87210846]
[241.43972778 77.10039520]
[256.43505859 76.72643280]
[271.43041992 76.35247040]
[282.28845215 65.18375397]
[297.50119019 65.01811218]
[308.08193970 75.43843842]
[323.07730103 75.06448364]
[338.07263184 74.69052124]
[353.06796265 74.31655884]
[368.06329346 73.94259644]
[383.05865479 73.56864166]
[398.05398560 73.19467926]
[413.04931641 72.82071686]
[428.04464722 72.44675446]
[443.04000854 72.07279968]
[458.02951050 71.51193237]
[473.01086426 70.76424408]
[487.99221802 70.01655579]
[490.60150146 55.17946243]
[496.44741821 41.29518890]
[505.23675537 29.06017113]
[516.52856445 19.08810806]
[529.75653076 11.87919331]
[544.25714111 7.79502439]
[559.30303955 7.04046106]
[574.13946533 9.65335274]
[588.02233887 15.50263596]
[600.25524902 24.29491615]
[610.22454834 35.58917236]
[617.43029785 48.81889343]
[621.51092529 63.32048035]
[622.26184082 78.36653900]
[619.64538574 93.20236206]
[613.79272461 107.08380127]
[604.99743652 119.31455994]
[593.70080566 129.28114319]
[580.46929932 136.48365784]
[565.96673584 140.56079102]
[550.92053223 141.30805969]
[536.08532715 138.68798828]
[522.20532227 132.83197021]
[509.97668457 124.03376770]
[500.01281738 112.73468018]
[492.81353760 99.50147247]
[488.73989868 84.99790955]
[473.75854492 85.74559784]
[458.77719116 86.49328613]
[452.18127441 90.00746918]
[443.41394043 87.06813812]
[428.41860962 87.44209290]
[413.42327881 87.81605530]
[398.42794800 88.19001770]
[383.43261719 88.56398010]
[368.43725586 88.93793488]
[353.44192505 89.31189728]
[338.44659424 89.68585968]
[323.45126343 90.05982208]
[308.45590210 90.43377686]
[298.40771484 101.36856079]
[283.20565796 101.96141815]
[271.80438232 91.34780884]
[256.80902100 91.72177124]
[241.81369019 92.09573364]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 51]
[7 50]
[8 49]
[11 46]
[13 44]
[14 43]
[16 40]
[17 39]
[18 38]
[21 36]
[22 35]
[23 34]
[63 125]
[64 124]
[65 123]
[68 120]
[69 119]
[70 118]
[71 117]
[72 116]
[73 115]
[74 114]
[75 113]
[76 112]
[77 111]
[78 109]
[79 108]
[80 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
