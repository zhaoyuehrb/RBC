%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 13:23:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAUACCCUCAAUAAAACAGGGAUUGCCAAGAAGGGAACAAUCACCCCAAAAAUGAAUGUUUGCCUUUAUUCCGUGUUUGGUACUUGAUUCACUUUCUUUAAAUAAAAACAUGAAGGAA\
) } def
/len { sequence length } bind def

/coor [
[228.75357056 301.21737671]
[218.23596191 284.76925659]
[215.74092102 265.35958862]
[221.78500366 246.69860840]
[210.37892151 236.95689392]
[198.97282410 227.21516418]
[187.56674194 217.47344971]
[187.91023254 232.46951294]
[178.70646667 244.31396484]
[164.09031677 247.68559265]
[150.62814331 241.06970215]
[144.36791992 227.43850708]
[148.12210083 212.91589355]
[160.20407104 204.02622986]
[175.18441772 204.76263428]
[165.74461365 193.10545349]
[156.30479431 181.44825745]
[146.86499023 169.79106140]
[137.42518616 158.13388062]
[123.40264893 153.11216736]
[120.73092651 137.51818848]
[111.29112244 125.86099243]
[101.85131836 114.20380402]
[88.86820221 109.01435089]
[86.49149323 95.23600006]
[81.67311859 109.44104767]
[67.65613556 114.78185272]
[54.60684586 107.38481903]
[51.98969650 92.61489868]
[61.70286560 81.18447876]
[76.70190430 81.38404846]
[68.86442566 68.59445190]
[61.02694702 55.80484772]
[53.18946838 43.01524353]
[45.35198975 30.22564125]
[37.34777069 17.53972435]
[29.17818642 4.95966625]
[21.00860023 -7.62039232]
[12.83901501 -20.20045090]
[4.66942978 -32.78050995]
[-9.33572865 -40.14027023]
[-9.77845192 -55.02829742]
[-17.94803810 -67.60835266]
[-26.11762238 -80.18841553]
[-41.54397964 -80.01215363]
[-54.60460281 -88.22335052]
[-61.13189316 -102.20183563]
[-59.04301453 -117.48712158]
[-49.00452423 -129.20173645]
[-34.21966934 -133.60758972]
[-19.40623665 -129.29878235]
[-9.29114437 -117.65025330]
[-7.10207939 -102.37898254]
[-13.53756428 -88.35800171]
[-5.36797905 -75.77793884]
[2.80160666 -63.19787979]
[16.22242165 -56.73793030]
[17.24948883 -40.95009613]
[25.41907310 -28.37003708]
[33.58865738 -15.78997803]
[41.75824356 -3.20991921]
[49.92782974 9.37013912]
[56.28795624 13.31464672]
[58.14159012 22.38816452]
[65.97907257 35.17776489]
[73.81655121 47.96736908]
[81.65402985 60.75696945]
[89.49150848 73.54656982]
[98.14868164 85.79619598]
[111.13179779 90.98564911]
[113.50850677 104.76399994]
[122.94831085 116.42118835]
[132.38812256 128.07836914]
[147.08586121 133.93388367]
[149.08238220 148.69407654]
[158.52218628 160.35125732]
[167.96199036 172.00845337]
[177.40179443 183.66563416]
[186.84159851 195.32283020]
[197.30845642 206.06735229]
[208.71455383 215.80908203]
[220.12063599 225.55079651]
[231.52673340 235.29252625]
[240.83316040 229.35379028]
[251.29588318 225.87179565]
[262.27926636 225.05140686]
[273.11764526 226.93600464]
[283.15579224 231.40521240]
[291.78833008 238.18261719]
[298.49636841 246.85281372]
[302.87869263 256.88684082]
[304.67565918 267.67453003]
[303.78472900 278.56152344]
[300.26608276 288.88903809]
[294.33886719 298.03363037]
[304.08059692 309.43972778]
[313.82232666 320.84582520]
[323.56402588 332.25192261]
[333.30575562 343.65798950]
[343.04748535 355.06408691]
[352.78918457 366.47018433]
[367.87606812 363.59237671]
[382.37530518 368.65872192]
[392.38665771 380.30639648]
[395.21716309 395.40222168]
[390.10537720 409.88549805]
[378.42639160 419.86032104]
[363.32177734 422.64346313]
[348.85458374 417.48632812]
[338.91644287 405.77612305]
[336.18063354 390.66284180]
[341.38311768 376.21188354]
[331.64138794 364.80581665]
[321.89965820 353.39971924]
[312.15795898 341.99362183]
[302.41622925 330.58752441]
[292.67449951 319.18145752]
[282.93276978 307.77536011]
[264.53970337 313.89788818]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 83]
[5 82]
[6 81]
[7 80]
[15 79]
[16 78]
[17 77]
[18 76]
[19 75]
[21 73]
[22 72]
[23 71]
[25 69]
[31 68]
[32 67]
[33 66]
[34 65]
[35 64]
[36 62]
[37 61]
[38 60]
[39 59]
[40 58]
[42 56]
[43 55]
[44 54]
[95 118]
[96 117]
[97 116]
[98 115]
[99 114]
[100 113]
[101 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
