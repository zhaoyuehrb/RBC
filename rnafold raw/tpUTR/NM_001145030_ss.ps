%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 00:59:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAUAAAGUCUGCUUUUUUUUUUUUUUUAGUUCAAGUAAUCAUUGUUGAAAAUAAAAGGCAAUAAAAAUAGACAGUUUUCACUAUA\
) } def
/len { sequence length } bind def

/coor [
[94.66506958 344.72082520]
[84.92356873 333.19842529]
[78.49710083 319.54693604]
[75.82382965 304.69717407]
[77.08601379 289.66156006]
[82.19760895 275.46530151]
[90.81008911 263.07629395]
[102.33625031 253.33923340]
[115.99020386 246.91802979]
[113.32691193 232.15637207]
[110.66361237 217.39469910]
[108.00031281 202.63302612]
[105.33701324 187.87136841]
[100.95162964 181.70913696]
[102.85196686 172.53593445]
[100.71724701 157.68861389]
[98.58252716 142.84129333]
[96.44779968 127.99396515]
[94.31307983 113.14664459]
[85.82185364 102.03851318]
[90.83959961 88.98807526]
[88.70487976 74.14075470]
[79.08235931 61.58218002]
[84.92962646 47.88331985]
[82.79490662 33.03599930]
[80.66018677 18.18867874]
[78.52545929 3.34135628]
[76.39073944 -11.50596523]
[74.25601196 -26.35328674]
[72.12129211 -41.20060730]
[60.39875412 -55.26335144]
[67.27657318 -71.30184174]
[64.61327362 -86.06350708]
[61.94997406 -100.82518005]
[59.28667831 -115.58684540]
[56.62337875 -130.34851074]
[42.14307022 -135.46870422]
[32.17505264 -147.15347290]
[29.40066719 -162.25971985]
[34.56621170 -176.72390747]
[46.28218460 -186.65524292]
[61.39704132 -189.38226318]
[75.84496307 -184.17140198]
[85.73954010 -172.42436218]
[88.41916656 -157.30104065]
[83.16304779 -142.86950684]
[71.38504791 -133.01181030]
[74.04834747 -118.25014496]
[76.71163940 -103.48847961]
[79.37493896 -88.72680664]
[82.03823853 -73.96514130]
[91.88296509 -66.69438934]
[94.11471558 -54.25048447]
[86.96861267 -43.33533096]
[89.10334015 -28.48801041]
[91.23806000 -13.64068794]
[93.37277985 1.20663369]
[95.50750732 16.05395508]
[97.64222717 30.90127754]
[99.77694702 45.74860001]
[109.24677277 57.24519348]
[103.55220032 72.00603485]
[105.68692017 86.85335541]
[114.17814636 97.96148682]
[109.16040039 111.01192474]
[111.29512024 125.85924530]
[113.42984772 140.70657349]
[115.56456757 155.55389404]
[117.69928741 170.40121460]
[120.09868622 185.20806885]
[122.76197815 199.96972656]
[125.42527771 214.73139954]
[128.08857727 229.49307251]
[130.75187683 244.25473022]
[145.78892517 245.49951172]
[159.99110413 250.59465027]
[172.39009094 259.19277954]
[182.14047241 270.70764160]
[188.57748413 284.35415649]
[191.26223755 299.20187378]
[190.01165771 314.23843384]
[184.91102600 328.43865967]
[176.30810547 340.83432007]
[164.78947449 350.58026123]
[151.14048767 357.01199341]
[136.29173279 359.69100952]
[121.25564575 358.43463135]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 74]
[10 73]
[11 72]
[12 71]
[13 70]
[15 69]
[16 68]
[17 67]
[18 66]
[19 65]
[21 63]
[22 62]
[24 60]
[25 59]
[26 58]
[27 57]
[28 56]
[29 55]
[30 54]
[32 51]
[33 50]
[34 49]
[35 48]
[36 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
