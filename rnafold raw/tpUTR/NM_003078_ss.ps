%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 08:14:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCCCAAAAAUAAGCAGCACGACGGAACUUUCAGCCGUGUCCCGGGCCCCAGCAUUUUGCCCCGGGCUCCAGCAUCACUCCUCUGCCACCUUGGGGUGUGGGGCUGGAUUAAAAGUCAUUCAUCUGACA\
) } def
/len { sequence length } bind def

/coor [
[104.71293640 167.31565857]
[105.44737244 182.29766846]
[101.33529663 196.72302246]
[92.81166840 209.06593323]
[80.77802277 218.02090454]
[66.50717163 222.64073181]
[51.50856018 222.43679810]
[37.36859512 217.43064880]
[25.58288002 208.15180969]
[17.39799500 195.58169556]
[13.67966366 181.04988098]
[14.82117653 166.09336853]
[20.70179367 152.29415894]
[30.69952011 141.11178589]
[43.75688553 133.72901917]
[58.49329758 130.92674255]
[70.38096619 121.77887726]
[82.26863098 112.63101959]
[67.45050812 114.95977020]
[52.63237762 117.28851318]
[37.81425095 119.61726379]
[22.99612236 121.94601440]
[10.56449032 131.73197937]
[-3.20968223 126.06440735]
[-15.64131451 135.85037231]
[-29.41548729 130.18278503]
[-44.23361588 132.51153564]
[-56.64355469 143.23187256]
[-72.04160309 137.58987427]
[-74.58757782 121.38957214]
[-61.66238403 111.29642487]
[-46.56236649 117.69341278]
[-31.74423790 115.36466217]
[-20.37249756 105.74526978]
[-5.53843307 111.24627686]
[5.83330727 101.62687683]
[20.66737175 107.12789154]
[35.48550034 104.79914093]
[50.30362701 102.47039032]
[65.12175751 100.14163971]
[79.93988037 97.81288910]
[86.37860107 84.26509094]
[78.82674408 71.30478668]
[71.27487946 58.34448624]
[63.72301865 45.38418579]
[56.17115784 32.42388535]
[48.61929703 19.46358681]
[41.81404877 32.83103180]
[27.17127419 36.08512878]
[15.34483814 26.85824203]
[14.93948269 11.86371994]
[26.25013733 2.01135540]
[41.04726028 4.46952915]
[35.09994507 -9.30107212]
[29.15263367 -23.07167435]
[17.32183266 -35.21533585]
[25.71582222 -49.94548416]
[42.19400024 -45.95724487]
[42.92323685 -29.01898766]
[48.87054825 -15.24838543]
[54.81785965 -1.47778356]
[61.57959747 11.91172409]
[69.13145447 24.87202454]
[76.68331909 37.83232498]
[84.23518372 50.79262543]
[91.78704071 63.75292587]
[99.33890533 76.71322632]
[108.83688354 77.93087006]
[117.22737122 82.93441010]
[130.77517700 76.49568939]
[144.32296753 70.05696869]
[157.87077332 63.61824799]
[171.41857910 57.17952728]
[184.96636963 50.74080658]
[194.10928345 37.82888412]
[208.92561340 39.35395050]
[222.47340393 32.91523361]
[236.02120972 26.47651100]
[249.56900024 20.03779221]
[258.71191406 7.12586832]
[273.52822876 8.65093803]
[287.07604980 2.21221781]
[300.62384033 -4.22650242]
[314.17163086 -10.66522312]
[316.03186035 -25.98002434]
[325.89416504 -37.84334946]
[340.61154175 -42.46965408]
[355.48770142 -38.38270569]
[365.77572632 -26.88662720]
[368.19277954 -11.64978123]
[361.96752930 2.46581221]
[349.08648682 10.95591831]
[333.65991211 11.11137486]
[320.61035156 2.88257694]
[307.06256104 9.32129765]
[293.51477051 15.76001740]
[279.96694946 22.19873810]
[271.79309082 34.65011978]
[256.00772095 33.58559036]
[242.45993042 40.02431107]
[228.91212463 46.46303177]
[215.36433411 52.90175247]
[207.19044495 65.35313416]
[191.40509033 64.28860474]
[177.85729980 70.72732544]
[164.30949402 77.16604614]
[150.76168823 83.60476685]
[137.21389771 90.04348755]
[123.66609192 96.48220825]
[138.10472107 92.41698456]
[151.54200745 99.08326721]
[157.04025269 113.03924561]
[151.76069641 127.07941437]
[138.42918396 133.95480347]
[123.92881775 130.11563110]
[115.74572754 117.54206848]
[121.69303894 131.31266785]
[127.64035797 145.08326721]
[133.58766174 158.85388184]
[148.36851501 164.44869995]
[154.78776550 178.89060974]
[149.03698730 193.61148071]
[134.52801514 199.87768555]
[119.86877441 193.97158813]
[113.75631714 179.39717102]
[119.81706238 164.80119324]
[113.86975098 151.03057861]
[107.92243958 137.25997925]
[101.97512817 123.48937988]
[100.59240723 138.42552185]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 41]
[19 40]
[20 39]
[21 38]
[22 37]
[24 35]
[26 33]
[27 32]
[42 67]
[43 66]
[44 65]
[45 64]
[46 63]
[47 62]
[53 61]
[54 60]
[55 59]
[69 109]
[70 108]
[71 107]
[72 106]
[73 105]
[74 104]
[76 102]
[77 101]
[78 100]
[79 99]
[81 97]
[82 96]
[83 95]
[84 94]
[116 129]
[117 128]
[118 127]
[119 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
