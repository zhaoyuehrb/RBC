%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 12:02:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUUCCAGGGCAGGGUGGGCUCCAGUUGUCUUGAGGGUCCGGAUGGGCUCAGGUAAUAAAGAAACGGAAGCAGCAGCCAGCCA\
) } def
/len { sequence length } bind def

/coor [
[69.04999542 317.33743286]
[59.71101761 329.46350098]
[45.80164337 335.85003662]
[30.51814842 335.02944946]
[17.37256622 327.19030762]
[9.38565731 314.13397217]
[8.39275265 298.86071777]
[14.62201595 284.88018799]
[26.64200783 275.40505981]
[41.69062042 272.61257935]
[46.06146622 258.26351929]
[50.43231201 243.91445923]
[46.73937225 229.48492432]
[58.16213989 218.53819275]
[62.53298569 204.18911743]
[58.84004593 189.75958252]
[70.26280975 178.81285095]
[74.63365936 164.46379089]
[69.67362976 147.73878479]
[82.94329834 135.13497925]
[86.78093719 120.63420105]
[90.61857605 106.13343048]
[94.18760681 91.56421661]
[97.48680115 76.93153381]
[96.31562805 67.62275696]
[101.18772888 61.82387161]
[105.02537537 47.32309723]
[108.86301422 32.82231903]
[108.03662109 23.47661972]
[113.11966705 17.86173058]
[117.49051666 3.51266432]
[121.86136627 -10.83640194]
[126.23220825 -25.18546867]
[113.63347626 -43.54276276]
[117.87339020 -65.13980103]
[136.05047607 -77.09069824]
[137.15826416 -92.04973602]
[138.26605225 -107.00877380]
[139.37384033 -121.96781158]
[140.48162842 -136.92684937]
[141.58941650 -151.88587952]
[133.97767639 -166.41149902]
[142.97877502 -180.11961365]
[159.33312988 -178.90849304]
[166.21681213 -164.02403259]
[156.54846191 -150.77809143]
[155.44067383 -135.81906128]
[154.33288574 -120.86002350]
[153.22509766 -105.90098572]
[152.11730957 -90.94194794]
[151.00952148 -75.98291016]
[158.73564148 -71.85578918]
[164.83070374 -65.51697540]
[168.68188477 -57.57308578]
[169.89250183 -48.79354858]
[168.32279968 -40.03608704]
[164.10571289 -32.16290665]
[157.63584900 -25.95584297]
[149.53268433 -22.03870010]
[140.58126831 -20.81462288]
[136.21043396 -6.46555567]
[131.83958435 7.88351059]
[127.46873474 22.23257637]
[123.36379242 36.65996170]
[119.52615356 51.16073608]
[115.68850708 65.66151428]
[112.11948395 80.23072815]
[108.82028198 94.86341095]
[110.27710724 103.00604248]
[105.11935425 109.97106934]
[101.28171539 124.47184753]
[97.44406891 138.97262573]
[103.28205872 150.64988708]
[99.61618805 162.75833130]
[88.98271942 168.83464050]
[84.61187744 183.18370056]
[87.99217987 198.63957214]
[76.88204956 208.55996704]
[72.51120758 222.90904236]
[75.89151001 238.36491394]
[64.78137970 248.28530884]
[60.41053391 262.63436890]
[56.03968811 276.98342896]
[66.97604370 287.69113159]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 83]
[11 82]
[12 81]
[14 79]
[15 78]
[17 76]
[18 75]
[20 72]
[21 71]
[22 70]
[23 68]
[24 67]
[26 66]
[27 65]
[28 64]
[30 63]
[31 62]
[32 61]
[33 60]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
