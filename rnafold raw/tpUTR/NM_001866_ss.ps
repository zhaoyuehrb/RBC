%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 06:07:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUCCCAGCUGGUGUAAUAAUGAAUUGUUUAAAAAACAGCUCAUAAUUGAUGCCAAAUUAAAGCACUGUGUACCCAUUAAGAUAUGGCAUUAUUGAAGAAAUAAAGUACAUUUGAAACCUUC\
) } def
/len { sequence length } bind def

/coor [
[-93.08496857 194.15118408]
[-103.94528198 193.40196228]
[-114.54434204 190.93298340]
[-124.61168671 186.80831909]
[-133.89059448 181.13432312]
[-142.14462280 174.05677795]
[-149.16363525 165.75724792]
[-154.76919556 156.44837952]
[-158.81901550 146.36846924]
[-161.21064758 135.77536011]
[-161.88403320 124.93982697]
[-176.76383972 123.04474640]
[-191.64364624 121.14966583]
[-206.52345276 119.25458527]
[-221.40325928 117.35951233]
[-236.28306580 115.46443176]
[-251.18568420 113.75799561]
[-266.10873413 112.24047089]
[-281.03176880 110.72294617]
[-295.54391479 117.02440643]
[-307.42309570 108.03920746]
[-322.34616089 106.52168274]
[-337.26919556 105.00415802]
[-352.19223022 103.48663330]
[-366.70437622 109.78809357]
[-378.58355713 100.80289459]
[-393.50662231 99.28536987]
[-408.42965698 97.76784515]
[-423.35269165 96.25032043]
[-438.27572632 94.73279572]
[-453.19876099 93.21527100]
[-469.56832886 97.62816620]
[-478.34033203 83.11994171]
[-466.82742310 70.67449188]
[-451.68124390 78.29222870]
[-436.75820923 79.80975342]
[-421.83517456 81.32727814]
[-406.91210938 82.84480286]
[-391.98907471 84.36232758]
[-377.06604004 85.87985229]
[-363.62130737 79.46984863]
[-350.67471313 88.56359100]
[-335.75164795 90.08111572]
[-320.82861328 91.59864044]
[-305.90557861 93.11616516]
[-292.46084595 86.70616150]
[-279.51425171 95.79990387]
[-264.59121704 97.31742859]
[-249.66816711 98.83495331]
[-242.61505127 96.35322571]
[-234.38798523 100.58462524]
[-219.50817871 102.47970581]
[-204.62837219 104.37477875]
[-189.74856567 106.26985931]
[-174.86875916 108.16493988]
[-159.98895264 110.06002045]
[-152.58262634 91.61524963]
[-140.14709473 76.09253693]
[-123.74050140 64.82511902]
[-104.76246643 58.78363800]
[-84.83471680 58.49249268]
[-65.66249847 63.98437119]
[-48.88862991 74.79676056]
[-35.95278168 90.01089478]
[-27.96787834 108.32982635]
[-13.14085293 106.05841064]
[-5.67117167 96.45304108]
[6.74574566 94.49530029]
[17.47459793 101.78789520]
[32.35440826 99.89282227]
[47.23421478 97.99774170]
[62.11402130 96.10266113]
[76.99382782 94.20758057]
[91.87363434 92.31250000]
[105.93991852 87.10292816]
[118.46449280 78.84853363]
[130.98907471 70.59414673]
[143.51365662 62.33975220]
[146.44912720 46.81047440]
[159.55258179 37.97445679]
[175.04995728 41.07395554]
[183.74693298 54.27009201]
[180.48376465 69.73383331]
[167.19641113 78.29080963]
[151.76803589 74.86432648]
[139.24346924 83.11872101]
[126.71888733 91.37310791]
[114.19431305 99.62750244]
[115.42383575 107.02603149]
[117.88288879 121.82309723]
[119.11241913 129.22163391]
[133.63357544 132.98141479]
[148.15472412 136.74119568]
[162.67588806 140.50099182]
[177.19705200 144.26077271]
[191.69628906 137.39407349]
[206.04107666 144.57785034]
[209.22732544 160.30131531]
[198.81080627 172.50277710]
[182.78219604 171.82232666]
[173.43725586 158.78193665]
[158.91610718 155.02214050]
[144.39494324 151.26235962]
[129.87377930 147.50257874]
[115.35263062 143.74278259]
[94.77336121 127.44422150]
[93.76871490 107.19231415]
[78.88890839 109.08738708]
[64.00910187 110.98246765]
[49.12929153 112.87754822]
[34.24948502 114.77262878]
[19.36967850 116.66770935]
[5.04807234 128.15786743]
[-10.86943626 120.88543701]
[-25.69646072 123.15685272]
[-26.13134956 134.06730652]
[-28.29808617 144.76591492]
[-32.14030075 154.97964478]
[-37.55887985 164.44801331]
[-44.41452026 172.92971802]
[-52.53131104 180.20878601]
[-61.70124435 186.10009766]
[-71.68955231 190.45407104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 56]
[12 55]
[13 54]
[14 53]
[15 52]
[16 51]
[17 49]
[18 48]
[19 47]
[21 45]
[22 44]
[23 43]
[24 42]
[26 40]
[27 39]
[28 38]
[29 37]
[30 36]
[31 35]
[65 115]
[66 114]
[69 112]
[70 111]
[71 110]
[72 109]
[73 108]
[74 107]
[75 88]
[76 87]
[77 86]
[78 85]
[91 105]
[92 104]
[93 103]
[94 102]
[95 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
