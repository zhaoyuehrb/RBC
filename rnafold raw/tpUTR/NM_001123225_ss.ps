%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 20:55:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCACUGGCCCACCACAGCUGCCAUGCCACCCUCUGCCCGUAUGAAGAGGUCACUGGGGGAUGGAGCUGGCACCCACAUGAAUAGCUGUAUGCACUGUACUUGUUUCUUAAUAAACUUAUUUUUAAGCACA\
) } def
/len { sequence length } bind def

/coor [
[79.29050446 126.62892151]
[75.12590027 141.03919983]
[70.96130371 155.44947815]
[77.41964722 170.13516235]
[69.83734131 184.27334595]
[54.03088379 187.01841736]
[42.12563705 176.26460266]
[43.25428391 160.26130676]
[56.55102539 151.28488159]
[60.71562576 136.87460327]
[64.88022614 122.46432495]
[57.04264450 135.25386047]
[42.65209961 139.48614502]
[29.13846016 132.97602844]
[23.47884941 119.08470917]
[28.59533691 104.98429871]
[41.84626770 97.95487213]
[56.39183426 101.62692261]
[43.34323883 94.22866821]
[30.29464149 86.83041382]
[17.24604607 79.43215942]
[4.19745111 72.03391266]
[-4.90409088 70.49797058]
[-9.06738472 64.30619049]
[-21.93895912 56.60407257]
[-34.81053543 48.90196228]
[-47.68210983 41.19984818]
[-56.74514389 39.45096970]
[-60.76214218 33.16328812]
[-73.44962311 25.16154861]
[-82.46916962 23.20069122]
[-86.33766174 16.82056808]
[-98.83407593 8.52360058]
[-111.33049011 0.22663325]
[-126.63154602 3.14474392]
[-139.18649292 -5.44757700]
[-141.87417603 -20.05278015]
[-154.37059021 -28.34974861]
[-166.96339417 -36.49966049]
[-179.65087891 -44.50139999]
[-192.43128967 -52.35386658]
[-207.14739990 -47.06518936]
[-221.80212402 -52.52164078]
[-229.47596741 -66.14684296]
[-226.54554749 -81.50740051]
[-214.39454651 -91.35052490]
[-198.76028442 -91.02859497]
[-187.02476501 -80.69361115]
[-184.72917175 -65.22544098]
[-177.30484009 -64.48341370]
[-171.64913940 -57.18888092]
[-158.96165466 -49.18714142]
[-151.55676270 -48.27127075]
[-146.07362366 -40.84616089]
[-133.57720947 -32.54919434]
[-119.07368469 -35.74033356]
[-106.28234863 -27.50404739]
[-103.03352356 -12.26977921]
[-90.53710938 -3.97281218]
[-78.04069519 4.32415485]
[-65.44788361 12.47406864]
[-52.76040268 20.47580719]
[-39.97999954 28.32827377]
[-27.10842323 36.03038406]
[-14.23684692 43.73249817]
[-1.36527157 51.43461227]
[11.59570408 58.98531342]
[24.64430046 66.38356781]
[37.69289398 73.78182220]
[50.74148941 81.18007660]
[63.79008865 88.57832336]
[108.38609314 75.85511780]
[118.86763763 65.12490845]
[129.34918213 54.39470673]
[128.59480286 43.42599106]
[133.93896484 34.07098389]
[143.37600708 29.34760094]
[153.62944031 30.62232018]
[164.60240173 20.39520264]
[175.57537842 10.16808510]
[173.55473328 -5.21686363]
[180.99261475 -18.83514404]
[195.02899170 -25.45025063]
[210.26660156 -22.51853943]
[220.84626770 -11.16731167]
[222.69989014 4.23865128]
[215.11471558 17.77544403]
[201.00740051 24.23789406]
[185.80249023 21.14105415]
[174.82952881 31.36817169]
[163.85655212 41.59529114]
[159.67515564 60.41773987]
[140.07937622 64.87624359]
[129.59783936 75.60645294]
[119.11629486 86.33665466]
[133.45904541 81.94513702]
[146.86923218 75.22448730]
[161.52746582 78.40820312]
[170.94152832 90.08618927]
[170.94184875 105.08618927]
[161.52830505 116.76459503]
[146.87020874 119.94895172]
[133.45904541 113.22817993]
[119.11629486 108.83665466]
[129.59783936 119.56686401]
[140.07937622 130.29705811]
[150.56092834 141.02726746]
[161.04246521 151.75747681]
[176.30323792 149.65631104]
[189.71823120 156.85987854]
[196.24203491 170.42098999]
[193.56164551 185.04814148]
[204.04318237 195.77835083]
[214.52473450 206.50854492]
[225.00627136 217.23875427]
[240.93334961 221.14517212]
[245.25340271 236.96507263]
[233.52232361 248.42430115]
[217.80804443 243.73457336]
[214.27606201 227.72029114]
[203.79452515 216.99009705]
[193.31298828 206.25988770]
[182.83143616 195.52967834]
[168.14547729 197.86643982]
[154.74101257 191.02651978]
[147.85392761 177.44633484]
[150.31225586 162.23901367]
[139.83071899 151.50880432]
[129.34918213 140.77861023]
[118.86763763 130.04840088]
[108.38609314 119.31819916]
[101.11219788 121.14588165]
[97.00395966 135.57232666]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[3 9]
[18 71]
[19 70]
[20 69]
[21 68]
[22 67]
[24 66]
[25 65]
[26 64]
[27 63]
[29 62]
[30 61]
[32 60]
[33 59]
[34 58]
[37 55]
[38 54]
[39 52]
[40 51]
[41 49]
[72 95]
[73 94]
[74 93]
[78 91]
[79 90]
[80 89]
[104 131]
[105 130]
[106 129]
[107 128]
[108 127]
[112 123]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
