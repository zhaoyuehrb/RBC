%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 22:26:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGGGGACCGGGGAGCACCUGCCUGUAGCCCCCAUCAGACCCUGCCCCAAGCACCAUAUGGAAAUAAAGUUCUUUCUUACAUCUAA\
) } def
/len { sequence length } bind def

/coor [
[229.62358093 133.13017273]
[214.90538025 130.23628235]
[200.18717957 127.34239197]
[185.46897888 124.44850159]
[170.75077820 121.55461121]
[156.03257751 118.66072083]
[141.31437683 115.76683044]
[126.59618378 112.87294006]
[113.89060211 126.07912445]
[95.84185028 129.25370789]
[79.39257812 121.17554474]
[70.87016296 104.95198059]
[55.92853165 103.62999725]
[40.98690033 102.30800629]
[26.04526901 100.98602295]
[16.99382019 103.38300323]
[10.60280704 99.34458160]
[-4.28286219 97.49610138]
[-19.19883537 95.91062927]
[-34.14046478 94.58863831]
[-46.09476852 104.92644501]
[-61.85140610 103.70008850]
[-72.06224060 91.63716125]
[-70.66937256 75.89437103]
[-58.49916077 65.81163788]
[-42.77197647 67.37087250]
[-32.81847763 79.64701080]
[-17.87684822 80.96899414]
[-10.77970886 78.36428070]
[-2.43438601 82.61043549]
[12.45128250 84.45891571]
[27.36725616 86.04438782]
[42.30888748 87.36637878]
[57.25051880 88.68836212]
[72.19215393 90.01035309]
[78.09016418 80.17504883]
[87.28869629 73.32618713]
[98.40206146 70.49549103]
[109.75614166 72.10936737]
[119.64055634 77.92471313]
[126.56629944 87.06549835]
[129.49008179 98.15473938]
[144.20828247 101.04862976]
[158.92646790 103.94252014]
[173.64466858 106.83641052]
[188.36286926 109.73030090]
[203.08106995 112.62419128]
[217.79927063 115.51808167]
[232.51747131 118.41197205]
[238.45677185 105.51126862]
[247.15864563 94.29720306]
[258.16799927 85.35034943]
[270.91046143 79.13287354]
[284.72222900 75.96467590]
[298.88467407 76.00687408]
[312.66183472 79.25370026]
[325.33853149 85.53289795]
[336.25759888 94.51493073]
[344.85382080 105.73023224]
[350.68331909 118.59375763]
[353.44644165 132.43551636]
[353.00314331 146.53546143]
[367.48052979 150.46035767]
[381.95794678 154.38523865]
[396.43533325 158.31013489]
[410.91275024 162.23501587]
[422.91555786 152.40078735]
[438.40838623 151.53341675]
[451.43389893 159.96641541]
[456.98352051 174.45715332]
[452.92333984 189.43360901]
[440.81454468 199.13705444]
[425.31323242 199.83631897]
[412.37997437 191.26249695]
[406.98785400 176.71243286]
[392.51046753 172.78753662]
[378.03305054 168.86265564]
[363.55563354 164.93775940]
[349.07824707 161.01287842]
[341.29885864 174.84631348]
[330.24957275 186.25381470]
[316.65316772 194.48132324]
[301.40118408 198.98313904]
[285.49520874 199.45799255]
[269.98126221 195.86930847]
[255.88088989 188.44787598]
[244.12400818 177.67706299]
[235.48751831 164.26130676]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 49]
[2 48]
[3 47]
[4 46]
[5 45]
[6 44]
[7 43]
[8 42]
[12 35]
[13 34]
[14 33]
[15 32]
[17 31]
[18 30]
[19 28]
[20 27]
[62 79]
[63 78]
[64 77]
[65 76]
[66 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
