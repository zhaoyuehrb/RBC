%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 13:17:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCAAAGGGCUCCAGGAUUUGAAUCUUCUCUUGGUGAGGCAAUGGGAAAGCUCACUUCAGUUCAAGAAAUUGUUCUGCCUGGGCAAGAAAUUA\
) } def
/len { sequence length } bind def

/coor [
[89.55706787 131.53279114]
[82.05706787 144.52316284]
[74.55706787 157.51354980]
[67.05706787 170.50392151]
[59.55706787 183.49430847]
[62.30373001 199.30049133]
[51.55110550 211.20681763]
[35.54768753 210.07977295]
[26.56993103 196.78393555]
[31.50480080 181.51872253]
[46.56668472 175.99430847]
[54.06668472 163.00392151]
[61.56668472 150.01354980]
[69.06668854 137.02316284]
[76.56668854 124.03278351]
[68.43831635 111.42605591]
[53.51054382 112.89631653]
[38.58277130 114.36656952]
[23.65500069 115.83683014]
[8.72722912 117.30708313]
[-4.28033543 127.29384613]
[-19.32736206 120.77317810]
[-20.93475914 104.45300293]
[-7.44897556 95.12210083]
[7.25697231 102.37931824]
[22.18474388 100.90905762]
[37.11251450 99.43880463]
[52.04028320 97.96854401]
[66.96805573 96.49829102]
[86.60488129 73.67100525]
[112.93923950 77.60519409]
[123.88720703 67.35130310]
[134.83515930 57.09742355]
[145.78312683 46.84353638]
[156.73109436 36.58965302]
[161.51417542 21.50878334]
[176.09251404 18.45569611]
[180.87561035 3.37482691]
[195.45394897 0.32173938]
[206.40190125 -9.93214512]
[217.34986877 -20.18602943]
[228.29782104 -30.43991470]
[219.16494751 -36.89371872]
[213.37240601 -48.89134598]
[213.54852295 -64.58256531]
[215.99194336 -79.38221741]
[218.43537903 -94.18186951]
[220.87881470 -108.98152161]
[214.59895325 -124.13062286]
[224.79188538 -136.97726440]
[240.97200012 -134.30592346]
[246.49456787 -118.86463928]
[235.67846680 -106.53808594]
[233.23503113 -91.73843384]
[230.79159546 -76.93878937]
[228.34815979 -62.13913727]
[233.65147400 -56.83583450]
[244.25823975 -67.44226074]
[254.86450195 -56.83530807]
[244.25807190 -46.22923279]
[249.56137085 -40.92593384]
[264.36102295 -43.36936569]
[273.57077026 -55.93193817]
[288.61453247 -58.19910049]
[300.53427124 -49.34159088]
[315.33392334 -51.78502274]
[330.13357544 -54.22845840]
[342.46011353 -65.04456329]
[357.90139771 -59.52198792]
[360.57275391 -43.34187698]
[347.72610474 -33.14894485]
[332.57699585 -39.42880630]
[317.77734375 -36.98537445]
[302.97769165 -34.54194260]
[294.53768921 -22.32302666]
[279.56353760 -19.63421249]
[266.80444336 -28.56971550]
[252.00480652 -26.12628365]
[238.55171204 -19.49195290]
[227.60374451 -9.23806858]
[216.65579224 1.01581597]
[205.70782471 11.26970005]
[201.70780945 25.61714363]
[186.34640503 29.40365791]
[182.34637451 43.75109863]
[166.98497009 47.53761292]
[156.03701782 57.79150009]
[145.08905029 68.04537964]
[134.14108276 78.29927063]
[123.19313049 88.55315399]
[126.71154785 96.70084381]
[127.33477020 105.90323639]
[124.76240540 115.12329865]
[119.06688690 123.24660492]
[110.70928955 129.21520996]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[3 13]
[4 12]
[5 11]
[16 29]
[17 28]
[18 27]
[19 26]
[20 25]
[31 90]
[32 89]
[33 88]
[34 87]
[35 86]
[37 84]
[39 82]
[40 81]
[41 80]
[42 79]
[45 56]
[46 55]
[47 54]
[48 53]
[61 78]
[62 77]
[65 74]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
