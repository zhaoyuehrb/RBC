%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 11:27:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUAGACUUGGGGUCAGGGGAAGGUAGAGCUGGAGCUUUUACAGAAAUAAAACCCAAGAGUUUGAUUAUA\
) } def
/len { sequence length } bind def

/coor [
[109.66087341 354.82077026]
[107.70387268 339.58706665]
[113.64072418 325.42199707]
[125.87442780 316.13586426]
[123.91653442 301.26419067]
[121.95864105 286.39251709]
[120.00074768 271.52084351]
[118.04286194 256.64916992]
[116.08496857 241.77751160]
[114.12707520 226.90583801]
[102.68677521 213.77839661]
[109.45484161 196.81184387]
[106.85012054 182.03973389]
[104.24539948 167.26760864]
[101.64067078 152.49549866]
[86.78950500 150.83258057]
[73.00784302 145.05432129]
[61.41143036 135.62852478]
[52.93910980 123.31826782]
[48.27678299 109.12020111]
[47.80191040 94.18376923]
[51.55293274 79.71820831]
[59.22617722 66.89464569]
[70.20042419 56.75124741]
[83.58721161 50.10922241]
[80.98249054 35.33710861]
[78.37776184 20.56499100]
[75.77304077 5.79287481]
[73.16831970 -8.97924137]
[70.24196625 -23.69102097]
[66.99536896 -38.33546066]
[55.52336884 -50.05404663]
[60.19596100 -65.77342987]
[76.20638275 -69.32285309]
[87.08448792 -57.05097580]
[81.63980865 -41.58205414]
[84.88640594 -26.93761444]
[89.55493927 -20.90258408]
[87.94043732 -11.58396435]
[90.54515839 3.18815207]
[93.14987946 17.96026802]
[95.75460052 32.73238373]
[98.35932922 47.50450134]
[113.21049500 49.16741180]
[126.99215698 54.94567108]
[138.58856201 64.37147522]
[147.06089783 76.68173218]
[151.72322083 90.87979889]
[152.19808960 105.81623077]
[148.44706726 120.28179169]
[140.77381897 133.10536194]
[129.79957581 143.24874878]
[116.41278839 149.89077759]
[119.01750946 164.66288757]
[121.62223816 179.43501282]
[124.22695923 194.20712280]
[134.45857239 202.39196777]
[136.18110657 214.97207642]
[128.99874878 224.94793701]
[130.95663452 239.81961060]
[132.91453552 254.69128418]
[134.87242126 269.56295776]
[136.83032227 284.43463135]
[138.78820801 299.30630493]
[140.74610901 314.17797852]
[154.96638489 319.98135376]
[164.36712646 332.12719727]
[166.41958618 347.34832764]
[160.57165527 361.55035400]
[148.39640808 370.91299438]
[133.16891479 372.91772461]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 65]
[5 64]
[6 63]
[7 62]
[8 61]
[9 60]
[10 59]
[12 56]
[13 55]
[14 54]
[15 53]
[25 43]
[26 42]
[27 41]
[28 40]
[29 39]
[30 37]
[31 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
