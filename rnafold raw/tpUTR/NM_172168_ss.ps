%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 09:45:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGAGGAUCCCGAUGAGGGGAUGGACCGCGCCAUCCCAGGGCUGGGGAGGAGCGGGGAGGGCGGAUCUCCCUGGCCAGCAGGGAUGGGAGGGGGCCAUUUGCUGUUCCUCUGAGUAAAGCUUGUUCUGCAUGA\
) } def
/len { sequence length } bind def

/coor [
[96.03071594 114.57588196]
[85.42411804 125.18248749]
[74.81751251 135.78909302]
[64.21091461 146.39569092]
[53.60430908 157.00228882]
[56.48813248 173.62545776]
[48.99967194 188.55891418]
[34.24843216 196.04086304]
[18.10217094 193.31590271]
[7.74338961 204.16467285]
[-2.61539245 215.01342773]
[-12.97417450 225.86219788]
[-23.33295631 236.71095276]
[-22.71739006 252.50325012]
[-33.51014328 264.04846191]
[-49.30806351 264.49703979]
[-60.73852921 253.58282471]
[-61.02004623 237.78103638]
[-49.98559189 226.46661377]
[-34.18171692 226.35217285]
[-23.82293701 215.50341797]
[-13.46415424 204.65464783]
[-3.10537267 193.80589294]
[7.25340939 182.95712280]
[3.64898205 170.05076599]
[6.94101572 156.94926453]
[16.36840630 147.12301636]
[29.53048134 143.22961426]
[42.99770737 146.39569092]
[53.60430908 135.78909302]
[64.21091461 125.18248749]
[74.81751251 114.57588196]
[85.42411804 103.96928406]
[88.85837555 89.36771393]
[84.09149933 75.14530182]
[79.32463074 60.92289352]
[74.55776215 46.70048141]
[69.79088593 32.47807312]
[65.02401733 18.25566292]
[47.79548264 10.54676247]
[41.68794632 -6.97705746]
[50.10063934 -23.16194534]
[44.68201447 -37.14902878]
[39.26338959 -51.13611221]
[33.84476471 -65.12319946]
[28.42613983 -79.11028290]
[23.00751495 -93.09736633]
[17.58889008 -107.08444977]
[12.17026520 -121.07153320]
[6.75164032 -135.05860901]
[1.33301532 -149.04570007]
[-4.08560944 -163.03277588]
[-18.26622581 -169.47854614]
[-23.56223106 -183.74063110]
[-17.32979012 -197.21995544]
[-22.74841690 -211.20703125]
[-37.60704041 -216.08097839]
[-45.81253433 -229.39277649]
[-43.49051285 -244.85699463]
[-31.73736763 -255.17192078]
[-16.10257149 -255.46714783]
[-3.96839714 -245.60328674]
[-1.06423163 -230.23773193]
[-8.76133251 -216.62565613]
[-3.34270763 -202.63858032]
[10.34408569 -196.87600708]
[16.03859329 -182.76829529]
[9.90147400 -168.45140076]
[15.32009888 -154.46432495]
[20.73872375 -140.47723389]
[26.15734863 -126.49015808]
[31.57597351 -112.50307465]
[36.99459839 -98.51599121]
[42.41322327 -84.52890778]
[47.83184814 -70.54182434]
[53.25047302 -56.55473709]
[58.66909790 -42.56765366]
[64.08772278 -28.58057022]
[75.37500763 -26.30932808]
[84.22891998 -18.76232147]
[88.34338379 -7.75153351]
[86.57241821 3.99052286]
[79.24642944 13.48879147]
[84.01329803 27.71120071]
[88.78016663 41.93361282]
[93.54704285 56.15602112]
[98.31391144 70.37843323]
[103.08078003 84.60083771]
[122.69994354 95.20208740]
[136.92234802 99.96895599]
[151.14476013 104.73583221]
[165.36717224 109.50270081]
[180.91079712 106.55207062]
[190.51945496 117.93289185]
[204.74186707 122.69976807]
[218.96427917 127.46663666]
[233.18667603 132.23350525]
[239.87527466 131.27394104]
[245.20495605 133.55296326]
[247.94694519 137.56294250]
[261.93402100 142.98156738]
[275.92111206 148.40019226]
[289.90820312 153.81881714]
[303.89529419 159.23744202]
[317.88235474 164.65606689]
[330.28726196 155.48425293]
[345.68304443 154.49781799]
[359.15701294 162.01153564]
[366.40963745 175.62780762]
[365.12664795 191.00173950]
[355.71743774 203.22753906]
[341.18444824 208.40402222]
[326.16513062 204.87939453]
[315.45205688 193.77832031]
[312.46374512 178.64315796]
[298.47665405 173.22453308]
[284.48956299 167.80590820]
[270.50250244 162.38728333]
[256.51541138 156.96865845]
[242.52832031 151.55001831]
[228.41981506 146.45591736]
[214.19740295 141.68904114]
[199.97499084 136.92218018]
[185.75257874 132.15530396]
[171.22624207 135.44688416]
[160.60029602 123.72511292]
[146.37789917 118.95823669]
[132.15548706 114.19136810]
[117.93307495 109.42449951]
[130.27110291 117.95520782]
[134.80560303 132.25340271]
[129.63897705 146.33551025]
[116.93334961 154.30841064]
[102.00582886 152.83555603]
[91.10334778 142.53332520]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[2 32]
[3 31]
[4 30]
[5 29]
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[34 88]
[35 87]
[36 86]
[37 85]
[38 84]
[39 83]
[42 78]
[43 77]
[44 76]
[45 75]
[46 74]
[47 73]
[48 72]
[49 71]
[50 70]
[51 69]
[52 68]
[55 65]
[56 64]
[89 129]
[90 128]
[91 127]
[92 126]
[94 124]
[95 123]
[96 122]
[97 121]
[100 120]
[101 119]
[102 118]
[103 117]
[104 116]
[105 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
