%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 01:11:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGACACGGCCGUGGGGCCUGGCAGGCGCUGGACAGCGCCCGAGGACUGGGACAUUAAACCUGACCUCCCCUCCUCCA\
) } def
/len { sequence length } bind def

/coor [
[84.44845581 120.20931244]
[72.20887756 128.88069153]
[65.42120361 143.17187500]
[50.56324005 144.21598816]
[48.18070984 149.48278809]
[44.30075455 152.79487610]
[40.00801849 153.90892029]
[36.31011963 153.08734131]
[23.12549210 160.24035645]
[9.94086456 167.39337158]
[-3.24376321 174.54638672]
[-11.35100269 188.80137634]
[-27.74932861 188.63720703]
[-35.56954956 174.22276306]
[-26.76689148 160.38638306]
[-10.39677525 161.36175537]
[2.78785205 154.20874023]
[15.97247982 147.05572510]
[29.15710831 139.90270996]
[41.89185715 131.97642517]
[47.80408096 118.30547333]
[63.53749847 116.64112091]
[75.77707672 107.96974182]
[75.00209045 94.96298218]
[80.75373840 83.27133179]
[72.82744598 70.53658295]
[64.90115356 57.80183029]
[56.97485733 45.06708145]
[49.04856491 32.33232880]
[41.12226868 19.59757996]
[26.40932083 12.35457230]
[25.59560966 -4.02437449]
[39.51821136 -12.69000530]
[53.85475159 -4.72786140]
[53.85702133 11.67128563]
[61.78331375 24.40603638]
[69.70960999 37.14078522]
[77.63590240 49.87553787]
[85.56219482 62.61028671]
[93.48848724 75.34503937]
[112.16027832 77.58583832]
[124.21852875 92.01690674]
[139.21556091 91.71867371]
[154.21260071 91.42044067]
[169.20964050 91.12220764]
[184.20666504 90.82397461]
[193.84568787 81.98937988]
[206.51460266 82.20123291]
[215.27435303 90.78763580]
[230.27139282 91.08586884]
[245.26843262 91.38410187]
[260.26547241 91.68233490]
[271.61300659 81.01128387]
[286.81787109 81.52737427]
[296.92114258 92.41127014]
[311.91818237 92.70950317]
[326.91522217 93.00773621]
[341.00851440 84.62258148]
[355.18276978 92.87015533]
[354.85671997 109.26605988]
[340.36578369 116.94359589]
[326.61700439 108.00477600]
[311.61996460 107.70654297]
[296.62292480 107.40830994]
[286.09490967 117.88192749]
[270.88153076 117.79312134]
[259.96722412 106.67936707]
[244.97019958 106.38113403]
[229.97315979 106.08290100]
[214.97612000 105.78466797]
[200.25288391 115.11658478]
[184.50489807 105.82100677]
[169.50785828 106.11923981]
[154.51083374 106.41747284]
[139.51379395 106.71570587]
[124.51676178 107.01393890]
[118.38396454 117.67192078]
[107.97641754 124.22072601]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[4 20]
[8 19]
[9 18]
[10 17]
[11 16]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[42 76]
[43 75]
[44 74]
[45 73]
[46 72]
[49 70]
[50 69]
[51 68]
[52 67]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
