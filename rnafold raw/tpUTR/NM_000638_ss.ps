%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 18:08:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUCAGAGCCCACAUGGCCGGGCCCUCUGUAGCUCCCUCCUCCCAUCUCCUUCCCCCAGCCCAAUAAAGGUCCCUUAGCCCCGAGUUUAA\
) } def
/len { sequence length } bind def

/coor [
[154.26286316 90.64643097]
[139.96568298 95.18415070]
[125.66851044 99.72187042]
[111.37134552 104.25959015]
[97.23742676 109.28278351]
[83.28324890 114.78559875]
[69.32907867 120.28840637]
[55.37489700 125.79122162]
[41.61672974 131.76724243]
[28.07060814 138.20948792]
[14.52448654 144.65174866]
[0.97836578 151.09399414]
[-1.73427188 166.37211609]
[-12.93243217 177.11366272]
[-28.31019402 179.18829346]
[-41.95449448 171.79824829]
[-48.61882401 157.78517151]
[-45.74060440 142.53736877]
[-34.42657852 131.91793823]
[-19.02721596 130.01025391]
[-5.46388578 137.54786682]
[8.08223534 131.10562134]
[21.62835693 124.66336823]
[35.17447662 118.22111511]
[37.63951492 113.90583801]
[42.94482422 111.20912933]
[49.87208557 111.83704376]
[63.82626343 106.33422852]
[77.78044128 100.83142090]
[91.73461151 95.32860565]
[94.97940826 90.91829681]
[100.52181244 88.75208282]
[106.83362579 89.96241760]
[121.13079834 85.42469788]
[135.42796326 80.88697815]
[149.72514343 76.34925842]
[147.57957458 64.67326355]
[146.73338318 52.83281708]
[147.19670105 40.97206879]
[148.96366882 29.23538589]
[152.01263428 17.76561737]
[156.30625916 6.70233154]
[161.79212952 -3.81986499]
[168.40330505 -13.67297268]
[176.05912781 -22.73715591]
[184.66629028 -30.90219498]
[194.11985779 -38.06883621]
[204.30467224 -44.14999008]
[215.09663391 -49.07178879]
[226.36428833 -52.77449036]
[237.97045898 -55.21319962]
[249.77378845 -56.35841751]
[261.63058472 -56.19638443]
[273.39651489 -54.72926331]
[284.92840576 -51.97509766]
[296.08587646 -47.96759415]
[306.73321533 -42.75571442]
[316.74087524 -36.40306854]
[325.98712158 -28.98714828]
[334.35955811 -20.59836769]
[341.75634766 -11.33897972]
[348.08764648 -1.32181323]
[353.27648926 9.33109379]
[357.25991821 20.48998260]
[359.98959351 32.01895142]
[361.43252563 43.77762222]
[361.57125854 55.62282562]
[360.40435791 67.41037750]
[357.94616699 78.99679565]
[354.22680664 90.24109650]
[367.77291870 96.68334198]
[381.31903076 103.12559509]
[396.12500000 97.59756470]
[410.46841431 104.23397064]
[415.83959961 119.09754944]
[409.05191040 133.36999512]
[394.13238525 138.58374023]
[379.93249512 131.64553833]
[374.87677002 116.67171478]
[361.33065796 110.22946930]
[347.78454590 103.78721619]
[336.32409668 120.30583191]
[321.98168945 134.40074158]
[305.25933838 145.57649231]
[286.74267578 153.43983459]
[267.08056641 157.71359253]
[246.96229553 158.24635315]
[227.09349060 155.01792908]
[208.17123413 148.14004517]
[190.85975647 137.85249329]
[175.76698303 124.51479340]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 34]
[4 33]
[5 30]
[6 29]
[7 28]
[8 27]
[9 24]
[10 23]
[11 22]
[12 21]
[70 81]
[71 80]
[72 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
