%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 18:18:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAGGCUUUAGGAGGCUGAGGUGGGGGGACUGCUUAAGCCCAGGAGUUCAAGACCAGCCUGGGCAACAUAGUGAGACUCUGUUAUAAAAAUUAAAUAAAUAAAUAAAAAGACUUCCAGUUGGUGGU\
) } def
/len { sequence length } bind def

/coor [
[91.44931030 119.22354126]
[81.17045593 130.14805603]
[70.89160156 141.07258606]
[60.61275101 151.99710083]
[60.91822052 167.57093811]
[50.33837509 178.50354004]
[35.48921967 178.69877625]
[25.21036530 189.62329102]
[14.93151188 200.54782104]
[4.65265799 211.47233582]
[-5.62619543 222.39686584]
[-15.90504837 233.32138062]
[-26.18390274 244.24591064]
[-29.41549683 260.32348633]
[-45.03923798 265.30654907]
[-56.98276138 254.06890869]
[-52.95959473 238.17091370]
[-37.10842514 233.96705627]
[-26.82957077 223.04252625]
[-16.55071640 212.11801147]
[-6.27186346 201.19348145]
[4.00698996 190.26896667]
[14.28584385 179.34443665]
[24.56469727 168.41992188]
[23.85606384 153.58639526]
[34.12466049 142.36094666]
[49.68822861 141.71824646]
[59.96708298 130.79373169]
[70.24593353 119.86920929]
[80.52478790 108.94468689]
[69.91477203 119.54787445]
[55.34431839 123.11183167]
[41.03793335 118.60324860]
[31.14356613 107.32932281]
[28.52995491 92.55877686]
[33.95488358 78.57413483]
[45.84546661 69.43006134]
[60.75418472 67.77776337]
[74.35845947 74.09629059]
[82.71313477 86.55136108]
[74.74370575 73.84355927]
[66.77426910 61.13575745]
[58.80484009 48.42795944]
[50.83540726 35.72016144]
[42.86597824 23.01236153]
[34.89654541 10.30456161]
[16.69261360 1.80626142]
[16.57072830 -17.46871376]
[7.99203539 -29.77342987]
[-0.58665711 -42.07814789]
[-14.60515976 -51.61323547]
[-9.32341290 -67.72346497]
[7.61935568 -67.10788727]
[11.71805859 -50.65683746]
[20.29675102 -38.35212326]
[28.87544441 -26.04740715]
[39.17969513 -25.13612556]
[47.41839981 -18.52172470]
[50.66862106 -8.23684788]
[47.60434341 2.33513021]
[55.57377625 15.04292965]
[63.54320908 27.75072861]
[71.51264191 40.45852661]
[79.48207092 53.16632843]
[87.45149994 65.87413025]
[95.42092896 78.58192444]
[110.42092896 78.58192444]
[118.39036560 65.87413025]
[126.35979462 53.16632843]
[134.32922363 40.45852661]
[135.10626221 24.65641403]
[148.42314148 17.98483276]
[156.39256287 5.27703333]
[164.36199951 -7.43076611]
[167.65487671 -24.06185913]
[184.54757690 -25.50161171]
[190.60743713 -9.66764355]
[177.06979370 0.53866512]
[169.10037231 13.24646473]
[161.13093567 25.95426369]
[160.92393494 40.84743118]
[147.03703308 48.42795944]
[139.06759644 61.13575745]
[131.09815979 73.84355927]
[123.12873077 86.55136108]
[136.21501160 79.21996307]
[149.30128479 71.88857269]
[157.97715759 59.65217590]
[169.17337036 49.66996002]
[182.32101440 42.44918060]
[196.75195312 38.35675812]
[211.73287964 37.60065842]
[226.50254822 40.21929932]
[240.31039429 46.07961273]
[252.45477295 54.88380814]
[262.31857300 66.18448639]
[269.40057373 79.40740204]
[273.34085083 93.88062286]
[273.93920898 108.86868286]
[271.16525269 123.60995483]
[265.15991211 137.35534668]
[256.22836304 149.40638733]
[244.82447815 159.15069580]
[231.52774048 166.09309387]
[217.01385498 169.88081360]
[202.02032471 170.32136536]
[187.30906677 167.39237976]
[173.62763977 161.24267578]
[161.67129517 152.18476868]
[152.04757690 140.67893982]
[145.24505615 127.30862427]
[133.36570740 118.14997864]
[121.48633575 108.99133301]
[127.52056885 122.72406769]
[133.55480957 136.45680237]
[146.18998718 145.97850037]
[144.22631836 160.74310303]
[150.26055908 174.47583008]
[163.79360962 183.73803711]
[162.26921082 200.06617737]
[147.25553894 206.66326904]
[134.19737244 196.74278259]
[136.52781677 180.51007080]
[130.49359131 166.77732849]
[118.29001617 158.23788452]
[119.82206726 142.49104309]
[113.78783417 128.75830078]
[107.75360107 115.02556610]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[4 27]
[7 24]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[13 18]
[40 66]
[41 65]
[42 64]
[43 63]
[44 62]
[45 61]
[46 60]
[48 56]
[49 55]
[50 54]
[67 85]
[68 84]
[69 83]
[70 82]
[72 80]
[73 79]
[74 78]
[113 128]
[114 127]
[115 126]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
