%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 07:36:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGGCCUGCCAUGUUUCCAUGUGCCAUUUCUUACCCCUUGUAGGCAAUGGCAAAGAAUGUGGUCAGGCUGUAGCCUCCCCAACCAGCAGACAGCUUUAUGGAAACUUGGUAUAGCAGCUAAAAGAGUUUAGUUUGUUUAUAUGGCAUGUAUAAGUUUUCAAUAAAUGCCUAAAGUUCAAGCAUAGUA\
) } def
/len { sequence length } bind def

/coor [
[372.90051270 236.18432617]
[359.22793579 230.01501465]
[347.79394531 233.99969482]
[336.34606934 228.95660400]
[331.25134277 217.09379578]
[317.68316650 210.69808960]
[300.30786133 213.10292053]
[289.92022705 197.90896606]
[276.24761963 191.73966980]
[262.57504272 185.57035828]
[248.90246582 179.40104675]
[235.22987366 173.23175049]
[220.44664001 175.04977417]
[211.04995728 162.32135010]
[197.37736511 156.15203857]
[183.70477295 149.98272705]
[170.03218079 143.81343079]
[156.35960388 137.64411926]
[142.68701172 131.47480774]
[129.01441956 125.30551147]
[115.34183502 119.13619995]
[101.66925049 112.96689606]
[86.69462585 112.09472656]
[72.39827728 116.63502502]
[58.10192490 121.17532349]
[43.80557251 125.71562958]
[29.50922012 130.25593567]
[15.21286869 134.79623413]
[0.91651756 139.33653259]
[-9.89431190 150.88800049]
[-24.36652756 147.36604309]
[-38.66287994 151.90634155]
[-52.95922852 156.44664001]
[-67.25558472 160.98693848]
[-81.55193329 165.52723694]
[-90.17729950 179.05435181]
[-106.14558411 180.60142517]
[-117.20728302 168.98168945]
[-114.87681580 153.10881042]
[-100.94190979 145.15908813]
[-86.09223175 151.23089600]
[-71.79588318 146.69058228]
[-57.49953079 142.15028381]
[-43.20317841 137.60998535]
[-28.90682793 133.06968689]
[-19.11857033 121.84296417]
[-3.62378383 125.04017639]
[10.67256737 120.49987793]
[24.96891975 115.95957947]
[39.26527023 111.41927338]
[53.56162262 106.87897491]
[67.85797119 102.33867645]
[82.15432739 97.79837036]
[84.00500488 90.53028870]
[69.28204346 87.66074371]
[54.28384018 87.89321899]
[48.96427917 73.86816406]
[60.34407043 64.09573364]
[73.40396881 71.47291565]
[87.70636749 75.99413300]
[89.55704498 68.72605133]
[79.17310333 57.90137482]
[68.78915405 47.07669830]
[53.22010040 46.58443069]
[42.84350204 35.45874405]
[43.40875244 20.61906433]
[33.02480316 9.79438686]
[22.64085770 -1.03029048]
[12.25691032 -11.85496807]
[-3.63414478 -15.90545082]
[-7.81076288 -31.76382065]
[4.02360296 -43.11634827]
[19.69477081 -38.28452301]
[23.08158684 -22.23891449]
[33.46553421 -11.41423798]
[43.84947968 -0.58956003]
[54.23342896 10.23511791]
[69.08377838 10.28684807]
[79.76878357 21.11668777]
[79.61383057 36.69274902]
[89.99777985 47.51742935]
[100.38172150 58.34210587]
[107.16580200 55.14424896]
[108.41072083 40.19599915]
[120.73395538 48.74853897]
[127.51803589 45.55068207]
[125.77664185 30.65210533]
[124.03524780 15.75353050]
[112.39329529 4.71521711]
[113.90825653 -11.25614643]
[127.41799164 -19.90869522]
[142.55899048 -14.60493565]
[147.71635437 0.58654231]
[138.93382263 14.01213741]
[140.67521667 28.91071320]
[142.41661072 43.80928802]
[134.21363831 80.99743652]
[107.83855438 99.29430389]
[121.51114655 105.46361542]
[135.18373108 111.63291931]
[148.85632324 117.80223083]
[162.52890015 123.97153473]
[176.20149231 130.14083862]
[189.87408447 136.31015015]
[203.54667664 142.47944641]
[217.21925354 148.64875793]
[232.98045349 147.27200317]
[241.39918518 159.55915833]
[255.07176208 165.72845459]
[268.74435425 171.89776611]
[282.41693115 178.06707764]
[296.08953857 184.23638916]
[308.42041016 180.41130066]
[319.68777466 185.84579468]
[324.07888794 197.12992859]
[337.64703369 203.52565002]
[355.94766235 201.56440735]
[365.39724731 216.34242249]
[379.06982422 222.51173401]
[386.63299561 213.19346619]
[396.08593750 205.81433105]
[406.94458008 200.74696350]
[418.65405273 198.24572754]
[430.61697388 198.43400574]
[442.22399902 201.29806519]
[452.88488770 206.68800354]
[462.05838013 214.32554626]
[469.27987671 223.81846619]
[474.18475342 234.68066406]
[476.52694702 246.35711670]
[476.19119263 258.25219727]
[473.19873047 269.76010132]
[486.31198120 277.04315186]
[499.42523193 284.32617188]
[512.53845215 291.60922241]
[525.65173340 298.89227295]
[537.12200928 289.01007080]
[551.25469971 283.65853882]
[566.33721924 283.46548462]
[580.54901123 288.43496704]
[592.18115234 297.94891357]
[599.84185791 310.84417725]
[602.62322998 325.55447388]
[600.20849609 340.30081177]
[613.32177734 347.58386230]
[626.43499756 354.86691284]
[639.54821777 362.14993286]
[652.66149902 369.43298340]
[668.48254395 369.36941528]
[675.85223389 382.31301880]
[688.96545410 389.59606934]
[702.07873535 396.87911987]
[715.62274170 389.49252319]
[731.00860596 390.62374878]
[743.32666016 399.91189575]
[748.64624023 414.39309692]
[745.26995850 429.44647217]
[734.27514648 440.26855469]
[719.17016602 443.40603638]
[704.77502441 437.85775757]
[695.68310547 425.39419556]
[694.79565430 409.99237061]
[681.68243408 402.70932007]
[668.56915283 395.42626953]
[653.68603516 396.01080322]
[645.37841797 382.54623413]
[632.26519775 375.26318359]
[619.15197754 367.98013306]
[606.03869629 360.69711304]
[592.92547607 353.41406250]
[581.68310547 363.25756836]
[567.72515869 368.67089844]
[552.72924805 368.98275757]
[538.50488281 364.13613892]
[526.77508545 354.69778442]
[518.96771240 341.79177856]
[516.04156494 326.96578979]
[518.36865234 312.00552368]
[505.25543213 304.72247314]
[492.14218140 297.43942261]
[479.02893066 290.15637207]
[465.91567993 282.87335205]
[452.62631226 295.28189087]
[435.88970947 302.44427490]
[417.69226074 303.49356079]
[400.19943237 298.28921509]
[385.49813843 287.43594360]
[375.34783936 272.21322632]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 119]
[2 118]
[5 116]
[6 115]
[8 112]
[9 111]
[10 110]
[11 109]
[12 108]
[14 106]
[15 105]
[16 104]
[17 103]
[18 102]
[19 101]
[20 100]
[21 99]
[22 98]
[23 53]
[24 52]
[25 51]
[26 50]
[27 49]
[28 48]
[29 47]
[31 45]
[32 44]
[33 43]
[34 42]
[35 41]
[61 82]
[62 81]
[63 80]
[66 77]
[67 76]
[68 75]
[69 74]
[86 96]
[87 95]
[88 94]
[132 182]
[133 181]
[134 180]
[135 179]
[136 178]
[144 170]
[145 169]
[146 168]
[147 167]
[148 166]
[150 164]
[151 163]
[152 162]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
