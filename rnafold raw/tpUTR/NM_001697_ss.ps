%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 11:38:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUGUUGGUUUUCUGCCAUCAGUGAAAAUUCUUAAACUUGGAGCAACAAUAAAAAGCUUCCAGAACAGAUCA\
) } def
/len { sequence length } bind def

/coor [
[52.42998505 149.87425232]
[42.19906616 137.54197693]
[33.35989380 150.66369629]
[18.51202393 149.48472595]
[5.11813593 156.23777771]
[-3.72103333 169.35951233]
[-18.56890488 168.18054199]
[-31.96279335 174.93359375]
[-45.35668182 181.68664551]
[-58.75056839 188.43971252]
[-65.11826324 203.16491699]
[-80.63821411 207.22825623]
[-93.40483856 197.51266479]
[-93.62468719 181.47113037]
[-81.12909698 171.40931702]
[-65.50362396 175.04582214]
[-52.10973740 168.29275513]
[-38.71585083 161.53970337]
[-25.32196045 154.78665161]
[-17.44081306 142.14794922]
[-1.63492036 142.84390259]
[11.75896740 136.09083557]
[19.64011574 123.45214081]
[35.44600677 124.14808655]
[31.89891815 110.61086273]
[31.15936852 96.63619232]
[33.25785065 82.80019379]
[38.10784912 69.67328644]
[45.50942230 57.79662704]
[55.15742874 47.65984726]
[66.65412140 39.68084717]
[79.52552795 34.18857193]
[93.24102783 31.40944672]
[107.23516846 31.45804024]
[120.93103027 34.33235168]
[133.76399231 39.91388702]
[145.20498657 47.97253418]
[154.78236389 58.17607498]
[162.10127258 70.10385132]
[176.24443054 65.10675049]
[190.38758850 60.10965729]
[204.53076172 55.11256027]
[218.67391968 50.11546326]
[232.70782471 44.81929779]
[246.62615967 39.22645187]
[248.10952759 23.99299240]
[256.51202393 11.20015049]
[269.90280151 3.78762531]
[285.20477295 3.45876074]
[298.90164185 10.28912735]
[307.84600830 22.70915794]
[309.98248291 37.86481857]
[304.82012939 52.27345276]
[293.54522705 62.62405777]
[278.74865723 66.53813934]
[263.83056641 63.11627960]
[252.21900940 53.14478683]
[238.30067444 58.73763275]
[233.11494446 64.32096100]
[223.67102051 64.25862122]
[209.52784729 69.25572205]
[195.38468933 74.25281525]
[181.24153137 79.24991608]
[167.09837341 84.24700928]
[168.92256165 100.16647339]
[167.02148438 116.07694244]
[161.49789429 131.11843872]
[152.65031433 144.47799683]
[140.95698547 155.43350220]
[127.04993439 163.39282227]
[111.68081665 167.92573547]
[95.68035889 168.78727722]
[79.91337585 165.93083191]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 24]
[4 22]
[5 21]
[7 19]
[8 18]
[9 17]
[10 16]
[39 64]
[40 63]
[41 62]
[42 61]
[43 60]
[44 58]
[45 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
