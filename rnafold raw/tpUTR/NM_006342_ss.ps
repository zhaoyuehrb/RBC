%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 12:44:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCACGGAGCCGCUGUCCCCGCCCCCCUGCUCCCGUCUGUCUGUCCUGUCUGAUUCUCUUAGGUGUCAUGUUCUUUUUUCUGUCUUGUCUUCAACUUUUUUAAAAACUAGAUUGCUUUGAAAACAUGACUCAAUAAAAGUUUCCUUUCAAUUUAAACACUGAA\
) } def
/len { sequence length } bind def

/coor [
[-11.69103146 375.63256836]
[-24.58662224 375.21475220]
[-37.35670471 373.37838745]
[-49.84573746 370.14611816]
[-61.90161896 365.55746460]
[-73.37754822 359.66854858]
[-84.13381195 352.55126953]
[-94.03947449 344.29251099]
[-104.94285583 354.59378052]
[-115.84624481 364.89505005]
[-126.74963379 375.19631958]
[-137.65301514 385.49758911]
[-142.37066650 400.59906006]
[-156.93562317 403.71533203]
[-157.54635620 419.28021240]
[-168.75068665 429.57183838]
[-183.58563232 428.89367676]
[-181.46073914 444.26455688]
[-188.80613708 457.93295288]
[-202.79734802 464.64306641]
[-218.05447388 461.81472778]
[-228.71084595 450.53546143]
[-230.66886902 435.14242554]
[-223.17564392 421.55453491]
[-209.11245728 414.99658203]
[-193.88690186 417.99026489]
[-193.72216797 403.14074707]
[-182.81132507 392.53848267]
[-167.23689270 392.81195068]
[-163.29913330 378.44729614]
[-147.95428467 374.59420776]
[-137.05090332 364.29293823]
[-126.14751434 353.99166870]
[-115.24412537 343.69039917]
[-104.34074402 333.38912964]
[-114.41100311 319.25906372]
[-122.27863312 303.79187012]
[-127.76964569 287.32836914]
[-130.76243591 270.23138428]
[-131.19047546 252.87780762]
[-129.04374695 235.65032959]
[-124.36904907 218.92887878]
[-117.26892090 203.08232117]
[-107.89942169 188.46032715]
[-96.46668243 175.38562012]
[-83.22238922 164.14686584]
[-68.45822906 154.99230957]
[-52.49947357 148.12431335]
[-35.69779587 143.69480896]
[-18.42355537 141.80201721]
[-1.05759656 142.48822021]
[16.01712418 145.73886108]
[32.42399216 151.48280334]
[47.80103302 159.59390259]
[56.57181931 147.42536926]
[53.94005203 132.80998230]
[62.66152954 120.34440613]
[78.00933075 117.68306732]
[86.78011322 105.51452637]
[88.37989807 91.62451935]
[101.05134583 85.71469116]
[109.82212830 73.54615021]
[118.59291077 61.37760925]
[120.00232697 43.03792191]
[136.23944092 36.43004227]
[137.73408508 20.67959595]
[151.34051514 14.62034607]
[159.87944031 2.28800607]
[168.41838074 -10.04433441]
[176.95730591 -22.37667465]
[185.49624634 -34.70901489]
[194.03517151 -47.04135513]
[202.57411194 -59.37369537]
[211.11305237 -71.70603180]
[212.60769653 -87.45648193]
[226.21411133 -93.51573181]
[234.75305176 -105.84807587]
[226.58804321 -118.63901520]
[223.94932556 -133.54136658]
[227.20832825 -148.27882385]
[235.83804321 -160.61235046]
[248.49790955 -168.68034363]
[263.24200439 -171.27966309]
[277.81820679 -168.04486084]
[286.35714722 -180.37719727]
[294.89608765 -192.70953369]
[303.43499756 -205.04187012]
[304.92965698 -220.79232788]
[318.53607178 -226.85157776]
[327.07501221 -239.18391418]
[318.08224487 -251.36622620]
[313.53469849 -265.80917358]
[313.92568970 -280.94607544]
[319.21273804 -295.13500977]
[328.82241821 -306.83685303]
[341.71228027 -314.78228760]
[356.48416138 -318.10943604]
[371.53573608 -316.45739746]
[385.23428345 -310.00540161]
[396.09390259 -299.45327759]
[402.93664551 -285.94564819]
[405.02023315 -270.94775391]
[402.11865234 -256.08639526]
[394.54666138 -242.97366333]
[383.12561035 -233.03192139]
[369.09436035 -227.33956909]
[353.97494507 -226.51406860]
[339.40734863 -230.64497375]
[330.86840820 -218.31263733]
[329.98452759 -203.44427490]
[315.76736450 -196.50294495]
[307.22842407 -184.17059326]
[298.68948364 -171.83825684]
[290.15054321 -159.50592041]
[298.30755615 -147.00022888]
[301.06265259 -132.28442383]
[297.96542358 -117.59524536]
[289.45730591 -105.17752075]
[276.80917358 -96.94110870]
[261.93139648 -94.16721344]
[247.08538818 -97.30914307]
[238.54646301 -84.97679901]
[237.66256714 -70.10844421]
[223.44538879 -63.16710281]
[214.90644836 -50.83476257]
[206.36752319 -38.50242233]
[197.82858276 -26.17008018]
[189.28965759 -13.83774090]
[180.75071716 -1.50540066]
[172.21177673 10.82693958]
[163.67285156 23.15927887]
[162.78895569 38.02763748]
[148.57177734 44.96897888]
[150.42224121 56.95109940]
[143.37156677 67.30377197]
[130.76145935 70.14839172]
[121.99066925 82.31693268]
[113.21988678 94.48547363]
[111.62010193 108.37548065]
[98.94865417 114.28530884]
[90.17787170 126.45384979]
[92.50617218 141.85569763]
[83.43801117 154.07138062]
[68.74035645 156.19615173]
[59.96957397 168.36468506]
[69.47319794 177.12094116]
[77.95332336 186.87052917]
[85.30680847 197.49455261]
[91.44421387 208.86346436]
[96.29096222 220.83865356]
[99.78818512 233.27416992]
[101.89347839 246.01844788]
[102.58138275 258.91619873]
[101.84372711 271.81030273]
[99.68969727 284.54364014]
[96.14573669 296.96115112]
[91.25521088 308.91162109]
[85.07788086 320.24951172]
[77.68919373 330.83679199]
[69.17932129 340.54461670]
[59.65209198 349.25485229]
[49.22370148 356.86151123]
[38.02132416 363.27209473]
[26.18153000 368.40869141]
[13.84864235 372.20889282]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 35]
[9 34]
[10 33]
[11 32]
[12 31]
[14 29]
[17 26]
[54 145]
[55 144]
[58 141]
[59 140]
[61 138]
[62 137]
[63 136]
[65 133]
[67 131]
[68 130]
[69 129]
[70 128]
[71 127]
[72 126]
[73 125]
[74 124]
[76 122]
[77 121]
[84 114]
[85 113]
[86 112]
[87 111]
[89 109]
[90 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
