%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 08:15:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGGCGGCCCUUCUGACUGUUUAUUUAAGGAUGGAUGGCACCCUGGAACCGGGAAGGGUGGCCUGUUCCCUAGAGAGAAUAAAUUGGAUUAUUUUCUAA\
) } def
/len { sequence length } bind def

/coor [
[167.74557495 149.77607727]
[154.91349792 142.00833130]
[140.01892090 142.03656006]
[132.22003174 128.27110291]
[119.38794708 120.50335693]
[106.55587769 112.73561859]
[92.58235168 112.25373077]
[85.67637634 100.09645844]
[72.84430695 92.32871246]
[60.01222992 84.56097412]
[47.18015671 76.79322815]
[34.34807968 69.02548218]
[21.51600456 61.25773621]
[8.68393040 53.48999405]
[-4.14814472 45.72224808]
[-15.11961651 50.82270432]
[-27.06347084 49.91791153]
[-36.93977737 43.35676575]
[-42.29285431 32.91264725]
[-41.86144638 21.30560684]
[-54.18578339 12.75512314]
[-66.51011658 4.20463943]
[-78.83444977 -4.34584427]
[-86.99818420 -1.21429074]
[-95.63447571 -1.67210615]
[-103.25154877 -5.56253767]
[-108.56530762 -12.14263248]
[-110.71563721 -20.22385979]
[-109.40500641 -28.38640594]
[-120.57296753 -38.40022659]
[-131.74093628 -48.41405106]
[-147.18090820 -51.86622238]
[-151.49142456 -66.12345886]
[-162.65939331 -76.13728333]
[-178.69244385 -76.70368195]
[-188.12991333 -89.67726135]
[-183.73219299 -105.10578918]
[-168.87281799 -111.15382385]
[-154.95065308 -103.18183136]
[-152.64556885 -87.30524445]
[-141.47761536 -77.29141998]
[-126.83643341 -74.55550385]
[-121.72711182 -59.58201218]
[-110.55915070 -49.56819153]
[-99.39118958 -39.55436707]
[-77.90367126 -37.63914490]
[-70.28396606 -16.67017937]
[-57.95963287 -8.11969566]
[-45.63529968 0.43078867]
[-33.31096268 8.98127270]
[-15.68116093 4.56148958]
[-0.05686961 14.44870186]
[3.61959958 32.89017487]
[16.45167542 40.65791702]
[29.28374863 48.42566299]
[42.11582565 56.19340897]
[54.94789886 63.96115112]
[67.77997589 71.72889709]
[80.61205292 79.49664307]
[93.44412231 87.26438141]
[107.41764832 87.74626923]
[114.32362366 99.90354156]
[127.15569305 107.67128754]
[139.98776245 115.43902588]
[155.80018616 115.96640015]
[162.68124390 129.17625427]
[175.51332092 136.94400024]
[184.56581116 130.68830872]
[195.17137146 127.90412140]
[206.05209351 128.89959717]
[215.90618896 133.52909851]
[223.56376648 141.21377563]
[228.12568665 151.01388550]
[229.06912231 161.74359131]
[226.30731201 172.11448669]
[238.07621765 181.41462708]
[249.84513855 190.71476746]
[261.61404419 200.01490784]
[273.38296509 209.31504822]
[285.15188599 218.61518860]
[296.92077637 227.91534424]
[308.68969727 237.21548462]
[320.45861816 246.51562500]
[336.12435913 244.42764282]
[348.62722778 254.09480286]
[350.54946899 269.78176880]
[340.75067139 282.18170166]
[325.04425049 283.93798828]
[312.74859619 274.00863647]
[311.15847778 258.28454590]
[299.38955688 248.98439026]
[287.62063599 239.68424988]
[275.85174561 230.38410950]
[264.08282471 221.08396912]
[252.31390381 211.78382874]
[240.54499817 202.48367310]
[228.77607727 193.18353271]
[217.00715637 183.88339233]
[198.83714294 190.54504395]
[180.11653137 185.11491394]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 66]
[4 64]
[5 63]
[6 62]
[8 60]
[9 59]
[10 58]
[11 57]
[12 56]
[13 55]
[14 54]
[15 53]
[20 50]
[21 49]
[22 48]
[23 47]
[29 45]
[30 44]
[31 43]
[33 41]
[34 40]
[75 98]
[76 97]
[77 96]
[78 95]
[79 94]
[80 93]
[81 92]
[82 91]
[83 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
