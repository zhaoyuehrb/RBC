%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 09:30:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACCCGCGGGGUGGGGGCGAAUCUAUUUUUGCAGAAUCCGGGGGCGGCCCCGGGUGGGCGCGAGUCGCUUUGUAUCAUCAAUAAAUUAUUUAACGGGUC\
) } def
/len { sequence length } bind def

/coor [
[145.39317322 425.41189575]
[148.18186951 406.23187256]
[148.64836121 391.23913574]
[149.11485291 376.24636841]
[149.58135986 361.25363159]
[150.04785156 346.26089478]
[150.51435852 331.26815796]
[130.26609802 319.70297241]
[120.12805939 298.58612061]
[123.79917145 275.34384155]
[140.09837341 258.22601318]
[135.50750732 243.94581604]
[130.91664124 229.66561890]
[126.32579041 215.38542175]
[121.73493195 201.10522461]
[111.03874207 195.22225952]
[107.16292572 183.22213745]
[112.74192047 171.46495056]
[108.59739685 157.04888916]
[104.45286560 142.63281250]
[100.30834198 128.21675110]
[96.16381836 113.80068970]
[86.23367310 103.95773315]
[89.42012024 90.34383392]
[78.17101288 79.21871948]
[82.09053802 64.84907532]
[77.94601440 50.43301392]
[73.80149078 36.01694870]
[69.65695953 21.60088539]
[58.40785599 10.47577095]
[62.32738495 -3.89386940]
[58.18285751 -18.30993271]
[54.03833389 -32.72599792]
[41.49121094 -37.90719223]
[34.37169266 -49.23472977]
[35.12209702 -62.39679337]
[43.23846436 -72.53614807]
[39.54428101 -87.07413483]
[35.85009766 -101.61212158]
[32.15591431 -116.15010071]
[28.46172905 -130.68809509]
[24.76754570 -145.22607422]
[21.07336235 -159.76405334]
[17.37917900 -174.30204773]
[5.55318832 -185.66329956]
[9.74149895 -201.51858521]
[25.63553619 -205.55734253]
[36.88487625 -193.62484741]
[31.91716385 -177.99623108]
[35.61134720 -163.45823669]
[39.30553055 -148.92025757]
[42.99971390 -134.38227844]
[46.69389725 -119.84429169]
[50.38808060 -105.30630493]
[54.08226395 -90.76831818]
[57.77645111 -76.23033142]
[72.53902435 -68.34327698]
[77.20377350 -51.92015839]
[68.45439911 -36.87052536]
[72.59892273 -22.45446014]
[76.74344635 -8.03839588]
[87.69611359 2.05558610]
[84.07302856 17.45635986]
[88.21755219 31.87242508]
[92.36207581 46.28849030]
[96.50660706 60.70455170]
[107.45926666 70.79853058]
[103.83618164 86.19931030]
[113.76632690 96.04226685]
[110.57987976 109.65616608]
[114.72440338 124.07222748]
[118.86893463 138.48829651]
[123.01345825 152.90435791]
[127.15798187 167.32041931]
[140.69618225 179.68020630]
[136.01512146 196.51437378]
[140.60598755 210.79457092]
[145.19683838 225.07476807]
[149.78770447 239.35496521]
[154.37857056 253.63516235]
[162.58877563 253.53347778]
[170.63537598 255.11746216]
[178.17642212 258.31573486]
[184.89225769 262.98831177]
[190.49914551 268.93289185]
[194.76116943 275.89349365]
[197.50025940 283.57153320]
[198.60350037 291.63864136]
[198.02790833 299.75061035]
[195.80201721 307.56222534]
[192.02452087 314.74188232]
[186.85984802 320.98559570]
[180.53112793 326.03002930]
[173.31042480 329.66342163]
[165.50709534 331.73464966]
[165.04060364 346.72738647]
[164.57409668 361.72012329]
[164.10760498 376.71289062]
[163.64109802 391.70562744]
[163.17460632 406.69836426]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 100]
[3 99]
[4 98]
[5 97]
[6 96]
[7 95]
[11 80]
[12 79]
[13 78]
[14 77]
[15 76]
[18 74]
[19 73]
[20 72]
[21 71]
[22 70]
[24 68]
[26 66]
[27 65]
[28 64]
[29 63]
[31 61]
[32 60]
[33 59]
[37 56]
[38 55]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
[44 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
