%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 18:38:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUACGUCAGUGUCCUAAGUUCCUUAACAAUGCUUACCAAUGUAUGGCUUAGAAGUUAAUAAAAAUUCACUUCAUGUAA\
) } def
/len { sequence length } bind def

/coor [
[62.36163330 97.17745209]
[47.92480469 93.10584259]
[33.48797607 89.03424072]
[19.05114746 84.96263123]
[4.61431885 80.89102936]
[-9.82250977 76.81941986]
[-24.25933838 72.74781036]
[-37.93169403 80.21134949]
[-52.51469040 75.87650299]
[-59.54577637 62.79600906]
[-73.98260498 58.72439957]
[-88.41943359 54.65279388]
[-97.86585999 66.52885437]
[-111.10379028 73.86371613]
[-126.10088348 75.56690216]
[-140.56829834 71.40982056]
[-152.31004333 62.05587387]
[-159.55625916 48.95481110]
[-161.22996521 34.11809921]
[-175.66679382 30.04649353]
[-190.10362244 25.97488594]
[-205.85633850 30.53382874]
[-217.49176025 18.97749519]
[-213.04037476 3.19404960]
[-197.08137512 -0.57985127]
[-186.03201294 11.53805828]
[-171.59518433 15.60966492]
[-157.15835571 19.68127251]
[-147.97912598 7.90540981]
[-134.95542908 0.52104896]
[-120.05652618 -1.31946039]
[-105.54895020 2.69525218]
[-93.65174103 11.98341942]
[-86.19700623 25.15421867]
[-84.34782410 40.21596527]
[-69.91099548 44.28757095]
[-55.47417068 48.35918045]
[-42.64464188 40.87995529]
[-27.94564247 44.80348206]
[-20.18773079 58.31098557]
[-5.75090313 62.38259125]
[8.68592548 66.45420074]
[23.12275505 70.52580261]
[37.55958176 74.59741211]
[51.99641037 78.66901398]
[66.43324280 82.74062347]
[77.09658051 69.99921417]
[92.19796753 63.07112503]
[108.81117249 63.29882050]
[123.71701813 70.63817596]
[134.02716064 83.66703796]
[137.74378967 99.86077118]
[152.45558167 102.78713226]
[167.16735840 105.71348572]
[181.87913513 108.63983917]
[196.59091187 111.56619263]
[211.63539124 106.66984558]
[222.60864258 116.74143982]
[237.32041931 119.66779327]
[252.03219604 122.59415436]
[267.37866211 116.81331635]
[279.88491821 127.42111969]
[276.68560791 143.50517273]
[261.07189941 148.51956177]
[249.10583496 137.30592346]
[234.39405823 134.37957764]
[219.68228149 131.45321655]
[205.69009399 136.55888367]
[193.66455078 126.27796936]
[178.95277405 123.35161591]
[164.24099731 120.42526245]
[149.52922058 117.49890900]
[134.81744385 114.57255554]
[127.64531708 125.69727325]
[117.07338715 133.66174316]
[104.40177155 137.48649597]
[91.18882751 136.70118713]
[79.05947876 131.40235901]
[69.50539398 122.24167633]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 46]
[2 45]
[3 44]
[4 43]
[5 42]
[6 41]
[7 40]
[10 37]
[11 36]
[12 35]
[19 28]
[20 27]
[21 26]
[52 73]
[53 72]
[54 71]
[55 70]
[56 69]
[58 67]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
