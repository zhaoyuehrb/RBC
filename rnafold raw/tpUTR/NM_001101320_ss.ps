%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 08:22:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGUUUUUAUGGUGCUUCAGAAGCUACCCAGUUGCUAUCUUCUAUCCUAAGAAAGGGGACUAUUUCGUAAGUACAAAGGAAACUUAUCCUCCAUGUUUUUUACCUU\
) } def
/len { sequence length } bind def

/coor [
[119.12763214 142.22015381]
[113.01369476 144.48652649]
[106.64221954 145.87252808]
[100.13930511 146.35070801]
[93.63362122 145.91162109]
[87.25393677 144.56394958]
[81.12648773 142.33436584]
[75.37255096 139.26699829]
[70.10597992 135.42253113]
[65.43100739 130.87705994]
[61.44015503 125.72053528]
[47.77909088 131.91532898]
[34.11802673 138.11010742]
[20.54937363 144.50476074]
[7.07605505 151.09791565]
[-6.39726400 157.69107056]
[-19.87058258 164.28422546]
[-31.43999672 176.67716980]
[-46.55134964 168.99060059]
[-43.34841156 152.34194946]
[-26.46373749 150.81091309]
[-12.99041843 144.21775818]
[0.48290044 137.62460327]
[13.95621872 131.03144836]
[18.65476418 125.17221069]
[27.92324257 124.44904327]
[41.58430481 118.25425720]
[55.24536896 112.05947876]
[56.26621628 84.64539337]
[72.60673523 62.60993576]
[65.81650543 49.23485565]
[59.02627563 35.85977554]
[52.23604584 22.48469353]
[39.08982086 13.68200207]
[40.22755051 -1.16908646]
[33.43732071 -14.54416656]
[22.73173904 -17.38416100]
[15.57112789 -25.54145622]
[14.19982052 -36.08538437]
[18.83854103 -45.40603638]
[12.84496593 -59.15656281]
[6.85139132 -72.90709686]
[0.85781682 -86.65762329]
[-13.94176006 -92.20272064]
[-20.40952682 -106.62296295]
[-14.70827198 -121.36309052]
[-0.22044885 -127.67803192]
[14.45857334 -121.82125854]
[20.61999130 -107.26747894]
[14.60834599 -92.65119934]
[20.60192108 -78.90066528]
[26.59549522 -65.15013885]
[32.58906937 -51.39960861]
[48.95090103 -41.27273178]
[46.81240082 -21.33439636]
[53.60263062 -7.95931625]
[66.26316833 -0.11330017]
[65.61112976 15.69446373]
[72.40135956 29.06954384]
[79.19158936 42.44462585]
[85.98181915 55.81970596]
[101.16609192 53.66374969]
[116.22269440 56.58074188]
[129.50321960 64.25132751]
[139.55371094 75.83572388]
[145.27378845 90.06565094]
[146.03726196 105.38320160]
[160.45753479 109.51306152]
[174.87780762 113.64291382]
[189.29808044 117.77277374]
[203.71835327 121.90262604]
[221.38679504 116.98312378]
[233.16735840 129.89857483]
[247.70265198 133.60331726]
[262.23794556 137.30807495]
[281.22772217 130.86608887]
[294.68395996 144.62080383]
[309.41162109 147.46612549]
[324.13931274 150.31144714]
[338.86697388 153.15676880]
[351.81716919 144.09765625]
[367.36535645 146.93132019]
[376.28704834 159.97657776]
[373.28915405 175.49394226]
[360.15029907 184.27720642]
[344.66549683 181.11543274]
[336.02163696 167.88442993]
[321.29397583 165.03910828]
[306.56631470 162.19378662]
[291.83865356 159.34846497]
[283.75628662 165.91108704]
[273.16744995 166.87600708]
[263.64303589 161.67008972]
[258.53320312 151.84336853]
[243.99790955 148.13861084]
[229.46261597 144.43386841]
[218.80494690 150.36193848]
[206.58985901 147.27804565]
[199.58850098 136.32290649]
[185.16822815 132.19303894]
[170.74795532 128.06318665]
[156.32766724 123.93333435]
[141.90739441 119.80347443]
[138.71374512 125.48830414]
[134.75396729 130.66871643]
[130.10639954 135.24220276]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 28]
[12 27]
[13 26]
[14 24]
[15 23]
[16 22]
[17 21]
[30 61]
[31 60]
[32 59]
[33 58]
[35 56]
[36 55]
[40 53]
[41 52]
[42 51]
[43 50]
[67 103]
[68 102]
[69 101]
[70 100]
[71 99]
[73 96]
[74 95]
[75 94]
[77 90]
[78 89]
[79 88]
[80 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
