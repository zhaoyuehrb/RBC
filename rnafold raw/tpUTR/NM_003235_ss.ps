%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 19:42:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGCCCUUGAGCUCCCCAAAAACCUCACCCGAGGCUGCCCACUAUGGUCAUCUUUUUCUCUAAAAUAGCCACUUACCUUCAAUAAAGUAUCUACAUGCGGUGAA\
) } def
/len { sequence length } bind def

/coor [
[82.44488525 130.05654907]
[71.32041931 119.72459412]
[57.42007828 125.36200714]
[43.51973343 130.99942017]
[29.61938858 136.63684082]
[15.71904469 142.27424622]
[1.90376401 148.11701965]
[-9.06936455 164.89848328]
[-28.14365387 162.37593079]
[-41.48851013 169.22537231]
[-54.83336639 176.07481384]
[-68.17822266 182.92425537]
[-67.73902130 198.18104553]
[-73.97083282 212.11399841]
[-85.63632202 221.95672607]
[-100.41930389 225.75491333]
[-115.38459778 222.75447083]
[-127.56083679 213.55110168]
[-134.53042603 199.97216797]
[-134.90954590 184.71376038]
[-128.62290955 170.80545044]
[-116.91874695 161.00874329]
[-102.12092590 157.26878357]
[-87.16756439 160.32815552]
[-75.02766418 169.57939148]
[-61.68280411 162.72994995]
[-48.33794785 155.88050842]
[-34.99309158 149.03108215]
[-32.68162537 138.87597656]
[-24.94059944 131.58140564]
[-14.22904968 129.80369568]
[-4.14308739 134.38983154]
[0.78839475 128.72219849]
[10.08163166 128.37390137]
[23.98197556 122.73648834]
[37.88232040 117.09907532]
[51.78266525 111.46166229]
[65.68300629 105.82424927]
[65.26934052 97.68501282]
[66.75959778 89.67268372]
[70.07208252 82.22649384]
[75.02519989 75.75463867]
[81.34743500 70.61191559]
[88.69219208 67.08023071]
[96.65684509 65.35319519]
[104.80476379 65.52548981]
[110.02779388 51.46419144]
[115.25081635 37.40289688]
[120.47383881 23.34160233]
[118.02598572 7.71090841]
[129.71073914 -1.52574587]
[134.93376160 -15.58704090]
[135.00651550 -24.88651657]
[140.52552795 -29.98378563]
[146.16294861 -43.88412857]
[151.80035400 -57.78447342]
[145.41423035 -72.24106598]
[151.19874573 -86.94871521]
[165.72204590 -93.18163300]
[180.36772156 -87.24194336]
[186.44674683 -72.65355682]
[180.35253906 -58.07150650]
[165.70069885 -52.14706039]
[160.06329346 -38.24671555]
[154.42587280 -24.34637070]
[148.99505615 -10.36401653]
[143.77203369 3.69727874]
[146.59347534 18.32221413]
[134.53514099 28.56462669]
[129.31210327 42.62592316]
[124.08908844 56.68721771]
[118.86605835 70.74851227]
[132.97427368 88.85213470]
[132.74557495 111.80274963]
[145.42951965 119.81009674]
[158.11346436 127.81745148]
[170.79739380 135.82479858]
[183.48133850 143.83215332]
[179.91403198 129.26251221]
[184.59083557 115.01023102]
[196.09693909 105.38685608]
[210.95156860 103.30361176]
[224.66094971 109.39070892]
[233.07777405 121.80671692]
[233.65580750 136.79557800]
[226.22019958 149.82290649]
[213.02032471 156.94775391]
[198.04801941 156.01422119]
[208.17276001 167.08172607]
[218.29750061 178.14923096]
[228.42225647 189.21672058]
[244.21295166 193.64231873]
[248.01292419 209.59512329]
[235.91308594 220.66427612]
[220.36071777 215.46276855]
[217.35475159 199.34147644]
[207.23001099 188.27397156]
[197.10525513 177.20646667]
[186.98051453 166.13897705]
[175.47398376 156.51608276]
[162.79005432 148.50874329]
[150.10610962 140.50138855]
[137.42216492 132.49403381]
[124.73822784 124.48668671]
[111.96157074 132.68789673]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 38]
[3 37]
[4 36]
[5 35]
[6 34]
[7 32]
[9 28]
[10 27]
[11 26]
[12 25]
[46 72]
[47 71]
[48 70]
[49 69]
[51 67]
[52 66]
[54 65]
[55 64]
[56 63]
[74 104]
[75 103]
[76 102]
[77 101]
[78 100]
[88 99]
[89 98]
[90 97]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
