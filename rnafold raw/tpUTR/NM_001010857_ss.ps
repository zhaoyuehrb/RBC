%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 22:25:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCACUGUGGGCACUACCCAACCCCACCACCACUGCCACCUCCACCAUGUACAACGCUGUGGGGCUGGAGACUGAAACCAUGAACUGACAAGUAAACGUGUUCCUCUGCUGUGCAAGACUU\
) } def
/len { sequence length } bind def

/coor [
[91.20546722 176.96287537]
[102.81362915 166.80146790]
[100.50527191 151.98014832]
[98.19691467 137.15882874]
[95.88855743 122.33751678]
[78.40956116 112.77978516]
[73.92733765 91.36381531]
[62.40913391 100.97271729]
[50.89092636 110.58161163]
[39.37272263 120.19050598]
[27.85451508 129.79940796]
[31.13658714 144.74887085]
[27.08417130 159.50816345]
[16.62848091 170.68568420]
[2.17215800 175.71293640]
[-12.96284103 173.43470764]
[-25.29860306 164.37448120]
[-32.00046158 150.61425781]
[-31.52837944 135.31604004]
[-23.99083328 121.99522400]
[-11.11990070 113.71285248]
[4.12677383 112.37215424]
[18.24561691 118.28119659]
[29.76382446 108.67230225]
[41.28203201 99.06340790]
[52.80023575 89.45450592]
[64.31844330 79.84561157]
[52.02257919 88.43698120]
[37.02388763 88.63499451]
[24.50549889 80.37122345]
[18.79342842 66.50138855]
[21.86160851 51.81853104]
[32.64976120 41.39664078]
[47.42979431 38.83723450]
[61.09414291 45.02477646]
[68.92086792 57.82135773]
[62.21445847 44.40404892]
[55.50805283 30.98674393]
[42.41716385 22.10196686]
[43.64779663 7.25828791]
[36.94138718 -6.15901804]
[30.23498154 -19.57632446]
[23.52857590 -32.99362946]
[16.82216835 -46.41093826]
[10.11576080 -59.82824326]
[-4.60682678 -64.91579437]
[-11.21694279 -78.61838531]
[-6.27601147 -92.62277222]
[-12.98241806 -106.04007721]
[-19.68882561 -119.45738220]
[-32.17877579 -130.92199707]
[-24.61976051 -146.09756470]
[-7.94472408 -143.03497314]
[-6.27151918 -126.16378784]
[0.43488783 -112.74648285]
[7.14129496 -99.32917786]
[21.30816841 -94.87549591]
[28.30055428 -81.36397552]
[23.53306770 -66.53465271]
[30.23947334 -53.11734390]
[36.94588089 -39.70003891]
[43.65228653 -26.28273201]
[50.35869598 -12.86542511]
[57.06510162 0.55188107]
[69.67630005 8.47696209]
[68.92535400 24.28033638]
[75.63176727 37.69764328]
[82.33817291 51.11494827]
[95.75547791 57.82135773]
[110.51244354 55.13214493]
[125.26941681 52.44293213]
[133.29580688 42.24763870]
[145.72717285 40.36433029]
[155.74980164 47.26903915]
[170.57112122 44.96068192]
[185.39244080 42.65232468]
[190.92875671 38.69635010]
[196.74769592 38.28555679]
[201.03431702 40.62716675]
[215.95481873 39.08485413]
[230.87532043 37.54253769]
[245.79582214 36.00022507]
[261.43862915 23.41087151]
[278.79644775 31.77100563]
[293.61776733 29.46264648]
[308.43908691 27.15428925]
[320.86376953 16.45104599]
[336.25405884 22.11421776]
[338.77770996 38.31801605]
[325.83865356 48.39336395]
[310.74746704 41.97560883]
[295.92614746 44.28396606]
[281.10482788 46.59232330]
[275.75198364 55.46591568]
[266.17117310 59.96397400]
[255.48742676 58.34827042]
[247.33813477 50.92072296]
[232.41763306 52.46303558]
[217.49713135 54.00535202]
[202.57662964 55.54766464]
[187.70079041 57.47364044]
[172.87947083 59.78200150]
[158.05816650 62.09035873]
[145.07981873 73.82703400]
[127.95862579 67.19990540]
[113.20166016 69.88911438]
[98.44468689 72.57832336]
[115.27129364 78.61555481]
[124.15437317 93.21499634]
[121.98662567 109.37260437]
[110.70987701 120.02915192]
[113.01823425 134.85047913]
[115.32659149 149.67179871]
[117.63494873 164.49310303]
[131.78352356 170.64300537]
[140.34217834 183.47862244]
[140.57987976 198.90415955]
[132.42076111 211.99737549]
[118.46838379 218.58027649]
[103.17489624 216.55229187]
[91.42039490 206.56053162]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 114]
[3 113]
[4 112]
[5 111]
[7 27]
[8 26]
[9 25]
[10 24]
[11 23]
[36 68]
[37 67]
[38 66]
[40 64]
[41 63]
[42 62]
[43 61]
[44 60]
[45 59]
[48 56]
[49 55]
[50 54]
[69 107]
[70 106]
[71 105]
[74 103]
[75 102]
[76 101]
[79 100]
[80 99]
[81 98]
[82 97]
[84 93]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
