%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 07:35:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUUUCUGAACUCCUGGCACCAAGUUCUGUCCAUUCAUCUGACCCCAUCUCCUCAUCCUCCCCCAGCCCUUGAAUAGGUUGGUCCUCAUCAUUGCAAGGAAUGAGAAAGGGAGGAUUUUGCACUCCUCUGCUUUCUCCCUGCCUUGAUUGAGCUUGAGUGAUGUGGAAUAAAUUGUCCGUCUCUUCUUUCUC\
) } def
/len { sequence length } bind def

/coor [
[-6.79153490 530.14282227]
[-17.49337769 535.02593994]
[-28.72377968 538.52111816]
[-40.30359268 540.57305908]
[-52.04814529 541.14935303]
[-63.77017975 540.24121094]
[-75.28285980 537.86358643]
[-86.40271759 534.05462646]
[-96.95260620 528.87554932]
[-105.41195679 541.26263428]
[-113.87131500 553.64965820]
[-122.33067322 566.03674316]
[-130.79002380 578.42382812]
[-131.67205811 584.99938965]
[-135.21743774 589.46386719]
[-139.72927856 591.06890869]
[-148.58531189 603.17559814]
[-149.81341553 619.52868652]
[-164.70500183 626.39691162]
[-177.94090271 616.71478271]
[-175.90515137 600.44250488]
[-160.69195557 594.31951904]
[-151.83592224 582.21289062]
[-143.17709351 569.96441650]
[-134.71772766 557.57739258]
[-126.25837708 545.19030762]
[-117.79901886 532.80328369]
[-109.33966827 520.41619873]
[-122.58010101 507.35012817]
[-132.96055603 491.90869141]
[-140.06504822 474.70758057]
[-143.60830688 456.43307495]
[-143.44712830 437.81460571]
[-139.58624268 419.59576416]
[-132.17816162 402.50442505]
[-121.51714325 387.22381592]
[-108.02754974 374.36517334]
[-92.24687958 364.44320679]
[-74.80443573 357.85559082]
[-56.39615631 354.86703491]
[-37.75690842 355.59857178]
[-19.63110924 360.02267456]
[-13.50048637 346.33270264]
[-7.36986303 332.64273071]
[-18.42575455 321.29873657]
[-24.29889107 306.54586792]
[-24.06332397 290.63015747]
[-17.72554398 275.98687744]
[-6.22801018 264.86795044]
[8.69088459 258.99563599]
[24.75961494 259.29580688]
[30.66775131 245.50834656]
[36.57588577 231.72090149]
[34.47700500 216.97491455]
[47.02440262 207.33782959]
[52.93254089 193.55036926]
[58.84067535 179.76292419]
[64.74880981 165.97546387]
[70.54512024 152.14062500]
[76.22922516 138.25930786]
[81.91332245 124.37799072]
[72.47187805 112.79127502]
[69.70450592 98.10337067]
[74.28214264 83.87529755]
[63.93629074 73.01420593]
[53.59043121 62.15311813]
[43.24457550 51.29202652]
[32.89871979 40.43093872]
[22.55286217 29.56984901]
[7.19080067 31.75769806]
[-6.50757027 24.46837425]
[-13.27494812 10.50477028]
[-10.50913715 -4.76382160]
[0.72635210 -15.46631718]
[16.11124420 -17.48738861]
[29.72973442 -10.04989243]
[36.34523392 3.98630309]
[33.41395187 19.22399330]
[43.75980759 30.08508301]
[54.10566330 40.94617081]
[64.45152283 51.80725861]
[74.79737854 62.66835022]
[85.14323425 73.52943420]
[94.52745056 70.14258575]
[104.50283813 69.98102570]
[113.99180603 73.06222534]
[123.98053741 61.87181854]
[133.96926880 50.68140793]
[143.95799255 39.49099350]
[153.85578918 28.22007370]
[163.66200256 16.86938095]
[173.46821594 5.51868963]
[172.50241089 -10.02817535]
[182.60900879 -21.39969826]
[197.43650818 -22.22462654]
[207.24272156 -33.57531738]
[217.04893494 -44.92601013]
[220.29768372 -53.47880173]
[227.10700989 -56.37944794]
[237.09573364 -67.56986237]
[238.16157532 -72.70882416]
[240.83169556 -76.53514862]
[244.33369446 -78.65658569]
[247.85159302 -79.04600525]
[258.37197876 -89.73814392]
[268.89233398 -100.43027496]
[279.41271973 -111.12240601]
[289.93310547 -121.81454468]
[300.45346069 -132.50666809]
[310.97384644 -143.19880676]
[321.40728760 -153.97576904]
[331.75314331 -164.83686829]
[342.09899902 -175.69795227]
[352.44485474 -186.55903625]
[362.79074097 -197.42013550]
[373.13659668 -208.28121948]
[370.20529175 -223.51890564]
[376.82080078 -237.55509949]
[390.43930054 -244.99259949]
[405.82418823 -242.97152710]
[417.05966187 -232.26902771]
[419.82546997 -217.00044250]
[413.05810547 -203.03683472]
[399.35974121 -195.74751282]
[383.99768066 -197.93536377]
[373.65182495 -187.07427979]
[363.30596924 -176.21318054]
[352.96011353 -165.35209656]
[342.61425781 -154.49101257]
[332.26840210 -143.62991333]
[329.92797852 -136.60829163]
[321.66598511 -132.67843628]
[311.14559937 -121.98629761]
[300.62521362 -111.29416656]
[290.10485840 -100.60203552]
[279.58447266 -89.90989685]
[269.06411743 -79.21776581]
[258.54373169 -68.52563477]
[248.28614807 -57.58113098]
[238.29742432 -46.39072037]
[228.39962769 -35.11980057]
[218.59341431 -23.76910782]
[208.78720093 -12.41841507]
[210.12440491 2.37169981]
[200.34120178 14.02260876]
[184.81890869 15.32490063]
[175.01269531 26.67559242]
[165.20648193 38.02628708]
[163.20982361 45.15328217]
[155.14840698 49.47972488]
[145.15966797 60.67013550]
[135.17094421 71.86054993]
[125.18222046 83.05095673]
[130.35049438 99.48812866]
[125.73944092 116.09022522]
[112.83480835 127.50785065]
[95.79463959 130.06208801]
[90.11054230 143.94340515]
[84.42643738 157.82472229]
[84.06846619 166.96673584]
[78.53627014 171.88360596]
[72.62813568 185.67105103]
[66.71999359 199.45851135]
[60.81185913 213.24597168]
[62.48815155 228.97811890]
[50.36334229 237.62902832]
[44.45520782 251.41648865]
[38.54706955 265.20394897]
[48.79331970 275.10720825]
[55.02856827 287.88735962]
[56.52146530 301.99877930]
[53.11281204 315.74267578]
[45.23225021 327.47149658]
[33.84422684 335.78640747]
[20.32999611 339.70419312]
[6.32011366 338.77334595]
[0.18949081 352.46331787]
[-5.94113207 366.15328979]
[4.01181650 372.47177124]
[13.08806515 379.99307251]
[21.14316368 388.59701538]
[28.04897881 398.14614868]
[33.69572449 408.48803711]
[37.99372101 419.45761108]
[40.87480545 430.87988281]
[42.29341888 442.57263184]
[42.22732925 454.34942627]
[40.67796707 466.02249146]
[37.67042160 477.40579224]
[33.25300598 488.31796265]
[27.49650002 498.58520508]
[20.49300957 508.04400635]
[12.35449505 516.54376221]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[16 23]
[17 22]
[42 178]
[43 177]
[44 176]
[51 168]
[52 167]
[53 166]
[55 164]
[56 163]
[57 162]
[58 161]
[59 159]
[60 158]
[61 157]
[64 83]
[65 82]
[66 81]
[67 80]
[68 79]
[69 78]
[86 153]
[87 152]
[88 151]
[89 150]
[90 148]
[91 147]
[92 146]
[95 143]
[96 142]
[97 141]
[99 140]
[100 139]
[104 138]
[105 137]
[106 136]
[107 135]
[108 134]
[109 133]
[110 132]
[111 130]
[112 129]
[113 128]
[114 127]
[115 126]
[116 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
