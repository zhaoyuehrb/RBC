%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:05:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAACGAAAAAUCAAUAAAUAAAUGUGGAUUUGUGCUCUUGUAUUUUUAAGUGGAUUAAAAAACUUACUACCUUAA\
) } def
/len { sequence length } bind def

/coor [
[207.68165588 224.97531128]
[214.69494629 211.63075256]
[203.46728516 201.68391418]
[192.23962402 191.73707581]
[177.76028442 195.12625122]
[163.89768982 189.27024841]
[156.04971313 176.22177124]
[157.40559387 160.87681580]
[146.17793274 150.92997742]
[134.95027161 140.98313904]
[123.72261047 131.03630066]
[112.49494934 121.08945465]
[101.26728821 111.14261627]
[89.84159851 101.42388153]
[78.22252655 91.93720245]
[66.60345459 82.45052338]
[50.45208740 87.00288391]
[34.88759232 81.18516541]
[25.86251831 67.42979431]
[26.70545197 51.16422653]
[14.71381092 42.15309525]
[2.72216916 33.14196014]
[-9.26947212 24.13082504]
[-21.26111412 15.11969185]
[-33.25275421 6.10855770]
[-49.58869171 4.67007494]
[-56.26466370 -10.30869198]
[-46.41300201 -23.41887093]
[-30.16825294 -21.17383575]
[-24.24162102 -5.88308382]
[-12.24997997 3.12805033]
[-0.25833842 12.13918400]
[11.73330307 21.15031815]
[23.72494507 30.16145134]
[35.71658707 39.17258453]
[48.21298981 34.05642319]
[61.70425415 35.86781311]
[72.58168030 44.23206711]
[77.88108826 57.00716400]
[76.09013367 70.83144379]
[87.70920563 80.31813049]
[99.32828522 89.80480957]
[107.29424286 92.14990234]
[111.21412659 99.91495514]
[122.44178772 109.86179352]
[133.66944885 119.80863190]
[144.89710999 129.75547791]
[156.12477112 139.70231628]
[167.35243225 149.64915466]
[182.42207336 146.45353699]
[196.32138062 152.67147827]
[203.80563354 165.72711182]
[202.18646240 180.50941467]
[213.41412354 190.45625305]
[224.64178467 200.40309143]
[237.04368591 191.83242798]
[251.13655090 186.47943115]
[266.10104370 184.65533447]
[281.06716919 186.46617126]
[295.16476440 191.80667114]
[307.57424927 200.36634827]
[317.57415771 211.64755249]
[324.58309937 224.99438477]
[328.19357300 239.63092041]
[328.19567871 254.70617676]
[324.58929443 269.34371948]
[317.58410645 282.69250488]
[307.58734131 293.97650146]
[295.18026733 302.53964233]
[281.08413696 307.88409424]
[266.11856079 309.69912720]
[251.15354919 307.87921143]
[237.05917358 302.53018188]
[224.65487671 293.96298218]
[214.66181946 282.67572021]
[207.66098022 269.32461548]
[204.05937195 254.68591309]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 55]
[3 54]
[4 53]
[8 49]
[9 48]
[10 47]
[11 46]
[12 45]
[13 44]
[14 42]
[15 41]
[16 40]
[20 35]
[21 34]
[22 33]
[23 32]
[24 31]
[25 30]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
