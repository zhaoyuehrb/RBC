%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 19:19:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAGUUCCUCUUGCCCCCUACCCCCGGGGCUUGUAUAUAGAUUAUAAAUAUAUAAGGGGGAAAGGGGUGGGCGGGGAGGGGUUCUGGGGCUGGGGCCUCACUUCCCCUCCUCCCCCUUCCCCUGGUCCCCUGUCCCUGGGGCUGUUUGUUAAAAAAGAGUAAUAAAAGGAUUUAAAAAAAAAAACUUCUA\
) } def
/len { sequence length } bind def

/coor [
[84.57881927 125.53608704]
[79.75723267 139.74003601]
[74.93563843 153.94398499]
[77.82640076 169.49885559]
[66.40866852 179.06362915]
[61.58707809 193.26757812]
[69.85357666 206.54158020]
[67.60254669 222.01629639]
[55.89686203 232.38504028]
[40.26358414 232.75201416]
[28.08427238 222.94393921]
[25.10962296 207.59188843]
[32.74417496 193.94462585]
[47.38312531 188.44598389]
[52.20471573 174.24203491]
[48.96908188 159.70312500]
[60.73168564 149.12239075]
[65.55327606 134.91844177]
[70.37487030 120.71449280]
[72.30630493 108.76216888]
[78.05532074 100.05831909]
[85.82510376 95.59786987]
[93.63277435 95.59811401]
[87.21945190 82.03827667]
[80.80612183 68.47843170]
[74.39279938 54.91859436]
[67.97946930 41.35875702]
[61.56614685 27.79891586]
[55.15281677 14.23907661]
[48.73949051 0.67923748]
[35.56896591 -6.49970388]
[20.69729233 -4.54181099]
[5.82561874 -2.58391786]
[-9.04605389 -0.62602508]
[-23.91772652 1.33186781]
[-38.78940201 3.28976059]
[-53.66107178 5.24765348]
[-68.53274536 7.20554638]
[-83.40441895 9.16343975]
[-89.88655090 23.16292381]
[-102.92059326 31.41623878]
[-118.34743500 31.28978157]
[-131.24443054 22.82390594]
[-137.49620056 8.72003937]
[-135.10780334 -6.52132368]
[-124.84139252 -18.03672028]
[-109.97293854 -22.15162849]
[-95.24690247 -17.55299759]
[-85.36231232 -5.70823336]
[-70.49063873 -7.66612625]
[-55.61896515 -9.62401962]
[-40.74729156 -11.58191204]
[-25.87561989 -13.53980541]
[-11.00394726 -15.49769783]
[3.86772561 -17.45559120]
[18.73939896 -19.41348457]
[33.61107254 -21.37137604]
[43.22151566 -32.88829422]
[42.48550034 -47.87022781]
[41.74948502 -62.85215759]
[41.01346970 -77.83409119]
[40.27745438 -92.81602478]
[29.94097137 -108.04641724]
[38.54278946 -123.33482361]
[37.56174088 -138.30270386]
[36.58069611 -153.27058411]
[35.59964752 -168.23847961]
[34.61860275 -183.20635986]
[24.03430748 -198.26559448]
[32.38483047 -213.69268799]
[31.15901184 -228.64251709]
[29.93319702 -243.59234619]
[21.09401131 -256.71405029]
[27.76534462 -270.03106689]
[26.53952980 -284.98089600]
[25.31371307 -299.93072510]
[24.08789635 -314.88055420]
[22.86208153 -329.83038330]
[21.63626480 -344.78021240]
[20.41044807 -359.73004150]
[19.18463326 -374.67987061]
[17.95881653 -389.62969971]
[4.86664152 -397.74765015]
[-0.86801279 -411.85321045]
[2.75990653 -426.45809937]
[14.15569878 -436.01184082]
[12.92988205 -450.96166992]
[11.70406628 -465.91146851]
[10.47825050 -480.86129761]
[9.25243378 -495.81112671]
[8.02661800 -510.76095581]
[-1.74597478 -523.93017578]
[5.02000904 -538.86853027]
[21.36430550 -540.20867920]
[30.47330284 -526.57202148]
[22.97644615 -511.98678589]
[24.20226288 -497.03695679]
[25.42807961 -482.08712769]
[26.65389442 -467.13729858]
[27.87971115 -452.18746948]
[29.10552788 -437.23764038]
[41.90536880 -429.66784668]
[47.86389923 -415.84899902]
[44.50357437 -400.99768066]
[32.90864563 -390.85549927]
[34.13446045 -375.90567017]
[35.36027908 -360.95584106]
[36.58609390 -346.00601196]
[37.81190872 -331.05618286]
[39.03772736 -316.10638428]
[40.26354218 -301.15655518]
[41.48935699 -286.20672607]
[42.71517563 -271.25689697]
[51.46668243 -259.20446777]
[44.88302612 -244.81816101]
[46.10884094 -229.86833191]
[47.33465576 -214.91850281]
[56.35828018 -206.84727478]
[57.49323654 -194.39122009]
[49.58648682 -184.18740845]
[50.56753159 -169.21952820]
[51.54858017 -154.25163269]
[52.52962494 -139.28375244]
[53.51067352 -124.31587219]
[62.40102768 -116.09806824]
[63.33202744 -103.62511444]
[55.25938416 -93.55204010]
[55.99539948 -78.57010651]
[56.73141479 -63.58817291]
[57.46743011 -48.60624313]
[58.20344543 -33.62430954]
[63.47714233 -28.45469284]
[66.31994629 -21.28346634]
[65.99701691 -13.24641991]
[62.29933167 -5.73408890]
[68.71266174 7.82575035]
[75.12598419 21.38558960]
[81.53931427 34.94543076]
[87.95263672 48.50526810]
[94.36596680 62.06510925]
[100.77928925 75.62494659]
[107.19261932 89.18478394]
[117.97134399 99.61642456]
[131.73376465 105.58265686]
[147.47283936 103.97271729]
[156.07254028 116.13390350]
[169.83496094 122.10012817]
[183.59738159 128.06636047]
[197.35978699 134.03259277]
[211.12220764 139.99880981]
[224.88462830 145.96504211]
[238.64704895 151.93125916]
[251.93943787 143.92552185]
[267.39593506 145.29533386]
[279.07318115 155.51400757]
[282.48107910 170.65223694]
[276.30917358 184.88906860]
[262.93072510 192.75013733]
[247.49000549 191.21273804]
[235.92428589 180.86799622]
[232.68081665 165.69367981]
[218.91839600 159.72746277]
[205.15599060 153.76123047]
[191.39356995 147.79499817]
[177.63114929 141.82878113]
[163.86872864 135.86254883]
[150.10630798 129.89631653]
[135.35160828 131.93299866]
[125.76753235 119.34506989]
[112.00511169 113.37884521]
[105.14853668 116.41815186]
[114.36583710 128.25205994]
[123.58312988 140.08598328]
[132.80043030 151.91989136]
[142.01773071 163.75379944]
[151.23501587 175.58770752]
[163.61097717 184.06330872]
[171.39408875 196.88606262]
[173.20095825 211.77684021]
[168.71043396 226.08891296]
[158.72068787 237.27839661]
[145.00729370 243.35647583]
[130.00772095 243.24279785]
[116.38803864 236.95756531]
[106.56903076 225.61793518]
[102.29595947 211.23945618]
[104.32735443 196.38044739]
[101.74896240 181.60371399]
[99.17057037 166.82698059]
[96.59217834 152.05024719]
[94.01378632 137.27351379]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[3 17]
[5 15]
[6 14]
[23 142]
[24 141]
[25 140]
[26 139]
[27 138]
[28 137]
[29 136]
[30 135]
[31 57]
[32 56]
[33 55]
[34 54]
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[58 131]
[59 130]
[60 129]
[61 128]
[62 127]
[64 124]
[65 123]
[66 122]
[67 121]
[68 120]
[70 117]
[71 116]
[72 115]
[74 113]
[75 112]
[76 111]
[77 110]
[78 109]
[79 108]
[80 107]
[81 106]
[82 105]
[86 101]
[87 100]
[88 99]
[89 98]
[90 97]
[91 96]
[143 170]
[144 169]
[146 167]
[147 166]
[148 165]
[149 164]
[150 163]
[151 162]
[152 161]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
