%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 05:44:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUUGGGAUAUUUUUCUUCAAUUUUGAAGAGAAAAUGGUGAAGCCAUAGAAAAGUUACCCGAGGGAAAAUAAAUACAGUGAUAUUCUUACGCAAA\
) } def
/len { sequence length } bind def

/coor [
[193.56980896 195.98693848]
[198.10571289 176.08027649]
[185.71864319 167.62091064]
[173.33158875 159.16156006]
[160.94451904 150.70220947]
[148.55746460 142.24284363]
[136.17039490 133.78349304]
[123.78333282 125.32414246]
[105.92900848 135.57293701]
[84.62842560 134.07971191]
[67.16706848 120.50202942]
[59.98817825 98.77182007]
[45.00587845 99.50025940]
[30.02357483 100.22869110]
[15.04127216 100.95712280]
[0.05896974 101.68555450]
[-14.92333221 102.41398621]
[-29.90563583 103.14242554]
[-44.88793564 103.87085724]
[-59.87023926 104.59928894]
[-74.85253906 105.32772064]
[-88.33918762 114.65737152]
[-103.04446411 107.39880371]
[-103.84084320 91.01900482]
[-89.90908051 82.36811066]
[-75.58097839 90.34542084]
[-60.59867477 89.61698914]
[-45.61637115 88.88855743]
[-30.63406754 88.16011810]
[-15.65176582 87.43168640]
[-0.66946357 86.70325470]
[14.31283855 85.97482300]
[29.29514122 85.24638367]
[44.27744293 84.51795197]
[59.25974655 83.78952026]
[67.10757446 71.00627136]
[60.97695541 57.31629181]
[54.84633255 43.62631607]
[48.71570969 29.93633842]
[42.58508682 16.24636078]
[30.59321976 4.26172638]
[38.78981018 -10.57917023]
[55.31976318 -6.81127357]
[56.27506256 10.11573887]
[62.40568542 23.80571556]
[68.53630829 37.49569321]
[74.66693115 51.18566895]
[80.79755402 64.87564850]
[89.17153168 61.96143723]
[97.87710571 60.98875427]
[106.47543335 61.95907974]
[114.54351807 64.77713776]
[121.69498444 69.25793457]
[127.59857941 75.13815308]
[131.99342346 82.09129333]
[134.70040894 89.74552917]
[135.62908936 97.70352936]
[134.78007507 105.56301117]
[132.24269104 112.93708038]
[144.62974548 121.39643097]
[157.01681519 129.85578918]
[169.40386963 138.31513977]
[181.79093933 146.77450562]
[194.17799377 155.23385620]
[206.56506348 163.69320679]
[214.65141296 156.86842346]
[224.02607727 151.98097229]
[234.23358154 149.26379395]
[244.77897644 148.84445190]
[255.15182495 150.73918152]
[264.85098267 154.85234070]
[273.40866089 160.98120117]
[280.41314697 168.82591248]
[285.52856445 178.00418091]
[288.51089478 188.06996155]
[289.21969604 198.53503418]
[287.62472534 208.89277649]
[283.80712891 218.64259338]
[277.95541382 227.31420898]
[287.76162720 238.66490173]
[297.56784058 250.01559448]
[305.70755005 254.57701111]
[307.50054932 261.89630127]
[316.93405151 273.55856323]
[332.42666626 278.93551636]
[335.25024414 295.08975220]
[322.50012207 305.40319824]
[307.29257202 299.26623535]
[305.27178955 282.99209595]
[295.83825684 271.32980347]
[286.21713257 259.82180786]
[276.41094971 248.47111511]
[266.60473633 237.12042236]
[247.58581543 243.95245361]
[227.40522766 242.27214050]
[209.70549011 232.34811401]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 65]
[3 64]
[4 63]
[5 62]
[6 61]
[7 60]
[8 59]
[12 35]
[13 34]
[14 33]
[15 32]
[16 31]
[17 30]
[18 29]
[19 28]
[20 27]
[21 26]
[36 48]
[37 47]
[38 46]
[39 45]
[40 44]
[79 93]
[80 92]
[81 91]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
