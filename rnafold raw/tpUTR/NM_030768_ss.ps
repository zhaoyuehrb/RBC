%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 00:28:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGUGGCGCGCGGCCAGGAGCACGCAUGGUAUUGACUUAAAAGGUUCAUUUUGUGUGUGUGCACAUUGUGUGUUUUGUGUACUCCUGUGGGACUCCCAUGGUUGUAAAUAAAGGUUUCUCUUUUUUUUUCCUA\
) } def
/len { sequence length } bind def

/coor [
[99.62915802 162.53677368]
[99.28012848 147.54083252]
[98.93109131 132.54489136]
[98.58205414 117.54895020]
[84.02761841 113.92012787]
[76.67927551 126.99689484]
[69.33093262 140.07365417]
[61.98258591 153.15042114]
[64.91297150 168.92358398]
[54.29960632 180.95420837]
[38.28416061 180.01344299]
[29.15230942 166.82296753]
[33.90922928 151.50137329]
[48.90581894 145.80207825]
[56.25416565 132.72531128]
[63.60250854 119.64854431]
[70.95085907 106.57177734]
[72.18463898 104.08596802]
[73.61883545 101.82906342]
[75.22555542 99.81641388]
[76.97579956 98.06043243]
[62.82167053 93.09448242]
[48.66754532 88.12853241]
[34.51341629 83.16258240]
[20.35928917 78.19662476]
[6.20516109 73.23067474]
[-7.94896650 68.26472473]
[-22.10309410 63.29877472]
[-36.25722122 58.33282471]
[-50.41135025 53.36687088]
[-65.99485016 56.09912109]
[-75.44287109 44.58460617]
[-89.59700012 39.61865616]
[-105.18049622 42.35090637]
[-114.62852478 30.83638763]
[-128.78265381 25.87043762]
[-142.93678284 20.90448570]
[-157.09089661 15.93853474]
[-171.24502563 10.97258282]
[-188.19268799 11.43420315]
[-193.32785034 -4.72334814]
[-179.22329712 -14.13067913]
[-166.27908325 -3.18154454]
[-152.12495422 1.78440678]
[-137.97082520 6.75035810]
[-123.81669617 11.71630955]
[-109.66256714 16.68226051]
[-95.09146881 13.59481239]
[-84.63105011 25.46452713]
[-70.47692108 30.43047905]
[-55.90582275 27.34302902]
[-45.44539642 39.21274567]
[-31.29127121 44.17869568]
[-17.13714218 49.14464569]
[-2.98301530 54.11059952]
[11.17111206 59.07654953]
[25.32523918 64.04250336]
[39.47936630 69.00845337]
[53.63349533 73.97440338]
[67.78762054 78.94035339]
[81.94174957 83.90630341]
[94.27887726 75.37429047]
[94.62791443 60.37834930]
[94.97694397 45.38241196]
[95.32598114 30.38647270]
[95.67501068 15.39053440]
[89.99887085 -0.58500117]
[103.77876282 -10.46178627]
[117.08421326 0.04541718]
[110.67095184 15.73956871]
[110.32191467 30.73550797]
[109.97288513 45.73144531]
[109.62384796 60.72738647]
[109.27481842 75.72332001]
[121.41007233 84.54010010]
[135.56419373 79.57415009]
[149.71832275 74.60820007]
[163.87245178 69.64225006]
[178.02658081 64.67630005]
[188.48699951 52.80658340]
[203.05810547 55.89403152]
[217.21223450 50.92807770]
[231.36636353 45.96212769]
[238.26487732 31.99616432]
[252.68992615 27.16161537]
[265.96182251 33.82437134]
[280.11593628 28.85841942]
[294.27008057 23.89246750]
[308.42419434 18.92651558]
[322.57833862 13.96056557]
[336.73245239 8.99461365]
[350.88659668 4.02866268]
[363.83081055 -6.92047215]
[377.93536377 2.48685884]
[372.80020142 18.64441109]
[355.85253906 18.18279076]
[341.69839478 23.14874077]
[327.54428101 28.11469269]
[313.39016724 33.08064270]
[299.23602295 38.04659653]
[285.08190918 43.01254654]
[270.92776489 47.97849655]
[264.72796631 61.47286606]
[250.44441223 66.71067810]
[236.33230591 60.11625671]
[222.17817688 65.08220673]
[208.02404785 70.04815674]
[198.57603455 81.56267548]
[182.99253845 78.83042145]
[168.83840942 83.79637909]
[154.68428040 88.76232910]
[140.53015137 93.72827911]
[126.37602234 98.69422913]
[141.17823792 101.12204742]
[155.98045349 103.54986572]
[170.87611389 101.78363037]
[185.35527039 105.70202637]
[197.32725525 114.73926544]
[205.06338501 127.59042358]
[207.44660950 142.39988708]
[204.13282776 157.02926636]
[195.60050964 169.36618042]
[183.08166504 177.62927246]
[168.38392639 180.62538147]
[153.62956238 177.92192078]
[140.94898987 169.90922546]
[132.17321777 157.74429321]
[128.56948853 143.18559265]
[121.07373810 130.19276428]
[113.57799530 117.19992065]
[113.92703247 132.19586182]
[114.27606201 147.19180298]
[114.62509918 162.18772888]
[117.26345062 181.38900757]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 133]
[2 132]
[3 131]
[4 130]
[5 17]
[6 16]
[7 15]
[8 14]
[21 61]
[22 60]
[23 59]
[24 58]
[25 57]
[26 56]
[27 55]
[28 54]
[29 53]
[30 52]
[32 50]
[33 49]
[35 47]
[36 46]
[37 45]
[38 44]
[39 43]
[62 74]
[63 73]
[64 72]
[65 71]
[66 70]
[75 113]
[76 112]
[77 111]
[78 110]
[79 109]
[81 107]
[82 106]
[83 105]
[86 102]
[87 101]
[88 100]
[89 99]
[90 98]
[91 97]
[92 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
