%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 22:27:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUCACCAGUAGGUCAGUCCCUUCCAUUUGCUUUCCGUGGGCCACUGUGGCCCCUUGCGUCCAUUUACAUGCCAGCCAUCUCUGCAAUUAAAGUUUCUGGAUAAAAAAAUGAAAUGUAGAGGAUGUAUAUAUCUUUUAAGUGAUAAUUAUAAAUCUUAUAUUUAAAAAUAAAAUGGAGUUAGGAUGAUGA\
) } def
/len { sequence length } bind def

/coor [
[87.67715454 422.05346680]
[82.42672729 436.27349854]
[72.62703705 447.83816528]
[59.46144485 455.35104370]
[44.51976776 457.90484619]
[29.60627747 455.19125366]
[16.52185440 447.53790283]
[6.84650517 435.86898804]
[1.74857676 421.59359741]
[1.84366775 406.43554688]
[7.12029552 392.22521973]
[16.94128227 380.67861938]
[30.12069321 373.19003296]
[45.06705475 370.66375732]
[47.75230789 355.90606689]
[50.43756104 341.14837646]
[53.12281418 326.39068604]
[51.22404099 319.23556519]
[55.97462082 311.41436768]
[58.90097809 296.70257568]
[61.82733154 281.99081421]
[54.27705002 264.19979858]
[67.76068878 249.22880554]
[70.20412445 234.42916870]
[72.64756012 219.62951660]
[75.09098816 204.82986450]
[77.53442383 190.03021240]
[79.97785187 175.23056030]
[82.42128754 160.43090820]
[84.86471558 145.63125610]
[79.05110931 143.27162170]
[73.59429932 140.17495728]
[68.58723450 136.39404297]
[64.11518860 131.99327087]
[60.25434113 127.04757690]
[57.07044601 121.64121246]
[54.61772537 115.86624908]
[52.93795776 109.82105255]
[44.50436401 113.37261200]
[37.70527649 110.44451141]
[22.71330833 110.93530273]
[7.72134066 111.42608643]
[-7.27062845 111.91687012]
[-22.26259804 112.40766144]
[-37.25456619 112.89844513]
[-52.88738632 119.45978546]
[-63.51990891 106.25426483]
[-53.77383423 92.38161469]
[-37.74535370 97.90647888]
[-22.75338364 97.41568756]
[-7.76141453 96.92490387]
[7.23055410 96.43412018]
[22.22252274 95.94332886]
[37.21449280 95.45254517]
[52.20194244 94.83912659]
[63.34084320 68.89702606]
[87.12197113 53.68104935]
[85.40766144 38.77933502]
[83.69335938 23.87761688]
[81.97905731 8.97589970]
[80.26474762 -5.92581654]
[78.55044556 -20.82753372]
[76.83614349 -35.72925186]
[72.74060822 -43.91250610]
[75.21775055 -50.88854218]
[73.74749756 -65.81631470]
[72.27723694 -80.74407959]
[70.80698395 -95.67185211]
[69.33672333 -110.59962463]
[67.86647034 -125.52739716]
[66.39620972 -140.45516968]
[54.46287918 -150.46682739]
[53.18448257 -165.62664795]
[62.80261230 -176.94155884]
[61.33235550 -191.86933899]
[54.71084213 -201.92648315]
[57.98682404 -212.13291931]
[54.58068085 -226.74107361]
[51.17453766 -241.34922791]
[35.50825500 -247.70564270]
[26.79897499 -262.00234985]
[28.30634880 -278.50817871]
[39.23990250 -290.74310303]
[35.59519958 -305.29354858]
[21.15191650 -310.96551514]
[12.82935047 -324.06188965]
[13.82769680 -339.54681396]
[23.76307106 -351.46603394]
[38.81512070 -355.23638916]
[53.19602203 -349.40805054]
[61.37602615 -336.22219849]
[60.20975876 -320.74902344]
[50.14566803 -308.93826294]
[53.79037094 -294.38778687]
[66.59178925 -290.56637573]
[75.90505219 -280.83764648]
[79.21735382 -267.67166138]
[75.55870819 -254.48529053]
[65.78269196 -244.75537109]
[69.18883514 -230.14721680]
[72.59497833 -215.53906250]
[80.10903931 -228.52131653]
[93.26609039 -235.72494507]
[108.25140381 -235.06134033]
[120.72019196 -226.72291565]
[127.05729675 -213.12728882]
[125.42536163 -198.21633911]
[116.29753876 -186.31327820]
[102.32032013 -180.86924744]
[87.54621887 -183.46267700]
[76.26012421 -193.33958435]
[77.73038483 -178.41181946]
[89.37113190 -169.19073486]
[91.07483673 -154.07278442]
[81.32398224 -141.92543030]
[82.79423523 -126.99765015]
[84.26449585 -112.06987762]
[85.73474884 -97.14211273]
[87.20500946 -82.21434021]
[88.67527008 -67.28656769]
[90.14552307 -52.35879898]
[91.73786163 -37.44355392]
[93.45216370 -22.54183769]
[95.16646576 -7.64012098]
[96.88076782 7.26159573]
[98.59507751 22.16331291]
[100.30937958 37.06502914]
[102.02368164 51.96674728]
[112.97039795 53.70682907]
[123.22766113 57.90766525]
[132.25022888 64.34595490]
[139.55851746 72.67945862]
[144.76405334 82.46520996]
[147.59010315 93.18303680]
[147.88647461 104.26322937]
[162.43693542 107.90792847]
[176.98741150 111.55262756]
[191.53787231 115.19733429]
[206.08834839 118.84203339]
[220.63880920 122.48674011]
[235.18928528 126.13143921]
[249.73974609 129.77613831]
[264.29022217 133.42085266]
[273.39163208 132.47036743]
[279.04797363 137.24604797]
[293.53686523 141.12834167]
[308.02572632 145.01062012]
[319.37182617 134.55738831]
[334.57211304 131.92022705]
[348.77627563 137.94065857]
[357.45178223 150.69757080]
[357.83035278 166.12030029]
[349.79113770 179.28747559]
[335.89947510 185.99752808]
[320.58810425 184.10929871]
[308.74282837 174.22531128]
[304.14346313 159.49951172]
[289.65457153 155.61721802]
[275.16567993 151.73493958]
[260.64550781 147.97131348]
[246.09504700 144.32661438]
[231.54457092 140.68191528]
[216.99411011 137.03720093]
[202.44363403 133.39250183]
[187.89317322 129.74780273]
[173.34269714 126.10310364]
[158.79223633 122.45839691]
[144.24176025 118.81369781]
[136.89390564 130.82415771]
[126.38159943 140.19079590]
[113.60650635 146.11021423]
[99.66436768 148.07469177]
[97.22093201 162.87434387]
[94.77750397 177.67399597]
[92.33406830 192.47364807]
[89.89064026 207.27330017]
[87.44720459 222.07293701]
[85.00377655 236.87258911]
[82.56034088 251.67224121]
[89.40780640 260.14941406]
[90.42928314 270.77789307]
[85.52743530 280.01562500]
[76.53910828 284.91714478]
[73.61275482 299.62893677]
[70.68640137 314.34072876]
[67.88050079 329.07595825]
[65.19525146 343.83364868]
[62.50999832 358.59133911]
[59.82474518 373.34902954]
[72.92324829 380.97824097]
[82.62008667 392.62930298]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 189]
[15 188]
[16 187]
[17 186]
[19 185]
[20 184]
[21 183]
[23 179]
[24 178]
[25 177]
[26 176]
[27 175]
[28 174]
[29 173]
[30 172]
[38 55]
[40 54]
[41 53]
[42 52]
[43 51]
[44 50]
[45 49]
[57 128]
[58 127]
[59 126]
[60 125]
[61 124]
[62 123]
[63 122]
[65 121]
[66 120]
[67 119]
[68 118]
[69 117]
[70 116]
[71 115]
[74 112]
[75 111]
[77 101]
[78 100]
[79 99]
[83 94]
[84 93]
[135 168]
[136 167]
[137 166]
[138 165]
[139 164]
[140 163]
[141 162]
[142 161]
[143 160]
[145 159]
[146 158]
[147 157]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
