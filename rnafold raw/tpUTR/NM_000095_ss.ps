%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:15:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACCAGGGUGAGGACCCGCCGGAUGACAGCCACCCUCACCGCGGCUGGAUGGGGGCUCUGCACCCAGCCCCAAGGGGUGGCCGUCCUGAGGGGGAAGUGAGAAGGGCUCAGAGAGGACAAAAUAAAGUGUGUGUGCAGGGA\
) } def
/len { sequence length } bind def

/coor [
[89.07620239 187.64614868]
[78.20958710 176.17042542]
[78.72380066 160.37449646]
[90.31376648 149.62982178]
[90.64328003 134.63343811]
[83.44708252 132.52044678]
[61.85848999 126.18146515]
[54.02803421 138.97537231]
[46.19758224 151.76927185]
[38.36713028 164.56317139]
[38.48799133 180.96188354]
[24.21163940 189.03144836]
[10.22436428 180.47059631]
[10.91507339 164.08599854]
[25.57322502 156.73272705]
[33.40367889 143.93882751]
[41.23413086 131.14491272]
[49.06458282 118.35101318]
[50.54508972 103.42425537]
[45.38039398 89.34143066]
[40.21570206 75.25860596]
[23.91544342 70.88276672]
[13.51584721 57.80114365]
[12.93998241 41.26518631]
[22.21670723 27.76496315]
[9.97773075 17.73909569]
[12.53806114 3.06619620]
[7.06525040 -10.89977455]
[-7.14024925 -17.29051208]
[-12.49150753 -31.53195572]
[-6.31137180 -45.03534317]
[-11.78418255 -59.00131607]
[-17.87521744 -65.91444397]
[-17.22010994 -73.33467865]
[-22.38480377 -87.41750336]
[-27.54949760 -101.50032043]
[-32.71419144 -115.58314514]
[-37.87888336 -129.66596985]
[-43.04357910 -143.74879456]
[-57.10526276 -150.45004272]
[-62.14238358 -164.80560303]
[-55.66710281 -178.16998291]
[-60.83179855 -192.25280762]
[-65.99649048 -206.33563232]
[-71.16118622 -220.41845703]
[-76.32588196 -234.50128174]
[-81.49057007 -248.58410645]
[-86.65526581 -262.66693115]
[-103.97382355 -265.23211670]
[-117.56834412 -276.12295532]
[-123.78677368 -292.29937744]
[-121.01635742 -309.31732178]
[-110.10079956 -322.54953003]
[-115.87908173 -336.39193726]
[-121.65737152 -350.23431396]
[-127.43565369 -364.07669067]
[-133.21394348 -377.91906738]
[-138.99223328 -391.76144409]
[-154.12097168 -395.21121216]
[-164.30726624 -406.91671753]
[-165.63430786 -422.37692261]
[-157.59178162 -435.64712524]
[-143.27224731 -441.62457275]
[-128.18182373 -438.01089478]
[-118.12309265 -426.19558716]
[-116.96385193 -410.72186279]
[-125.14984894 -397.53970337]
[-119.37156677 -383.69732666]
[-113.59327698 -369.85494995]
[-107.81499481 -356.01257324]
[-102.03670502 -342.17019653]
[-96.25842285 -328.32781982]
[-83.54315186 -328.05883789]
[-71.84177399 -322.95748901]
[-62.92556000 -313.75711060]
[-58.15893555 -301.81439209]
[-58.29074860 -288.90930176]
[-63.33686829 -276.98001099]
[-72.57244110 -267.83160400]
[-67.40774536 -253.74879456]
[-62.24305344 -239.66596985]
[-57.07836151 -225.58314514]
[-51.91366577 -211.50032043]
[-46.74897385 -197.41749573]
[-41.58427811 -183.33467102]
[-28.00397873 -177.32542419]
[-22.56562805 -163.11701965]
[-28.96075439 -148.91349792]
[-23.79606056 -134.83067322]
[-18.63136673 -120.74784088]
[-13.46667290 -106.66501617]
[-8.30197906 -92.58219147]
[-3.13728499 -78.49936676]
[2.18178821 -64.47412872]
[7.65459919 -50.50815582]
[21.36363029 -44.79868698]
[27.11278915 -30.71316719]
[21.03122139 -16.37258530]
[26.50403214 -2.40661454]
[38.35155487 6.62031364]
[36.18267822 22.29215240]
[49.39947510 24.46006966]
[59.89091492 32.95898438]
[64.83374786 45.64014816]
[62.82959366 59.21188736]
[54.29852676 70.09391022]
[59.46321869 84.17673492]
[64.62791443 98.25955963]
[70.33664703 83.85054779]
[81.25429535 73.90010071]
[94.73680115 69.96380615]
[107.86064148 72.23789978]
[118.05229950 79.63655090]
[123.59278107 90.13343811]
[123.89848328 101.27473450]
[119.53448486 110.73974609]
[134.47714233 115.93854523]
[137.12542725 130.59582520]
[147.07226562 141.82348633]
[157.01910400 153.05114746]
[169.87193298 154.62397766]
[177.92491150 164.24542236]
[177.25318909 176.37179565]
[186.95098877 187.81526184]
[196.64878845 199.25871277]
[211.50183105 207.43327332]
[207.75848389 223.96879578]
[190.83290100 224.94921875]
[185.20533752 208.95651245]
[175.50753784 197.51306152]
[165.80973816 186.06959534]
[149.01615906 181.09118652]
[145.79144287 162.99798584]
[135.84460449 151.77032471]
[125.89776611 140.54266357]
[111.66657257 136.14694214]
[108.30682373 120.68658447]
[107.72078705 127.80132294]
[105.63965607 134.96295166]
[105.31015015 149.95933533]
[116.41697693 161.20272827]
[116.23686981 177.00598145]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 140]
[5 139]
[7 18]
[8 17]
[9 16]
[10 15]
[19 108]
[20 107]
[21 106]
[25 101]
[27 99]
[28 98]
[31 95]
[32 94]
[34 93]
[35 92]
[36 91]
[37 90]
[38 89]
[39 88]
[42 85]
[43 84]
[44 83]
[45 82]
[46 81]
[47 80]
[48 79]
[53 72]
[54 71]
[55 70]
[56 69]
[57 68]
[58 67]
[116 137]
[118 135]
[119 134]
[120 133]
[123 131]
[124 130]
[125 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
