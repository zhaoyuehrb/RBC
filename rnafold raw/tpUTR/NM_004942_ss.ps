%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 13:09:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGCCAAGAAGCUGCUGUGGCUGAUGCGGAUUCAGAAAGGGCUCCCUCAUCAGAGACGUGCGACAUGUAAACCAAAUUAAACUAUGGUGUCCAAAGAUACGCAA\
) } def
/len { sequence length } bind def

/coor [
[160.80560303 280.22186279]
[155.62934875 266.14328003]
[150.45309448 252.06469727]
[138.79910278 242.78926086]
[141.29890442 227.16679382]
[136.12263489 213.08821106]
[130.94638062 199.00962830]
[125.77012634 184.93106079]
[120.38775635 170.92997742]
[114.80043030 157.00942993]
[96.42967987 158.79098511]
[78.40953064 154.79945374]
[62.50949478 145.42675781]
[50.29092407 131.59327698]
[42.95363998 114.65744781]
[41.21814728 96.28228760]
[26.49048042 93.43696594]
[11.76281357 90.59164429]
[-3.25448203 95.57074738]
[-14.28300953 85.55970764]
[-27.28057289 94.14464569]
[-42.17598724 91.04927826]
[-50.28031158 78.60518646]
[-65.00798035 75.75986481]
[-79.73564148 72.91454315]
[-94.46331024 70.06922150]
[-106.48991394 80.06396484]
[-122.12699127 79.93813324]
[-133.99119568 69.75114441]
[-136.48060608 54.31298065]
[-128.41979980 40.91307449]
[-113.61485291 35.87844849]
[-99.05619812 41.58629990]
[-91.61798859 55.34155655]
[-76.89031982 58.18687820]
[-62.16265869 61.03219986]
[-47.43498993 63.87752151]
[-35.27859879 55.34770584]
[-20.30211830 58.02346420]
[-11.43768883 70.83203888]
[2.52618527 65.64942932]
[14.60813427 75.86398315]
[29.33580017 78.70929718]
[44.06346512 81.55461884]
[51.04537964 65.54711151]
[62.57111740 52.05294418]
[77.76582336 42.34910965]
[95.40018463 37.41546631]
[94.51987457 22.44132042]
[93.63955688 7.46717358]
[84.17362976 -5.92417812]
[91.28272247 -20.70229912]
[107.65360260 -21.66472626]
[116.44532013 -7.82139683]
[108.61370087 6.58685923]
[109.49401855 21.56100464]
[110.37432861 36.53515244]
[124.79460144 40.66500854]
[133.46826172 28.42704582]
[142.14190674 16.18908310]
[150.81556702 3.95112062]
[159.48922729 -8.28684139]
[163.71510315 -24.70567894]
[180.66213989 -25.19013023]
[185.81906128 -9.03951073]
[171.72718811 0.38681266]
[163.05352783 12.62477493]
[154.37988281 24.86273766]
[145.70622253 37.10070038]
[137.03256226 49.33866119]
[143.67883301 55.32710266]
[149.37823486 62.17177200]
[154.02291870 69.72564697]
[157.52754211 77.82852173]
[159.83074951 86.31037903]
[160.89627075 94.99496460]
[160.71347046 103.70346832]
[159.29725647 112.25815582]
[156.68762207 120.48605347]
[152.94856262 128.22241211]
[148.16656494 135.31398010]
[142.44863892 141.62213135]
[135.91992188 147.02543640]
[128.72097778 151.42210388]
[134.30830383 165.34265137]
[140.50485229 172.27305603]
[139.84870911 179.75480652]
[145.02496338 193.83337402]
[150.20121765 207.91195679]
[155.37747192 221.99053955]
[167.40170288 232.27296448]
[164.53167725 246.88844299]
[169.70793152 260.96701050]
[174.88418579 275.04559326]
[190.08213806 276.01623535]
[203.56834412 283.09027100]
[213.00625610 295.04208374]
[216.76066589 309.80096436]
[214.18113708 324.80981445]
[205.71455383 337.46829224]
[192.82783508 345.58322144]
[177.75364685 347.74865723]
[163.10371399 343.58941650]
[151.41621399 333.82611084]
[144.71607971 320.15026855]
[144.16415405 304.93136597]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 94]
[2 93]
[3 92]
[5 90]
[6 89]
[7 88]
[8 87]
[9 85]
[10 84]
[16 44]
[17 43]
[18 42]
[20 40]
[23 37]
[24 36]
[25 35]
[26 34]
[48 57]
[49 56]
[50 55]
[58 70]
[59 69]
[60 68]
[61 67]
[62 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
