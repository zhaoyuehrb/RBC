%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 10:49:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGACCCUUUGACACCCUUCUUGUCCUCCUCUCUGGCCCCAUCCAGGCAACCAAAUAAAGUUUGAGUGUACCAGGAACAGAAUCCUGGGGCUUGCA\
) } def
/len { sequence length } bind def

/coor [
[102.75785828 214.22750854]
[102.27708435 199.23521423]
[89.86956787 191.03817749]
[84.60569000 176.94010925]
[88.70047760 162.27429199]
[100.78547668 152.72134399]
[100.30470276 137.72904968]
[87.64958954 136.92895508]
[75.58888245 131.87487793]
[65.55184937 122.88645935]
[58.81592941 110.76179504]
[56.34770584 96.71004486]
[42.27067947 101.89051819]
[28.19365120 107.07099152]
[14.11662579 112.25147247]
[8.99122429 127.02523804]
[-4.45790529 135.00364685]
[-19.88049698 132.41952515]
[-29.99447441 120.49301910]
[-30.02432442 104.85546112]
[-19.95595551 92.89043427]
[-4.54334354 90.24744415]
[8.93614960 98.17444611]
[23.01317596 92.99396515]
[37.09020233 87.81349182]
[51.16722870 82.63301849]
[53.64432144 75.55389404]
[39.48612976 80.50823975]
[26.78507996 72.52805328]
[25.10509109 57.62243271]
[35.71120071 47.01533508]
[50.61698151 48.69393539]
[58.59850693 61.39564133]
[61.07559967 54.31651688]
[53.29971313 41.48937607]
[45.52382278 28.66223335]
[37.74793625 15.83509159]
[22.34048843 12.31569672]
[14.00523186 -1.11185122]
[17.68732643 -16.48122787]
[31.20224953 -24.67405319]
[46.53183746 -20.82966995]
[54.58131790 -7.22888327]
[50.57507706 8.05920315]
[58.35096359 20.88634491]
[66.12685394 33.71348572]
[73.90274048 46.54062653]
[88.88540649 47.26163483]
[97.85706329 35.24042892]
[106.82872009 23.21922493]
[104.75651550 7.78083992]
[114.02629852 -4.28256607]
[128.75720215 -6.16295433]
[137.72886658 -18.18415833]
[146.70053101 -30.20536232]
[155.67218018 -42.22656631]
[164.64384460 -54.24777222]
[169.27177429 -70.55784607]
[186.22558594 -70.62585449]
[190.98422241 -54.35343170]
[176.66503906 -45.27611542]
[167.69338989 -33.25490952]
[158.72172546 -21.23370552]
[149.75007629 -9.21250057]
[140.77841187 2.80870342]
[143.16709900 17.46577644]
[134.23980713 29.78479195]
[118.84992218 32.19088364]
[109.87826538 44.21208572]
[100.90660858 56.23329163]
[134.47122192 78.26161957]
[134.37657166 115.55071259]
[147.89111328 122.05896759]
[161.40563965 128.56723022]
[174.92018127 135.07548523]
[188.43470764 141.58374023]
[201.94923401 148.09199524]
[216.78199768 142.63626099]
[231.09286499 149.34255981]
[236.39147949 164.23214722]
[229.53425598 178.47132874]
[214.58946228 183.61222839]
[200.42358398 176.60482788]
[195.44097900 161.60652161]
[181.92645264 155.09826660]
[168.41191101 148.59001160]
[154.89738464 142.08175659]
[141.38285828 135.57350159]
[127.86831665 129.06524658]
[115.29699707 137.24827576]
[115.77777100 152.24057007]
[128.44999695 160.99960327]
[133.47602844 175.37292480]
[129.12622070 189.77929688]
[117.26937866 198.75444031]
[117.75015259 213.74673462]
[120.55710602 232.92408752]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 96]
[2 95]
[6 91]
[7 90]
[12 26]
[13 25]
[14 24]
[15 23]
[34 47]
[35 46]
[36 45]
[37 44]
[48 70]
[49 69]
[50 68]
[53 65]
[54 64]
[55 63]
[56 62]
[57 61]
[72 89]
[73 88]
[74 87]
[75 86]
[76 85]
[77 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
