%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 06:17:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGAACAUGUGCCUCUCUUUGCCUGACAGCCUGAGGUCCUGGGCCAGGUCUGCUCUUUCCAGGCCUGUCUGGACCGUGUGUCC\
) } def
/len { sequence length } bind def

/coor [
[-19.12025833 251.01428223]
[-21.91585350 265.81741333]
[-27.93583870 279.62710571]
[-36.87825394 291.75067139]
[-48.29455566 301.57998657]
[-61.61209869 308.62207031]
[-76.16288757 312.52365112]
[-91.21706390 313.08901978]
[-106.01950836 310.28982544]
[-119.82773590 304.26651001]
[-131.94914246 295.32113647]
[-141.77571106 283.90246582]
[-148.81454468 270.58322144]
[-152.71258545 256.03146362]
[-153.27432251 240.97717285]
[-150.47155762 226.17539978]
[-144.44487000 212.36863708]
[-135.49658203 200.24940491]
[-124.07552338 190.42559814]
[-110.75456238 183.38998413]
[-96.20188904 179.49546814]
[-81.14744568 178.93739319]
[-66.34635925 181.74374390]
[-52.54104996 187.77375793]
[-40.42398453 196.72499084]
[-29.05440712 186.94067383]
[-17.68483162 177.15637207]
[-6.31525564 167.37205505]
[-9.39124012 156.22206116]
[-7.95892811 144.69198608]
[-2.19681668 134.54272461]
[7.05229473 127.33966827]
[18.40436935 124.21129608]
[30.14118004 125.67254639]
[40.47035980 131.54051208]
[52.86394501 123.09072113]
[65.25752258 114.64091492]
[77.65110779 106.19111633]
[90.04468536 97.74131775]
[94.53618622 90.78994751]
[103.06342316 89.21746063]
[115.76428986 81.23697662]
[128.46514893 73.25649261]
[141.16601562 65.27601624]
[146.94317627 57.87719345]
[154.49436951 57.24489975]
[167.48474121 49.74489975]
[180.47512817 42.24489975]
[193.46549988 34.74489975]
[206.45588684 27.24490166]
[219.44627380 19.74490166]
[232.43664551 12.24490166]
[234.97372437 -3.18549943]
[246.86932373 -13.33580303]
[262.50671387 -13.41334629]
[274.50241089 -3.38151598]
[277.19238281 12.02296448]
[269.30651855 25.52657127]
[254.56829834 30.75331306]
[239.93664551 25.23528290]
[226.94627380 32.73528290]
[213.95588684 40.23528290]
[200.96549988 47.73528290]
[187.97512817 55.23528290]
[174.98474121 62.73528290]
[161.99436951 70.23528290]
[149.14649963 77.97687531]
[136.44563293 85.95735931]
[123.74476624 93.93783569]
[111.04390717 101.91831970]
[98.49449158 110.13489532]
[86.10090637 118.58470154]
[73.70732880 127.03450012]
[61.31374359 135.48429871]
[48.92016220 143.93409729]
[49.34768677 162.79647827]
[38.64420319 178.15702820]
[21.07567596 184.19357300]
[3.46905565 178.74163818]
[-7.90052032 188.52593994]
[-19.27009583 198.31025696]
[-30.63967133 208.09455872]
[-23.59437752 221.41040039]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[25 82]
[26 81]
[27 80]
[28 79]
[35 75]
[36 74]
[37 73]
[38 72]
[39 71]
[41 70]
[42 69]
[43 68]
[44 67]
[46 66]
[47 65]
[48 64]
[49 63]
[50 62]
[51 61]
[52 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
