%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 23:38:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAAGCUCAUGGCCACAUGAAGAAGAUACAUUGUCCCGAGAUGCUGACUGUUUAAAUUUUUGCCAGAGUUUCUCUUGAGCUUUUGUUUCUGUUUGCUCAGACCCUGUUUUCAUGUUGUUGAAUAAACUUUCUAAAAUAAAAGCAUGCUGAAUUUA\
) } def
/len { sequence length } bind def

/coor [
[184.13603210 137.20095825]
[170.22074890 131.60052490]
[156.30545044 126.00010681]
[142.39016724 120.39968872]
[128.47486877 114.79926300]
[114.55958557 109.19884491]
[100.33154297 113.94886017]
[92.57147217 126.78558350]
[84.81140900 139.62229919]
[77.05133820 152.45901489]
[69.29127502 165.29574585]
[69.50219727 181.69352722]
[55.27038193 189.84138489]
[41.23629761 181.35748291]
[41.83700943 164.96934509]
[56.45455170 157.53567505]
[64.21462250 144.69895935]
[71.97468567 131.86222839]
[79.73475647 119.02551270]
[87.49481964 106.18879700]
[72.96204376 109.90342712]
[63.21034622 98.50586700]
[69.12854767 84.72273254]
[84.10936737 83.94494629]
[72.88170624 73.99810791]
[61.65404892 64.05126953]
[46.19369125 60.69151306]
[41.79796982 46.46031952]
[30.57030869 36.51348114]
[19.34264755 26.56663895]
[1.81549096 31.01996613]
[-14.74845982 24.16191673]
[-23.83767700 8.89114761]
[-22.00062943 -8.62734127]
[-33.61970520 -18.11402130]
[-49.13368607 -16.71614075]
[-60.78194046 -26.50250053]
[-62.01899719 -41.30132675]
[-73.63806915 -50.78800964]
[-85.25714874 -60.27468872]
[-96.87622070 -69.76136780]
[-112.45932007 -72.49587250]
[-117.42451477 -86.53852844]
[-129.04357910 -96.02520752]
[-140.66265869 -105.51189423]
[-147.20712280 -106.96741486]
[-151.37229919 -110.93933868]
[-152.54850769 -115.62203217]
[-163.77616882 -125.56887817]
[-175.00382996 -135.51571655]
[-188.84826660 -129.17129517]
[-204.07635498 -129.01292419]
[-218.04974365 -135.06802368]
[-228.34745789 -146.28750610]
[-233.18536377 -160.72753906]
[-231.72526550 -175.88629150]
[-224.22010803 -189.13743591]
[-211.97023010 -198.18510437]
[-197.09799194 -201.46176147]
[-182.18009949 -198.39968872]
[-169.80116272 -189.52940369]
[-162.10591125 -176.38775635]
[-160.42759705 -161.25160217]
[-165.05699158 -146.74337769]
[-153.82933044 -136.79653931]
[-142.60166931 -126.84969330]
[-131.17597961 -117.13096619]
[-119.55690765 -107.64428711]
[-107.93782806 -98.15760040]
[-93.18580627 -96.10165405]
[-87.38954163 -81.38044739]
[-75.77046967 -71.89376068]
[-64.15139008 -62.40708160]
[-52.53231812 -52.92040253]
[-37.78512192 -54.66848755]
[-25.86658669 -45.21316528]
[-24.13302231 -29.73309517]
[-12.51394844 -20.24641609]
[-1.30134201 -25.06500626]
[10.96763897 -24.63396835]
[21.94313622 -18.97402573]
[29.49665833 -9.11328793]
[32.13377762 3.09896755]
[29.28948784 15.33897877]
[40.51714706 25.28581810]
[51.74480820 35.23265839]
[66.40209198 37.88094711]
[71.60088348 52.82360840]
[82.82855225 62.77044678]
[94.05621338 72.71728516]
[120.16001129 95.28355408]
[134.07530212 100.88397217]
[147.99058533 106.48439789]
[161.90588379 112.08481598]
[175.82116699 117.68524170]
[189.73645020 123.28565979]
[203.96450806 128.03567505]
[218.45338440 131.91796875]
[232.94227600 135.80024719]
[247.43116760 139.68254089]
[256.42889404 131.80812073]
[267.99819946 129.30702209]
[279.21484375 132.69223022]
[287.30117798 141.00373840]
[290.31393433 152.07708740]
[304.63473511 156.53964233]
[318.95553589 161.00218201]
[333.27636719 165.46472168]
[347.59716797 169.92727661]
[361.91799927 174.38981628]
[368.53262329 173.29664612]
[373.87957764 175.42622375]
[376.71905518 179.33114624]
[390.84857178 184.36671448]
[404.97808838 189.40228271]
[419.10757446 194.43785095]
[431.89437866 185.84689331]
[447.11010742 186.42572021]
[458.92761230 195.74291992]
[462.94467163 210.06079102]
[477.07418823 215.09635925]
[491.20367432 220.13192749]
[505.37283325 213.13116455]
[520.31524658 218.27903748]
[527.16577148 232.52142334]
[521.86022949 247.40853882]
[507.54620361 254.10813904]
[492.71600342 248.64547729]
[486.16812134 234.26142883]
[472.03860474 229.22586060]
[457.90908813 224.19029236]
[445.74218750 232.74041748]
[430.69567871 232.48364258]
[418.54342651 223.30888367]
[414.07202148 208.56735229]
[399.94250488 203.53178406]
[385.81298828 198.49621582]
[371.68350220 193.46064758]
[357.45544434 188.71063232]
[343.13464355 184.24809265]
[328.81381226 179.78553772]
[314.49301147 175.32299805]
[300.17218018 170.86044312]
[285.85137939 166.39790344]
[270.23931885 175.87712097]
[252.33436584 170.90557861]
[243.54887390 154.17143250]
[229.05999756 150.28913879]
[214.57110596 146.40686035]
[200.08221436 142.52456665]
[206.27976990 156.18437195]
[201.17788696 170.29006958]
[187.67616272 176.82484436]
[173.44813538 172.07473755]
[166.58016968 158.73941040]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 96]
[2 95]
[3 94]
[4 93]
[5 92]
[6 91]
[7 20]
[8 19]
[9 18]
[10 17]
[11 16]
[24 90]
[25 89]
[26 88]
[28 86]
[29 85]
[30 84]
[34 78]
[35 77]
[38 74]
[39 73]
[40 72]
[41 71]
[43 69]
[44 68]
[45 67]
[48 66]
[49 65]
[50 64]
[97 150]
[98 149]
[99 148]
[100 147]
[105 144]
[106 143]
[107 142]
[108 141]
[109 140]
[110 139]
[113 138]
[114 137]
[115 136]
[116 135]
[120 131]
[121 130]
[122 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
