%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 03:30:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUGUCAGAAAUGGGAAUAGAAGGAGUGUUCUUAGGGUAAAUCUUUUAAUAAAACUACCUAUCUGGUUUAUGACCACUUAGAUCGAAAUGUCAAUA\
) } def
/len { sequence length } bind def

/coor [
[182.76010132 299.43478394]
[186.96119690 284.96762085]
[194.27665710 271.79827881]
[204.33953857 260.58728027]
[195.68070984 248.33883667]
[187.02188110 236.09037781]
[178.36305237 223.84191895]
[164.69816589 217.91569519]
[163.04994202 202.18057251]
[154.39111328 189.93211365]
[145.73226929 177.68367004]
[137.07344055 165.43521118]
[123.40856171 159.50898743]
[121.76033020 143.77386475]
[113.10150146 131.52540588]
[104.44267273 119.27695465]
[96.28215790 119.42977142]
[88.75453186 116.27506256]
[83.14121246 110.34986115]
[80.39776611 102.66281128]
[80.99118805 94.52246857]
[84.82048035 87.31455994]
[77.81655884 74.05013275]
[70.81264496 60.78569794]
[63.59485626 47.63641739]
[56.16508865 34.60574341]
[48.73531723 21.57506561]
[33.44110489 21.38982773]
[20.37932968 13.62537098]
[13.00672054 0.45301250]
[13.21591282 -14.54072666]
[20.85059547 -27.33045769]
[13.42082500 -40.36113358]
[5.99105501 -53.39180756]
[-1.43871498 -66.42248535]
[-8.86848545 -79.45316315]
[-16.29825401 -92.48384094]
[-31.60598183 -96.41436768]
[-39.57884598 -110.06021118]
[-35.48669434 -125.32552338]
[-21.75732231 -133.15367126]
[-6.53612614 -128.90036011]
[1.14642990 -115.08898163]
[-3.26757884 -99.91360474]
[4.16219091 -86.88293457]
[11.59196091 -73.85225677]
[19.02173042 -60.82157898]
[26.45150185 -47.79090500]
[33.88127136 -34.76022720]
[48.77631760 -34.81639099]
[61.78613281 -27.35980415]
[69.36694336 -14.30615902]
[69.39623260 0.88910162]
[61.76599503 14.14529610]
[69.19576263 27.17597198]
[76.62553406 40.20664978]
[82.79049683 44.54022598]
[84.07707977 53.78178024]
[91.08099365 67.04621124]
[98.08490753 80.31064606]
[116.85878754 89.65013885]
[116.69112396 110.61811829]
[125.34996033 122.86657715]
[134.00878906 135.11503601]
[148.29301453 141.91735840]
[149.32189941 156.77638245]
[157.98072815 169.02482605]
[166.63955688 181.27328491]
[175.29838562 193.52174377]
[189.58261108 200.32406616]
[190.61149597 215.18309021]
[199.27033997 227.43154907]
[207.92916870 239.68000793]
[216.58799744 251.92845154]
[230.51344299 246.18130493]
[245.36868286 243.67745972]
[260.40863037 244.54251099]
[274.87881470 248.73309326]
[288.05349731 256.03897095]
[299.27178955 266.09371948]
[307.97097778 278.39294434]
[313.71475220 292.31979370]
[316.21499634 307.17565918]
[315.34631348 322.21536255]
[311.15222168 336.68453979]
[303.84317017 349.85745239]
[293.78570557 361.07330322]
[281.48434448 369.76953125]
[267.55612183 375.50994873]
[252.69966125 378.00659180]
[237.66015625 377.13424683]
[223.19197083 372.93664551]
[210.02085876 365.62438965]
[198.80743408 355.56420898]
[190.11419678 343.26074219]
[184.37716675 329.33114624]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 74]
[5 73]
[6 72]
[7 71]
[9 69]
[10 68]
[11 67]
[12 66]
[14 64]
[15 63]
[16 62]
[22 60]
[23 59]
[24 58]
[25 56]
[26 55]
[27 54]
[32 49]
[33 48]
[34 47]
[35 46]
[36 45]
[37 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
