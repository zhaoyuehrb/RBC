%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:32:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACCACACUGAGGCAGGGAGUUGGCUCUCUUGGUGGAGAUGACUUUCCUGGGCCUCUGGAUGACAAUCUUCCAAAGGACAAGUCUCCUACUCCCAAAACUAUUUAAGGAAGCAUGAAAAAUAAAGAUGCUGGUUAUCUUCUCCUA\
) } def
/len { sequence length } bind def

/coor [
[11.22796822 241.11741638]
[12.04281521 226.14013672]
[1.15668452 236.45964050]
[-9.72944641 246.77914429]
[-20.61557770 257.09866333]
[-31.50170708 267.41815186]
[-28.69677734 280.95434570]
[-32.93063736 293.99975586]
[-42.98960876 303.16278076]
[-56.16058350 306.11734009]
[-68.96228027 302.19259644]
[-80.06645203 312.27709961]
[-91.17062378 322.36160278]
[-96.18479156 337.36721802]
[-110.80830383 340.19604492]
[-121.91247559 350.28054810]
[-133.01664734 360.36505127]
[-137.49951172 376.13958740]
[-153.46601868 379.88165283]
[-164.49118042 367.74172974]
[-159.23326111 352.20834351]
[-143.10116577 349.26089478]
[-131.99699402 339.17639160]
[-120.89282227 329.09185791]
[-116.67289734 314.80755615]
[-101.25513458 311.25744629]
[-90.15097046 301.17294312]
[-79.04679871 291.08840942]
[-81.36474609 274.86993408]
[-73.50272369 260.30767822]
[-58.37106323 253.20721436]
[-41.82121277 256.53201294]
[-30.93508148 246.21252441]
[-20.04895020 235.89302063]
[-9.16281891 225.57351685]
[1.72331142 215.25401306]
[11.68859577 204.04272461]
[20.66025352 192.02151489]
[29.63191223 180.00030518]
[38.60356903 167.97911072]
[47.57522583 155.95790100]
[56.54688644 143.93669128]
[65.51854706 131.91549683]
[74.49020386 119.89428711]
[83.46186066 107.87308502]
[83.81102753 92.49967957]
[95.55577087 83.21074677]
[98.73712921 68.55199432]
[101.91848755 53.89324570]
[105.09984589 39.23449326]
[106.54019165 24.30380821]
[106.21965027 9.30723381]
[105.89910126 -5.68934107]
[93.27368164 -11.79988766]
[84.56639099 -22.71169281]
[81.44003296 -36.24917221]
[84.45189667 -49.74465179]
[92.95545959 -60.56405640]
[105.23809052 -66.62100220]
[105.23809052 -81.62100220]
[105.23809052 -96.62100220]
[102.09086609 -105.27337646]
[105.40179443 -111.94068909]
[105.72234344 -126.93727112]
[106.04289246 -141.93383789]
[93.72091675 -154.30326843]
[94.11386108 -171.42140198]
[106.49379730 -182.75723267]
[106.49379730 -197.75723267]
[106.49379730 -212.75723267]
[106.49379730 -227.75723267]
[97.83009338 -241.68103027]
[105.79421997 -256.01647949]
[122.19337463 -256.01647949]
[130.15750122 -241.68103027]
[121.49379730 -227.75723267]
[121.49379730 -212.75723267]
[121.49379730 -197.75723267]
[121.49379730 -182.75723267]
[131.81712341 -174.97787476]
[135.81350708 -162.47994995]
[131.80166626 -149.78228760]
[121.03946686 -141.61329651]
[120.71891785 -126.61672211]
[120.39836884 -111.62014771]
[120.23809052 -96.62100220]
[120.23809052 -81.62100220]
[120.23809052 -66.62100220]
[134.40252686 -58.91202164]
[142.81234741 -45.04250717]
[143.10235596 -28.73142815]
[135.09953308 -14.40821075]
[120.89567566 -6.00988722]
[121.21622467 8.98668766]
[121.53676605 23.98326111]
[130.34782410 11.84385014]
[143.73208618 5.07173109]
[158.73179626 5.16345358]
[172.03224182 12.09874916]
[180.69418335 24.34500885]
[182.80343628 39.19596863]
[177.89390564 53.36976242]
[167.05052185 63.73417282]
[152.66952515 67.99879456]
[137.92892456 65.22120667]
[126.08621979 56.01521683]
[119.75859833 42.41585541]
[116.57723999 57.07460403]
[113.39588165 71.73335266]
[110.21451569 86.39210510]
[116.72277832 99.90663910]
[130.16699219 106.55892944]
[143.61120605 113.21122742]
[157.05543518 119.86351776]
[170.49964905 126.51581573]
[182.84744263 117.47200012]
[197.98545837 115.21387482]
[212.43507385 120.26033783]
[222.87590027 131.45175171]
[226.90870667 146.21641541]
[223.60676575 161.16149902]
[213.72885132 172.85275269]
[199.54483032 178.60360718]
[184.31410217 177.09254456]
[171.53656006 168.66680908]
[164.14839172 155.26257324]
[163.84735107 139.96003723]
[150.40313721 133.30773926]
[136.95892334 126.65544128]
[123.51470184 120.00315094]
[110.07048035 113.35085297]
[95.48306274 116.84474182]
[86.51140594 128.86595154]
[77.53974915 140.88714600]
[68.56809235 152.90835571]
[59.59643173 164.92956543]
[50.62477493 176.95075989]
[41.65311432 188.97196960]
[32.68145752 200.99317932]
[23.70980072 213.01437378]
[38.48876953 210.44882202]
[52.02503967 216.91174316]
[59.32175827 230.01737976]
[57.68537521 244.92785645]
[47.71995163 256.13903809]
[33.10417938 259.51232910]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 36]
[3 35]
[4 34]
[5 33]
[6 32]
[11 28]
[12 27]
[13 26]
[15 24]
[16 23]
[17 22]
[37 140]
[38 139]
[39 138]
[40 137]
[41 136]
[42 135]
[43 134]
[44 133]
[45 132]
[47 110]
[48 109]
[49 108]
[50 107]
[51 95]
[52 94]
[53 93]
[59 88]
[60 87]
[61 86]
[63 85]
[64 84]
[65 83]
[68 79]
[69 78]
[70 77]
[71 76]
[111 131]
[112 130]
[113 129]
[114 128]
[115 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
