%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 00:59:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAACUUAAAUUUGUAAGUAAAUGCUGAGGAAAUGGCACAAUAUGAAAAAUAUUAAAUAAAAAAUAAAUAUUGGGCAAGAUGGAAGACUGAA\
) } def
/len { sequence length } bind def

/coor [
[76.22946930 192.13475037]
[62.85760498 187.60304260]
[50.30352020 181.14253235]
[38.84362793 172.89546204]
[28.32697678 183.59126282]
[17.81032753 194.28706360]
[7.29367685 204.98284912]
[-3.22297335 215.67864990]
[-2.83889842 231.47827148]
[-13.79967880 242.86408997]
[-29.60247803 243.08110046]
[-40.87177658 232.00054932]
[-40.92169571 216.19635010]
[-29.72262383 205.04483032]
[-13.91876984 205.16200256]
[-3.40211987 194.46620178]
[7.11453056 183.77041626]
[17.63118172 173.07461548]
[28.14783096 162.37881470]
[18.75037575 149.52119446]
[11.62900925 135.27632141]
[6.98322773 120.04322815]
[4.94317627 104.24864960]
[5.56600285 88.33505249]
[8.83426094 72.74822998]
[14.65639400 57.92483139]
[22.86930466 44.28010559]
[33.24291992 32.19628906]
[45.48663712 22.01189804]
[59.25746536 14.01222897]
[74.16963959 8.42138195]
[89.80541229 5.39597702]
[105.72676849 5.02076578]
[121.48770142 7.30626011]
[136.64668274 12.18843460]
[150.77906799 19.53052139]
[159.75901794 7.51550531]
[161.82307434 -8.17048264]
[175.64001465 -13.73300648]
[184.61994934 -25.74802399]
[193.59989929 -37.76303864]
[202.57983398 -49.77805710]
[211.55978394 -61.79307175]
[220.53971863 -73.80809021]
[211.07695007 -85.55145264]
[204.83267212 -99.27951813]
[202.19940186 -114.12932587]
[203.34268188 -129.16740417]
[208.19064331 -143.44844055]
[216.43853760 -156.07472229]
[227.56790161 -166.25256348]
[240.87911987 -173.34214783]
[255.53544617 -176.89784241]
[270.61557007 -176.69612122]
[285.17153931 -172.74966431]
[298.28836060 -165.30656433]
[309.14147949 -154.83468628]
[317.04870605 -141.99229431]
[321.51293945 -127.58670044]
[322.25357056 -112.52342224]
[319.22406006 -97.74936676]
[312.61480713 -84.19322968]
[302.84127808 -72.70718384]
[290.51791382 -64.01322937]
[276.41928101 -58.65788651]
[261.43167114 -56.97779465]
[246.49723816 -59.07856750]
[232.55474854 -64.82814789]
[223.57479858 -52.81312943]
[214.59484863 -40.79811096]
[205.61491394 -28.78309631]
[196.63496399 -16.76807976]
[187.65502930 -4.75306320]
[186.23326111 10.07353020]
[171.77403259 16.49544907]
[162.79408264 28.51046562]
[172.68139648 38.58937073]
[180.96844482 50.02038193]
[187.47276306 62.55182266]
[192.05116272 75.90778351]
[194.60281372 89.79418945]
[195.07154846 103.90530396]
[193.44705200 117.93042755]
[189.76507568 131.56077576]
[184.10668945 144.49623108]
[176.59649658 156.45198059]
[167.39984131 167.16481018]
[156.71920776 176.39883423]
[144.78974915 183.95075989]
[131.87414551 189.65428162]
[118.25673676 193.38385010]
[104.23737335 195.05732727]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 19]
[5 18]
[6 17]
[7 16]
[8 15]
[36 76]
[37 75]
[39 73]
[40 72]
[41 71]
[42 70]
[43 69]
[44 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
