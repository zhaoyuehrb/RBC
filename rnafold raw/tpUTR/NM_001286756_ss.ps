%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 10:21:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUAGCUUGCCAUUAUUGUGUGUGUAAUUAUGGCCAAAAGGACAUAGGAGAUGGACUAAGAUGUCUUGGACCACCUUUGUGUAACAAAGAAAUAAACAGUAAAUUUUAUUUUUUCA\
) } def
/len { sequence length } bind def

/coor [
[109.74176788 158.91128540]
[100.88442230 159.70475769]
[92.00745392 159.17398071]
[83.30776215 157.33070374]
[74.97830963 154.21583557]
[67.20384216 149.89842224]
[60.15680313 144.47427368]
[53.99349594 138.06365967]
[48.85062027 130.80879211]
[35.13110733 136.87303162]
[21.41159058 142.93727112]
[7.69207716 149.00149536]
[-6.02743769 155.06573486]
[-15.52149582 167.72169495]
[-30.29034805 165.79029846]
[-44.00986099 171.85453796]
[-57.72937775 177.91876221]
[-71.44889069 183.98300171]
[-76.91777802 198.81091309]
[-91.30456543 205.35276794]
[-106.07382202 199.72741699]
[-112.46321106 185.27227783]
[-106.68202972 170.56332397]
[-92.16014099 164.32711792]
[-77.51312256 170.26348877]
[-63.79360962 164.19924927]
[-50.07409668 158.13502502]
[-36.35457993 152.07078552]
[-27.84183502 139.84857178]
[-12.09167004 141.34622192]
[1.62784398 135.28198242]
[15.34735870 129.21774292]
[29.06687355 123.15351868]
[42.78638840 117.08928680]
[40.36293030 102.97672272]
[41.36901474 88.69297791]
[45.74678802 75.05947113]
[53.24449539 62.86021042]
[63.43096924 52.79674530]
[75.72041321 45.44779587]
[89.40610504 41.23597717]
[103.70101166 40.40349197]
[106.50382233 25.66767693]
[109.30662537 10.93186188]
[112.10943604 -3.80395436]
[114.91223907 -18.53977013]
[117.71504974 -33.27558517]
[116.23641205 -42.42533875]
[120.79599762 -48.36706161]
[123.99341583 -63.02231598]
[119.37561035 -78.15461731]
[129.64805603 -88.94007874]
[132.84547424 -103.59533691]
[136.04289246 -118.25058746]
[131.42509460 -133.38288879]
[141.69752502 -144.16835022]
[144.89495850 -158.82360840]
[148.09237671 -173.47886658]
[151.28979492 -188.13410950]
[154.48722839 -202.78936768]
[148.99066162 -218.23992920]
[159.82751465 -230.54824829]
[175.84976196 -227.05258179]
[180.57507324 -211.34896851]
[169.14247131 -199.59194946]
[165.94505310 -184.93669128]
[162.74763489 -170.28143311]
[159.55020142 -155.62619019]
[156.35278320 -140.97093201]
[161.19929504 -126.88687134]
[150.69815063 -115.05316925]
[147.50073242 -100.39791107]
[144.30329895 -85.74266052]
[149.14981079 -71.65859985]
[138.64866638 -59.82489395]
[135.45124817 -45.16963959]
[132.45086670 -30.47278023]
[129.64805603 -15.73696423]
[126.84525299 -1.00114775]
[124.04244232 13.73466873]
[121.23963928 28.47048378]
[118.43682861 43.20629883]
[137.40797424 53.45878601]
[151.50022888 69.78134155]
[158.87564087 90.04512787]
[158.57228088 111.60726166]
[150.62971497 131.65553284]
[162.24879456 141.14221191]
[173.86787415 150.62889099]
[185.48693848 160.11557007]
[197.10601807 169.60224915]
[208.72509766 179.08892822]
[220.34416199 188.57560730]
[231.96324158 198.06230164]
[243.58232117 207.54898071]
[255.20138550 217.03565979]
[270.17089844 212.94987488]
[284.67108154 218.47473145]
[293.12634277 231.48580933]
[292.28546143 246.98008728]
[282.47174072 258.99969482]
[267.45880127 262.92285156]
[253.01939392 257.24099731]
[244.70578003 244.13897705]
[245.71470642 228.65472412]
[234.09562683 219.16804504]
[222.47656250 209.68136597]
[210.85748291 200.19468689]
[199.23840332 190.70800781]
[187.61933899 181.22132874]
[176.00025940 171.73464966]
[164.38117981 162.24797058]
[152.76211548 152.76129150]
[141.14303589 143.27461243]
[134.25975037 148.90512085]
[126.61657715 153.45089722]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 34]
[10 33]
[11 32]
[12 31]
[13 30]
[15 28]
[16 27]
[17 26]
[18 25]
[42 82]
[43 81]
[44 80]
[45 79]
[46 78]
[47 77]
[49 76]
[50 75]
[52 73]
[53 72]
[54 71]
[56 69]
[57 68]
[58 67]
[59 66]
[60 65]
[87 114]
[88 113]
[89 112]
[90 111]
[91 110]
[92 109]
[93 108]
[94 107]
[95 106]
[96 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
