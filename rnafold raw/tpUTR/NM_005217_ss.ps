%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 21:15:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUGCAGAAAAAGAAAAAUGAGCUCAAAAUUUGCUUUGAGAGCUACAGGGAAUUGCUAUUACUCCUGUACCUUCUGCUCAAUUUCCUUUCCUCAUCUCAAAUAAAUGCCUUGUUACAAGA\
) } def
/len { sequence length } bind def

/coor [
[223.18025208 397.83743286]
[231.76052856 385.43463135]
[243.15621948 375.55590820]
[236.44981384 362.13861084]
[229.74340820 348.72131348]
[223.86891174 344.09017944]
[223.04206848 334.87106323]
[216.68334961 321.28555298]
[210.32464600 307.70001221]
[191.34461975 297.39102173]
[192.87915039 275.09805298]
[185.15725708 262.23834229]
[177.43536377 249.37861633]
[169.71347046 236.51889038]
[156.52825928 229.59072876]
[156.05732727 213.77653503]
[148.33543396 200.91680908]
[140.61354065 188.05709839]
[127.42833710 181.12892151]
[126.95741272 165.31472778]
[119.23551941 152.45500183]
[111.51362610 139.59529114]
[103.79173279 126.73556519]
[96.06983948 113.87584686]
[83.41320801 105.82540131]
[68.49271393 104.28308868]
[53.57221222 102.74077606]
[38.65171432 101.19846344]
[23.73121643 99.65614319]
[11.62567425 109.81642914]
[-4.11115170 108.35771942]
[-14.14288235 96.14543152]
[-12.51786995 80.42490387]
[-0.20020482 70.52285004]
[15.50226021 72.31398010]
[25.27353096 84.73564911]
[40.19403076 86.27796173]
[55.11452866 87.82027435]
[70.03502655 89.36259460]
[84.95552063 90.90490723]
[95.14462280 79.89662933]
[92.45541382 65.13965607]
[89.76620483 50.38268661]
[79.68015289 38.19325638]
[85.01033783 24.28504181]
[82.32112885 9.52807331]
[79.63191986 -5.22889614]
[76.94270325 -19.98586464]
[74.25349426 -34.74283600]
[71.56428528 -49.49980545]
[68.68530273 -64.22092438]
[65.42823029 -78.86303711]
[61.98291397 -93.46200562]
[58.53759766 -108.06097412]
[46.90739822 -119.62256622]
[51.36592865 -135.40399170]
[67.32662964 -139.17068481]
[78.37050629 -127.04777527]
[73.13656616 -111.50628662]
[76.58187866 -96.90732574]
[80.02719879 -82.30835724]
[84.68091583 -76.45174408]
[83.36813354 -67.28920746]
[87.86951447 -61.31471252]
[86.32125092 -52.18901443]
[89.01046753 -37.43204498]
[91.69967651 -22.67507744]
[94.38888550 -7.91810751]
[97.07810211 6.83886194]
[99.76731110 21.59583092]
[109.66100311 32.72974777]
[104.52317047 47.69347763]
[107.21237946 62.45044708]
[109.90159607 77.20741272]
[116.96010590 89.06097412]
[115.51148224 100.23715973]
[108.92955780 106.15395355]
[116.65145111 119.01367188]
[124.37334442 131.87339783]
[132.09523010 144.73310852]
[139.81712341 157.59283447]
[153.55465698 165.44081116]
[153.47326660 180.33520508]
[161.19515991 193.19491577]
[168.91705322 206.05464172]
[182.65458679 213.90261841]
[182.57318115 228.79699707]
[190.29507446 241.65672302]
[198.01696777 254.51644897]
[205.73886108 267.37615967]
[214.33711243 267.87109375]
[221.92155457 271.74740601]
[227.23951721 278.27899170]
[229.44752502 286.30880737]
[228.24446106 294.45343018]
[223.91017151 301.34127808]
[230.26889038 314.92681885]
[236.62760925 328.51235962]
[243.16070557 342.01489258]
[249.86711121 355.43222046]
[256.57351685 368.84951782]
[271.31475830 365.66412354]
[286.38500977 366.24563599]
[300.83697510 370.55749512]
[313.76214600 378.32864380]
[324.34805298 389.07058716]
[331.92926025 402.10809326]
[336.02920532 416.62155151]
[336.39016724 431.69873047]
[332.98944092 446.39178467]
[326.04083252 459.77713013]
[315.98110962 471.01333618]
[303.44262695 479.39410400]
[289.21356201 484.39260864]
[274.18841553 485.69464111]
[259.31161499 483.21835327]
[245.51838684 477.11938477]
[233.67573547 467.78115845]
[224.52813721 455.79064941]
[218.65058899 441.90161133]
[216.41258240 426.98712158]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 101]
[4 100]
[5 99]
[7 98]
[8 97]
[9 96]
[11 90]
[12 89]
[13 88]
[14 87]
[16 85]
[17 84]
[18 83]
[20 81]
[21 80]
[22 79]
[23 78]
[24 77]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[41 74]
[42 73]
[43 72]
[45 70]
[46 69]
[47 68]
[48 67]
[49 66]
[50 65]
[51 63]
[52 61]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
