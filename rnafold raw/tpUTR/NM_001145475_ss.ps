%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 20:16:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGUAAAAUUAAAUACAAGCAUGUUGAAAGUACAUUUCAGUAUCUUUCAGUAAAAUGCCUAUUUUGUUCUCUUU\
) } def
/len { sequence length } bind def

/coor [
[91.34845734 203.96595764]
[92.18334961 188.98846436]
[81.46626282 199.48341370]
[70.74916840 209.97836304]
[60.03208160 220.47331238]
[62.43199921 235.80366516]
[55.33265686 249.60145569]
[41.46390152 256.56115723]
[26.15854645 254.00657654]
[15.30181885 242.92005920]
[13.06834793 227.56455994]
[20.31695175 213.84460449]
[34.26039124 207.03576660]
[49.53713226 209.75622559]
[60.25422287 199.26127625]
[70.97131348 188.76631165]
[81.68840027 178.27136230]
[82.75842285 172.41893005]
[86.81599426 167.37467957]
[88.07115936 152.42729187]
[89.32633209 137.47990417]
[90.58149719 122.53250122]
[77.29926300 109.00547028]
[77.69628906 90.05181885]
[91.53332520 77.09285736]
[90.90518951 62.10601425]
[90.27705383 47.11917114]
[89.64891815 32.13232803]
[89.02078247 17.14548492]
[88.39264679 2.15864253]
[87.45079041 -12.81175804]
[86.19562531 -27.75915146]
[84.94045258 -42.70654297]
[72.70894623 -52.71482849]
[71.22004700 -68.44882965]
[81.35708618 -80.57383728]
[97.10594940 -81.89630890]
[109.12310791 -71.63163757]
[110.27899933 -55.86967468]
[99.88784790 -43.96171188]
[101.14301300 -29.01431847]
[102.39818573 -14.06692600]
[106.20831299 -7.47331047]
[103.37949371 1.53050780]
[104.00762177 16.51735115]
[104.63575745 31.50419235]
[105.26389313 46.49103546]
[105.89202881 61.47787857]
[106.52016449 76.46472168]
[115.93286896 81.49147034]
[122.30371094 90.05181885]
[124.41639709 100.51145172]
[121.86756134 110.87343597]
[115.14383698 119.15949249]
[105.52889252 123.78767395]
[104.27371979 138.73506165]
[103.01855469 153.68246460]
[101.76338959 168.62985229]
[112.77093506 158.43995667]
[126.33927155 152.04463196]
[141.20465088 150.03950500]
[155.98252869 152.61135864]
[169.29649353 159.52062988]
[179.90652466 170.12380981]
[186.82437134 183.43333435]
[189.40576172 198.20954895]
[187.41021729 213.07621765]
[181.02363586 226.64866638]
[170.84085083 237.66278076]
[157.81025696 245.09271240]
[143.14553833 248.24644470]
[128.21253967 246.83024597]
[114.40212250 240.97599792]
[103.00054932 231.22898865]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 17]
[3 16]
[4 15]
[5 14]
[19 58]
[20 57]
[21 56]
[22 55]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[31 42]
[32 41]
[33 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
