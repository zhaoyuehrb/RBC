%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 13:40:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUCUGCUGGGAUUGAGCAAUCAUCUCCUGCCCAAGUUUCCUCCUUGCCCUGAGGACCAGUGAAAGACAGAUCAUAGGAGAGACCCUUUUGCUGCUACUUCAUUCGUUCUGACCUAAUAAUAAAAGUUAGAACCAUA\
) } def
/len { sequence length } bind def

/coor [
[63.26808167 131.52732849]
[50.50957870 139.41532898]
[37.75107574 147.30332947]
[36.47212982 162.65489197]
[26.51531601 174.17510986]
[11.85756493 177.58308411]
[-1.83242726 171.77601624]
[-14.59093094 179.66401672]
[-27.34943390 187.55201721]
[-40.01798630 195.58369446]
[-52.59496689 203.75801086]
[-65.17194366 211.93234253]
[-66.10362244 227.30888367]
[-75.79754639 239.05117798]
[-90.37453461 242.78953552]
[-104.19226837 237.29333496]
[-116.76924896 245.46766663]
[-129.34622192 253.64198303]
[-131.06640625 269.18466187]
[-142.41043091 279.94790649]
[-158.02198792 280.84960938]
[-170.52980042 271.46405029]
[-174.02803040 256.22277832]
[-166.86495972 242.32226562]
[-152.42272949 236.32591248]
[-137.52055359 241.06500244]
[-124.94357300 232.89068604]
[-112.36659241 224.71635437]
[-111.77864075 209.85726929]
[-102.44336700 198.05403137]
[-87.77645874 193.96316528]
[-73.34626770 199.35536194]
[-60.76928711 191.18103027]
[-48.19231033 183.00671387]
[-44.26509094 176.67079163]
[-35.23743820 174.79351807]
[-22.47893333 166.90551758]
[-9.72043037 159.01750183]
[-8.79682064 144.17550659]
[0.80281615 132.58624268]
[15.55842876 128.82788086]
[29.86307144 134.54483032]
[42.62157440 126.65682220]
[55.38007736 118.76882172]
[51.97884750 106.09712982]
[52.10541916 92.97752380]
[55.75049210 80.37381744]
[62.64628601 69.21191406]
[72.28621674 60.31180954]
[83.96209717 54.32733917]
[96.81617737 51.69814301]
[109.90415192 52.61736679]
[115.21103668 38.58750534]
[120.51791382 24.55764389]
[125.82479095 10.52778149]
[131.13166809 -3.50208092]
[136.27966309 -17.59101677]
[133.57220459 -33.17884064]
[145.10173035 -42.60853958]
[150.09019470 -56.75475311]
[155.07864380 -70.90096283]
[160.06710815 -85.04717255]
[165.05555725 -99.19338226]
[170.04402161 -113.33959961]
[175.03247070 -127.48580933]
[180.02093506 -141.63201904]
[185.00938416 -155.77822876]
[175.34571838 -165.95457458]
[171.04743958 -179.24411011]
[172.90370178 -193.02062988]
[180.49334717 -204.58764648]
[192.27871704 -211.70611572]
[205.91685486 -213.02783203]
[211.22372437 -227.05769348]
[204.49726868 -241.35910034]
[209.93211365 -256.19952393]
[224.30383301 -262.77441406]
[239.08596802 -257.18298340]
[245.50852966 -242.74253845]
[239.76112366 -228.02033997]
[225.25358582 -221.75082397]
[219.94671631 -207.72094727]
[230.46531677 -195.50546265]
[233.42921448 -179.56492615]
[227.94137573 -164.20870972]
[215.40264893 -153.63648987]
[199.15559387 -150.78977966]
[194.16714478 -136.64356995]
[189.17868042 -122.49735260]
[184.19023132 -108.35114288]
[179.20176697 -94.20492554]
[174.21331787 -80.05871582]
[169.22485352 -65.91250610]
[164.23640442 -51.76629639]
[159.24794006 -37.62008286]
[162.31221008 -23.04409218]
[150.42587280 -12.60256100]
[151.17425537 -5.18589354]
[145.16152954 1.80479836]
[139.85466003 15.83466053]
[134.54777527 29.86452293]
[129.24089050 43.89438629]
[123.93401337 57.92424774]
[138.66830444 70.88010406]
[147.04997253 88.61991882]
[147.70204163 108.22930908]
[140.51737976 126.48674774]
[151.64941406 136.54048157]
[162.78146362 146.59423828]
[173.91349792 156.64797974]
[185.04553223 166.70172119]
[196.17756653 176.75546265]
[207.30960083 186.80920410]
[218.44163513 196.86294556]
[232.55383301 191.04840088]
[247.79080200 191.94129944]
[261.12725830 199.36436462]
[269.91522217 211.84371948]
[272.40985107 226.90159607]
[268.11581421 241.54823303]
[257.88574219 252.87553406]
[243.75074768 258.63446045]
[228.51741028 257.68157959]
[215.21029663 250.20605469]
[206.47152710 237.69218445]
[204.03622437 222.62460327]
[208.38789368 207.99499512]
[197.25585938 197.94123840]
[186.12382507 187.88749695]
[174.99179077 177.83375549]
[163.85975647 167.78001404]
[152.72770691 157.72627258]
[141.59567261 147.67253113]
[130.46363831 137.61877441]
[119.89980316 144.12713623]
[108.02851105 147.73625183]
[95.62973022 148.20898438]
[83.51808167 145.51431274]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[3 42]
[7 38]
[8 37]
[9 36]
[10 34]
[11 33]
[12 32]
[16 28]
[17 27]
[18 26]
[52 103]
[53 102]
[54 101]
[55 100]
[56 99]
[57 97]
[59 95]
[60 94]
[61 93]
[62 92]
[63 91]
[64 90]
[65 89]
[66 88]
[67 87]
[73 82]
[74 81]
[107 134]
[108 133]
[109 132]
[110 131]
[111 130]
[112 129]
[113 128]
[114 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
