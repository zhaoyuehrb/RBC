%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 13:06:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCAUCUCCAGAGACACACGGAAAUACAUUCUCUUUGAUUCUUCUUCAGUGUGUCUAAAUUAUUUACAAAUUAUUAAUUAUAAACAAAGCUAAACAA\
) } def
/len { sequence length } bind def

/coor [
[199.90791321 358.92077637]
[189.76295471 347.85086060]
[180.89738464 335.73208618]
[173.41880798 322.71154785]
[167.41801453 308.94732666]
[162.96783447 294.60650635]
[160.12231445 279.86315918]
[158.91598511 264.89627075]
[159.36349487 249.88751221]
[161.45939636 235.01907349]
[165.17825317 220.47145081]
[170.47492981 206.42124939]
[177.28512573 193.03900146]
[185.52616882 180.48716736]
[173.96847534 170.92581177]
[162.41076660 161.36445618]
[150.85307312 151.80308533]
[139.29537964 142.24172974]
[127.73767853 132.68037415]
[116.17997742 123.11901093]
[104.62227631 113.55765533]
[90.86957550 111.03678894]
[85.81636047 98.00004578]
[74.25866699 88.43868256]
[62.70096588 78.87732697]
[49.25918961 85.91965485]
[34.18587875 87.27549744]
[19.78075600 82.76927185]
[8.22963715 73.11736298]
[1.27276576 59.81447601]
[-0.05733573 44.90219116]
[4.41100264 30.65567589]
[-7.14669609 21.09431648]
[-23.18958664 21.16653442]
[-33.13597488 8.57888699]
[-29.35584641 -7.01246262]
[-14.74898815 -13.64716339]
[-0.52053434 -6.23564243]
[2.41466379 9.53661728]
[13.97236252 19.09797668]
[27.12925148 12.03925419]
[42.02663422 10.55151272]
[56.39747620 14.89244652]
[68.04288483 24.43037605]
[75.16854858 37.73596191]
[76.66117096 52.79634094]
[72.26232147 67.31962585]
[83.82002258 76.88098907]
[95.37772369 86.44234467]
[109.13042450 88.96321106]
[114.18363953 101.99995422]
[125.74133301 111.56131744]
[137.29904175 121.12267303]
[148.85673523 130.68403625]
[160.41442871 140.24539185]
[171.97213745 149.80674744]
[183.52983093 159.36811829]
[195.08752441 168.92947388]
[205.87281799 158.48242188]
[217.74191284 149.28527832]
[230.55076599 141.44967651]
[244.14385986 135.07072449]
[258.35620117 130.22587585]
[273.01525879 126.97394562]
[287.94308472 125.35439301]
[302.95849609 125.38688660]
[317.87918091 127.07102203]
[332.52401733 130.38636780]
[346.71527100 135.29267883]
[360.28063965 141.73039246]
[373.05545044 149.62135315]
[384.88464355 158.86978149]
[395.62460327 169.36340332]
[405.14498901 180.97483826]
[413.33020020 193.56315613]
[420.08090210 206.97550964]
[425.31512451 221.04910278]
[428.96936035 235.61309814]
[430.99920654 250.49069214]
[431.38003540 265.50128174]
[430.10723877 280.46267700]
[427.19628906 295.19323730]
[422.68246460 309.51416016]
[416.62060547 323.25158691]
[409.08428955 336.23876953]
[400.16497803 348.31805420]
[389.97094727 359.34280396]
[378.62597656 369.17919922]
[366.26776123 377.70785522]
[353.04629517 384.82516479]
[339.12213135 390.44482422]
[324.66424561 394.49853516]
[309.84814453 396.93716431]
[294.85372925 397.73104858]
[279.86297607 396.87057495]
[265.05786133 394.36618042]
[250.61811829 390.24829102]
[236.71902466 384.56686401]
[223.52931213 377.39086914]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 58]
[15 57]
[16 56]
[17 55]
[18 54]
[19 53]
[20 52]
[21 51]
[23 49]
[24 48]
[25 47]
[32 40]
[33 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
