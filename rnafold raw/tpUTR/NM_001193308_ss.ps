%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 23:15:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCACCAAGCCUCUCUCUCUGGACCCCCAUCUCAGGGCCUGCCCUUGGCUAAAGUCAAUAAAGUCUAUUCUAAGAGCAA\
) } def
/len { sequence length } bind def

/coor [
[126.02339172 145.66665649]
[118.25318909 158.49723816]
[105.55602264 166.48359680]
[90.62602997 167.93115234]
[76.63113403 162.53273010]
[66.54084015 151.43380737]
[62.49615860 136.98941040]
[65.35530090 122.26442719]
[74.51161194 110.38326263]
[88.02205658 103.86697388]
[73.82984161 99.01096344]
[59.63761520 94.15495300]
[50.23623657 94.31493378]
[44.99557114 88.82568359]
[31.00231361 83.42301941]
[20.46426582 92.83480835]
[6.94752693 96.71424103]
[-6.84644985 94.34626007]
[-18.18691635 86.25844574]
[-24.85441971 74.10484314]
[-25.57507515 60.32798004]
[-39.34831619 54.38678360]
[-53.12155914 48.44558716]
[-69.33813477 50.88580322]
[-79.34673309 37.89503479]
[-72.85136414 22.83707428]
[-56.53390503 21.20225906]
[-47.18036270 34.67234802]
[-33.40711975 40.61354446]
[-19.63387871 46.55474091]
[-7.03425694 36.63198090]
[8.93143177 34.32990265]
[23.99370193 40.35810471]
[34.07758331 53.18589783]
[36.40497971 69.42976379]
[50.39823532 74.83242798]
[64.49362183 79.96273041]
[78.68584442 84.81874084]
[92.87806702 89.67475128]
[101.61943817 87.62553406]
[109.44289398 91.93730164]
[124.41751862 91.06513214]
[139.39213562 90.19295502]
[152.71908569 81.66634369]
[165.87471008 88.65052795]
[180.84933472 87.77835083]
[195.82394409 86.90618134]
[210.79856873 86.03400421]
[225.77319336 85.16183472]
[232.42225647 72.92034912]
[244.19480896 65.67858887]
[257.90121460 65.27098846]
[269.89096069 71.69730377]
[277.02487183 83.15163422]
[292.02206421 82.86076355]
[305.66961670 74.85731506]
[318.54452515 82.34636688]
[329.31903076 70.78411865]
[345.11621094 70.31060791]
[356.56390381 81.20675659]
[356.87036133 97.00807953]
[345.85379028 108.33992004]
[330.05014038 108.47930908]
[318.83538818 97.34354401]
[306.26055908 105.32618713]
[292.31292725 97.85794830]
[277.31576538 98.14881897]
[268.47485352 111.83699799]
[253.09681702 117.70492554]
[237.06736755 113.29849243]
[226.64537048 100.13645935]
[211.67074585 101.00862885]
[196.69612122 101.88080597]
[181.72149658 102.75297546]
[166.74687195 103.62514496]
[154.49102783 112.08938599]
[140.26431274 105.16757965]
[125.28968811 106.03975677]
[110.31507111 106.91192627]
[121.58326721 116.81282043]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 39]
[11 38]
[12 37]
[14 36]
[15 35]
[21 30]
[22 29]
[23 28]
[41 79]
[42 78]
[43 77]
[45 75]
[46 74]
[47 73]
[48 72]
[49 71]
[54 67]
[55 66]
[57 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
