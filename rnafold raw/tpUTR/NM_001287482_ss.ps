%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 07:58:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCACUUCAAGUAGAUAGCUUCUAUUUCCUAUAUUUGUCUUAUAUACAAGUAUUUGCUUUUAUCAAAAUAAUUCCAAUAAAGCAUUUUAAAGUAAAGAAGA\
) } def
/len { sequence length } bind def

/coor [
[115.52473450 237.70701599]
[101.75723267 244.86489868]
[86.41680908 242.53013611]
[75.40218353 231.60047913]
[72.94869232 216.27859497]
[79.99975586 202.45606995]
[93.84410095 195.44795227]
[96.10106659 180.61871338]
[98.35803986 165.78948975]
[100.61500549 150.96025085]
[88.94831848 141.53219604]
[74.92307281 146.85127258]
[60.89783096 152.17033386]
[46.87258530 157.48941040]
[32.84734344 162.80848694]
[18.82209778 168.12756348]
[4.79685497 173.44664001]
[-3.07211542 187.42729187]
[-18.93125343 189.84954834]
[-30.61478424 178.85523987]
[-29.16010475 162.87828064]
[-15.68311977 154.17480469]
[-0.52221853 159.42138672]
[13.50302505 154.10231018]
[27.52826881 148.78324890]
[41.55351257 143.46417236]
[55.57875443 138.14509583]
[69.60399628 132.82601929]
[83.62924194 127.50695038]
[74.72875977 116.56681061]
[71.80246735 103.58891296]
[74.77937317 91.44351196]
[82.35404968 82.51708984]
[75.38320160 69.23525238]
[68.41235352 55.95341110]
[61.44150925 42.67157364]
[54.47066116 29.38973236]
[47.49981308 16.10789108]
[40.52896500 2.82605100]
[33.55811691 -10.45578957]
[18.24238968 -13.61212444]
[8.57930470 -25.90679169]
[9.13147831 -41.53462219]
[19.63819122 -53.11663437]
[35.13849258 -55.18415833]
[48.31361771 -46.76096725]
[52.94267273 -31.82423782]
[46.83995819 -17.42663765]
[53.81080627 -4.14479637]
[60.78165436 9.13704395]
[67.75250244 22.41888428]
[74.72335052 35.70072556]
[81.69419861 48.98256683]
[88.66504669 62.26440430]
[95.63589478 75.54624939]
[124.91313171 86.31360626]
[123.58016205 121.64740753]
[137.43835449 115.90715027]
[151.29653931 110.16690063]
[165.15473938 104.42665100]
[179.01292419 98.68640137]
[192.87112427 92.94614410]
[191.66601562 77.86626434]
[195.18179321 63.15251160]
[203.07402039 50.24639511]
[214.56950378 40.41232681]
[228.54203796 34.61374283]
[243.62272644 33.41873169]
[258.33410645 36.94437027]
[271.23495483 44.84524918]
[281.06130981 56.34732437]
[286.85052490 70.32373810]
[288.03543091 85.40522003]
[284.49993896 100.11425018]
[276.59042358 113.00977325]
[265.08175659 122.82843018]
[251.10147095 128.60829163]
[236.01919556 129.78308105]
[221.31254578 126.23773193]
[208.42231750 118.31957245]
[198.61137390 106.80433655]
[184.75318909 112.54459381]
[170.89498901 118.28484344]
[157.03680420 124.02509308]
[143.17860413 129.76535034]
[129.32040405 135.50559998]
[143.34922791 130.19593811]
[158.31137085 131.26081848]
[171.44680786 138.50378418]
[180.33241272 150.58872986]
[183.32908630 165.28634644]
[179.88401794 179.88536072]
[170.63270569 191.69271851]
[157.28176880 198.53028870]
[142.29403687 199.13674927]
[128.43429565 193.40023804]
[118.25924683 182.37896729]
[113.64588928 168.10601807]
[115.44423676 153.21722412]
[113.18727112 168.04646301]
[110.93029785 182.87568665]
[108.67333221 197.70492554]
[119.80587769 208.51445007]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 102]
[8 101]
[9 100]
[10 99]
[11 29]
[12 28]
[13 27]
[14 26]
[15 25]
[16 24]
[17 23]
[33 55]
[34 54]
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[57 86]
[58 85]
[59 84]
[60 83]
[61 82]
[62 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
