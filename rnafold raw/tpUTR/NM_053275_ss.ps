%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 23:38:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACCAAAAAGCAACCAACUUAGCCAGUUUUAUUUGCAAAACAAGGAAAUAAAGGCUUACUUCUUUAAAAAGU\
) } def
/len { sequence length } bind def

/coor [
[71.79000092 338.55007935]
[56.78136826 337.72103882]
[42.08723068 334.55419922]
[28.06944656 329.12756348]
[15.07322025 321.57479858]
[3.41859317 312.08184814]
[-6.60742903 300.88247681]
[-14.75794601 288.25253296]
[-20.83224487 274.50302124]
[-24.68073845 259.97250366]
[-26.20865631 245.01884460]
[-25.37837219 230.01028442]
[-22.21033096 215.31640625]
[-16.78254890 201.29907227]
[-9.22869015 188.30346680]
[0.26522371 176.64962769]
[11.46539783 166.62452698]
[24.09601784 158.47505188]
[37.84604263 152.40188599]
[52.37686539 148.55459595]
[67.33065033 147.02790833]
[82.33914948 147.85943604]
[85.49933624 133.19610596]
[88.65953064 118.53277588]
[91.81971741 103.86944580]
[89.98728943 100.08826447]
[89.99600220 95.48197937]
[92.18429565 90.97251892]
[96.42681122 87.60003662]
[101.42390442 73.45687866]
[106.42100525 59.31371307]
[111.41809845 45.17055130]
[116.41519928 31.02739143]
[121.41229248 16.88422966]
[126.40939331 2.74106765]
[123.71145630 -12.84840584]
[135.24673462 -22.27106094]
[127.14523315 -35.64640045]
[129.58770752 -51.09205627]
[141.42086792 -61.31507111]
[157.05749512 -61.48844147]
[169.11442566 -51.53031540]
[171.89875793 -36.14260864]
[164.09580994 -22.59092903]
[149.38990784 -17.27396393]
[152.44526672 -2.69610405]
[140.55255127 7.73816442]
[135.55545044 21.88132668]
[130.55836487 36.02448654]
[125.56126404 50.16764832]
[120.56416321 64.31081390]
[115.56707001 78.45397186]
[110.56996918 92.59713745]
[106.48304749 107.02963257]
[103.32285309 121.69296265]
[100.16266632 136.35629272]
[97.00247955 151.01962280]
[111.02115631 156.44392395]
[124.01863098 163.99456787]
[135.67481995 173.48559570]
[145.70269775 184.68328857]
[153.85530090 197.31188965]
[159.93186951 211.06040955]
[163.78276062 225.59028625]
[165.31314087 240.54370117]
[164.48533630 255.55239868]
[161.31971741 270.24679565]
[155.89424133 284.26501465]
[148.34252930 297.26187134]
[138.85054016 308.91729736]
[127.65202332 318.94424438]
[115.02275085 327.09579468]
[101.27372742 333.17123413]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 57]
[23 56]
[24 55]
[25 54]
[29 53]
[30 52]
[31 51]
[32 50]
[33 49]
[34 48]
[35 47]
[37 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
