%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 05:43:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCCAGGUUCACACUAGAAGGCCAAAACUUCCGCAAACAUCUGAUGAUGAAAAGAAAGAUUUUUGAGACUGCAGCCUAUUAAUAAAGUUAACAUAACUGAGAA\
) } def
/len { sequence length } bind def

/coor [
[258.94537354 254.99234009]
[248.10343933 244.62640381]
[237.26152039 234.26046753]
[220.06867981 231.11341858]
[214.87536621 213.52648926]
[203.72819519 203.48953247]
[192.58102417 193.45257568]
[177.76658630 194.48612976]
[166.31880188 184.46601868]
[165.33514404 168.92027283]
[154.18797302 158.88331604]
[143.04080200 148.84635925]
[123.65334320 160.65473938]
[101.39012146 165.08874512]
[78.95789337 161.60931396]
[59.08394623 150.63945007]
[44.18454742 133.51287842]
[36.07115936 112.31183624]
[21.11310387 113.43278503]
[6.15504694 114.55373383]
[-8.80300999 115.67469025]
[-17.78383446 128.47621155]
[-32.90545273 132.46000671]
[-47.02790070 125.74505615]
[-53.48299026 111.50196075]
[-49.22282410 96.45586395]
[-36.25892258 87.71107483]
[-20.71244431 89.39662170]
[-9.92396164 100.71662903]
[5.03409529 99.59568024]
[19.99215317 98.47473145]
[34.95021057 97.35377502]
[35.88359451 88.70555115]
[37.96155548 80.25894928]
[41.14699173 72.16474915]
[45.38303757 64.56745911]
[50.59407806 57.60268021]
[56.68708420 51.39476013]
[63.55329132 46.05451584]
[56.64365387 32.74073029]
[49.73402023 19.42694283]
[42.82438278 6.11315536]
[28.72070694 -2.25454521]
[29.18604469 -18.64708900]
[43.74169540 -26.20123291]
[57.41405487 -17.14591980]
[56.13816833 -0.79648137]
[63.04780579 12.51730537]
[69.95744324 25.83109283]
[76.86708069 39.14487839]
[87.50313568 36.10707092]
[98.49994659 34.91369247]
[109.54006195 35.59918594]
[120.30477905 38.14376450]
[130.48335266 42.47397995]
[139.78193665 48.46482086]
[147.93212891 55.94335175]
[154.69863892 64.69368744]
[159.88615417 74.46321869]
[163.34489441 84.96994019]
[164.97502136 95.91053772]
[164.72950745 106.96918488]
[162.61540222 117.82665253]
[158.69375610 128.16950989]
[153.07775879 137.69918823]
[164.22492981 147.73614502]
[175.37211609 157.77310181]
[190.93551636 157.12638855]
[202.09735107 167.46409607]
[202.61798096 182.30540466]
[213.76515198 192.34236145]
[224.91232300 202.37931824]
[237.91699219 202.50811768]
[247.00860596 211.23503113]
[247.62745667 223.41853333]
[258.46939087 233.78448486]
[269.31130981 244.15042114]
[280.77804565 238.01525879]
[293.50128174 235.41246033]
[306.42007446 236.54849243]
[318.46011353 241.31852722]
[328.62319946 249.31593323]
[336.06991577 259.86703491]
[340.18893433 272.08770752]
[340.64724731 284.95764160]
[337.41705322 297.40530396]
[330.77719116 308.39736938]
[340.64627075 319.69345093]
[350.51535034 330.98950195]
[360.38442993 342.28558350]
[370.25354004 353.58166504]
[385.22802734 361.53152466]
[381.73419189 378.12158203]
[364.82531738 379.35684204]
[358.95745850 363.45074463]
[349.08837891 352.15466309]
[339.21929932 340.85858154]
[329.35021973 329.56253052]
[319.48114014 318.26644897]
[303.41525269 324.31069946]
[286.22222900 323.82769775]
[270.45779419 316.86306763]
[258.47518921 304.42788696]
[252.07395935 288.35189819]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 77]
[2 76]
[3 75]
[5 72]
[6 71]
[7 70]
[10 67]
[11 66]
[12 65]
[18 32]
[19 31]
[20 30]
[21 29]
[39 50]
[40 49]
[41 48]
[42 47]
[87 99]
[88 98]
[89 97]
[90 96]
[91 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
