%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 03:33:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGAGGGUGGGCCGUCUGCUUUCGUUCCCACAAAGAAAGCACCUCACCCCAGCACAGUGCCACCCCUGUUCAUCUGGGCUGCCUGGCAGAGAGCCUUGCUGUUUACAAUUAAAAUGUUUCUGCCACAA\
) } def
/len { sequence length } bind def

/coor [
[87.34970856 158.71827698]
[75.47725677 149.55067444]
[70.80736542 135.29612732]
[74.95381165 120.88061523]
[86.48402405 111.28560638]
[71.97177124 115.07960510]
[57.45951462 118.87361145]
[42.94725800 122.66761017]
[28.43500328 126.46160889]
[13.92274857 130.25561523]
[-0.58950698 134.04960632]
[-3.47159195 142.12927246]
[-9.29453754 148.29885864]
[-17.01973152 151.56890869]
[-25.31301880 151.45735168]
[-32.77497864 148.05921936]
[-38.17707825 142.01762390]
[-52.98953247 144.38218689]
[-67.80199432 146.74673462]
[-82.61444855 149.11129761]
[-97.42690277 151.47584534]
[-112.23936462 153.84040833]
[-127.05181885 156.20495605]
[-131.87887573 170.72935486]
[-142.91088867 181.33847046]
[-157.61277771 185.59440613]
[-172.60615540 182.51918030]
[-184.44566345 172.81945801]
[-190.41065979 158.72415161]
[-189.13044739 143.47229004]
[-180.89918518 130.56860352]
[-167.60836792 122.97828674]
[-152.31213379 122.44553375]
[-138.52543640 129.09277344]
[-129.41636658 141.39250183]
[-114.60391998 139.02795410]
[-99.79145813 136.66339111]
[-84.97900391 134.29884338]
[-70.16654968 131.93428040]
[-55.35408783 129.56973267]
[-40.54163361 127.20516968]
[-25.36607170 111.82678986]
[-4.38350773 119.53735352]
[10.12874794 115.74335480]
[24.64100266 111.94935608]
[39.15325928 108.15535736]
[53.66551590 104.36135101]
[68.17777252 100.56735229]
[82.69002533 96.77335358]
[92.14402008 85.12766266]
[92.87433624 70.14545441]
[93.60464478 55.16324234]
[94.33496094 40.18103409]
[87.27873230 26.02051735]
[95.62651825 13.68504906]
[96.35683441 -1.29716182]
[97.08715057 -16.27937317]
[84.28495026 -24.64902306]
[77.43620300 -38.21336746]
[78.29082489 -53.28440094]
[86.51931763 -65.82025909]
[99.82809448 -72.50921631]
[100.55841064 -87.49142456]
[92.58289337 -101.82053375]
[101.23554230 -115.75121307]
[117.61523438 -114.95277405]
[124.87196350 -100.24658966]
[115.54061890 -86.76110840]
[114.81030273 -71.77890015]
[127.40541840 -63.82725143]
[134.37567139 -50.55052185]
[133.76043701 -35.46781921]
[125.62488556 -22.63389206]
[112.06935883 -15.54905891]
[111.33904266 -0.56684774]
[110.60872650 14.41536331]
[117.71719360 27.50425148]
[109.31716919 40.91134644]
[108.58686066 55.89355850]
[107.85654449 70.87577057]
[107.12622833 85.85797882]
[111.10254669 89.32772827]
[113.61906433 93.79926300]
[114.47100067 98.71068573]
[128.41494751 104.23934937]
[142.35891724 109.76800537]
[156.30287170 115.29666901]
[170.24682617 120.82532501]
[184.19078064 126.35398865]
[198.13473511 131.88264465]
[212.07868958 137.41131592]
[226.02264404 142.93997192]
[234.76446533 130.65811157]
[246.19195557 120.82572937]
[259.64074707 114.01446533]
[274.32894897 110.62031555]
[289.40261841 110.84060669]
[303.98535156 114.66254425]
[317.22933960 121.86391449]
[328.36462402 132.02604675]
[336.74380493 144.55812073]
[341.87969971 158.73155212]
[343.47375488 173.72229004]
[341.43325806 188.65881348]
[335.87686157 202.67274475]
[327.12759399 214.94929504]
[315.69412231 224.77474976]
[302.24121094 231.57785034]
[287.55096436 234.96310425]
[272.47744751 234.73367310]
[257.89703369 230.90289307]
[244.65739441 223.69349670]
[233.52827454 213.52461243]
[225.15670776 200.98745728]
[220.02938843 186.81092834]
[218.44444275 171.81921387]
[220.49398804 156.88392639]
[206.55003357 151.35527039]
[192.60607910 145.82659912]
[178.66212463 140.29794312]
[164.71815491 134.76928711]
[150.77420044 129.24063110]
[136.83024597 123.71195984]
[122.88629150 118.18330383]
[108.94233704 112.65464020]
[119.22154999 123.57882690]
[121.58649445 138.39122009]
[115.21991730 151.97306824]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 49]
[6 48]
[7 47]
[8 46]
[9 45]
[10 44]
[11 43]
[17 41]
[18 40]
[19 39]
[20 38]
[21 37]
[22 36]
[23 35]
[50 81]
[51 80]
[52 79]
[53 78]
[55 76]
[56 75]
[57 74]
[62 69]
[63 68]
[84 125]
[85 124]
[86 123]
[87 122]
[88 121]
[89 120]
[90 119]
[91 118]
[92 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
