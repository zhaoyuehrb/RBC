%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 12:17:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCAUAUUGGAGUAGCGAGGAAUCUGAUUCCAAGCAAAAACCAGACAAUGUAAUAAAAAUAUUAUUCAUAAUUUUUCAA\
) } def
/len { sequence length } bind def

/coor [
[73.24354553 144.89451599]
[65.96370697 139.66050720]
[59.68561172 133.25921631]
[54.59404755 125.87905121]
[50.83886719 117.73721313]
[48.53059006 109.07333374]
[47.73715210 100.14241028]
[48.48190689 91.20729065]
[50.74293518 82.53096771]
[37.47150803 75.54031372]
[24.20008278 68.54965973]
[10.43105698 77.47680664]
[-5.86423016 78.31379700]
[-20.30985832 70.92900848]
[-29.07317162 57.38622284]
[-29.88152695 41.36878586]
[-43.41403961 34.89799500]
[-58.15774155 39.92403412]
[-71.78945160 33.16895294]
[-76.49015045 19.08211517]
[-90.02265930 12.61132431]
[-103.55516815 6.14053345]
[-117.08768463 -0.33025748]
[-130.62019348 -6.80104828]
[-147.51805115 -8.17901897]
[-150.87171936 -24.79796028]
[-135.83064270 -32.62115097]
[-124.14940643 -20.33355904]
[-110.61688995 -13.86276913]
[-97.08438110 -7.39197779]
[-83.55187225 -0.92118686]
[-70.01935577 5.54960394]
[-56.10350037 0.36457303]
[-42.28743362 6.73409939]
[-36.94324875 21.36548615]
[-23.41073608 27.83627701]
[-12.55690956 19.32066345]
[0.98407543 16.35294724]
[14.53432465 19.57935143]
[25.38827896 28.41523170]
[31.35292053 41.15003586]
[31.19073486 55.27823257]
[44.46216202 62.26888275]
[57.73358917 69.25953674]
[75.51356506 53.82814789]
[98.26227570 47.76585388]
[121.36360168 52.30280685]
[140.12986755 66.51837921]
[150.75306702 87.52796936]
[165.68261719 86.07580566]
[180.61215210 84.62364197]
[189.10461426 80.58760834]
[196.14703369 83.41617584]
[211.12165833 82.54399872]
[226.09628296 81.67182922]
[241.07090759 80.79965973]
[256.04553223 79.92748260]
[267.74209595 68.94704437]
[283.59832764 71.38809967]
[291.45074463 85.37807465]
[285.27557373 100.18506622]
[269.80990601 104.45041656]
[256.91769409 94.90210724]
[241.94306946 95.77427673]
[226.96846008 96.64645386]
[211.99383545 97.51862335]
[197.01921082 98.39080048]
[182.06431580 99.55318451]
[167.13478088 101.00534821]
[152.20523071 102.45751190]
[151.01693726 111.34451294]
[148.32711792 119.89762878]
[144.21493530 127.86512756]
[138.80142212 135.01249695]
[132.24592590 141.12937927]
[124.74136353 146.03575134]
[116.50861359 149.58720398]
[107.78999329 151.67921448]
[98.84209442 152.25021362]
[89.92826843 151.28338623]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 44]
[10 43]
[11 42]
[16 36]
[17 35]
[20 32]
[21 31]
[22 30]
[23 29]
[24 28]
[49 70]
[50 69]
[51 68]
[53 67]
[54 66]
[55 65]
[56 64]
[57 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
