%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 18:49:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGUUUUCAAUUUACUACUCAAUUGGGUAUUUCUUGCUCUCAUUUUAAUCAUCAAUCAUAAUUUAUGAUGACUGGCCCCGUGGAUGCACAACUUUGGCAACAUCUGUAAAUUCAAUACCUAAUGUUUAUCAAUAUUUCUUAAUGAACUGC\
) } def
/len { sequence length } bind def

/coor [
[145.03176880 669.46997070]
[145.03176880 654.46997070]
[145.03176880 639.46997070]
[145.03176880 624.46997070]
[145.03176880 609.46997070]
[145.03176880 594.46997070]
[145.03176880 579.46997070]
[128.63044739 566.04382324]
[127.32358551 544.60797119]
[142.35913086 528.88421631]
[140.81176758 513.96423340]
[139.26440430 499.04428101]
[124.48096466 496.72058105]
[110.79228973 490.64462280]
[99.13392639 481.22512817]
[90.30435181 469.09948730]
[84.91031647 455.09075928]
[83.32510376 440.15167236]
[85.66275787 425.29995728]
[91.76985168 411.54898071]
[101.23558044 399.83847046]
[113.41936493 390.97048950]
[127.49421692 385.55441284]
[125.94684601 370.63446045]
[124.39947510 355.71447754]
[122.85210419 340.79449463]
[121.30473328 325.87451172]
[119.75736237 310.95455933]
[118.20999146 296.03457642]
[116.66262054 281.11459351]
[115.11524963 266.19464111]
[113.56787872 251.27465820]
[98.70079803 240.67240906]
[96.19828796 222.26379395]
[108.09540558 207.58380127]
[105.93279266 192.74052429]
[103.77017975 177.89723206]
[101.60755920 163.05395508]
[88.90454102 162.09086609]
[76.65415192 158.59484863]
[65.35612488 152.70851135]
[55.47136688 144.67198181]
[47.40311050 134.81311035]
[41.48049164 123.53405762]
[37.94511414 111.29496765]
[36.94120789 98.59510803]
[38.50971985 85.95256042]
[42.58666992 73.88306427]
[49.00573730 62.87897873]
[57.50506592 53.38921356]
[48.78891373 41.18148041]
[40.07276154 28.97375107]
[31.35660934 16.76601982]
[22.64045715 4.55828953]
[13.92430401 -7.64944124]
[-1.22953403 -5.50007725]
[-15.64255333 -10.65017128]
[-26.00274658 -21.91627121]
[-29.92941666 -36.70950699]
[-26.52024460 -51.63050461]
[-16.55863380 -63.25052261]
[-2.33368778 -68.89937592]
[12.88580418 -67.27898407]
[25.60251427 -58.76171875]
[32.89423370 -45.30477142]
[33.08538437 -30.00045776]
[26.13203430 -16.36559296]
[34.84818649 -4.15786266]
[43.56433868 8.04986763]
[52.28049088 20.25759888]
[60.99664307 32.46532822]
[69.71279907 44.67306137]
[82.16928101 39.49834442]
[95.44121552 37.09052277]
[108.92163849 37.55971527]
[121.99404144 40.88446045]
[128.85908508 27.54762650]
[135.72413635 14.21079254]
[127.95310974 -5.26253653]
[136.82962036 -23.93652916]
[156.28308105 -30.03187943]
[162.02333069 -43.89007187]
[167.76358032 -57.74826431]
[165.08778381 -73.92763519]
[177.93161011 -84.12411499]
[193.08244324 -77.84842682]
[194.95440674 -61.55647659]
[181.62178040 -52.00801468]
[175.88153076 -38.14982224]
[170.14128113 -24.29162788]
[176.29379272 -17.05966568]
[179.37500000 -8.01703739]
[178.91273499 1.58318913]
[174.92904663 10.39398193]
[167.94305420 17.16334915]
[158.90370178 20.91220474]
[149.06097412 21.07583809]
[142.19592285 34.41267395]
[135.33087158 47.74950790]
[148.61219788 59.80996323]
[157.96083069 75.12175751]
[162.62048340 92.44618988]
[162.21418762 110.38171387]
[156.77481079 127.47736359]
[146.74240112 142.35011292]
[132.92857361 153.79678345]
[116.45084381 160.89134216]
[118.61346436 175.73461914]
[120.77607727 190.57789612]
[122.93869019 205.42118835]
[133.73490906 210.57600403]
[140.60765076 220.22132874]
[141.92779541 231.86991882]
[137.48004150 242.58647156]
[128.48785400 249.72727966]
[130.03523254 264.64724731]
[131.58259583 279.56723022]
[133.12997437 294.48721313]
[134.67733765 309.40716553]
[136.22470093 324.32714844]
[137.77207947 339.24713135]
[139.31944275 354.16711426]
[140.86682129 369.08706665]
[142.41418457 384.00704956]
[157.30094910 386.41949463]
[171.04525757 392.59841919]
[182.71270752 402.11715698]
[191.51173401 414.32223511]
[196.84742737 428.37811279]
[198.36169434 443.32455444]
[195.95726013 458.14208984]
[189.80398560 471.82162476]
[180.32676697 483.43310547]
[168.17631531 492.18887329]
[154.18437195 497.49688721]
[155.73173523 512.41687012]
[157.27911377 527.33685303]
[165.79849243 530.50549316]
[172.77001953 536.26971436]
[177.43777466 543.96728516]
[179.30796814 552.72845459]
[178.20094299 561.57440186]
[174.26811218 569.52618408]
[167.97195435 575.71362305]
[160.03176880 579.46997070]
[160.03176880 594.46997070]
[160.03176880 609.46997070]
[160.03176880 624.46997070]
[160.03176880 639.46997070]
[160.03176880 654.46997070]
[160.03176880 669.46997070]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[10 137]
[11 136]
[12 135]
[23 124]
[24 123]
[25 122]
[26 121]
[27 120]
[28 119]
[29 118]
[30 117]
[31 116]
[32 115]
[35 110]
[36 109]
[37 108]
[38 107]
[50 72]
[51 71]
[52 70]
[53 69]
[54 68]
[55 67]
[76 99]
[77 98]
[78 97]
[81 90]
[82 89]
[83 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
