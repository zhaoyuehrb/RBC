%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 22:58:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAGAGCUGCUUAAUGUGCUUUAAAAGAGAGGAGAUUCUAUGUGCUUUUAUCAGAAAGUUUGAGUUCCCUGCCCCUCUGCCUUC\
) } def
/len { sequence length } bind def

/coor [
[116.42024994 256.19964600]
[114.77967834 241.28962708]
[105.69680023 229.48493958]
[111.87834167 214.92132568]
[110.23777771 200.01130676]
[108.59720612 185.10128784]
[106.95663452 170.19128418]
[95.21138000 161.10366821]
[93.33521271 146.00616455]
[102.94676971 133.74827576]
[101.30619812 118.83826447]
[89.10685730 110.11038208]
[74.46571350 113.37183380]
[59.82457733 116.63328552]
[45.18344116 119.89473724]
[36.91791534 133.36532593]
[21.52892303 136.96455383]
[8.14647961 128.55706787]
[4.71014977 113.13088989]
[13.25864887 99.83808136]
[28.72030258 96.56504059]
[41.92198563 105.25360107]
[56.56312561 101.99214935]
[71.20426178 98.73069763]
[85.84539795 95.46924591]
[72.42124939 88.77655029]
[68.30824280 74.35145569]
[76.18417358 61.58549881]
[90.92137909 58.79000092]
[102.92513275 67.78498840]
[104.38047791 82.71381378]
[112.65699768 70.20384979]
[120.93350983 57.69388199]
[122.09510803 41.91537476]
[135.57049561 35.57004929]
[143.84701538 23.06008339]
[152.12353516 10.55011559]
[160.40003967 -1.95985198]
[168.67655945 -14.46981907]
[163.84642029 -24.44200134]
[163.72506714 -35.43963242]
[168.26573181 -45.36668777]
[176.53974915 -52.36093521]
[186.92562866 -55.14320374]
[197.42649841 -53.25092316]
[207.02159119 -64.78063202]
[216.61668396 -76.31033325]
[226.21177673 -87.84004211]
[235.80688477 -99.36975098]
[245.40197754 -110.89945984]
[247.64932251 -127.14388275]
[262.94091797 -133.06834412]
[275.54608154 -122.57824707]
[272.49768066 -106.46491241]
[256.93167114 -101.30435944]
[247.33657837 -89.77465820]
[237.74148560 -78.24494934]
[228.14639282 -66.71524048]
[218.55130005 -55.18553162]
[208.95620728 -43.65582657]
[212.37332153 -24.69115067]
[200.86637878 -8.86730862]
[181.18652344 -6.19330311]
[172.91001892 6.31666422]
[164.63349915 18.82663155]
[156.35697937 31.33659935]
[148.08045959 43.84656525]
[147.51086426 58.73027420]
[133.44348145 65.97039795]
[125.16696167 78.48036194]
[116.89044189 90.99033356]
[116.21621704 117.19769287]
[117.85678101 132.10771179]
[129.90362549 141.98249817]
[131.35499573 157.12673950]
[121.86665344 168.55070496]
[123.50721741 183.46072388]
[125.14778900 198.37074280]
[126.78836060 213.28074646]
[135.98858643 226.15190125]
[129.68969727 239.64906311]
[131.33026123 254.55906677]
[141.46485901 267.45178223]
[135.11639404 282.57226562]
[118.81562042 284.36587524]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 82]
[2 81]
[4 79]
[5 78]
[6 77]
[7 76]
[10 73]
[11 72]
[12 25]
[13 24]
[14 23]
[15 22]
[31 71]
[32 70]
[33 69]
[35 67]
[36 66]
[37 65]
[38 64]
[39 63]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[50 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
