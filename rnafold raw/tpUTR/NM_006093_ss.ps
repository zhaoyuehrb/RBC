%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:36:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAGCGGCACGGAGACCCUGCCAGCAGCUCCCUCCCGUCCCCCAACCUCUCCUGCUCAUAAAUCCAGACUUCCCACAGCA\
) } def
/len { sequence length } bind def

/coor [
[112.82260132 116.37642670]
[106.01767731 119.90964508]
[98.39495850 120.73717499]
[90.99036407 118.74654388]
[84.81016541 114.20828247]
[70.89762878 119.81554413]
[57.09505081 125.68826294]
[43.40749741 131.82429504]
[29.71994209 137.96032715]
[16.03238678 144.09634399]
[9.27399635 150.62593079]
[1.70103562 150.19404602]
[-12.21150112 155.80131531]
[-21.88722229 169.04187012]
[-38.16049957 167.01394653]
[-44.29078293 151.80369568]
[-33.97175980 139.05812073]
[-17.81875801 141.88877869]
[-3.90622044 136.28150940]
[9.89635754 130.40879822]
[23.58391190 124.27276611]
[37.27146530 118.13673401]
[50.95901871 112.00070953]
[55.89918137 106.24475098]
[65.29037476 105.90300751]
[79.20291138 100.29574585]
[90.41564178 81.54067993]
[112.20685577 83.15959930]
[124.79734039 75.00608826]
[137.38781738 66.85256958]
[134.05390930 52.08401108]
[135.97036743 37.09403992]
[142.88671875 23.68940544]
[153.95108032 13.47910881]
[167.81494141 7.68128490]
[182.79759216 6.97788572]
[197.08979797 11.43452835]
[208.97235107 20.49489784]
[221.56283569 12.34138393]
[234.15332031 4.18787098]
[228.87013245 -9.91539478]
[226.74270630 -24.82472420]
[227.87054443 -39.84278488]
[232.20086670 -54.26714706]
[239.53117371 -67.42316437]
[249.51858521 -78.69550323]
[261.69598389 -87.55693817]
[275.49380493 -93.59300232]
[290.26672363 -96.52136993]
[305.32373047 -96.20509338]
[319.96063232 -92.65895081]
[333.49282837 -86.04880524]
[345.28738403 -76.68383026]
[354.79263306 -65.00203705]
[361.56399536 -51.54980469]
[365.28479004 -36.95632172]
[365.78097534 -21.90415192]
[363.02935791 -7.09730816]
[357.15859985 6.77166319]
[348.44332886 19.05408669]
[337.29113770 29.17548943]
[324.22366333 36.66247559]
[309.85208130 41.16486740]
[294.84857178 42.47208023]
[279.91488647 40.52296829]
[265.74948120 35.40869904]
[253.01492310 27.36847496]
[242.30682373 16.77835274]
[229.71633911 24.93186569]
[217.12586975 33.08538055]
[220.53269958 47.63456345]
[218.75291443 62.49933243]
[211.98213196 75.88331604]
[201.02032471 86.16242981]
[187.17730713 92.08198547]
[172.11625671 92.90976715]
[157.65390015 88.52661133]
[145.54133606 79.44305420]
[132.95085144 87.59656525]
[120.36036682 95.75007629]
[120.51676178 103.41599274]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 26]
[6 25]
[7 23]
[8 22]
[9 21]
[10 20]
[12 19]
[13 18]
[28 80]
[29 79]
[30 78]
[38 70]
[39 69]
[40 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
