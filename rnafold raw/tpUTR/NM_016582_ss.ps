%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:49:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGGCCCUAUUCCAGCCCCCUUGCUUCACUCUACCGGACAGACGGCAGCAGUCCCAGCUCUGGUUUCCUUCUCGGUUUAUUCUGUUAGAAUGAAAUGGUUCCCAUAAAUAAGGGGCAUGAGCCCUUCCUCACGAC\
) } def
/len { sequence length } bind def

/coor [
[88.11952972 332.86199951]
[92.86547089 318.46572876]
[102.25143433 306.56283569]
[115.14402771 298.59057617]
[112.07022858 283.90887451]
[108.99642944 269.22720337]
[98.36536407 279.80929565]
[83.43859100 278.32894897]
[75.09308624 265.86489868]
[79.41014099 251.49957275]
[93.24395752 245.70080566]
[106.51362610 252.69367981]
[105.13967896 237.75672913]
[93.55863953 228.46075439]
[91.95247650 213.33215332]
[101.78147125 201.24792480]
[100.40751648 186.31097412]
[99.03356934 171.37403870]
[97.65961456 156.43708801]
[96.28566742 141.50015259]
[88.23764801 140.27787781]
[80.52550507 137.49905396]
[73.44940186 133.24830627]
[67.28928375 127.66792297]
[62.29376602 120.95325470]
[58.67018127 113.34587860]
[56.57601547 105.12490082]
[56.11220169 96.59679413]
[57.31845474 88.08391571]
[60.17094421 79.91236115]
[64.58235931 72.39944458]
[70.40444946 65.84140778]
[77.43291473 60.50175476]
[85.41451263 56.60068130]
[76.99179840 44.18867874]
[68.56908417 31.77667046]
[60.14637375 19.36466599]
[51.58190155 7.05004501]
[42.87680435 -5.16557026]
[27.54356384 -7.90955782]
[18.88937187 -20.42193604]
[21.59983826 -35.02293015]
[12.89474010 -47.23854446]
[-1.41510963 -53.98678589]
[-2.50019431 -68.84181213]
[-16.81004333 -75.59005737]
[-17.89512825 -90.44508362]
[-26.60022736 -102.66069794]
[-35.30532455 -114.87631226]
[-42.90304565 -120.10752869]
[-44.06618500 -127.47332001]
[-52.48889923 -139.88533020]
[-60.91161346 -152.29733276]
[-75.89895630 -158.95402527]
[-77.35845184 -175.28810120]
[-63.78869629 -184.49645996]
[-49.14909363 -177.10632324]
[-48.49960709 -160.72004700]
[-40.07689285 -148.30804443]
[-31.65417862 -135.89604187]
[-23.08971024 -123.58141327]
[-14.38461113 -111.36579895]
[-5.67951298 -99.15018463]
[8.00768948 -93.27568054]
[9.71542072 -77.54691315]
[23.40262413 -71.67241669]
[25.11035538 -55.94364166]
[33.81545258 -43.72802734]
[48.50144577 -41.52410889]
[57.50366974 -29.25974464]
[55.09241867 -13.87066841]
[63.79751968 -1.65505338]
[70.29814148 1.99867201]
[72.55838013 10.94195080]
[80.98109436 23.35395622]
[89.40380859 35.76596451]
[97.82652283 48.17796707]
[112.74672699 49.72308731]
[123.53417206 39.30046463]
[134.32160950 28.87784004]
[145.10905457 18.45521545]
[155.89649963 8.03259087]
[166.68392944 -2.39003396]
[177.47137451 -12.81265831]
[184.66104126 -28.16664886]
[201.40528870 -25.50836563]
[203.48616028 -8.68260288]
[187.89399719 -2.02521658]
[177.10656738 8.39740753]
[166.31912231 18.82003212]
[155.53167725 29.24265671]
[144.74423218 39.66527939]
[133.95678711 50.08790588]
[123.16934967 60.51052856]
[134.78990173 73.51284790]
[140.25222778 89.23819733]
[155.20394897 88.03559113]
[170.15565491 86.83298492]
[185.10737610 85.63038635]
[200.41076660 78.33363342]
[211.65875244 91.01901245]
[202.58287048 105.33909607]
[186.30996704 100.58209991]
[171.35826111 101.78469849]
[156.40653992 102.98730469]
[141.45483398 104.18991089]
[140.13667297 111.18509674]
[137.64703369 117.85382843]
[134.05860901 124.00145721]
[129.47610474 129.44856262]
[124.03328705 134.03614807]
[117.88900757 137.63032532]
[111.22261047 140.12619019]
[112.59655762 155.06314087]
[113.97051239 170.00007629]
[115.34445953 184.93702698]
[116.71841431 199.87396240]
[128.58692932 209.96238708]
[129.76753235 225.13014221]
[120.07662201 236.38278198]
[121.45056915 251.31971741]
[123.67810822 266.15341187]
[126.75190735 280.83508301]
[129.82571411 295.51675415]
[144.83354187 297.64770508]
[158.20599365 304.78585815]
[168.32829285 316.06924438]
[173.97811890 330.13534546]
[174.47323608 345.28561401]
[169.75382996 359.69058228]
[160.38981628 371.61077881]
[147.51193237 379.60678101]
[132.67526245 382.71301270]
[117.67138672 380.55444336]
[104.31210327 373.39166260]
[94.21060944 362.08963013]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 124]
[5 123]
[6 122]
[12 121]
[13 120]
[16 117]
[17 116]
[18 115]
[19 114]
[20 113]
[34 77]
[35 76]
[36 75]
[37 74]
[38 72]
[39 71]
[42 68]
[43 67]
[45 65]
[47 63]
[48 62]
[49 61]
[51 60]
[52 59]
[53 58]
[78 94]
[79 93]
[80 92]
[81 91]
[82 90]
[83 89]
[84 88]
[96 106]
[97 105]
[98 104]
[99 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
