%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 08:19:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGCUCCUCUCGCCACCACCUUCAGGCUCCUUCUGUCAUGGGACCCUUCACCUCCAGAUGCCAUCCUCUGGCACACUACAAGUGGUCCUUCCAACUUAGUGCAUCCCUUUAGAAAGUAAGCAAUCAGAAAACAAGCCUCGGCUGUGUGAUCA\
) } def
/len { sequence length } bind def

/coor [
[60.92086411 525.81109619]
[48.75788116 534.92871094]
[34.03036499 538.69281006]
[18.98415375 536.52947998]
[5.91368484 528.76861572]
[-3.18789053 516.59368896]
[-6.93264771 501.86120605]
[-4.74953794 486.81787109]
[3.02852964 473.75759888]
[15.21545696 464.67205811]
[29.95282555 460.94668579]
[32.08754730 446.09936523]
[34.22227097 431.25204468]
[36.35699463 416.40472412]
[34.18282700 409.29354858]
[38.68967819 401.27752686]
[41.12681961 386.47683716]
[32.26424789 374.56085205]
[34.52501297 359.51614380]
[47.08367157 350.30105591]
[49.52081680 335.50036621]
[42.80237579 327.70401001]
[41.48902893 317.27426147]
[46.26052094 307.66082764]
[55.74295425 302.17935181]
[58.78176880 287.49038696]
[61.82058334 272.80142212]
[64.85939789 258.11245728]
[67.89820862 243.42349243]
[56.93552399 228.81748962]
[60.12471390 210.51306152]
[75.91188812 200.12574768]
[78.34902954 185.32505798]
[80.78617096 170.52436829]
[83.22331238 155.72367859]
[85.66045380 140.92298889]
[69.83435822 131.15040588]
[59.55859375 115.64630127]
[56.72385406 97.26334381]
[61.85171509 79.38392639]
[73.99868011 65.29776001]
[67.21610260 51.91879654]
[60.43352127 38.53983307]
[53.65094376 25.16087151]
[46.86836624 11.78190994]
[40.08578491 -1.59705198]
[33.16709900 -14.90613747]
[26.11301994 -28.14396095]
[19.05894089 -41.38178635]
[1.21446502 -40.12868118]
[-15.34850979 -46.74565506]
[-27.34648132 -59.87165070]
[-32.42240906 -76.86017609]
[-29.60867882 -94.31283569]
[-19.51116753 -108.75914764]
[-27.36168861 -121.54074860]
[-35.21220779 -134.32235718]
[-43.06272888 -147.10395813]
[-50.91324615 -159.88555908]
[-66.39356995 -160.95292664]
[-78.26838684 -170.94134521]
[-81.97158051 -186.01004028]
[-76.07921600 -200.36482239]
[-62.85700607 -208.48596191]
[-47.38917542 -207.25071716]
[-35.62341690 -197.13407898]
[-32.08390045 -182.02609253]
[-38.13164520 -167.73606873]
[-30.28112602 -154.95446777]
[-22.43060684 -142.17286682]
[-14.58008671 -129.39126587]
[-6.72956657 -116.60967255]
[5.33273411 -119.16600800]
[17.61958694 -117.87253571]
[28.92998314 -112.84045410]
[38.15365601 -104.54714966]
[44.38008118 -93.79092407]
[46.98833084 -81.61421204]
[45.70898438 -69.20250702]
[40.65185547 -57.76897430]
[32.29676437 -48.43586349]
[39.35084152 -35.19804001]
[46.40492249 -21.96021652]
[52.36191177 -17.50936508]
[53.46474838 -8.37963104]
[60.24732590 4.99933147]
[67.02990723 18.37829399]
[73.81248474 31.75725555]
[80.59506226 45.13621902]
[87.37763977 58.51517868]
[97.36041260 56.71782303]
[107.48762512 57.28876495]
[117.20512390 60.19675827]
[125.98120117 65.28269196]
[133.33564758 72.26827240]
[138.86605835 80.77127075]
[153.25845337 76.54528046]
[167.65084839 72.31929016]
[182.04324341 68.09329987]
[193.10455322 56.78145981]
[207.49613953 60.61965942]
[209.08624268 45.50212097]
[216.34494019 32.14622879]
[228.16531372 22.58866310]
[242.74485779 18.28688240]
[257.86029053 19.89687729]
[271.20663452 27.17313194]
[280.74862671 39.00607681]
[285.03121948 53.59126663]
[283.40136719 68.70456696]
[276.10754395 82.04131317]
[264.26205444 91.56774902]
[249.67124939 95.83116150]
[234.56010437 94.18140411]
[221.23297119 86.87005615]
[211.72212219 75.01205444]
[201.69024658 86.02162933]
[186.26922607 82.48569489]
[171.87683105 86.71168518]
[157.48443604 90.93767548]
[143.09204102 95.16366577]
[142.29249573 109.57385254]
[136.80798340 122.92349243]
[127.24604034 133.73377991]
[114.66590118 140.80717468]
[100.46114349 143.36013794]
[98.02399445 158.16082764]
[95.58685303 172.96151733]
[93.14971161 187.76219177]
[90.71257019 202.56288147]
[99.43672943 210.74432373]
[103.06399536 222.01498413]
[100.79580688 233.51310730]
[93.31524658 242.37814331]
[82.58717346 246.46231079]
[79.54835510 261.15127563]
[76.50954437 275.84024048]
[73.47073364 290.52920532]
[70.43191528 305.21817017]
[77.66496277 323.99182129]
[64.32150269 337.93750000]
[61.88436127 352.73818970]
[70.82528687 365.49349976]
[68.14283752 380.46878052]
[55.92750931 388.91397095]
[53.49036407 403.71466064]
[51.20431519 418.53942871]
[49.06959152 433.38674927]
[46.93486786 448.23406982]
[44.80014801 463.08139038]
[57.89098740 470.80786133]
[67.02456665 482.95886230]
[70.80806732 497.68139648]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 150]
[12 149]
[13 148]
[14 147]
[16 146]
[17 145]
[20 142]
[21 141]
[25 139]
[26 138]
[27 137]
[28 136]
[29 135]
[32 130]
[33 129]
[34 128]
[35 127]
[36 126]
[41 90]
[42 89]
[43 88]
[44 87]
[45 86]
[46 85]
[47 83]
[48 82]
[49 81]
[55 72]
[56 71]
[57 70]
[58 69]
[59 68]
[96 121]
[97 120]
[98 119]
[99 118]
[101 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
