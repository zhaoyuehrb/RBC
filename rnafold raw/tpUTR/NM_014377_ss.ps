%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 01:49:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAUCUUUGUUGUGUGUGCAUUUUUAUAAUAAAACUGAAAAUACUGUAAACAUUUUCAUUCUUAAAAUUAUACUCAUGGUAAUAAUUUGAAAGUA\
) } def
/len { sequence length } bind def

/coor [
[103.87602234 137.99406433]
[94.88292694 137.84690857]
[86.17363739 135.60063171]
[78.23120880 131.37980652]
[71.49615479 125.41856384]
[66.34201813 118.04751587]
[51.98791122 122.40178680]
[37.63380432 126.75605774]
[23.27970123 131.11032104]
[8.92559624 135.46459961]
[-5.42850876 139.81886292]
[-19.78261375 144.17314148]
[-34.13671875 148.52740479]
[-48.49082565 152.88168335]
[-51.90027618 167.85736084]
[-62.35255432 179.11105347]
[-77.03604889 183.61555481]
[-92.00097656 180.15917969]
[-103.22184753 169.67167664]
[-107.68029785 154.97413635]
[-104.17703247 140.02011108]
[-93.65440369 128.83216858]
[-78.94296265 124.41980743]
[-63.99999619 127.96993256]
[-52.84509277 138.52757263]
[-38.49098969 134.17330933]
[-24.13688469 129.81903076]
[-9.78277874 125.46475983]
[4.57132578 121.11048889]
[18.92543030 116.75622559]
[33.27953720 112.40195465]
[47.63364029 108.04768372]
[61.98774719 103.69341278]
[64.41151428 86.14243317]
[74.49457550 71.57385254]
[90.06687164 63.12310028]
[89.08582306 48.15521622]
[88.10477448 33.18733215]
[87.12372589 18.21945000]
[86.14267731 3.25156641]
[85.16163635 -11.71631718]
[84.18058777 -26.68420219]
[70.63502502 -34.06806183]
[63.25185013 -47.61399078]
[64.38700104 -62.99953842]
[73.67825317 -75.31522369]
[88.16080475 -80.63116455]
[103.21333313 -77.25105286]
[114.03261566 -66.25347900]
[117.16626740 -51.14773178]
[111.61435699 -36.75399017]
[99.14846802 -27.66524887]
[100.12951660 -12.69736481]
[101.11056519 2.27051950]
[102.09161377 17.23840332]
[103.07265472 32.20628738]
[104.05370331 47.17417145]
[105.03475189 62.14205551]
[123.26264954 69.71102905]
[135.27772522 85.36936951]
[137.87106323 104.93515778]
[152.07501221 109.75675201]
[166.27896118 114.57834625]
[184.14407349 110.50662994]
[195.30882263 123.93723297]
[209.66293335 128.29150391]
[224.01702881 132.64578247]
[238.37113953 137.00004578]
[252.72523499 141.35430908]
[267.07934570 145.70858765]
[281.43344116 150.06285095]
[295.85687256 154.18168640]
[310.34576416 158.06396484]
[324.83465576 161.94625854]
[341.69897461 160.20541382]
[348.04031372 175.92877197]
[334.68688965 186.37492371]
[320.95236206 176.43515015]
[306.46347046 172.55285645]
[291.97457886 168.67057800]
[284.55535889 170.00619507]
[277.07919312 164.41696167]
[262.72506714 160.06269836]
[248.37097168 155.70841980]
[234.01686096 151.35415649]
[219.66276550 146.99987793]
[205.30865479 142.64561462]
[190.95454407 138.29133606]
[180.01780701 143.73881531]
[167.93765259 140.08108521]
[161.45736694 128.78230286]
[147.25341797 123.96070099]
[133.04946899 119.13911438]
[127.65691376 126.33757782]
[120.73041534 132.07525635]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 33]
[7 32]
[8 31]
[9 30]
[10 29]
[11 28]
[12 27]
[13 26]
[14 25]
[36 58]
[37 57]
[38 56]
[39 55]
[40 54]
[41 53]
[42 52]
[61 93]
[62 92]
[63 91]
[65 88]
[66 87]
[67 86]
[68 85]
[69 84]
[70 83]
[71 82]
[72 80]
[73 79]
[74 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
