%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:43:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGAGAUUCUGUAUAGUUGCUGGUUCCUCUUCACCUUCAGCUCUCAGCAAUCUGUCUUUUCCUAUCAACCUUCUAUUCAAACUGGUCUCCCAAAGCUCA\
) } def
/len { sequence length } bind def

/coor [
[174.41833496 180.22583008]
[167.38148499 161.66477966]
[164.20997620 142.06471252]
[165.03463745 122.22204590]
[150.39588928 118.94989777]
[135.75714111 115.67774963]
[121.11839294 112.40560150]
[106.47963715 109.13345337]
[91.79129791 106.09164429]
[77.05698395 103.28092194]
[62.32267761 100.47020721]
[52.03288651 109.32740784]
[38.70906448 110.56435394]
[27.30326462 103.94899750]
[21.92310905 92.12584686]
[7.28435755 88.85369873]
[-7.35439396 85.58155060]
[-21.99314499 82.30940247]
[-36.63189697 79.03725433]
[-49.87347412 87.24081421]
[-64.67263794 83.71385956]
[-72.41187286 71.03948212]
[-87.05062866 67.76733398]
[-101.68937683 64.49518585]
[-113.23941040 74.85743713]
[-128.67779541 76.41824341]
[-142.06814575 68.57744598]
[-148.26159668 54.34997940]
[-144.87664795 39.20660400]
[-133.21488953 28.97025681]
[-117.76048279 27.57702065]
[-104.45597839 35.56262207]
[-98.41722870 49.85643387]
[-83.77848053 53.12858200]
[-69.13972473 56.40073013]
[-56.74056625 48.22782135]
[-41.84817886 51.33771133]
[-33.35974884 64.39850616]
[-18.72099686 67.67065430]
[-4.08224535 70.94280243]
[10.55650616 74.21495056]
[25.19525719 77.48709869]
[38.89903259 67.88012695]
[55.65698624 71.13510132]
[65.13339996 85.73589325]
[79.86770630 88.54661560]
[94.60201263 91.35733795]
[102.63834381 89.63637543]
[109.75178528 94.49469757]
[124.39054108 97.76685333]
[139.02929688 101.03900146]
[153.66804504 104.31114960]
[168.30679321 107.58329773]
[172.37423706 96.65042877]
[177.70495605 86.27600098]
[184.22399902 76.60535431]
[191.83969116 67.77394867]
[200.44509888 59.90542603]
[209.91934204 53.10992813]
[220.12944031 47.48251724]
[230.93209839 43.10186005]
[242.17573547 40.02914429]
[253.70265198 38.30718613]
[265.35116577 37.95986938]
[276.95794678 38.99179840]
[288.36029053 41.38823700]
[299.39831543 45.11532211]
[309.91741943 50.12054443]
[319.77017212 56.33348083]
[328.81854248 63.66678619]
[336.93588257 72.01744080]
[344.00854492 81.26815796]
[349.93756104 91.28907013]
[354.64004517 101.93952942]
[358.05029297 113.07010651]
[360.12072754 124.52464294]
[360.82263184 136.14248657]
[360.14636230 147.76071167]
[358.10171509 159.21644592]
[354.71762085 170.34909058]
[350.04174805 181.00265503]
[344.13995361 191.02783203]
[337.09518433 200.28421021]
[347.70178223 210.89080811]
[358.30838013 221.49740601]
[374.28015137 225.21685791]
[378.78533936 240.98503113]
[367.18939209 252.58097839]
[351.42123413 248.07579041]
[347.70178223 232.10401917]
[337.09518433 221.49740601]
[326.48858643 210.89080811]
[310.24465942 222.22444153]
[292.05313110 230.07130432]
[272.65261841 234.11070251]
[252.83134460 234.17652893]
[233.39501953 230.26419067]
[215.13406372 222.53082275]
[198.79148865 211.28900146]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 53]
[5 52]
[6 51]
[7 50]
[8 49]
[9 47]
[10 46]
[11 45]
[15 42]
[16 41]
[17 40]
[18 39]
[19 38]
[22 35]
[23 34]
[24 33]
[83 92]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
