%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 08:53:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUGUUCGCACCAGGAACGCAGGUGCUGGGCUGUCGGGGAGGCCUCAGGCCACCUCCAGGAACAGAACACAGUUUUAAGUUUGAUUUUUUUUAUUUCAAAAUGCUUUGCAAUUAAAUGAAUUACUGUUCAGAA\
) } def
/len { sequence length } bind def

/coor [
[92.59542847 132.86573792]
[96.01148987 118.25954437]
[88.61323547 131.30813599]
[81.21498108 144.35673523]
[73.81672668 157.40533447]
[66.41847229 170.45393372]
[59.02022171 183.50251770]
[64.65242767 198.09060669]
[59.54101944 212.86923218]
[46.09945297 220.86036682]
[30.67442131 218.29084778]
[20.54915237 206.37393188]
[20.50448990 190.73641968]
[30.56152153 178.76185608]
[45.97162628 176.10427856]
[53.36987686 163.05567932]
[60.76813126 150.00708008]
[68.16638184 136.95848083]
[75.56463623 123.90988922]
[82.96289062 110.86128998]
[84.56162262 106.31787109]
[87.12976074 102.73425293]
[90.37055206 100.29119873]
[77.68306732 92.28945923]
[61.88298416 91.47222137]
[55.24530411 78.13841248]
[42.55782318 70.13667297]
[29.87034416 62.13493729]
[14.64189911 65.41094208]
[1.88897681 57.11530304]
[-1.14034545 42.57711792]
[-13.82782650 34.57537842]
[-26.59066772 39.05121231]
[-39.40585327 35.38336563]
[-47.62363815 25.13713455]
[-48.39833450 12.22092915]
[-60.89474869 3.92396212]
[-73.39115906 -4.37300539]
[-85.88757324 -12.66997242]
[-101.66416168 -13.85737801]
[-107.98743439 -27.34312820]
[-120.48384857 -35.64009476]
[-132.98025513 -43.93706131]
[-145.47666931 -52.23403168]
[-162.01658630 -55.95797729]
[-163.01686096 -72.88239288]
[-147.03077698 -78.52873230]
[-137.17970276 -64.73044586]
[-124.68328857 -56.43347549]
[-112.18687439 -48.13650894]
[-99.69046783 -39.83954239]
[-84.80770874 -39.24559021]
[-77.59060669 -25.16638565]
[-65.09419250 -16.86941719]
[-52.59777832 -8.57245064]
[-40.10136795 -0.27548343]
[-23.82142639 -4.32299805]
[-9.34236813 4.79728746]
[-5.82608747 21.88789749]
[6.86139345 29.88963699]
[21.28612328 26.35937309]
[34.26702118 34.29353714]
[37.87208176 49.44745636]
[50.55956268 57.44919586]
[63.24704361 65.45093536]
[78.13963318 65.69583130]
[85.68480682 79.60198212]
[98.37229156 87.60372162]
[113.00177765 90.91703796]
[127.89883423 89.16271210]
[142.79589844 87.40837860]
[157.69294739 85.65404510]
[172.59001160 83.89971924]
[182.37255859 71.77785492]
[197.50527954 70.21092987]
[209.00134277 79.61179352]
[218.78387451 67.48992920]
[233.91661072 65.92300415]
[245.41265869 75.32386780]
[260.30972290 73.56953430]
[275.20678711 71.81520844]
[290.10385132 70.06087494]
[305.00088501 68.30654907]
[319.89794922 66.55221558]
[334.79501343 64.79788971]
[349.69207764 63.04356003]
[354.83929443 47.65501022]
[366.12545776 36.07722092]
[381.26870728 30.57875252]
[397.23858643 32.20629883]
[410.86245728 40.58583832]
[419.45590210 54.00703049]
[434.30773926 51.90395737]
[449.15957642 49.80088425]
[464.01141357 47.69781113]
[476.58297729 37.16749954]
[491.89343262 43.04306412]
[494.19265747 59.28023148]
[481.11544800 69.17559052]
[466.11447144 62.54964828]
[451.26263428 64.65272522]
[436.41079712 66.75579834]
[421.55895996 68.85887146]
[417.98666382 82.31455231]
[409.51516724 93.41690063]
[397.40518188 100.45899963]
[383.47982788 102.34224701]
[369.85034180 98.74761963]
[358.59585571 90.18913269]
[351.44641113 77.94061279]
[336.54934692 79.69494629]
[321.65228271 81.44927216]
[306.75521851 83.20360565]
[291.85815430 84.95793915]
[276.96112061 86.71226501]
[262.06405640 88.46659851]
[247.16699219 90.22092438]
[238.16931152 102.03520203]
[223.08656311 104.02655792]
[210.75566101 94.50885010]
[201.75798035 106.32312775]
[186.67523193 108.31448364]
[174.34432983 98.79677582]
[159.44728088 100.55110931]
[144.55021667 102.30543518]
[129.65316772 104.05976868]
[114.75610352 105.81409454]
[129.54289246 108.33416748]
[140.35873413 118.72731781]
[143.46597290 133.40196228]
[137.79083252 147.28694153]
[125.29447174 155.58399963]
[110.29530334 155.42588806]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 20]
[3 19]
[4 18]
[5 17]
[6 16]
[7 15]
[23 68]
[24 67]
[26 65]
[27 64]
[28 63]
[31 60]
[32 59]
[36 56]
[37 55]
[38 54]
[39 53]
[41 51]
[42 50]
[43 49]
[44 48]
[69 127]
[70 126]
[71 125]
[72 124]
[73 123]
[76 120]
[79 117]
[80 116]
[81 115]
[82 114]
[83 113]
[84 112]
[85 111]
[86 110]
[92 103]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
