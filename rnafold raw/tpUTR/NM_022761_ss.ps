%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 23:15:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGGGCAUCACUCAGGAUGUGUAUAAGAUCUUAAUAUUGACUAGUUUCACAUCCAGGUUUCUAAGAAAUGAUAAGAUACUUCACUUUUCCAGAGUGAAAUGUAGGAGGGAGCACAUUCUAAGUACAGCUAAAAAUUUAGCUCACUGUAACACAGUUUCACUCUCUGAAUAAAUAAAGCAAAAAACACAGUAA\
) } def
/len { sequence length } bind def

/coor [
[169.95079041 172.61299133]
[178.54429626 160.31861877]
[189.06767273 149.62944031]
[201.22621155 140.84480286]
[214.67942810 134.21070862]
[229.05134583 129.91278076]
[214.33367920 127.01621246]
[199.61601257 124.11964417]
[184.85336304 121.46177673]
[170.04960632 119.04331207]
[155.24586487 116.62484741]
[140.44210815 114.20638275]
[125.63835907 111.78791809]
[110.83460236 109.36945343]
[97.69053650 114.13654327]
[86.74693298 105.43429565]
[71.94317627 103.01583099]
[57.13943100 100.59736633]
[38.64039230 108.58316803]
[24.20104218 95.73506927]
[9.32674122 93.79724121]
[-5.54756021 91.85942078]
[-10.39241791 93.87741089]
[-15.05805111 93.83029175]
[-18.78491592 92.13472748]
[-21.09045029 89.44924927]
[-35.85309601 86.79138184]
[-50.61574554 84.13351440]
[-65.39942932 81.59526825]
[-80.20317841 79.17680359]
[-95.00692749 76.75833893]
[-109.81067657 74.33987427]
[-124.61443329 71.92141724]
[-139.41818237 69.50295258]
[-154.28529358 74.91400909]
[-165.59855652 65.22590637]
[-180.40231323 62.80744171]
[-195.20605469 60.38897705]
[-210.00981140 57.97051620]
[-221.04750061 68.71646881]
[-236.12013245 70.87731171]
[-249.41770935 63.83184814]
[-255.93873596 50.46718597]
[-270.74249268 48.04872131]
[-285.54623413 45.63025665]
[-296.58392334 56.37620926]
[-311.65655518 58.53705597]
[-324.95413208 51.49158859]
[-331.47515869 38.12692642]
[-342.40539551 49.14099503]
[-357.72738647 51.59369659]
[-371.54956055 44.54191971]
[-378.55694580 30.69721603]
[-376.05511475 15.38315487]
[-365.00604248 4.48830700]
[-349.65835571 2.20196271]
[-335.91348267 9.40326881]
[-329.05670166 23.32317543]
[-318.62149048 12.72862339]
[-303.77310181 10.28131390]
[-290.17178345 17.12657547]
[-283.12777710 30.82650566]
[-268.32400513 33.24496841]
[-253.52026367 35.66343307]
[-243.08506775 25.06888199]
[-228.23667908 22.62157249]
[-214.63536072 29.46683502]
[-207.59135437 43.16676331]
[-192.78759766 45.58522797]
[-177.98384094 48.00369263]
[-163.18009949 50.42215729]
[-149.37184143 44.83811569]
[-136.99971008 54.69919968]
[-122.19596863 57.11766434]
[-107.39221954 59.53612900]
[-92.58846283 61.95458984]
[-77.78471375 64.37305450]
[-62.98096466 66.79151917]
[-55.86259079 64.76433563]
[-47.95787811 69.37087250]
[-33.19523239 72.02873230]
[-18.43258476 74.68659973]
[-3.60973787 76.98512268]
[11.26456356 78.92294312]
[26.13886452 80.86076355]
[33.65825272 73.91613770]
[43.97664261 72.22892761]
[53.71752930 76.59635162]
[59.55789185 85.79361725]
[74.36164093 88.21208191]
[89.16539764 90.63054657]
[102.30946350 85.86345673]
[113.25306702 94.56570435]
[128.05682373 96.98416901]
[142.86056519 99.40263367]
[157.66432190 101.82109833]
[172.46807861 104.23956299]
[187.27182007 106.65802765]
[193.60232544 104.67276001]
[199.14804077 105.99420166]
[202.51257324 109.40196991]
[217.23025513 112.29853821]
[231.94792175 115.19510651]
[239.31770325 112.37689972]
[246.24601746 114.03486633]
[260.30410767 108.80325317]
[274.36221313 103.57163239]
[288.42031860 98.34001923]
[302.43560791 92.99475098]
[316.40713501 87.53617859]
[330.37869263 82.07759857]
[344.35021973 76.61902618]
[358.32177734 71.16045380]
[357.48657227 56.06873703]
[361.35171509 41.47753525]
[369.52651978 28.81259155]
[381.19982910 19.30739403]
[395.22052002 13.88305855]
[410.21090698 13.05907345]
[424.70227051 16.90356827]
[437.27868652 25.02787590]
[446.71527100 36.62578964]
[460.68682861 31.16721344]
[474.65835571 25.70863914]
[480.54577637 14.22204971]
[492.30630493 9.96744251]
[503.44198608 14.71500778]
[517.50006104 9.48339176]
[531.55816650 4.25177526]
[545.61627197 -0.97984111]
[559.67437744 -6.21145725]
[573.73248291 -11.44307327]
[583.76031494 -24.41901970]
[599.97326660 -21.95481873]
[605.69281006 -6.58542681]
[595.03527832 5.87844086]
[578.96411133 2.61502695]
[564.90600586 7.84664345]
[550.84790039 13.07825947]
[536.78979492 18.30987549]
[522.73168945 23.54149246]
[508.67358398 28.77310753]
[498.24438477 42.87933731]
[480.11694336 39.68017960]
[466.14538574 45.13875580]
[452.17385864 50.59732819]
[453.09887695 65.52064514]
[449.36093140 80.01884460]
[441.31387329 92.66893768]
[429.73513794 102.22530365]
[415.75070190 107.74234772]
[400.72543335 108.66807556]
[386.13009644 104.89926147]
[373.39715576 96.79280853]
[363.78033447 85.13199615]
[349.80880737 90.59056854]
[335.83724976 96.04914093]
[321.86572266 101.50771332]
[307.89416504 106.96629333]
[302.80075073 112.33636475]
[293.65194702 112.39811707]
[279.59384155 117.62973785]
[265.53573608 122.86135101]
[251.47763062 128.09297180]
[266.35369873 130.01728821]
[280.70056152 134.39538574]
[294.11642456 141.10464478]
[306.22561646 149.95716858]
[316.68902588 160.70506287]
[325.21362305 173.04731750]
[331.56066895 186.63830566]
[335.55242920 201.09741211]
[337.07711792 216.01971436]
[336.09204102 230.98733521]
[332.62475586 245.58110046]
[326.77239990 259.39233398]
[318.69882202 272.03421021]
[308.63015747 283.15277100]
[296.84835815 292.43658447]
[283.68338013 299.62570190]
[269.50390625 304.51876831]
[254.70698547 306.97875977]
[239.70704651 306.93679810]
[224.92413330 304.39407349]
[210.77224731 299.42175293]
[197.64768982 292.15908813]
[185.91801453 282.80950928]
[175.91171265 271.63479614]
[167.90899658 258.94793701]
[162.13398743 245.10418701]
[158.74841309 230.49125671]
[157.84707642 215.51835632]
[159.45521545 200.60481262]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 103]
[7 102]
[8 101]
[9 98]
[10 97]
[11 96]
[12 95]
[13 94]
[14 93]
[16 91]
[17 90]
[18 89]
[20 85]
[21 84]
[22 83]
[26 82]
[27 81]
[28 80]
[29 78]
[30 77]
[31 76]
[32 75]
[33 74]
[34 73]
[36 71]
[37 70]
[38 69]
[39 68]
[43 64]
[44 63]
[45 62]
[49 58]
[105 164]
[106 163]
[107 162]
[108 161]
[109 159]
[110 158]
[111 157]
[112 156]
[113 155]
[122 146]
[123 145]
[124 144]
[127 142]
[128 141]
[129 140]
[130 139]
[131 138]
[132 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
