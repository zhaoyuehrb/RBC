%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 07:38:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCAUCAAUAAGCAAAAACACUUCAGAUGCAUUCCUACUAAUUUUUGCUGUAUCACAGGGUGGAAGACUGUUUGGUCCCAAGGGAAUAAUGGCUACAAUCUAGGACCUCCUCCCAGAAGGCAGGAACAUUGUGUCUGGCGU\
) } def
/len { sequence length } bind def

/coor [
[1.59034503 397.04647827]
[5.97308731 411.50219727]
[6.10426712 426.60714722]
[1.97325051 441.13684082]
[-6.08507967 453.91336060]
[-17.41747093 463.90103149]
[-31.10525513 470.29019165]
[-46.03882980 472.56286621]
[-61.00759125 470.53485107]
[-74.79808807 464.37054443]
[-86.29239655 454.56964111]
[-94.55871582 441.92666626]
[-98.92693329 427.46655273]
[-99.04293823 412.36148071]
[-94.89732361 397.83596802]
[-86.82616425 385.06750488]
[-75.48374939 375.09124756]
[-61.78955078 368.71585083]
[-46.85370255 366.45816040]
[-31.88698387 368.50122070]
[-25.76572990 354.80703735]
[-27.63566589 340.03027344]
[-14.94031429 330.58895874]
[-8.81906033 316.89477539]
[-2.69780636 303.20062256]
[3.42344785 289.50643921]
[9.54470253 275.81228638]
[15.66595650 262.11810303]
[21.78721046 248.42395020]
[27.90846443 234.72978210]
[34.02972031 221.03561401]
[39.69323349 207.14587402]
[44.89277267 193.07588196]
[50.09231186 179.00588989]
[55.29185104 164.93589783]
[60.49139023 150.86589050]
[47.57863998 158.49877930]
[32.58164597 158.79895020]
[19.37380409 151.68890381]
[11.36642170 139.00497437]
[10.62763309 124.02317810]
[17.34825134 110.61299133]
[29.79248619 102.23796082]
[44.74625397 101.06119537]
[58.34732056 107.38661957]
[67.08281708 119.58052063]
[68.69630432 134.49513245]
[76.85661316 121.90904236]
[85.01692200 109.32296753]
[82.35683441 99.64057922]
[85.40904236 90.07455444]
[93.18533325 83.72207642]
[103.16799927 82.63986969]
[111.87704468 70.42706299]
[109.44940186 59.72241211]
[113.27787018 49.67093658]
[121.85286713 43.55028534]
[132.16203308 43.21076202]
[141.40277100 31.39514351]
[150.64349365 19.57952309]
[153.05035400 3.94246268]
[166.98570251 -1.31635606]
[176.22644043 -13.13197613]
[185.46716309 -24.94759560]
[170.73446655 -22.12847710]
[156.75846863 -27.57564735]
[147.81921387 -39.62096024]
[146.65425110 -54.57565689]
[153.62033081 -67.85999298]
[166.58418274 -75.40576935]
[181.57572937 -74.90215302]
[194.00395203 -66.50338745]
[200.06282043 -52.78150177]
[197.89782715 -37.94081497]
[209.29312134 -47.69514847]
[220.68843079 -57.44947815]
[232.08374023 -67.20381165]
[243.47904968 -76.95814514]
[245.27075195 -89.78339386]
[255.02926636 -97.67144012]
[267.14340210 -96.79180145]
[278.75170898 -106.29165649]
[290.36001587 -115.79151917]
[285.61190796 -130.20747375]
[286.39596558 -145.36497498]
[292.60620117 -159.21408081]
[303.40267944 -169.88180542]
[317.32528687 -175.92544556]
[332.49108887 -176.52763367]
[346.84906006 -171.60694885]
[358.45736694 -161.82884216]
[365.74612427 -148.51574707]
[367.72958374 -133.46813965]
[364.13946533 -118.72109985]
[355.46130371 -106.26902008]
[342.86877441 -97.79595947]
[328.06491089 -94.44782257]
[313.05181885 -96.67741394]
[299.85986328 -104.18321228]
[288.25155640 -94.68335724]
[276.64324951 -85.18350220]
[271.37817383 -68.47834015]
[253.23338318 -65.56283569]
[241.83807373 -55.80850601]
[230.44276428 -46.05417252]
[219.04745483 -36.29984283]
[207.65214539 -26.54550934]
[197.28279114 -15.70686340]
[188.04205322 -3.89124346]
[178.80131531 7.92437601]
[177.05543518 22.71630478]
[162.45912170 28.82025528]
[153.21838379 40.63587570]
[143.97766113 52.45149612]
[142.77194214 71.70367432]
[124.08984375 79.13610840]
[115.38080597 91.34890747]
[114.59095764 109.92544556]
[97.60299683 117.48326874]
[89.44269562 130.06935120]
[81.28238678 142.65542603]
[74.56138611 156.06542969]
[69.36184692 170.13543701]
[64.16230774 184.20542908]
[58.96276855 198.27542114]
[53.76322937 212.34541321]
[54.68139267 217.64544678]
[53.53842545 222.27943420]
[50.95161819 225.56065369]
[47.72388840 227.15686035]
[41.60263443 240.85102844]
[35.48138046 254.54519653]
[29.36012459 268.23937988]
[23.23887062 281.93353271]
[17.11761665 295.62771606]
[10.99636173 309.32186890]
[4.87510777 323.01605225]
[-1.24614620 336.71020508]
[0.18595578 352.46646118]
[-12.07156181 360.92828369]
[-18.19281578 374.62246704]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 141]
[21 140]
[23 138]
[24 137]
[25 136]
[26 135]
[27 134]
[28 133]
[29 132]
[30 131]
[31 130]
[32 126]
[33 125]
[34 124]
[35 123]
[36 122]
[47 121]
[48 120]
[49 119]
[53 117]
[54 116]
[58 114]
[59 113]
[60 112]
[62 110]
[63 109]
[64 108]
[74 107]
[75 106]
[76 105]
[77 104]
[78 103]
[81 101]
[82 100]
[83 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
