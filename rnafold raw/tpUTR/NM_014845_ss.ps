%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 07:50:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGAGCGCAGGUCCACCUGGUGGACACGUCUGAUUAGCUUAGAACCUGUCUUGUCUCAUCUUCAAAAGGUAACUUAUUAAAAGUCCUUUGCGUCUGAAGCCUUUCUCCUUUUCUGUCACUUGCAAAUUCCAAAUUAUAGCUAAUAAAGAUGACUAGAUAAUUUGC\
) } def
/len { sequence length } bind def

/coor [
[56.68823242 426.40463257]
[50.05780029 440.43377686]
[36.43140030 447.85678101]
[21.04866982 445.81933594]
[9.82457638 435.10488892]
[7.07501602 419.83337402]
[13.85725021 405.87698364]
[27.56337166 398.60223389]
[29.53292084 383.73208618]
[31.50247002 368.86196899]
[33.47201920 353.99182129]
[19.79574966 347.83068848]
[9.96314812 359.15853882]
[0.13054693 370.48635864]
[-9.70205402 381.81420898]
[-19.53465462 393.14205933]
[-29.36725616 404.46987915]
[-35.18378067 420.39483643]
[-52.09656525 419.21411133]
[-55.64388657 402.63540649]
[-40.69509506 394.63729858]
[-30.86249542 383.30944824]
[-21.02989388 371.98159790]
[-11.19729328 360.65377808]
[-1.36469221 349.32592773]
[8.46790886 337.99807739]
[23.89668465 328.28680420]
[37.99623871 330.22647095]
[41.62810898 315.67279053]
[45.25997925 301.11911011]
[48.89184952 286.56542969]
[52.52371979 272.01174927]
[46.77495193 255.45040894]
[59.62667465 242.29043579]
[62.98413467 227.67100525]
[66.34159851 213.05158997]
[69.69905853 198.43217468]
[73.05651855 183.81274414]
[76.41397858 169.19332886]
[79.77144623 154.57391357]
[62.74761963 144.71875000]
[49.97891617 129.75561523]
[42.92382812 111.39369202]
[42.38821030 91.73033142]
[48.43324661 73.01155853]
[36.15046310 64.40149689]
[23.86768150 55.79142761]
[11.58489799 47.18136215]
[0.94539779 49.68865585]
[-9.10275841 45.97970963]
[-15.30130577 37.51608658]
[-15.78411865 27.25684166]
[-27.73434067 18.19085121]
[-39.68456268 9.12486172]
[-54.13786697 14.51981831]
[-69.20862579 11.22197151]
[-80.08781433 0.28365377]
[-83.30392456 -14.80475903]
[-77.83070374 -29.22860718]
[-65.41464233 -38.38529587]
[-50.01765823 -39.35295486]
[-36.55287170 -31.82281303]
[-29.31684685 -18.19770813]
[-30.61857414 -2.82536125]
[-18.66835213 6.24062824]
[-6.71812868 15.30661774]
[12.56914711 16.26859093]
[20.19496346 34.89857864]
[32.47774887 43.50864410]
[44.76053238 52.11870956]
[57.04331207 60.72877884]
[68.86914062 50.82301712]
[82.88193512 44.37197113]
[80.35443878 29.58644485]
[77.82694244 14.80091858]
[75.29945374 0.01539339]
[63.08958054 -10.39127064]
[63.75709915 -26.42043114]
[76.78993988 -35.77588654]
[92.19042969 -31.28093338]
[98.14462280 -16.38371468]
[90.08497620 -2.51210189]
[92.61247253 12.27342415]
[95.13996887 27.05894852]
[97.66745758 41.84447479]
[113.33639526 43.34626007]
[128.02987671 48.99184036]
[140.67317200 58.36829376]
[152.45074463 49.07911301]
[164.22830200 39.78993225]
[176.00587463 30.50075531]
[187.78344727 21.21157646]
[199.56101990 11.92239761]
[201.55566406 -3.52619958]
[213.63212585 -12.77897167]
[228.34770203 -10.78217697]
[240.12527466 -20.07135582]
[251.90284729 -29.36053467]
[246.64634705 -43.54589462]
[246.03266907 -58.66140366]
[250.12193298 -73.22619629]
[258.51348877 -85.81336212]
[270.38525391 -95.18974304]
[284.57412720 -100.43672943]
[299.69006348 -101.04028320]
[314.25210571 -96.94126892]
[326.83364868 -88.54126740]
[336.20205688 -76.66323090]
[341.43954468 -62.47083664]
[342.03295898 -47.35451889]
[337.92419434 -32.79521942]
[329.51577759 -20.21931076]
[317.63143921 -10.85884953]
[303.43554688 -5.63088036]
[288.31884766 -5.04758549]
[273.76229858 -9.16611099]
[261.19201660 -17.58296394]
[249.41445923 -8.29378605]
[237.63688660 0.99539340]
[236.15017700 15.77122784]
[224.33837891 25.35955238]
[208.85020447 23.69996643]
[197.07263184 32.98914719]
[185.29505920 42.27832413]
[173.51748657 51.56750488]
[161.73991394 60.85668182]
[149.96234131 70.14585876]
[154.57768250 79.78164673]
[157.35391235 90.09873199]
[158.19746399 100.74946594]
[157.07991028 111.37494659]
[154.03892517 121.61711884]
[149.17698669 131.13085938]
[142.65789795 139.59556580]
[134.70137024 146.72601318]
[125.57550049 152.28192139]
[115.58779907 156.07608032]
[105.07483673 157.98062134]
[94.39086151 157.93136597]
[91.03340149 172.55078125]
[87.67594147 187.17021179]
[84.31848145 201.78962708]
[80.96102142 216.40904236]
[77.60355377 231.02847290]
[74.24609375 245.64788818]
[80.42807770 256.99993896]
[77.30113983 269.12811279]
[67.07740021 275.64361572]
[63.44552612 290.19729614]
[59.81365585 304.75097656]
[56.18178558 319.30465698]
[52.54991531 333.85833740]
[63.52374268 323.63214111]
[78.06360626 319.94534302]
[92.58426666 323.70703125]
[103.50522614 333.98968506]
[108.13360596 348.25775146]
[105.32813263 362.99307251]
[95.78057861 374.56216431]
[81.84518433 380.11236572]
[66.95812988 378.27511597]
[54.79025650 369.50338745]
[48.34215164 355.96136475]
[46.37260437 370.83151245]
[44.40305328 385.70162964]
[42.43350601 400.57177734]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 166]
[9 165]
[10 164]
[11 163]
[12 26]
[13 25]
[14 24]
[15 23]
[16 22]
[17 21]
[28 152]
[29 151]
[30 150]
[31 149]
[32 148]
[34 145]
[35 144]
[36 143]
[37 142]
[38 141]
[39 140]
[40 139]
[45 71]
[46 70]
[47 69]
[48 68]
[52 66]
[53 65]
[54 64]
[73 85]
[74 84]
[75 83]
[76 82]
[88 127]
[89 126]
[90 125]
[91 124]
[92 123]
[93 122]
[96 119]
[97 118]
[98 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
