%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 09:39:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGUGUGCUGUACUUUUACACUCCUUUGUCUUGGAACUGUCUUAUUUUUGUUCUGUAAAUGUCUAUUGCCGUAAAUUGUUAAUAAAAUUGAAGUUUCCAUUUUAAAUGUC\
) } def
/len { sequence length } bind def

/coor [
[-7.01497984 312.16775513]
[-16.73128510 314.95382690]
[-26.80348969 314.61279297]
[-36.25289536 311.19619751]
[-46.24809265 322.38082886]
[-56.24329376 333.56546021]
[-66.23848724 344.75009155]
[-76.23368835 355.93472290]
[-72.01527405 370.77413940]
[-76.51117706 385.53186035]
[-88.28677368 395.49874878]
[-103.58451843 397.49441528]
[-117.52294922 390.88201904]
[-125.65436554 377.77157593]
[-125.38406372 362.34658813]
[-116.79830170 349.52911377]
[-102.63674927 343.40911865]
[-87.41831970 345.93951416]
[-77.42312622 334.75488281]
[-67.42792511 323.57025146]
[-57.43272400 312.38562012]
[-47.43752670 301.20098877]
[-53.37488556 281.95870972]
[-46.70904160 262.81402588]
[-29.88301659 251.26815796]
[-9.35325623 251.94474792]
[-1.01970291 239.47270203]
[7.31385040 227.00065613]
[15.64740372 214.52861023]
[10.32730865 200.64212036]
[14.25069046 186.11384583]
[26.11526680 176.56997681]
[41.50241470 175.83386230]
[49.83596802 163.36181641]
[58.16952133 150.88977051]
[66.50307465 138.41772461]
[74.83662415 125.94567871]
[82.99444580 113.35798645]
[90.97492981 100.65712738]
[90.60660553 96.65522003]
[92.08047485 92.52035522]
[95.40760803 89.11353302]
[100.19828033 87.26390839]
[109.21804047 75.27874756]
[118.23779297 63.29359436]
[120.35388947 47.61454010]
[134.18919373 42.09788895]
[143.20895386 30.11273003]
[152.22871399 18.12757301]
[161.24847412 6.14241552]
[170.26821899 -5.84274149]
[179.28797913 -17.82789803]
[188.30773926 -29.81305695]
[184.87370300 -48.32863617]
[195.75682068 -63.30850983]
[213.80184937 -65.68231201]
[222.13540649 -78.15435791]
[219.26214600 -93.46389771]
[227.89123535 -105.99361420]
[242.50424194 -108.63847351]
[250.83779907 -121.11051941]
[259.17135620 -133.58256531]
[260.40499878 -149.35560608]
[273.90921021 -155.63932800]
[274.44125366 -172.02984619]
[289.02752686 -179.52468872]
[302.66293335 -170.41380310]
[301.32052612 -154.06970215]
[286.38125610 -147.30577087]
[285.74368286 -132.42481995]
[271.64340210 -125.24900818]
[263.30984497 -112.77696991]
[254.97628784 -100.30492401]
[258.12490845 -85.79210663]
[249.85118103 -73.02497101]
[234.60745239 -69.82080078]
[226.27389526 -57.34875870]
[230.91828918 -46.74491501]
[229.78965759 -35.10235214]
[223.05746460 -25.38942337]
[212.33470154 -20.14008141]
[200.29289246 -20.79330063]
[191.27313232 -8.80814266]
[182.25338745 3.17701483]
[173.23362732 15.16217232]
[164.21386719 27.14732933]
[155.19410706 39.13248825]
[146.17436218 51.11764526]
[144.70341492 65.93943787]
[130.22294617 72.31334686]
[121.20319366 84.29850769]
[112.18344116 96.28366089]
[103.67578888 108.63761139]
[95.69531250 121.33847046]
[93.73343658 130.41069031]
[87.30867004 134.27923584]
[78.97512054 146.75128174]
[70.64156342 159.22332764]
[62.30801010 171.69537354]
[53.97445679 184.16740417]
[59.18277359 198.66497803]
[54.90577698 213.27870178]
[42.98480225 222.46316528]
[28.11944771 222.86216736]
[19.78589439 235.33421326]
[11.45234108 247.80625916]
[3.11878777 260.27828979]
[8.81664562 268.84332275]
[11.59136486 278.71813965]
[11.19087696 288.93765259]
[7.67251158 298.50897217]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 22]
[5 21]
[6 20]
[7 19]
[8 18]
[26 107]
[27 106]
[28 105]
[29 104]
[33 100]
[34 99]
[35 98]
[36 97]
[37 96]
[38 94]
[39 93]
[43 92]
[44 91]
[45 90]
[47 88]
[48 87]
[49 86]
[50 85]
[51 84]
[52 83]
[53 82]
[56 77]
[57 76]
[60 73]
[61 72]
[62 71]
[64 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
