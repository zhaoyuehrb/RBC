%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 12:16:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGACUUCCGAACACUUGCUAUCUCUUGCUGCUGCUGUUUCAUGGAAGGAGAUAUUAAACAUUUGUUUAAUUUUUAUUUAAGUGUUAUACCUAUUUCAGCAAAUAAAAUAUUUCAUUGCUUA\
) } def
/len { sequence length } bind def

/coor [
[237.40423584 306.37814331]
[237.20169067 301.77645874]
[228.63267517 289.46502686]
[220.06364441 277.15356445]
[211.49462891 264.84213257]
[196.12178040 268.46673584]
[180.49334717 265.93136597]
[166.98948669 257.59237671]
[157.67817688 244.69227600]
[153.99848938 229.17468262]
[156.53831482 213.39143372]
[164.94055176 199.74620056]
[156.06239319 187.65577698]
[147.18424988 175.56535339]
[138.30609131 163.47492981]
[129.42793274 151.38450623]
[120.54977417 139.29408264]
[111.67162323 127.20365906]
[102.79346466 115.11323547]
[89.01824951 116.78540802]
[75.89981842 105.62555695]
[61.83353806 100.41598511]
[47.76725769 95.20640564]
[33.70097733 89.99682617]
[19.63469315 84.78724670]
[5.56841183 79.57766724]
[-8.49787045 74.36808777]
[-22.56415176 69.15850830]
[-38.19249725 71.62130737]
[-47.44031906 59.94538879]
[-61.50660324 54.73580933]
[-75.57288361 49.52622986]
[-84.82414246 49.46767807]
[-89.92671204 44.00239944]
[-103.85650635 38.43815613]
[-118.27931213 44.90020752]
[-133.01718140 39.19311142]
[-139.32638550 24.70278740]
[-133.46379089 10.02608585]
[-118.90756989 3.87043619]
[-104.29367065 9.88787365]
[-98.29225922 24.50836182]
[-84.36246490 30.07260513]
[-70.36330414 35.45994949]
[-56.29702377 40.66952896]
[-42.23073959 45.87910461]
[-27.60850906 43.04368591]
[-17.35457420 55.09222794]
[-3.28829145 60.30180740]
[10.77799034 65.51138306]
[24.84427261 70.72096252]
[38.91055298 75.93054199]
[52.97683716 81.14012146]
[67.04312134 86.34970093]
[81.10939789 91.55928040]
[93.73753357 83.46420288]
[94.87653351 68.50750732]
[96.01552582 53.55081558]
[97.15452576 38.59412384]
[98.29351807 23.63742828]
[99.43251801 8.68073463]
[91.85110474 -5.86073065]
[100.88077545 -19.55003738]
[117.23257446 -18.30479813]
[124.08518219 -3.40601015]
[114.38921356 9.81973171]
[113.25021362 24.77642632]
[112.11122131 39.73311996]
[110.97222137 54.68981171]
[109.83322144 69.64650726]
[108.69422913 84.60320282]
[115.57075500 71.27228546]
[128.74958801 64.10859680]
[143.67648315 65.58772278]
[155.19311523 75.19850159]
[159.31965637 89.61972809]
[154.63009644 103.86781311]
[142.74499512 113.01901245]
[127.77153778 113.91092682]
[114.88388824 106.23507690]
[123.76204681 118.32550049]
[132.64019775 130.41592407]
[141.51835632 142.50634766]
[150.39651489 154.59677124]
[159.27467346 166.68719482]
[168.15283203 178.77761841]
[177.03097534 190.86804199]
[190.81663513 187.06231689]
[205.04197693 188.20722961]
[217.98704529 194.14373779]
[228.09370422 204.13471985]
[234.15322876 216.95640564]
[235.45080566 231.04826355]
[231.84988403 244.70292664]
[223.80607605 256.27310181]
[232.37509155 268.58453369]
[240.94412231 280.89599609]
[249.51313782 293.20745850]
[258.69473267 305.06909180]
[268.46533203 316.45046997]
[278.23590088 327.83181763]
[288.00650024 339.21319580]
[297.77706909 350.59457397]
[312.35571289 346.19192505]
[327.46386719 348.10601807]
[340.48394775 356.00521851]
[349.16015625 368.52093506]
[351.98928833 383.48477173]
[348.48117065 398.30410767]
[339.24362183 410.41143799]
[325.87707520 417.70910645]
[310.69738770 418.93267822]
[296.33453369 413.87023926]
[285.27697754 403.39886475]
[279.44046021 389.33276367]
[279.83624268 374.10900879]
[286.39572144 360.36517334]
[276.62512207 348.98379517]
[266.85452271 337.60241699]
[257.08395386 326.22103882]
[247.31336975 314.83966064]
[244.41557312 314.54711914]
[241.46800232 313.02221680]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 98]
[3 97]
[4 96]
[5 95]
[12 87]
[13 86]
[14 85]
[15 84]
[16 83]
[17 82]
[18 81]
[19 80]
[21 55]
[22 54]
[23 53]
[24 52]
[25 51]
[26 50]
[27 49]
[28 48]
[30 46]
[31 45]
[32 44]
[34 43]
[35 42]
[56 71]
[57 70]
[58 69]
[59 68]
[60 67]
[61 66]
[99 121]
[100 120]
[101 119]
[102 118]
[103 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
