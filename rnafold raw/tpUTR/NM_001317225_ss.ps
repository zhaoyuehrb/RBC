%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 21:49:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUGGACGGAACCAUGCACAGCAGGCUGGGAAAUGUGGUUUGGUUCCUGACCUAGGCUUGGGAAGACAAGCCAGCGAAUAAAGGAUGGUUGAACGUGAA\
) } def
/len { sequence length } bind def

/coor [
[81.00677490 126.03303528]
[75.00709534 118.97231293]
[71.40564728 110.70159149]
[70.38208008 101.98532104]
[55.64777374 99.17459869]
[40.64221191 104.18895721]
[29.59020233 94.20385742]
[14.81356239 91.62491608]
[-0.00176319 89.27839661]
[-14.81708813 86.93188477]
[-29.63241386 84.58536530]
[-44.44773865 82.23884583]
[-59.26306534 79.89233398]
[-74.07839203 77.54581451]
[-87.94040680 88.07340240]
[-104.81022644 85.45938873]
[-114.44960022 71.77838898]
[-129.33131409 69.89838409]
[-144.21304321 68.01838684]
[-159.09475708 66.13838959]
[-166.94761658 79.18647003]
[-179.43241882 87.90711975]
[-194.38609314 90.78942871]
[-209.21781921 87.33401489]
[-221.35791016 78.13955688]
[-228.70303345 64.79904938]
[-229.98059082 49.62381744]
[-224.96923828 35.24305725]
[-214.53723145 24.14832497]
[-200.49197388 18.26184845]
[-185.26689148 18.60349655]
[-171.49981689 25.11407661]
[-161.57598877 36.66559219]
[-157.21476746 51.25667191]
[-142.33303833 53.13666916]
[-127.45131683 55.01666641]
[-112.56959534 56.89666748]
[-103.50256348 47.59495544]
[-90.53019714 45.23427200]
[-78.41307068 50.91137314]
[-71.73187256 62.73049164]
[-56.91654587 65.07700348]
[-42.10122299 67.42352295]
[-27.28589630 69.77004242]
[-12.47057152 72.11656189]
[2.34475374 74.46307373]
[17.16007805 76.80959320]
[24.38867188 74.70911407]
[32.40092087 79.46954346]
[46.35258484 74.25414276]
[58.45849228 84.44029236]
[73.19280243 87.25101471]
[87.78884125 70.48332977]
[111.48133850 67.78338623]
[132.10357666 82.71768951]
[143.35523987 72.79801178]
[154.60690308 62.87833405]
[165.85858154 52.95865631]
[177.11024475 43.03897858]
[188.36190796 33.11930084]
[189.10400391 17.33244514]
[200.84780884 6.75612688]
[216.62594604 7.66509008]
[227.07749939 19.52006149]
[226.00177002 35.28769684]
[214.03697205 45.61333847]
[198.28158569 44.37096786]
[187.02992249 54.29064560]
[175.77825928 64.21031952]
[164.52658081 74.13000488]
[153.27491760 84.04968262]
[142.02325439 93.96936035]
[156.65327454 90.65835571]
[168.40124512 81.33178711]
[183.10964966 78.38848114]
[197.54194641 82.47610474]
[208.52239990 92.69519806]
[213.63479614 106.79708862]
[211.75418091 121.67873383]
[203.29438782 134.06549072]
[190.11694336 141.23171997]
[175.12147522 141.60052490]
[161.60766602 135.09075928]
[152.55023193 123.13725281]
[139.20326233 116.29193878]
[147.63450623 128.69815063]
[156.06576538 141.10435486]
[171.63511658 143.81921387]
[180.65615845 156.79598999]
[177.77684021 172.33576965]
[164.70541382 181.21910095]
[149.19692993 178.17564392]
[140.45230103 165.01104736]
[143.65954590 149.53559875]
[135.22830200 137.12939453]
[126.79705048 124.72319031]
[118.13983917 130.64675903]
[108.37387085 133.74240112]
[98.37485504 133.88006592]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 52]
[5 51]
[7 49]
[8 47]
[9 46]
[10 45]
[11 44]
[12 43]
[13 42]
[14 41]
[17 37]
[18 36]
[19 35]
[20 34]
[55 72]
[56 71]
[57 70]
[58 69]
[59 68]
[60 67]
[85 96]
[86 95]
[87 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
