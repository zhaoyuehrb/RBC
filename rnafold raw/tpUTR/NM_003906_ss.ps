%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 13:07:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGCCUGACCUGUGGGGAGGGGGUCUCUCCCGAAGAGUUUCUGUUUUUACUCAAAAUAAUGUUAUUCUCAGAUGCUUGAUGCACUGUUGGAAAUGUGAUUAAUUUAAUCAUGCAGAUAAACCAUUUAAAUGUCAGUCUCCCA\
) } def
/len { sequence length } bind def

/coor [
[127.45753479 315.70346069]
[129.62670898 300.21707153]
[141.27740479 289.78659058]
[140.62312317 274.80084229]
[132.33802795 262.42318726]
[139.46600342 248.29866028]
[138.81172180 233.31292725]
[138.15742493 218.32720947]
[137.50314331 203.34149170]
[136.84884644 188.35575867]
[133.76219177 173.67677307]
[128.32562256 159.69665527]
[122.88904572 145.71653748]
[117.45247650 131.73641968]
[85.36437988 139.67218018]
[54.76663971 117.08623505]
[41.77626038 124.58623505]
[28.78587914 132.08622742]
[15.79549789 139.58622742]
[2.80511665 147.08622742]
[-10.18526459 154.58622742]
[-23.17564583 162.08622742]
[-33.86956787 175.24208069]
[-49.47165298 168.60798645]
[-47.41590500 151.77912903]
[-30.67564583 149.09585571]
[-17.68526459 141.59585571]
[-4.69488335 134.09585571]
[8.29549789 126.59584808]
[21.28587914 119.09584808]
[34.27626038 111.59584808]
[47.26663971 104.09584808]
[46.69451141 96.61770630]
[33.16983795 90.13054657]
[45.55025101 81.66141510]
[44.97812271 74.18326569]
[30.99800301 68.74669647]
[17.01788521 63.31012726]
[3.03776765 57.87355423]
[-8.89000797 67.54949188]
[-24.06024933 69.94936371]
[-38.39223480 64.42761230]
[-48.03073502 52.46956635]
[-50.38304138 37.29187775]
[-44.81639481 22.97726822]
[-32.82819748 13.37629700]
[-17.64320946 11.07157707]
[-3.34611940 16.68306541]
[6.21722698 28.70130157]
[8.47433853 43.89343643]
[22.45445633 49.33000946]
[36.43457413 54.76657867]
[50.41469193 60.20314789]
[57.21200180 57.03351212]
[47.54972458 45.56004715]
[37.88744736 34.08658218]
[26.01473808 24.91931534]
[22.58471107 10.31674957]
[29.13434219 -3.17778015]
[42.72877502 -9.51744652]
[57.27641678 -5.86147785]
[66.25854492 6.15190506]
[65.64983368 21.14076805]
[68.22822571 35.91750336]
[70.80661774 50.69424057]
[77.60392761 47.52460098]
[82.42551422 33.32064819]
[87.24710846 19.11669731]
[92.06870270 4.91274595]
[96.57929230 -9.39300823]
[100.77672577 -23.79375648]
[104.97415924 -38.19450378]
[104.37403870 -47.38691330]
[109.42342377 -52.86175919]
[113.93401337 -67.16751862]
[118.44459534 -81.47326660]
[112.34195709 -96.31029510]
[120.26270294 -110.26168823]
[136.13070679 -112.62513733]
[147.77340698 -101.58760071]
[146.25950623 -85.61613464]
[132.75035095 -76.96268463]
[128.23976135 -62.65692902]
[123.72917938 -48.35117340]
[119.37490845 -33.99707031]
[115.17747498 -19.59632111]
[110.98003387 -5.19557333]
[112.49063873 -0.59213609]
[111.07112122 5.00948334]
[106.27265167 9.73433781]
[101.45106506 23.93828964]
[96.62947083 38.14224243]
[91.80787659 52.34619522]
[117.08654022 59.11898041]
[133.03013611 76.97504425]
[136.18572998 98.45632172]
[150.95783997 95.85160065]
[165.72996521 93.24687195]
[180.50207520 90.64215088]
[195.27418518 88.03742981]
[210.04631042 85.43270874]
[224.81842041 82.82798767]
[239.36698914 74.12306213]
[251.75915527 85.69330597]
[244.07157898 100.80414581]
[227.42314148 97.60009766]
[212.65103149 100.20482635]
[197.87890625 102.80954742]
[183.10679626 105.41426849]
[168.33468628 108.01898956]
[153.56256104 110.62371063]
[138.79045105 113.22843933]
[131.43260193 126.29985809]
[136.86917114 140.27996826]
[142.30574036 154.26008606]
[147.74230957 168.24020386]
[150.94766235 153.58668518]
[159.14141846 141.02236938]
[171.25845337 132.18055725]
[185.72358704 128.21066284]
[200.65640259 129.62875366]
[214.11570740 136.25047302]
[224.35183716 147.21502686]
[230.03413391 161.09709167]
[230.42393494 176.09202576]
[225.47056580 190.25054932]
[215.81793213 201.73213196]
[202.72084045 209.04420471]
[187.88188171 211.23622131]
[173.23002625 208.02323914]
[160.66998291 199.82292175]
[151.83456421 187.70147705]
[152.48886108 202.68719482]
[153.14315796 217.67291260]
[153.79743958 232.65864563]
[154.45173645 247.64436340]
[162.78363037 261.09390259]
[155.60884094 274.14657593]
[156.26313782 289.13229370]
[168.77857971 298.50765991]
[172.28923035 313.74609375]
[165.13746643 327.65243530]
[150.70013428 333.66052246]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 139]
[4 138]
[6 136]
[7 135]
[8 134]
[9 133]
[10 132]
[11 116]
[12 115]
[13 114]
[14 113]
[16 32]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[22 26]
[36 53]
[37 52]
[38 51]
[39 50]
[66 93]
[67 92]
[68 91]
[69 90]
[70 87]
[71 86]
[72 85]
[74 84]
[75 83]
[76 82]
[96 112]
[97 111]
[98 110]
[99 109]
[100 108]
[101 107]
[102 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
