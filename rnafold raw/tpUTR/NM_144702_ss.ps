%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 03:08:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCUCCCACCUGCUUGCCUCUAAGACUCGGGGCUACAGAAGCACCUCCUGUCCCUGUGUGGGGUGACCUCCCUGGGGGAGAUCUCAGACCAAUAACAAAGUCUGUUGCUAUACUUUU\
) } def
/len { sequence length } bind def

/coor [
[189.23446655 201.87011719]
[188.90480042 193.70484924]
[189.94798279 185.59460449]
[192.33624268 177.76872253]
[196.00375366 170.44877625]
[184.59767151 160.70706177]
[173.19158936 150.96534729]
[161.78549194 141.22361755]
[150.37940979 131.48190308]
[143.16088867 129.50619507]
[138.80656433 121.33279419]
[127.65939331 111.29583740]
[121.14616394 121.62135315]
[110.94012451 128.58723450]
[98.65943909 130.94609070]
[86.30895996 128.19258118]
[75.95294189 120.66596985]
[69.37010193 109.51301575]
[54.62128067 112.24655151]
[39.87245560 114.98008728]
[25.12363434 117.71361542]
[10.37481022 120.44715118]
[3.81633568 134.51008606]
[-9.77185345 142.00279236]
[-25.16482162 140.04418945]
[-36.44366074 129.38737488]
[-39.27142334 114.13014221]
[-32.56077576 100.13918304]
[-18.89210510 92.79431915]
[-3.52128983 94.91979218]
[7.64127731 105.69832611]
[22.39010048 102.96479034]
[37.13892365 100.23126221]
[51.88774872 97.49772644]
[66.63657379 94.76419067]
[72.19493103 80.83205414]
[63.37815475 68.69679260]
[54.56137466 56.56154251]
[45.74459839 44.42628479]
[36.92781830 32.29103088]
[21.57005310 29.68780136]
[12.80145645 17.25532913]
[15.37788296 2.63009024]
[6.56110430 -9.50516510]
[-2.25567436 -21.64041901]
[-17.81250763 -25.56017494]
[-24.31599236 -40.22592545]
[-16.77721214 -54.38736343]
[-0.97927195 -57.18104553]
[10.95899868 -46.46389771]
[9.87958050 -30.45719910]
[18.69635963 -18.32194328]
[27.51313782 -6.18668842]
[42.21872711 -4.11756802]
[51.33306503 8.06370735]
[49.06307220 23.47425270]
[57.87985229 35.60950851]
[66.69663239 47.74476242]
[75.51341248 59.88001633]
[84.33018494 72.01527405]
[104.32136536 69.32781219]
[121.23122406 78.97921753]
[127.68888855 65.44043732]
[134.14656067 51.90165710]
[140.60421753 38.36288071]
[135.09304810 23.55063629]
[141.74577332 9.21478081]
[156.61544800 3.86051917]
[170.88017273 10.66444111]
[176.07691956 25.58989906]
[169.12257385 39.78188705]
[154.14300537 44.82054520]
[147.68533325 58.35932541]
[141.22766113 71.89810181]
[134.77000427 85.43688202]
[137.69635010 100.14865875]
[148.84352112 110.18562317]
[160.12112427 120.07580566]
[171.52720642 129.81753540]
[182.93330383 139.55924988]
[194.33938599 149.30096436]
[205.74548340 159.04269409]
[227.03970337 148.53884888]
[250.71282959 149.35797119]
[271.13220215 161.25151062]
[283.46472168 181.34233093]
[284.82080078 204.82052612]
[298.96041870 209.82762146]
[313.10003662 214.83473206]
[327.23965454 219.84182739]
[341.37930298 224.84893799]
[353.00601196 214.81326294]
[368.09588623 211.95123291]
[382.58981323 217.03273010]
[392.58901978 228.69085693]
[395.40371704 243.78962708]
[390.27682495 258.26754761]
[378.58740234 268.23013306]
[363.47988892 270.99752808]
[349.01809692 265.82525635]
[339.09219360 254.10467529]
[336.37219238 238.98855591]
[322.23257446 233.98146057]
[308.09295654 228.97434998]
[293.95330811 223.96725464]
[279.81369019 218.96014404]
[275.39700317 225.74394226]
[269.90307617 231.69596863]
[263.48580933 236.64694214]
[256.32543945 240.45561218]
[248.62347412 243.01287842]
[240.59690857 244.24487305]
[232.47225952 244.11506653]
[224.47904968 242.62544250]
[216.84341431 239.81636047]
[209.78164673 235.76557922]
[203.49407959 230.58602905]
[198.15945435 224.42269897]
[193.92974854 217.44859314]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 82]
[6 81]
[7 80]
[8 79]
[9 78]
[11 77]
[12 76]
[18 35]
[19 34]
[20 33]
[21 32]
[22 31]
[36 60]
[37 59]
[38 58]
[39 57]
[40 56]
[43 53]
[44 52]
[45 51]
[62 75]
[63 74]
[64 73]
[65 72]
[87 106]
[88 105]
[89 104]
[90 103]
[91 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
