%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 19:13:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGUCUGAAUUGAUGUUAAAGUUUUAUAUUUCACAAAUUUGUUUAAUACAUGAUUCUCAUACCCCACUGAAAUGGUAGUUUCAAUUCAAAGCUUAAUUAAAAAAUAUUUAAAUAUCAUG\
) } def
/len { sequence length } bind def

/coor [
[313.62231445 393.12655640]
[304.24822998 381.41644287]
[294.87417603 369.70632935]
[281.92419434 370.07852173]
[270.98214722 362.78387451]
[266.20492554 350.32220459]
[269.56347656 337.20397949]
[260.49655151 325.25445557]
[251.42962646 313.30493164]
[242.36271667 301.35540771]
[233.29579163 289.40591431]
[224.22886658 277.45639038]
[215.16195679 265.50686646]
[206.09503174 253.55734253]
[191.34963989 251.79409790]
[181.98426819 239.80474854]
[183.93371582 224.35038757]
[174.86679077 212.40086365]
[165.79986572 200.45133972]
[151.05448914 198.68809509]
[141.68911743 186.69874573]
[143.63854980 171.24438477]
[134.57162476 159.29486084]
[125.50470734 147.34533691]
[116.43778992 135.39582825]
[107.37087250 123.44630432]
[98.30395508 111.49678802]
[86.59384918 102.12271118]
[72.94936371 95.89147949]
[59.30488586 89.66025543]
[45.66040802 83.42903137]
[31.00759888 88.71419525]
[17.25892258 82.20047760]
[12.31062412 68.19869995]
[-1.33385563 61.96747208]
[-14.97833538 55.73624802]
[-31.24290466 57.83287048]
[-40.97445679 44.63328934]
[-34.16200256 29.71610069]
[-17.81361580 28.42682838]
[-8.74711037 42.09176636]
[4.89736938 48.32299042]
[18.54184914 54.55421829]
[32.36413574 49.12467194]
[46.29034805 55.24964905]
[51.89163208 69.78455353]
[65.53610992 76.01577759]
[79.18059540 82.24700165]
[92.82507324 88.47822571]
[98.61878967 83.71557617]
[115.99993896 69.42761993]
[112.52666473 54.83528137]
[109.05339050 40.24293900]
[105.58012390 25.65060043]
[96.03053284 11.64197159]
[106.84810638 -1.41239095]
[122.38690186 5.36862278]
[120.17246246 22.17732811]
[123.64572906 36.76966858]
[127.11900330 51.36200714]
[130.59226990 65.95434570]
[145.50827026 67.53970337]
[157.26782227 76.85166168]
[162.23002625 91.00711060]
[158.85848999 105.62329102]
[148.19709778 116.17481232]
[133.54676819 119.39476013]
[119.44348907 114.28619385]
[110.25347137 102.42987061]
[119.32038879 114.37938690]
[128.38731384 126.32890320]
[137.45422363 138.27842712]
[146.52114868 150.22793579]
[155.58805847 162.17745972]
[170.99658203 164.46115112]
[180.02149963 176.70883179]
[177.74938965 191.38442993]
[186.81631470 203.33393860]
[195.88322449 215.28346252]
[211.29174805 217.56715393]
[220.31666565 229.81483459]
[218.04455566 244.49043274]
[227.11146545 256.43994141]
[236.17839050 268.38946533]
[245.24531555 280.33898926]
[254.31222534 292.28851318]
[263.37915039 304.23800659]
[272.44607544 316.18753052]
[281.51296997 328.13705444]
[298.83102417 330.15597534]
[309.17599487 343.77078247]
[306.58425903 360.33224487]
[315.95834351 372.04235840]
[325.33242798 383.75247192]
[338.83532715 377.08270264]
[353.45645142 373.47201538]
[368.51193237 373.08929443]
[383.29760742 375.95248413]
[397.12191772 381.92761230]
[409.33828735 390.73522949]
[419.37533569 401.96340942]
[426.76361084 415.08697510]
[431.15753174 429.49209595]
[432.35159302 444.50503540]
[430.28997803 459.42358398]
[425.06906128 473.55001831]
[416.93307495 486.22360229]
[406.26251221 496.85156250]
[393.55651855 504.93682861]
[379.40930176 510.10119629]
[364.48260498 512.10314941]
[349.47457886 510.84906006]
[335.08712769 506.39758301]
[321.99322510 498.95690918]
[310.80529785 488.87503052]
[302.04656982 476.62353516]
[296.12677002 462.77542114]
[293.32275391 447.97842407]
[293.76565552 432.92459106]
[297.43475342 418.31802368]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 94]
[2 93]
[3 92]
[7 89]
[8 88]
[9 87]
[10 86]
[11 85]
[12 84]
[13 83]
[14 82]
[17 79]
[18 78]
[19 77]
[22 74]
[23 73]
[24 72]
[25 71]
[26 70]
[27 69]
[28 49]
[29 48]
[30 47]
[31 46]
[34 43]
[35 42]
[36 41]
[51 61]
[52 60]
[53 59]
[54 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
