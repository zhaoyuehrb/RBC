%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 14:48:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACUUCUGAUGGAUUCUCGGCAUUAACUCCUGUUUCAAAAAAGUGUGAACAGUUUUAUGAAUUUGAAAGAAAAUUUGGUAGCUCUUUAUAGCAUUCAUUCUUAAAGAUCAGUCAGAAUAGGUGAUUUCUAAAUAAACCAAAUAGAAGAAUGAA\
) } def
/len { sequence length } bind def

/coor [
[162.43110657 271.74075317]
[175.95410156 265.25012207]
[190.74212646 262.73730469]
[205.65003967 264.39685059]
[219.51922607 270.09783936]
[210.45831299 258.14376831]
[201.39739990 246.18968201]
[192.33648682 234.23561096]
[183.27557373 222.28153992]
[174.21466064 210.32745361]
[165.15374756 198.37338257]
[151.29954529 192.90434265]
[149.12956238 177.23265076]
[140.06864929 165.27857971]
[131.00773621 153.32450867]
[121.94682312 141.37043762]
[106.88714600 146.32215881]
[91.03827667 145.96589661]
[76.21632385 140.34243774]
[64.11971283 130.09619141]
[51.23185730 137.77102661]
[49.95270538 153.23529053]
[39.80269241 164.97227478]
[24.68470955 168.46888733]
[10.41193008 162.38058472]
[2.47252607 149.04846191]
[3.91936207 133.59898376]
[14.19610023 121.97280121]
[29.35112381 118.64040375]
[43.55701828 124.88317871]
[56.44487381 117.20833588]
[54.33453369 110.38464355]
[53.28643417 103.31938934]
[53.32495499 96.17692566]
[54.44920349 89.12339020]
[40.60559845 83.34804535]
[26.76199341 77.57270050]
[12.91838741 71.79736328]
[-2.79692650 73.62478638]
[-11.56397724 61.58368683]
[-25.40758324 55.80834198]
[-39.25118637 50.03300095]
[-53.09479523 44.25765610]
[-68.81010437 46.08508301]
[-77.57715607 34.04398346]
[-91.42076111 28.26864052]
[-107.60686493 30.90345001]
[-117.77076721 18.03382874]
[-111.45671844 2.89894032]
[-95.16007233 1.06826019]
[-85.64542389 14.42503548]
[-71.80181122 20.20037842]
[-57.07668686 17.95985985]
[-47.31945038 30.41405106]
[-33.47584534 36.18939590]
[-19.63224030 41.96473694]
[-5.78863430 47.74008179]
[8.93649197 45.49956512]
[18.69373131 57.95375443]
[32.53733444 63.72909927]
[46.38093948 69.50444031]
[60.22454834 75.27978516]
[65.81190491 67.99453735]
[72.71325684 61.93939590]
[80.66336823 57.34709549]
[89.35666656 54.39413452]
[98.45903015 53.19400406]
[107.62062836 53.79283905]
[112.40021515 39.57469559]
[117.17980194 25.35655594]
[121.95938873 11.13841343]
[126.73897552 -3.07972765]
[116.69734192 -14.61717987]
[113.79803467 -29.53330612]
[118.72140503 -43.80309296]
[130.05055237 -53.62685394]
[144.67727661 -56.44193649]
[149.45686340 -70.66007996]
[146.52014160 -86.20633698]
[157.90954590 -95.80480957]
[162.68913269 -110.02294922]
[153.58670044 -122.58979034]
[153.64295959 -138.10676575]
[162.83625793 -150.60728455]
[177.63159180 -155.28462219]
[192.33985901 -150.34028625]
[201.30541992 -137.67543030]
[201.08084106 -122.15998840]
[191.75248718 -109.75994110]
[176.90727234 -105.24336243]
[172.12768555 -91.02522278]
[175.40628052 -76.49594116]
[163.67500305 -65.88049316]
[158.89541626 -51.66234970]
[168.85153198 -40.58347702]
[171.94601440 -25.91104698]
[167.24981689 -11.56489372]
[155.92900085 -1.42901838]
[140.95712280 1.69985926]
[136.17753601 15.91800117]
[131.39794922 30.13614273]
[126.61835480 44.35428238]
[121.83876801 58.57242584]
[138.00851440 72.64074707]
[146.21707153 92.43968201]
[144.74508667 113.82218170]
[133.90089417 132.30952454]
[142.96180725 144.26359558]
[152.02272034 156.21766663]
[161.08363342 168.17173767]
[175.58592224 174.49581909]
[177.10781860 189.31246948]
[186.16873169 201.26655579]
[195.22964478 213.22062683]
[204.29055786 225.17469788]
[213.35147095 237.12876892]
[222.41238403 249.08283997]
[231.47329712 261.03692627]
[237.94046021 262.98919678]
[242.34661865 267.27328491]
[244.07234192 272.53622437]
[256.80200195 280.47067261]
[269.53167725 288.40515137]
[282.12371826 279.84011841]
[297.11203003 277.14358521]
[311.89971924 280.78280640]
[323.92477417 290.12719727]
[331.10375977 303.55783081]
[332.19290161 318.74777222]
[327.00347900 333.06521606]
[316.43460083 344.02963257]
[302.31735229 349.74136353]
[287.09768677 349.21078491]
[273.41247559 342.52987671]
[263.63275146 330.85607910]
[259.45294189 316.21200562]
[261.59719849 301.13479614]
[248.86755371 293.20034790]
[236.13787842 285.26589966]
[243.08001709 298.56277466]
[246.08917236 313.25781250]
[244.93234253 328.21316528]
[239.69911194 342.27066040]
[230.79472351 354.34176636]
[218.90867615 363.49172974]
[204.96141052 369.01205444]
[190.03294373 370.47521973]
[175.27928162 367.76791382]
[161.84289551 361.09982300]
[150.76425171 350.98730469]
[142.90122986 338.21337891]
[138.86271667 323.76724243]
[138.96145630 308.76757812]
[143.18978882 294.37588501]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 118]
[6 117]
[7 116]
[8 115]
[9 114]
[10 113]
[11 112]
[13 110]
[14 109]
[15 108]
[16 107]
[20 31]
[21 30]
[35 62]
[36 61]
[37 60]
[38 59]
[40 57]
[41 56]
[42 55]
[43 54]
[45 52]
[46 51]
[68 103]
[69 102]
[70 101]
[71 100]
[72 99]
[77 94]
[78 93]
[80 91]
[81 90]
[121 139]
[122 138]
[123 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
