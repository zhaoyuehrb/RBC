%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 20:41:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGAUGCUUGCCGUGAUGACGCUGGGCACAGAGGGUCAGGUCCUGUCAAGAGGAGCUGGGUGUCCUGGGUGGACAUUUGAAGAAUUAUAUUCAUUCCAACUUGAAGAAUUAUUCAACACCUUUAACAAUGUAUAUGUGAAGUACUUUAUUCUUUCAUAUUUUAAAAAUAAAAGAUAAUUAUCCAUGAGAAAGCUA\
) } def
/len { sequence length } bind def

/coor [
[189.00509644 296.44046021]
[186.15209961 281.71426392]
[183.29908752 266.98809814]
[171.46180725 266.95111084]
[160.55964661 264.15475464]
[151.19337463 259.03469849]
[143.24908447 271.75820923]
[135.30480957 284.48175049]
[127.36052704 297.20529175]
[119.41624451 309.92883301]
[111.47196960 322.65237427]
[110.72618866 338.45599365]
[97.42253876 345.15390015]
[89.47825623 357.87744141]
[81.53397369 370.60098267]
[81.50852966 387.00009155]
[67.16075897 394.94198608]
[53.25041199 386.25668335]
[54.08726883 369.87890625]
[68.81044006 362.65670776]
[76.75471497 349.93316650]
[84.69899750 337.20962524]
[84.87654114 322.31607056]
[98.74842834 314.70809937]
[106.69271088 301.98455811]
[114.63698578 289.26101685]
[122.58126831 276.53747559]
[130.52554321 263.81393433]
[138.46983337 251.09040833]
[126.23103333 232.50178528]
[124.98110199 210.16740417]
[135.17219543 190.12702942]
[126.04869080 178.22065735]
[116.92517853 166.31430054]
[107.80166626 154.40792847]
[98.67815399 142.50157166]
[89.55464172 130.59519958]
[76.02531433 124.11775208]
[61.02960968 124.47653198]
[46.03390121 124.83530426]
[32.42274094 132.90046692]
[19.51404572 125.46980286]
[4.51833630 125.82858276]
[-10.47737217 126.18735504]
[-25.47308159 126.54613495]
[-36.19512177 138.15704346]
[-51.99000931 138.70208740]
[-63.48691940 127.85788727]
[-63.86493301 112.05812073]
[-52.89978409 100.67650604]
[-37.09690475 100.46556091]
[-25.83185768 111.55042267]
[-10.83614922 111.19165039]
[4.15955925 110.83287048]
[19.15526772 110.47409058]
[31.69383430 102.43459320]
[45.67512131 109.83959961]
[60.67083359 109.48081970]
[75.66654205 109.12204742]
[80.14225769 94.80534363]
[68.02108002 85.96922302]
[55.89990234 77.13310242]
[43.77872086 68.29698181]
[31.65754318 59.46086502]
[19.53636360 50.62474442]
[7.41518450 41.78862381]
[-8.59321499 42.84251404]
[-19.29131126 30.88716888]
[-16.47243881 15.09370327]
[-2.29899693 7.57751513]
[12.35636330 14.10437965]
[16.25130463 29.66744423]
[28.37248421 38.50356293]
[40.49366379 47.33968353]
[52.61484146 56.17580414]
[64.73602295 65.01192474]
[76.85720062 73.84804535]
[88.97837830 82.68416595]
[100.81162262 73.46600342]
[95.20977783 59.55128860]
[89.60793304 45.63657379]
[84.00608826 31.72185516]
[68.92243195 28.08003044]
[58.88575745 16.24597740]
[57.75537491 0.77012891]
[65.96594238 -12.39673328]
[80.36032104 -18.19168282]
[95.40358734 -14.38644314]
[105.31128693 -2.44420624]
[106.27371979 13.04299355]
[97.92080688 26.12001228]
[103.52265167 40.03472900]
[109.12448883 53.94944382]
[114.72633362 67.86415863]
[122.22537994 67.74456024]
[121.98618317 52.74647141]
[117.12405396 38.55634308]
[129.11720276 29.54721069]
[141.39146423 38.16941452]
[136.98428345 52.50727463]
[137.22348022 67.50536346]
[144.72251892 67.38576508]
[149.87779236 53.29949188]
[155.03306580 39.21321487]
[160.18832397 25.12693596]
[165.34359741 11.04065990]
[158.46330261 -3.18738055]
[163.73777771 -18.08555031]
[178.03776550 -24.81503105]
[192.87934875 -19.38333893]
[199.45726013 -5.01300240]
[193.86895752 9.77031326]
[179.42987061 16.19593048]
[174.27461243 30.28220558]
[169.11933899 44.36848450]
[163.96406555 58.45476151]
[158.80879211 72.54103851]
[137.21804810 121.95751190]
[101.46100616 121.47169495]
[110.58451843 133.37805176]
[119.70803070 145.28442383]
[128.83154297 157.19078064]
[137.95506287 169.09715271]
[147.07856750 181.00350952]
[154.86155701 177.21359253]
[163.36085510 175.00764465]
[172.25262451 174.52023315]
[181.18798828 175.81948853]
[189.80676270 178.90245056]
[197.75186157 183.69337463]
[204.68417358 190.04487610]
[210.29684448 197.74217224]
[214.32870483 206.51014709]
[216.57612610 216.02311707]
[216.90277100 225.91682434]
[231.90229797 225.79721069]
[246.90182495 225.67761230]
[261.90133667 225.55801392]
[276.90087891 225.43841553]
[291.90039062 225.31880188]
[306.89990234 225.19920349]
[321.89944458 225.07960510]
[329.40267944 211.67822266]
[342.60955811 203.83769226]
[357.96749878 203.66708374]
[371.34530640 211.21229553]
[379.14437866 224.44369507]
[379.26684570 239.80209351]
[371.67974854 253.15617371]
[358.42398071 260.91375732]
[343.06524658 260.98806763]
[329.73501587 253.35914612]
[322.01904297 240.07911682]
[307.01950073 240.19873047]
[292.01998901 240.31832886]
[277.02047729 240.43792725]
[262.02093506 240.55754089]
[247.02142334 240.67713928]
[232.02189636 240.79673767]
[217.02236938 240.91633606]
[212.27310181 246.72102356]
[225.49375916 253.80722046]
[238.71441650 260.89340210]
[251.93507385 267.97961426]
[265.15573120 275.06579590]
[278.37640381 282.15200806]
[293.27890015 283.85949707]
[305.74151611 292.20715332]
[312.99230957 305.33828735]
[313.41854858 320.33221436]
[306.92544556 333.85403442]
[294.95721436 342.89624023]
[280.17578125 345.44760132]
[265.86886597 340.94070435]
[255.21859741 330.37796021]
[250.59381104 316.10858154]
[241.02995300 304.55294800]
[231.46609497 292.99731445]
[221.90225220 281.44168091]
[212.33839417 269.88604736]
[202.77455139 258.33038330]
[198.02526855 264.13507080]
[200.87826538 278.86126709]
[203.73127747 293.58743286]
[218.57720947 296.98129272]
[230.75535583 306.12527466]
[238.15576172 319.43518066]
[239.49627686 334.60501099]
[234.54464722 349.00643921]
[224.15876770 360.14434814]
[210.13804626 366.08905029]
[194.91168213 365.81057739]
[181.11770630 359.35717773]
[171.14604187 347.84695435]
[166.72430420 333.27410889]
[168.61860657 318.16345215]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 184]
[2 183]
[3 182]
[6 29]
[7 28]
[8 27]
[9 26]
[10 25]
[11 24]
[13 22]
[14 21]
[15 20]
[32 124]
[33 123]
[34 122]
[35 121]
[36 120]
[37 119]
[38 59]
[39 58]
[40 57]
[42 55]
[43 54]
[44 53]
[45 52]
[60 78]
[61 77]
[62 76]
[63 75]
[64 74]
[65 73]
[66 72]
[79 94]
[80 93]
[81 92]
[82 91]
[102 117]
[103 116]
[104 115]
[105 114]
[106 113]
[135 160]
[136 159]
[137 158]
[138 157]
[139 156]
[140 155]
[141 154]
[142 153]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
