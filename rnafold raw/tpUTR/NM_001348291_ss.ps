%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 01:20:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAUGAUCUUUCAAGUGUUCCAGAGGCAAAAAAAAUAGGGUCUAGUAGAAUGGAAUCAUGUGUAAGAAGCAGAGUAAGUAUCCACUGGAAGAAUUAAUUAUUUAAUUUUCCACAGUUAUGGUGCAUCAAAUUUUGC\
) } def
/len { sequence length } bind def

/coor [
[112.89196777 117.31159973]
[107.44567871 120.25971222]
[101.38645172 121.54000854]
[95.21308899 121.04708099]
[89.43379211 118.82151794]
[84.52433014 115.04652405]
[80.88886261 110.03286743]
[78.82665253 104.19329071]
[64.01670837 101.81304932]
[49.20676804 99.43281555]
[34.39682007 97.05257416]
[19.54372787 102.50199890]
[8.20548916 92.84313202]
[-6.60445547 90.46289825]
[-21.45755005 95.91231537]
[-32.79578781 86.25345612]
[-47.60573196 83.87321472]
[-62.41567612 81.49297333]
[-77.25175476 79.28146362]
[-92.11204529 77.23896790]
[-106.97233582 75.19646454]
[-121.83262634 73.15396118]
[-136.69291687 71.11146545]
[-148.19757080 83.45440674]
[-164.62350464 86.50916290]
[-179.49845886 79.27236176]
[-187.07997131 64.75674438]
[-201.98289490 63.05303955]
[-208.47515869 76.73255920]
[-219.05917358 87.56111145]
[-232.58685303 94.36408997]
[-247.59082031 96.40355682]
[-262.44357300 93.45829773]
[-275.53399658 85.84777832]
[-285.44210815 74.39753723]
[-291.09317017 60.34961700]
[-291.87420654 45.22782135]
[-287.70046997 30.67245102]
[-279.02471924 18.26236916]
[-266.78805542 9.34372330]
[-252.31776428 4.88394356]
[-237.18350220 5.36679316]
[-223.02693176 10.73989677]
[-211.38365173 20.42041969]
[-203.51661682 33.35829163]
[-200.27919006 48.15010834]
[-185.37626648 49.85380936]
[-177.26831055 39.18735886]
[-164.84043884 33.89776993]
[-151.31674194 35.47417831]
[-140.26388550 43.60909271]
[-134.65040588 56.25117493]
[-119.79012299 58.29367447]
[-104.92983246 60.33617401]
[-90.06954193 62.37867355]
[-75.20925903 64.42117310]
[-68.09320831 62.19651031]
[-60.03543854 66.68302917]
[-45.22549438 69.06327057]
[-30.41555023 71.44350433]
[-16.62176132 65.82383728]
[-4.22421741 75.65295410]
[10.58572769 78.03318787]
[24.37951469 72.41352081]
[36.77706146 82.24263000]
[51.58700562 84.62287140]
[66.39694977 87.00310516]
[81.20689392 89.38334656]
[101.71800232 78.48389435]
[120.23966980 92.50000000]
[135.23966980 92.50000000]
[150.23966980 92.50000000]
[165.23966980 92.50000000]
[180.23966980 92.50000000]
[195.23966980 92.50000000]
[210.23966980 92.50000000]
[223.54946899 77.55761719]
[243.25286865 77.08815765]
[256.83682251 90.94893646]
[271.80184937 89.92530060]
[286.76687622 88.90166473]
[301.73190308 87.87802887]
[316.69692993 86.85439301]
[332.80432129 74.82837677]
[349.84130859 83.86610413]
[364.74426270 82.16240692]
[379.64718628 80.45870209]
[394.55010986 78.75499725]
[409.43267822 76.88177490]
[422.05075073 67.33741760]
[435.71304321 73.26962280]
[450.57333374 71.22712708]
[465.43362427 69.18462372]
[480.29391479 67.14212036]
[495.15420532 65.09962463]
[510.01449585 63.05712509]
[524.87481689 61.01462555]
[539.73510742 58.97212601]
[552.34948730 48.49316025]
[567.63586426 54.43110275]
[569.86889648 70.67750549]
[556.75140381 80.51946259]
[541.77758789 73.83241272]
[526.91729736 75.87491608]
[512.05700684 77.91741180]
[497.19671631 79.95991516]
[482.33642578 82.00241089]
[467.47613525 84.04491425]
[452.61584473 86.08740997]
[437.75555420 88.12991333]
[426.20037842 97.52817535]
[411.47518921 91.74206543]
[405.22323608 95.80412292]
[396.25381470 93.65792847]
[381.35089111 95.36163330]
[366.44796753 97.06533813]
[351.54501343 98.76904297]
[345.86233521 107.38748932]
[336.15280151 111.49843597]
[325.57546997 109.49908447]
[317.72058105 101.81941986]
[302.75555420 102.84306335]
[287.79052734 103.86669922]
[272.82546997 104.89033508]
[257.86044312 105.91397095]
[253.37371826 115.31033325]
[245.29974365 122.01345825]
[235.08137512 124.73697662]
[224.58218384 122.91377258]
[215.74655151 116.81239319]
[210.23966980 107.50000000]
[195.23966980 107.50000000]
[180.23966980 107.50000000]
[165.23966980 107.50000000]
[150.23966980 107.50000000]
[135.23966980 107.50000000]
[120.23966980 107.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 68]
[9 67]
[10 66]
[11 65]
[13 63]
[14 62]
[16 60]
[17 59]
[18 58]
[19 56]
[20 55]
[21 54]
[22 53]
[23 52]
[27 47]
[28 46]
[70 137]
[71 136]
[72 135]
[73 134]
[74 133]
[75 132]
[76 131]
[79 125]
[80 124]
[81 123]
[82 122]
[83 121]
[85 117]
[86 116]
[87 115]
[88 114]
[89 112]
[91 110]
[92 109]
[93 108]
[94 107]
[95 106]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
