%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:51:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCCCUAACACUUGCACCUGCCUUGCUCAAGAGCAGCCCCAAGGGUUCAGGGGUGUUUCUGUCUCCACCACCUUCACAGCAGUACCUGAUUCCCUACCGUGAAAACUCUUACUAAAUAAAACCGUCUUCCCUGAGA\
) } def
/len { sequence length } bind def

/coor [
[96.69704437 135.83776855]
[84.30801392 144.29423523]
[71.91897583 152.75070190]
[59.52994537 161.20716858]
[47.14091492 169.66363525]
[62.06755829 168.18200684]
[76.92352295 170.25575256]
[89.54568481 178.36013794]
[97.61392975 191.00543213]
[99.64518738 205.86726379]
[95.26608276 220.21380615]
[85.28156281 231.40797424]
[71.52692413 237.39212036]
[56.53046417 237.06625366]
[43.04900360 230.49049377]
[48.63306046 216.56863403]
[37.05809402 226.10906982]
[31.82396126 241.65049744]
[15.69639111 244.62263489]
[5.26604509 231.96798706]
[11.26276875 216.70458984]
[27.51764679 214.53410339]
[39.09261322 204.99366760]
[36.04725266 198.13977051]
[29.95652771 184.43200684]
[26.91116524 177.57810974]
[12.07274151 179.77383423]
[-2.76568270 181.96954346]
[-17.60410690 184.16526794]
[-30.10972404 194.77381897]
[-45.45653915 188.99392700]
[-47.85706329 172.77142334]
[-34.84184647 162.79464722]
[-19.79982376 169.32684326]
[-4.96139956 167.13111877]
[9.87702465 164.93540955]
[24.71544838 162.73968506]
[38.68444443 157.27459717]
[51.07347870 148.81813049]
[63.46250916 140.36166382]
[75.85153961 131.90519714]
[88.24057770 123.44873047]
[76.82437897 98.49157715]
[93.35603333 80.90574646]
[94.03384399 65.92106628]
[94.71165466 50.93638992]
[95.38946533 35.95170975]
[86.52254486 19.85755348]
[96.44541931 5.42697525]
[96.78441620 -9.56919384]
[97.12340546 -24.56536293]
[97.46239471 -39.56153107]
[97.80139160 -54.55770111]
[85.49652863 -66.93503571]
[85.90003967 -84.04664612]
[98.27818298 -95.37541199]
[98.27818298 -110.37541199]
[95.57395172 -115.03746033]
[95.04156494 -119.78929138]
[96.33791351 -123.76852417]
[98.82108307 -126.38307953]
[99.83737183 -141.34860229]
[100.85365295 -156.31414795]
[101.86993408 -171.27967834]
[88.38957977 -178.36486816]
[78.96156311 -190.32447815]
[75.21935272 -205.08644104]
[77.81130219 -220.09317017]
[86.28833771 -232.74464417]
[99.18177795 -240.84890747]
[114.25773621 -243.00187683]
[128.90422058 -238.83050537]
[140.58364868 -229.05754089]
[147.27247620 -215.37617493]
[147.81182861 -200.15681458]
[142.10824585 -186.03630066]
[131.14993286 -175.46107483]
[116.83546448 -170.26339722]
[115.81918335 -155.29785156]
[114.80290222 -140.33232117]
[113.78662109 -125.36679077]
[113.27818298 -110.37541199]
[113.27818298 -95.37541199]
[123.60659790 -87.58988953]
[127.59953308 -75.08260345]
[123.57525635 -62.38055420]
[112.79755402 -54.21870804]
[112.45856476 -39.22254181]
[112.11957550 -24.22637177]
[111.78057861 -9.23020172]
[111.44158936 5.76596689]
[119.59459686 14.77340031]
[119.38366699 27.32286453]
[110.37414551 36.62952042]
[109.69633484 51.61420059]
[109.01852417 66.59887695]
[108.34071350 81.58355713]
[116.67346954 86.07904816]
[122.52655792 94.34854889]
[124.21534729 105.01112366]
[120.82052612 115.95720673]
[135.65895081 118.15292358]
[150.49737549 120.34864044]
[165.33580017 122.54436493]
[177.87562561 112.92520142]
[193.53326416 115.07322693]
[203.01930237 127.71405792]
[200.70585632 143.34811401]
[187.96543884 152.69996643]
[172.35671997 150.22135925]
[163.14007568 137.38278198]
[148.30166626 135.18707275]
[133.46324158 132.99134827]
[118.62480927 130.79563904]
[130.59407043 139.83647156]
[145.22434998 143.14627075]
[158.68728638 149.76062012]
[170.24789429 159.31845093]
[179.27508545 171.29800415]
[185.27607727 185.04530334]
[187.92324829 199.80987549]
[187.07209778 214.78570557]
[182.76910400 229.15525818]
[175.24914551 242.13409424]
[164.92274475 253.01368713]
[152.35363770 261.20013428]
[138.22798157 266.24649048]
[123.31690216 267.87728882]
[108.43439484 266.00354004]
[94.39291382 260.72747803]
[81.95898438 252.33714294]
[71.81139374 241.29058838]
[64.50409698 228.19084167]
[60.43600845 213.75302124]
[59.82920456 198.76530457]
[62.71681213 184.04586792]
[68.94119263 170.39826965]
[78.16255951 158.56752014]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[4 39]
[5 38]
[16 23]
[17 22]
[26 37]
[27 36]
[28 35]
[29 34]
[44 97]
[45 96]
[46 95]
[47 94]
[49 91]
[50 90]
[51 89]
[52 88]
[53 87]
[56 83]
[57 82]
[61 81]
[62 80]
[63 79]
[64 78]
[101 114]
[102 113]
[103 112]
[104 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
