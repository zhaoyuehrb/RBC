%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 08:39:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAGGCAACAGUGGGAGGAGAGAACUGGUUUCCAGCAGUCCAUUGUGUGGCCUUCCCCAAGGUCACCAGCUCUGUACGCCCCAGGACGCAUUAACCCUUUGGGGCUGGGGUGGCCCGCCAUCCCCUGGAGUAAAUGCCUGUGCAAAGCCCUCCU\
) } def
/len { sequence length } bind def

/coor [
[79.33995819 188.55194092]
[75.33168030 191.24125671]
[69.76519012 205.17015076]
[64.19869232 219.09904480]
[58.63220215 233.02793884]
[67.01830292 246.08370972]
[66.09519958 261.57330322]
[56.21784973 273.54064941]
[41.18429947 277.38409424]
[26.77524948 271.62570190]
[18.53127670 258.47973633]
[19.62235641 243.00106812]
[29.62894440 231.14157104]
[44.70330429 227.46145630]
[50.26979828 213.53256226]
[55.83628845 199.60365295]
[61.40278244 185.67475891]
[66.68946075 171.63726807]
[71.69420624 157.49681091]
[76.69895172 143.35635376]
[81.70368958 129.21589661]
[86.70843506 115.07544708]
[77.16620636 112.49131775]
[68.41681671 104.86886597]
[56.74522781 115.54990387]
[42.58863831 110.91954041]
[27.98404121 114.34090424]
[13.37944508 117.76226807]
[-1.22515225 121.18363953]
[-7.11772156 135.53833008]
[-20.34003830 143.65928650]
[-35.80785370 142.42384338]
[-47.57347488 132.30703735]
[-51.11278152 117.19898987]
[-45.06483841 102.90906525]
[-31.75520134 94.93202209]
[-16.30170059 96.33519745]
[-4.64651871 106.57904053]
[9.95807838 103.15767670]
[24.56267548 99.73630524]
[39.16727066 96.31494141]
[49.79423904 85.87862396]
[64.99544525 90.26426697]
[66.92450714 83.01659393]
[70.78262329 68.52125549]
[72.71168518 61.27358627]
[61.74024582 51.04483032]
[53.27891922 47.45400238]
[50.65420914 40.49995422]
[39.88962936 30.05372238]
[29.12504768 19.60748863]
[18.36046791 9.16125488]
[7.59588623 -1.28497839]
[-3.16869450 -11.73121166]
[-13.93327522 -22.17744637]
[-24.69785690 -32.62368011]
[-40.72365570 -36.10302353]
[-45.46497345 -51.80181122]
[-34.04435349 -63.57047272]
[-18.21034622 -59.30242157]
[-14.25162315 -43.38825989]
[-3.48704195 -32.94202805]
[7.27753878 -22.49579239]
[18.04211998 -12.04955959]
[28.80670166 -1.60332584]
[39.57128143 8.84290791]
[50.33586121 19.28914070]
[61.10044479 29.73537445]
[71.96900177 40.07338715]
[82.94044495 50.30214310]
[97.54503632 53.72351074]
[111.91806793 49.43210983]
[126.29109192 45.14071274]
[137.30085754 33.77868271]
[151.70973206 37.55139160]
[166.08276367 33.25999451]
[180.45579529 28.96859741]
[194.82882690 24.67720032]
[209.20184326 20.38580322]
[221.31942749 11.54475880]
[229.79284668 -0.83269691]
[238.26625061 -13.21015263]
[246.73965454 -25.58760834]
[255.21305847 -37.96506500]
[263.68646240 -50.34252167]
[271.91049194 -62.88704300]
[279.88189697 -75.59360504]
[272.62466431 -89.12977600]
[273.12384033 -104.48055267]
[281.24514771 -117.51665497]
[294.80398560 -124.73143768]
[310.15313721 -124.18415833]
[323.16369629 -116.02203369]
[330.33596802 -102.44062805]
[329.74057007 -87.09327698]
[321.53768921 -74.10834503]
[307.93386841 -66.97870636]
[292.58847046 -67.62220001]
[284.61706543 -54.91563797]
[284.80703735 -50.09250641]
[281.93060303 -45.10947037]
[276.06390381 -41.86911774]
[267.59051514 -29.49166107]
[259.11709595 -17.11420441]
[250.64370728 -4.73674870]
[242.17028809 7.64070749]
[233.69688416 20.01816368]
[245.49827576 16.30975533]
[259.92398071 19.64168358]
[274.92324829 19.49160957]
[289.92248535 19.34153557]
[304.92175293 19.19146156]
[319.92098999 19.04138756]
[334.92022705 18.89131546]
[349.91949463 18.74124146]
[363.75592041 9.93866634]
[378.17031860 17.75897217]
[378.33438110 34.15729904]
[364.07934570 42.26445389]
[350.06954956 33.74048996]
[335.07031250 33.89056396]
[320.07107544 34.04063797]
[305.07180786 34.19071198]
[290.07257080 34.34078598]
[275.07330322 34.49085999]
[260.07406616 34.64093018]
[257.64254761 41.73584366]
[252.77954102 55.92566299]
[250.34802246 63.02057648]
[262.10217285 72.33936310]
[277.01144409 68.03894806]
[291.58950806 73.35493469]
[300.23080444 86.24320984]
[299.61260986 101.74796295]
[289.97256470 113.90730286]
[275.01754761 118.04572296]
[260.49801636 112.57190704]
[251.99702454 99.59065247]
[252.78340149 84.09352112]
[241.02923584 74.77473450]
[213.24458313 60.05555344]
[213.49324036 34.75883102]
[199.12022400 39.05022812]
[184.74719238 43.34162521]
[170.37416077 47.63302231]
[156.00112915 51.92441940]
[146.01942444 62.97949982]
[130.58248901 59.51374054]
[116.20946503 63.80513763]
[101.83643341 68.09653473]
[126.02644348 100.19844055]
[100.84889221 120.08019257]
[95.84414673 134.22064209]
[90.83940887 148.36109924]
[85.83466339 162.50155640]
[80.82991791 176.64201355]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 17]
[3 16]
[4 15]
[5 14]
[18 156]
[19 155]
[20 154]
[21 153]
[22 152]
[24 43]
[26 41]
[27 40]
[28 39]
[29 38]
[46 70]
[47 69]
[49 68]
[50 67]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
[71 150]
[72 149]
[73 148]
[75 146]
[76 145]
[77 144]
[78 143]
[79 142]
[80 107]
[81 106]
[82 105]
[83 104]
[84 103]
[85 102]
[86 99]
[87 98]
[109 126]
[110 125]
[111 124]
[112 123]
[113 122]
[114 121]
[115 120]
[129 140]
[130 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
