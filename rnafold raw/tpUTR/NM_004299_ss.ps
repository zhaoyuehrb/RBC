%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 21:09:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCACAUAAGACAUUUUCUUUUUUUGUUGUUUUGGACUACAUAUUUGCACUGAAGCAGAAUUGUUUUAUUAAAAAAAUCAUACAUUCCCA\
) } def
/len { sequence length } bind def

/coor [
[93.17579651 109.89881897]
[78.67580414 113.73940277]
[64.17580414 117.57999420]
[56.48760986 122.90937805]
[49.10890579 121.29364777]
[34.48498917 124.63146210]
[28.12904549 140.19487000]
[13.93109322 148.88514709]
[-2.49158549 147.49293518]
[-14.77581215 136.75355530]
[-29.27580833 140.59413147]
[-43.77580643 144.43472290]
[-58.27580261 148.27531433]
[-61.61938477 163.21113586]
[-71.52984619 174.87481689]
[-85.72983551 180.58610535]
[-100.95630646 179.03260803]
[-113.71031189 170.57128906]
[-121.06108093 157.14649963]
[-121.31947327 141.84317017]
[-114.42609406 128.17790222]
[-101.96499634 119.29084015]
[-86.79965973 117.22418976]
[-72.41495514 122.45285034]
[-62.11638641 133.77531433]
[-47.61639023 129.93472290]
[-33.11639404 126.09413910]
[-18.61639786 122.25355530]
[-14.91610336 109.30305481]
[-5.18378735 99.83539581]
[8.07487488 96.43936920]
[21.37025261 100.12071991]
[31.14717484 110.00754547]
[45.77109146 106.66973114]
[60.33522034 103.07999420]
[74.83521271 99.23941040]
[89.33521271 95.39881897]
[92.29553986 91.51402283]
[96.54119873 89.23356628]
[102.57910156 75.50244904]
[108.61701202 61.77132797]
[103.12543488 47.19462204]
[109.44434357 33.35532379]
[123.37484741 28.20977783]
[129.41275024 14.47865868]
[135.45066833 0.74753845]
[141.48857117 -12.98358154]
[147.52647400 -26.71470261]
[141.56202698 -41.35030365]
[147.77037048 -55.88412476]
[162.46821594 -61.69351196]
[176.93557739 -55.33185577]
[182.58924866 -40.57341385]
[176.07498169 -26.17410851]
[161.25759888 -20.67679405]
[155.21969604 -6.94567299]
[149.18177795 6.78544712]
[143.14387512 20.51656723]
[137.10595703 34.24768829]
[142.73017883 47.99191666]
[136.80247498 62.00323868]
[122.34812927 67.80923462]
[116.31022644 81.54035950]
[110.27231598 95.27147675]
[123.83631897 88.86696625]
[138.44754028 85.47397614]
[153.44580078 85.24582672]
[168.15345764 88.19280243]
[181.90600586 94.18177032]
[194.08204651 102.94213104]
[204.13145447 114.07807922]
[211.60018921 127.08645630]
[216.15078735 141.37953186]
[217.57765198 156.31152344]
[215.81629944 171.20774841]
[210.94633484 185.39518738]
[203.18775940 198.23280334]
[192.89115906 209.14059448]
[180.52172852 217.62571716]
[166.63833618 223.30477905]
[151.86828613 225.92120361]
[136.87892151 225.35676575]
[122.34745789 221.63697815]
[108.93048859 214.92990112]
[97.23419952 205.53858948]
[87.78706360 193.88734436]
[81.01591492 180.50259399]
[77.22668457 165.98908997]
[76.59058380 151.00257874]
[79.13635254 136.22018433]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 37]
[2 36]
[3 35]
[5 34]
[6 33]
[10 28]
[11 27]
[12 26]
[13 25]
[39 64]
[40 63]
[41 62]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
