%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 00:35:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUGCCCAGAAGCUAGCCCAGAAGCUUGGUUUGCCCUGGACCUGCAUCUCCUAGGGGCCGUGUGGGUGGUGAACAACAAAUACAGUCAUUCUGCUCAA\
) } def
/len { sequence length } bind def

/coor [
[81.62104797 132.91870117]
[69.21097565 121.75919342]
[62.83435822 106.33572388]
[47.84175873 105.86456299]
[32.84915924 105.39340210]
[17.85656166 104.92224121]
[2.86396265 105.39340210]
[-12.06946659 106.80503082]
[-27.00289536 108.21665192]
[-41.93632507 109.62827301]
[-50.84257889 119.12001038]
[-63.43128586 119.89693451]
[-72.81644440 112.08741760]
[-87.78684235 113.02928162]
[-101.07395935 121.61782837]
[-114.26194763 114.69494629]
[-129.23234558 115.63681030]
[-144.20274353 116.57866669]
[-159.17314148 117.52052307]
[-172.46025085 126.10907745]
[-185.64823914 119.18619537]
[-200.61865234 120.12805176]
[-216.04687500 127.15700531]
[-227.07208252 114.27753448]
[-217.74803162 100.11779022]
[-201.56050110 105.15765381]
[-186.59010315 104.21579742]
[-174.37377930 95.69461060]
[-160.11500549 102.55012512]
[-145.14460754 101.60826111]
[-130.17420959 100.66640472]
[-115.20380402 99.72454834]
[-102.98747253 91.20336151]
[-88.72870636 98.05887604]
[-73.75830078 97.11701965]
[-59.79888916 86.61061096]
[-43.34794998 94.69484711]
[-28.41452026 93.28322601]
[-13.48109150 91.87159729]
[1.45233798 90.45997620]
[3.37365675 88.18560791]
[6.39279461 86.60940552]
[10.21899509 86.18621063]
[14.39042377 87.24510193]
[18.32772255 89.92964172]
[33.32032013 90.40080261]
[48.31291962 90.87196350]
[63.30551910 91.34312439]
[68.50871277 79.27017975]
[77.54088593 69.71775055]
[89.30384064 63.84728622]
[102.36731720 62.37258530]
[115.14295959 65.47294617]
[126.07738495 72.77140808]
[133.84111023 83.38054657]
[137.49012756 96.01042938]
[152.42355347 97.42205048]
[167.35699463 98.83367920]
[182.29042053 100.24530029]
[196.75749207 93.84104919]
[208.70013428 102.74175262]
[223.16720581 96.33750153]
[235.10984802 105.23820496]
[250.04327393 106.64983368]
[264.97671509 108.06145477]
[279.91012573 109.47308350]
[294.37719727 103.06883240]
[306.31985474 111.96953583]
[321.25326538 113.38115692]
[328.33529663 99.93075562]
[340.02868652 90.21822357]
[354.55026245 85.72464752]
[369.68560791 87.13527679]
[383.12667847 94.23499298]
[392.82382202 105.94113922]
[397.29827881 120.46861267]
[395.86776733 135.60208130]
[388.75036621 149.03381348]
[377.03146362 158.71554565]
[362.49813843 163.17089844]
[347.36654663 161.72045898]
[333.94418335 154.58540344]
[324.27789307 142.85379028]
[319.84164429 128.31459045]
[304.90823364 126.90296173]
[291.50930786 133.40818787]
[278.49850464 124.40650940]
[263.56509399 122.99488831]
[248.63165283 121.58325958]
[233.69822693 120.17163849]
[220.29928589 126.67685699]
[207.28851318 117.67518616]
[193.88957214 124.18040466]
[180.87879944 115.17873383]
[165.94535828 113.76710510]
[151.01193237 112.35548401]
[136.07850647 110.94385529]
[127.81909943 125.44650269]
[114.10822296 134.96261597]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 48]
[4 47]
[5 46]
[6 45]
[7 40]
[8 39]
[9 38]
[10 37]
[13 35]
[14 34]
[16 32]
[17 31]
[18 30]
[19 29]
[21 27]
[22 26]
[56 97]
[57 96]
[58 95]
[59 94]
[61 92]
[63 90]
[64 89]
[65 88]
[66 87]
[68 85]
[69 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
