%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 19:19:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAACUGAAAGCCAGAAUCUGCUUCACCUCUUUUUACCUGCAAUACCCCCUUACCCCAAUACCAAGACCAACUGGCAUAGAGCCAACUGAGAUAAAUGCUAUUUAAAUAAAGUGUAUUUAAUGAAUUUCUCCAA\
) } def
/len { sequence length } bind def

/coor [
[110.79644775 167.30407715]
[95.82639313 166.35675049]
[83.51777649 157.78366089]
[77.43932343 144.07043457]
[79.35339355 129.19306946]
[88.70305634 117.46646118]
[78.53707123 128.49609375]
[68.37109375 139.52572632]
[58.20511246 150.55535889]
[54.64506531 159.06930542]
[47.67195129 161.71986389]
[37.25207520 172.50996399]
[40.07910538 187.76733398]
[33.36779022 201.75798035]
[19.69876480 209.10218811]
[4.32805157 206.97596741]
[-6.83399820 196.19689941]
[-9.49534798 180.90975952]
[-2.63265538 166.99275208]
[11.11523533 159.79725647]
[26.46197891 162.09008789]
[36.88185501 151.29998779]
[47.17547989 140.38938904]
[57.34145737 129.35975647]
[67.50743866 118.33011627]
[77.67341614 107.30048370]
[63.46404266 112.10606384]
[52.44927216 122.28814697]
[40.24177551 131.00462341]
[27.03528023 138.11718750]
[13.03935814 143.51293945]
[-1.52388167 147.10627747]
[-16.42333221 148.84016418]
[-31.42255211 148.68707275]
[-46.28351212 146.64945984]
[-60.77038193 142.75965881]
[-74.65325928 137.07937622]
[-87.71184540 129.69876099]
[-99.73889923 120.73494720]
[-110.54356384 110.33017731]
[-119.95437622 98.64957428]
[-127.82199860 85.87849426]
[-134.02157593 72.21959686]
[-138.45471191 57.88965988]
[-141.05108643 43.11606979]
[-141.76945496 28.13328362]
[-140.59844971 13.17906094]
[-137.55665588 -1.50928259]
[-132.69232178 -15.69865417]
[-126.08264923 -29.16387939]
[-117.83254242 -41.69127655]
[-108.07290649 -53.08203888]
[-96.95862579 -63.15541077]
[-84.66608429 -71.75153351]
[-71.39034271 -78.73399353]
[-57.34208298 -83.99197388]
[-42.74423981 -87.44205475]
[-27.82847214 -89.02946472]
[-12.83148098 -88.72902679]
[2.00874186 -86.54550171]
[16.45669365 -82.51354218]
[30.28309631 -76.69713593]
[43.26853561 -69.18858337]
[55.20693970 -60.10703278]
[65.90885162 -49.59661102]
[75.20445251 -37.82410812]
[82.94622040 -24.97634125]
[89.01129150 -11.25719929]
[93.30342865 3.11560631]
[95.75451660 17.91399002]
[96.32565308 32.90311432]
[95.00823212 47.84218216]
[94.47982788 62.83287048]
[102.13046265 49.93063354]
[109.78110504 37.02839661]
[117.43173981 24.12615967]
[114.86917877 8.28908920]
[125.75960541 -3.49132180]
[141.74882507 -2.17815042]
[150.57127380 11.22125149]
[145.45912170 26.42800903]
[130.33398438 31.77679825]
[122.68334198 44.67903519]
[115.03269958 57.58127213]
[107.38206482 70.48351288]
[109.69969177 77.61643219]
[124.37197113 80.73480225]
[114.33494568 91.88228607]
[116.65257263 99.01520538]
[130.42581177 104.95640564]
[144.19905090 110.89759827]
[157.97229004 116.83879852]
[172.18324280 121.63972473]
[186.73768616 125.26855469]
[201.29211426 128.89738464]
[215.84655762 132.52621460]
[230.40098572 136.15504456]
[244.95542908 139.78385925]
[259.50985718 143.41268921]
[272.94790649 135.53509521]
[287.65649414 139.42257690]
[295.08374023 152.28225708]
[309.63818359 155.91108704]
[324.19262695 159.53991699]
[339.79876709 154.50204468]
[351.78167725 165.69764709]
[347.81436157 181.60968018]
[331.97805786 185.86918640]
[320.56381226 174.09436035]
[306.00936890 170.46553040]
[291.45492554 166.83670044]
[278.85980225 174.70422363]
[264.04782104 171.23141479]
[255.88102722 157.96713257]
[241.32659912 154.33830261]
[226.77215576 150.70947266]
[212.21772766 147.08064270]
[197.66328430 143.45181274]
[183.10885620 139.82298279]
[168.55441284 136.19415283]
[175.76205444 149.34899902]
[173.01969910 164.09619141]
[161.56491089 173.78060913]
[146.56701660 174.03186035]
[134.79425049 164.73658752]
[131.55944824 150.08953857]
[138.32240295 136.70063782]
[152.03109741 130.61203003]
[138.25785828 124.67083740]
[124.48461914 118.72964478]
[110.71137238 112.78844452]
[124.02413940 119.70005798]
[131.82278442 132.51338196]
[131.84619141 147.51335144]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 26]
[7 25]
[8 24]
[9 23]
[11 22]
[12 21]
[73 85]
[74 84]
[75 83]
[76 82]
[89 131]
[90 130]
[91 129]
[92 128]
[93 120]
[94 119]
[95 118]
[96 117]
[97 116]
[98 115]
[99 114]
[102 111]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
