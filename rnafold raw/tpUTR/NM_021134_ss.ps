%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 06:37:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGGUGGCCAGCAGGGACGCGCCCCAGGUGGGCAGCUGUGGCAGAGCAGCGACCCGCGGCGGGGCGGCAUCCCCAGCUGGUUCGGGCCGUGACGGGGCGGCCAGCAGGGACGCGCCCCAGGUGGGCAGCUGUGGCAGAGCAGUCCCGACACCUAAAUAAAAGUCUUGCUGCAGGAGAAAGAGCCGGAA\
) } def
/len { sequence length } bind def

/coor [
[110.36170197 223.95190430]
[110.79344940 204.15051270]
[121.24118042 187.23167419]
[113.45663452 174.40979004]
[105.67209625 161.58789062]
[97.88755035 148.76600647]
[90.10300446 135.94410706]
[76.73790741 129.13426208]
[61.78914261 130.37294006]
[46.84037399 131.61163330]
[31.89160538 132.85032654]
[16.94283867 134.08901978]
[1.99407136 135.32771301]
[-12.87945843 146.16993713]
[-28.44836426 138.08860779]
[-43.37460709 139.57429504]
[-58.30084991 141.05998230]
[-73.22709656 142.54565430]
[-86.19306183 151.61175537]
[-99.62409973 145.17308044]
[-114.55034637 146.65876770]
[-129.46379089 148.26779175]
[-144.36343384 150.00006104]
[-159.26307678 151.73233032]
[-174.16271973 153.46459961]
[-189.06234741 155.19688416]
[-199.65858459 169.10510254]
[-216.69880676 171.01799011]
[-229.59684753 160.23805237]
[-244.46580505 162.21644592]
[-259.33477783 164.19482422]
[-274.20373535 166.17320251]
[-289.07269287 168.15159607]
[-298.67166138 180.41934204]
[-313.77908325 182.21388245]
[-325.41534424 172.98713684]
[-340.28430176 174.96553040]
[-355.15325928 176.94390869]
[-370.02221680 178.92228699]
[-384.89120483 180.90068054]
[-394.29467773 193.60302734]
[-409.93798828 195.85301208]
[-422.54022217 186.31573486]
[-424.62469482 170.64950562]
[-414.95471191 158.14883423]
[-399.26733398 156.23011780]
[-386.86956787 166.03170776]
[-372.00061035 164.05332947]
[-357.13165283 162.07495117]
[-342.26269531 160.09657288]
[-327.39373779 158.11817932]
[-318.57492065 146.16979980]
[-303.52386475 143.95161438]
[-291.05108643 153.28262329]
[-276.18212891 151.30424500]
[-261.31314087 149.32586670]
[-246.44419861 147.34747314]
[-231.57522583 145.36909485]
[-225.24679565 134.13301086]
[-213.42343140 128.51466370]
[-200.33129883 130.77061462]
[-190.79461670 140.29724121]
[-175.89498901 138.56497192]
[-160.99534607 136.83270264]
[-146.09570312 135.10043335]
[-131.19606018 133.36816406]
[-124.90372467 129.46574402]
[-116.03602600 131.73252869]
[-101.10978699 130.24684143]
[-89.21144104 121.28700256]
[-74.71277618 127.61941528]
[-59.78653336 126.13373566]
[-44.86029053 124.64804840]
[-29.93404770 123.16236877]
[-22.01997375 113.99903107]
[-9.58422565 112.64856720]
[0.75538117 120.37893677]
[15.70414829 119.14025116]
[30.65291595 117.90155792]
[45.60168457 116.66287231]
[60.55044937 115.42417908]
[75.49922180 114.18548584]
[69.72830200 102.56777954]
[69.58012390 88.70321655]
[75.84595490 75.33930969]
[87.97705841 65.44335175]
[87.72904968 50.44540024]
[87.48104095 35.44744873]
[87.23303223 20.44950104]
[86.98501587 5.45155096]
[86.73700714 -9.54639912]
[75.20560455 -20.35390663]
[74.77724457 -36.15238953]
[85.70606232 -47.56888580]
[101.50819397 -47.83019257]
[112.80850220 -36.78128052]
[112.90272522 -20.97727394]
[101.73496246 -9.79440784]
[101.98297119 5.20354176]
[102.23097992 20.20149040]
[102.47898865 35.19944000]
[102.72699738 50.19739151]
[102.97500610 65.19534302]
[109.44943237 68.98107910]
[117.02112579 56.03236008]
[129.96972656 63.60427094]
[122.39827728 76.55256653]
[128.87269592 80.33830261]
[142.06480408 73.19909668]
[155.25691223 66.05988312]
[168.44902039 58.92067337]
[181.64112854 51.78146362]
[194.77375793 44.53343201]
[207.84602356 37.17708206]
[220.73182678 29.49880409]
[233.42326355 21.50332832]
[246.11468506 13.50785255]
[253.66671753 -0.39456984]
[268.55944824 -0.63211656]
[281.25085449 -8.62759209]
[293.94229126 -16.62306786]
[294.83340454 -32.11453629]
[304.68603516 -44.10225677]
[319.71160889 -47.97671127]
[334.13253784 -42.24808884]
[342.40362549 -29.11916542]
[341.34451294 -13.63827801]
[331.36242676 -1.75814378]
[316.29568481 1.95308328]
[301.93777466 -3.93163967]
[289.24633789 4.06383610]
[276.55490112 12.05931187]
[269.91064453 25.38984489]
[254.11016846 26.19928169]
[241.41873169 34.19475937]
[228.72731018 42.19023514]
[227.59629822 45.54776001]
[224.77262878 48.51939011]
[220.45779419 50.31091690]
[215.20237732 50.24934387]
[202.13011169 57.60569763]
[197.83503723 63.63683319]
[188.78033447 64.97357178]
[175.58822632 72.11277771]
[162.39611816 79.25199127]
[149.20401001 86.39120483]
[136.01191711 93.53041077]
[131.53268433 112.25199890]
[118.84895325 124.69966888]
[102.92489624 128.15957642]
[110.70944214 140.98146057]
[118.49398041 153.80334473]
[126.27852631 166.62524414]
[134.06306458 179.44712830]
[144.51501465 177.34379578]
[155.11820984 178.23283386]
[165.03465271 182.03216553]
[173.48382568 188.43023682]
[179.80424500 196.91139221]
[183.50518799 206.79754639]
[184.30477905 217.30227661]
[182.15144348 227.59346008]
[177.22706604 236.85916138]
[169.93165588 244.37171936]
[176.63078308 257.79266357]
[183.32991028 271.21359253]
[196.41598511 280.10546875]
[195.17730713 294.94848633]
[201.87643433 308.36941528]
[208.57557678 321.79037476]
[223.87907410 322.03805542]
[237.30899048 329.37942505]
[245.77923584 342.12750244]
[247.34338379 357.35287476]
[241.64202881 371.55685425]
[229.98529053 381.47549438]
[215.05180359 384.82952881]
[200.27316284 380.84823608]
[189.04542542 370.44647217]
[183.94859314 356.01452637]
[186.15393066 340.86874390]
[195.15463257 328.48950195]
[188.45550537 315.06854248]
[181.75636292 301.64761353]
[169.14945984 293.71569824]
[169.90898132 277.91271973]
[163.20983887 264.49179077]
[156.51071167 251.07084656]
[136.94055176 251.10237122]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 82]
[9 81]
[10 80]
[11 79]
[12 78]
[13 77]
[15 74]
[16 73]
[17 72]
[18 71]
[20 69]
[21 68]
[22 66]
[23 65]
[24 64]
[25 63]
[26 62]
[29 58]
[30 57]
[31 56]
[32 55]
[33 54]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[86 103]
[87 102]
[88 101]
[89 100]
[90 99]
[91 98]
[108 147]
[109 146]
[110 145]
[111 144]
[112 143]
[113 141]
[114 140]
[115 136]
[116 135]
[117 134]
[119 132]
[120 131]
[121 130]
[164 188]
[165 187]
[166 186]
[168 184]
[169 183]
[170 182]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
