%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 13:12:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUCCCCAGGGCUGAAGCUGGGAUCCCGGCCAGCCAGGUGACCCCCACGCUCUGGAUGUCUCUGCUCUGUUCCUUCCCCGAGCCCCUGCCCCGGCUCCCCGCCAAAGCAACCCUGCCCACUCAGGCUUCAUCCUGCACAAUAAACUCCGGAAGCAAGUCAGUA\
) } def
/len { sequence length } bind def

/coor [
[122.15801239 173.47065735]
[121.01671600 158.51412964]
[119.87541962 143.55761719]
[118.73413086 128.60110474]
[111.85380554 125.61593628]
[105.88348389 139.37658691]
[99.91294098 153.13713074]
[86.15249634 147.16635132]
[92.12284851 133.40626526]
[98.09316254 119.64561462]
[91.21284485 116.66045380]
[79.51085663 126.04467010]
[67.80886078 135.42887878]
[56.10687256 144.81309509]
[44.40488434 154.19729614]
[41.62408066 160.27632141]
[36.88761139 163.51919556]
[32.07404327 163.70579529]
[20.02327156 172.63771057]
[7.97250175 181.56961060]
[-4.07826900 190.50151062]
[-16.12903976 199.43342590]
[-22.15631866 214.68478394]
[-38.41551208 216.82270813]
[-48.18055344 203.64787292]
[-41.40600586 188.71343994]
[-25.06094551 187.38264465]
[-13.01017380 178.45074463]
[-0.95940322 169.51884460]
[11.09136772 160.58692932]
[23.14213753 151.65502930]
[35.02067184 142.49531555]
[46.72266388 133.11109924]
[58.42465210 123.72689056]
[70.12664032 114.34267426]
[81.82863617 104.95846558]
[79.71563721 97.76226807]
[75.48965454 83.36987305]
[73.37665558 76.17367554]
[58.45882797 74.60575104]
[43.54100037 73.03782654]
[30.21850204 81.97597504]
[14.96804428 76.99570465]
[9.48847485 61.91744614]
[17.98324966 48.30795288]
[33.93590546 46.60725784]
[45.10892868 58.11999512]
[60.02675629 59.68792343]
[74.94458771 61.25584793]
[89.02362061 56.08084488]
[99.37480927 45.22483444]
[109.72599030 34.36882401]
[119.97335815 23.41476250]
[130.11598206 12.36364555]
[140.25860596 1.31252813]
[150.40122986 -9.73858929]
[160.54385376 -20.78970528]
[164.06318665 -29.26925278]
[170.98632812 -31.95232773]
[181.33750916 -42.80833817]
[168.35362244 -65.78260040]
[164.63270569 -91.87867737]
[170.66470337 -117.50911713]
[185.60025024 -139.15834045]
[207.37031555 -153.86485291]
[202.87107849 -168.17417908]
[198.37184143 -182.48350525]
[193.87260437 -196.79283142]
[182.35221863 -207.63679504]
[185.91572571 -222.09883118]
[171.16215515 -226.90628052]
[162.07928467 -239.48727417]
[162.15966797 -255.00413513]
[171.37240601 -267.49032593]
[186.17500305 -272.14465332]
[200.87556458 -267.17745972]
[209.82141113 -254.49867249]
[209.57269287 -238.98359680]
[200.22505188 -226.59806824]
[211.42362976 -216.77761841]
[208.18194580 -201.29206848]
[212.68118286 -186.98274231]
[217.18040466 -172.67341614]
[221.67964172 -158.36408997]
[234.35502625 -159.74447632]
[247.07255554 -158.83062744]
[259.42031860 -155.65213013]
[270.99844360 -150.31193542]
[279.81524658 -162.44718933]
[288.63201904 -174.58244324]
[283.99688721 -189.27331543]
[288.84432983 -203.70783997]
[301.11666870 -212.41722107]
[315.98623657 -212.23229980]
[324.80300903 -224.36755371]
[333.61978149 -236.50280762]
[332.54037476 -252.50950623]
[344.47863770 -263.22665405]
[360.27658081 -260.43298340]
[367.81536865 -246.27153015]
[361.31188965 -231.60578918]
[345.75503540 -227.68603516]
[336.93826294 -215.55078125]
[328.12149048 -203.41552734]
[332.89230347 -189.33087158]
[328.40158081 -174.96781921]
[316.17144775 -165.89712524]
[300.76727295 -165.76565552]
[291.95050049 -153.63040161]
[283.13369751 -141.49514771]
[288.49935913 -136.10041809]
[293.25552368 -130.16139221]
[297.34738159 -123.74655914]
[300.72769165 -116.92990112]
[303.35751343 -109.79005432]
[305.20648193 -102.40936279]
[320.15145874 -103.69299316]
[335.09640503 -104.97661591]
[345.08139038 -117.22715759]
[360.81253052 -118.74600983]
[372.95681763 -108.63207245]
[374.30926514 -92.88575745]
[364.06750488 -80.84907532]
[348.30776978 -79.66318512]
[336.38003540 -90.03163910]
[321.43505859 -88.74801636]
[306.49008179 -87.46438599]
[305.80377197 -78.81060791]
[304.06387329 -70.30305481]
[301.29586792 -62.06953812]
[297.54067993 -54.23385620]
[292.85409546 -46.91389084]
[287.30584717 -40.21986008]
[280.97872925 -34.25265503]
[273.96725464 -29.10231400]
[266.37625122 -24.84666824]
[258.31936646 -21.55016518]
[249.91723633 -19.26288986]
[241.29579163 -18.01980782]
[232.58436584 -17.84022713]
[223.91366577 -18.72750282]
[215.41389465 -20.66897392]
[207.21278381 -23.63614273]
[199.43365479 -27.58509636]
[192.19352722 -32.45715332]
[181.84234619 -21.60114288]
[171.59497070 -10.64708233]
[161.45234680 0.40403458]
[151.30972290 11.45515156]
[141.16709900 22.50626945]
[131.02447510 33.55738449]
[128.80838013 40.64382935]
[120.58200073 44.72000885]
[110.23081970 55.57601929]
[99.87963104 66.43202972]
[134.76057434 83.41133118]
[133.69064331 127.45980835]
[134.83193970 142.41632080]
[135.97323608 157.37284851]
[137.11453247 172.32936096]
[148.30351257 183.82658386]
[146.14796448 199.72416687]
[132.30145264 207.82684326]
[117.38581085 201.91894531]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 160]
[2 159]
[3 158]
[4 157]
[11 36]
[12 35]
[13 34]
[14 33]
[15 32]
[18 31]
[19 30]
[20 29]
[21 28]
[22 27]
[39 49]
[40 48]
[41 47]
[50 155]
[51 154]
[52 153]
[53 151]
[54 150]
[55 149]
[56 148]
[57 147]
[59 146]
[60 145]
[65 84]
[66 83]
[67 82]
[68 81]
[70 79]
[88 110]
[89 109]
[90 108]
[94 104]
[95 103]
[96 102]
[116 127]
[117 126]
[118 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
