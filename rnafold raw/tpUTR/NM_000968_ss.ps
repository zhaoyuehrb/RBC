%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 22:19:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCUUAAAUUUGAUUAUUCCAUAAAGGUCAAAUCAUUUUGGACAGCUUCUUUUGAAUAAAGACCUGAUUAUACAGGCAGUGAGAAACAUGA\
) } def
/len { sequence length } bind def

/coor [
[76.72881317 216.67565918]
[82.12318420 202.29524231]
[93.99523926 192.55102539]
[91.47372437 177.76448059]
[88.95221710 162.97793579]
[86.43070221 148.19137573]
[83.90918732 133.40483093]
[72.69445801 123.44342041]
[57.71371078 122.68367767]
[46.04307556 133.00036621]
[30.86128998 132.01647949]
[21.09782791 120.82672882]
[6.11708069 120.06699371]
[-8.86366749 119.30725861]
[-23.84441376 118.54751587]
[-38.82516098 117.78778076]
[-48.60139847 129.69288635]
[-63.34088516 133.51399231]
[-77.33853912 127.98862457]
[-85.30322266 115.43067932]
[-100.28396606 114.67094421]
[-113.10414886 124.31575775]
[-128.60137939 120.16663361]
[-134.88751221 105.40641022]
[-127.14036560 91.35787964]
[-111.30288696 88.79786682]
[-99.52423096 99.69019318]
[-84.54347992 100.44993591]
[-75.34919739 88.76219940]
[-60.86437225 84.68129730]
[-46.58708572 89.97396851]
[-38.06542587 102.80703735]
[-23.08467674 103.56677246]
[-8.10392952 104.32650757]
[6.87681818 105.08625031]
[21.85756493 105.84598541]
[32.70298386 95.70140076]
[47.90641403 96.25847626]
[58.47344971 107.70293427]
[73.45419312 108.46266937]
[58.73601151 105.56870270]
[47.22941208 95.94591522]
[41.77736282 81.97182465]
[43.72692108 67.09905243]
[52.59640503 55.00226593]
[66.19440460 48.67024612]
[81.16121674 49.66746521]
[93.79895782 57.74753571]
[100.98577118 70.91645813]
[109.96572113 58.90143967]
[118.94566345 46.88642502]
[127.92560577 34.87140656]
[136.90554810 22.85639191]
[136.04251099 6.83656883]
[148.12449646 -3.71829271]
[163.88323975 -0.71140665]
[171.22999573 13.55060101]
[164.52894592 28.12714005]
[148.92056274 31.83633423]
[139.94062805 43.85135269]
[130.96067810 55.86636734]
[121.98073578 67.88138580]
[113.00079346 79.89640045]
[119.37831116 93.47312164]
[134.35905457 94.23285675]
[149.33979797 94.99259186]
[164.32055664 95.75232697]
[175.87805176 84.97273254]
[191.66963196 85.60628510]
[202.32644653 97.27710724]
[201.52597046 113.06111145]
[189.74311829 123.59392548]
[173.96846008 122.62661743]
[163.56082153 110.73307800]
[148.58006287 109.97334290]
[133.59931946 109.21360016]
[118.61856842 108.45386505]
[113.63786316 114.06123352]
[118.36968994 128.29533386]
[103.67644501 125.27595520]
[98.69573212 130.88331604]
[101.21724701 145.66987610]
[103.73876190 160.45642090]
[106.26027679 175.24296570]
[108.78178406 190.02951050]
[123.21229553 195.28842163]
[133.06771851 207.06832886]
[135.69700623 222.20048523]
[130.39289856 236.61444092]
[118.58215332 246.43289185]
[103.44181824 249.01473999]
[89.04457092 243.66546631]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 85]
[4 84]
[5 83]
[6 82]
[7 81]
[8 40]
[9 39]
[12 36]
[13 35]
[14 34]
[15 33]
[16 32]
[20 28]
[21 27]
[49 63]
[50 62]
[51 61]
[52 60]
[53 59]
[64 77]
[65 76]
[66 75]
[67 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
