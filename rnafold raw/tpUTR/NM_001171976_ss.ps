%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 03:10:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGGGCCCCCACUCUUCUGGACCCCUUGAAGAGGCCCUACCACACCCUAACUGCACCUGUCUCCCUGGAGAUGAAAAUAUAUGACGCUGCCCUGC\
) } def
/len { sequence length } bind def

/coor [
[62.39772415 168.50335693]
[39.61751938 149.60440063]
[25.50027466 123.58880615]
[10.83143711 126.72332001]
[-3.83740187 129.85783386]
[-18.50624084 132.99234009]
[-33.17507935 136.12686157]
[-47.84391785 139.26136780]
[-50.77528763 142.32148743]
[-54.16844177 144.20211792]
[-57.62550354 144.89801025]
[-60.78369141 144.52507019]
[-63.34945679 143.30027771]
[-65.12429810 141.51266479]
[-80.10659790 142.24108887]
[-95.08890533 142.96952820]
[-110.07120514 143.69795227]
[-125.05351257 144.42639160]
[-138.46165466 152.82473755]
[-151.54965210 145.71463013]
[-166.53195190 146.44305420]
[-180.01860046 155.77270508]
[-194.72387695 148.51412964]
[-195.52026367 132.13433838]
[-181.58850098 123.48344421]
[-167.26039124 131.46075439]
[-152.27809143 130.73231506]
[-139.94157410 122.38608551]
[-125.78194427 129.44409180]
[-110.79963684 128.71565247]
[-95.81733704 127.98722076]
[-80.83503723 127.25878906]
[-65.85272980 126.53035736]
[-50.97843170 124.59253693]
[-36.30959320 121.45802307]
[-21.64075470 118.32350922]
[-6.97191525 115.18899536]
[7.69692326 112.05448151]
[22.36576271 108.91996765]
[21.86602402 98.68756104]
[22.70913696 88.47770691]
[24.88061142 78.46588135]
[28.34312820 68.82415009]
[33.03717804 59.71822739]
[38.88208389 51.30460739]
[45.77739716 43.72789383]
[53.60460663 37.11829758]
[62.22919464 31.58942413]
[71.50292969 27.23628807]
[81.26642609 24.13370895]
[91.35189819 22.33500862]
[101.58599091 21.87109756]
[111.79283142 22.74995232]
[121.79698944 24.95646667]
[131.42654419 28.45271873]
[140.51597595 33.17861938]
[148.90907288 39.05294800]
[156.46160889 45.97474670]
[163.04374695 53.82505035]
[168.54240417 62.46894073]
[182.32984924 56.56080246]
[196.11730957 50.65266800]
[209.90476990 44.74452972]
[223.69221497 38.83639526]
[233.07804871 25.38878441]
[249.39154053 27.06274223]
[255.85076904 42.13624191]
[245.81103516 55.10296249]
[229.60035706 52.62384796]
[215.81289673 58.53198624]
[202.02545166 64.44012451]
[188.23799133 70.34825897]
[174.45053101 76.25639343]
[176.48022461 83.95584869]
[177.71588135 91.82187653]
[178.14466858 99.77281189]
[177.76213074 107.72610474]
[176.57223511 115.59918976]
[174.58732605 123.31031036]
[171.82804871 130.77941895]
[168.32301331 137.92897034]
[164.10862732 144.68472290]
[159.22865295 150.97654724]
[153.73373413 156.73910522]
[147.68093872 161.91259766]
[141.13310242 166.44326782]
[134.15820312 170.28411865]
[139.38983154 184.34222412]
[153.86355591 190.68940735]
[159.53198242 205.44218445]
[153.03211975 219.84799194]
[138.22023010 225.36012268]
[123.88394928 218.70832825]
[118.52872467 203.83898926]
[125.33172607 189.57383728]
[120.10010529 175.51573181]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 39]
[4 38]
[5 37]
[6 36]
[7 35]
[8 34]
[14 33]
[15 32]
[16 31]
[17 30]
[18 29]
[20 27]
[21 26]
[60 73]
[61 72]
[62 71]
[63 70]
[64 69]
[87 96]
[88 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
