%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:19:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGGAUCUUGGGCUGGGACUGGAUGUGCCAAUGGCCCUUCAGGGCCUGCCUGGCACCUCAGGUACUGGGCUAGGGUGUCUGCUAUGCCUGGUAUUGUUCUUGUCCAUUGCUGUCACCAAUAAAGGCAUGGAAGAACAGAGUGACAA\
) } def
/len { sequence length } bind def

/coor [
[87.75168610 158.95449829]
[99.81922913 149.45344543]
[97.59858704 134.61872864]
[95.37794495 119.78401947]
[85.33219147 114.05795288]
[80.03764343 103.77822876]
[65.31054688 100.92998505]
[50.58344269 98.08174896]
[35.85634232 95.23350525]
[21.12924004 92.38526154]
[6.40213776 89.53701782]
[-8.32496357 86.68877411]
[-23.34324646 91.66489410]
[-34.36978912 81.65167236]
[-49.09688950 78.80342865]
[-63.82398987 75.95518494]
[-78.55109406 73.10694122]
[-93.56937408 78.08306122]
[-104.59591675 68.06983948]
[-119.32302094 65.22159576]
[-134.05012512 62.37335205]
[-149.06840515 67.34947205]
[-160.09494019 57.33624649]
[-174.82203674 54.48800278]
[-189.84033203 59.46412277]
[-200.86686707 49.45089722]
[-215.59396362 46.60265732]
[-230.32107544 43.75441360]
[-245.04817200 40.90616989]
[-259.77526855 38.05792999]
[-274.50238037 35.20968628]
[-289.71176147 46.41399384]
[-307.98187256 43.07188416]
[-317.89489746 27.74198151]
[-332.72961426 25.52134132]
[-347.56433105 23.30070305]
[-362.39904785 21.08006287]
[-377.23376465 18.85942268]
[-392.28674316 25.36634254]
[-405.28518677 15.36771393]
[-402.85739136 -0.85073078]
[-387.50088501 -6.60484648]
[-375.01312256 4.02470732]
[-360.17840576 6.24534750]
[-345.34368896 8.46598721]
[-330.50897217 10.68662739]
[-315.67425537 12.90726757]
[-308.12863159 4.24255753]
[-297.21386719 0.28521913]
[-285.63085938 2.13863993]
[-276.30651855 9.45265484]
[-271.65414429 20.48258400]
[-256.92703247 23.33082771]
[-242.19993591 26.17906952]
[-227.47282410 29.02731133]
[-212.74572754 31.87555504]
[-198.01863098 34.72379684]
[-184.05372620 29.54395294]
[-171.97380066 39.76090240]
[-157.24670410 42.60914612]
[-143.28179932 37.42930222]
[-131.20187378 47.64625168]
[-116.47477722 50.49449158]
[-101.74767303 53.34273529]
[-87.78276825 48.16289139]
[-75.70285034 58.37984085]
[-60.97574615 61.22808456]
[-46.24864578 64.07632446]
[-31.52154541 66.92456818]
[-17.55664253 61.74472427]
[-5.47672129 71.96167755]
[9.25038052 74.80991364]
[23.97748184 77.65815735]
[38.70458221 80.50640106]
[53.43168259 83.35464478]
[68.15878296 86.20288849]
[82.88588715 89.05113220]
[100.21562958 79.68438721]
[117.34265137 89.41684723]
[132.12689209 86.88183594]
[146.91113281 84.34682465]
[159.20518494 74.38858032]
[173.05700684 79.86366272]
[187.84123230 77.32865143]
[202.62547302 74.79364014]
[217.40971375 72.25862885]
[232.19395447 69.72361755]
[246.97819519 67.18860626]
[261.76242065 64.65358734]
[276.54666138 62.11857986]
[284.65362549 52.02854538]
[297.06890869 50.25267029]
[307.02020264 57.20602417]
[321.85491943 54.98538589]
[336.68963623 52.76474380]
[351.52435303 50.54410553]
[366.35906982 48.32346344]
[371.02749634 32.77100372]
[381.95938110 20.84266090]
[396.93878174 14.88159752]
[412.96166992 16.02890587]
[426.83828735 24.00554657]
[435.82821655 37.17799377]
[450.61245728 34.64297867]
[461.01290894 22.42782211]
[477.04241943 23.08719063]
[486.40447998 36.11527634]
[481.91735840 51.51804352]
[467.02316284 57.47981262]
[453.14746094 49.42721939]
[438.36322021 51.96223068]
[435.18948364 65.50455475]
[427.05783081 76.84268951]
[415.17480469 84.23750305]
[401.32531738 86.53918457]
[387.60461426 83.36589813]
[376.10137939 75.16667175]
[368.57971191 63.15818024]
[353.74499512 65.37882233]
[338.91027832 67.59945679]
[324.07556152 69.82009888]
[309.24084473 72.04074097]
[296.16198730 83.69725037]
[279.08169556 76.90281677]
[264.29745483 79.43782806]
[249.51319885 81.97283936]
[234.72897339 84.50785065]
[219.94473267 87.04286957]
[205.16049194 89.57788086]
[190.37625122 92.11289215]
[175.59201050 94.64790344]
[164.35542297 104.42482758]
[149.44613647 99.13106537]
[134.66189575 101.66607666]
[119.87766266 104.20108795]
[116.46191406 111.90697479]
[110.21266174 117.56337738]
[112.43330383 132.39808655]
[114.65394592 147.23280334]
[128.97465515 152.78375244]
[138.58876038 164.76141357]
[140.91012573 179.94386292]
[135.31433105 194.24710083]
[123.30658722 203.82362366]
[108.11693573 206.09739685]
[93.83131409 200.45677185]
[84.29247284 188.41908264]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 139]
[3 138]
[4 137]
[6 77]
[7 76]
[8 75]
[9 74]
[10 73]
[11 72]
[12 71]
[14 69]
[15 68]
[16 67]
[17 66]
[19 64]
[20 63]
[21 62]
[23 60]
[24 59]
[26 57]
[27 56]
[28 55]
[29 54]
[30 53]
[31 52]
[34 47]
[35 46]
[36 45]
[37 44]
[38 43]
[79 135]
[80 134]
[81 133]
[83 131]
[84 130]
[85 129]
[86 128]
[87 127]
[88 126]
[89 125]
[90 124]
[93 122]
[94 121]
[95 120]
[96 119]
[97 118]
[103 111]
[104 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
