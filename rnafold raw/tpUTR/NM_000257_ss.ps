%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 17:17:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUGCCACAUCUUGAUCUGCUCAGCCCUGGAGGUGCCAGCAAAGCCCCAUGCUGGAGCCUGUGUAACAGCUCCUUGGGAGGAAGCAGAAUAAAGCAAUUUUCCUUGAAGCCGAGA\
) } def
/len { sequence length } bind def

/coor [
[155.12921143 344.28167725]
[156.81201172 327.98937988]
[166.50534058 314.67102051]
[160.25746155 301.03414917]
[154.00958252 287.39727783]
[147.76171875 273.76040649]
[140.35934448 272.99667358]
[133.65353394 269.61431885]
[128.54673767 264.01358032]
[125.74563599 256.89666748]
[125.66359711 249.17991638]
[128.36045837 241.87582397]
[133.52821350 235.96020508]
[129.16189575 221.60975647]
[124.79558563 207.25930786]
[113.68859100 197.33540344]
[117.07377625 181.88059998]
[112.70746613 167.53015137]
[108.34114838 153.17970276]
[103.97483826 138.82925415]
[99.60852051 124.47880554]
[95.24221039 110.12836456]
[90.68363190 95.83782959]
[76.82424927 88.72760773]
[72.20973969 74.23068237]
[79.07365417 61.06169510]
[74.32363129 46.83364868]
[69.57361603 32.60560226]
[55.52121353 20.79977417]
[59.54248428 3.77524519]
[54.41218185 -10.32014465]
[49.28187943 -24.41553307]
[44.15158081 -38.51092148]
[32.16095734 -48.83253098]
[35.07865906 -63.43856812]
[29.94835663 -77.53395844]
[22.79982567 -90.72101593]
[13.78869152 -102.71265411]
[4.77755785 -114.70429993]
[-4.23357630 -126.69593811]
[-13.24470997 -138.68757629]
[-22.25584412 -150.67921448]
[-37.76815033 -150.29460144]
[-50.52480698 -159.12904358]
[-55.62061691 -173.78552246]
[-51.09613800 -188.62832642]
[-38.69112778 -197.95008850]
[-23.17555809 -198.16639709]
[-10.51548958 -189.19409180]
[-5.57897377 -174.48320007]
[-10.26420212 -159.69035339]
[-1.25306857 -147.69871521]
[7.75806522 -135.70707703]
[16.76919937 -123.71543121]
[25.78033257 -111.72379303]
[34.79146576 -99.73214722]
[35.49733734 -114.71553040]
[42.94273758 -127.73728180]
[55.49731445 -135.94596863]
[70.41193390 -137.54411316]
[84.42068481 -132.18174744]
[94.45600128 -121.03309631]
[98.32041168 -106.53943634]
[95.16770935 -91.87449646]
[85.68825531 -80.24952698]
[71.95780182 -74.21009827]
[56.98297119 -75.07868958]
[44.04374695 -82.66426086]
[49.17404938 -68.56887054]
[60.79771423 -59.25545883]
[58.24696732 -43.64122391]
[63.37726974 -29.54583549]
[68.50757599 -15.45044613]
[73.63787842 -1.35505712]
[84.52770996 4.09677410]
[88.87287903 15.90346241]
[83.80165863 27.85558128]
[88.55168152 42.08362961]
[93.30170441 56.31167603]
[106.70018005 62.71607971]
[111.72005463 77.07767487]
[104.91168213 91.08780670]
[110.31552124 97.22168732]
[109.59265900 105.76204681]
[113.95896912 120.11249542]
[118.32528687 134.46293640]
[122.69159698 148.81338501]
[127.05790710 163.16383362]
[131.42422485 177.51428223]
[142.84353638 188.46463013]
[139.14602661 202.89299011]
[143.51234436 217.24343872]
[147.87866211 231.59388733]
[166.30798340 245.61695862]
[161.39857483 267.51254272]
[167.64645386 281.14941406]
[173.89433289 294.78628540]
[180.14219666 308.42312622]
[194.18809509 309.02587891]
[206.53167725 315.61550903]
[214.76939392 326.84371948]
[217.32546997 340.46551514]
[213.75305176 353.78796387]
[204.81114197 364.20257568]
[210.69064331 378.00228882]
[216.57014465 391.80197144]
[222.44964600 405.60165405]
[235.87773132 415.01538086]
[234.16990662 431.32537842]
[219.08303833 437.75329590]
[206.13719177 427.68664551]
[208.64994812 411.48117065]
[202.77044678 397.68145752]
[196.89094543 383.88177490]
[191.01145935 370.08209229]
[174.98544312 368.55453491]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 98]
[4 97]
[5 96]
[6 95]
[13 93]
[14 92]
[15 91]
[17 89]
[18 88]
[19 87]
[20 86]
[21 85]
[22 84]
[23 82]
[26 79]
[27 78]
[28 77]
[30 74]
[31 73]
[32 72]
[33 71]
[35 69]
[36 68]
[37 56]
[38 55]
[39 54]
[40 53]
[41 52]
[42 51]
[104 115]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
