%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 09:03:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCUGCCAGCCUGAGGUGCCCACUCCGCCAGCCACAGGACCACCUCCUCUGCCAGCAGGAAUAAAGACUUGUGCAUCCCUCAA\
) } def
/len { sequence length } bind def

/coor [
[141.12133789 154.47763062]
[140.05207825 147.48799133]
[141.12962341 140.45794678]
[129.15936279 131.41842651]
[117.18910217 122.37889862]
[105.21884155 113.33937836]
[91.36789703 111.43075562]
[85.74163818 98.63087463]
[73.77137756 89.59136200]
[61.80112076 80.55184174]
[48.61787415 83.94460297]
[36.09800720 79.12152100]
[28.81439590 68.08815002]
[29.28510666 55.07204437]
[17.65704727 45.59637833]
[6.02898693 36.12071228]
[-5.59907293 26.64504814]
[-17.22713280 17.16938210]
[-28.85519218 7.69371796]
[-37.37355804 10.22970676]
[-46.08612442 9.05034447]
[-53.46117020 4.44246769]
[-58.23489761 -2.71141291]
[-59.62774277 -11.10113239]
[-57.47084808 -19.22852898]
[-67.57627869 -30.31366348]
[-77.68171692 -41.39879608]
[-92.66765594 -38.03468704]
[-107.32312012 -42.62956619]
[-117.70586395 -53.94743347]
[-121.02298737 -68.94384003]
[-116.38219452 -83.58483124]
[-105.03182983 -93.93205261]
[-90.02510071 -97.20214844]
[-75.39872742 -92.51548767]
[-65.08713531 -81.13275146]
[-61.86409378 -66.11583710]
[-66.59658051 -51.50423050]
[-56.49114990 -40.41909790]
[-46.38571548 -29.33396339]
[-25.20224762 -25.42821693]
[-19.37952614 -3.93434167]
[-7.75146723 5.54132318]
[3.87659240 15.01698875]
[15.50465202 24.49265289]
[27.13271141 33.96831894]
[38.76077271 43.44398499]
[55.28448105 40.96945953]
[68.82208252 51.32221985]
[70.84063721 68.58158112]
[82.81089783 77.62110138]
[94.78115845 86.66062164]
[108.63210297 88.56924438]
[114.25836182 101.36912537]
[126.22862244 110.40863800]
[138.19888306 119.44815826]
[150.16914368 128.48768616]
[174.64683533 127.88359833]
[185.79484558 148.95706177]
[199.67941284 154.63323975]
[213.56398010 160.30940247]
[227.74172974 165.20747375]
[242.16911316 169.31242371]
[256.59649658 173.41737366]
[271.02389526 177.52230835]
[286.78710938 172.99977112]
[298.39578247 184.58296204]
[293.90795898 200.35607910]
[277.94027710 204.09309387]
[266.91894531 191.94970703]
[252.49156189 187.84475708]
[238.06417847 183.73980713]
[223.63679504 179.63487244]
[220.22821045 181.21682739]
[215.83732605 181.06994629]
[211.36395264 178.73074341]
[207.88781738 174.19396973]
[194.00325012 168.51779175]
[180.11868286 162.84162903]
[174.96752930 167.25405884]
[168.69416809 169.93901062]
[161.86381531 170.62777710]
[155.09999084 169.23272705]
[149.02758789 165.85754395]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 57]
[4 56]
[5 55]
[6 54]
[8 52]
[9 51]
[10 50]
[14 47]
[15 46]
[16 45]
[17 44]
[18 43]
[19 42]
[25 40]
[26 39]
[27 38]
[59 79]
[60 78]
[61 77]
[62 73]
[63 72]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
