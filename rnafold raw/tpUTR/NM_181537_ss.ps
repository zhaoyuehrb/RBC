%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 07:28:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCCAGCCUCUGAGACAGAAUGGCCCCCAAAUUAAAAUACCAAAAUGAAGCUAGUUUCCUAAAUAAGGGUCCCCUUAUUUUUCUGCUUUUCUUCCAAUGAAUUAAGACAAGUUAUUUUUAGAAUAGUACCAUUUCUUUGGCUUUUUCUCUAUGGUGGUGUUUCAAUAAAAGUUCUUCCUGUUGCAAGUCA\
) } def
/len { sequence length } bind def

/coor [
[121.66020966 122.97960663]
[115.26491547 128.54393005]
[107.44101715 132.31410217]
[98.69541931 133.92512512]
[89.62736511 133.15599060]
[80.88737488 129.95268250]
[73.13061523 124.43944550]
[65.63061523 137.42982483]
[58.13061905 150.42021179]
[50.84416580 163.53157043]
[43.77321625 176.76039124]
[36.70226288 189.98919678]
[29.63131332 203.21801758]
[27.49719429 220.03710938]
[10.74461460 222.64237976]
[3.60358381 207.26571655]
[16.40249443 196.14706421]
[23.47344589 182.91825867]
[30.54439735 169.68943787]
[37.61534882 156.46061707]
[37.10526657 151.69732666]
[39.59321976 146.56529236]
[45.14023590 142.92021179]
[52.64023590 129.92982483]
[60.14023590 116.93944550]
[47.33044815 124.74388885]
[34.52065659 132.54832458]
[21.71086693 140.35276794]
[12.96441936 152.53881836]
[1.03007853 161.62570190]
[-13.04366016 166.81509399]
[-28.02034569 167.65109253]
[-42.58419800 164.06024170]
[-55.45570374 156.35801697]
[-65.50403595 145.22109985]
[-71.84639740 131.62791443]
[-73.92557526 116.77272034]
[-71.55890656 101.96060181]
[-64.95431519 88.49288177]
[-54.69204330 77.55278015]
[-41.67369080 70.10144043]
[-27.04298592 66.79349518]
[-12.08531475 67.91957092]
[1.88521516 73.38073730]
[13.63975048 82.69562531]
[28.10016441 86.68265533]
[42.56058121 90.66968536]
[57.02099609 94.65670776]
[46.24227142 84.22507477]
[35.46354675 73.79343414]
[24.68482208 63.36179352]
[7.20977354 63.97251511]
[-5.06430960 51.99731064]
[-4.89112329 35.18764496]
[-15.83908463 24.93375969]
[-26.78704643 14.67987442]
[-39.95264053 19.43116570]
[-53.81446075 18.04953194]
[-65.67000580 10.86168480]
[-73.23265076 -0.67929584]
[-75.07262421 -14.28737926]
[-70.88700104 -27.29631233]
[-81.66572571 -37.72795105]
[-92.44444275 -48.15959167]
[-103.22316742 -58.59123230]
[-114.00189209 -69.02287292]
[-124.78061676 -79.45451355]
[-135.55934143 -89.88614655]
[-146.33807373 -100.31778717]
[-162.36856079 -103.77542114]
[-167.13114929 -119.46776581]
[-155.72648621 -131.25189209]
[-139.88670349 -127.00529480]
[-135.90643311 -111.09651184]
[-125.12770081 -100.66487122]
[-114.34897614 -90.23323822]
[-103.57025146 -79.80159760]
[-92.79153442 -69.36995697]
[-82.01280975 -58.93831635]
[-71.23408508 -48.50667572]
[-60.45535660 -38.07503891]
[-45.03847885 -42.89097595]
[-29.20436287 -39.25856781]
[-17.29129601 -28.07597923]
[-12.61208057 -12.32314587]
[-16.53316116 3.73191357]
[-5.58519983 13.98579788]
[5.36276102 24.23968315]
[18.06503105 22.02096558]
[29.90042114 27.61137199]
[36.44691467 39.17023087]
[35.11646271 52.58306885]
[45.89518738 63.01470947]
[56.67390823 73.44635010]
[67.45263672 83.87799072]
[83.48314667 69.43687439]
[103.96865082 67.07858276]
[121.18570709 76.58221436]
[129.27519226 93.45435333]
[144.26716614 93.94513702]
[159.25912476 94.43592834]
[166.38189697 80.98127747]
[178.59028625 71.99005890]
[193.43110657 69.20249939]
[207.95085144 73.11886597]
[219.28356934 82.91063690]
[225.21650696 96.59514618]
[240.20848083 97.08592987]
[255.20043945 97.57672119]
[270.19241333 98.06750488]
[284.23834229 90.78587341]
[296.70565796 98.93545532]
[310.01245117 85.46813965]
[328.61898804 85.97825623]
[340.74490356 99.67689514]
[355.74490356 99.67689514]
[370.74490356 99.67689514]
[385.74490356 99.67689514]
[400.74490356 99.67689514]
[415.74490356 99.67689514]
[430.74490356 99.67689514]
[445.74038696 99.30877686]
[460.72232056 98.57276154]
[475.70422363 97.83674622]
[490.68615723 97.10073090]
[505.66809082 96.36471558]
[519.07202148 87.95959473]
[532.16357422 95.06307220]
[547.14550781 94.32705688]
[562.12744141 93.59104156]
[577.10937500 92.85502625]
[592.09130859 92.11901093]
[607.07324219 91.38299561]
[611.01885986 76.77863312]
[619.28601074 64.10942078]
[631.06481934 54.61655426]
[645.20135498 49.23005676]
[660.31060791 48.47763824]
[674.91229248 52.43301392]
[687.57598877 60.70867538]
[697.06097412 72.49385834]
[702.43798828 86.63397217]
[703.18023682 101.74371338]
[699.21508789 116.34277344]
[690.93096924 129.00090027]
[679.13940430 138.47796631]
[664.99572754 143.84552002]
[649.88549805 144.57768250]
[635.28906250 140.60275269]
[622.63647461 132.31011963]
[613.16735840 120.51223755]
[607.80926514 106.36492920]
[592.82733154 107.10094452]
[577.84539795 107.83695984]
[562.86346436 108.57297516]
[547.88153076 109.30899048]
[532.89959717 110.04500580]
[520.56732178 118.39748383]
[506.40411377 111.34664917]
[491.42218018 112.08266449]
[476.44024658 112.81867981]
[461.45831299 113.55468750]
[446.47637939 114.29070282]
[443.84368896 116.65891266]
[439.92727661 117.86129761]
[435.29153442 117.30587769]
[430.74490356 114.67689514]
[415.74490356 114.67689514]
[400.74490356 114.67689514]
[385.74490356 114.67689514]
[370.74490356 114.67689514]
[355.74490356 114.67689514]
[340.74490356 114.67689514]
[334.60559082 124.31555176]
[324.46740723 129.84443665]
[312.79980469 129.78480530]
[302.50915527 124.03559875]
[296.21487427 113.92742920]
[283.24124146 121.24416351]
[269.70162964 113.05947113]
[254.70965576 112.56868744]
[239.71768188 112.07790375]
[224.72572327 111.58711243]
[217.91047668 124.85429382]
[205.96160889 133.88391113]
[191.21681213 136.84223938]
[176.59008789 133.09002686]
[164.99588013 123.31958771]
[158.76834106 109.42789459]
[143.77638245 108.93711090]
[128.78440857 108.44631958]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 25]
[8 24]
[9 23]
[10 20]
[11 19]
[12 18]
[13 17]
[48 95]
[49 94]
[50 93]
[51 92]
[54 88]
[55 87]
[56 86]
[62 81]
[63 80]
[64 79]
[65 78]
[66 77]
[67 76]
[68 75]
[69 74]
[99 191]
[100 190]
[101 189]
[107 183]
[108 182]
[109 181]
[110 180]
[112 178]
[115 173]
[116 172]
[117 171]
[118 170]
[119 169]
[120 168]
[121 167]
[122 163]
[123 162]
[124 161]
[125 160]
[126 159]
[128 157]
[129 156]
[130 155]
[131 154]
[132 153]
[133 152]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
