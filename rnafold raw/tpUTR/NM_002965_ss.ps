%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 04:50:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCACAGUGGCCAAGAUCACAGUGGCCACGGCCACGGCCACAGUCAUGGUGGCCACGGCCACAGCCACUAAUCAGGAGGCCAGGCCACCCUGCCUCUACCCAACCAGGGCCCCGGGGCCUGUUAUGUCAAACUGUCUUGGCUGUGGGGCUAGGGGCUGGGGCCAAAUAAAGUCUCUUCCUCCAAGUCA\
) } def
/len { sequence length } bind def

/coor [
[233.18983459 302.03768921]
[231.53865051 298.41656494]
[231.09484863 294.05618286]
[221.88165283 282.21908569]
[212.66847229 270.38195801]
[203.45527649 258.54486084]
[194.24208069 246.70774841]
[190.78904724 245.91485596]
[187.55235291 243.39939880]
[185.34226990 239.28321838]
[184.88302612 234.04754639]
[176.26809692 221.76817322]
[167.65316772 209.48880005]
[159.03823853 197.20942688]
[150.42329407 184.93005371]
[141.80836487 172.65068054]
[133.19343567 160.37130737]
[124.57851410 148.09193420]
[100.47966766 154.00654602]
[76.27957153 148.52091980]
[57.08662415 132.79298401]
[46.95226669 110.14278412]
[31.97071838 110.88653564]
[16.98917007 111.63029480]
[2.00761986 112.37405396]
[-12.97392941 113.11780548]
[-27.95547867 113.86156464]
[-36.49082184 126.68553162]
[-50.77375031 131.96296692]
[-65.25421143 127.86661530]
[-74.43602753 116.16908264]
[-89.41757202 116.91283417]
[-104.39912415 117.65659332]
[-119.38067627 118.40035248]
[-129.95991516 129.83352661]
[-145.16392517 130.37437439]
[-155.99851990 120.21823883]
[-170.98007202 120.96199036]
[-185.96160889 121.70574951]
[-200.94316101 122.44950867]
[-215.92471313 123.19326019]
[-230.90626526 123.93701935]
[-240.20674133 136.50820923]
[-255.42393494 140.10978699]
[-269.37271118 133.04118347]
[-275.46694946 118.63999176]
[-270.82907104 103.70599365]
[-257.64895630 95.29058075]
[-242.14988708 97.36725616]
[-231.65002441 108.95546722]
[-216.66847229 108.21171570]
[-201.68692017 107.46795654]
[-186.70536804 106.72419739]
[-171.72381592 105.98044586]
[-156.74227905 105.23668671]
[-146.96687317 94.05736542]
[-131.78405762 93.08966827]
[-120.12442780 103.41880035]
[-105.14287567 102.67504120]
[-90.16133118 101.93128967]
[-75.17977905 101.18753052]
[-67.20170593 88.63809204]
[-53.19816971 83.12766266]
[-38.46276855 86.96449280]
[-28.69923592 98.88001251]
[-13.71768570 98.13626099]
[1.26386368 97.39250183]
[16.24541283 96.64874268]
[31.22696304 95.90499115]
[46.20851135 95.16123199]
[47.05236816 84.43728638]
[50.05669022 73.86943817]
[55.18967819 63.89674377]
[62.32971954 54.95104599]
[71.26715088 47.43852615]
[81.70984650 41.72168732]
[77.78765106 27.24355507]
[73.86544800 12.76542091]
[69.94325256 -1.71271253]
[66.02104950 -16.19084549]
[62.09885406 -30.66897964]
[56.82533264 -38.14991379]
[58.23361206 -45.41896057]
[54.55133057 -59.95996475]
[50.86904907 -74.50096893]
[39.05236053 -85.87189484]
[43.25364685 -101.72374725]
[59.15098572 -105.74949646]
[70.39055634 -93.80780029]
[65.41004944 -78.18325043]
[69.09233093 -63.64224625]
[72.77462006 -49.10124207]
[76.57698822 -34.59117889]
[80.49918365 -20.11304474]
[84.42138672 -5.63491154]
[88.34358215 8.84322166]
[92.26578522 23.32135582]
[96.18798065 37.79948807]
[103.56427002 39.15609360]
[106.27748108 24.40351677]
[104.29911804 9.53455257]
[117.82901001 3.05828166]
[128.16925049 13.92471027]
[121.03005219 27.11672592]
[118.31684875 41.86930084]
[125.69313812 43.22590637]
[134.50991821 31.09065056]
[143.32669067 18.95539474]
[152.14347839 6.82014084]
[153.99540710 -8.89230442]
[167.73591614 -14.64101219]
[176.55268860 -26.77626801]
[180.97109985 -43.14434433]
[197.92265320 -43.42973328]
[202.88954163 -27.21966743]
[188.68794250 -17.95948792]
[179.87117004 -5.82423401]
[178.64987183 9.02021599]
[164.27873230 15.63691902]
[155.46194458 27.77217484]
[146.64517212 39.90742874]
[137.82838440 52.04268265]
[143.44258118 57.83994293]
[148.19496155 64.27323151]
[152.01673889 71.21743774]
[154.85690308 78.54051208]
[156.68287659 86.10594940]
[157.48081970 93.77537537]
[157.25546265 101.41101837]
[156.02976990 108.87821198]
[153.84422302 116.04776001]
[150.75566101 122.79817200]
[146.83612061 129.01773071]
[142.17109680 134.60630798]
[136.85787964 139.47700500]
[145.47280884 151.75637817]
[154.08773804 164.03575134]
[162.70266724 176.31512451]
[171.31759644 188.59449768]
[179.93252563 200.87387085]
[188.54747009 213.15324402]
[197.16239929 225.43261719]
[206.07919312 237.49456787]
[215.29238892 249.33166504]
[224.50556946 261.16879272]
[233.71876526 273.00588989]
[242.93196106 284.84298706]
[252.53149414 296.36901855]
[262.50686646 307.57131958]
[272.48223877 318.77365112]
[282.45758057 329.97598267]
[297.41342163 335.13674927]
[300.09899902 349.78723145]
[310.07437134 360.98956299]
[320.14199829 372.10903931]
[330.30123901 383.14489746]
[345.85687256 383.95712280]
[356.00256348 395.29376221]
[355.13235474 410.11868286]
[365.29159546 421.15454102]
[375.45080566 432.19039917]
[385.61001587 443.22625732]
[395.76925659 454.26211548]
[411.16638184 452.33645630]
[424.73849487 459.85821533]
[431.26687622 473.93511963]
[428.24121094 489.15435791]
[416.82495117 499.66378784]
[401.40783691 501.42233276]
[387.91809082 493.75378418]
[381.54281616 479.60687256]
[384.73339844 464.42135620]
[374.57415771 453.38549805]
[364.41494751 442.34963989]
[354.25573730 431.31378174]
[344.09649658 420.27792358]
[329.25036621 419.92089844]
[318.79025269 408.87371826]
[319.26538086 393.30410767]
[309.10614014 382.26824951]
[302.25048828 379.47143555]
[298.87203979 370.96493530]
[288.89666748 359.76260376]
[274.65432739 355.40310669]
[271.25527954 339.95135498]
[261.27990723 328.74902344]
[251.30453491 317.54669189]
[241.32916260 306.34439087]
[238.52363586 306.05612183]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[11 142]
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[22 70]
[23 69]
[24 68]
[25 67]
[26 66]
[27 65]
[31 61]
[32 60]
[33 59]
[34 58]
[37 55]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[76 98]
[77 97]
[78 96]
[79 95]
[80 94]
[81 93]
[83 92]
[84 91]
[85 90]
[106 122]
[107 121]
[108 120]
[109 119]
[111 117]
[112 116]
[148 188]
[149 187]
[150 186]
[151 185]
[153 183]
[154 182]
[155 180]
[156 179]
[159 176]
[160 175]
[161 174]
[162 173]
[163 172]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
