%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 14:20:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCACCUGGCCCCCUCAGCUCUGUCCUGUUAGGCCAACUGCCUCCUUGCCAGCCCCACCCCCAGGUUUUUGCCCAUCCUCCCAAUCUCAAUACAGCCUGAAUAAACCAAGACAAGACCUCUG\
) } def
/len { sequence length } bind def

/coor [
[71.99400330 173.14347839]
[65.04669189 170.08972168]
[58.42753220 166.37796021]
[52.19866180 162.04301453]
[46.41856766 157.12559509]
[41.14150620 151.67185974]
[36.41703033 145.73301697]
[32.28948593 139.36482239]
[18.65939331 145.62745667]
[5.02930069 151.89010620]
[-8.60079098 158.15274048]
[-22.23088264 164.41537476]
[-23.94327164 178.15724182]
[-32.18082047 189.15348816]
[-44.68805313 194.57298279]
[-58.12848282 193.08737183]
[-68.97452545 185.19499207]
[-82.75889587 191.11033630]
[-96.54325867 197.02566528]
[-100.88274384 212.04908752]
[-113.89259338 220.72535706]
[-129.42996216 218.95782471]
[-140.15858459 207.58105469]
[-141.01271057 191.96681213]
[-131.58908081 179.48767090]
[-116.33721924 176.03588867]
[-102.45860291 183.24130249]
[-88.67423248 177.32595825]
[-74.88986206 171.41062927]
[-71.80883789 155.33998108]
[-59.66238403 144.12995911]
[-43.06771088 142.30923462]
[-28.49351692 150.78527832]
[-14.86342621 144.52264404]
[-1.23333418 138.26000977]
[12.39675808 131.99737549]
[26.02684975 125.73473358]
[22.73783302 87.16016388]
[38.32654572 51.72279358]
[27.45465279 41.38829041]
[16.58276176 31.05378723]
[1.24975181 27.15386391]
[-2.64413905 12.77725506]
[-18.65392494 11.74462414]
[-27.70994759 -1.49803364]
[-22.86520386 -16.79208565]
[-7.83616447 -22.40524292]
[5.84817696 -14.03157139]
[7.69036484 1.90536344]
[22.24574280 5.06609344]
[26.91726494 20.18189430]
[37.78915787 30.51639938]
[48.66104889 40.85090256]
[58.78694916 33.39828873]
[69.97487640 27.66193581]
[81.93651581 23.78967094]
[94.36363983 21.88127518]
[106.93600464 21.98592758]
[119.32964325 24.10093117]
[131.22515869 28.17178345]
[142.31604004 34.09358215]
[152.31648254 41.71372986]
[160.96876526 50.83586121]
[173.49334717 42.58147049]
[186.01792908 34.32707977]
[198.54249573 26.07268906]
[211.06707764 17.81829834]
[223.59165955 9.56390667]
[231.66394043 -8.82498360]
[250.92402649 -9.40840912]
[263.01446533 -18.28656578]
[275.10488892 -27.16472054]
[270.82907104 -41.70752716]
[271.78814697 -56.83551407]
[277.86630249 -70.72190094]
[288.32955933 -81.68984985]
[301.91445923 -88.41490936]
[316.98052979 -90.08501434]
[331.70846558 -86.49848175]
[344.31982422 -78.08840179]
[353.29171753 -65.87033844]
[357.54074097 -51.31967545]
[356.55377197 -36.19348526]
[350.45004272 -22.31831932]
[339.96658325 -11.36967659]
[326.36932373 -4.66965771]
[311.30020142 -3.02732301]
[296.57885742 -6.64099216]
[283.98303223 -15.07429695]
[271.89260864 -6.19614124]
[259.80218506 2.68201447]
[259.14144897 13.01846981]
[252.71704102 21.42281914]
[242.49786377 24.91558456]
[231.84605408 22.08848381]
[219.32147217 30.34287453]
[206.79689026 38.59726715]
[194.27232361 46.85165787]
[181.74774170 55.10604858]
[169.22315979 63.36043930]
[172.44416809 70.23180389]
[174.98506165 77.38263702]
[176.82196045 84.74581146]
[177.93763733 92.25218964]
[178.32160950 99.83131409]
[177.97029114 107.41201782]
[176.88694763 114.92314148]
[175.08178711 122.29415894]
[172.57173157 129.45587158]
[169.38034058 136.34104919]
[165.53759766 142.88504028]
[161.07957458 149.02641296]
[156.04811096 154.70751953]
[150.49046326 159.87501526]
[144.45878601 164.48039246]
[138.00971985 168.48039246]
[131.20381165 171.83749390]
[124.10494995 174.52017212]
[116.77978516 176.50321960]
[109.29708862 177.76803589]
[101.72711182 178.30274963]
[94.14091492 178.10234070]
[86.60972595 177.16867065]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 37]
[9 36]
[10 35]
[11 34]
[12 33]
[17 29]
[18 28]
[19 27]
[39 53]
[40 52]
[41 51]
[43 49]
[63 100]
[64 99]
[65 98]
[66 97]
[67 96]
[68 95]
[70 91]
[71 90]
[72 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
