%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 07:45:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCGACCUUGUUCACUCCAGAUAUUAACUGUAUUGAACACAACAAAAUACAUUGAAUUUGUAUUAAACAUAUAACGCAUAAAUAAAGCUCCCAUUCUUACCCUUU\
) } def
/len { sequence length } bind def

/coor [
[29.42260933 192.19580078]
[21.99308586 186.00090027]
[15.10501671 179.20906067]
[8.80621147 171.86741638]
[3.14039207 164.02693176]
[-1.85311532 155.74205017]
[-6.13964987 147.07023621]
[-9.68945789 138.07171631]
[-12.47790146 128.80892944]
[-14.48562336 119.34617615]
[-29.40649223 120.88490295]
[-44.32736206 122.42362976]
[-59.24822998 123.96234894]
[-74.16909790 125.50107574]
[-89.08996582 127.03980255]
[-96.93187714 140.29916382]
[-110.91422272 146.32804871]
[-125.59188080 143.00688171]
[-135.38224792 131.81372070]
[-150.30311584 133.35244751]
[-165.22398376 134.89117432]
[-173.84338379 147.93876648]
[-188.84770203 152.34379578]
[-203.15237427 146.02632141]
[-210.00315857 131.96926880]
[-206.16532898 116.80995178]
[-193.45100403 107.70612335]
[-177.86347961 108.95634460]
[-166.76271057 119.97029877]
[-151.84184265 118.43157196]
[-136.92097473 116.89285278]
[-129.62095642 103.93724060]
[-115.92999268 97.69053650]
[-101.01154327 100.73900604]
[-90.62869263 112.11892700]
[-75.70782471 110.58020782]
[-60.78695297 109.04148102]
[-45.86608505 107.50275421]
[-30.94521713 105.96403503]
[-16.02434731 104.42530823]
[-13.71376038 76.53910828]
[-4.79877186 50.01550293]
[10.20284271 26.39495087]
[30.41980171 7.04932117]
[54.67792130 -6.89781046]
[81.56831360 -14.63640594]
[109.52919769 -15.71701241]
[111.72335052 -30.55566788]
[113.91749573 -45.39432526]
[116.11164856 -60.23297882]
[118.30579376 -75.07163239]
[120.49994659 -89.91029358]
[109.98540497 -101.48519897]
[109.42266846 -117.11264801]
[119.07743073 -129.41384888]
[134.39102173 -132.58053589]
[148.13282776 -125.11750793]
[153.81439209 -110.54857635]
[148.75303650 -95.75273895]
[135.33860779 -87.71614075]
[133.14445496 -72.87748718]
[130.95030212 -58.03882980]
[128.75614929 -43.20017242]
[126.56200409 -28.36151886]
[124.36785126 -13.52286243]
[133.73303223 -11.10047245]
[142.86407471 -7.90692282]
[151.69758606 -3.96438026]
[160.17225647 0.69978940]
[168.22927856 6.05321169]
[175.81269836 12.05872822]
[182.86990356 18.67465401]
[189.35189819 25.85506821]
[195.21369934 33.55012894]
[200.41459656 41.70642471]
[204.91851807 50.26734161]
[208.69418335 59.17345810]
[211.71539307 68.36296082]
[213.96118164 77.77204895]
[215.41595459 87.33543396]
[216.06961060 96.98671722]
[215.91760254 106.65892029]
[214.96101379 116.28490448]
[213.20646667 125.79785156]
[210.66613770 135.13172913]
[207.35766602 144.22175598]
[203.30401611 153.00483704]
[198.53332520 161.42001343]
[193.07868958 169.40885925]
[186.97799683 176.91592407]
[180.27359009 183.88911438]
[173.01197815 190.28002930]
[165.24359131 196.04429626]
[157.02233887 201.14190674]
[148.40530396 205.53747559]
[139.45227051 209.20051575]
[130.22538757 212.10557556]
[120.78871918 214.23248291]
[111.20774841 215.56651306]
[101.54898071 216.09837341]
[91.87947083 215.82438660]
[82.26631927 214.74645996]
[72.77626038 212.87205505]
[63.47516632 210.21420288]
[54.42758942 206.79133606]
[45.69634247 202.62721252]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 40]
[11 39]
[12 38]
[13 37]
[14 36]
[15 35]
[19 31]
[20 30]
[21 29]
[47 65]
[48 64]
[49 63]
[50 62]
[51 61]
[52 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
