%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 19:13:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCAUGGAAAUUUUUAUUUCAAACAAUUAGAGAUGGAUAUUACAACUAAAUAAAAUAAUUUUACUAGAGUUUGUA\
) } def
/len { sequence length } bind def

/coor [
[118.46987915 150.22917175]
[108.46459961 161.40480042]
[94.50035858 166.88201904]
[79.56520081 165.48883057]
[66.85491943 157.52334595]
[59.08925247 144.69001770]
[57.92988205 129.73487854]
[63.62488556 115.85803986]
[74.95565796 106.02881622]
[89.49659729 102.35047150]
[76.71498871 94.49995422]
[63.93339157 86.64942932]
[48.12471390 86.01986694]
[41.32917404 72.76581573]
[28.54757309 64.91529846]
[15.76597214 57.06477737]
[2.98437071 49.21426010]
[-9.79723072 41.36373901]
[-22.57883263 33.51321793]
[-35.36043549 25.66269875]
[-48.14203644 17.81217957]
[-61.99668503 24.59835815]
[-77.31819153 22.79416847]
[-89.21750641 12.97532368]
[-93.89761353 -1.72502172]
[-89.86510468 -16.61603928]
[-78.40673828 -26.94606018]
[-63.17883301 -29.41881180]
[-49.04056168 -23.24524689]
[-40.50339890 -10.39533043]
[-40.29151535 5.03057814]
[-27.50991440 12.88109779]
[-14.72831249 20.73161697]
[-1.94671106 28.58213806]
[10.83489037 36.43265533]
[23.61649132 44.28317642]
[36.39809418 52.13369751]
[49.17969513 59.98421478]
[64.07414246 60.05225754]
[71.78391266 73.86782837]
[84.56551361 81.71835327]
[97.34711456 89.56887054]
[111.55516052 94.37838745]
[126.47719574 95.90573120]
[141.39923096 97.43307495]
[156.32127380 98.96041870]
[171.27136230 100.18305969]
[186.24328613 101.10048676]
[196.69483948 87.97563171]
[212.72404480 83.60837555]
[228.08184814 89.49996185]
[236.89944458 103.19091034]
[251.89631653 103.49688721]
[266.89318848 103.80286407]
[281.89007568 104.10884094]
[296.88696289 104.41482544]
[312.84613037 98.69283295]
[322.76242065 112.44431305]
[312.29348755 125.77987671]
[296.58096313 119.41170502]
[281.58410645 119.10572052]
[266.58721924 118.79974365]
[251.59033203 118.49376678]
[236.59346008 118.18778992]
[229.43945312 129.64378357]
[217.42868042 136.05644226]
[203.71096802 135.62065125]
[191.94572449 128.34370422]
[185.32585144 116.07240295]
[170.35394287 115.15497589]
[163.28746033 117.96894836]
[154.79393005 113.88246155]
[139.87188721 112.35511780]
[124.94985199 110.82777405]
[110.02781677 109.30042267]
[119.34513092 121.05574799]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 42]
[11 41]
[12 40]
[14 38]
[15 37]
[16 36]
[17 35]
[18 34]
[19 33]
[20 32]
[21 31]
[43 75]
[44 74]
[45 73]
[46 72]
[47 70]
[48 69]
[52 64]
[53 63]
[54 62]
[55 61]
[56 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
