%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 19:24:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCAGCAGCCUCUGCCCAGGUCAGCCGCCCUCGCCCAGCUCCAUGGGGCGUCCCCCACUGGGGGGCCCAA\
) } def
/len { sequence length } bind def

/coor [
[77.80414581 121.47503662]
[64.81376648 128.97503662]
[51.82338333 136.47503662]
[38.83300400 143.97503662]
[29.92841721 161.81965637]
[10.78448296 161.75808716]
[-1.50279784 170.36174011]
[-13.79007816 178.96537781]
[-26.07736015 187.56903076]
[-35.58398056 201.60685730]
[-51.70489502 196.35781860]
[-51.12370300 179.41383362]
[-34.68100739 175.28175354]
[-22.39372444 166.67810059]
[-10.10644436 158.07446289]
[2.18083620 149.47080994]
[3.13050771 138.91252136]
[10.01188850 130.55697632]
[20.62153625 127.47586823]
[31.33300209 130.98464966]
[44.32338333 123.48465729]
[57.31376648 115.98465729]
[70.30414581 108.48465729]
[70.02443695 92.56368256]
[77.71308136 78.61949158]
[91.32621002 70.35884094]
[107.24507904 69.97764587]
[121.23799896 77.57723236]
[133.88887024 69.51773834]
[146.53974915 61.45824432]
[159.19061279 53.39875031]
[161.86557007 48.17226791]
[165.97753906 45.02949142]
[170.38604736 44.16362000]
[174.06173706 45.24017334]
[187.65635681 38.90090179]
[201.25097656 32.56162643]
[214.84558105 26.22235298]
[228.44020081 19.88307953]
[230.75495911 15.92344761]
[233.89465332 13.16212082]
[237.38674927 11.71113491]
[240.77095032 11.51899815]
[243.65098572 12.38879871]
[245.73683167 14.01166344]
[260.38128662 10.76506996]
[275.02572632 7.51847506]
[289.67016602 4.27188110]
[304.31460571 1.02528691]
[316.03317261 -10.44671440]
[331.75256348 -5.77412271]
[335.30200195 10.23629951]
[323.03012085 21.11440277]
[307.56118774 15.66972733]
[292.91674805 18.91632080]
[278.27230835 22.16291618]
[263.62786865 25.40950966]
[248.98342896 28.65610313]
[234.77947998 33.47769547]
[221.18486023 39.81697083]
[207.59024048 46.15624237]
[193.99562073 52.49551773]
[180.40101624 58.83479309]
[167.25010681 66.04962158]
[154.59924316 74.10911560]
[141.94836426 82.16860962]
[129.29750061 90.22810364]
[130.63479614 103.91693878]
[125.89633942 116.82892609]
[116.02188873 126.40325928]
[102.96984100 130.74105835]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[4 20]
[6 16]
[7 15]
[8 14]
[9 13]
[28 67]
[29 66]
[30 65]
[31 64]
[35 63]
[36 62]
[37 61]
[38 60]
[39 59]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
