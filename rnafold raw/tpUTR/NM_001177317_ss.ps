%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 00:57:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGCAGUUGCUGAGCAGACCGCCCCACCCUCCCCGGCUGGGAGGGCUCUGGAGGGCCCUGGAGGGGGGGUCCCCGCGGCAGCUGACCUCCGGUCACCUGCUUCCCCUUCUGUGCAAAUAAACCAGGCUGUUAUCUGG\
) } def
/len { sequence length } bind def

/coor [
[64.40567780 115.90957642]
[65.57521057 90.29966736]
[52.31159592 83.29420471]
[39.04797745 76.28874207]
[25.70604324 69.43361664]
[12.28749561 62.72969437]
[-1.13105261 56.02577209]
[-14.54960155 49.32184982]
[-27.96814919 42.61793137]
[-41.38669968 35.91400909]
[-54.80524445 29.21008873]
[-68.22379303 22.50616646]
[-81.64234161 15.80224609]
[-97.44557953 16.55611801]
[-105.37299347 3.94638634]
[-120.20143890 8.71661949]
[-133.71424866 1.72673798]
[-138.17056274 -12.43931007]
[-151.58911133 -19.14323235]
[-165.00765991 -25.84715271]
[-178.42620850 -32.55107498]
[-194.22943115 -31.79720306]
[-202.15686035 -44.40693283]
[-215.57540894 -51.11085510]
[-228.99395752 -57.81477737]
[-242.41250610 -64.51869965]
[-258.21572876 -63.76482391]
[-266.14315796 -76.37455750]
[-279.56170654 -83.07847595]
[-281.91302490 -76.92314148]
[-286.92044067 -71.33911896]
[-294.37002563 -67.31375122]
[-303.71197510 -65.74008942]
[-318.59625244 -67.59990692]
[-333.48049927 -69.45972443]
[-348.37106323 -62.58925247]
[-361.60842896 -72.26934814]
[-359.57513428 -88.54195404]
[-344.36285400 -94.66721344]
[-331.62069702 -84.34397888]
[-316.73641968 -82.48416138]
[-301.85217285 -80.62434387]
[-295.45321655 -94.19097137]
[-306.35519409 -104.49372864]
[-317.25717163 -114.79647827]
[-328.15917969 -125.09923553]
[-339.06115723 -135.40199280]
[-349.96313477 -145.70474243]
[-360.86511230 -156.00749207]
[-376.93557739 -159.27429199]
[-381.88439941 -174.90892029]
[-370.62063599 -186.82778931]
[-354.73150635 -182.76982117]
[-350.56237793 -166.90948486]
[-339.66036987 -156.60671997]
[-328.75839233 -146.30397034]
[-317.85641479 -136.00122070]
[-306.95443726 -125.69846344]
[-296.05245972 -115.39571381]
[-285.15045166 -105.09295654]
[-272.85778809 -96.49702454]
[-259.43923950 -89.79310608]
[-244.59577942 -91.02648926]
[-235.70858765 -77.93724823]
[-222.29003906 -71.23332214]
[-208.87149048 -64.52940369]
[-195.45294189 -57.82548141]
[-180.60948181 -59.05886459]
[-171.72227478 -45.96962357]
[-158.30372620 -39.26570129]
[-144.88519287 -32.56177902]
[-131.46664429 -25.85785866]
[-117.46316528 -30.80138397]
[-103.75935364 -24.19380760]
[-98.66907501 -9.47216225]
[-83.82562256 -10.70554256]
[-74.93842316 2.38369751]
[-61.51987457 9.08761883]
[-48.10132599 15.79154015]
[-34.68277740 22.49546051]
[-21.26422882 29.19938278]
[-7.84567976 35.90330505]
[5.57286835 42.60722351]
[18.99141693 49.31114578]
[32.40996552 56.01506805]
[39.86219406 56.19203568]
[46.05344009 63.02512741]
[59.31705475 70.03058624]
[72.58067322 77.03604889]
[78.39094543 70.29642487]
[85.86701202 65.05041504]
[94.61906433 61.71043777]
[104.15541840 60.58582687]
[113.91007233 61.85784912]
[123.27626038 65.56211090]
[131.64414978 71.57979584]
[138.44026184 79.63866425]
[143.16609192 89.32415771]
[145.43336487 100.10018921]
[160.27178955 102.29590607]
[175.11021423 104.49162292]
[183.63157654 91.82872009]
[196.80763245 84.12453461]
[212.02224731 82.90872955]
[226.25456238 88.42271423]
[236.67874146 99.57167053]
[241.22503662 114.14198303]
[238.99081421 129.24069214]
[230.41964722 141.86993408]
[217.21336365 149.52217102]
[201.99407959 150.67805481]
[187.78358459 145.10807800]
[177.40339661 133.91815186]
[172.91450500 119.33004761]
[158.07608032 117.13433075]
[143.23765564 114.93861389]
[138.59944153 120.83242798]
[150.56869507 129.87326050]
[162.17018127 139.38145447]
[152.89408875 151.16934204]
[140.92436218 142.12840271]
[129.32301331 132.62004089]
[124.68480682 138.51385498]
[130.30740356 152.42019653]
[135.92999268 166.32655334]
[141.55258179 180.23289490]
[147.17517090 194.13923645]
[161.82069397 200.07929993]
[167.89933777 214.66784668]
[161.80476379 229.24974060]
[147.15277100 235.17381287]
[132.63612366 228.92541504]
[126.86729431 214.21160889]
[133.26882935 199.76182556]
[127.64624023 185.85548401]
[122.02364349 171.94914246]
[116.40105438 158.04278564]
[110.77846527 144.13644409]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 89]
[3 88]
[4 87]
[5 85]
[6 84]
[7 83]
[8 82]
[9 81]
[10 80]
[11 79]
[12 78]
[13 77]
[15 75]
[18 72]
[19 71]
[20 70]
[21 69]
[23 67]
[24 66]
[25 65]
[26 64]
[28 62]
[29 61]
[33 42]
[34 41]
[35 40]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
[99 116]
[100 115]
[101 114]
[123 138]
[124 137]
[125 136]
[126 135]
[127 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
