%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 09:31:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGCUGGAGGAGUGACAGCCAGGAGCCCUGACUUCACUUCCUUUGGUCCAGUUUUACUCUGAUACAGGGUGGAUUCCAAAACUGGCUCAGUACAUUGCAUGUAGUUAAGCCACAUUUUAAAAAUAAAGGCAUUUUUUAAUCUAUUUACCUGGA\
) } def
/len { sequence length } bind def

/coor [
[45.77528381 187.70744324]
[30.89349174 189.58688354]
[20.00153351 179.27352905]
[21.06642342 164.31182861]
[8.02566910 171.72389221]
[-5.01508617 179.13595581]
[-18.05584145 186.54801941]
[-31.09659576 193.96008301]
[-44.13735199 201.37214661]
[-57.17810822 208.78421021]
[-70.21886444 216.19627380]
[-83.25961304 223.60835266]
[-96.22458649 231.15219116]
[-109.11244202 238.82702637]
[-122.00029755 246.50186157]
[-134.88815308 254.17669678]
[-140.70309448 261.29904175]
[-148.11590576 261.87344360]
[-161.15666199 269.28549194]
[-169.33100891 282.83135986]
[-184.21919250 282.39370728]
[-197.25993347 289.80578613]
[-210.30068970 297.21783447]
[-223.34144592 304.62991333]
[-234.12400818 317.71319580]
[-249.68092346 310.97384644]
[-247.51152039 294.15927124]
[-230.75350952 291.58914185]
[-217.71275330 284.17709351]
[-204.67201233 276.76501465]
[-191.63125610 269.35296631]
[-184.38966370 256.33724976]
[-168.56872559 256.24475098]
[-155.52796936 248.83268738]
[-142.56300354 241.28884888]
[-129.67514038 233.61401367]
[-116.78728485 225.93916321]
[-103.89942932 218.26432800]
[-99.73710632 212.10359192]
[-90.67168427 210.56759644]
[-77.63092804 203.15553284]
[-64.59017181 195.74345398]
[-51.54941559 188.33139038]
[-38.50866318 180.91932678]
[-25.46790695 173.50726318]
[-12.42715073 166.09519958]
[0.61360389 158.68313599]
[13.65435886 151.27107239]
[26.30296135 143.20802307]
[38.52694321 134.51466370]
[50.75092316 125.82131958]
[62.97490311 117.12797546]
[58.10245132 84.37815094]
[80.00303650 55.66574097]
[72.19799042 42.85632324]
[64.39293671 30.04690361]
[56.58788681 17.23748589]
[48.78283691 4.42806816]
[40.97778702 -8.38134956]
[33.17273712 -21.19076729]
[25.36768532 -34.00018692]
[17.56263542 -46.80960464]
[4.15761375 -57.18947601]
[10.42095757 -72.94406128]
[27.29371071 -71.28678894]
[30.37205315 -54.61465454]
[38.17710114 -41.80523682]
[45.98215485 -28.99581909]
[53.78720474 -16.18639946]
[61.59225464 -3.37698245]
[69.39730072 9.43243599]
[77.20235443 22.24185371]
[85.00740814 35.05127335]
[92.81245422 47.86069107]
[100.22596741 48.99639893]
[99.51755524 34.01313400]
[93.84477997 20.12718582]
[100.45589447 6.66267204]
[114.91200256 2.66006875]
[127.50685120 10.80684185]
[129.78387451 25.63300705]
[120.21435547 37.18376923]
[115.05299377 51.26781464]
[122.46650696 52.40352249]
[133.74827576 42.51809692]
[145.03004456 32.63267517]
[156.31182861 22.74724960]
[167.59359741 12.86182594]
[173.08164978 -4.68700123]
[190.37977600 -7.49108458]
[195.35668945 -22.50910378]
[209.97314453 -25.37419128]
[221.05224609 -35.48623276]
[232.13134766 -45.59827423]
[243.21046448 -55.71031570]
[254.28956604 -65.82235718]
[261.91241455 -80.96595764]
[278.57440186 -77.83318329]
[280.17657471 -60.95510864]
[264.40161133 -54.74324799]
[253.32249451 -44.63120651]
[242.24339294 -34.51916504]
[231.16429138 -24.40712547]
[220.08517456 -14.29508400]
[215.90071106 -0.00034538]
[200.49182129 3.58802295]
[199.61434937 15.68960571]
[190.41543579 24.20459366]
[177.47901917 24.14359856]
[166.19725037 34.02902222]
[154.91548157 43.91444778]
[143.63369751 53.79986954]
[132.35192871 63.68529510]
[138.63124084 73.11206055]
[142.36981201 83.41751862]
[143.51316833 93.95450592]
[142.16409302 104.10052490]
[138.56794739 113.29432678]
[151.60868835 120.70639038]
[164.64944458 128.11845398]
[177.69020081 135.53051758]
[190.73095703 142.94258118]
[203.77171326 150.35466003]
[216.81246948 157.76672363]
[230.42874146 150.51409912]
[245.80267334 151.79708862]
[258.02847290 161.20629883]
[263.20495605 175.73927307]
[259.68029785 190.75860596]
[248.57923889 201.47167969]
[233.44406128 204.45999146]
[219.10435486 198.76997375]
[210.13586426 186.21730042]
[209.40040588 170.80747986]
[196.35964966 163.39540100]
[183.31889343 155.98333740]
[170.27813721 148.57127380]
[157.23738098 141.15921021]
[144.19662476 133.74714661]
[131.15586853 126.33508301]
[126.44824219 131.05987549]
[121.03364563 134.95440674]
[115.05680847 137.91461182]
[108.67749023 139.86134338]
[102.06623077 140.74255371]
[95.39973450 140.53471375]
[88.85620117 139.24336243]
[82.61054993 136.90301514]
[76.82972717 133.57623291]
[71.66825104 129.35195923]
[59.44427109 138.04530334]
[47.22029114 146.73864746]
[34.99630737 155.43199158]
[49.00961685 160.78244019]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 48]
[5 47]
[6 46]
[7 45]
[8 44]
[9 43]
[10 42]
[11 41]
[12 40]
[13 38]
[14 37]
[15 36]
[16 35]
[18 34]
[19 33]
[21 31]
[22 30]
[23 29]
[24 28]
[49 153]
[50 152]
[51 151]
[52 150]
[54 74]
[55 73]
[56 72]
[57 71]
[58 70]
[59 69]
[60 68]
[61 67]
[62 66]
[84 113]
[85 112]
[86 111]
[87 110]
[88 109]
[90 106]
[92 104]
[93 103]
[94 102]
[95 101]
[96 100]
[118 140]
[119 139]
[120 138]
[121 137]
[122 136]
[123 135]
[124 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
