%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 10:24:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUGGGAUCCGGGAUCAAAGUUGGCGGGGGCUUGGCUGUGCCCUCAGAUUCCGCACCAAUAAAGCCUUCAAACUCCCUAA\
) } def
/len { sequence length } bind def

/coor [
[190.78927612 288.34854126]
[193.33869934 273.50103760]
[199.12855530 259.59329224]
[207.86843872 247.32292175]
[197.88854980 236.12461853]
[187.90866089 224.92633057]
[176.34725952 226.76155090]
[165.26316833 222.63395691]
[157.56147766 213.49790955]
[155.32307434 201.63656616]
[159.24354553 190.09184265]
[150.15016174 178.16246033]
[141.05677795 166.23306274]
[131.96339417 154.30366516]
[122.87001801 142.37428284]
[113.77663422 130.44488525]
[104.68325806 118.51548767]
[90.33821106 116.47441101]
[81.55429840 104.95099640]
[83.38735199 90.57788849]
[74.29396820 78.64849854]
[67.97312164 75.56855011]
[64.82447815 70.44891357]
[65.00309753 65.43968964]
[56.84958649 52.84920883]
[48.69607544 40.25872803]
[40.54256058 27.66824532]
[26.54681396 20.29060364]
[26.12310410 5.40202618]
[17.96958923 -7.18845510]
[2.46439266 -10.24858665]
[-6.26607752 -23.42259216]
[-3.04218698 -38.89456940]
[10.22338676 -47.48526764]
[25.66041374 -44.09798050]
[34.11038208 -30.74232101]
[30.56007195 -15.34196854]
[38.71358490 -2.75148726]
[52.12614059 3.72559953]
[53.13304138 19.51473236]
[61.28655624 32.10521317]
[69.44007111 44.69569397]
[77.59358215 57.28617477]
[86.22336578 69.55511475]
[95.31674194 81.48451233]
[109.66178894 83.52558899]
[118.44570160 95.04900360]
[116.61264801 109.42211151]
[125.70603180 121.35150146]
[134.79940796 133.28089905]
[143.89279175 145.21028137]
[152.98617554 157.13967896]
[162.07955933 169.06907654]
[171.17294312 180.99847412]
[189.84178162 182.62870789]
[201.40417480 196.97744751]
[199.10696411 214.94644165]
[209.08685303 226.14474487]
[219.06674194 237.34303284]
[232.25846863 230.06802368]
[246.73844910 225.91136169]
[261.78036499 225.08152771]
[276.62973022 227.62014771]
[290.54165649 233.39988708]
[302.81838989 242.13085938]
[312.84411621 253.37509155]
[320.11590576 266.56860352]
[324.26907349 281.04959106]
[325.09527588 296.09170532]
[322.55303955 310.94042969]
[316.76992798 324.85098267]
[308.03598022 337.12557983]
[296.78933716 347.14855957]
[283.59405518 354.41717529]
[269.11206055 358.56683350]
[254.06976318 359.38937378]
[239.22164917 356.84356689]
[225.31250000 351.05706787]
[213.04000854 342.32015991]
[203.01974487 331.07107544]
[195.75431824 317.87405396]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 59]
[5 58]
[6 57]
[11 54]
[12 53]
[13 52]
[14 51]
[15 50]
[16 49]
[17 48]
[20 45]
[21 44]
[24 43]
[25 42]
[26 41]
[27 40]
[29 38]
[30 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
