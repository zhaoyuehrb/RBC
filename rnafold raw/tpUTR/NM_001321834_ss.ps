%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 07:20:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUGUGCCUGUAUAUGAACUUUGAAAAAAUACUUGACUCUACUUUUGUUACCUAAAAUAAAAUGCAUUCGUUUCUCUGGGGGAGCCUGUUUA\
) } def
/len { sequence length } bind def

/coor [
[157.56152344 177.32066345]
[147.13363647 166.53831482]
[142.26506042 165.57844543]
[138.02157593 161.42039490]
[136.39944458 154.67005920]
[126.71501923 143.21527100]
[117.03060150 131.76049805]
[107.34618378 120.30570984]
[91.30875397 122.27731323]
[76.72917938 112.10655975]
[72.26358032 93.23026276]
[57.33891296 94.73169708]
[42.41424561 96.23313904]
[27.48958015 97.73457336]
[23.47919846 112.37292480]
[14.44850445 124.57173157]
[1.61882401 132.68121338]
[-13.27473450 135.60462952]
[-28.21793938 132.94660950]
[-41.18984222 125.06662750]
[-50.43610382 113.03038788]
[-54.70624161 98.46569061]
[-53.42275620 83.34229279]
[-46.75922394 69.70551300]
[-35.61683655 59.39961243]
[-21.50250816 53.81837463]
[-6.32508755 53.71662140]
[7.86280394 59.10811234]
[19.14237022 69.26369476]
[25.98814392 82.80990601]
[40.91281128 81.30847168]
[55.83747864 79.80702972]
[70.76214600 78.30559540]
[55.76366806 78.09204102]
[42.71707153 70.69025421]
[34.83938599 57.92538071]
[34.07308960 42.94496918]
[40.60712814 29.44288254]
[52.83034897 20.74846458]
[67.72875214 19.00557899]
[81.62869263 24.64398766]
[91.10272980 36.27337265]
[93.81475830 51.02616501]
[89.09671021 65.26360321]
[95.41073608 51.65723801]
[101.72475433 38.05087280]
[108.03877258 24.44450951]
[114.35279846 10.83814526]
[120.66681671 -2.76821852]
[126.98084259 -16.37458229]
[121.31321716 -31.12766838]
[127.81385040 -45.53313065]
[142.62603760 -51.04446030]
[156.96195984 -44.39188385]
[162.31637573 -29.52226067]
[155.51260376 -15.25747013]
[140.58720398 -10.06056118]
[134.27317810 3.54580307]
[127.95915985 17.15216637]
[121.64514160 30.75852966]
[115.33111572 44.36489487]
[109.01709747 57.97125626]
[102.70307922 71.57762146]
[122.22879028 88.40283203]
[118.80097198 110.62129211]
[128.48538208 122.07607269]
[138.16979980 133.53085327]
[147.85421753 144.98564148]
[157.91600037 156.11042786]
[168.34388733 166.89277649]
[180.11587524 176.18902588]
[193.02189636 183.83328247]
[205.92791748 191.47752380]
[218.83393860 199.12178040]
[231.73995972 206.76602173]
[244.64599609 214.41027832]
[261.04122925 214.05181885]
[269.31680298 228.20973206]
[260.95950317 242.31959534]
[244.56663513 241.86636353]
[237.00173950 227.31629944]
[224.09571838 219.67204285]
[211.18969727 212.02780151]
[198.28366089 204.38354492]
[185.37763977 196.73930359]
[172.47161865 189.09504700]
[175.53623962 203.77865601]
[169.61906433 217.56222534]
[156.86297607 225.45414734]
[141.88752747 224.59638977]
[130.11598206 215.29957581]
[125.81132507 200.93051147]
[130.53248596 186.69287109]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[5 68]
[6 67]
[7 66]
[8 65]
[11 33]
[12 32]
[13 31]
[14 30]
[44 63]
[45 62]
[46 61]
[47 60]
[48 59]
[49 58]
[50 57]
[71 86]
[72 85]
[73 84]
[74 83]
[75 82]
[76 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
