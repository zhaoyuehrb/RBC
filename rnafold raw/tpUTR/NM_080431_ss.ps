%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 10:18:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCCGCUUCUCGUUGGGUACCGUGGGGGGUGAACCCUAGCCCCAGCUUUGGGAGGAUGUUCAAUAAAGGACCAAUGCCGGAA\
) } def
/len { sequence length } bind def

/coor [
[91.01059723 179.32843018]
[101.05912018 167.12995911]
[99.37965393 152.22427368]
[97.70018768 137.31858826]
[77.69207001 125.02381897]
[70.80118561 105.19821167]
[77.24695587 87.85355377]
[66.64035034 77.24695587]
[56.03375244 66.64035034]
[45.42715073 56.03375244]
[34.82054901 45.42715073]
[24.21394539 34.82054901]
[13.02931404 24.82534981]
[1.30184138 15.47300243]
[-10.42563057 6.12065506]
[-22.15310287 -3.23169208]
[-33.88057709 -12.58403873]
[-45.60804749 -21.93638611]
[-55.98470688 -18.00376129]
[-66.96575928 -18.86470985]
[-76.46008301 -24.28504753]
[-82.68964386 -33.16906357]
[-84.52236938 -43.78033066]
[-81.67730713 -54.08088684]
[-92.28391266 -64.68749237]
[-102.89051056 -75.29409027]
[-113.49711609 -85.90069580]
[-124.10371399 -96.50729370]
[-139.90602112 -96.25666046]
[-151.19886780 -107.31320190]
[-151.28240967 -123.11727142]
[-140.10708618 -134.29258728]
[-124.30302429 -134.20904541]
[-113.24648285 -122.91619873]
[-113.49711609 -107.11389923]
[-102.89051056 -96.50729370]
[-92.28391266 -85.90069580]
[-81.67730713 -75.29409027]
[-71.07070923 -64.68749237]
[-51.88332748 -66.37038422]
[-37.16494751 -53.49387741]
[-36.25569916 -33.66385651]
[-24.52822876 -24.31151199]
[-12.80075645 -14.95916462]
[-1.07328391 -5.60681725]
[10.65418816 3.74552989]
[22.38166046 13.09787655]
[26.14130592 12.95061302]
[30.14146233 14.78290653]
[33.36867905 18.67549133]
[34.82054901 24.21394539]
[45.42715073 34.82054901]
[56.03375244 45.42715073]
[66.64035034 56.03375244]
[77.24695587 66.64035034]
[87.85355377 77.24695587]
[105.92454529 70.93984985]
[126.10466766 78.96713257]
[137.38610840 100.49543762]
[152.12460327 103.28411865]
[166.86309814 106.07279205]
[181.60159302 108.86146545]
[194.51687622 99.75262451]
[210.07583618 102.52648163]
[219.04762268 115.53735352]
[216.10942078 131.06611633]
[203.00442505 139.89984131]
[187.50758362 136.79762268]
[178.81292725 123.59996033]
[164.07441711 120.81128693]
[149.33592224 118.02261353]
[134.59742737 115.23394012]
[129.09953308 120.33523560]
[139.30194092 131.33117676]
[128.30583191 141.53340149]
[118.10375977 130.53782654]
[112.60587311 135.63911438]
[114.28533936 150.54479980]
[115.96480560 165.45048523]
[128.47581482 175.10710144]
[130.41127014 190.79243469]
[120.62291718 203.20065308]
[104.91799927 204.97016907]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 79]
[3 78]
[4 77]
[7 56]
[8 55]
[9 54]
[10 53]
[11 52]
[12 51]
[13 47]
[14 46]
[15 45]
[16 44]
[17 43]
[18 42]
[24 39]
[25 38]
[26 37]
[27 36]
[28 35]
[59 72]
[60 71]
[61 70]
[62 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
