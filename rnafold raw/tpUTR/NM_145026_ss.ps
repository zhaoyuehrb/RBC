%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 22:46:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUAAACAGGCCCACAAAACAUGUGCUGACUGCACUCUGGCGACCCUUUUCCAGUUGAUGUUUUUUGUCAUGUGACUGUUCUAAAUCCAGUGUUUGACCCUUA\
) } def
/len { sequence length } bind def

/coor [
[94.26935577 133.75984192]
[88.58097076 147.63940430]
[96.85229492 160.76818848]
[95.79344177 176.24909973]
[85.81156921 188.12940979]
[70.74490356 191.84089661]
[56.38688278 185.95642090]
[48.25846863 172.73869324]
[49.48519516 157.27018738]
[59.59536362 145.49885559]
[74.70140839 141.95103455]
[80.38978577 128.07145691]
[72.46166992 120.35209656]
[67.40919495 110.50748444]
[65.75997925 99.56564331]
[67.68623352 88.66915894]
[72.98680878 78.95588684]
[63.46006775 67.36962891]
[53.93333054 55.78337479]
[44.40659714 44.19712067]
[34.87985992 32.61086655]
[25.35312271 21.02461243]
[15.82638550 9.43835735]
[3.06618476 1.55310106]
[-11.55773354 -1.78471291]
[-26.18165207 -5.12252712]
[-40.80557251 -8.46034050]
[-55.09993744 -1.17675269]
[-69.64669037 -7.94221640]
[-73.28681183 -23.56684875]
[-63.22790146 -36.06476593]
[-47.18630600 -35.84864044]
[-37.46775818 -23.08425903]
[-22.84383774 -19.74644470]
[-8.21992016 -16.40863228]
[6.40399885 -13.07081795]
[7.04216862 -24.81809425]
[13.50487995 -33.28224945]
[8.23425770 -47.32577133]
[2.96363568 -61.36929703]
[-2.30698681 -75.41281891]
[-14.39995003 -85.61432648]
[-11.62806320 -100.24873352]
[-16.89868546 -114.29225922]
[-29.90242004 -124.28400421]
[-27.48323441 -140.50373840]
[-12.12978172 -146.26597595]
[0.36362454 -135.64303589]
[-2.85516214 -119.56288147]
[2.41546035 -105.51935577]
[14.13143349 -96.32233429]
[11.73653603 -80.68344116]
[17.00715828 -66.63991547]
[22.27778053 -52.59639359]
[27.54840279 -38.55287170]
[39.58444595 -33.58287048]
[45.29814148 -21.08632278]
[40.73385239 -7.36557293]
[27.41263962 -0.08837888]
[36.93937683 11.49787521]
[46.46611404 23.08412933]
[55.99285126 34.67038345]
[65.51958466 46.25663757]
[75.04632568 57.84289169]
[84.57305908 69.42914581]
[107.91249084 66.68393707]
[127.52523804 79.63019562]
[134.17391968 102.17038727]
[148.57205200 106.37680054]
[162.97018433 110.58321381]
[177.36830139 114.78961945]
[187.69454956 105.52024078]
[201.15502930 102.62870026]
[214.16973877 106.77350616]
[223.33192444 116.75629425]
[226.29983521 129.86572266]
[240.56567383 134.50097656]
[254.83152771 139.13623047]
[269.09738159 143.77148438]
[280.97497559 133.92639160]
[296.29244995 132.08836365]
[310.16207886 138.84393311]
[318.15805054 152.03741455]
[317.72891235 167.45880127]
[309.01162720 180.18721008]
[294.78781128 186.16102600]
[279.59625244 183.47406006]
[268.28448486 172.98367310]
[264.46212769 158.03733826]
[250.19627380 153.40208435]
[235.93041992 148.76683044]
[221.66458130 144.13157654]
[208.78114319 154.18231201]
[192.28211975 154.63720703]
[178.59321594 145.12316895]
[173.16189575 129.18774414]
[158.76376343 124.98133850]
[144.36564636 120.77493286]
[129.96751404 116.56851959]
[126.59773254 121.56683350]
[122.40367126 125.89678192]
[117.51530457 129.42416382]
[112.08412933 132.03968811]
[106.27845764 133.66227722]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[17 65]
[18 64]
[19 63]
[20 62]
[21 61]
[22 60]
[23 59]
[24 36]
[25 35]
[26 34]
[27 33]
[38 55]
[39 54]
[40 53]
[41 52]
[43 50]
[44 49]
[68 99]
[69 98]
[70 97]
[71 96]
[76 92]
[77 91]
[78 90]
[79 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
