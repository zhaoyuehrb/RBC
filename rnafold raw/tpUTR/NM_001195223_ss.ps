%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:49:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGCGCCUCCCAGUGGCCAGAAGCUGAAAUGACGGCAGUGGUGCCGCCUGGUGAAUGAAUUGGUUCUGUGACCCGG\
) } def
/len { sequence length } bind def

/coor [
[140.53706360 234.93055725]
[136.36380005 220.52279663]
[132.19055176 206.11502075]
[128.01728821 191.70724487]
[117.04451752 181.63511658]
[120.63688660 166.22715759]
[116.46362305 151.81938171]
[112.29035950 137.41160583]
[106.13417053 123.73311615]
[98.11717987 111.05525970]
[89.84652710 98.54141998]
[81.32555389 86.19666290]
[72.80458069 73.85190582]
[64.28361511 61.50714874]
[55.51578140 49.33647919]
[46.50464630 37.34483719]
[37.49351120 25.35319710]
[28.48237991 13.36155510]
[19.23159599 1.55380297]
[4.11820173 3.90594292]
[-10.04978752 -1.58631301]
[-19.50357819 -13.35458469]
[-21.78229713 -28.17563057]
[-16.37293243 -42.05382919]
[-25.85961342 -53.67290115]
[-35.34629440 -65.29197693]
[-44.83297348 -76.91104889]
[-60.58042908 -78.25016785]
[-70.70465088 -90.38588715]
[-69.19911957 -106.11830139]
[-56.95703888 -116.11365509]
[-41.24141693 -114.44187164]
[-31.37605858 -102.09479523]
[-33.21390152 -86.39773560]
[-23.72722054 -74.77865601]
[-14.24053955 -63.15958405]
[-4.75385857 -51.54050827]
[9.92588139 -54.06455612]
[23.99160194 -48.86730194]
[33.63104248 -37.25060654]
[36.17834091 -22.27035141]
[30.85066986 -7.93287754]
[37.70901489 -4.65418291]
[40.47402191 4.35042143]
[49.48515320 16.34206200]
[58.49628830 28.33370399]
[67.50742340 40.32534409]
[74.22818756 43.87754059]
[76.62837219 52.98617554]
[85.14933777 65.33093262]
[93.67031097 77.67568970]
[102.19128418 90.02044678]
[109.19028473 94.48922729]
[110.79503632 103.03827667]
[118.81201935 115.71612549]
[124.00519562 101.64378357]
[136.85916138 93.91232300]
[151.72419739 95.91997528]
[162.06665039 106.78430176]
[163.34068298 121.73010254]
[154.98632812 134.18821716]
[140.67556763 138.68290710]
[126.69813538 133.23835754]
[130.87139893 147.64611816]
[135.04466248 162.05389404]
[146.31591797 173.15655518]
[142.42504883 187.53398132]
[146.59831238 201.94175720]
[150.77157593 216.34953308]
[154.94483948 230.75729370]
[169.58549500 235.89840698]
[178.38043213 248.68232727]
[177.94784546 264.19338989]
[168.45405579 276.46722412]
[153.54962158 280.78436279]
[138.96560669 275.48471069]
[130.30986023 262.60614014]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[3 68]
[4 67]
[6 65]
[7 64]
[8 63]
[9 55]
[10 54]
[11 52]
[12 51]
[13 50]
[14 49]
[15 47]
[16 46]
[17 45]
[18 44]
[19 42]
[24 37]
[25 36]
[26 35]
[27 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
