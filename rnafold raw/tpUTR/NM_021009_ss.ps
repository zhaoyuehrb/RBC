%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 19:11:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUCCCCUUUUAAGGUUUCAACAAAUUUCAUUGCACUUUCCUUUCAAUAAAGUUGUUGCAUUCCCAAU\
) } def
/len { sequence length } bind def

/coor [
[86.70520782 236.38197327]
[74.21912384 244.90190125]
[59.77597427 249.36137390]
[44.66004181 249.36387634]
[30.21542168 244.90916443]
[17.72652245 236.39337158]
[8.30384445 224.57369995]
[2.78524852 210.50115967]
[1.66144359 195.42706299]
[5.03235769 180.69178772]
[12.59825134 167.60559082]
[23.68637085 157.33207703]
[37.31076813 150.78477478]
[52.25997162 148.54585266]
[67.20470428 150.81439209]
[73.71295929 137.29986572]
[68.56649780 123.36969757]
[74.97428131 109.57132721]
[89.62041473 104.26770020]
[95.82379150 90.61053467]
[101.71916962 76.81761932]
[107.61454010 63.02470016]
[113.50991821 49.23178482]
[119.40529633 35.43886566]
[125.30066681 21.64595032]
[123.60981750 5.91535568]
[135.72662354 -2.74677157]
[141.62199402 -16.53968811]
[147.51736450 -30.33260536]
[148.06629944 -39.78821182]
[153.99913025 -44.60264969]
[160.50738525 -58.11717987]
[167.01564026 -71.63171387]
[173.52389526 -85.14624786]
[164.34866333 -97.39669800]
[161.92890930 -112.50971985]
[166.82067871 -127.01244354]
[177.89988708 -137.57226562]
[192.62060547 -141.76260376]
[207.60012817 -138.62054443]
[219.39627075 -128.86811829]
[225.29835510 -114.74636078]
[223.95013428 -99.50035095]
[215.66142273 -86.63350677]
[202.33688354 -79.10253143]
[187.03843689 -78.63799286]
[180.53018188 -65.12345886]
[174.02192688 -51.60892487]
[167.51365662 -38.09439087]
[161.31028748 -24.43722916]
[155.41491699 -10.64431286]
[149.51953125 3.14860392]
[151.63206482 17.89263725]
[139.09358215 27.54132652]
[133.19821167 41.33424377]
[127.30283356 55.12715912]
[121.40745544 68.92007446]
[115.51208496 82.71298981]
[109.61670685 96.50590515]
[109.56605530 104.85432434]
[103.13494873 110.77595520]
[108.12011719 125.53352356]
[101.32730103 139.14646912]
[87.22749329 143.80812073]
[80.71923828 157.32264709]
[91.81075287 167.59249878]
[99.38096619 180.67619324]
[102.75675201 195.41035461]
[101.63792419 210.48483276]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 65]
[16 64]
[19 61]
[20 59]
[21 58]
[22 57]
[23 56]
[24 55]
[25 54]
[27 52]
[28 51]
[29 50]
[31 49]
[32 48]
[33 47]
[34 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
