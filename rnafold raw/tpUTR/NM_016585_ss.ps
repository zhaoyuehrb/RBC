%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 21:53:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCUCCGCUCCCAGUAAACACCCUCAGGCACCCUAACCCUGUGUAUGUGAUUAUUCUGAGCUUUUUGGCCUGGAGAAGGGAGGGCGGGCUAGAAGGCCAAAAGAAGGAUGAGGAGGACAAUAAUAUUUAUUUUUGCAUCCAA\
) } def
/len { sequence length } bind def

/coor [
[153.36561584 261.81054688]
[162.38087463 249.75610352]
[173.63836670 239.76341248]
[166.13836670 226.77302551]
[158.63836670 213.78263855]
[151.13836670 200.79226685]
[143.63836670 187.80187988]
[130.57403564 180.64839172]
[130.37463379 164.82844543]
[122.73338318 151.92063904]
[114.95178986 139.09696960]
[107.17018890 126.27328491]
[87.16192627 124.01834869]
[74.17101288 108.63486481]
[59.18529129 109.28915405]
[44.19956970 109.94344330]
[29.21384621 110.59773254]
[14.22812176 111.25202942]
[0.77858078 119.58391571]
[-12.27407360 112.40913391]
[-27.25979805 113.06343079]
[-42.24552155 113.71772003]
[-58.65622330 125.33841705]
[-75.45796967 115.85799408]
[-88.53128052 124.76861572]
[-101.88446808 118.17001343]
[-116.82739258 119.47735596]
[-131.77030945 120.78469086]
[-146.71322632 122.09202576]
[-153.79983521 135.79544067]
[-167.18148804 143.47236633]
[-182.58813477 142.67311096]
[-195.10357666 133.65274048]
[-200.73417664 119.28959656]
[-197.68324280 104.16692352]
[-186.92431641 93.11029816]
[-171.89051819 89.64785767]
[-157.37908936 94.88445282]
[-148.02056885 107.14910126]
[-133.07765198 105.84176636]
[-118.13472748 104.53443146]
[-103.19181061 103.22709656]
[-91.18731689 94.40998077]
[-76.76530457 100.91507721]
[-70.86444092 92.45993042]
[-61.06379700 88.60594177]
[-50.55307007 90.86955261]
[-42.89981079 98.73199463]
[-27.91408730 98.07770538]
[-12.92836475 97.42341614]
[-0.55070263 89.13832092]
[13.57383156 96.26630402]
[28.55955505 95.61201477]
[43.54527664 94.95771790]
[58.53100204 94.30342865]
[73.51672363 93.64913940]
[83.42092133 78.39372253]
[100.71991730 72.77539825]
[105.23049927 58.46964264]
[104.83106232 49.26633072]
[109.99867249 43.90293503]
[114.82026672 29.69898415]
[119.64185333 15.49503231]
[124.46344757 1.29108036]
[129.28503418 -12.91287136]
[134.10662842 -27.11682320]
[138.92822266 -41.32077408]
[143.74981689 -55.52472687]
[148.57141113 -69.72867584]
[153.39300537 -83.93263245]
[158.21459961 -98.13658142]
[163.03617859 -112.34053802]
[167.85777283 -126.54448700]
[156.92866516 -137.19892883]
[151.71272278 -151.54315186]
[153.24559021 -166.72911072]
[161.22293091 -179.74159241]
[174.06080627 -187.99699402]
[189.21026611 -189.85618591]
[203.66337585 -184.95001221]
[214.55044556 -174.25260925]
[219.70985413 -159.88795471]
[218.11718750 -144.70816040]
[210.08868408 -131.72718811]
[197.21839905 -123.52240753]
[182.06172180 -121.72289276]
[177.24014282 -107.51894379]
[172.41854858 -93.31499481]
[167.59695435 -79.11103821]
[162.77536011 -64.90708923]
[157.95376587 -50.70313644]
[153.13217163 -36.49918365]
[148.31057739 -22.29523087]
[143.48899841 -8.09127998]
[138.66740417 6.11267233]
[133.84580994 20.31662369]
[129.02421570 34.52057648]
[124.20262146 48.72452927]
[119.53625488 62.98022842]
[115.02567291 77.28598022]
[120.13297272 81.65985870]
[124.01293182 87.15178680]
[126.42900848 93.42697144]
[127.23392487 100.10285950]
[126.37860870 106.77247620]
[123.91519928 113.02922821]
[119.99386597 118.49169159]
[127.77546692 131.31536865]
[135.55706787 144.13905334]
[142.73985291 149.90689087]
[143.36502075 157.32844543]
[156.96580505 165.41108704]
[156.62873840 180.30187988]
[164.12873840 193.29226685]
[171.62873840 206.28263855]
[179.12873840 219.27302551]
[186.62873840 232.26341248]
[200.91140747 227.51048279]
[215.85850525 225.73027039]
[230.85795593 226.99568176]
[245.29556274 231.25488281]
[258.58007812 238.33346558]
[270.16754150 247.94157410]
[279.58343506 259.68576050]
[286.44216919 273.08511353]
[290.46292114 287.59091187]
[291.48104858 302.60916138]
[289.45480347 317.52490234]
[284.46719360 331.72732544]
[276.72247314 344.63485718]
[266.53778076 355.71893311]
[254.33013916 364.52566528]
[240.59945679 370.69439697]
[225.90802002 373.97259521]
[210.85742188 374.22595215]
[196.06396484 371.44415283]
[182.13343811 365.74102783]
[169.63629150 357.35018921]
[159.08427429 346.61523438]
[150.90946960 333.97570801]
[145.44665527 319.94921875]
[142.91952515 305.11010742]
[143.43154907 290.06610107]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 117]
[4 116]
[5 115]
[6 114]
[7 113]
[9 111]
[10 109]
[11 108]
[12 107]
[14 56]
[15 55]
[16 54]
[17 53]
[18 52]
[20 50]
[21 49]
[22 48]
[24 44]
[26 42]
[27 41]
[28 40]
[29 39]
[58 100]
[59 99]
[61 98]
[62 97]
[63 96]
[64 95]
[65 94]
[66 93]
[67 92]
[68 91]
[69 90]
[70 89]
[71 88]
[72 87]
[73 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
