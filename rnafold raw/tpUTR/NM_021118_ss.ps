%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 12:15:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAACAACUGAGCACUUGGUUUCACAGAAUGGCCUUACCACAGUAAGCACCACCUACUCUCAAAUGAGCAUUUCUACCUCUGUGGAACUGAAAUAAAAACAAGUCUUCCAUGAGUA\
) } def
/len { sequence length } bind def

/coor [
[125.21253204 461.56066895]
[111.59462738 454.99987793]
[100.51670074 444.71536255]
[92.96377563 431.62167358]
[89.60746765 416.88305664]
[90.74621582 401.81008911]
[96.27875519 387.74301147]
[105.71314240 375.93270874]
[118.21047974 367.42929077]
[132.65950012 362.98889160]
[132.65950012 347.98889160]
[132.65950012 332.98889160]
[129.47126770 326.21182251]
[132.86628723 317.58752441]
[133.26901245 302.59295654]
[133.67173767 287.59835815]
[134.07444763 272.60375977]
[134.47717285 257.60916138]
[132.66912842 242.71853638]
[128.68966675 228.25602722]
[124.71020508 213.79353333]
[120.73074341 199.33102417]
[116.75128937 184.86853027]
[112.77182770 170.40603638]
[108.79237366 155.94352722]
[104.81291199 141.48103333]
[100.83345032 127.01853180]
[96.85399628 112.55603027]
[79.83754730 118.08812714]
[59.15734100 105.63694000]
[47.04580307 96.78761292]
[34.93426895 87.93827820]
[16.64126968 86.45040131]
[10.06148338 70.24201965]
[-2.28327417 61.72104645]
[-14.62803268 53.20007706]
[-26.97278976 44.67910385]
[-39.31754684 36.15813446]
[-55.69815826 35.37860107]
[-62.97184753 20.68079376]
[-53.65607071 7.18456078]
[-37.33409882 8.77366638]
[-30.79657745 23.81337547]
[-18.45181847 32.33434677]
[-6.10706091 40.85531616]
[6.23769712 49.37628937]
[18.58245468 57.89725876]
[30.61770630 56.03615570]
[40.99705505 63.14582825]
[43.78359985 75.82674408]
[55.89513779 84.67607117]
[68.00667572 93.52540588]
[75.01929474 90.86586761]
[69.70045471 76.84053802]
[83.72587585 71.52192688]
[89.04454041 85.54679108]
[96.05715942 82.88726044]
[99.25458527 68.23200226]
[102.45200348 53.57674789]
[93.70582581 40.41316986]
[96.91124725 24.93735695]
[110.16656494 16.33083534]
[125.60762024 19.69970131]
[134.07351685 33.04526901]
[130.54159546 48.44984436]
[117.10726166 56.77417374]
[113.90983582 71.42942810]
[110.71241760 86.08467865]
[119.25222015 73.75294495]
[132.67094421 67.04938507]
[147.65982056 67.62697601]
[160.52288818 75.34329224]
[168.08837891 88.29563904]
[168.49079895 103.29023743]
[161.63092041 116.62973022]
[149.20024109 125.02486420]
[134.26391602 126.40557098]
[120.50495148 120.43139648]
[111.31649780 108.57656860]
[115.29595184 123.03907013]
[119.27541351 137.50157166]
[123.25486755 151.96406555]
[127.23432922 166.42657471]
[131.21379089 180.88906860]
[135.19325256 195.35157776]
[139.17269897 209.81407166]
[143.15216064 224.27656555]
[147.13162231 238.73907471]
[153.28898621 225.06109619]
[164.99510193 215.68203735]
[179.68663025 212.65565491]
[194.14649963 216.64465332]
[205.20837402 226.77554321]
[210.44998169 240.82992554]
[208.72355652 255.73023987]
[200.40711975 268.21371460]
[187.32177734 275.54675293]
[172.33288574 276.12365723]
[158.72261047 269.81808472]
[149.47177124 258.01187134]
[149.06904602 273.00646973]
[148.66632080 288.00106812]
[148.26361084 302.99566650]
[147.86088562 317.99026489]
[147.65950012 332.98889160]
[147.65950012 347.98889160]
[147.65950012 362.98889160]
[162.10853577 367.42929077]
[174.60586548 375.93270874]
[184.04025269 387.74301147]
[189.57279968 401.81008911]
[190.71154785 416.88305664]
[187.35523987 431.62167358]
[179.80232239 444.71536255]
[168.72438049 454.99987793]
[155.10647583 461.56066895]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 107]
[11 106]
[12 105]
[14 104]
[15 103]
[16 102]
[17 101]
[18 100]
[19 88]
[20 87]
[21 86]
[22 85]
[23 84]
[24 83]
[25 82]
[26 81]
[27 80]
[28 79]
[30 52]
[31 51]
[32 50]
[34 47]
[35 46]
[36 45]
[37 44]
[38 43]
[57 68]
[58 67]
[59 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
