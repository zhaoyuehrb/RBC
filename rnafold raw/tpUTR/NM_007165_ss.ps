%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 03:00:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGCUGCUCCCUCCCCCAGCAAGCCCAGCGCCAGGUGCUCUUGCCUUUUCCCACUGAGAGAAGGCUGCUCUUUUGUACUGCCCCCCGCUCAUUAAACAGCCUCCCCCAGCCCUGAGUGCACUGAUGUCCGCA\
) } def
/len { sequence length } bind def

/coor [
[22.37688828 358.93231201]
[15.37625027 358.44839478]
[8.56867027 356.77270508]
[2.15530205 353.95703125]
[-7.27539110 365.62158203]
[-16.70608330 377.28616333]
[-25.99939537 389.06045532]
[-35.15404892 400.94290161]
[-44.30870438 412.82534790]
[-39.02143478 427.31838989]
[-42.43132401 442.36419678]
[-53.45028687 453.16168213]
[-68.56221008 456.26544189]
[-82.94493866 450.68505859]
[-92.00898743 438.20120239]
[-92.86206055 422.79745483]
[-85.23194122 409.38906860]
[-71.55337524 402.25460815]
[-56.19113922 403.67068481]
[-47.03648758 391.78823853]
[-37.88183212 379.90582275]
[-36.27658081 372.61923218]
[-28.37064743 367.85546875]
[-18.93995476 356.19088745]
[-9.50926113 344.52633667]
[-19.20808601 321.99044800]
[-14.19251823 297.86883545]
[3.83611608 280.92568970]
[28.42658806 277.38632202]
[33.59358978 263.30435181]
[38.76059341 249.22238159]
[43.92759705 235.14039612]
[48.92917252 220.99882507]
[53.76464081 206.79959106]
[58.60010529 192.60035706]
[63.43556976 178.40112305]
[62.60618973 170.98603821]
[68.55440521 163.92800903]
[73.72140503 149.84602356]
[78.88841248 135.76405334]
[59.77611923 120.21327972]
[51.76949692 94.85779572]
[59.51123810 67.38581085]
[82.50515747 47.35332489]
[74.50341797 34.66584396]
[66.50168610 21.97836304]
[58.49994278 9.29088306]
[50.49820328 -3.39659810]
[42.49646378 -16.08407974]
[34.49472427 -28.77156067]
[26.49298668 -41.45904160]
[10.97525406 -43.39139557]
[0.36800179 -54.88140106]
[-0.32035074 -70.50382233]
[9.23521614 -82.88224030]
[24.52285576 -86.17193604]
[38.32421112 -78.81961823]
[44.12270737 -64.29682922]
[39.18046951 -49.46078110]
[47.18220520 -36.77330017]
[55.18394470 -24.08581734]
[63.18568420 -11.39833736]
[71.18742371 1.28914368]
[79.18916321 13.97662449]
[87.19090271 26.66410637]
[95.19264221 39.35158539]
[110.01880646 37.07456207]
[113.84444427 22.57061577]
[117.67008972 8.06667042]
[109.49896240 -5.46138287]
[113.36794281 -20.78478241]
[126.98162842 -28.81242561]
[142.26325989 -24.78165627]
[150.14653015 -11.08385754]
[145.95442200 4.15431023]
[132.17404175 11.89231110]
[128.34838867 26.39625740]
[124.52275085 40.90020370]
[129.88784790 46.14097595]
[140.19873047 35.24667358]
[150.50961304 24.35237503]
[157.52893066 11.09608936]
[172.35021973 13.40468693]
[175.00515747 28.16786003]
[161.91725159 35.49564743]
[151.26765442 46.05908203]
[140.61805725 56.62251663]
[145.98316956 61.86328888]
[160.39343262 57.69868851]
[174.80371094 53.53408813]
[179.95362854 38.89653397]
[192.74282837 30.10927391]
[208.25361633 30.55119324]
[220.52175903 40.05236053]
[224.82992554 54.95938492]
[219.52153015 69.54020691]
[206.63774109 78.18821716]
[191.13267517 77.57805634]
[178.96832275 67.94436646]
[164.55804443 72.10896301]
[150.14776611 76.27356720]
[152.96783447 90.95832062]
[151.71090698 105.38583374]
[146.72540283 118.48031616]
[138.62841797 129.33375549]
[128.24169922 137.26858521]
[116.51435852 141.87855530]
[104.43927002 143.04537964]
[92.97039032 140.93104553]
[87.80338287 155.01303101]
[82.63638306 169.09500122]
[77.63480377 183.23658752]
[72.79933929 197.43582153]
[67.96387482 211.63505554]
[63.12841034 225.83428955]
[63.31648254 235.06260681]
[58.00957489 240.30740356]
[52.84257126 254.38937378]
[47.67556763 268.47134399]
[42.50856400 282.55334473]
[48.27697754 286.71969604]
[53.24088287 291.80883789]
[57.25482559 297.66845703]
[60.20173264 304.12362671]
[61.99634552 310.98217773]
[62.58766556 318.04037476]
[61.96041870 325.08886719]
[60.13542557 331.91903687]
[57.16892624 338.32913208]
[53.15085983 344.13015747]
[48.20211029 349.15155029]
[42.47090530 353.24606323]
[36.12834930 356.29428101]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 25]
[5 24]
[6 23]
[7 21]
[8 20]
[9 19]
[29 120]
[30 119]
[31 118]
[32 117]
[33 115]
[34 114]
[35 113]
[36 112]
[38 111]
[39 110]
[40 109]
[44 66]
[45 65]
[46 64]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[67 78]
[68 77]
[69 76]
[88 101]
[89 100]
[90 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
