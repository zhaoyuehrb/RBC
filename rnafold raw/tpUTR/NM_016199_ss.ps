%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 10:04:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGGCCGGGGGCGCGGGGGGUGCAGGGCAGGCCCGAGCAGCUCGGUUUCCCGCGGACUUGGCUGCUGCUCCCACCGCAGUACCGCCUCCUGGAACGGAAGCAUUUUCCUUUUUGUAUAGGUUGAAUUUUUGUUUUCUUAAUAAAAUUGCAAACCUCAA\
) } def
/len { sequence length } bind def

/coor [
[82.92538452 141.90217590]
[72.67681885 135.07382202]
[64.81672668 125.87468719]
[59.85132599 115.07708740]
[58.05049133 103.54747009]
[59.43523026 92.17725372]
[45.46700668 86.71018982]
[31.49878311 81.24313354]
[17.53055954 75.77607727]
[3.56233549 70.30902100]
[-10.45888710 64.97935486]
[-24.53175735 59.78760147]
[-38.60462570 54.59584427]
[-52.95873260 50.24157333]
[-67.54428101 46.73989487]
[-82.12982941 43.23821259]
[-96.71537781 39.73653412]
[-111.94049072 44.03846359]
[-122.50986481 33.54382324]
[-137.09541321 30.04214478]
[-151.68096924 26.54046440]
[-166.90608215 30.84239578]
[-177.47544861 20.34775543]
[-192.06100464 16.84607506]
[-191.28562927 35.70201111]
[-205.44702148 54.36595535]
[-219.41525269 59.83301163]
[-233.38346863 65.30007172]
[-243.19186401 78.44265747]
[-259.44390869 76.25118256]
[-265.42092896 60.98005295]
[-254.97424316 48.33889389]
[-238.85052490 51.33184814]
[-224.88230896 45.86478806]
[-210.91407776 40.39773178]
[-210.54606628 32.90676498]
[-209.44204712 10.43386745]
[-222.80714417 3.62401009]
[-236.17224121 -3.18584752]
[-249.53733826 -9.99570465]
[-262.90243530 -16.80556297]
[-276.26754761 -23.61541939]
[-289.63262939 -30.42527771]
[-305.44134521 -29.79644012]
[-313.26876831 -42.46848679]
[-326.63385010 -49.27834320]
[-339.99896240 -56.08819962]
[-353.36404419 -62.89805603]
[-366.72915649 -69.70791626]
[-382.36993408 -66.13778687]
[-394.82269287 -76.25254822]
[-394.53472900 -92.29301453]
[-381.72698975 -101.95431519]
[-366.22442627 -97.82513428]
[-359.91931152 -83.07301331]
[-346.55419922 -76.26315308]
[-333.18908691 -69.45330048]
[-319.82400513 -62.64344025]
[-306.45889282 -55.83358383]
[-291.60617065 -56.94950867]
[-282.82278442 -43.79037476]
[-269.45767212 -36.98051834]
[-256.09259033 -30.17066002]
[-242.72749329 -23.36080360]
[-229.36238098 -16.55094528]
[-215.99728394 -9.74108791]
[-202.63218689 -2.93123031]
[-188.55932617 2.26052547]
[-173.97377014 5.76220608]
[-159.79191589 1.20981050]
[-148.17929077 11.95491505]
[-133.59373474 15.45659542]
[-119.00818634 18.95827675]
[-104.82633209 14.40587997]
[-93.21369934 25.15098381]
[-78.62815094 28.65266418]
[-64.04260254 32.15434647]
[-49.45705032 35.65602493]
[-56.04277420 22.17907333]
[-51.34193420 7.93470144]
[-38.02827072 1.02482057]
[-23.67432976 5.37962818]
[-16.44433594 18.52219963]
[-20.45055962 32.97730637]
[-33.41287231 40.52297592]
[-19.34000206 45.71472931]
[-5.26713133 50.90648651]
[2.13516450 50.26787186]
[9.02939320 56.34079742]
[22.99761772 61.80785370]
[36.96583939 67.27490997]
[50.93406677 72.74196625]
[64.90229034 78.20902252]
[78.88616180 62.21972275]
[99.81616974 54.75289536]
[122.69799042 58.59867477]
[141.57218933 73.71884155]
[153.35194397 64.43243408]
[165.13169861 55.14602280]
[176.91145325 45.85961533]
[180.21742249 30.16088486]
[194.61654663 23.08663940]
[209.06303406 30.06363487]
[212.47479248 45.73971558]
[202.23460388 58.08953476]
[186.19786072 57.63936996]
[174.41810608 66.92578125]
[162.63835144 76.21218872]
[150.85859680 85.49859619]
[150.78497314 92.99823761]
[165.57481384 90.49616241]
[178.40744019 82.72931671]
[192.71211243 87.24329376]
[198.76258850 100.96888733]
[192.44491577 114.57355499]
[178.05471802 118.80699158]
[165.37557983 110.78948212]
[150.63771057 107.99751282]
[150.56407166 115.49715424]
[162.15924072 125.01304626]
[173.75439453 134.52894592]
[185.34954834 144.04484558]
[196.94470215 153.56074524]
[212.33271790 147.57841492]
[228.54745483 150.14280701]
[241.19319153 160.46322632]
[246.88990784 175.65934753]
[244.17643738 191.56466675]
[255.95619202 200.85107422]
[267.73593140 210.13748169]
[279.51568604 219.42388916]
[291.29544067 228.71029663]
[303.07519531 237.99670410]
[314.85494995 247.28311157]
[330.89169312 246.83294678]
[341.13189697 259.18276978]
[337.72012329 274.85885620]
[323.27365112 281.83584595]
[308.87451172 274.76159668]
[305.56854248 259.06286621]
[293.78878784 249.77645874]
[282.00903320 240.49005127]
[270.22927856 231.20364380]
[258.44952393 221.91723633]
[246.66978455 212.63082886]
[234.89002991 203.34442139]
[222.53921509 209.23768616]
[208.78817749 209.22340393]
[196.33013916 203.24717712]
[187.62974548 192.42790222]
[184.43554688 178.84867859]
[187.42880249 165.15589905]
[175.83364868 155.63999939]
[164.23849487 146.12409973]
[152.64334106 136.60820007]
[141.04818726 127.09230804]
[131.63919067 136.62113953]
[120.17803192 143.12112427]
[107.58889008 146.20249939]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 93]
[7 92]
[8 91]
[9 90]
[10 89]
[11 87]
[12 86]
[13 85]
[14 78]
[15 77]
[16 76]
[17 75]
[19 73]
[20 72]
[21 71]
[23 69]
[24 68]
[26 35]
[27 34]
[28 33]
[37 67]
[38 66]
[39 65]
[40 64]
[41 63]
[42 62]
[43 61]
[45 59]
[46 58]
[47 57]
[48 56]
[49 55]
[97 109]
[98 108]
[99 107]
[100 106]
[119 156]
[120 155]
[121 154]
[122 153]
[123 152]
[128 146]
[129 145]
[130 144]
[131 143]
[132 142]
[133 141]
[134 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
