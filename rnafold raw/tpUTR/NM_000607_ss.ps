%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 21:48:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGACACAGCCUUGGAUCAGGACAGAGACUUGGGGGCCAUCCUGCCCCUCCAACCCGACAUGUGUACCUCAGCUUUUUCCCUCACUUGCAUCAAUAAAGCUUCUGUGUUUGGAACAGCUAA\
) } def
/len { sequence length } bind def

/coor [
[84.76816559 110.92955017]
[81.44503784 102.67904663]
[66.98123932 98.70432281]
[52.51743317 94.72959900]
[38.00405121 90.93991089]
[23.44345856 87.33586884]
[8.88286400 83.73182678]
[-5.67772961 80.12778473]
[-20.23832321 76.52375031]
[-30.95752335 84.79368591]
[-44.28984070 85.33423615]
[-55.31572342 78.17190552]
[-60.09709549 66.13404846]
[-74.56089783 62.15932846]
[-89.02470398 58.18460464]
[-103.48850250 54.20988464]
[-113.64157867 63.62909698]
[-127.02392578 66.74710846]
[-140.08647156 62.84763336]
[-149.41957092 53.06095505]
[-152.64303589 40.03909302]
[-167.00061035 35.69628143]
[-181.35818481 31.35346985]
[-173.26834106 43.98495865]
[-172.40979004 58.96036530]
[-179.00302124 72.43364716]
[-191.35473633 80.94452667]
[-206.29270935 82.30721283]
[-219.98051453 76.17172241]
[-228.90277100 64.11380768]
[-230.76803589 49.23023605]
[-225.09725952 35.34346771]
[-213.34683228 26.01996803]
[-198.53224182 23.65446854]
[-211.32684326 15.82515907]
[-224.12144470 7.99584866]
[-236.91604614 0.16653836]
[-249.71064758 -7.66277170]
[-265.01531982 -3.72031665]
[-278.58242798 -11.82644176]
[-282.36285400 -27.17192841]
[-274.11373901 -40.65256882]
[-258.72912598 -44.27054214]
[-245.33645630 -35.87936401]
[-241.88134766 -20.45737648]
[-229.08673096 -12.62806606]
[-216.29212952 -4.79875565]
[-203.49752808 3.03055453]
[-190.70292664 10.85986519]
[-177.01536560 16.99589348]
[-162.65779114 21.33870697]
[-148.30021667 25.68151855]
[-135.60119629 15.36362362]
[-119.09117889 14.59844589]
[-105.21719360 23.88150215]
[-99.51377869 39.74608231]
[-85.04998016 43.72080231]
[-70.58617401 47.69552612]
[-56.12237549 51.67024994]
[-41.93603897 42.73619843]
[-25.33758926 46.85287857]
[-16.63428307 61.96315384]
[-2.07368898 65.56719208]
[12.48690510 69.17123413]
[27.04749870 72.77527618]
[41.60809326 76.37931824]
[48.94208908 74.91523743]
[56.49215698 80.26580048]
[70.95595551 84.24051666]
[85.41976166 88.21524048]
[104.27165222 81.74577332]
[118.29544067 95.90844727]
[133.02105713 98.76431274]
[147.74668884 101.62017822]
[162.47232056 104.47604370]
[173.65284729 97.89394379]
[185.91783142 100.65418243]
[192.74804688 110.72600555]
[207.39593506 113.95701599]
[222.04382324 117.18801880]
[236.69171143 120.41902924]
[251.19604492 110.73954773]
[267.89764404 114.41538239]
[276.64672852 128.71653748]
[291.37237549 131.57240295]
[306.09799194 134.42826843]
[321.26477051 123.22932434]
[339.51168823 126.49672699]
[349.50302124 141.73406982]
[364.35525513 143.83430481]
[374.35284424 132.08476257]
[389.12222290 127.62738800]
[403.95059204 131.88452148]
[414.10626221 143.49771118]
[416.34854126 158.76124573]
[409.96197510 172.80459595]
[396.98449707 181.14656067]
[381.55715942 181.12524414]
[368.60275269 172.74748230]
[362.25500488 158.68655396]
[347.40277100 156.58630371]
[339.88623047 165.34860229]
[328.94201660 169.38586426]
[317.29748535 167.56683350]
[307.91586304 160.23562622]
[303.24212646 149.15388489]
[288.51651001 146.29801941]
[273.79086304 143.44215393]
[264.16455078 152.10847473]
[251.10545349 153.63470459]
[239.39733887 147.23446655]
[233.46069336 135.06690979]
[218.81280518 131.83590698]
[204.16493225 128.60490417]
[189.51704407 125.37389374]
[173.16149902 131.59623718]
[159.61643982 119.20167542]
[144.89082336 116.34580231]
[130.16519165 113.48993683]
[115.43957520 110.63407135]
[108.80058289 116.55335236]
[100.18059540 118.74649811]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 70]
[3 69]
[4 68]
[5 66]
[6 65]
[7 64]
[8 63]
[9 62]
[13 59]
[14 58]
[15 57]
[16 56]
[21 52]
[22 51]
[23 50]
[34 49]
[35 48]
[36 47]
[37 46]
[38 45]
[72 120]
[73 119]
[74 118]
[75 117]
[78 115]
[79 114]
[80 113]
[81 112]
[84 108]
[85 107]
[86 106]
[89 101]
[90 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
