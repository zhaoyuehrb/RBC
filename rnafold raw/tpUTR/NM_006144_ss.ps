%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:38:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAACCGUUUCCUUUCAUUUACUGUGGCUUCUUAAUCUUUUCACAAAUAAAAUCAAUUUGCAUGACUGUA\
) } def
/len { sequence length } bind def

/coor [
[78.46415710 217.40740967]
[63.91911316 213.78251648]
[49.94307327 208.36325073]
[36.75644302 201.23509216]
[24.56717110 192.51043701]
[13.56748962 182.32685852]
[3.93086362 170.84498596]
[-4.19073582 158.24588013]
[-10.66922855 144.72821045]
[-15.40244961 130.50518799]
[-18.31575203 115.80107880]
[-19.36319733 100.84778595]
[-18.52826118 85.88112640]
[-15.82411575 71.13712311]
[-11.29340363 56.84829330]
[-5.00757504 43.23997498]
[2.93424129 30.52676773]
[12.40680122 18.90916824]
[23.26072121 8.57038403]
[35.32483292 -0.32653841]
[48.40888596 -7.64129400]
[62.30653381 -13.25852776]
[76.79862213 -17.08965492]
[74.81330872 -31.95769310]
[72.82800293 -46.82572937]
[70.84269714 -61.69376755]
[68.85739136 -76.56180573]
[54.23579788 -80.81962585]
[42.61431503 -90.66142273]
[36.00643539 -104.38205719]
[35.55700684 -119.60433960]
[41.34390259 -133.69091797]
[52.36450195 -144.20121765]
[66.70942688 -149.31423950]
[81.89332581 -148.14414978]
[95.28549957 -140.89366150]
[104.56566620 -128.81896973]
[108.12599182 -114.01207733]
[105.34962463 -99.03838348]
[96.71758270 -86.49215698]
[83.72542572 -78.54711151]
[85.71073151 -63.67907715]
[87.69604492 -48.81103897]
[89.68135071 -33.94300079]
[91.66665649 -19.07496262]
[106.65621948 -19.18047714]
[121.54080963 -17.40649414]
[136.08569336 -13.78099155]
[150.06150818 -8.36114216]
[163.24783325 -1.23241925]
[175.43673706 7.49275684]
[186.43598938 17.67678833]
[196.07212830 29.15907097]
[204.19319153 41.75852585]
[210.67111206 55.27646255]
[215.40373230 69.49969482]
[218.31642151 84.20392609]
[219.36323547 99.15725708]
[218.52766418 114.12387848]
[215.82289124 128.86776733]
[211.29158020 143.15640259]
[205.00517273 156.76446533]
[197.06282043 169.47734070]
[187.58976746 181.09452820]
[176.73541260 191.43286133]
[164.67092896 200.32926941]
[151.58656311 207.64347839]
[137.68867493 213.26011658]
[123.19643402 217.09063721]
[108.33837128 219.07461548]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[23 45]
[24 44]
[25 43]
[26 42]
[27 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
