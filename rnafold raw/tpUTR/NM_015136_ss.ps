%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:38:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAGGCUGGGGCUGAAAGCAGAAGCAUGCACAGGGAGGAGACCACUUUUAUUGCUUGUCUGGGUGGAUGGGGCAGGAGGGGCUGAGGGCCUGUCCCAGACAAUAAAGGUGCCCUCAGCGGAUGUGGGCCAUGUCACCAA\
) } def
/len { sequence length } bind def

/coor [
[110.45145416 235.47241211]
[117.92019653 222.46403503]
[130.72540283 214.65206909]
[145.70954895 213.96278381]
[159.17694092 220.56535339]
[153.59254456 206.64363098]
[148.00813293 192.72190857]
[142.42373657 178.80017090]
[136.68347168 164.94198608]
[130.78810120 151.14906311]
[124.89273071 137.35615540]
[118.99735260 123.56323242]
[111.89088440 121.16572571]
[111.72255707 136.16477966]
[97.40558624 140.63963318]
[88.72557831 128.40618896]
[97.67794037 116.37070465]
[90.57146454 113.97319031]
[77.52535248 121.37581635]
[64.47923279 128.77844238]
[60.51683807 144.07794189]
[46.85442734 152.02238464]
[31.59766579 147.89845276]
[23.79812050 134.15281677]
[28.08312035 118.94050598]
[41.91045380 111.28672791]
[57.07660675 115.73232269]
[70.12272644 108.32969666]
[83.16884613 100.92707062]
[81.74695587 93.56309509]
[67.57026672 88.66191864]
[78.90317535 78.83512878]
[77.48129272 71.47114563]
[62.61704254 69.45764923]
[51.17088699 80.11219788]
[35.55143356 80.86498260]
[23.13371086 71.36054993]
[19.78098869 56.08661270]
[27.07631874 42.25504684]
[41.57506943 36.39670181]
[56.43137741 41.27770615]
[64.63053894 54.59339905]
[79.49478912 56.60689926]
[92.10531616 48.48442078]
[96.41930389 34.11815643]
[100.73329163 19.75189590]
[105.04728699 5.38563299]
[109.36127472 -8.98062897]
[113.67526245 -23.34689140]
[117.98925018 -37.71315384]
[122.30324554 -52.07941437]
[126.61723328 -66.44567871]
[130.93122864 -80.81194305]
[135.08375549 -95.22570038]
[139.07431030 -109.68514252]
[139.41087341 -124.68136597]
[136.07305908 -139.30528259]
[132.73524475 -153.92919922]
[129.39743042 -168.55311584]
[126.05962372 -183.17704773]
[115.44548798 -194.90950012]
[120.15670776 -209.03938293]
[107.39233398 -218.75793457]
[107.17620087 -234.79953003]
[119.67412567 -244.85844421]
[135.29875183 -241.21832275]
[142.06422424 -226.67156982]
[134.78062439 -212.37719727]
[145.15602112 -201.69073486]
[140.68354797 -186.51486206]
[144.02136230 -171.89093018]
[147.35917664 -157.26701355]
[150.69699097 -142.64309692]
[154.03480530 -128.01918030]
[168.65872192 -124.68136597]
[178.01106262 -136.40884399]
[187.36340332 -148.13630676]
[189.91841125 -163.74984741]
[203.90299988 -168.87629700]
[213.25535583 -180.60377502]
[222.60769653 -192.33125305]
[231.96003723 -204.05871582]
[241.31239319 -215.78619385]
[246.46070862 -231.93955994]
[263.40798950 -231.46412659]
[267.64260864 -215.04754639]
[253.03985596 -206.43383789]
[243.68751526 -194.70637512]
[234.33517456 -182.97889709]
[224.98281860 -171.25143433]
[215.63047791 -159.52395630]
[213.74441528 -144.74925232]
[199.09088135 -138.78396606]
[189.73854065 -127.05649567]
[180.38618469 -115.32901764]
[166.86431885 -104.99248505]
[153.53375244 -105.69458771]
[149.54319763 -91.23514557]
[150.80632019 -83.88996887]
[145.29748535 -76.49794769]
[140.98348999 -62.13168716]
[136.66950989 -47.76542664]
[132.35551453 -33.39916229]
[128.04151917 -19.03290176]
[123.72753906 -4.66663933]
[119.41354370 9.69962311]
[115.09955597 24.06588554]
[110.78556824 38.43214798]
[106.47157288 52.79840851]
[132.79026794 117.66786194]
[138.68563843 131.46076965]
[144.58102417 145.25369263]
[150.47639465 159.04661560]
[156.77824402 165.77536011]
[156.34545898 173.21577454]
[161.92985535 187.13749695]
[167.51426697 201.05921936]
[173.09866333 214.98094177]
[181.78575134 222.20812988]
[182.13461304 232.23367310]
[190.39807129 244.75227356]
[198.66152954 257.27087402]
[206.92498779 269.78945923]
[215.18843079 282.30807495]
[223.45188904 294.82666016]
[237.22373962 304.71466064]
[231.53457642 320.68557739]
[214.61291504 319.63995361]
[210.93328857 303.09011841]
[202.66983032 290.57153320]
[194.40638733 278.05291748]
[186.14292908 265.53433228]
[177.87947083 253.01573181]
[169.61601257 240.49713135]
[167.37339783 255.32853699]
[158.27307129 267.25262451]
[144.55900574 273.32919312]
[129.61280823 272.05984497]
[117.11991119 263.75759888]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 118]
[6 117]
[7 116]
[8 115]
[9 113]
[10 112]
[11 111]
[12 110]
[18 29]
[19 28]
[20 27]
[33 43]
[34 42]
[44 109]
[45 108]
[46 107]
[47 106]
[48 105]
[49 104]
[50 103]
[51 102]
[52 101]
[53 100]
[54 98]
[55 97]
[56 74]
[57 73]
[58 72]
[59 71]
[60 70]
[62 68]
[75 95]
[76 94]
[77 93]
[79 91]
[80 90]
[81 89]
[82 88]
[83 87]
[120 134]
[121 133]
[122 132]
[123 131]
[124 130]
[125 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
