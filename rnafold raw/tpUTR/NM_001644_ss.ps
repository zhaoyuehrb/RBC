%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 18:29:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGGAUGAUUCCGUGUGUGUACUGAUUCAAGAACAAGCAAUGAUGACCCACUAAAGAGUGAAUGCCAUUUAGAAUCUAGAAAUGUUCACAAGGUACCCCAAAACUCUGUAGCUUAAACCAACAAUAAAUAUGUAUUACCUCUGGCA\
) } def
/len { sequence length } bind def

/coor [
[131.86814880 160.88273621]
[116.17749023 166.78753662]
[99.52397156 168.71723938]
[82.89878845 166.55700684]
[77.60262299 180.59091187]
[72.30645752 194.62483215]
[75.49597931 210.71081543]
[62.98326874 221.31100464]
[47.64032364 215.52082825]
[45.25065231 199.29672241]
[58.27254486 189.32865906]
[63.56871033 175.29475403]
[68.86487579 161.26083374]
[52.45072556 149.61203003]
[40.11577225 133.70704651]
[26.31928062 139.59405518]
[12.52279186 145.48107910]
[2.86650038 158.01368713]
[-11.87624836 155.89222717]
[-25.67273712 161.77923584]
[-39.46922684 167.66624451]
[-49.12551880 180.19886780]
[-63.86826706 178.07739258]
[-77.66475677 183.96440125]
[-83.32418823 198.72064209]
[-97.79404449 205.07664490]
[-112.48961639 199.26152039]
[-118.69228363 184.72526550]
[-112.72211456 170.09199524]
[-98.12110138 164.04336548]
[-83.55176544 170.16792297]
[-69.75527954 164.28091431]
[-61.08580399 152.16937256]
[-45.35623550 153.86975098]
[-31.55974770 147.98274231]
[-17.76325798 142.09573364]
[-9.09378338 129.98419189]
[6.63578272 131.68458557]
[20.43227196 125.79756927]
[34.22876358 119.91056061]
[31.74756432 107.99320984]
[31.40804672 95.82504272]
[33.22086334 83.78787231]
[37.12912750 72.25942230]
[43.01020050 61.60144424]
[50.67955017 52.14836121]
[59.89651108 44.19680405]
[70.37187195 37.99628830]
[81.77693176 33.74137115]
[93.75380707 31.56556892]
[105.92668152 31.53715706]
[117.91358185 33.65702820]
[129.33837891 37.85866165]
[139.84257507 44.01021576]
[149.09654236 51.91865921]
[156.80993652 61.33583832]
[170.05746460 54.30001450]
[183.30500793 47.26419067]
[196.55253601 40.22836304]
[201.27482605 25.38458443]
[214.80993652 18.43797302]
[228.93211365 23.03142738]
[242.17964172 15.99560261]
[255.42718506 8.95977783]
[268.67471313 1.92395246]
[281.92224121 -5.11187267]
[291.28085327 -20.93329811]
[308.75747681 -19.70928955]
[321.85269165 -27.02471352]
[334.94790649 -34.34013748]
[348.04312134 -41.65556335]
[361.13833618 -48.97098541]
[356.92752075 -63.43041611]
[356.04055786 -78.45711517]
[358.51864624 -93.29725647]
[364.23434448 -107.20711517]
[372.89807129 -119.49028778]
[384.07263184 -129.53260803]
[397.19549561 -136.83279419]
[411.60690308 -141.02755737]
[426.58322144 -141.90960693]
[441.37316895 -139.43789673]
[455.23550415 -133.73959351]
[467.47619629 -125.10341644]
[477.48324585 -113.96514893]
[490.57846069 -121.28057861]
[503.67367554 -128.59599304]
[509.69125366 -135.56217957]
[517.12536621 -135.92434692]
[530.37292480 -142.96017456]
[543.62042236 -149.99600220]
[552.17913818 -163.30238342]
[567.04864502 -162.43882751]
[580.29620361 -169.47465515]
[593.54370117 -176.51048279]
[595.57708740 -191.89375305]
[606.28857422 -203.12066650]
[621.55938721 -205.87426758]
[635.51757812 -199.09571838]
[642.79595947 -185.39152527]
[640.59582520 -170.03121948]
[629.76318359 -158.92115784]
[614.46337891 -156.33337402]
[600.57952881 -163.26295471]
[587.33203125 -156.22712708]
[574.08447266 -149.19129944]
[566.47338867 -136.38816833]
[550.65625000 -136.74847412]
[537.40875244 -129.71264648]
[524.16119385 -122.67681885]
[510.98907471 -115.50078583]
[497.89389038 -108.18536377]
[484.79867554 -100.86994171]
[489.03646851 -86.50877380]
[489.97250366 -71.55744934]
[487.55667114 -56.76560974]
[481.90692139 -42.87561798]
[473.30364990 -30.58530426]
[462.17568970 -20.51290512]
[449.07894897 -13.16596127]
[434.66870117 -8.91574383]
[419.66677856 -7.97849751]
[404.82534790 -10.40443611]
[390.88925171 -16.07506752]
[378.55862427 -24.70897293]
[368.45376587 -35.87577438]
[355.35855103 -28.56035042]
[342.26333618 -21.24492645]
[329.16812134 -13.92950249]
[316.07290649 -6.61407804]
[312.45193481 4.97323275]
[301.54296875 11.16090965]
[288.95806885 8.13566113]
[275.71054077 15.17148685]
[262.46301270 22.20731163]
[249.21546936 29.24313736]
[235.96794128 36.27896118]
[231.86560059 50.55153656]
[218.53094482 57.87557983]
[203.58836365 53.47589874]
[190.34083557 60.51172256]
[177.09329224 67.54754639]
[163.84576416 74.58337402]
[168.10020447 90.79951477]
[168.30142212 107.56324768]
[164.43743896 123.87683868]
[156.73823547 138.76930237]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 13]
[5 12]
[6 11]
[15 40]
[16 39]
[17 38]
[19 36]
[20 35]
[21 34]
[23 32]
[24 31]
[56 143]
[57 142]
[58 141]
[59 140]
[62 137]
[63 136]
[64 135]
[65 134]
[66 133]
[68 130]
[69 129]
[70 128]
[71 127]
[72 126]
[85 113]
[86 112]
[87 111]
[89 110]
[90 109]
[91 108]
[93 106]
[94 105]
[95 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
