%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 22:30:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCAGGGGACCCACCAACAGGACCAAGGACCGAGACACAGACAUGGAAGGACUUCAGAUACCAUCUUAUUCUAGAGACGUAGCUGACCAAAAAGUAGGGGAGGGGCUGGGUCUGCAAAUUAAUAAAUAGAAGAGGGGGUAAGACCUUCCUGGGACCGCA\
) } def
/len { sequence length } bind def

/coor [
[101.88680267 264.21890259]
[86.82693481 268.43011475]
[72.60490417 261.92874146]
[65.93592072 247.78451538]
[69.96887970 232.67593384]
[82.79953003 223.73678589]
[76.07817078 210.44496155]
[84.86795044 197.29011536]
[86.03754425 182.33576965]
[79.31617737 169.04396057]
[88.10596466 155.88909912]
[89.27555084 140.93476868]
[90.44514465 125.98043060]
[91.61473846 111.02610016]
[85.24491119 107.06687927]
[77.32648468 119.80652618]
[69.40785980 132.54605103]
[56.66846466 124.62722015]
[64.58684540 111.88809967]
[72.50527191 99.14845276]
[66.13545227 95.18923950]
[53.24373245 102.85758972]
[45.33868790 116.56236267]
[30.44477272 116.41903687]
[22.90707397 130.98320007]
[6.51506615 131.46705627]
[-1.86855865 117.37284851]
[6.38055420 103.19948578]
[22.77642441 103.52731323]
[29.75936508 90.37103271]
[45.57538223 89.96586609]
[58.46710205 82.29752350]
[43.47715378 82.84651184]
[34.23494720 71.03204346]
[30.03034973 56.63338470]
[31.46238708 41.70189667]
[38.32703400 28.36485863]
[49.64629745 18.52238274]
[63.80752563 13.57671833]
[78.79318237 14.23246861]
[92.46828461 20.39620972]
[102.88453674 31.18980026]
[108.55796051 45.07548523]
[108.68025970 60.07498550]
[103.23326111 74.05254364]
[100.50421906 88.80220032]
[109.97053528 77.16653442]
[119.43685913 65.53086090]
[128.90318298 53.89519501]
[138.36949158 42.25952530]
[147.83581543 30.62385559]
[150.54302979 15.03598976]
[164.57696533 10.04621792]
[174.04328918 -1.58945131]
[159.10656738 -2.96590233]
[150.70326233 -15.39105415]
[154.98678589 -29.76642990]
[168.82048035 -35.56547546]
[182.07444763 -28.54176712]
[185.04318237 -13.83808613]
[195.59791565 -24.49630356]
[206.15264893 -35.15451813]
[216.70738220 -45.81273651]
[220.54872131 -54.15719223]
[227.57357788 -56.57342148]
[238.33425903 -67.02366638]
[249.09494019 -77.47391510]
[259.85562134 -87.92416382]
[264.36514282 -103.08908844]
[278.88586426 -106.40538025]
[289.64654541 -116.85562897]
[300.40722656 -127.30587769]
[311.16790771 -137.75611877]
[321.92861938 -148.20637512]
[331.50799561 -159.74913025]
[339.67349243 -172.33184814]
[347.71582031 -184.99362183]
[355.75817871 -197.65541077]
[363.80050659 -210.31718445]
[364.66836548 -226.11457825]
[378.02337646 -232.70950317]
[386.06570435 -245.37127686]
[394.10806274 -258.03305054]
[402.15042114 -270.69485474]
[410.19274902 -283.35662842]
[404.74377441 -302.64633179]
[415.00985718 -319.50839233]
[434.05398560 -323.40277100]
[441.34176636 -336.51339722]
[434.67886353 -350.52716064]
[437.55865479 -365.77465820]
[448.87374878 -376.39294434]
[464.27331543 -378.29904175]
[477.83587646 -370.76004028]
[484.34634399 -356.67480469]
[481.30136108 -341.45944214]
[469.87170410 -330.96453857]
[454.45239258 -329.22561646]
[447.16461182 -316.11499023]
[452.57656860 -307.29067993]
[453.82061768 -296.93240356]
[450.60244751 -286.92324829]
[443.44525146 -279.11145020]
[433.60586548 -274.96890259]
[422.85452271 -275.31427002]
[414.81219482 -262.65249634]
[406.76983643 -249.99072266]
[398.72750854 -237.32893372]
[390.68515015 -224.66716003]
[390.39254761 -209.77542114]
[376.46231079 -202.27484131]
[368.41995239 -189.61306763]
[360.37762451 -176.95127869]
[352.33526611 -164.28950500]
[351.39883423 -156.91996765]
[344.01043701 -151.46125793]
[358.09817505 -156.61251831]
[372.98165894 -154.74636841]
[385.36151123 -146.27648926]
[392.49346924 -133.08044434]
[392.79650879 -118.08351135]
[386.20346069 -104.61013794]
[374.17584229 -95.64707184]
[359.37991333 -93.18120575]
[345.09558105 -97.75916290]
[334.48931885 -108.36612701]
[329.91235352 -122.65077972]
[332.37884521 -137.44567871]
[321.61816406 -126.99543762]
[310.85748291 -116.54518890]
[300.09680176 -106.09494781]
[289.33612061 -95.64469910]
[285.59628296 -81.22724915]
[270.30587769 -77.16347504]
[259.54519653 -66.71322632]
[248.78450012 -56.26298141]
[238.02381897 -45.81273651]
[227.36560059 -35.25800323]
[216.81086731 -24.59978485]
[206.25613403 -13.94156837]
[195.70140076 -3.28335190]
[185.67895508 7.87686777]
[176.21263123 19.51253700]
[174.18251038 34.26814270]
[159.47148132 40.09017563]
[150.00515747 51.72584534]
[140.53884888 63.36151505]
[131.07252502 74.99718475]
[121.60620880 86.63285065]
[112.13988495 98.26852417]
[106.56906891 112.19568634]
[105.39947510 127.15002441]
[104.22988129 142.10435486]
[103.06029510 157.05868530]
[109.69799805 171.42013550]
[100.99187469 183.50537109]
[99.82228088 198.45970154]
[106.45999146 212.82115173]
[97.75386810 224.90638733]
[109.03873444 235.73161316]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 159]
[8 157]
[9 156]
[11 154]
[12 153]
[13 152]
[14 151]
[21 32]
[22 31]
[24 29]
[46 150]
[47 149]
[48 148]
[49 147]
[50 146]
[51 145]
[53 143]
[54 142]
[60 141]
[61 140]
[62 139]
[63 138]
[65 137]
[66 136]
[67 135]
[68 134]
[70 132]
[71 131]
[72 130]
[73 129]
[74 128]
[75 116]
[76 114]
[77 113]
[78 112]
[79 111]
[81 109]
[82 108]
[83 107]
[84 106]
[85 105]
[88 99]
[89 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
