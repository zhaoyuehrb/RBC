%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 06:51:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCCGCCUCCGGGACCCCCAGGACAGGCUGCGGCCCCUCCCCCGUCCUGGAGGUUCCCCAGCCCCACUUACCGCGUAAUGCGCCAAUAAACCAAUGAACGAAGC\
) } def
/len { sequence length } bind def

/coor [
[138.81274414 121.03874207]
[124.60285187 116.23469543]
[110.18984985 127.65921783]
[91.80987549 128.31585693]
[76.61837006 117.94895172]
[70.52947235 100.59441376]
[55.94912720 97.07112122]
[41.36878204 93.54782867]
[26.78843880 90.02454376]
[12.20809460 86.50125122]
[-2.37224936 82.97795868]
[-16.95259285 79.45466614]
[-31.53293610 75.93138123]
[-46.11328125 72.40808868]
[-60.69362259 68.88479614]
[-75.27397156 65.36150360]
[-83.77760315 74.77286530]
[-95.43382263 79.58709717]
[-107.95491028 78.92704010]
[-118.91237640 72.98337555]
[-126.20793152 62.96547318]
[-128.47525024 50.85580826]
[-142.82125854 46.47495651]
[-157.16726685 42.09410477]
[-170.99682617 49.26216125]
[-185.48332214 44.61499023]
[-192.23175049 31.38644409]
[-206.57775879 27.00559425]
[-220.92376709 22.62474251]
[-236.77081299 26.84417534]
[-248.15525818 15.04051304]
[-243.36576843 -0.64364773]
[-227.32937622 -4.07378769]
[-216.54292297 8.27872658]
[-202.19691467 12.65957832]
[-187.85089111 17.04043007]
[-174.86363220 9.83858204]
[-160.25231934 14.07702446]
[-152.78642273 27.74809074]
[-138.44041443 32.12894058]
[-124.09439087 36.50979233]
[-110.65270996 25.25561905]
[-92.99858856 24.19219398]
[-78.04304504 33.92064667]
[-71.75067902 50.78116226]
[-57.17033386 54.30445480]
[-42.58998871 57.82774353]
[-28.00964546 61.35103607]
[-13.42930222 64.87432861]
[1.15104139 68.39761353]
[15.73138523 71.92090607]
[30.31172943 75.44419861]
[44.89207077 78.96749115]
[59.47241592 82.49077606]
[74.05275726 86.01406860]
[81.27278900 77.23693848]
[91.27682495 71.84379578]
[102.57766724 70.63639832]
[113.49530792 73.79423523]
[122.40671539 80.84786224]
[127.98711395 90.74867249]
[129.40690613 102.02479553]
[143.61679077 106.82884216]
[153.46015930 90.33695221]
[166.88789368 76.61523438]
[183.15017700 66.42493439]
[201.34011841 60.33023453]
[220.44427490 58.66703415]
[239.39909363 61.52442551]
[257.15020752 68.73995209]
[272.71096802 79.90881348]
[285.21740723 94.40658569]
[293.97613525 111.42414856]
[298.50274658 130.01280212]
[313.49618530 129.56831360]
[328.48959351 129.12380981]
[343.48300171 128.67930603]
[359.13598633 122.16625977]
[369.72769165 135.40454102]
[359.93884277 149.24703979]
[343.92749023 143.67271423]
[328.93408203 144.11721802]
[313.94067383 144.56172180]
[298.94726562 145.00622559]
[297.39169312 156.57022095]
[294.19198608 167.79333496]
[289.41375732 178.44300842]
[283.15542603 188.29849243]
[275.54602051 197.15541077]
[266.74261475 204.82995605]
[256.92709351 211.16276550]
[246.30230713 216.02220154]
[235.08804321 219.30708313]
[223.51626587 220.94879150]
[211.82650757 220.91271973]
[200.26081848 219.19900513]
[189.05871582 215.84249878]
[178.45236206 210.91212463]
[168.66159058 204.50938416]
[159.88948059 196.76632690]
[152.31805420 187.84281921]
[146.10455322 177.92320251]
[141.37815857 167.21253967]
[138.23730469 155.93235779]
[136.74761963 144.31602478]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[6 55]
[7 54]
[8 53]
[9 52]
[10 51]
[11 50]
[12 49]
[13 48]
[14 47]
[15 46]
[16 45]
[22 41]
[23 40]
[24 39]
[27 36]
[28 35]
[29 34]
[74 84]
[75 83]
[76 82]
[77 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
