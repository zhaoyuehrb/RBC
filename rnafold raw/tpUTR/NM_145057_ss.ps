%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:41:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCCCUCAUUCCCCGCGCCCUUCCCGCCCGGCACCCCACUUCUGUAUACAUAAACGGCCAAGGUGUGUGCCCGGG\
) } def
/len { sequence length } bind def

/coor [
[-2.25720263 206.45387268]
[-3.64394259 221.46520996]
[-8.58349991 235.70825195]
[-16.78869629 248.35491943]
[-27.78248978 258.66995239]
[-40.92571640 266.05364990]
[-55.45425034 270.07672119]
[-70.52341461 270.50531006]
[-85.25711060 267.31445312]
[-98.79874420 260.68966675]
[-110.36102295 251.01614380]
[-119.27172089 238.85626221]
[-125.01279449 224.91697693]
[-127.25045776 210.00871277]
[-125.85461426 194.99821472]
[-120.90642548 180.75817871]
[-112.69356537 168.11648560]
[-101.69351959 157.80812073]
[-88.54581451 150.43238831]
[-74.01484680 146.41810608]
[-58.94542313 145.99867249]
[-44.21366119 149.19847107]
[-30.67604828 155.83145142]
[-19.11964035 165.51199341]
[-7.02045918 156.64576721]
[5.07872248 147.77955627]
[17.17790413 138.91333008]
[18.01150513 135.20666504]
[20.86293030 131.78982544]
[25.53668785 129.69660950]
[31.34028053 129.81173706]
[44.43145752 122.48908997]
[57.52263260 115.16644287]
[70.61380768 107.84380341]
[83.70498657 100.52115631]
[87.63766479 89.37118530]
[98.07188416 83.81107330]
[109.52013397 86.76496124]
[122.89909363 79.98238373]
[136.27806091 73.19980621]
[149.65701294 66.41722870]
[163.03598022 59.63465118]
[175.97506714 52.04648972]
[188.42581177 43.68115997]
[200.87657166 35.31583023]
[213.32731628 26.95050049]
[213.76237488 11.43952465]
[223.25813293 -0.83282143]
[238.16323853 -5.14757109]
[252.74641418 0.15438528]
[261.40011597 13.03433704]
[260.79681396 28.53968048]
[251.16850281 40.70829391]
[236.21745300 44.86109543]
[221.69265747 39.40125275]
[209.24189758 47.76658249]
[196.79113770 56.13191223]
[184.34039307 64.49724579]
[183.35629272 68.16683197]
[180.36787415 71.46452332]
[175.61262512 73.36536407]
[169.81855774 73.01361084]
[156.43959045 79.79618835]
[143.06063843 86.57876587]
[129.68167114 93.36135101]
[116.30271149 100.14392853]
[107.66700745 114.38805389]
[91.02762604 113.61233521]
[77.93645477 120.93497467]
[64.84527588 128.25761414]
[51.75410080 135.58026123]
[38.66292572 142.90290833]
[26.04412079 151.01251221]
[13.94493961 159.87873840]
[1.84575784 168.74494934]
[-10.25342369 177.61117554]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[24 76]
[25 75]
[26 74]
[27 73]
[31 72]
[32 71]
[33 70]
[34 69]
[35 68]
[38 66]
[39 65]
[40 64]
[41 63]
[42 62]
[43 58]
[44 57]
[45 56]
[46 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
