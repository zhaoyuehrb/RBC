%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 10:30:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCCCCAACCCCCUUGGGGUGGGGCAGAAGGUGAAGCAUCCCAACUGACUAGAGACUCAGGCCCUGCAGGGCCCUAUAGAACCUGUGGCCAUCCCUGAGCACCCUGCCACCAGGUGACCUCGGCCAUACUCACUGCCCCCCUUGGGCACCCACUCACCCUAGAAUAAACUUAACAGUGUCCCGUGGUAA\
) } def
/len { sequence length } bind def

/coor [
[71.75757599 271.47033691]
[64.87088776 284.79598999]
[57.98420334 298.12167358]
[51.09751892 311.44735718]
[44.21083450 324.77301025]
[37.32414627 338.09869385]
[30.43746185 351.42437744]
[23.55077744 364.75003052]
[22.38694382 373.82760620]
[16.43966484 378.23687744]
[9.33473873 391.44747925]
[2.22981310 404.65808105]
[-4.87511301 417.86868286]
[-7.05245113 434.68222046]
[-23.81167030 437.24444580]
[-30.91316032 421.84945679]
[-18.08571625 410.76376343]
[-10.98079014 397.55316162]
[-3.87586379 384.34255981]
[3.22906208 371.13195801]
[10.22510433 357.86337280]
[17.11178970 344.53768921]
[23.99847412 331.21200562]
[30.88515854 317.88635254]
[37.77184296 304.56066895]
[44.65853119 291.23498535]
[51.54521561 277.90933228]
[58.43190002 264.58364868]
[69.52443695 251.23640442]
[83.03211975 245.78773499]
[94.92898560 247.72380066]
[94.68227386 232.72583008]
[94.43556213 217.72785950]
[94.18885040 202.72988892]
[93.94213867 187.73191833]
[81.74744415 186.25877380]
[69.84575653 183.09452820]
[58.47101974 178.29223633]
[47.84809494 171.93724060]
[38.18830872 164.14562988]
[29.68524933 155.06221008]
[22.51089287 144.85774231]
[16.81212425 133.72576904]
[12.70775127 121.87895966]
[10.28602219 109.54502106]
[9.60275841 96.96233368]
[10.68009186 84.37533569]
[-4.05236435 81.55492401]
[-18.78482056 78.73451233]
[-30.01072121 89.44706726]
[-45.39379883 91.48191071]
[-59.01893997 84.05661011]
[-65.64701080 70.02634430]
[-62.72937012 54.78603745]
[-51.38792038 44.19589615]
[-35.98367691 42.32804489]
[-22.43988228 49.90071487]
[-15.96440792 64.00205231]
[-1.23195112 66.82247162]
[13.50050545 69.64288330]
[19.60906792 55.94304657]
[7.66509724 46.86882019]
[-4.27887249 37.79459381]
[-16.22284317 28.72036743]
[-28.16681290 19.64614105]
[-44.49493790 18.12155914]
[-51.09185028 3.10780525]
[-41.17121124 -9.95025635]
[-24.93852425 -7.61961174]
[-19.09258652 7.70217133]
[-7.14861584 16.77639771]
[4.79535389 25.85062408]
[16.73932266 34.92485046]
[28.68329430 43.99907684]
[35.37073135 36.75288391]
[42.78622437 30.29481697]
[50.83792877 24.69707108]
[59.42694855 20.02123260]
[68.44855499 16.31761932]
[77.79346466 13.62472916]
[87.34917450 11.96886539]
[97.00128174 11.36387920]
[106.63490295 11.81107807]
[116.13598633 13.29927731]
[125.39270782 15.80500698]
[130.93292236 1.86563790]
[136.47314453 -12.07373142]
[142.01335144 -26.01309967]
[147.55357361 -39.95246887]
[153.09378052 -53.89183807]
[158.63400269 -67.83120728]
[154.22195435 -88.79013824]
[170.89660645 -100.93711090]
[175.74252319 -115.13277435]
[180.47152710 -129.36781311]
[185.08331299 -143.64126587]
[189.69509888 -157.91471863]
[194.30688477 -172.18817139]
[189.18421936 -191.67335510]
[204.04733276 -204.02626038]
[208.18716431 -218.44366455]
[212.32699585 -232.86108398]
[210.88690186 -249.75375366]
[226.72076416 -255.81391907]
[236.92733765 -242.27648926]
[226.74440002 -228.72125244]
[222.60456848 -214.30383301]
[218.46473694 -199.88642883]
[224.20864868 -191.41021729]
[224.33227539 -180.95210266]
[218.55271912 -171.97267151]
[208.58033752 -167.57640076]
[203.96855164 -153.30294800]
[199.35676575 -139.02949524]
[194.74497986 -124.75603485]
[195.68174744 -117.41204071]
[189.93818665 -110.28685760]
[185.09226990 -96.09118652]
[190.26707458 -88.83991241]
[191.53439331 -79.88298798]
[188.48303223 -71.22084808]
[181.68077087 -64.84732819]
[172.57336426 -62.29099274]
[167.03315735 -48.35162354]
[161.49293518 -34.41225433]
[155.95272827 -20.47288513]
[150.41250610 -6.53351593]
[144.87229919 7.40585327]
[139.33207703 21.34522247]
[151.60552979 28.79286766]
[162.50366211 38.13822937]
[171.73602295 49.13224411]
[179.05657959 61.48191833]
[184.27023315 74.85812378]
[187.23802185 88.90437317]
[202.22534180 88.28774261]
[217.21267700 87.67111206]
[232.19999695 87.05448151]
[247.18731689 86.43785095]
[259.06945801 75.65850830]
[274.88177490 78.36965942]
[282.49438477 92.49153900]
[276.06756592 107.19104767]
[260.53143311 111.19198608]
[247.80393982 101.42517090]
[232.81661987 102.04180145]
[217.82929993 102.65843201]
[202.84197998 103.27506256]
[187.85466003 103.89169312]
[184.47415161 124.44799042]
[176.35316467 143.63232422]
[163.94744873 160.36813354]
[147.95315552 173.71623230]
[129.26785278 182.92755127]
[108.94010925 187.48519897]
[109.18682098 202.48316956]
[109.43353271 217.48114014]
[109.68024445 232.47911072]
[109.92695618 247.47708130]
[114.30335236 261.82446289]
[122.46949005 274.40676880]
[130.63563538 286.98904419]
[145.56900024 284.29272461]
[160.35713196 287.51049805]
[172.75317383 296.12164307]
[180.88592529 308.78836060]
[183.54229736 323.56362915]
[180.34814453 338.19042969]
[171.82063293 350.44647217]
[179.98675537 363.02877808]
[188.15289307 375.61105347]
[203.00042725 382.57403564]
[204.12429810 398.93463135]
[190.36837769 407.86245728]
[175.88356018 400.17337036]
[175.57060242 383.77719116]
[167.40446472 371.19491577]
[159.23832703 358.61260986]
[144.57188416 361.40985107]
[129.91213989 358.37057495]
[117.49932861 349.92739868]
[109.24249268 337.34121704]
[106.42587280 322.51284790]
[109.50927734 307.69613647]
[118.05332947 295.15518188]
[109.88719177 282.57290649]
[101.72105408 269.99060059]
[94.23018646 270.36053467]
[94.96981812 285.34228516]
[79.98805237 286.08169556]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[3 26]
[4 25]
[5 24]
[6 23]
[7 22]
[8 21]
[10 20]
[11 19]
[12 18]
[13 17]
[31 159]
[32 158]
[33 157]
[34 156]
[35 155]
[47 60]
[48 59]
[49 58]
[61 74]
[62 73]
[63 72]
[64 71]
[65 70]
[85 129]
[86 128]
[87 127]
[88 126]
[89 125]
[90 124]
[91 123]
[93 118]
[94 117]
[95 115]
[96 114]
[97 113]
[98 112]
[100 108]
[101 107]
[102 106]
[135 149]
[136 148]
[137 147]
[138 146]
[139 145]
[160 187]
[161 186]
[162 185]
[169 178]
[170 177]
[171 176]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
