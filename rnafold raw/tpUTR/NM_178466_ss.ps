%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 10:31:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUGCUGAUCAGAAGGAAAGUCCACAUCUUGCAACCUUAAGUCUCCCUUAGAGUGGGGCUUCUGCUACCCUAAAAACUUUACCCCAGGCUCUGUGGACAUACCAUCCUCUCCUACAAUAAACUCUAGCUCUGAAGGGUGCACAGGUCCCUCCCACCUGGGCCCUGGGGUUUAGGUCUAGAAGUCAGA\
) } def
/len { sequence length } bind def

/coor [
[121.90133667 136.93243408]
[117.50258636 151.27296448]
[113.10383606 165.61351013]
[108.70508575 179.95404053]
[104.30633545 194.29458618]
[99.90758514 208.63511658]
[106.12588501 223.42404175]
[98.31430817 237.43685913]
[82.46524048 239.92411804]
[70.73671722 228.97782898]
[72.12586975 212.99502563]
[85.56704712 204.23635864]
[89.96579742 189.89582825]
[94.36454773 175.55529785]
[98.76329803 161.21475220]
[103.16204834 146.87422180]
[107.56079865 132.53367615]
[102.48118591 127.01575470]
[98.00336456 141.33180237]
[83.36637115 144.61180115]
[73.20738220 133.57571411]
[77.68552399 119.25977325]
[92.32196045 115.97989655]
[87.24235535 110.46196747]
[72.58754730 113.66146088]
[57.93274689 116.86095428]
[43.27794266 120.06044769]
[35.54473114 124.95655060]
[28.35445213 123.18957520]
[13.64875317 126.14633179]
[-1.05694628 129.10308838]
[-2.35847878 144.15243530]
[-7.84846449 158.22497559]
[-17.08185577 170.17994690]
[-29.31014252 179.04818726]
[-43.54203033 184.11079407]
[-58.62380981 184.95736694]
[-73.33286285 181.51927185]
[-86.47679138 174.07524109]
[-96.99008179 163.22869873]
[-104.02046204 149.85893250]
[-106.99801636 135.04978943]
[-105.68136597 120.00176239]
[-100.17724609 105.93473053]
[-90.93185425 93.98905182]
[-78.69466400 85.13310242]
[-64.45769501 80.08479309]
[-49.37507248 79.25337219]
[-34.66948318 82.70623779]
[-21.53303719 90.16347504]
[-11.03065014 101.02057648]
[-4.01370192 114.39738464]
[10.69199753 111.44062805]
[25.39769745 108.48387909]
[40.07844925 105.40564728]
[54.73325348 102.20615387]
[69.38805389 99.00665283]
[84.04285431 95.80715942]
[97.62580109 89.44292450]
[109.46291351 80.22972870]
[121.30001831 71.01654053]
[133.13713074 61.80335236]
[144.97422791 52.59016037]
[156.81134033 43.37696838]
[168.64845276 34.16378021]
[180.48556519 24.95058823]
[179.63229370 13.07125473]
[184.57653809 2.36810184]
[193.98133850 -4.54115391]
[205.43513489 -6.02870607]
[216.06956482 -1.83893979]
[228.20481873 -10.65571880]
[240.34007263 -19.47249794]
[252.47532654 -28.28927612]
[264.61059570 -37.10605621]
[249.80268860 -39.49903870]
[239.89234924 -50.75891876]
[239.39900208 -65.75080872]
[248.54763794 -77.63787079]
[263.16616821 -80.99920654]
[276.58804321 -74.30191803]
[282.69238281 -60.60020828]
[278.69589233 -46.14318848]
[291.76815796 -53.49954224]
[304.84042358 -60.85589600]
[317.91268921 -68.21224976]
[330.98495483 -75.56860352]
[344.05722046 -82.92494965]
[357.12948608 -90.28130341]
[370.20175171 -97.63765717]
[383.21273804 -105.10182953]
[396.16159058 -112.67331696]
[409.11044312 -120.24479675]
[417.84506226 -136.44610596]
[435.37722778 -135.87876892]
[448.19912720 -143.66329956]
[461.02099609 -151.44784546]
[473.84289551 -159.23239136]
[473.30541992 -175.74969482]
[481.12158203 -190.20394897]
[495.07739258 -198.69972229]
[511.31912231 -199.00173950]
[525.41729736 -191.12223816]
[538.10876465 -199.11772156]
[550.80017090 -207.11318970]
[548.30572510 -222.08160400]
[551.72296143 -236.82493591]
[560.50073242 -249.10356140]
[573.27612305 -257.06451416]
[588.08587646 -259.52111816]
[602.66821289 -256.12973022]
[614.80798340 -247.43748474]
[627.49938965 -255.43295288]
[640.19085693 -263.42843628]
[652.88226318 -271.42391968]
[660.43432617 -285.32632446]
[675.32702637 -285.56387329]
[688.01843262 -293.55935669]
[685.41998291 -308.53656006]
[688.75579834 -323.36697388]
[697.51702881 -335.78906250]
[710.36779785 -343.90856934]
[725.34844971 -346.48727417]
[740.17443848 -343.13201904]
[752.58502197 -334.35440063]
[760.68756104 -321.49295044]
[763.24658203 -306.50897217]
[759.87182617 -291.68737793]
[751.07788086 -279.28839111]
[738.20581055 -271.20272827]
[723.21844482 -268.66342163]
[708.40136719 -272.05767822]
[696.01391602 -280.86791992]
[683.32250977 -272.87246704]
[676.67822266 -259.54193115]
[660.87774658 -258.73248291]
[648.18634033 -250.73699951]
[635.49487305 -242.74153137]
[622.80346680 -234.74604797]
[625.40240479 -220.04316711]
[622.16540527 -205.42579651]
[613.55541992 -193.12814331]
[600.85882568 -185.04203796]
[585.99377441 -182.42591858]
[571.22003174 -185.70913696]
[558.79565430 -194.42176819]
[546.10424805 -186.42628479]
[533.41278076 -178.43081665]
[534.83728027 -164.83853149]
[530.24078369 -151.89770508]
[520.46759033 -142.15599060]
[507.38711548 -137.55731201]
[493.53622437 -139.05404663]
[481.62744141 -146.41050720]
[468.80554199 -138.62596130]
[455.98364258 -130.84141541]
[443.16177368 -123.05686951]
[439.97964478 -111.37468719]
[429.34579468 -104.78739166]
[416.68191528 -107.29595184]
[403.73309326 -99.72446442]
[390.78424072 -92.15298462]
[386.58944702 -86.05165863]
[377.55810547 -84.56539154]
[364.48583984 -77.20903778]
[351.41357422 -69.85269165]
[338.34130859 -62.49633789]
[325.26904297 -55.13998413]
[312.19677734 -47.78363037]
[299.12451172 -40.42727661]
[286.05224609 -33.07092667]
[273.42736816 -24.97080040]
[261.29211426 -16.15402031]
[249.15684509 -7.33724260]
[237.02159119 1.47953641]
[224.88633728 10.29631519]
[223.12953186 28.50494003]
[208.37948608 39.85599136]
[189.69874573 36.78769684]
[177.86164856 46.00088501]
[166.02453613 55.21407700]
[154.18742371 64.42726898]
[142.35031128 73.64045715]
[130.51321411 82.85365295]
[118.67610168 92.06684113]
[106.83899689 101.28002930]
[113.27064514 104.92140961]
[118.47209930 110.70503998]
[121.91876984 118.28760529]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 14]
[5 13]
[6 12]
[24 58]
[25 57]
[26 56]
[27 55]
[29 54]
[30 53]
[31 52]
[59 186]
[60 185]
[61 184]
[62 183]
[63 182]
[64 181]
[65 180]
[66 179]
[71 176]
[72 175]
[73 174]
[74 173]
[75 172]
[83 171]
[84 170]
[85 169]
[86 168]
[87 167]
[88 166]
[89 165]
[90 164]
[91 162]
[92 161]
[93 160]
[95 157]
[96 156]
[97 155]
[98 154]
[103 148]
[104 147]
[105 146]
[112 139]
[113 138]
[114 137]
[115 136]
[117 134]
[118 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
