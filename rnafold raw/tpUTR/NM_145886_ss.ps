%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 05:13:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCACAGACUUUUAGGCUGGCCCAGAUAUUCCCCAGUGGAUGGGCAGAGCCCCCACCUUCAAGUCUCUCCAGUGUGUGGGGACGGGUCCCUGUGAGCAACAAAACUGCACUGUUUCUUUCACCUCA\
) } def
/len { sequence length } bind def

/coor [
[87.17617798 105.18611908]
[90.88286591 99.28060913]
[77.71369934 92.09916687]
[64.54454041 84.91771698]
[51.37537766 77.73627472]
[38.20621490 70.55482483]
[25.03705406 63.37337875]
[11.86789322 56.19192886]
[-3.95222116 56.37783432]
[-11.42172050 43.49156952]
[-24.59088135 36.31012344]
[-37.76004410 29.12867546]
[-56.69049072 44.04834366]
[-80.37622070 48.20122910]
[-103.14688110 40.64707565]
[-119.57673645 23.24183846]
[-125.77750397 0.18205154]
[-140.64314270 -1.82110429]
[-155.50878906 -3.82426000]
[-170.37443542 -5.82741594]
[-187.17962646 1.58215380]
[-200.68147278 -9.55862808]
[-215.59149170 -11.19919586]
[-230.50149536 -12.83976364]
[-245.41151428 -14.48033237]
[-260.32153320 -16.12090111]
[-272.57940674 -6.50934696]
[-287.67691040 -8.38551521]
[-296.76452637 -20.13076973]
[-311.67453003 -21.77133751]
[-326.58456421 -23.41190720]
[-341.49456787 -25.05247498]
[-356.28240967 -17.96360970]
[-369.66079712 -27.44784546]
[-367.86718750 -43.74861145]
[-352.74670410 -50.09708023]
[-339.85400391 -39.96249008]
[-324.94400024 -38.32192230]
[-310.03396606 -36.68135452]
[-295.12396240 -35.04078674]
[-283.69998169 -44.52912521]
[-268.55575562 -43.07775497]
[-258.68096924 -31.03091431]
[-243.77095032 -29.39034653]
[-228.86093140 -27.74977875]
[-213.95091248 -26.10921097]
[-199.04090881 -24.46864319]
[-189.34762573 -31.81278992]
[-176.85298157 -30.49967384]
[-168.37127686 -20.69305992]
[-153.50563049 -18.68990326]
[-138.63998413 -16.68674850]
[-123.77434540 -14.68359184]
[-120.99291229 -21.97070122]
[-117.08371735 -28.72555542]
[-112.14537048 -34.77486038]
[-106.30290222 -39.96315384]
[-99.70458221 -44.15680313]
[-92.51820374 -47.24744797]
[-84.92677307 -49.15478897]
[-77.12386322 -49.82868958]
[-69.30869293 -49.25047302]
[-61.68100739 -47.43346024]
[-54.43601227 -44.42264938]
[-47.75934982 -40.29360962]
[-41.82234955 -35.15057755]
[-36.77763748 -29.12383652]
[-32.75520706 -22.36641121]
[-29.85906792 -15.05018520]
[-28.16456413 -7.36152077]
[-27.71640968 0.50347716]
[-28.52750969 8.34397030]
[-30.57859612 15.95951271]
[-17.40943527 23.14096069]
[-4.24027348 30.32240677]
[10.63789368 29.62283897]
[19.04933929 43.02276993]
[32.21850204 50.20421600]
[45.38766479 57.38566208]
[58.55682373 64.56710815]
[71.72599030 71.74855804]
[84.89514923 78.93000031]
[98.06430817 86.11145020]
[113.02429199 87.20638275]
[127.09874725 82.01890564]
[141.17318726 76.83143616]
[155.24765015 71.64396667]
[165.31611633 58.69955444]
[181.52125549 61.21462631]
[187.19259644 76.60189056]
[176.49595642 89.03224945]
[160.43511963 85.71841431]
[146.36067200 90.90588379]
[132.28620911 96.09336090]
[118.21176910 101.28083038]
[115.48721313 116.03131866]
[126.77985382 125.90432739]
[138.07249451 135.77732849]
[157.95294189 138.67077637]
[163.62275696 157.09338379]
[175.38269043 166.40487671]
[190.87399292 164.77465820]
[202.66758728 174.38536072]
[204.12629700 189.16398621]
[215.88623047 198.47547913]
[227.64616394 207.78697205]
[239.40611267 217.09844971]
[255.07386780 215.02557373]
[267.56741333 224.70480347]
[269.47451782 240.39360046]
[259.66375732 252.78410339]
[243.95565796 254.52522278]
[231.66957092 244.58401489]
[230.09461975 228.85839844]
[218.33468628 219.54690552]
[206.57473755 210.23541260]
[194.81480408 200.92391968]
[180.09545898 202.89282227]
[168.03656006 193.61717224]
[166.07121277 178.16482544]
[154.31126404 168.85333252]
[144.18136597 170.94932556]
[134.38638306 166.98893738]
[128.31089783 158.07652283]
[128.19947815 147.06997681]
[116.90683746 137.19696045]
[105.61420441 127.32395172]
[94.02487946 122.42505646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 83]
[3 82]
[4 81]
[5 80]
[6 79]
[7 78]
[8 77]
[10 75]
[11 74]
[12 73]
[17 53]
[18 52]
[19 51]
[20 50]
[22 47]
[23 46]
[24 45]
[25 44]
[26 43]
[29 40]
[30 39]
[31 38]
[32 37]
[84 95]
[85 94]
[86 93]
[87 92]
[96 127]
[97 126]
[98 125]
[100 121]
[101 120]
[104 117]
[105 116]
[106 115]
[107 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
