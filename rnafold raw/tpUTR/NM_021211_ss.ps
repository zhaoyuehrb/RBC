%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 21:41:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUGGAGGAGUUUGCAUGUCUCAUGAUAACCAAAUGUAAGAUGAAAAUAAAAGAUGAUUUACUUCAUCUCUGGUAUUUGGGGGAUUUAAAUAAAAUGAUUCCAUUUUUUUAUACUAUUUAGAUUUUAAGAAGGCUAAAGAAUCAAACGUUUUAAACAUA\
) } def
/len { sequence length } bind def

/coor [
[81.49411774 323.45617676]
[73.38462067 310.56600952]
[71.22555542 295.49093628]
[75.39097595 280.84274292]
[85.15921783 269.15936279]
[98.83786774 262.46499634]
[98.25262451 247.47642517]
[97.66738129 232.48785400]
[97.08213806 217.49926758]
[88.85416412 205.08357239]
[96.04714203 190.99201965]
[95.46189880 176.00344849]
[94.87666321 161.01486206]
[94.29141998 146.02629089]
[93.70617676 131.03771973]
[88.86193848 129.64616394]
[84.29981232 127.50374603]
[80.13534546 124.66469574]
[68.22762299 133.78643799]
[56.31990433 142.90818787]
[44.41218185 152.02992249]
[38.62733459 167.37487793]
[22.40406418 169.77017212]
[12.43147659 156.75175476]
[18.96851730 141.71183777]
[35.29043961 140.12220764]
[47.19815826 131.00045776]
[59.10588074 121.87871552]
[71.01360321 112.75697327]
[66.33850098 93.60795593]
[74.05620575 73.82115936]
[61.80165863 65.17095947]
[49.54711151 56.52075195]
[37.29256439 47.87054825]
[25.03801346 39.22034073]
[12.78346634 30.57013702]
[0.52891755 21.91993332]
[-14.84918499 24.40019989]
[-27.15381432 15.45309258]
[-29.42359924 0.77713698]
[-41.67815018 -7.87306786]
[-53.93269730 -16.52327347]
[-49.19592667 -2.29080963]
[-51.49684906 12.53166485]
[-60.32540512 24.65835571]
[-73.72451019 31.40105820]
[-88.72389221 31.26507187]
[-101.99854279 24.28054428]
[-110.60578156 11.99577904]
[-112.63758087 -2.86597633]
[-107.64354706 -17.01021957]
[-96.73073578 -27.30150032]
[-82.31826019 -31.45848656]
[-67.60186768 -28.56005478]
[-77.73272705 -39.62195969]
[-87.86357880 -50.68386841]
[-97.99443817 -61.74577332]
[-108.12528992 -72.80767822]
[-123.92336273 -73.25085449]
[-134.72006226 -84.79238892]
[-134.10987854 -100.58489227]
[-122.45484161 -111.25895691]
[-106.66967010 -110.48184967]
[-96.11943054 -98.71460724]
[-97.06338501 -82.93853760]
[-86.93253326 -71.87663269]
[-76.80167389 -60.81472397]
[-66.67082214 -49.75281525]
[-56.53996277 -38.69091034]
[-45.28249359 -28.77782059]
[-33.02794266 -20.12761688]
[-20.77339554 -11.47741127]
[-6.18471098 -14.25335884]
[6.36636925 -5.65539169]
[9.17912197 9.66538429]
[21.43367004 18.31558990]
[33.68822098 26.96579361]
[45.94276810 35.61599731]
[58.19731522 44.26620483]
[70.45186615 52.91640854]
[82.70641327 61.56661224]
[97.26242065 57.94409561]
[104.03312683 44.55912399]
[110.80384064 31.17415047]
[117.57454681 17.78917885]
[124.34526062 4.40420580]
[131.11596680 -8.98076725]
[122.64620209 -21.79320526]
[121.73340607 -37.12495041]
[128.62312317 -50.85183716]
[141.46203613 -59.28140259]
[156.79656982 -60.14613724]
[170.50180054 -53.21343231]
[178.89106750 -40.34814835]
[179.70773315 -25.01098251]
[172.73210144 -11.32755661]
[159.84059143 -2.97864318]
[144.50094604 -2.21005774]
[137.73022461 11.17491531]
[130.95951843 24.55988693]
[124.18881226 37.94485855]
[117.41810608 51.32983398]
[110.64739227 64.71480560]
[122.13041687 72.72014618]
[129.29791260 83.96593475]
[131.47007751 96.45230103]
[146.34957886 98.34972382]
[161.22909546 100.24713898]
[176.10859680 102.14456177]
[190.98811340 104.04198456]
[205.86761475 105.93939972]
[220.74713135 107.83682251]
[233.16893005 98.43806458]
[248.23184204 100.57427979]
[257.11557007 112.47448730]
[271.99508667 114.37191010]
[286.66311646 108.44241333]
[298.30941772 117.72749329]
[313.18893433 119.62490845]
[328.06845093 121.52233124]
[342.94796753 123.41975403]
[356.46484375 114.77838135]
[371.60144043 120.09467316]
[376.74624634 135.29040527]
[367.95260620 148.70874023]
[351.96624756 150.05624390]
[341.05053711 138.29925537]
[326.17102051 136.40184021]
[311.29153442 134.50442505]
[296.41201782 132.60699463]
[282.80825806 138.67221069]
[270.09765625 129.25141907]
[255.21813965 127.35399628]
[243.63226318 136.64393616]
[228.51530457 134.93165588]
[218.84971619 122.71633148]
[203.97019958 120.81890869]
[189.09069824 118.92149353]
[174.21118164 117.02407074]
[159.33168030 115.12664795]
[144.45216370 113.22923279]
[129.57264709 111.33181000]
[121.38921356 123.35494232]
[108.69475555 130.45246887]
[109.27999878 145.44105530]
[109.86524200 160.42962646]
[110.45047760 175.41821289]
[111.03572083 190.40678406]
[119.30555725 203.89457703]
[112.07071686 216.91403198]
[112.65596008 231.90260315]
[113.24120331 246.89118958]
[113.82644653 261.87976074]
[127.98542023 267.48718262]
[138.63490295 278.37335205]
[143.92980957 292.65213013]
[142.95275879 307.84967041]
[135.87303162 321.33291626]
[123.91724396 330.76577759]
[109.15679169 334.51394653]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 153]
[7 152]
[8 151]
[9 150]
[11 148]
[12 147]
[13 146]
[14 145]
[15 144]
[18 29]
[19 28]
[20 27]
[21 26]
[31 81]
[32 80]
[33 79]
[34 78]
[35 77]
[36 76]
[37 75]
[40 72]
[41 71]
[42 70]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[82 103]
[83 102]
[84 101]
[85 100]
[86 99]
[87 98]
[106 142]
[107 141]
[108 140]
[109 139]
[110 138]
[111 137]
[112 136]
[115 133]
[116 132]
[118 130]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
