%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 11:55:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGAAAGUCAGUGUUGCUGUGCAUGCGCUGAUGGAGUAGACGAGUGAGCUUUUCCGUGCCUCUCCUCCACCUCUCCCUUCUCAAAAUACUUCAUGAAAGGCAGUGUAUUCUGAAAAAGCCUUCAAAUAAAGGUAUUGCAACACGA\
) } def
/len { sequence length } bind def

/coor [
[138.84651184 439.28640747]
[129.09794617 450.98620605]
[115.43057251 457.70358276]
[100.21237183 458.27468872]
[86.07997894 452.60058594]
[75.48191071 441.66436768]
[70.25435638 427.36077881]
[71.30301666 412.16802979]
[78.44620514 398.71832275]
[90.44632721 389.34188843]
[105.22427368 385.66329956]
[107.79367065 370.88500977]
[110.36306763 356.10668945]
[112.93247223 341.32839966]
[115.50186920 326.55010986]
[118.07126617 311.77178955]
[120.64066315 296.99349976]
[115.19780731 283.12899780]
[125.18463135 270.85812378]
[127.75402832 256.07983398]
[130.32342529 241.30152893]
[132.89282227 226.52322388]
[131.76420593 211.56573486]
[127.00634003 197.34031677]
[122.24846649 183.11489868]
[117.49060059 168.88946533]
[112.73272705 154.66404724]
[107.97486115 140.43862915]
[103.21698761 126.21319580]
[98.45912170 111.98777771]
[84.95281982 112.93744659]
[72.40494537 99.37467957]
[60.04610062 90.87415314]
[47.68725586 82.37362671]
[35.32841110 73.87310028]
[22.96956635 65.37257385]
[22.67156410 80.36961365]
[10.89582920 89.66111755]
[-3.75918198 86.46257782]
[-10.59261036 73.10951996]
[-4.61479330 59.35213089]
[9.80770111 55.23556900]
[-1.56688631 45.45708466]
[-12.94147301 35.67860031]
[-28.45016289 32.54952240]
[-33.05738831 18.38538742]
[-41.67168045 15.13073158]
[-44.56858826 8.27206421]
[-55.73014450 -1.74889374]
[-70.87473297 1.63061738]
[-85.09997559 -4.56794453]
[-92.93597412 -17.96110535]
[-91.36962891 -33.39892197]
[-81.00322723 -44.94524002]
[-65.82286835 -48.16026306]
[-51.66571045 -41.80774689]
[-43.97546387 -28.33036995]
[-45.70918655 -12.91045284]
[-34.54763031 -2.88949490]
[-23.27890396 7.01079941]
[-8.58380127 9.44045544]
[-3.16298842 24.30401421]
[8.21159840 34.08250046]
[19.58618546 43.86098480]
[31.47009277 53.01372910]
[43.82893753 61.51425552]
[56.18778229 70.01478577]
[68.54663086 78.51531219]
[80.90547180 87.01583862]
[70.19169617 76.51750946]
[69.28352356 61.54502487]
[78.64984894 49.82871246]
[93.45481873 47.41773224]
[106.05459595 55.55687714]
[109.94388580 70.04388428]
[103.11310577 83.40045166]
[112.13746643 71.41876221]
[121.16182709 59.43707275]
[130.18618774 47.45538330]
[132.87837219 38.64907837]
[139.53587341 35.31576538]
[148.81594849 23.53101730]
[158.09602356 11.74627018]
[152.32257080 -2.48618484]
[154.45472717 -17.69636154]
[163.91896057 -29.79279709]
[178.16944885 -35.52161407]
[193.37286377 -33.34178925]
[205.43957520 -23.83967972]
[211.12368774 -9.57131100]
[208.89622498 5.62519979]
[199.35633850 17.66206741]
[185.07022095 23.30143547]
[169.88076782 21.02634048]
[160.60069275 32.81108856]
[151.32063293 44.59583664]
[142.16787720 56.47974396]
[133.14352417 68.46143341]
[124.11915588 80.44312286]
[115.09479523 92.42481232]
[112.68454742 107.22990417]
[117.44241333 121.45532990]
[122.20028687 135.68075562]
[126.95815277 149.90617371]
[131.71601868 164.13160706]
[136.47389221 178.35702515]
[141.23176575 192.58244324]
[145.98962402 206.80787659]
[153.95739746 200.43684387]
[165.36056519 197.69006348]
[178.66076660 199.87977600]
[192.78053284 204.94262695]
[206.90028381 210.00546265]
[221.02005005 215.06831360]
[235.20269775 208.09492493]
[250.13510132 213.27165222]
[256.95816040 227.52722168]
[251.62385559 242.40408325]
[237.29693604 249.07603455]
[222.47731018 243.58473206]
[215.95719910 229.18806458]
[201.83744812 224.12522888]
[187.71768188 219.06237793]
[173.59791565 213.99954224]
[167.11622620 217.77281189]
[181.09895325 223.20265198]
[185.57199097 237.52018738]
[177.16712952 249.94429016]
[162.21324158 251.11956787]
[151.97064209 240.16105652]
[154.15281677 225.31935120]
[147.67112732 229.09262085]
[145.10173035 243.87092590]
[142.53233337 258.64923096]
[139.96293640 273.42752075]
[145.22200012 288.34909058]
[135.41896057 299.56289673]
[132.84956360 314.34118652]
[130.28016663 329.11950684]
[127.71076965 343.89779663]
[125.14137268 358.67608643]
[122.57197571 373.45440674]
[120.00257874 388.23269653]
[132.67170715 396.68331909]
[140.80287170 409.55981445]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 143]
[12 142]
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[19 135]
[20 134]
[21 133]
[22 132]
[23 108]
[24 107]
[25 106]
[26 105]
[27 104]
[28 103]
[29 102]
[30 101]
[32 69]
[33 68]
[34 67]
[35 66]
[36 65]
[42 64]
[43 63]
[44 62]
[46 60]
[48 59]
[49 58]
[76 100]
[77 99]
[78 98]
[79 97]
[81 96]
[82 95]
[83 94]
[111 124]
[112 123]
[113 122]
[114 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
