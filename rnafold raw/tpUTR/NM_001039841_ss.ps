%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 19:35:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAUUUUGUUAGUGGAGCACUAAAUAAAUUUAAACCUAACAGAACACCUUCUAUUACACCUCAACAA\
) } def
/len { sequence length } bind def

/coor [
[55.44049454 119.16825867]
[52.25901794 108.58896637]
[37.26290512 108.93041229]
[22.26679230 109.27185822]
[7.27067947 109.61330414]
[-7.72543383 109.95475769]
[-22.72154617 110.29620361]
[-33.60379028 121.44136047]
[-48.81684875 121.57401276]
[-59.37498474 111.13076782]
[-74.37110138 111.47221375]
[-89.36721039 111.81366730]
[-104.36332703 112.15511322]
[-119.35943604 112.49655914]
[-134.35556030 112.83800507]
[-150.05294800 119.24333191]
[-160.55342102 105.93256378]
[-150.66966248 92.15766907]
[-134.69700623 97.84189606]
[-119.70088959 97.50045013]
[-104.70477295 97.15899658]
[-89.70866394 96.81755066]
[-74.71254730 96.47610474]
[-59.71643448 96.13465881]
[-49.64455795 85.22168732]
[-34.44123077 84.66178131]
[-23.06299591 95.30008698]
[-8.06688213 94.95864105]
[6.92923164 94.61719513]
[21.92534447 94.27574921]
[36.92145920 93.93429565]
[51.91757202 93.59284973]
[58.48526764 74.91018677]
[71.97234344 60.40931702]
[90.13086700 52.50714111]
[109.93431091 52.52073288]
[128.08197021 60.44782639]
[141.54913330 74.96719360]
[155.43977356 69.30590820]
[169.33041382 63.64462280]
[179.18974304 51.27110291]
[193.89595032 53.63265610]
[207.78659058 47.97136688]
[221.67723083 42.31007767]
[235.56785583 36.64879227]
[245.19204712 23.37072372]
[261.47308350 25.33537674]
[267.66244507 40.52168655]
[257.39303589 53.30727386]
[241.22915649 50.53942871]
[227.33851624 56.20071793]
[213.44787598 61.86200333]
[199.55723572 67.52329254]
[190.69145203 79.49187469]
[174.99169922 77.53526306]
[161.10105896 83.19654846]
[147.21041870 88.85783386]
[148.50714111 99.82878876]
[147.28790283 110.80861664]
[143.61595154 121.22782898]
[137.68173218 130.54600525]
[129.79306030 138.27983093]
[120.35908508 144.02816772]
[109.86913300 147.49285889]
[98.86728668 148.49421692]
[87.92419434 146.98027039]
[77.60745239 143.02958679]
[68.45215607 136.84704590]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 32]
[3 31]
[4 30]
[5 29]
[6 28]
[7 27]
[10 24]
[11 23]
[12 22]
[13 21]
[14 20]
[15 19]
[38 57]
[39 56]
[40 55]
[42 53]
[43 52]
[44 51]
[45 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
