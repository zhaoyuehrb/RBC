%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 02:33:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGGGACUGGCAGGUUAUUAAUCGAGAUACACUUGUUAGGAGGGACAGGGUUCCCCUAAGGCACUUUUAAAGAUACUCUGUAAGAACCAUUAACAAUAAACUUACUGUCAAUCAUUUCUCUCUA\
) } def
/len { sequence length } bind def

/coor [
[91.28229523 204.28500366]
[86.18437195 189.62925720]
[90.70671844 174.78579712]
[103.11038971 165.46224976]
[102.73642731 150.46691895]
[102.36247253 135.47157288]
[101.98851013 120.47624207]
[89.49055481 112.18160248]
[75.52744293 117.66171265]
[61.56433868 123.14183044]
[47.60123444 128.62194824]
[33.63812637 134.10206604]
[19.67502213 139.58218384]
[5.71191502 145.06228638]
[-8.25119114 150.54240417]
[-22.21429825 156.02252197]
[-36.10800171 161.67628479]
[-49.93014526 167.50280762]
[-63.75228882 173.32933044]
[-77.57443237 179.15585327]
[-83.29843903 193.88714600]
[-97.79599762 200.17971802]
[-112.46595764 194.30027771]
[-118.60489655 179.73699951]
[-112.57068634 165.13002014]
[-97.94332123 159.14540100]
[-83.40095520 165.33370972]
[-69.57881165 159.50718689]
[-55.75666809 153.68066406]
[-41.93452454 147.85414124]
[-36.93831635 142.29594421]
[-27.69441223 142.05941772]
[-13.73130703 136.57929993]
[0.23179965 131.09918213]
[14.19490623 125.61907196]
[28.15801239 120.13895416]
[42.12111664 114.65884399]
[56.08422470 109.17872620]
[70.04733276 103.69860840]
[84.01043701 98.21849823]
[96.29771423 89.61484528]
[106.22300720 78.36813354]
[105.42110443 62.81195068]
[115.64697266 51.54756927]
[130.48234558 50.87894821]
[140.40763855 39.63222885]
[150.33293152 28.38551140]
[160.25820923 17.13879204]
[170.18350220 5.89207506]
[179.82531738 -5.59859180]
[189.17765808 -17.32606316]
[198.53001404 -29.05353546]
[207.88235474 -40.78100967]
[201.08010864 -56.88265228]
[203.29187012 -74.13267517]
[213.82884216 -87.85727692]
[229.75869751 -94.38296509]
[246.72125244 -92.01956177]
[255.47740173 -104.19863129]
[264.23355103 -116.37770081]
[272.83721924 -128.66497803]
[281.28701782 -141.05856323]
[278.62817383 -151.74792480]
[282.27618408 -161.90692139]
[290.77273560 -168.19976807]
[301.11257935 -168.70562744]
[310.16964722 -180.66261292]
[319.22671509 -192.61959839]
[328.28378296 -204.57658386]
[337.34082031 -216.53356934]
[339.50579834 -232.20594788]
[353.35821533 -237.67945862]
[362.41528320 -249.63644409]
[371.47235107 -261.59344482]
[376.21636963 -277.87011719]
[393.17022705 -277.81735229]
[397.81280518 -261.51144409]
[383.42935181 -252.53636169]
[374.37228394 -240.57937622]
[365.31521606 -228.62239075]
[363.79809570 -213.80525208]
[349.29782104 -207.47650146]
[340.24075317 -195.51951599]
[331.18368530 -183.56253052]
[322.12661743 -171.60554504]
[313.06954956 -159.64855957]
[312.19485474 -140.39685059]
[293.68057251 -132.60876465]
[285.23077393 -120.21517944]
[284.04940796 -112.83547974]
[276.41262817 -107.62154388]
[267.65646362 -95.44247437]
[258.90032959 -83.26340485]
[265.35321045 -72.26319122]
[267.13525391 -59.58765030]
[263.94219971 -47.14358139]
[256.22100830 -36.81677246]
[245.10754395 -30.18619537]
[232.25964355 -28.28265381]
[219.60983276 -31.42866135]
[210.25747681 -19.70118904]
[200.90513611 -7.97371674]
[191.55279541 3.75375533]
[191.20831299 8.61783028]
[187.73109436 13.28740311]
[181.43022156 15.81736279]
[171.50492859 27.06408119]
[161.57965088 38.31079865]
[151.65435791 49.55751801]
[141.72906494 60.80423355]
[142.91032410 75.60762024]
[133.00488281 87.15477753]
[117.46972656 88.29341888]
[107.54443359 99.54013824]
[112.06790924 102.09220123]
[115.57252502 106.66127014]
[117.38879395 112.85897064]
[116.98384857 120.10227966]
[117.35780334 135.09762573]
[117.73176575 150.09295654]
[118.10572815 165.08830261]
[130.95872498 173.78198242]
[136.21533203 188.38156128]
[131.85427856 203.27319336]
[119.55247498 212.73075867]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 121]
[5 120]
[6 119]
[7 118]
[8 40]
[9 39]
[10 38]
[11 37]
[12 36]
[13 35]
[14 34]
[15 33]
[16 32]
[17 30]
[18 29]
[19 28]
[20 27]
[41 114]
[42 113]
[45 110]
[46 109]
[47 108]
[48 107]
[49 106]
[50 103]
[51 102]
[52 101]
[53 100]
[58 93]
[59 92]
[60 91]
[61 89]
[62 88]
[66 86]
[67 85]
[68 84]
[69 83]
[70 82]
[72 80]
[73 79]
[74 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
