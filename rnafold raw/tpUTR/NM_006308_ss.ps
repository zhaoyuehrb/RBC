%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 09:15:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCGUAUCGGUUCCUGUUCAGAUGACAUGGGGAAGAUGAUGGUUCAGCCACUGGUACUACGAGAAUGUUUGUAUUACCCACAUUUGAAAUGAUUUGCUAUGAUUUUUAUGAAGAUUAAAAAUAUAUACACAGUUCCUGGUA\
) } def
/len { sequence length } bind def

/coor [
[80.23204803 123.55177307]
[68.07745361 132.34187317]
[55.92285538 141.13195801]
[43.76826096 149.92205811]
[31.61366653 158.71215820]
[19.45907021 167.50225830]
[20.45325851 178.26007080]
[16.87932014 188.36936951]
[9.45791531 195.99560547]
[-0.39881569 199.78509521]
[-10.85562420 199.10507202]
[-19.99579430 194.14830017]
[-32.70291519 202.11882019]
[-45.41003799 210.08932495]
[-58.11715698 218.05984497]
[-70.82427979 226.03034973]
[-83.53139496 234.00086975]
[-96.23851776 241.97138977]
[-108.85732269 250.08099365]
[-121.38628387 258.32873535]
[-128.25260925 273.22119141]
[-144.60556030 274.45135498]
[-153.62260437 260.75375366]
[-146.02780151 246.21926880]
[-129.63401794 245.79975891]
[-117.10505676 237.55203247]
[-113.21755981 231.19778442]
[-104.20903015 229.26426697]
[-91.50191498 221.29374695]
[-78.79479218 213.32324219]
[-66.08766937 205.35272217]
[-53.38055038 197.38220215]
[-40.67342758 189.41169739]
[-27.96630859 181.44117737]
[-25.11682892 162.23646545]
[-8.88256836 151.04682922]
[10.66897297 155.34765625]
[22.82356834 146.55755615]
[34.97816467 137.76747131]
[47.13275909 128.97737122]
[59.28735352 120.18727112]
[71.44194794 111.39717102]
[71.24983978 89.09650421]
[86.18171692 72.53160095]
[82.91278076 57.89213181]
[79.64385223 43.25266266]
[76.37491608 28.61319351]
[73.10598755 13.97372246]
[58.29881668 10.43689919]
[46.54353333 0.86087328]
[40.13789749 -12.81348133]
[40.30392075 -27.85121536]
[46.95512009 -41.27026749]
[58.72427368 -50.43283081]
[55.45534134 -65.07229614]
[52.18640900 -79.71176910]
[48.91747665 -94.35124207]
[38.35868835 -106.13353729]
[43.13637924 -120.24108887]
[39.86744690 -134.88055420]
[36.59851456 -149.52003479]
[33.32958221 -164.15950012]
[30.06064987 -178.79896545]
[26.79171753 -193.43843079]
[15.30185127 -205.13951111]
[19.95045471 -220.86599731]
[35.95544434 -224.43984985]
[46.85225677 -212.18458557]
[41.43118668 -196.70736694]
[44.70011902 -182.06790161]
[47.96905136 -167.42843628]
[51.23798370 -152.78895569]
[54.50691605 -138.14949036]
[57.77584839 -123.51001740]
[68.10082245 -112.77483368]
[63.55694580 -97.62017059]
[66.82587433 -82.98070526]
[70.09481049 -68.34123230]
[73.36373901 -53.70176315]
[87.91257477 -50.41589737]
[99.64022827 -41.10076523]
[106.18725586 -27.56202888]
[106.20688629 -12.46170330]
[99.64165497 1.20521677]
[87.74546051 10.70479012]
[91.01438904 25.34425926]
[94.28332520 39.98373032]
[97.55225372 54.62319946]
[100.82118988 69.26267242]
[116.28440094 73.91789246]
[127.25594330 85.76725006]
[130.70959473 101.54237366]
[145.05470276 105.92619324]
[160.51362610 102.55986786]
[170.42396545 113.67897034]
[184.76907349 118.06279755]
[199.11418152 122.44662476]
[216.91191101 117.86373901]
[228.41674805 131.07159424]
[242.85470581 135.13923645]
[257.29263306 139.20687866]
[271.73059082 143.27452087]
[286.21234131 147.18333435]
[300.73617554 150.93283081]
[315.25997925 154.68232727]
[329.78381348 158.43182373]
[344.30761719 162.18132019]
[358.83142090 165.93081665]
[373.35525513 169.68031311]
[385.97619629 160.44743347]
[401.57565308 161.53880310]
[412.78802490 172.43910217]
[414.31918335 188.00154114]
[405.44619751 200.87800598]
[390.35855103 204.98864746]
[376.18020630 198.39251709]
[369.60574341 184.20413208]
[355.08193970 180.45463562]
[340.55810547 176.70513916]
[326.03430176 172.95564270]
[311.51049805 169.20614624]
[296.98666382 165.45664978]
[282.46286011 161.70715332]
[275.14349365 163.09144592]
[267.66293335 157.71247864]
[253.22500610 153.64483643]
[238.78706360 149.57719421]
[224.34910583 145.50955200]
[213.59761047 151.15805054]
[201.50030518 147.82968140]
[194.73034668 136.79173279]
[180.38523865 132.40789795]
[166.04014587 128.02407837]
[151.60726929 131.70396423]
[140.67086792 120.27130127]
[126.32576752 115.88747406]
[122.31401825 121.15519714]
[117.26751709 125.44190979]
[111.42028809 128.54881287]
[105.04346466 130.33184814]
[98.43277740 130.70832825]
[91.89475250 129.66079712]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[4 39]
[5 38]
[6 37]
[12 34]
[13 33]
[14 32]
[15 31]
[16 30]
[17 29]
[18 28]
[19 26]
[20 25]
[44 89]
[45 88]
[46 87]
[47 86]
[48 85]
[54 79]
[55 78]
[56 77]
[57 76]
[59 74]
[60 73]
[61 72]
[62 71]
[63 70]
[64 69]
[92 136]
[93 135]
[95 133]
[96 132]
[97 131]
[99 128]
[100 127]
[101 126]
[102 125]
[103 123]
[104 122]
[105 121]
[106 120]
[107 119]
[108 118]
[109 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
