%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:12:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCACUUCCUUACAGAGCUAAGAAUCCAUAGCCAUGGCUCUGUAAGCUAAACCUGAAGAGUGAUAUUUGUACAAUAGCUUUCUUCUUUAUUUAAAUAAACAUUUGUAUUGUAGUUGGGAUUCUGAA\
) } def
/len { sequence length } bind def

/coor [
[137.87516785 151.47685242]
[126.14581299 158.31629944]
[113.23633575 162.52354431]
[99.72941589 163.90869141]
[86.23471069 162.40922546]
[73.36132050 158.09281921]
[61.69030762 151.15429688]
[51.74846268 141.90684509]
[43.98453140 130.76786804]
[38.74893951 118.24013519]
[23.96977615 120.80456543]
[9.19061184 123.36898804]
[-5.58855295 125.93341827]
[-20.36771774 128.49784851]
[-35.14688110 131.06227112]
[-49.92604828 133.62670898]
[-64.70521545 136.19113159]
[-79.48437500 138.75555420]
[-94.26354218 141.31999207]
[-109.04270935 143.88441467]
[-123.82186890 146.44885254]
[-136.09608459 156.43153381]
[-149.95877075 150.98402405]
[-155.17576599 165.42973328]
[-166.92700195 175.31932068]
[-182.05146790 177.99252319]
[-196.48075867 172.73028564]
[-206.33346558 160.94808960]
[-208.95924377 145.81532288]
[-203.65179443 131.40260315]
[-191.83877563 121.58687592]
[-176.69786072 119.00853729]
[-162.30183411 124.36114502]
[-152.52319336 136.20486450]
[-141.30607605 126.40559387]
[-126.38629913 131.66967773]
[-111.60713196 129.10525513]
[-96.82797241 126.54082489]
[-82.04880524 123.97639465]
[-67.26963806 121.41197205]
[-52.49047470 118.84754181]
[-37.71131134 116.28311157]
[-22.93214607 113.71868134]
[-8.15298176 111.15425873]
[6.62618303 108.58982849]
[21.40534782 106.02539825]
[36.18451309 103.46096802]
[37.40739441 87.09416199]
[42.75829315 71.57849884]
[51.88430405 57.93725204]
[64.18357086 47.07006073]
[78.84495544 39.69362640]
[94.90151978 36.29442596]
[111.29432678 37.09663773]
[126.94227600 42.04735947]
[140.81336975 50.82008362]
[151.99279785 62.83624649]
[159.74327087 77.30338287]
[174.29373169 73.65867615]
[188.84420776 70.01397705]
[203.39466858 66.36927032]
[217.94514465 62.72457123]
[219.19247437 49.23059464]
[224.55535889 36.81035233]
[233.49156189 26.68376160]
[245.10865784 19.84064102]
[258.25314331 16.94398308]
[271.62493896 18.26572990]
[283.90600586 23.66131592]
[293.89022827 32.58532715]
[300.60189819 44.14660263]
[315.31369019 41.22024918]
[330.02548218 38.29389572]
[344.73724365 35.36753845]
[359.44903564 32.44118500]
[374.16079712 29.51482964]
[388.87258911 26.58847427]
[390.41394043 13.76844883]
[395.52401733 1.92994261]
[403.77304077 -7.95704079]
[414.47436523 -15.08556747]
[426.74188232 -18.87763023]
[439.56314087 -19.03100395]
[451.88311768 -15.54330540]
[462.69094849 -8.71135330]
[471.10281372 0.89407158]
[476.43432617 12.47589684]
[491.32150269 10.63973713]
[506.20870972 8.80357647]
[521.09588623 6.96741676]
[535.98309326 5.13125658]
[548.74163818 -5.17171288]
[563.94415283 0.97771168]
[565.95159912 17.25353050]
[552.69885254 26.91257477]
[537.81927490 20.01844978]
[522.93206787 21.85461044]
[508.04486084 23.69076920]
[493.15768433 25.52692986]
[478.27047729 27.36309052]
[474.22488403 44.11933517]
[464.08990479 58.10585403]
[449.36743164 67.20491028]
[432.25631714 70.02636719]
[415.32406616 66.12001801]
[401.12164307 56.04719925]
[391.79895020 41.30025482]
[377.08715820 44.22660828]
[362.37539673 47.15296173]
[347.66360474 50.07931900]
[332.95181274 53.00567245]
[318.24005127 55.93202972]
[303.52825928 58.85838318]
[300.70758057 75.17655945]
[291.85388184 89.21436310]
[278.28353882 98.83239746]
[262.03430176 102.55229187]
[245.55918884 99.78391266]
[231.35627747 90.91880798]
[221.58984375 77.27503967]
[207.03938293 80.91973877]
[192.48890686 84.56444550]
[177.93844604 88.20914459]
[163.38796997 91.85385132]
[163.67829895 105.42850494]
[161.09440613 118.75813293]
[155.75292969 131.24108887]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 47]
[11 46]
[12 45]
[13 44]
[14 43]
[15 42]
[16 41]
[17 40]
[18 39]
[19 38]
[20 37]
[21 36]
[23 34]
[58 124]
[59 123]
[60 122]
[61 121]
[62 120]
[71 113]
[72 112]
[73 111]
[74 110]
[75 109]
[76 108]
[77 107]
[87 100]
[88 99]
[89 98]
[90 97]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
