%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 10:58:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACACAUGGAGAAACCAAAUUGGACAAAUCAUCACCACUGAUGGCGAUGAUUACAAUAAAAUCAAGUUUAAGGAGCUGA\
) } def
/len { sequence length } bind def

/coor [
[104.69931030 186.88575745]
[92.57677460 186.69552612]
[80.59835815 184.82212830]
[68.99661255 181.30195618]
[57.99678421 176.20333862]
[47.81243515 169.62525940]
[38.64128494 161.69543457]
[30.66138840 152.56781006]
[17.97159195 160.56587219]
[5.28179502 168.56394958]
[0.34556627 183.82872009]
[-14.71681118 189.35179138]
[-28.35077095 180.89633179]
[-30.09750557 164.94865417]
[-18.61706924 153.74244690]
[-2.71627164 155.87414551]
[9.97352505 147.87608337]
[22.66332054 139.87802124]
[16.37652206 124.04853821]
[13.29381371 107.29761505]
[13.53330994 90.26708984]
[17.08583641 73.60948181]
[23.81527328 57.96304703]
[33.46377945 43.92728424]
[45.66166687 32.03998566]
[59.94156265 22.75662041]
[75.75632477 16.43288803]
[92.50000000 13.31108475]
[92.50000000 -1.68891513]
[92.50000000 -16.68891525]
[92.50000000 -31.68891525]
[92.50000000 -46.68891525]
[92.50000000 -61.68891525]
[92.50000000 -76.68891144]
[84.76270294 -90.48908997]
[92.50000000 -103.21636200]
[92.50000000 -118.21636200]
[92.50000000 -133.21635437]
[83.83629608 -147.14016724]
[91.80042267 -161.47560120]
[108.19957733 -161.47560120]
[116.16370392 -147.14016724]
[107.50000000 -133.21635437]
[107.50000000 -118.21636200]
[107.50000000 -103.21636200]
[115.23729706 -90.48908997]
[107.50000000 -76.68891144]
[107.50000000 -61.68891525]
[107.50000000 -46.68891525]
[107.50000000 -31.68891525]
[107.50000000 -16.68891525]
[107.50000000 -1.68891513]
[107.50000000 13.31108475]
[122.45191193 15.93377781]
[136.72047424 21.11511803]
[149.87141418 28.69740486]
[161.50445557 38.44986343]
[171.26554871 50.07566452]
[178.85760498 63.22097015]
[184.04953003 77.48568726]
[186.68331909 92.43564606]
[186.67881775 107.61583710]
[184.03614807 122.56423187]
[178.83573914 136.82585144]
[171.23588562 149.96664429]
[161.46789551 161.58665466]
[171.10971069 173.07731628]
[180.75152588 184.56799316]
[190.39334106 196.05865479]
[200.03515625 207.54931641]
[214.84811401 215.79629517]
[211.02407837 232.31333923]
[194.09391785 233.21112061]
[188.54447937 217.19113159]
[178.90266418 205.70046997]
[169.26084900 194.20980835]
[159.61903381 182.71913147]
[149.97723389 171.22846985]
[139.59149170 177.48374939]
[128.43710327 182.23472595]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 18]
[9 17]
[10 16]
[28 53]
[29 52]
[30 51]
[31 50]
[32 49]
[33 48]
[34 47]
[36 45]
[37 44]
[38 43]
[66 78]
[67 77]
[68 76]
[69 75]
[70 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
