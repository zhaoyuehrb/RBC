%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 23:12:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGGAAGCCUAUGUAAGCAAGAGGGCAGGGCCGGGGUUUGUGGUCCCCCCCCCACCACAAACACAGCACUUCGGCUCCUCUAACCUGUGCCACAGGUGACCACCAAUAAAAUCCUCUGCUGAGAAGUG\
) } def
/len { sequence length } bind def

/coor [
[192.61317444 254.72230530]
[178.02473450 251.94511414]
[169.50955200 239.33772278]
[172.52142334 224.05485535]
[164.30123901 211.50779724]
[149.71279907 208.73062134]
[141.19761658 196.12321472]
[144.20948792 180.84034729]
[135.98930359 168.29328918]
[127.76911926 155.74623108]
[119.54892731 143.19918823]
[106.10220337 136.79333496]
[105.01155853 121.00977325]
[96.79137421 108.46271515]
[93.04937744 107.13529968]
[89.93904114 104.11943054]
[88.22048950 99.74951935]
[88.46883392 94.69556427]
[81.17908478 81.58604431]
[73.88933563 68.47652435]
[61.66503143 64.15903473]
[55.88255310 53.00687408]
[59.18080902 41.30274582]
[52.20996094 28.02090645]
[45.23911285 14.73906612]
[27.00983810 9.88176250]
[18.17679596 -6.42872381]
[23.87266350 -23.74827576]
[16.26826668 -36.67782211]
[8.66386890 -49.60736465]
[0.90380144 -62.44408417]
[-7.01080227 -75.18610382]
[-14.92540550 -87.92812347]
[-22.84000969 -100.67014313]
[-30.75461388 -113.41216278]
[-38.66921616 -126.15418243]
[-46.58382034 -138.89619446]
[-54.49842453 -151.63821411]
[-63.46118546 -163.66606140]
[-73.40802765 -174.89372253]
[-83.35486603 -186.12138367]
[-93.30170441 -197.34904480]
[-103.24854279 -208.57670593]
[-113.19538879 -219.80436707]
[-123.14222717 -231.03202820]
[-138.37142944 -228.56732178]
[-152.50643921 -234.74835205]
[-161.03681946 -247.60276794]
[-161.24055481 -263.02877808]
[-153.05262756 -276.10400391]
[-139.08580017 -282.65618896]
[-123.79680634 -280.59454346]
[-112.06432343 -270.57693481]
[-107.63214874 -255.79994202]
[-111.91456604 -240.97886658]
[-101.96772766 -229.75120544]
[-92.02088165 -218.52354431]
[-82.07404327 -207.29588318]
[-72.12720490 -196.06822205]
[-62.18036652 -184.84056091]
[-52.23352432 -173.61289978]
[-50.65996170 -188.53013611]
[-40.00790024 -199.09107971]
[-25.07769966 -200.53643799]
[-12.59766197 -192.21485901]
[-8.19192696 -177.87646484]
[-13.84594059 -163.98286438]
[-27.01171875 -156.79521179]
[-41.75640488 -159.55282593]
[-33.84180069 -146.81080627]
[-25.92719841 -134.06878662]
[-18.01259422 -121.32676697]
[-10.09799099 -108.58474731]
[-2.18338680 -95.84272766]
[5.73121691 -83.10070801]
[13.64582062 -70.35868835]
[19.91094017 -66.29558563]
[21.59341431 -57.21176529]
[29.19781113 -44.28221893]
[36.80220795 -31.35267448]
[48.32152176 -30.92998505]
[58.28499985 -24.89713097]
[64.11778259 -14.67622471]
[64.24629211 -2.78829718]
[58.52095413 7.76821804]
[65.49179840 21.05005836]
[72.46264648 34.33189774]
[87.76412201 42.83559418]
[86.99885559 61.18677139]
[94.28860474 74.29629517]
[101.57835388 87.40581512]
[109.33842468 100.24253082]
[117.55860901 112.78958130]
[131.59329224 120.09288025]
[132.09597778 134.97900391]
[140.31617737 147.52604675]
[148.53636169 160.07310486]
[156.75654602 172.62014771]
[171.97061157 175.96232605]
[180.12831116 188.80392456]
[176.84829712 203.28761292]
[185.06848145 215.83465576]
[200.28254700 219.17683411]
[208.44024658 232.01843262]
[205.16023254 246.50212097]
[217.61886597 243.13415527]
[230.50305176 243.43955994]
[242.75378418 247.38296509]
[253.36705017 254.63044739]
[261.47607422 264.57772827]
[266.42208862 276.40054321]
[267.80792236 289.12295532]
[265.52981567 301.69790649]
[259.78515625 313.09338379]
[251.05531311 322.37716675]
[258.34506226 335.48669434]
[265.63482666 348.59622192]
[279.97335815 356.55474854]
[279.97973633 372.95388794]
[265.64739990 380.92361450]
[251.72023010 372.26531982]
[252.52529907 355.88595581]
[245.23554993 342.77642822]
[237.94578552 329.66693115]
[220.89094543 332.20556641]
[204.11907959 328.05593872]
[190.15939331 317.81643677]
[181.12739563 303.00592041]
[178.40432739 285.83843994]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 105]
[4 102]
[5 101]
[8 98]
[9 97]
[10 96]
[11 95]
[13 93]
[14 92]
[18 91]
[19 90]
[20 89]
[23 87]
[24 86]
[25 85]
[28 80]
[29 79]
[30 78]
[31 76]
[32 75]
[33 74]
[34 73]
[35 72]
[36 71]
[37 70]
[38 69]
[39 61]
[40 60]
[41 59]
[42 58]
[43 57]
[44 56]
[45 55]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
