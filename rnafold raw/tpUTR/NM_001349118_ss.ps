%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 05:09:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUCUGGAUUUAAUUAUCUGAAAAUACAGUUCUUUCCCUCAUGCUUAUGUAGAUAUAAAAAUAAAAUUCAUAAUGCAAAGUUCCCAAGUUUA\
) } def
/len { sequence length } bind def

/coor [
[60.74207306 192.26272583]
[47.43010330 185.38150024]
[35.29234695 176.59317017]
[24.59992027 166.09403992]
[12.61210155 175.11026001]
[0.62428117 184.12648010]
[-4.48197317 191.94511414]
[-11.91226101 193.23480225]
[-24.19163322 201.84973145]
[-36.47100449 210.46467590]
[-48.75037766 219.07960510]
[-51.23325729 234.68763733]
[-64.07434845 243.90077209]
[-79.65526581 241.25300598]
[-88.73212433 228.31523132]
[-85.91978455 212.76318359]
[-72.88675690 203.82362366]
[-57.36530685 206.80023193]
[-45.08593369 198.18530273]
[-32.80656433 189.57037354]
[-20.52719116 180.95542908]
[-8.39193630 172.13865662]
[3.59588385 163.12243652]
[15.58370399 154.10621643]
[8.46273613 140.92094421]
[3.38636875 126.82164764]
[0.46798909 112.12325287]
[-0.22721751 97.15406799]
[1.31627738 82.24845886]
[5.06399775 67.73934174]
[10.93223381 53.95081329]
[18.78991127 41.19085312]
[28.46151733 29.74446678]
[39.73102570 19.86732674]
[52.34672165 11.78005123]
[66.02680969 5.66327953]
[80.46573639 1.65363824]
[95.34098053 -0.15931295]
[110.32028961 0.26492059]
[125.06908417 2.91686320]
[139.25793457 7.73727989]
[152.56990051 14.61850166]
[164.70765686 23.40682602]
[175.40008545 33.90595627]
[187.38789368 24.88973999]
[199.37571716 15.87352276]
[211.21282959 6.66033173]
[222.89598083 -2.74731374]
[234.57914734 -12.15495872]
[246.26229858 -21.56260490]
[257.94546509 -30.97024918]
[252.34188843 -45.00917435]
[251.12696838 -60.07620239]
[254.40873718 -74.83158875]
[261.89538574 -87.96329498]
[272.92117310 -98.30364990]
[286.50573730 -104.93320465]
[301.44113159 -107.26246643]
[316.39932251 -105.08430481]
[330.05020142 -98.59241486]
[341.17999268 -88.36404419]
[348.79898071 -75.30869293]
[352.22976685 -60.58723831]
[351.16720581 -45.50869751]
[345.70584106 -31.41384506]
[336.33126831 -19.55598640]
[323.87707520 -10.98951340]
[309.45068359 -6.47615147]
[294.33486938 -6.41722584]
[279.87371826 -10.81797600]
[267.35311890 -19.28709030]
[255.66995239 -9.87944508]
[243.98678589 -0.47179985]
[232.30363464 8.93584538]
[220.62046814 18.34349060]
[217.32020569 25.12440109]
[208.39193726 27.86134148]
[196.40411377 36.87755966]
[184.41629028 45.89377594]
[191.53726196 59.07905579]
[196.61363220 73.17835236]
[199.53201294 87.87674713]
[200.22721863 102.84593201]
[198.68371582 117.75154114]
[194.93600464 132.26065063]
[189.06776428 146.04917908]
[181.21008301 158.80914307]
[171.53848267 170.25553894]
[160.26896667 180.13267517]
[147.65327454 188.21995544]
[133.97319031 194.33671570]
[119.53426361 198.34635925]
[104.65901947 200.15931702]
[89.67971039 199.73507690]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 24]
[5 23]
[6 22]
[8 21]
[9 20]
[10 19]
[11 18]
[44 79]
[45 78]
[46 77]
[47 75]
[48 74]
[49 73]
[50 72]
[51 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
