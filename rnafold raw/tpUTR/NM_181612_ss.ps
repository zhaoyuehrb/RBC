%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 00:14:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAACUUGCUGAUUCUCAUACUCUAACUCCAAGAUCUUGCCCGUAUGCUUCAGCAAGGCGAACACUUUUCUCAAUGUAGAGAAAAUACCUACCAUUUUUUGGCUUCAUGCUCCAGAAGGAAC\
) } def
/len { sequence length } bind def

/coor [
[60.86852646 155.42932129]
[50.24455643 145.62564087]
[41.98771667 133.84872437]
[36.44950867 120.65399933]
[33.85410690 106.65583801]
[18.85532951 106.46427917]
[3.85655284 106.27272797]
[-11.14222431 106.08116913]
[-26.14100075 105.88961792]
[-41.13977814 105.69805908]
[-56.13855362 105.50650787]
[-71.13732910 105.31494904]
[-77.96244812 115.21778870]
[-88.63650513 120.49284363]
[-100.40790558 119.91120911]
[-110.30525208 113.73722076]
[-115.88742828 103.63201141]
[-130.85685730 102.67485809]
[-145.82629395 101.71770477]
[-160.79571533 100.76055145]
[-175.76515198 99.80339813]
[-180.74597168 114.05450439]
[-189.38795471 126.43266296]
[-201.04977417 136.01934814]
[-214.86607361 142.10314941]
[-229.81156921 144.23260498]
[-244.77722168 142.24971008]
[-258.65246582 136.30160522]
[-270.40768433 126.82968140]
[-279.17056274 114.53680420]
[-284.29080200 100.33520508]
[-285.38848877 85.27871704]
[-282.38214111 70.48464966]
[-275.49487305 57.05081177]
[-265.23776245 45.97408676]
[-252.37191772 38.07643890]
[-237.85209656 33.94392395]
[-222.75578308 33.88320923]
[-208.20320129 37.89879227]
[-195.27424622 45.69269562]
[-184.92835999 56.68655777]
[-177.93324280 70.06455994]
[-174.80799866 84.83396912]
[-159.83856201 85.79112244]
[-144.86914062 86.74827576]
[-129.89970398 87.70542908]
[-114.93027496 88.66257477]
[-102.05494690 75.76958466]
[-83.52464294 76.27267456]
[-70.94577789 90.31616974]
[-55.94699860 90.50772858]
[-40.94822311 90.69927979]
[-25.94944572 90.89083862]
[-10.95066833 91.08238983]
[4.04810810 91.27394867]
[19.04688454 91.46550751]
[34.04566193 91.65705872]
[37.62568283 76.99948120]
[44.41872406 63.52670670]
[54.07486343 51.93274307]
[66.09669495 42.81481552]
[79.86495209 36.64260483]
[94.67041016 33.73405838]
[109.75039673 34.23899841]
[124.32812500 38.13141632]
[137.65266418 45.21080399]
[147.48873901 33.88597107]
[157.32479858 22.56114006]
[167.16085815 11.23630810]
[176.99693298 -0.08852383]
[186.83299255 -11.41335583]
[196.66906738 -22.73818779]
[195.31002808 -38.48393631]
[205.54675293 -50.52489853]
[221.30599976 -51.71738815]
[233.23805237 -41.35391998]
[234.26385498 -25.58295631]
[223.77482605 -13.76113033]
[207.99389648 -12.90212250]
[198.15782166 -1.57729018]
[188.32176208 9.74754143]
[178.48570251 21.07237434]
[168.64962769 32.39720535]
[158.81356812 43.72203827]
[148.97749329 55.04686737]
[155.36705017 62.32522583]
[160.67268372 70.51233673]
[164.76516724 79.44643402]
[167.53941345 88.94737244]
[168.91717529 98.82025909]
[168.84906006 108.85946655]
[167.31602478 118.85286713]
[181.87661743 122.45690918]
[196.43721008 126.06094360]
[210.86207581 119.03933716]
[225.28298950 126.06905365]
[228.63746643 141.75749207]
[218.35223389 154.06982422]
[202.31724548 153.56109619]
[192.83317566 140.62153625]
[178.27258301 137.01750183]
[163.71199036 133.41345215]
[155.39836121 145.89878845]
[164.33865356 157.94334412]
[173.27894592 169.98788452]
[182.21925354 182.03242493]
[197.73355103 181.73924255]
[210.43791199 190.64872742]
[215.44725037 205.33497620]
[210.83535767 220.15086365]
[198.37562561 229.39933777]
[182.85905457 229.52420044]
[170.25209045 220.47743225]
[165.40235901 205.73770142]
[170.17469788 190.97273254]
[161.23440552 178.92817688]
[152.29411316 166.88363647]
[143.35380554 154.83908081]
[130.57142639 162.48583984]
[116.52570343 167.21936035]
[101.86771393 168.85299683]
[87.26999664 167.34306335]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 57]
[6 56]
[7 55]
[8 54]
[9 53]
[10 52]
[11 51]
[12 50]
[17 47]
[18 46]
[19 45]
[20 44]
[21 43]
[66 85]
[67 84]
[68 83]
[69 82]
[70 81]
[71 80]
[72 79]
[92 102]
[93 101]
[94 100]
[103 118]
[104 117]
[105 116]
[106 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
