%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 19:09:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCACCCGCGGGCCUCCGCUGCCCGACGCUUCUGUUCGGCCCGACCUCCACCCCGGCUCCCAAUAAAAUUUAACUGAUCUUUGUUUCUUA\
) } def
/len { sequence length } bind def

/coor [
[41.69666672 157.10182190]
[30.06099701 166.56814575]
[18.42532921 176.03446960]
[6.78965902 185.50077820]
[-4.84601021 194.96710205]
[-6.83435249 200.25628662]
[-10.38470364 203.76992798]
[-14.49310207 205.20539856]
[-18.19062805 204.73233032]
[-30.73336029 212.95910645]
[-43.27609253 221.18588257]
[-55.81882477 229.41265869]
[-62.71003342 244.29364014]
[-79.06501007 245.49647522]
[-88.05915070 231.78379822]
[-80.44006348 217.26203918]
[-64.04560089 216.86993408]
[-51.50286865 208.64315796]
[-38.96013641 200.41638184]
[-26.41740608 192.18960571]
[-14.31232929 183.33143616]
[-2.67666006 173.86511230]
[8.95900917 164.39878845]
[20.59467888 154.93247986]
[32.23034668 145.46615601]
[22.81117630 126.49118042]
[18.59329605 105.73111725]
[19.86092758 84.58486938]
[26.52865028 64.47736359]
[38.14716721 46.76350784]
[53.93357849 32.63694000]
[72.82412720 23.04956818]
[93.54589844 18.64742470]
[114.70256805 19.72714424]
[118.74951935 5.28338385]
[122.79647064 -9.16037560]
[126.84342194 -23.60413551]
[123.11628723 -38.98005676]
[134.00044250 -49.14786911]
[138.04739380 -63.59162903]
[133.01185608 -81.20172882]
[145.80256653 -93.08422852]
[149.35403442 -107.65773773]
[152.90548706 -122.23123932]
[141.74543762 -132.78343201]
[137.37200928 -147.50650024]
[140.96166992 -162.44001770]
[151.54878235 -173.56694031]
[166.28549194 -177.89419556]
[181.20768738 -174.25775146]
[192.30136108 -163.63581848]
[196.58239746 -148.88562012]
[192.89920044 -133.97489929]
[182.24253845 -122.91455841]
[167.47900391 -118.67977905]
[163.92753601 -104.10626984]
[160.37606812 -89.53276062]
[166.42410278 -78.90518951]
[163.43054199 -66.63337708]
[152.49114990 -59.54467773]
[148.44419861 -45.10091782]
[152.46080017 -30.75810814]
[141.28718567 -19.55718231]
[137.24023438 -5.11342382]
[133.19328308 9.33033562]
[129.14633179 23.77409554]
[138.94714355 28.28516960]
[148.06723022 34.04972458]
[156.34715271 40.96699524]
[163.64221191 48.91608429]
[169.82489014 57.75804901]
[174.78712463 67.33834839]
[178.44218445 77.48952484]
[180.72618103 88.03415680]
[181.59919739 98.78792572]
[181.04595947 109.56288910]
[179.07615662 120.17070770]
[175.72422791 130.42596436]
[171.04872131 140.14941406]
[165.13139343 149.17111206]
[158.07565308 157.33337402]
[150.00483704 164.49351501]
[141.05999756 170.52641296]
[131.39747620 175.32658386]
[121.18618774 178.81016541]
[110.60458374 180.91624451]
[99.83763123 181.60803223]
[89.07351685 180.87341309]
[78.50038147 178.72523499]
[68.30302429 175.20104980]
[58.65969467 170.36245728]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[4 22]
[5 21]
[9 20]
[10 19]
[11 18]
[12 17]
[34 66]
[35 65]
[36 64]
[37 63]
[39 61]
[40 60]
[42 57]
[43 56]
[44 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
