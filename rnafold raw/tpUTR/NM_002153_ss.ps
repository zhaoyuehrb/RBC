%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 07:41:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAAUGGAAGCCCUCAAAGAAGUCGGAAUGUCAUAGUCUUGAAAUGAAAGGGAAACUGGGAAACUGGGUUUCUCAUUAAAGUUGUUUCCCACUCUGUA\
) } def
/len { sequence length } bind def

/coor [
[66.38583374 120.87081909]
[52.37361908 126.22411346]
[42.24355316 138.37698364]
[27.59306335 135.69139099]
[13.58084583 141.04469299]
[-0.43137240 146.39797974]
[-14.44359016 151.75126648]
[-18.56650352 168.06433105]
[-31.42951202 178.65353394]
[-47.90121078 179.54791260]
[-61.55911255 170.59463501]
[-75.39442444 176.38980103]
[-81.45405579 190.73966980]
[-95.56758881 196.41972351]
[-109.21064758 190.55435181]
[-114.96803284 205.27264404]
[-129.47981262 211.53233337]
[-144.13641357 205.61965942]
[-150.24232483 191.04249573]
[-144.17501831 176.44923401]
[-129.53411865 170.49778748]
[-115.00582123 176.71903992]
[-109.61576843 162.88130188]
[-95.66735077 156.80708313]
[-81.18960571 162.55448914]
[-67.35429382 156.75930786]
[-65.47308350 143.43943787]
[-57.15222931 132.73141479]
[-44.50843430 127.53556061]
[-30.84677505 129.32705688]
[-19.79688454 137.73905945]
[-5.78466558 132.38575745]
[8.22755241 127.03247070]
[22.23977089 121.67917633]
[31.36758804 109.90920258]
[47.02032471 112.21189880]
[61.03254318 106.85860443]
[60.83764267 94.35969543]
[64.55173492 82.42378235]
[71.80408478 72.24223328]
[81.87081909 64.83132172]
[93.74710846 60.93077469]
[106.24752808 60.92991638]
[118.12435913 64.82883453]
[128.19210815 72.23836517]
[135.44584656 82.41891479]
[149.90348816 78.42180634]
[157.73094177 64.95449066]
[172.44998169 61.10681152]
[185.24076843 68.65209198]
[199.69841003 64.65498352]
[214.15603638 60.65787888]
[228.61366272 56.66077042]
[243.07130432 52.66366577]
[257.52893066 48.66655731]
[271.98657227 44.66944885]
[285.82186890 38.87427521]
[298.81225586 31.37427330]
[311.80264282 23.87427330]
[324.79302979 16.37427330]
[337.78341675 8.87427330]
[350.77377319 1.37427354]
[363.76416016 -6.12572670]
[376.75454712 -13.62572670]
[387.44845581 -26.78157616]
[403.05056763 -20.14748001]
[400.99481201 -3.31862783]
[384.25454712 -0.63534540]
[371.26416016 6.86465454]
[358.27377319 14.36465454]
[345.28341675 21.86465454]
[332.29302979 29.36465454]
[319.30264282 36.86465454]
[306.31225586 44.36465454]
[293.32186890 51.86465454]
[307.66711426 56.24808121]
[316.88928223 68.07819366]
[317.63973999 83.05941010]
[309.64602661 95.75194550]
[295.81069946 101.54706573]
[281.15744019 98.34052277]
[271.00695801 87.29662323]
[269.04492188 72.42549896]
[275.98367310 59.12708282]
[261.52603149 63.12419128]
[247.06840515 67.12129974]
[232.61077881 71.11840820]
[218.15313721 75.11550903]
[203.69551086 79.11261749]
[189.23788452 83.10972595]
[182.13943481 96.15379333]
[167.53428650 100.41338348]
[153.90058899 92.87944031]
[139.44296265 96.87654877]
[136.95799255 114.12832642]
[127.30101776 128.63839722]
[112.34605408 137.59092712]
[94.99523163 139.24864197]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 37]
[2 36]
[4 34]
[5 33]
[6 32]
[7 31]
[11 26]
[12 25]
[15 22]
[46 94]
[47 93]
[50 90]
[51 89]
[52 88]
[53 87]
[54 86]
[55 85]
[56 84]
[57 75]
[58 74]
[59 73]
[60 72]
[61 71]
[62 70]
[63 69]
[64 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
