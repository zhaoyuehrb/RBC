%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 07:58:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCUGAAGCUUUUUUCAUCCAGUCAAGCAAAUAUAACAUCACCAAAAGGGAUUUUUUUUGGAAAUACAAAAGAACCCCCAGUAAAAUAAUUGAGAUAAUGAAAUAGAAAAAAAUAAUAAAACAUGAUCUUGGUUUUCUUC\
) } def
/len { sequence length } bind def

/coor [
[124.72258759 199.57388306]
[111.97647095 201.89567566]
[99.03937531 202.59260559]
[86.11759949 201.65354919]
[73.41719818 199.09349060]
[61.14069748 194.95324707]
[49.48385620 189.29884338]
[38.63256836 182.22045898]
[28.75986481 173.83094788]
[17.58313370 183.83497620]
[6.40640306 193.83900452]
[-4.77032852 203.84304810]
[-0.06692446 218.32745361]
[-1.66794431 233.47196960]
[-9.29600143 246.65274048]
[-21.62948990 255.58610535]
[-36.53155518 258.72430420]
[-51.42033005 255.52362061]
[-63.71623993 246.53860474]
[-71.28894043 233.32595825]
[-72.82642365 218.17485046]
[-68.06230927 203.71031189]
[-57.82200623 192.43838501]
[-43.87970734 186.31204224]
[-28.65100479 186.39266968]
[-14.77436161 192.66632080]
[-3.59763002 182.66227722]
[7.57910156 172.65824890]
[18.75583267 162.65422058]
[13.26944828 154.80854797]
[8.53825665 146.48564148]
[4.60345316 137.75796509]
[1.49930048 128.70152283]
[-0.74717271 119.39516449]
[-2.11640573 109.91992950]
[-2.59647608 100.35831451]
[-2.18320394 90.79357910]
[-0.88018733 81.30901337]
[1.30122757 71.98719025]
[4.34204674 62.90928268]
[8.21579266 54.15433884]
[12.88873482 45.79859161]
[18.32018471 37.91479111]
[24.46284866 30.57159042]
[31.26324081 23.83292580]
[38.66214752 17.75747299]
[46.59514236 12.39813614]
[54.99315262 7.80157709]
[63.78305435 4.00782204]
[59.52812958 -10.37604427]
[55.27320099 -24.75991058]
[41.66810608 -32.34536743]
[37.55791092 -46.99326324]
[44.87332535 -59.91689682]
[40.61840057 -74.30076599]
[36.36347198 -88.68463135]
[32.10854721 -103.06849670]
[27.85362053 -117.45236206]
[23.59869385 -131.83622742]
[19.34376717 -146.22009277]
[15.08884048 -160.60395813]
[1.08461595 -167.92906189]
[-3.55843520 -183.03593445]
[3.91432691 -196.96194458]
[19.06944466 -201.44500732]
[32.91565704 -193.82543945]
[37.23825073 -178.62376404]
[29.47270584 -164.85888672]
[33.72763443 -150.47502136]
[37.98255920 -136.09115601]
[42.23748779 -121.70729065]
[46.49241257 -107.32341766]
[50.74734116 -92.93955231]
[55.00226593 -78.55568695]
[59.25719452 -64.17182159]
[72.42607117 -57.30770111]
[76.94607544 -42.78102875]
[69.65706635 -29.01483727]
[73.91199493 -14.63097095]
[78.16692352 -0.24710459]
[100.29002380 -2.59669185]
[122.39949036 -0.12206572]
[143.45570374 7.06041431]
[162.46859741 18.61301994]
[178.54412842 33.99253464]
[190.92642212 52.47579575]
[199.03326416 73.19369507]
[202.48344421 95.17206573]
[201.11473083 117.37744141]
[215.67272949 120.99195862]
[230.23072815 124.60647583]
[244.78872681 128.22099304]
[259.34671021 131.83551025]
[273.90472412 135.45002747]
[288.46270752 139.06454468]
[303.02072144 142.67904663]
[317.57870483 146.29356384]
[332.83666992 142.10966492]
[343.32446289 152.68582153]
[357.88247681 156.30033875]
[372.44046021 159.91485596]
[379.88574219 146.78205872]
[390.59893799 136.14579773]
[403.78503418 128.79533386]
[418.46557617 125.27615356]
[433.55111694 125.84938049]
[447.92227173 130.47247314]
[460.51254272 138.80238342]
[470.38769531 150.22097778]
[476.81491089 163.88088989]
[479.31723022 178.76850891]
[477.70898438 193.77903748]
[472.10952759 207.79861450]
[462.93435669 219.78689575]
[450.86431885 228.85424805]
[436.79510498 234.32785034]
[421.77078247 235.80148315]
[406.90618896 233.16583252]
[393.30441284 226.61645508]
[381.97479248 216.63937378]
[373.75805664 203.97492981]
[369.26394653 189.56294250]
[368.82595825 174.47285461]
[354.26794434 170.85833740]
[339.70996094 167.24382019]
[325.49328613 171.68626404]
[313.96420288 160.85156250]
[299.40618896 157.23704529]
[284.84820557 153.62252808]
[270.29019165 150.00802612]
[255.73220825 146.39350891]
[241.17420959 142.77899170]
[226.61621094 139.16447449]
[212.05821228 135.54995728]
[197.50021362 131.93544006]
[192.69810486 143.96847534]
[186.41778564 155.30036926]
[178.75942993 165.75041199]
[169.84513855 175.15199280]
[159.81707764 183.35516357]
[148.83514404 190.22912598]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 29]
[10 28]
[11 27]
[12 26]
[49 80]
[50 79]
[51 78]
[54 75]
[55 74]
[56 73]
[57 72]
[58 71]
[59 70]
[60 69]
[61 68]
[89 135]
[90 134]
[91 133]
[92 132]
[93 131]
[94 130]
[95 129]
[96 128]
[97 127]
[99 125]
[100 124]
[101 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
