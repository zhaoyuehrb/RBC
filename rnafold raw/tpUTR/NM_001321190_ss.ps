%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 03:33:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGGAUGUCAUCCCCCGACCCCACCCUGUUUUCCACCAGAGUUCUGACACUGUGACUCUGUAUAAAAUGGUUGGGAAGCUGCACCCACCCUGUGUAUGUGUGGUUGCCCUGAGCCCACAGAAAGACACCUCCAGAGUGCGGAUUGAGAAGCC\
) } def
/len { sequence length } bind def

/coor [
[98.82379913 120.62976074]
[92.59256744 134.27424622]
[86.36134338 147.91871643]
[80.13011932 161.56320190]
[73.89889526 175.20768738]
[82.87316895 187.67195129]
[84.39701080 202.95506287]
[78.06051636 216.94593811]
[65.56817627 225.88108826]
[50.28036499 227.35702515]
[36.30942535 220.97669983]
[27.41346931 208.45642090]
[25.98546791 193.16406250]
[32.40954208 179.21318054]
[44.95765305 170.35652161]
[60.25441742 168.97645569]
[66.48564148 155.33197021]
[72.71686554 141.68750000]
[78.94808960 128.04301453]
[85.17931366 114.39853668]
[79.79427338 100.39849091]
[66.02552795 94.44688416]
[52.25677872 88.49528503]
[38.48802948 82.54368591]
[22.75066757 84.17034149]
[14.13804817 72.01830292]
[0.36929983 66.06669617]
[-8.81079483 65.52431488]
[-13.61765194 59.85070038]
[-27.26213074 53.61947250]
[-40.90661240 47.38824844]
[-54.55109024 41.15702438]
[-68.19557190 34.92580032]
[-79.69175720 42.59181213]
[-93.36732483 43.55298233]
[-105.62727356 37.66426468]
[-113.30194855 26.56721687]
[-114.46635437 13.23399448]
[-127.98088837 6.72573900]
[-141.49542236 0.21748275]
[-155.00994873 -6.29077339]
[-168.52449036 -12.79902935]
[-182.03901672 -19.30728531]
[-195.55355835 -25.81554222]
[-209.13375854 -32.18561172]
[-223.17465210 -25.30174255]
[-238.34297180 -29.10385895]
[-247.47669983 -41.79672241]
[-246.26319885 -57.38714981]
[-235.27542114 -68.51381683]
[-219.70146179 -69.92304993]
[-206.89488220 -60.94945908]
[-202.90254211 -45.83009338]
[-195.46688843 -45.91274261]
[-189.04530334 -39.33007431]
[-175.53076172 -32.82181931]
[-162.01623535 -26.31356239]
[-148.50169373 -19.80530548]
[-134.98716736 -13.29705048]
[-121.47263336 -6.78879404]
[-107.95809937 -0.28053811]
[-93.78939819 -8.51582527]
[-77.33681488 -6.68642187]
[-65.08008575 4.68565893]
[-61.96434784 21.28131866]
[-48.31986618 27.51254463]
[-34.67538452 33.74377060]
[-21.03090668 39.97499466]
[-7.38642645 46.20621872]
[6.32090092 52.29795074]
[20.08964920 58.24954987]
[34.84217834 56.19719696]
[44.43963242 68.77493286]
[58.20837784 74.72653961]
[71.97712708 80.67813873]
[85.74588013 86.62973785]
[93.58771515 82.49214172]
[102.04036713 82.37071991]
[109.25505066 85.92078400]
[113.81863403 92.03350067]
[128.56652832 89.29496002]
[143.31442261 86.55641174]
[158.06231689 83.81786346]
[172.81021118 81.07931519]
[187.55809021 78.34076691]
[199.71372986 68.21401215]
[213.63969421 73.49765778]
[217.70852661 58.82775497]
[227.70248413 47.42567062]
[241.59909058 41.51763535]
[256.62103271 42.22618103]
[269.79135132 49.35726547]
[278.52325439 61.44937897]
[293.27114868 58.71083069]
[308.01904297 55.97228622]
[322.76693726 53.23373795]
[337.41409302 39.44143295]
[355.36868286 46.52405167]
[367.10113525 35.90991592]
[381.23101807 40.62113953]
[395.85491943 37.28332520]
[410.47885132 33.94551468]
[425.10278320 30.60769844]
[439.72668457 27.26988411]
[444.89987183 22.99798393]
[450.59667969 22.15374947]
[455.01492310 24.10709763]
[469.76281738 21.36854935]
[479.99392700 9.01119900]
[496.03097534 9.44956589]
[505.57174683 22.34737206]
[501.29733276 37.81052399]
[486.48675537 43.97701645]
[472.50137329 36.11644363]
[457.75347900 38.85499191]
[443.06451416 41.89380264]
[428.44058228 45.23161697]
[413.81668091 48.56943130]
[399.19274902 51.90724564]
[384.56881714 55.24505997]
[373.88235474 65.62045288]
[358.70648193 61.14797211]
[354.02780151 70.31479645]
[344.86816406 75.47280884]
[334.16439819 74.68882751]
[325.50549316 67.98162842]
[310.75759888 70.72017670]
[296.00970459 73.45872498]
[281.26181030 76.19727325]
[277.45309448 90.61806488]
[267.72082520 102.00194550]
[253.95468140 108.05617523]
[238.86347961 107.53089905]
[225.44235229 100.47678375]
[216.37823486 88.24555206]
[205.27746582 98.17642212]
[190.29664612 93.08866119]
[175.54875183 95.82720947]
[160.80085754 98.56575775]
[146.05296326 101.30430603]
[131.30506897 104.04284668]
[116.55717468 106.78139496]
[131.45182800 105.00671387]
[145.71710205 109.64371490]
[156.72151184 119.83700562]
[162.43504333 133.70623779]
[161.80374146 148.69294739]
[154.94406128 162.03253174]
[143.12139893 171.26426697]
[128.51669312 174.68513489]
[113.82405853 171.66412354]
[101.75385284 162.75849915]
[94.53266144 149.61109924]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[3 18]
[4 17]
[5 16]
[21 76]
[22 75]
[23 74]
[24 73]
[26 71]
[27 70]
[29 69]
[30 68]
[31 67]
[32 66]
[33 65]
[38 61]
[39 60]
[40 59]
[41 58]
[42 57]
[43 56]
[44 55]
[45 53]
[80 142]
[81 141]
[82 140]
[83 139]
[84 138]
[85 137]
[87 135]
[93 129]
[94 128]
[95 127]
[96 126]
[98 122]
[100 120]
[101 119]
[102 118]
[103 117]
[104 116]
[107 115]
[108 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
