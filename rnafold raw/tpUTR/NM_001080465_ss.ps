%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 17:58:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCAUCUUUUCCCUUCAUAGCCAUCGACCUGAAUUUCUAAGACAAAUGUUUAGAUGAACUCUUAGUGUUAUUUUACGUUAAAAAAAUUAAUUUGUGUCUC\
) } def
/len { sequence length } bind def

/coor [
[0.65853649 296.26879883]
[-2.05970812 311.07406616]
[-7.70290995 325.02899170]
[-16.03998375 337.56207275]
[-26.72953033 348.16009521]
[-39.33382034 356.38912964]
[-53.33671570 361.91213989]
[-68.16481018 364.50299072]
[-83.21089935 364.05560303]
[-97.85884857 360.58828735]
[-111.50884247 354.24301147]
[-123.60192871 345.27963257]
[-133.64288330 334.06518555]
[-141.22055054 321.05886841]
[-146.02462769 306.79333496]
[-147.85838318 291.85269165]
[-146.64674377 276.84881592]
[-142.43930054 262.39605713]
[-135.40837097 249.08624268]
[-125.84184265 237.46443176]
[-114.13146973 228.00651550]
[-100.75679779 221.09979248]
[-86.26548767 217.02708435]
[-71.25096893 215.95516968]
[-56.32806015 217.92794800]
[-42.10786057 222.86462402]
[-29.17266846 230.56304932]
[-19.06723404 219.47790527]
[-8.96179962 208.39277649]
[-6.10542583 193.77462769]
[8.90962410 188.78875732]
[19.01505852 177.70362854]
[29.12049294 166.61848450]
[39.22592926 155.53335571]
[49.33136368 144.44822693]
[59.43679810 133.36308289]
[51.68244171 120.58840942]
[47.83981705 106.14691162]
[48.22002411 91.20777130]
[52.79227829 76.98043823]
[61.18641663 64.61674500]
[72.72285461 55.11763382]
[86.46762848 49.25215149]
[101.30796051 47.49515915]
[116.04240417 49.98889542]
[129.47807312 56.53147507]
[139.58351135 45.44634247]
[149.68893433 34.36120605]
[159.79437256 23.27607346]
[169.89981079 12.19093990]
[170.11012268 -0.81891119]
[178.90095520 -9.85729885]
[191.09443665 -10.39233112]
[201.53643799 -21.16101074]
[211.97845459 -31.92968941]
[222.42045593 -42.69836807]
[232.86247253 -53.46704865]
[243.30447388 -64.23572540]
[253.57942200 -75.16392517]
[263.68484497 -86.24906158]
[273.79028320 -97.33419800]
[279.99273682 -113.11284637]
[296.87176514 -111.52075195]
[300.01446533 -94.86062622]
[284.87542725 -87.22875977]
[274.76998901 -76.14362335]
[264.66455078 -65.05849457]
[262.44619751 -57.87057495]
[254.07315063 -53.79371643]
[243.63114929 -43.02503967]
[233.18913269 -32.25635910]
[222.74713135 -21.48768044]
[212.30511475 -10.71900082]
[201.86311340 0.04967761]
[198.60031128 17.21668625]
[180.98493958 22.29637527]
[170.87950134 33.38150787]
[160.77407837 44.46664047]
[150.66864014 55.55177689]
[140.56320190 66.63690948]
[148.31756592 79.41159058]
[152.16018677 93.85308838]
[151.77998352 108.79222870]
[147.20771790 123.01956177]
[138.81358337 135.38325500]
[127.27714539 144.88237000]
[113.53237152 150.74784851]
[98.69203949 152.50483704]
[83.95759583 150.01110840]
[70.52193451 143.46852112]
[60.41649628 154.55366516]
[50.31106186 165.63879395]
[40.20562744 176.72392273]
[30.10019302 187.80906677]
[19.99475670 198.89419556]
[16.41557503 214.30523682]
[2.12333393 218.49821472]
[-7.98210049 229.58334351]
[-18.08753586 240.66847229]
[-9.22844410 252.83816528]
[-3.00075412 266.54220581]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[27 99]
[28 98]
[29 97]
[31 95]
[32 94]
[33 93]
[34 92]
[35 91]
[36 90]
[46 80]
[47 79]
[48 78]
[49 77]
[50 76]
[53 74]
[54 73]
[55 72]
[56 71]
[57 70]
[58 69]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
