%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 20:01:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCGAAUCAUGACAGUCAGCAACAUGAUACCUGGAUCCAGCCAUUCCUGAAGCCCACCCUGCACCUCAUUCCAACUCCUACCGCGAUACAGACCCACAGAGUGCCAUCCCUGAGAGACCAGACCGCUCCCCAAUACUCUCCUAAAAUAAACAUGAAGCACAAAAACA\
) } def
/len { sequence length } bind def

/coor [
[83.73726654 336.97985840]
[82.34633636 321.84268188]
[86.85880280 307.32696533]
[96.58654785 295.64624023]
[110.04615021 288.58172607]
[98.45377350 279.29989624]
[96.82913208 264.17324829]
[106.64336395 252.07702637]
[105.25117493 237.14176941]
[103.85897827 222.20652771]
[102.46678925 207.27127075]
[101.07460022 192.33601379]
[83.46125031 190.84912109]
[66.45389557 186.03344727]
[50.67570114 178.06539917]
[36.70479584 167.23698425]
[25.57007027 177.28775024]
[14.43534565 187.33851624]
[3.30062079 197.38928223]
[2.74345493 213.18374634]
[-8.87568951 223.89686584]
[-24.66338158 223.17274475]
[-35.25306320 211.44097900]
[-34.36206055 195.66183472]
[-22.51899529 185.19677734]
[-6.75014544 186.25454712]
[4.38458014 176.20378113]
[15.51930523 166.15301514]
[26.65402985 156.10224915]
[19.95121765 146.03570557]
[14.62146091 135.17953491]
[10.75617981 123.71992493]
[8.42167377 111.85345459]
[7.65798712 99.78366852]
[-7.28956127 98.53034973]
[-17.45305252 110.10660553]
[-32.31052399 113.43960571]
[-46.11836624 107.45566559]
[-53.66461563 94.64191437]
[-68.61216736 93.38860321]
[-83.55971527 92.13528442]
[-95.46638489 102.52790833]
[-111.22849274 101.37397766]
[-121.49465179 89.35809326]
[-120.17413330 73.60906219]
[-108.05038452 63.47052002]
[-92.31620026 64.95747375]
[-82.30639648 77.18773651]
[-67.35884857 78.44105530]
[-52.41130066 79.69436646]
[-42.83661652 68.31616974]
[-28.22509766 64.71512604]
[-14.13010025 70.47571564]
[-6.03624582 83.58280182]
[8.91130257 84.83612061]
[13.22040081 68.43427277]
[20.45627022 53.09702301]
[30.37487221 39.34164810]
[42.64168167 27.63206863]
[56.84299088 18.36320305]
[72.49983215 11.84766102]
[89.08415985 8.30518818]
[88.52660370 -6.68444586]
[87.96905518 -21.67407990]
[87.41150665 -36.66371536]
[83.95361328 -45.16305542]
[86.98552704 -51.93661118]
[86.70670319 -66.93402100]
[71.88104248 -69.50234985]
[57.80945587 -74.83029175]
[45.00062561 -82.72525024]
[33.91757584 -92.90181732]
[24.96095848 -104.99212646]
[18.45454597 -118.55911255]
[14.63354301 -133.11233521]
[13.63607407 -148.12571716]
[15.49819851 -163.05651855]
[20.15260124 -177.36502075]
[27.43103027 -190.53396606]
[37.07036972 -202.08729553]
[48.72217178 -211.60737610]
[61.96522522 -218.75007629]
[76.32080078 -223.25717163]
[91.26995850 -224.96572876]
[106.27229309 -223.81401062]
[120.78547668 -219.84362793]
[134.28488159 -213.19812012]
[146.28248596 -204.11770630]
[156.34460449 -192.93064880]
[164.10749817 -180.04135132]
[169.29052734 -165.91574097]
[171.70634460 -151.06446838]
[171.26760864 -136.02439880]
[167.99018860 -121.33919525]
[161.99255371 -107.53974152]
[153.49153137 -95.12487030]
[142.79440308 -84.54338074]
[130.28787231 -76.17777252]
[116.42405701 -70.33046722]
[101.70410919 -67.21284485]
[101.98293304 -52.21543503]
[102.40113831 -37.22126389]
[102.95868683 -22.23163033]
[103.51624298 -7.24199677]
[104.07379150 7.74763775]
[120.68872833 10.00516319]
[136.62152100 15.22996807]
[151.34684753 23.24978256]
[164.37916565 33.80017853]
[175.28881836 46.53329468]
[183.71606445 61.02929688]
[189.38304138 76.81022644]
[192.10292053 93.35576630]
[207.10227966 93.49518585]
[222.10162354 93.63459778]
[237.10098267 93.77401733]
[252.10032654 93.91343689]
[256.67483521 79.50630188]
[265.29403687 67.08854675]
[277.19152832 57.76433563]
[291.30941772 52.36278152]
[306.39230347 51.36418152]
[321.09909058 54.85733032]
[334.12200928 62.53162384]
[344.30310059 73.70466614]
[350.73706055 87.38295746]
[352.85177612 102.35023499]
[350.45919800 117.27561951]
[343.77212524 130.83195496]
[333.38510132 141.81381226]
[320.22177124 149.24470520]
[305.45260620 152.46388245]
[290.39086914 151.18508911]
[276.37582397 145.52204895]
[264.65368652 135.97828674]
[256.26681519 123.40246582]
[251.96090698 108.91278839]
[236.96156311 108.77336884]
[221.96220398 108.63394928]
[206.96286011 108.49453735]
[191.96350098 108.35511780]
[190.32655334 119.18872070]
[187.41796875 129.75218201]
[183.27868652 139.89678955]
[177.96699524 149.47972107]
[171.55766296 158.36605835]
[164.14091492 166.43069458]
[155.82118225 173.56011963]
[146.71557617 179.65393066]
[136.95230103 184.62635803]
[126.66880035 188.40740967]
[116.00984955 190.94381714]
[117.40204620 205.87907410]
[118.79423523 220.81433105]
[120.18642426 235.74958801]
[121.57862091 250.68482971]
[133.45944214 260.75875854]
[134.65856934 275.92504883]
[124.98140717 287.18951416]
[139.51481628 291.64468384]
[151.23385620 301.32623291]
[158.35142517 314.75787354]
[159.78218079 329.89132690]
[155.30792236 344.41885376]
[145.61094666 356.12515259]
[132.16996765 363.22503662]
[117.03464508 364.63589478]
[102.51300812 360.14251709]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 159]
[8 156]
[9 155]
[10 154]
[11 153]
[12 152]
[16 29]
[17 28]
[18 27]
[19 26]
[34 55]
[35 54]
[39 50]
[40 49]
[41 48]
[62 105]
[63 104]
[64 103]
[65 102]
[67 101]
[68 100]
[113 141]
[114 140]
[115 139]
[116 138]
[117 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
