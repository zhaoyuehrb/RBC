%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 20:01:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCGCUCCCUAUUUGGUCUCGCGACACAGGGACUAUUUUCAGCACGCCCACAGUGACUGCCAGGACCCCC\
) } def
/len { sequence length } bind def

/coor [
[81.82700348 244.47248840]
[87.87333679 228.63336182]
[87.87333679 213.63336182]
[84.62168884 206.73092651]
[88.21484375 197.98263550]
[81.04006195 184.92997742]
[89.37194824 171.48043823]
[90.02624512 156.49472046]
[90.68053436 141.50898743]
[78.66284180 136.80455017]
[68.60876465 128.71305847]
[61.44356155 117.97916412]
[57.82662582 105.59068298]
[58.09082031 92.68770599]
[62.21182632 80.45765686]
[50.31152725 71.32624054]
[38.41122818 62.19481659]
[26.51092720 53.06339264]
[14.61062717 43.93197250]
[2.71032739 34.80055237]
[-9.18997288 25.66913033]
[-24.02924347 30.20517159]
[-38.68968582 25.12078094]
[-47.53406525 12.37101173]
[-47.16152954 -3.14159107]
[-37.71533203 -15.45211411]
[-22.82772827 -19.82691193]
[-8.22330379 -14.58378220]
[0.48224223 -1.73881865]
[-0.05855140 13.76883030]
[11.84174824 22.90025139]
[23.74204826 32.03167343]
[35.64234924 41.16309357]
[47.54264832 50.29451752]
[59.44294739 59.42593765]
[71.34324646 68.55735779]
[84.47205353 60.39278030]
[99.65162659 57.45910645]
[114.87720490 60.14378738]
[128.13796997 68.09225464]
[137.68255615 80.25476837]
[151.98831177 75.74417877]
[166.29406738 71.23359680]
[180.49801636 66.41200256]
[194.59339905 61.28170013]
[208.68879700 56.15139771]
[213.86679077 41.39597702]
[227.34425354 33.46553040]
[242.75753784 36.10456848]
[252.82896423 48.06702042]
[252.80311584 63.70458221]
[242.69219971 75.63367462]
[227.27026367 78.22174835]
[213.81909180 70.24678802]
[199.72370911 75.37709045]
[185.62831116 80.50739288]
[180.25428772 85.92372131]
[170.80465698 85.53934479]
[156.49890137 90.04993439]
[142.19314575 94.56052399]
[141.07789612 111.06598663]
[133.75109863 125.89812469]
[121.32066345 136.81410217]
[105.66625977 142.16328430]
[105.01196289 157.14900208]
[104.35767365 172.13473511]
[111.48565674 186.25926208]
[103.20056152 198.63693237]
[102.87333679 213.63336182]
[102.87333679 228.63336182]
[108.91967773 244.47248840]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 70]
[3 69]
[5 68]
[7 66]
[8 65]
[9 64]
[15 36]
[16 35]
[17 34]
[18 33]
[19 32]
[20 31]
[21 30]
[41 60]
[42 59]
[43 58]
[44 56]
[45 55]
[46 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
