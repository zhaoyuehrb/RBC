%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 19:41:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAACUUUGCUUAGUGGAUUGACUCCUUUGCUGAAGUCAGUUAUUCAUCAAGAAUGCAAUUAGACUAAUUGUGAAUAAAUGAUUGAAUGAAGAUAUAAUAAAUAAAAGCUAUAAUUAUA\
) } def
/len { sequence length } bind def

/coor [
[82.16572571 262.46685791]
[69.25186157 254.63049316]
[59.06987381 243.47236633]
[52.44517517 229.89701843]
[49.91480255 215.00494385]
[51.68387985 200.00337219]
[57.60899734 186.10842896]
[67.20983124 174.44648743]
[79.70808411 165.96295166]
[94.09057617 161.34553528]
[93.70117188 146.35060120]
[93.31175995 131.35565186]
[92.92234802 116.36071014]
[86.48584747 129.90956116]
[71.71286011 132.50933838]
[61.03760529 121.97182465]
[63.44530869 107.16632080]
[76.90951538 100.55441284]
[61.91077805 100.35968781]
[46.91204071 100.16497040]
[31.91330528 99.97024536]
[16.91456985 99.77552795]
[1.91583288 99.58080292]
[-13.08290291 99.38608551]
[-28.08163834 99.19136047]
[-41.98109055 106.74886322]
[-54.60684967 98.84700012]
[-65.74996948 110.05442810]
[-81.55420685 110.01635742]
[-92.64320374 98.75537109]
[-92.43804169 82.95240784]
[-81.06044006 71.98309326]
[-65.26053619 72.35532379]
[-54.41212845 83.84825897]
[-41.58548737 76.27683258]
[-27.88691711 84.19262695]
[-12.88818169 84.38734436]
[2.11055422 84.58206940]
[17.10929108 84.77678680]
[32.10802460 84.97151184]
[47.10676193 85.16622925]
[62.10549927 85.36095428]
[77.10423279 85.55567169]
[89.50037384 83.38155365]
[98.54679108 87.84296417]
[104.60036469 74.11874390]
[110.65393829 60.39451981]
[116.70751953 46.67029953]
[122.76109314 32.94607925]
[128.63600159 19.14443207]
[134.33123779 5.26768160]
[140.02648926 -8.60906792]
[134.17481995 -23.04498291]
[140.14828491 -37.03684998]
[153.94677734 -42.52656174]
[159.64202881 -56.40331268]
[164.24023438 -70.68114471]
[167.71350098 -85.27349091]
[171.18676758 -99.86582947]
[174.66004944 -114.45816803]
[178.13331604 -129.05050659]
[181.60658264 -143.64285278]
[185.07986450 -158.23518372]
[182.86541748 -175.04389954]
[198.40422058 -181.82490540]
[209.22178650 -168.77053833]
[199.67219543 -154.76191711]
[196.19892883 -140.16957092]
[192.72566223 -125.57723236]
[189.25238037 -110.98489380]
[185.77911377 -96.39255524]
[182.30584717 -81.80021667]
[178.83256531 -67.20787811]
[192.49241638 -73.40532684]
[206.61613464 -68.35351562]
[213.24664307 -54.89854431]
[208.64843750 -40.62071228]
[195.41206360 -33.56390762]
[180.99467468 -37.70381927]
[173.51878357 -50.70806885]
[167.82353210 -36.83131790]
[173.78713989 -23.23091316]
[168.20903015 -9.07678509]
[153.90324402 -2.91382241]
[148.20799255 10.96292686]
[142.51274109 24.83967590]
[142.88850403 32.31244659]
[136.48530579 38.99965668]
[130.43173218 52.72387695]
[124.37815857 66.44809723]
[118.32458496 80.17231750]
[112.27101135 93.89653778]
[121.61651611 82.16361237]
[134.65124512 74.74095154]
[149.51042175 72.69045258]
[164.06829834 76.30545807]
[176.24220276 85.06880951]
[184.29049683 97.72680664]
[187.06181335 112.46857452]
[184.15966797 127.18515015]
[175.99923706 139.77114868]
[163.74798584 148.42602539]
[149.15856934 151.91157532]
[134.31819153 149.72915649]
[121.34990692 142.19100952]
[112.10899353 130.37553406]
[107.91729736 115.97129822]
[108.30670166 130.96624756]
[108.69611359 145.96118164]
[109.08552551 160.95613098]
[123.68829346 164.82081604]
[136.61003113 172.64421082]
[146.80322266 183.79209900]
[153.44154358 197.36079407]
[155.98687744 212.25030518]
[154.23287964 227.25364685]
[148.32171631 241.15454102]
[138.73260498 252.82612610]
[126.24288177 261.32220459]
[111.86503601 265.95407104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 110]
[11 109]
[12 108]
[13 107]
[18 43]
[19 42]
[20 41]
[21 40]
[22 39]
[23 38]
[24 37]
[25 36]
[27 34]
[45 92]
[46 91]
[47 90]
[48 89]
[49 88]
[50 86]
[51 85]
[52 84]
[55 81]
[56 80]
[57 73]
[58 72]
[59 71]
[60 70]
[61 69]
[62 68]
[63 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
