%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 04:40:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCACUCGCUGCCCCUACGCCUGCCCCGGUGCCCGGCUCCCAGCAGAACAUACUAGGGAGAUGCACCCAGAGCCUGCCAGGGAGGGCUGGCCUCACCACCACCGUCAAUAAAGGAUUUGAAUCCCCAUG\
) } def
/len { sequence length } bind def

/coor [
[273.35949707 260.04602051]
[261.44082642 250.93858337]
[249.52215576 241.83114624]
[237.60348511 232.72370911]
[233.98442078 232.87387085]
[230.11863708 231.21316528]
[226.88885498 227.64866638]
[225.18331909 222.49931335]
[213.95565796 212.55247498]
[202.72799683 202.60562134]
[187.92236328 203.75848389]
[176.39422607 193.83091736]
[175.28538513 178.29360962]
[164.05772400 168.34675598]
[152.83006287 158.39991760]
[141.60240173 148.45307922]
[129.44905090 148.85452271]
[120.00479126 140.57118225]
[118.73822784 127.66885376]
[107.75420380 117.45361328]
[93.27077484 117.87383270]
[82.66055298 108.00623322]
[82.03056335 93.53041840]
[71.04653168 83.31517792]
[59.93987274 73.23340607]
[44.38218689 74.00547028]
[33.13743591 63.75801468]
[32.49726868 48.92137909]
[21.26960945 38.97453690]
[10.04194736 29.02769852]
[-1.18571365 19.08085823]
[-12.41337490 9.13401890]
[-24.03330040 12.16664886]
[-35.54503250 9.19690514]
[-44.07306290 1.08759153]
[-47.54619598 -10.03012276]
[-45.19984818 -21.31586266]
[-55.93383408 -31.79353142]
[-66.66781616 -42.27120209]
[-77.40180206 -52.74887466]
[-88.13578796 -63.22654343]
[-98.99559021 -73.57375336]
[-109.97961426 -83.78899384]
[-124.89984894 -79.86595917]
[-139.56542969 -84.65390778]
[-149.29661560 -96.62502289]
[-150.98822021 -111.95936584]
[-144.10046387 -125.76380157]
[-130.83120728 -133.63337708]
[-115.41461182 -133.05696106]
[-102.77006531 -124.21846008]
[-96.93239594 -109.93822479]
[-99.76438141 -94.77301788]
[-88.78034973 -84.55778503]
[-81.66788483 -82.28329468]
[-77.65811920 -73.96052551]
[-66.92413330 -63.48285675]
[-56.19014740 -53.00518799]
[-45.45616150 -42.52751541]
[-34.72217941 -32.04984665]
[-16.54278946 -33.43536377]
[-2.82014275 -20.95563889]
[-2.46653509 -2.09364271]
[8.76112652 7.85319710]
[19.98878670 17.80003738]
[31.21644783 27.74687767]
[42.44411087 37.69371796]
[57.24973297 36.54085922]
[68.77787781 46.46842575]
[69.88671112 62.00574112]
[77.05206299 64.10770416]
[81.26177216 72.33114624]
[92.24579620 82.54638672]
[106.72922516 82.12616730]
[117.33944702 91.99376678]
[117.96943665 106.46958160]
[128.95347595 116.68482208]
[146.95452881 120.33351898]
[151.54924011 137.22541809]
[162.77690125 147.17225647]
[174.00456238 157.11909485]
[185.23222351 167.06594849]
[200.78991699 166.29388428]
[212.03466797 176.54133606]
[212.67483521 191.37796021]
[223.90249634 201.32481384]
[235.13015747 211.27165222]
[246.71092224 220.80505371]
[258.62957764 229.91249084]
[270.54824829 239.01992798]
[282.46691895 248.12736511]
[289.38546753 242.04602051]
[297.12384033 237.05494690]
[305.51171875 233.26289368]
[314.36480713 230.75219727]
[323.48855591 229.57710266]
[332.68276978 229.76245117]
[341.74575806 231.30331421]
[350.47882080 234.16497803]
[358.69067383 238.28379822]
[366.20159912 243.56863403]
[372.84732056 249.90280151]
[378.48266602 257.14669800]
[382.98471069 265.14083862]
[386.25552368 273.70944214]
[388.22418213 282.66418457]
[388.84832764 291.80844116]
[388.11523438 300.94152832]
[386.04187012 309.86318970]
[382.67459106 318.37789917]
[378.08807373 326.29922485]
[372.38375854 333.45379639]
[365.68746948 339.68524170]
[373.60208130 352.42724609]
[381.51666260 365.16928101]
[389.43127441 377.91128540]
[404.13757324 385.16778564]
[404.93624878 401.54748535]
[391.00570679 410.20034790]
[376.67648315 402.22503662]
[376.68927002 385.82589722]
[368.77465820 373.08386230]
[360.86004639 360.34185791]
[352.94543457 347.59982300]
[331.40542603 353.23193359]
[309.24441528 350.86038208]
[289.34228516 340.77664185]
[274.29122925 324.27560425]
[266.05816650 303.48904419]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 91]
[2 90]
[3 89]
[4 88]
[8 87]
[9 86]
[10 85]
[13 82]
[14 81]
[15 80]
[16 79]
[19 77]
[20 76]
[23 73]
[24 72]
[25 70]
[28 67]
[29 66]
[30 65]
[31 64]
[32 63]
[37 60]
[38 59]
[39 58]
[40 57]
[41 56]
[42 54]
[43 53]
[113 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
