%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 01:27:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGAGGGCCUGACCUGAUUACUUUUUCAGUCAAAUCAUGAUUUAACAGAGUAAGUAUAGACAGCAAAUAGGAAAGUACCUGAAUGC\
) } def
/len { sequence length } bind def

/coor [
[103.63052368 255.89292908]
[102.56044006 240.93115234]
[101.49034882 225.96936035]
[92.86480713 213.82649231]
[99.59790039 199.50950623]
[98.52781677 184.54772949]
[97.45772552 169.58595276]
[86.06801605 160.05651855]
[84.76965332 144.89839172]
[94.84222412 133.01641846]
[93.77213287 118.05464172]
[82.89070129 108.48694611]
[81.85703278 94.03434753]
[91.26608276 83.01544952]
[90.19599152 68.05366516]
[89.12590790 53.09188461]
[88.05581665 38.13010406]
[83.04828644 31.02316093]
[83.39408112 23.24205971]
[75.74002838 10.34184551]
[68.08597565 -2.55836821]
[60.43193054 -15.45858192]
[52.77787781 -28.35879517]
[45.12382889 -41.25901031]
[37.46977615 -54.15922165]
[29.58669090 -66.92076111]
[21.47707748 -79.53956604]
[7.50711012 -86.96591187]
[7.13525867 -101.85587311]
[-0.97435367 -114.47467804]
[-9.08396626 -127.09347534]
[-17.19357872 -139.71228027]
[-25.30319023 -152.33108521]
[-40.61087799 -157.13256836]
[-46.26650620 -172.14567566]
[-37.93156052 -185.85363770]
[-21.99989700 -187.74087524]
[-10.69292641 -176.35966492]
[-12.68438721 -160.44070435]
[-4.57477522 -147.82189941]
[3.53483701 -135.20309448]
[11.64444923 -122.58428955]
[19.75406075 -109.96548462]
[33.14397430 -103.44172668]
[34.09588242 -87.64917755]
[42.20549393 -75.03037262]
[48.61524582 -71.01543427]
[50.36999130 -61.81327438]
[58.02404022 -48.91305923]
[65.67809296 -36.01284409]
[73.33214569 -23.11263275]
[80.98619080 -10.21241856]
[88.64024353 2.68779492]
[96.29429626 15.58800888]
[98.89762878 0.81564724]
[106.80133057 -11.93313694]
[118.87468719 -20.83448792]
[133.39047241 -24.61496735]
[148.27203369 -22.73373413]
[161.39041138 -15.45992184]
[170.86885071 -3.83413029]
[175.35137939 10.48044109]
[174.19670105 25.43593407]
[167.57002258 38.89279556]
[156.41935730 48.92586899]
[142.33993530 54.09981537]
[127.34596252 53.67444229]
[113.58251190 47.71060181]
[103.01760101 37.06001663]
[104.08769226 52.02179718]
[105.15777588 66.98358154]
[106.22786713 81.94535828]
[117.10929871 91.51305389]
[118.14296722 105.96565247]
[108.73391724 116.98455048]
[109.80400848 131.94633484]
[121.46502686 142.27388000]
[122.33711243 157.46249390]
[112.41950989 168.51585388]
[113.48959351 183.47764587]
[114.55968475 198.43942261]
[123.26176453 211.65246582]
[116.45213318 224.89927673]
[117.52221680 239.86105347]
[118.59230804 254.82284546]
[125.75318909 270.19027710]
[112.96865082 281.32543945]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 85]
[2 84]
[3 83]
[5 81]
[6 80]
[7 79]
[10 76]
[11 75]
[14 72]
[15 71]
[16 70]
[17 69]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[26 46]
[27 45]
[29 43]
[30 42]
[31 41]
[32 40]
[33 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
