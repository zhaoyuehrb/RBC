%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 11:26:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUUUGGUUAUUGCUAUUGAGCCUGGGGCUGUGGGAGUUUGAAGAAGACUCUGGACUGCUUCCAAUACGUAGGAAUUAUAUUUCUAAAGUUUAGAAAAUGCAAACAACCAAAAAUAAAAAAAUAAAACUCAUCCAUAAUCUCA\
) } def
/len { sequence length } bind def

/coor [
[179.87481689 329.74328613]
[184.72660828 315.51269531]
[191.85462952 302.27481079]
[201.06443787 290.39083862]
[212.10479736 280.18490601]
[203.87214661 267.64602661]
[195.63949585 255.10714722]
[187.40686035 242.56826782]
[179.17420959 230.02938843]
[170.94157410 217.49050903]
[162.70892334 204.95162964]
[146.64524841 197.96295166]
[145.65309143 179.60913086]
[137.15257263 167.25028992]
[128.65203857 154.89144897]
[120.15151978 142.53260803]
[106.60837555 146.59866333]
[92.46871948 146.45843506]
[79.00888062 142.12457275]
[67.44384003 133.98826599]
[58.81752014 122.78397369]
[53.90859604 109.52305603]
[53.16017532 95.40251923]
[56.63981628 81.69698334]
[43.92670059 73.73603821]
[31.21358681 65.77508545]
[18.50047302 57.81413269]
[2.69784474 57.04764557]
[-3.98262119 43.73522186]
[-16.38879395 49.83501434]
[-30.07925606 48.99591446]
[-41.46607208 41.54547501]
[-47.61837387 29.52976990]
[-47.01645279 16.15260506]
[-59.55533218 7.91996002]
[-72.09421539 -0.31268430]
[-84.63309479 -8.54532909]
[-97.17198181 -16.77797318]
[-109.71086121 -25.01061821]
[-122.24974823 -33.24326324]
[-136.90640259 -25.66441917]
[-153.29241943 -26.48509979]
[-166.96151733 -35.38827133]
[-174.25216675 -49.87657928]
[-173.26812744 -65.97215271]
[-185.98124695 -73.93309784]
[-198.69435120 -81.89405060]
[-215.09342957 -81.94098663]
[-223.01649475 -96.29915619]
[-214.31298828 -110.19810486]
[-197.93630981 -109.33979034]
[-190.73339844 -94.60716248]
[-178.02029419 -86.64621735]
[-165.30717468 -78.68526459]
[-153.65409851 -85.88100433]
[-139.97021484 -87.34552765]
[-126.93322754 -82.73466492]
[-117.11915588 -72.89874268]
[-112.49335480 -59.72640991]
[-114.01709747 -45.78214264]
[-101.47821808 -37.54949951]
[-88.93933868 -29.31685448]
[-76.40045166 -21.08421135]
[-63.86157227 -12.85156631]
[-51.32268906 -4.61892223]
[-38.78380585 3.61372232]
[-23.65951920 -2.68261385]
[-7.59537697 1.29093742]
[3.06097364 14.16729832]
[3.97832942 31.02210808]
[18.87163162 31.21917534]
[26.46142387 45.10102081]
[39.17453766 53.06196976]
[51.88765335 61.02292252]
[64.60076904 68.98387146]
[70.84495544 63.05288315]
[78.06532288 58.35896301]
[86.02011108 55.05927658]
[94.44297028 53.26430130]
[103.05189514 53.03414154]
[111.55863190 54.37649918]
[119.67836761 57.24642944]
[127.13922882 61.54784393]
[137.63110352 50.82773972]
[148.12297058 40.10763931]
[158.61485291 29.38754082]
[169.10671997 18.66743851]
[179.59860229 7.94733858]
[190.09046936 -2.77276230]
[196.84812927 -18.32173157]
[213.66014099 -16.13255119]
[216.21054077 0.62846875]
[200.81057739 7.71911240]
[190.31869507 18.43921280]
[179.82682800 29.15931320]
[169.33494568 39.87941360]
[158.84307861 50.59951401]
[148.35119629 61.31961823]
[137.85932922 72.03971863]
[146.50314331 92.74995422]
[144.57395935 115.10856628]
[132.51036072 134.03207397]
[141.01089478 146.39091492]
[149.51141357 158.74977112]
[158.01194763 171.10861206]
[170.57333374 174.23858643]
[177.39100647 184.76773071]
[175.24780273 196.71897888]
[183.48045349 209.25785828]
[191.71308899 221.79673767]
[199.94573975 234.33563232]
[208.17839050 246.87451172]
[216.41102600 259.41339111]
[224.64367676 271.95227051]
[238.39746094 265.87911987]
[252.96330261 262.15274048]
[267.94384766 260.87478638]
[282.93041992 262.08016968]
[297.51416016 265.73593140]
[311.29718018 271.74237061]
[323.90353394 279.93566895]
[334.98928833 290.09222412]
[344.25198364 301.93505859]
[351.43899536 315.14099121]
[356.35418701 329.34982300]
[358.86349487 344.17388916]
[358.89843750 359.20880127]
[356.45812988 374.04440308]
[351.60910034 388.27593994]
[344.48361206 401.51516724]
[335.27609253 413.40093994]
[324.23770142 423.60897827]
[311.66961670 431.86080933]
[297.91464233 437.93130493]
[283.34808350 441.65487671]
[268.36727905 442.92993164]
[253.38096619 441.72167969]
[238.79794312 438.06311035]
[225.01605225 432.05401611]
[212.41127014 423.85830688]
[201.32748413 413.69958496]
[192.06706238 401.85498047]
[184.88261414 388.64767456]
[179.97016907 374.43789673]
[177.46371460 359.61331177]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 114]
[6 113]
[7 112]
[8 111]
[9 110]
[10 109]
[11 108]
[13 105]
[14 104]
[15 103]
[16 102]
[24 75]
[25 74]
[26 73]
[27 72]
[29 70]
[34 66]
[35 65]
[36 64]
[37 63]
[38 62]
[39 61]
[40 60]
[45 54]
[46 53]
[47 52]
[83 99]
[84 98]
[85 97]
[86 96]
[87 95]
[88 94]
[89 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
