%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:03:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUCAGUGUCCUUACCCCCUCCUACCUCUUUUCUGUGCCACCUGCUGUGGGUCCAGCAGGUUUUUACUUGAGUACAAUAAAAAGUCUGAGUCAAGGGUG\
) } def
/len { sequence length } bind def

/coor [
[19.50331688 370.26654053]
[19.35100555 385.46670532]
[13.38883591 399.44958496]
[2.52599430 410.08288574]
[-11.58101368 415.74511719]
[-26.78097343 415.57281494]
[-40.75600052 409.59225464]
[-51.37500381 398.71542358]
[-57.01866150 384.60098267]
[-56.82636261 369.40124512]
[-50.82742310 355.43411255]
[-39.93664551 344.82943726]
[-25.81478882 339.20434570]
[-10.61533642 339.41662598]
[-4.71383286 325.62634277]
[1.18767118 311.83602905]
[7.08917522 298.04574585]
[12.99067879 284.25546265]
[3.95260453 272.41574097]
[2.04160190 257.54281616]
[7.87021971 243.61824036]
[19.96547508 234.42033386]
[35.13965607 232.49899292]
[41.04116058 218.70869446]
[32.00308609 206.86898804]
[30.09208298 191.99606323]
[35.92070007 178.07148743]
[48.01595688 168.87358093]
[63.19013596 166.95223999]
[69.09163666 153.16194153]
[74.99314117 139.37164307]
[80.89464569 125.58135223]
[86.79615021 111.79106140]
[83.51662445 93.54483795]
[98.31475067 82.37812042]
[103.34749603 68.24760437]
[108.38024902 54.11709213]
[113.41300201 39.98657990]
[118.44574738 25.85606384]
[123.25813293 11.64899158]
[126.04135132 -3.09053755]
[126.97389984 -18.06152153]
[127.90644073 -33.03250504]
[128.83898926 -48.00349045]
[129.77153015 -62.97447205]
[130.70407104 -77.94545746]
[131.63661194 -92.91644287]
[132.56916809 -107.88742828]
[121.92364502 -119.56854248]
[122.73936462 -135.35176086]
[134.53237915 -145.87318420]
[150.30609131 -144.89064026]
[160.70225525 -132.98704529]
[159.55299377 -117.22460175]
[147.54014587 -106.95487976]
[146.60760498 -91.98389435]
[145.67506409 -77.01291656]
[144.74250793 -62.04192734]
[143.80996704 -47.07094574]
[142.87742615 -32.09996033]
[141.94488525 -17.12897682]
[141.01232910 -2.15799308]
[152.55992126 -11.73157310]
[167.51217651 -12.92730141]
[180.43446350 -5.31056929]
[186.62992859 8.35018539]
[183.84672546 23.08971596]
[173.09645081 33.55067444]
[158.28649902 35.93083954]
[144.79978943 29.36509705]
[137.53833008 16.23984909]
[138.50495911 23.70249748]
[132.57626343 30.88881493]
[127.54351044 45.01932907]
[122.51076508 59.14984131]
[117.47801208 73.28035736]
[112.44525909 87.41087341]
[117.31726837 96.32808685]
[116.48337555 106.45516205]
[110.21833801 114.45532227]
[100.58644867 117.69256592]
[94.68494415 131.48286438]
[88.78343964 145.27314758]
[82.88193512 159.06344604]
[76.98043060 172.85374451]
[86.06707764 185.15740967]
[87.76403809 200.25764465]
[81.71507263 214.08792114]
[69.63647461 222.97404480]
[54.83145523 224.61019897]
[48.92995071 238.40049744]
[58.01659775 250.70416260]
[59.71355438 265.80438232]
[53.66459656 279.63467407]
[41.58599472 288.52081299]
[26.78097534 290.15695190]
[20.87947083 303.94726562]
[14.97796631 317.73754883]
[9.07646275 331.52783203]
[3.17495894 345.31814575]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 100]
[15 99]
[16 98]
[17 97]
[18 96]
[23 91]
[24 90]
[29 85]
[30 84]
[31 83]
[32 82]
[33 81]
[35 77]
[36 76]
[37 75]
[38 74]
[39 73]
[40 71]
[41 62]
[42 61]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
