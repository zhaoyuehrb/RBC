%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 10:04:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGCUGCUCUAGUGAUGCAGCAUCUGUUAUUUUGAAGGGAUUUAAAAACAAGUUACUUACUUCUAAGAUACAAUGGGGGUAAAGGUGUAAAUGUGUAAAUGCUCCCAUUCCAAAGGGAGAAAUUGACCAAAACAAAGGGGCUAUAA\
) } def
/len { sequence length } bind def

/coor [
[105.26832581 230.16040039]
[103.67929077 215.24479675]
[102.09025574 200.32920837]
[87.46129608 197.01356506]
[79.59667969 209.78649902]
[71.73207092 222.55944824]
[63.86746597 235.33238220]
[56.00285721 248.10531616]
[48.27425385 260.96099854]
[40.68252563 273.89797974]
[41.10762405 290.29162598]
[26.98345566 298.62469482]
[12.83974934 290.32482910]
[13.22634029 273.93023682]
[27.74553680 266.30627441]
[35.33726120 253.36927795]
[36.01462555 245.95721436]
[43.22991943 240.24070740]
[51.09452820 227.46777344]
[58.95913696 214.69483948]
[66.82374573 201.92189026]
[74.68835449 189.14895630]
[66.15731049 176.81115723]
[51.43020630 179.65940857]
[36.70310593 182.50764465]
[21.97600365 185.35588074]
[9.89608192 195.57283020]
[-4.06882000 190.39299011]
[-18.79592133 193.24124146]
[-27.43716049 206.47393799]
[-42.92132187 209.63879395]
[-56.06192780 200.85813904]
[-59.06289291 185.34136963]
[-50.14379120 172.29434204]
[-34.59617615 169.45759583]
[-21.64416313 178.51412964]
[-6.91706228 175.66589355]
[4.10947895 165.65266418]
[19.12776184 170.62878418]
[33.85486221 167.78054810]
[48.58196640 164.93229675]
[63.30906677 162.08406067]
[46.70178986 144.58557129]
[37.33695602 123.31610870]
[35.77537918 101.01527405]
[41.61212158 80.35229492]
[53.59002304 63.60709381]
[69.81136322 52.41914368]
[88.01568604 47.63170242]
[86.74359894 32.68574142]
[85.47150421 17.73977852]
[70.89739990 9.22080040]
[64.31433105 -6.14383030]
[68.12346649 -22.24927330]
[80.63870239 -32.82304764]
[79.04966736 -47.73863983]
[77.46063232 -62.65423584]
[75.87158966 -77.56983185]
[73.96632385 -92.44833374]
[71.74568939 -107.28305054]
[69.52504730 -122.11776733]
[67.30440521 -136.95248413]
[65.08376312 -151.78720093]
[62.86312485 -166.62191772]
[60.64248657 -181.45661926]
[58.42184448 -196.29133606]
[44.59470749 -203.33334351]
[37.57751465 -217.17309570]
[40.06852722 -232.48892212]
[51.10989380 -243.39157104]
[66.45598602 -245.68876648]
[80.20591736 -238.49717712]
[87.07256317 -224.58210754]
[84.41555023 -209.29421997]
[73.25656128 -198.51197815]
[75.47720337 -183.67726135]
[77.69783783 -168.84254456]
[79.91847992 -154.00784302]
[82.13912201 -139.17312622]
[84.35976410 -124.33840942]
[86.58039856 -109.50369263]
[88.80104065 -94.66897583]
[92.09576416 -91.12480927]
[93.15412903 -85.45218658]
[90.78718567 -79.15886688]
[92.37622070 -64.24327087]
[93.96526337 -49.32767868]
[95.55429840 -34.41208267]
[107.72521973 -28.83242798]
[115.59864807 -17.86932945]
[117.02056122 -4.33793592]
[111.51086426 8.22101402]
[100.41747284 16.46768951]
[101.68955994 31.41365242]
[102.96164703 46.35961533]
[117.89318085 46.91312027]
[132.69082642 51.70315170]
[146.13630676 60.67847824]
[157.03576660 73.43497467]
[164.32209778 89.22706604]
[167.15242004 107.00880432]
[164.99189758 125.50256348]
[157.67634583 143.29080200]
[172.67297363 143.60917664]
[187.66958618 143.92756653]
[202.66621399 144.24594116]
[217.66282654 144.56433105]
[226.94035339 132.12619019]
[241.76693726 127.54885864]
[256.44146729 132.59242249]
[265.32128906 145.31752014]
[264.99194336 160.83110046]
[255.58004761 173.16787720]
[240.70468140 177.58409119]
[226.08572388 172.38163757]
[217.34445190 159.56094360]
[202.34783936 159.24256897]
[187.35121155 158.92417908]
[172.35458374 158.60580444]
[157.35797119 158.28742981]
[153.84005737 164.91119385]
[167.08758545 171.94702148]
[181.86093140 174.54479980]
[183.95549011 189.39784241]
[170.47663879 195.97969055]
[160.05177307 185.19454956]
[146.80422974 178.15872192]
[143.28631592 184.78248596]
[151.94783020 197.02905273]
[167.46478271 197.09201050]
[179.96131897 206.29071045]
[184.63227844 221.08807373]
[179.68156433 235.79420471]
[167.01284790 244.75428772]
[151.49749756 244.52301025]
[139.10148621 235.18927002]
[134.59132385 220.34211731]
[139.70126343 205.69056702]
[131.03976440 193.44400024]
[117.00585175 198.74017334]
[118.59488678 213.65576172]
[120.18392181 228.57136536]
[132.63612366 238.30368042]
[134.47642517 254.00045776]
[124.61299896 266.34906006]
[108.89764404 268.02331543]
[96.65399933 258.02987671]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 142]
[2 141]
[3 140]
[4 22]
[5 21]
[6 20]
[7 19]
[8 18]
[9 16]
[10 15]
[23 42]
[24 41]
[25 40]
[26 39]
[28 37]
[29 36]
[49 95]
[50 94]
[51 93]
[55 88]
[56 87]
[57 86]
[58 85]
[59 82]
[60 81]
[61 80]
[62 79]
[63 78]
[64 77]
[65 76]
[66 75]
[103 120]
[104 119]
[105 118]
[106 117]
[107 116]
[128 139]
[129 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
