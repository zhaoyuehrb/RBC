%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 19:47:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUACUGUUUACACACAUUUUUGUUCAAUAUUGAUAUAUUUUAUCACCAACAUUUCAAGUUUGUAUUUGUUAAUAAAAUGAUUAUUCAAGGA\
) } def
/len { sequence length } bind def

/coor [
[123.23667145 260.76568604]
[119.86116791 252.34823608]
[118.66660309 243.34204102]
[119.73480988 234.30386353]
[123.00747681 225.79438782]
[128.28930664 218.34347534]
[135.25962830 212.41714478]
[129.86849976 198.41943359]
[124.47738647 184.42172241]
[119.08627319 170.42401123]
[107.29169464 161.32801819]
[109.55210114 145.66911316]
[104.16098785 131.67140198]
[98.76986694 117.67369843]
[83.68934631 106.91631317]
[86.44054413 88.59762573]
[80.12652588 74.99126434]
[73.81250763 61.38489914]
[59.24383545 55.87203598]
[53.03434753 41.98330307]
[58.37979889 28.12827873]
[52.06577682 14.52191544]
[45.75175476 0.91555130]
[39.43773651 -12.69081211]
[23.83790207 -10.71807957]
[8.40496540 -13.62744904]
[-5.37196541 -21.12613869]
[-16.16727448 -32.47912979]
[-22.94638824 -46.58120346]
[-25.06491280 -62.06451797]
[-22.32987404 -77.43130493]
[-15.01723480 -91.19871521]
[-3.84408879 -102.04195404]
[-10.60924053 -115.42974091]
[-17.37439156 -128.81752014]
[-24.13954353 -142.20530701]
[-30.90469551 -155.59309387]
[-45.63565826 -161.94747925]
[-49.71301270 -177.46374512]
[-40.00895691 -190.23915100]
[-23.96761703 -190.47348022]
[-13.89453220 -177.98699951]
[-17.51691437 -162.35824585]
[-10.75176144 -148.97045898]
[-3.98660994 -135.58267212]
[2.77854180 -122.19489288]
[9.54369354 -108.80710602]
[23.67209244 -111.34239197]
[37.95526505 -109.76433563]
[51.21897125 -104.19353485]
[62.37020111 -95.07921600]
[70.48722839 -83.16300201]
[74.89579773 -69.41859436]
[75.22513580 -54.97219849]
[71.43910980 -41.01025391]
[63.83993912 -28.68198967]
[53.04409790 -19.00483322]
[59.35811996 -5.39846992]
[65.67214203 8.20789337]
[71.98616028 21.81425667]
[86.01775360 26.67738152]
[92.61489868 40.38622284]
[87.41886902 55.07087708]
[93.73288727 68.67723846]
[100.04691315 82.28360748]
[109.80065918 85.24127197]
[116.31065369 93.08368683]
[117.42226410 103.21520996]
[112.76757812 112.28258514]
[118.15869141 126.28028870]
[123.54981232 140.27799988]
[135.72999573 150.37521362]
[133.08398438 165.03289795]
[138.47509766 179.03060913]
[143.86621094 193.02832031]
[149.25732422 207.02603149]
[171.20748901 210.41801453]
[187.09698486 225.76928711]
[191.19941711 247.35997009]
[182.14459229 267.25656128]
[191.04229736 279.33261108]
[199.93998718 291.40866089]
[215.17419434 297.47915649]
[217.26600647 313.74435425]
[204.06353760 323.47198486]
[189.14836121 316.65512085]
[187.86393738 300.30636597]
[178.96623230 288.23031616]
[170.06854248 276.15426636]
[161.51689148 278.87139893]
[152.54312134 279.39367676]
[143.70254517 277.68084717]
[135.54418945 273.83120728]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 76]
[8 75]
[9 74]
[10 73]
[12 71]
[13 70]
[14 69]
[16 65]
[17 64]
[18 63]
[21 60]
[22 59]
[23 58]
[24 57]
[33 47]
[34 46]
[35 45]
[36 44]
[37 43]
[80 89]
[81 88]
[82 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
