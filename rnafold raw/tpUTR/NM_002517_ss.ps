%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 18:55:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACUGGCAGAGCUGCCGGCGCCGGACCCUGCGACAACCGGGGUCCCCCAGGACAGUAGGCCCGGCUCUGCCCGUAGCCCUGAGAAUUAAACGCCGGCUCUCCCUGCAGUGGUUUGGGCUCCGG\
) } def
/len { sequence length } bind def

/coor [
[227.59317017 199.09895325]
[212.60543823 199.70565796]
[200.60633850 190.70448303]
[196.99508667 176.14567566]
[203.39665222 162.58027649]
[216.93150330 156.11222839]
[203.05534363 150.41554260]
[189.17918396 144.71885681]
[175.30302429 139.02217102]
[161.42687988 133.32548523]
[147.55072021 127.62879181]
[133.67456055 121.93210602]
[119.79840088 116.23542023]
[105.92224121 110.53873444]
[91.90730286 105.19255829]
[77.76245117 100.20026398]
[63.61758804 95.20796967]
[48.02903366 97.91120148]
[38.60246277 86.37911987]
[24.45760345 81.38682556]
[10.25112820 76.57266998]
[-4.07183981 72.11705017]
[-18.44966698 67.84175873]
[-33.02414322 64.29427338]
[-47.75845337 61.48355484]
[-62.49275970 58.67283249]
[-77.22706604 55.86211395]
[-91.96138000 53.05139542]
[-106.69568634 50.24067307]
[-121.42999268 47.42995453]
[-136.16430664 44.61923599]
[-145.29548645 46.09185028]
[-151.23152161 41.54829788]
[-166.67556763 47.06311417]
[-178.99668884 36.24081039]
[-175.51994324 20.21444511]
[-159.82192993 15.47057056]
[-148.05140686 26.88927650]
[-133.35359192 29.88492584]
[-118.61927795 32.69564438]
[-103.88496399 35.50636673]
[-89.15065765 38.31708527]
[-74.41635132 41.12780380]
[-59.68204117 43.93852615]
[-44.94773102 46.74924469]
[-30.21342278 49.55996323]
[-27.76604080 47.98497391]
[-24.51334000 47.34120560]
[-20.82864571 47.95377350]
[-17.20052147 49.99830627]
[-14.17437744 53.46393204]
[0.20344903 57.73921967]
[7.59410429 56.61737823]
[14.88638306 62.30682373]
[22.30289650 61.37106323]
[29.44989586 67.24196625]
[43.59475327 72.23426056]
[58.17157745 69.17394257]
[68.60988617 81.06311035]
[82.75473785 86.05540466]
[96.89959717 91.04769897]
[102.13738251 89.87763214]
[107.64270020 91.78941345]
[111.61892700 96.66257477]
[125.49508667 102.35926056]
[139.37124634 108.05594635]
[153.24740601 113.75263214]
[167.12356567 119.44932556]
[180.99971008 125.14601135]
[194.87586975 130.84269714]
[208.75202942 136.53938293]
[222.62818909 142.23606873]
[236.95115662 146.69169617]
[251.61018372 149.87179565]
[266.73699951 145.23611450]
[277.53460693 155.49580383]
[292.19363403 158.67591858]
[306.85266113 161.85601807]
[321.51165771 165.03611755]
[336.17068481 168.21623230]
[341.35290527 166.54158020]
[346.15402222 167.04844666]
[349.78433228 169.20249939]
[351.79461670 172.22776794]
[366.17245483 176.50306702]
[380.55026245 180.77835083]
[394.92810059 185.05363464]
[409.30593872 189.32893372]
[423.68374634 193.60421753]
[434.77239990 185.84129333]
[448.11282349 185.91752625]
[458.79455566 193.57916260]
[463.01623535 205.82180786]
[477.28207397 210.45706177]
[492.79776001 207.36293030]
[502.51116943 218.65449524]
[516.77703857 223.28974915]
[531.66674805 217.31681824]
[545.54846191 225.35900879]
[547.77337646 241.24703979]
[536.63464355 252.79296875]
[520.67700195 251.13975525]
[512.14178467 237.55558777]
[497.87591553 232.92033386]
[483.38061523 236.34600830]
[472.64682007 224.72290039]
[458.38098145 220.08764648]
[443.79660034 228.36013794]
[427.40390015 223.48095703]
[419.40847778 207.98204041]
[405.03063965 203.70675659]
[390.65280151 199.43147278]
[376.27499390 195.15617371]
[361.89715576 190.88088989]
[347.51934814 186.60560608]
[332.99060059 182.87525940]
[318.33157349 179.69514465]
[303.67254639 176.51504517]
[289.01351929 173.33493042]
[274.35449219 170.15483093]
[260.27618408 175.01797485]
[248.43006897 164.53082275]
[233.77105713 161.35070801]
[241.24813843 174.35429382]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 72]
[7 71]
[8 70]
[9 69]
[10 68]
[11 67]
[12 66]
[13 65]
[14 64]
[15 61]
[16 60]
[17 59]
[19 57]
[20 56]
[21 54]
[22 52]
[23 51]
[24 46]
[25 45]
[26 44]
[27 43]
[28 42]
[29 41]
[30 40]
[31 39]
[33 38]
[73 123]
[74 122]
[76 120]
[77 119]
[78 118]
[79 117]
[80 116]
[84 115]
[85 114]
[86 113]
[87 112]
[88 111]
[89 110]
[93 107]
[94 106]
[96 104]
[97 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
