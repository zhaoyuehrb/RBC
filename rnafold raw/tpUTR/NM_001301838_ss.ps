%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 18:34:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUUGGCCCUCCCUUGUGCCACUGCCAGGGGAGGAAAGGCCUUGAUGUUCCAGACAAUAAUAAAUGCGCCUGUGACUUAG\
) } def
/len { sequence length } bind def

/coor [
[86.91770172 141.11907959]
[76.37873840 136.11041260]
[67.56712341 128.46109009]
[61.12722015 118.73051453]
[57.52995300 107.63023376]
[57.03838730 95.97197723]
[42.57458496 91.99725342]
[28.11078072 88.02253723]
[13.64697838 84.04781342]
[-1.07864654 81.19194794]
[-15.97967815 79.47169495]
[-30.88070869 77.75144196]
[-45.78174210 76.03118896]
[-60.68277359 74.31093597]
[-75.58380127 72.59069061]
[-90.48483276 70.87043762]
[-105.38586426 69.15018463]
[-114.53190613 71.30915070]
[-120.82070160 67.06800079]
[-135.64491272 64.77825928]
[-150.72804260 71.21496582]
[-163.67974854 61.15587997]
[-161.17642212 44.94892502]
[-145.79327393 39.26642609]
[-133.35516357 49.95405197]
[-118.53096008 52.24378967]
[-103.66561127 54.24915314]
[-88.76457977 55.96940613]
[-73.86354828 57.68965530]
[-58.96252060 59.40990829]
[-44.06148911 61.13016129]
[-29.16045761 62.85041046]
[-14.25942612 64.57066345]
[0.64160478 66.29091644]
[3.02064109 64.37919617]
[6.39511299 63.42469406]
[10.35038757 63.85111618]
[14.31189346 65.90164948]
[17.62170029 69.58400726]
[32.08550262 73.55873108]
[46.54930496 77.53345490]
[61.01310730 81.50817871]
[72.38481140 66.84391022]
[88.86383820 58.31173706]
[107.40245819 57.48966217]
[124.57202148 64.52971649]
[137.19708252 78.12987518]
[142.94267273 95.77483368]
[157.89866638 96.92307281]
[172.85464478 98.07131195]
[187.20661926 91.41310883]
[199.30426025 100.10196686]
[214.26023865 101.25020599]
[229.21623230 102.39844513]
[246.70767212 92.73251343]
[262.41973877 103.73489380]
[277.41973877 103.73489380]
[286.43115234 91.10263824]
[301.15725708 86.21163940]
[315.93554688 90.94259644]
[325.08346558 103.47635651]
[325.08346558 118.99343109]
[315.93554688 131.52719116]
[301.15725708 136.25814819]
[286.43115234 131.36715698]
[277.41973877 118.73489380]
[262.41973877 118.73489380]
[255.63926697 126.79163361]
[245.29023743 129.71142578]
[234.87576294 126.24622345]
[228.06799316 117.35443115]
[213.11199951 116.20619202]
[198.15602112 115.05795288]
[184.87380981 121.79828644]
[171.70640564 113.02729797]
[156.75042725 111.87905884]
[141.79443359 110.73081970]
[137.39111328 121.53671265]
[130.25349426 130.76770020]
[120.90354919 137.74873352]
[110.02498627 141.96932983]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 42]
[7 41]
[8 40]
[9 39]
[10 34]
[11 33]
[12 32]
[13 31]
[14 30]
[15 29]
[16 28]
[17 27]
[19 26]
[20 25]
[48 77]
[49 76]
[50 75]
[52 73]
[53 72]
[54 71]
[56 67]
[57 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
