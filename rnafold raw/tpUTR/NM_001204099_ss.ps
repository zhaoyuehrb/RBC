%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 14:14:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCAGCCCGGCGCCCUAGCAGAUGCACGUGUCUGUCGAAUCGCUGCCUCCGAGCCCACCCCCGAGCUCGCAUGCUGUCACCCAUUCCAGCCUAAAUGUGACCAUAAAAUUAGGGCUGCUGCUUUUAUCGAGAA\
) } def
/len { sequence length } bind def

/coor [
[132.83639526 236.23995972]
[129.03846741 221.72872925]
[125.24053955 207.21751404]
[121.10597992 192.79858398]
[116.63702393 178.47976685]
[112.16806793 164.16094971]
[107.69911957 149.84213257]
[103.23016357 135.52333069]
[98.76120758 121.20450592]
[85.51699829 114.16243744]
[71.14715576 118.46448517]
[56.77730942 122.76653290]
[42.40746689 127.06858063]
[39.93292999 142.08982849]
[31.21739197 154.49653625]
[18.03335190 161.85868835]
[3.02190471 162.76281738]
[-10.83629417 157.08305359]
[-20.81285667 145.99549866]
[-35.18269730 150.29754639]
[-49.55253983 154.59959412]
[-63.92238617 158.90164185]
[-78.29222870 163.20370483]
[-92.66207123 167.50575256]
[-99.94123840 181.53390503]
[-115.03281403 186.22644043]
[-128.98323059 178.79936218]
[-133.51594543 163.65902710]
[-125.94179535 149.78791809]
[-110.75437164 145.41551208]
[-96.96411896 153.13591003]
[-82.59427643 148.83386230]
[-68.22443390 144.53179932]
[-53.85459137 140.22975159]
[-39.48474884 135.92770386]
[-25.11490440 131.62565613]
[-22.87231445 116.87994385]
[-14.41504192 104.51935577]
[-1.37633598 97.02581787]
[13.68433762 95.93206024]
[27.78366089 101.50844574]
[38.10541916 112.69873810]
[52.47526169 108.39669037]
[66.84510040 104.09464264]
[81.21494293 99.79259491]
[88.10243988 86.46733856]
[83.30151367 72.25639343]
[68.63603973 67.54152679]
[59.66375351 55.23902893]
[59.65614319 40.19030762]
[68.40654755 28.16664505]
[63.60561752 13.95569611]
[58.80468750 -0.25525331]
[54.00376129 -14.46620274]
[49.20283127 -28.67715263]
[37.45563126 -39.27497482]
[40.71240997 -53.80916595]
[26.43875694 -60.59432602]
[21.22238541 -75.51293945]
[28.15807724 -89.71405792]
[43.13100815 -94.77240753]
[57.25800323 -87.68695831]
[62.15776825 -72.66138458]
[54.92335892 -58.61009216]
[66.32716370 -49.02873230]
[63.41378021 -33.47808075]
[68.21470642 -19.26713181]
[73.01564026 -5.05618143]
[77.81656647 9.15476799]
[82.61749268 23.36571693]
[96.86688232 27.61929131]
[105.98714447 39.58945465]
[106.31395721 54.81267929]
[97.51246643 67.45545959]
[102.31339264 81.66641235]
[107.65236664 81.45878601]
[113.22071838 82.87109375]
[126.03306580 75.07085419]
[138.84541321 67.27060699]
[151.65776062 59.47036743]
[164.47010803 51.67012787]
[161.46688843 36.81224823]
[163.72955322 21.82371521]
[170.98487854 8.51446342]
[182.35673523 -1.50834918]
[196.47190857 -7.03441954]
[211.62594604 -7.39644766]
[225.98890686 -2.55071712]
[237.82640076 6.91762686]
[245.70899963 19.86523628]
[248.68481445 34.72862244]
[246.39453125 49.71295929]
[239.11470032 63.00881958]
[227.72439575 73.01065826]
[213.59906006 78.51070404]
[198.44438171 78.84481049]
[184.09037781 73.97261810]
[172.27035522 64.48247528]
[159.45800781 72.28271484]
[146.64566040 80.08295441]
[133.83331299 87.88320160]
[121.02095795 95.68344116]
[136.00448608 94.98065186]
[150.48162842 91.05476379]
[164.87963867 95.26153564]
[174.96575928 106.36425018]
[177.77479553 121.09888458]
[172.48095703 135.13366699]
[160.64053345 144.34260559]
[145.73443604 146.01840210]
[132.14483643 139.66839600]
[123.86670685 127.15896606]
[113.08002472 116.73555756]
[117.54898071 131.05436707]
[122.01792908 145.37318420]
[126.48688507 159.69200134]
[130.95584106 174.01081848]
[135.42478943 188.32962036]
[140.12306213 193.19024658]
[141.39776611 198.84729004]
[139.75177002 203.41958618]
[143.54969788 217.93080139]
[147.34762573 232.44203186]
[162.33767700 235.31625366]
[174.59104919 244.41665649]
[181.67485046 257.93637085]
[182.18255615 273.19104004]
[176.01336670 287.15185547]
[164.39219666 297.04684448]
[149.62643433 300.91140747]
[134.64781189 297.97817993]
[122.43036652 288.82958984]
[115.39987183 275.28207397]
[114.95223999 260.02551270]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 123]
[2 122]
[3 121]
[4 118]
[5 117]
[6 116]
[7 115]
[8 114]
[9 113]
[10 45]
[11 44]
[12 43]
[13 42]
[19 36]
[20 35]
[21 34]
[22 33]
[23 32]
[24 31]
[46 75]
[47 74]
[51 70]
[52 69]
[53 68]
[54 67]
[55 66]
[57 64]
[77 102]
[78 101]
[79 100]
[80 99]
[81 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
