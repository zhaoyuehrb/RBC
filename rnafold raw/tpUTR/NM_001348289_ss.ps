%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 06:58:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGCAGGCCCGUACCAGGCAGAGGGGGCCGCUCCGCUCCGUAGAGUUUUCCCCAUCAUGAGGGGUC\
) } def
/len { sequence length } bind def

/coor [
[72.34054565 119.61233521]
[66.76607513 106.72275543]
[51.77019882 106.37111664]
[36.77431870 106.01947784]
[27.76875496 109.02620697]
[21.08830261 105.28343201]
[6.12538958 104.22929382]
[-8.83752441 103.17514801]
[-23.80043793 102.12100220]
[-38.76335144 101.06686401]
[-44.09076691 103.71278381]
[-49.32890320 103.76998901]
[-53.41314316 101.78310394]
[-55.70265198 98.66819763]
[-70.36997223 95.52659607]
[-82.59559631 105.27688599]
[-98.22695923 104.83588409]
[-109.88340759 94.41182709]
[-112.06113434 78.92662048]
[-103.73187256 65.69191742]
[-88.82845306 60.95673370]
[-74.38780212 66.95687866]
[-67.22837067 80.85926819]
[-52.56104660 84.00087738]
[-37.70920944 86.10395050]
[-22.74629402 87.15808868]
[-7.78338146 88.21223450]
[7.17953205 89.26638031]
[22.14244652 90.32051849]
[37.12595749 91.02360535]
[52.12183762 91.37524414]
[67.11771393 91.72688293]
[77.17685699 74.92425537]
[94.84936523 66.48641968]
[114.24002838 69.22808075]
[123.39468384 57.34564590]
[132.54933167 45.46321106]
[141.70399475 33.58077240]
[143.33877563 17.26331139]
[158.39671326 10.76790810]
[171.38751221 20.77647591]
[168.94732666 36.99306107]
[153.58642578 42.73542786]
[144.43177795 54.61786270]
[135.27711487 66.50029755]
[126.12246704 78.38273621]
[131.01539612 86.29837799]
[133.57214355 95.24606323]
[133.60014343 104.55183411]
[131.09727478 113.51473999]
[143.19105530 122.38832855]
[155.28483582 131.26190186]
[167.37861633 140.13549805]
[182.52531433 136.24809265]
[196.60470581 143.05285645]
[202.96893311 157.33677673]
[198.61300659 172.35543823]
[185.59367371 181.01747131]
[170.05824280 179.23294067]
[159.34208679 167.84443665]
[158.50503540 152.22927856]
[146.41125488 143.35568237]
[134.31747437 134.48210144]
[122.22370148 125.60852051]
[109.94116974 132.41700745]
[95.95334625 133.66471863]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 32]
[3 31]
[4 30]
[6 29]
[7 28]
[8 27]
[9 26]
[10 25]
[14 24]
[15 23]
[35 46]
[36 45]
[37 44]
[38 43]
[50 64]
[51 63]
[52 62]
[53 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
