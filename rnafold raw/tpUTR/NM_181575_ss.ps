%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 05:59:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCAAAGGAACAGGAUGGCACCCAGAGCCGCAGGACGGAGACUGGGGGCAGCCCUCACCCAACUCACAACAGGCUGGAUGGGUGGGUGGUAAAAAGGGAAGGAUGAGGCUCCCCCAAUGUCACAUUAAAUUCAUGGUUUUCAUUCAAGGCA\
) } def
/len { sequence length } bind def

/coor [
[103.59500122 335.38552856]
[103.28702545 320.38867188]
[102.97904968 305.39184570]
[88.34080505 299.05419922]
[77.88262177 286.93289185]
[73.72809601 271.41186523]
[76.75445557 255.57292175]
[86.40788269 242.58375549]
[100.80409241 235.06452942]
[100.18826294 220.07717896]
[99.57244110 205.08982849]
[86.31516266 198.29939270]
[78.18267822 185.70101929]
[77.44322968 170.62390137]
[84.39541626 157.11227417]
[97.26118469 148.84068298]
[96.64535522 133.85333252]
[96.02953339 118.86597443]
[84.44048309 109.34264374]
[69.61800385 111.64351654]
[57.16798401 121.40608215]
[43.40449524 115.71260071]
[28.58201408 118.01348114]
[13.75953197 120.31435394]
[-1.06294978 122.61522675]
[-15.88543224 124.91609955]
[-25.91989708 139.20933533]
[-42.84933090 141.80278015]
[-56.16764450 131.57899475]
[-70.93975830 134.18371582]
[-85.71187592 136.78843689]
[-96.05459595 149.05252075]
[-112.08702087 148.46878052]
[-121.51045227 135.48500061]
[-117.09603882 120.06123352]
[-102.23014069 114.02927399]
[-88.31659698 122.01632690]
[-73.54447937 119.41159821]
[-58.77236557 116.80687714]
[-52.90736008 105.29367065]
[-41.29995728 99.18655396]
[-28.10298729 100.92469788]
[-18.18630600 110.09362030]
[-3.36382461 107.79274750]
[11.45865726 105.49187469]
[26.28113937 103.19099426]
[41.10362244 100.89012146]
[52.49343491 91.29212952]
[67.31712341 96.82102966]
[82.13961029 94.52015686]
[77.87928772 85.40786743]
[77.83338928 73.80127716]
[74.77499390 59.11638260]
[71.71659851 44.43148422]
[68.50760651 29.77876091]
[65.14834595 15.15975285]
[61.78908539 0.54074574]
[58.42982864 -14.07826138]
[55.07056808 -28.69726944]
[51.71131134 -43.31627655]
[48.35205078 -57.93528366]
[44.99279022 -72.55429077]
[40.71179199 -77.72300720]
[39.85988617 -83.42056274]
[41.80880737 -87.84220886]
[39.05256653 -102.58679962]
[34.37300491 -110.50497437]
[36.39435959 -117.66223145]
[33.94143295 -132.46031189]
[20.94482231 -141.45274353]
[18.19567108 -157.01608276]
[27.32500076 -169.91688538]
[42.91654205 -172.50134277]
[55.72010803 -163.23612976]
[58.13957596 -147.61813354]
[48.73950958 -134.91323853]
[51.19244003 -120.11515808]
[53.79716110 -105.34304810]
[56.55340576 -90.59844971]
[59.61180115 -75.91355133]
[62.97105789 -61.29454422]
[66.33031464 -46.67553711]
[69.68957520 -32.05652618]
[73.04883575 -17.43752098]
[76.40809631 -2.81851315]
[79.76734924 11.80049419]
[83.12660980 26.41950226]
[87.71806335 32.27021027]
[86.40149689 41.37308884]
[89.45989227 56.05798721]
[92.51828766 70.74288177]
[99.05163574 74.42600250]
[102.01953888 59.72254944]
[116.92048645 58.00160217]
[123.16183472 71.64145660]
[112.11833191 81.79224396]
[118.65167999 85.47536469]
[132.79899597 80.49004364]
[146.94630432 75.50472260]
[151.59965515 70.66851044]
[157.16491699 69.17995453]
[161.77803040 70.61817169]
[176.11808777 66.21787262]
[190.45814514 61.81757355]
[197.64112854 47.73992157]
[212.70024109 42.94419861]
[226.70115662 50.27562332]
[231.33740234 65.38459015]
[223.85836792 79.30721283]
[208.70121765 83.78345490]
[194.85844421 76.15763855]
[180.51838684 80.55793762]
[166.17832947 84.95823669]
[151.93164062 89.65203857]
[137.78431702 94.63735962]
[123.63700104 99.62268066]
[138.44253540 102.03023529]
[153.24806213 104.43778992]
[168.11625671 102.45374298]
[182.64811707 106.17197418]
[194.73622131 115.05328369]
[202.62759399 127.80970764]
[205.17782593 142.59132385]
[202.01708984 157.25453186]
[193.60374451 169.67289734]
[181.15789795 178.04551697]
[166.48442078 181.15821838]
[151.71122742 178.55958557]
[138.98071289 170.62648010]
[130.13905334 158.50935364]
[126.46839905 143.96495056]
[118.74264526 131.10754395]
[111.01688385 118.25015259]
[111.63271332 133.23750305]
[112.24853516 148.22485352]
[125.74954224 155.41305542]
[133.78678894 168.30876160]
[134.28677368 183.39572144]
[127.21529388 196.61882019]
[114.55979156 204.47399902]
[115.17562103 219.46134949]
[115.79144287 234.44871521]
[128.99911499 239.56967163]
[139.21842957 249.31671143]
[144.92297363 262.18814087]
[145.27821350 276.21914673]
[140.26341248 289.28173828]
[130.66981506 299.40740967]
[117.97588348 305.08386230]
[118.28385925 320.08068848]
[118.59184265 335.07754517]
[121.17761230 354.28598022]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[9 142]
[10 141]
[11 140]
[16 135]
[17 134]
[18 133]
[19 50]
[20 49]
[22 47]
[23 46]
[24 45]
[25 44]
[26 43]
[29 39]
[30 38]
[31 37]
[52 91]
[53 90]
[54 89]
[55 87]
[56 86]
[57 85]
[58 84]
[59 83]
[60 82]
[61 81]
[62 80]
[65 79]
[66 78]
[68 77]
[69 76]
[97 116]
[98 115]
[99 114]
[102 113]
[103 112]
[104 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
