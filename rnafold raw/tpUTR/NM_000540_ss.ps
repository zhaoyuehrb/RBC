%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 22:19:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACACCCCCAGCUGGCCCUCCACCCCCACCUCAAGUGCCUUAUUCUCACAGCAAGCCCCUUAGUCCCCAAGCCCCUCCCCCUAAGGCAGCUGGGGGAGAGGUGACCUAGUACUGGAAAAUAAAUCUGUGCUACGCCCCCCAGCA\
) } def
/len { sequence length } bind def

/coor [
[113.98503113 242.81398010]
[107.79330444 256.76480103]
[96.15615845 266.64102173]
[81.38416290 270.48168945]
[66.41030884 267.52429199]
[54.20765305 258.35595703]
[47.19905472 244.79711914]
[46.77606964 229.53987122]
[53.02268600 215.61354065]
[64.69863129 205.78323364]
[79.48563385 202.00074768]
[82.39206696 187.28501892]
[85.29850006 172.56929016]
[88.20492554 157.85356140]
[91.11135864 143.13783264]
[76.66944885 135.53637695]
[66.46273041 123.54511261]
[61.63472366 109.15979767]
[62.47890091 94.58319855]
[68.45191193 81.88993073]
[78.31004333 72.73120880]
[71.71825409 59.25722122]
[65.12646484 45.78323364]
[58.53467178 32.30924988]
[45.52000046 23.31320381]
[46.87711716 8.48055458]
[32.19843292 3.26769090]
[25.70536041 -10.49074936]
[30.76548958 -24.45250702]
[24.17369843 -37.92649460]
[17.58190918 -51.40047836]
[10.99011898 -64.87446594]
[4.39832830 -78.34844971]
[-10.28035736 -83.56131744]
[-16.77342796 -97.31975555]
[-11.71329880 -111.28151703]
[-18.30508995 -124.75550079]
[-24.89687920 -138.22949219]
[-31.48867035 -151.70347595]
[-38.08045959 -165.17745972]
[-44.67224884 -178.65144348]
[-51.26404190 -192.12542725]
[-66.88100433 -189.83499146]
[-82.42425537 -192.46777344]
[-96.38143158 -199.75547791]
[-107.39823151 -210.97749329]
[-114.40983582 -225.03207397]
[-116.74380493 -240.54460144]
[-114.18456268 -256.00189209]
[-106.99324799 -269.89993286]
[-95.88111877 -280.89016724]
[-102.76326752 -294.21817017]
[-117.68898010 -291.75274658]
[-132.64572144 -294.02227783]
[-146.16821289 -300.80444336]
[-156.93162537 -311.43475342]
[-163.88150024 -324.87182617]
[-166.33692932 -339.79919434]
[-164.05737305 -354.75442505]
[-157.26615906 -368.27233887]
[-146.62861633 -379.02862549]
[-133.18690491 -385.96951294]
[-118.25789642 -388.41491699]
[-103.30419922 -386.12536621]
[-89.79081726 -379.32507324]
[-79.04165649 -368.68032837]
[-72.10980225 -355.23397827]
[-69.67437744 -340.30334473]
[-71.97397614 -325.35116577]
[-78.78330231 -311.84234619]
[-89.43524933 -301.10034180]
[-82.55310059 -287.77230835]
[-68.51100159 -290.42745972]
[-54.27493286 -289.00585938]
[-41.00561142 -283.61431885]
[-29.78749275 -274.68380737]
[-21.54013634 -262.93478394]
[-16.94283485 -249.31929016]
[-16.37867355 -234.94371033]
[-19.90262222 -220.97888184]
[-27.23632240 -208.56472778]
[-37.79005432 -198.71722412]
[-31.19826317 -185.24324036]
[-24.60647392 -171.76925659]
[-18.01468277 -158.29525757]
[-11.42289352 -144.82127380]
[-4.83110285 -131.34729004]
[1.76068735 -117.87330627]
[15.88908195 -113.29902649]
[22.76603699 -99.72838593]
[17.87231445 -84.94023895]
[24.46410561 -71.46625519]
[31.05589485 -57.99227142]
[37.64768600 -44.51828384]
[44.23947525 -31.04429817]
[58.36787033 -26.47001648]
[65.24482727 -12.89938068]
[60.35110474 1.88876450]
[72.89428711 9.92105961]
[72.00865936 25.71745872]
[78.60044861 39.19144440]
[85.19223785 52.66543198]
[91.78402710 66.13941956]
[111.98580933 64.84366608]
[130.77874756 75.33291626]
[141.49607849 95.45884705]
[139.51242065 119.45889282]
[152.91421509 126.19625092]
[166.31599426 132.93362427]
[179.71778870 139.67098999]
[193.11956787 146.40835571]
[206.52136230 153.14572144]
[215.66868591 154.22082520]
[220.13813782 160.17697144]
[233.39082336 167.20309448]
[246.64349365 174.22923279]
[261.06640625 168.18655396]
[275.98370361 172.87780762]
[284.35192871 186.08790588]
[282.21984863 201.57946777]
[270.59417725 212.03782654]
[254.96417236 212.52488708]
[242.70986938 202.81065369]
[239.61737061 187.48190308]
[226.36470032 180.45578003]
[213.11201477 173.42965698]
[199.78399658 166.54750061]
[186.38220215 159.81013489]
[172.98042297 153.07276917]
[159.57862854 146.33540344]
[146.17684937 139.59803772]
[132.77505493 132.86067200]
[126.03806305 136.15657043]
[138.48365784 144.52958679]
[137.45510864 159.49427795]
[123.98097229 166.08576965]
[111.53556824 157.71249390]
[112.56407928 142.74836731]
[105.82708740 146.04425049]
[102.92065430 160.75997925]
[100.01422882 175.47570801]
[97.10779572 190.19143677]
[94.20136261 204.90716553]
[106.44002533 214.02735901]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 143]
[12 142]
[13 141]
[14 140]
[15 139]
[21 103]
[22 102]
[23 101]
[24 100]
[26 98]
[29 95]
[30 94]
[31 93]
[32 92]
[33 91]
[36 88]
[37 87]
[38 86]
[39 85]
[40 84]
[41 83]
[42 82]
[51 72]
[52 71]
[107 132]
[108 131]
[109 130]
[110 129]
[111 128]
[112 127]
[114 126]
[115 125]
[116 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
