%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 10:49:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCACGACUGAGGGCAGGAGGCUCCAUCCUUCUCCCCAAGGUCUGUGGCUCCUCCCGAAACCCAAGUUAUGCAUCCCCAUCCCCAUGCCCUCAUCCCGACCUCUUAGAAAAUAAAUACAAGUUUGAACAG\
) } def
/len { sequence length } bind def

/coor [
[150.21417236 300.00271606]
[150.57310486 284.98098755]
[153.06628418 270.16326904]
[157.64294434 255.85122681]
[164.20991516 242.33621216]
[172.63351440 229.89338684]
[182.74221802 218.77606201]
[173.19186401 207.20927429]
[166.44166565 204.02337646]
[163.55583191 195.25167847]
[154.28344727 183.46089172]
[145.01106262 171.67008972]
[135.73867798 159.87928772]
[126.46629333 148.08850098]
[117.19390869 136.29769897]
[107.92152405 124.50690460]
[98.64913940 112.71611023]
[85.84091949 104.90908813]
[71.11198425 102.07032013]
[56.38305664 99.23155212]
[41.65412903 96.39278412]
[26.92519760 93.55401611]
[13.93145466 102.14472961]
[-0.96533644 99.05599976]
[-9.07519531 86.61550903]
[-23.80412674 83.77674103]
[-38.53305817 80.93797302]
[-53.26198578 78.09920502]
[-68.08285522 75.78794861]
[-82.97677612 74.00716400]
[-97.87068939 72.22637939]
[-112.76461029 70.44559479]
[-125.03112793 80.41094208]
[-140.74259949 78.70068359]
[-150.57769775 66.32949066]
[-148.70143127 50.63697433]
[-136.22695923 40.93321991]
[-120.55514526 42.97529602]
[-110.98382568 55.55167770]
[-96.08990479 57.33246231]
[-81.19598389 59.11324692]
[-66.30207062 60.89403534]
[-63.26450729 58.92790985]
[-59.09661484 58.39222336]
[-54.50843048 59.81398773]
[-50.42321777 63.37027359]
[-35.69428635 66.20903778]
[-20.96535683 69.04780579]
[-6.23642731 71.88658142]
[5.91616917 63.35135651]
[20.89383888 66.02045441]
[29.76396561 78.82508850]
[44.49289703 81.66385651]
[59.22182465 84.50262451]
[73.95075989 87.34139252]
[88.67968750 90.18016052]
[94.28896332 85.20159912]
[91.27509308 70.50749969]
[105.50751495 75.24449158]
[111.11679077 70.26593018]
[110.04669952 55.30414963]
[108.97661591 40.34236908]
[99.34167480 27.07210350]
[106.26283264 12.20503998]
[122.62019348 11.03513813]
[131.58671570 24.76589394]
[123.93839264 39.27228165]
[125.00848389 54.23406219]
[126.07857513 69.19584656]
[132.31254578 55.55261993]
[138.54650879 41.90939331]
[151.65838623 34.62386322]
[166.39862061 31.84439087]
[181.26330566 33.85455704]
[194.73587036 40.44927216]
[205.44171143 50.95569229]
[212.28855896 64.30187988]
[214.57785034 79.12615204]
[212.07600403 93.91603851]
[205.03826904 107.16256714]
[194.18270874 117.51422882]
[180.61688232 123.91486359]
[165.72486877 125.71144867]
[151.02604675 122.72066498]
[138.02011108 115.24768066]
[124.23002625 109.34570312]
[110.43993378 103.44372559]
[119.71231842 115.23451996]
[128.98471069 127.02531433]
[138.25709534 138.81611633]
[147.52947998 150.60690308]
[156.80186462 162.39770508]
[166.07424927 174.18850708]
[175.34663391 185.97929382]
[184.75866699 197.65892029]
[194.30902100 209.22572327]
[207.13851929 201.40365601]
[220.95065308 195.48710632]
[235.46424866 191.59654236]
[250.38380432 189.81115723]
[265.40557861 190.16729736]
[280.22375488 192.65773010]
[294.53668213 197.23173523]
[308.05291748 203.79620361]
[320.49728394 212.21748352]
[331.61648560 222.32412720]
[341.18411255 233.91038513]
[349.00537109 246.74037170]
[354.92108154 260.55288696]
[358.81072998 275.06671143]
[360.59521484 289.98635864]
[360.23812866 305.00811768]
[357.74676514 319.82617188]
[353.17187500 334.13876343]
[346.60659790 347.65460205]
[338.18453979 360.09848022]
[328.07720947 371.21704102]
[316.49035645 380.78393555]
[303.65988159 388.60443115]
[289.84701538 394.51925659]
[275.33294678 398.40802002]
[260.41317749 400.19155884]
[245.39143372 399.83355713]
[230.57356262 397.34130859]
[216.26121521 392.76553345]
[202.74580383 386.19937134]
[190.30244446 377.77658081]
[179.18450928 367.66854858]
[169.61831665 356.08111572]
[161.79862976 343.25015259]
[155.88465881 329.43692017]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 96]
[8 95]
[10 94]
[11 93]
[12 92]
[13 91]
[14 90]
[15 89]
[16 88]
[17 87]
[18 56]
[19 55]
[20 54]
[21 53]
[22 52]
[25 49]
[26 48]
[27 47]
[28 46]
[29 42]
[30 41]
[31 40]
[32 39]
[60 69]
[61 68]
[62 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
