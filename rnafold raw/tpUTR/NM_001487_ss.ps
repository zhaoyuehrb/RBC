%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 17:11:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUGUUCCCUCCCCCAACCCUAUCCCUCCUACCUCACCCGCAGGGGGAAGGAGGGAGGCUGACAAGCCUUGAAUAAAACACAAGCCUCCGUUUCUC\
) } def
/len { sequence length } bind def

/coor [
[67.16381073 172.21868896]
[58.29812622 160.11912537]
[54.58118439 145.58694458]
[56.54867554 130.71653748]
[63.91703415 117.65103149]
[75.62433624 108.27344513]
[89.98252106 103.93536377]
[76.14720917 98.14018250]
[62.31189346 92.34500885]
[48.47658157 86.54982758]
[32.75866318 88.35473633]
[24.00887871 76.30107880]
[10.17356396 70.50590515]
[-3.66175032 64.71072388]
[-17.49706459 58.91555023]
[-31.33237839 53.12037277]
[-45.16769409 47.32519531]
[-53.83130264 59.64412308]
[-64.94087219 69.81228638]
[-77.97679138 77.35410309]
[-92.32933807 81.91682434]
[-107.32722473 83.28704834]
[-122.26896667 81.40068817]
[-136.45571899 76.34597015]
[-149.22393799 68.35931396]
[-159.97642517 57.81426620]
[-168.21028137 45.20404434]
[-173.54037476 31.11844254]
[-175.71742249 16.21627808]
[-174.63960266 1.19454861]
[-170.35731506 -13.24415207]
[-163.07084656 -26.42449951]
[-153.12101746 -37.73002625]
[-140.97319031 -46.63195038]
[-127.19553375 -52.71391296]
[-112.43245697 -55.69145203]
[-97.37446594 -55.42529678]
[-82.72583771 -51.92790222]
[-69.17171478 -45.36284637]
[-57.34606171 -36.03718567]
[-47.80197525 -24.38710403]
[-40.98584747 -10.95748997]
[-37.21648788 3.62352490]
[-36.67019653 18.67396164]
[-39.37251663 33.48988342]
[-25.53720284 39.28506088]
[-11.70188808 45.08023453]
[2.13342667 50.87541199]
[15.96874142 56.67058945]
[29.80405617 62.46576691]
[44.53237915 60.24635315]
[54.27175903 72.71451569]
[68.10707092 78.50968933]
[81.94238281 84.30487061]
[95.77770233 90.10004425]
[110.54981995 92.70476532]
[125.53282928 91.99104309]
[140.51583862 91.27731323]
[155.49884033 90.56358337]
[170.48185730 89.84985352]
[185.46487427 89.13612366]
[200.44787598 88.42239380]
[203.64472961 73.67646027]
[210.55004883 60.26083374]
[220.69299316 49.09021378]
[233.38203430 40.92622757]
[247.75199890 36.32551575]
[262.82312012 35.60175705]
[277.56781006 38.80429840]
[290.98077393 45.71479034]
[302.14749146 55.86206436]
[310.30657959 68.55425262]
[314.90173340 82.92599487]
[315.61968994 97.99739075]
[312.41143799 112.74085236]
[305.49575806 126.15113831]
[295.34417725 137.31393433]
[282.64883423 145.46810913]
[268.27532959 150.05772400]
[253.20365906 150.76985168]
[238.46144104 147.55592346]
[225.05381775 140.63507080]
[213.89495850 130.47917175]
[205.74566650 117.78069305]
[201.16160583 103.40540314]
[186.17858887 104.11913300]
[171.19558716 104.83286285]
[156.21257019 105.54659271]
[141.22956848 106.26032257]
[126.24655914 106.97405243]
[111.26354218 107.68778229]
[123.27265167 116.67562866]
[131.06632996 129.49195862]
[133.52136230 144.28968811]
[130.28392029 158.93615723]
[121.82059479 171.32051086]
[109.35112000 179.65789795]
[94.67259216 182.74673462]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 55]
[8 54]
[9 53]
[10 52]
[12 50]
[13 49]
[14 48]
[15 47]
[16 46]
[17 45]
[56 91]
[57 90]
[58 89]
[59 88]
[60 87]
[61 86]
[62 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
