%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 15:13:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGUUCUCAUAGAAUAAAAAACAGAACUGAACUUAGCCUUCCCAGGGAAGGAACCAUGCCCCACACAUCCAGGGAGUGAUGACAGAGGGGACAGCUUGAAGAGCUCUGAAGGACAAUAAAACCCACUCCUCAGUCCUA\
) } def
/len { sequence length } bind def

/coor [
[120.79767609 218.57310486]
[113.35472107 219.49639893]
[106.84646606 233.01094055]
[100.33821106 246.52546692]
[93.82995605 260.04000854]
[87.32170105 273.55453491]
[80.81344604 287.06906128]
[74.30519104 300.58361816]
[72.88040924 317.47756958]
[56.25223923 320.78518677]
[48.47074890 305.72250366]
[60.79065323 294.07534790]
[67.29891205 280.56082153]
[73.80716705 267.04629517]
[80.31542206 253.53175354]
[86.82367706 240.01721191]
[93.33193207 226.50268555]
[99.84018707 212.98814392]
[93.32196045 200.73805237]
[92.13745117 187.77798462]
[95.82459259 176.19723511]
[103.18284607 167.62768555]
[112.54772949 163.01455688]
[109.86937714 148.25561523]
[107.19102478 133.49667358]
[104.51267242 118.73773193]
[89.79565430 131.06332397]
[64.71616364 129.69941711]
[49.81048203 131.37889099]
[34.90479660 133.05834961]
[22.03857040 143.22656250]
[6.90157509 136.91755676]
[5.06545305 120.62152863]
[18.41905022 111.10241699]
[33.22533035 118.15267181]
[48.13101196 116.47320557]
[63.03669739 114.79373932]
[65.54929352 100.00567627]
[52.03475571 93.49742126]
[38.52022552 86.98915863]
[25.00569153 80.48090363]
[11.49115753 73.97264862]
[-2.02337527 67.46439362]
[-18.91734886 66.03961182]
[-22.22496796 49.41144562]
[-7.16227579 41.62995529]
[4.48488092 53.94985962]
[17.99941444 60.45811462]
[31.51394653 66.96636963]
[45.02848053 73.47463226]
[58.54301453 79.98288727]
[72.05754852 86.49114227]
[78.88613129 83.38945007]
[68.76609039 72.31764984]
[76.16875458 59.27155685]
[90.86386871 62.28047180]
[92.54328918 77.18607330]
[99.37187195 74.08438873]
[103.36242676 59.62494278]
[107.19049835 45.12163544]
[110.85559845 30.57629395]
[114.52070618 16.03095055]
[118.18581390 1.48560858]
[114.05497742 -13.78680897]
[124.66754150 -24.23777580]
[118.22875977 -43.28274536]
[132.10955811 -56.67469788]
[135.11839294 -71.36982727]
[138.12724304 -86.06495667]
[141.13607788 -100.76009369]
[130.56816101 -112.12225342]
[128.73046875 -127.53012085]
[136.32963562 -141.05906677]
[150.44363403 -147.50692749]
[165.64532471 -144.39436340]
[176.08937073 -132.91822815]
[177.75981140 -117.49132538]
[170.01432800 -104.04561615]
[155.83120728 -97.75125122]
[152.82237244 -83.05612183]
[149.81352234 -68.36098480]
[146.80468750 -53.66585541]
[153.22991943 -45.59136200]
[154.12437439 -35.08980179]
[148.94514465 -25.65807915]
[139.21287537 -20.57266998]
[143.60588074 -6.34063292]
[132.73115540 5.15071487]
[129.06605530 19.69605827]
[125.40094757 34.24140167]
[121.73583984 48.78674316]
[123.16345978 56.10172653]
[117.82186890 63.61549377]
[113.83131409 78.07493591]
[124.19725800 88.91686249]
[138.82116699 85.57904816]
[153.44509888 82.24123383]
[168.06901550 78.90341949]
[182.16558838 69.48413849]
[195.11907959 80.42229462]
[188.19427490 95.89754486]
[171.40682983 93.52733612]
[156.78291321 96.86515045]
[142.15898132 100.20296478]
[127.53507233 103.54077911]
[119.27161407 116.05937958]
[121.94996643 130.81832886]
[124.62831879 145.57727051]
[127.30667114 160.33621216]
[152.53332520 172.67811584]
[154.64120483 206.19007874]
[164.25433350 217.70474243]
[173.86746216 229.21942139]
[183.48060608 240.73408508]
[193.09373474 252.24876404]
[207.12742615 246.59977722]
[222.22001648 245.56596375]
[236.89289856 249.24856567]
[249.70857239 257.28683472]
[259.41149902 268.89321899]
[265.05105591 282.93069458]
[266.07476807 298.02398682]
[262.38232422 312.69439697]
[254.33549500 325.50466919]
[242.72259521 335.19982910]
[228.68135071 340.82998657]
[213.58738708 341.84356689]
[198.91944885 338.14129639]
[186.11456299 330.08587646]
[176.42720032 318.46649170]
[170.80644226 304.42147827]
[169.80296326 289.32684326]
[173.51506042 274.66137695]
[181.57907104 261.86187744]
[171.96592712 250.34721375]
[162.35279846 238.83255005]
[152.73965454 227.31787109]
[143.12652588 215.80320740]
[135.68357849 216.72650146]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 18]
[3 17]
[4 16]
[5 15]
[6 14]
[7 13]
[8 12]
[23 109]
[24 108]
[25 107]
[26 106]
[28 37]
[29 36]
[30 35]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[43 47]
[58 94]
[59 93]
[60 91]
[61 90]
[62 89]
[63 88]
[65 86]
[67 82]
[68 81]
[69 80]
[70 79]
[95 105]
[96 104]
[97 103]
[98 102]
[111 138]
[112 137]
[113 136]
[114 135]
[115 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
