%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 14:08:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCCCAACUCUAACCCCACCCACGGGAGCCUGGAGCUGCAGGAUCCCAGGGGAGGGGUCUCUCUCCCCAUCCCAAGUCAUCCAGCCCUUCUCCCUGCACUCAUGAAACCCCAAUAAAUAUCCUCAUUGACAACCAGAA\
) } def
/len { sequence length } bind def

/coor [
[95.84890747 114.93935394]
[86.23577881 126.45402527]
[76.62264252 137.96870422]
[67.00950623 149.48336792]
[57.39637375 160.99804688]
[47.78323746 172.51271057]
[55.84724426 185.31221008]
[59.55934143 199.97766113]
[58.55585861 215.07229614]
[52.93510437 229.11730957]
[43.24774933 240.73670959]
[30.44285393 248.79212952]
[15.77491665 252.49440002]
[0.68095046 251.48080444]
[-13.36029053 245.85064697]
[-24.97319031 236.15550232]
[-33.02003479 223.34521484]
[-36.71247482 208.67478943]
[-35.68876266 193.58151245]
[-30.04919243 179.54405212]
[-20.34627342 167.93765259]
[-7.53059530 159.89938354]
[7.14229059 156.21678162]
[22.23488426 157.25061035]
[36.26856613 162.89958191]
[45.88170242 151.38490295]
[55.49483490 139.87023926]
[65.10797119 128.35556030]
[74.72110748 116.84089661]
[84.33423615 105.32622528]
[85.51112366 90.37245941]
[77.81763458 77.49572754]
[70.12414551 64.61899567]
[62.43065643 51.74226761]
[54.73716736 38.86553574]
[46.75668716 26.16467285]
[38.49323273 13.64607334]
[30.22977829 1.12747467]
[16.76290131 -0.05115647]
[6.59923267 -8.66562366]
[3.32690811 -21.37941551]
[7.92994690 -33.46561432]
[-0.05053442 -46.16647720]
[-8.03101540 -58.86734009]
[-16.01149750 -71.56819916]
[-20.09777260 -73.52753448]
[-23.00898743 -76.42304230]
[-24.59299469 -79.75257111]
[-24.88281250 -83.01750183]
[-24.07835579 -85.78494263]
[-30.88821220 -99.15003967]
[-37.69807053 -112.51513672]
[-44.50792694 -125.88023376]
[-51.31778336 -139.24533081]
[-58.12764359 -152.61042786]
[-64.93750000 -165.97552490]
[-71.74736023 -179.34062195]
[-85.78804779 -187.81358337]
[-85.20010376 -204.20219421]
[-70.58836365 -211.64724731]
[-56.98411942 -202.48992920]
[-58.38225937 -186.15048218]
[-51.57240295 -172.78538513]
[-44.76254272 -159.42028809]
[-37.95268631 -146.05519104]
[-31.14282990 -132.69009399]
[-24.33297157 -119.32499695]
[-17.52311516 -105.95989990]
[-10.71325684 -92.59480286]
[-3.31063366 -79.54868317]
[4.66984749 -66.84782410]
[12.65032864 -54.14695740]
[20.63080978 -41.44609451]
[37.13964081 -38.43866730]
[46.58451843 -24.16306496]
[42.74837875 -7.13598013]
[51.01183319 5.38261890]
[59.27528763 17.90121841]
[63.76898575 19.72900200]
[67.12412262 24.44454193]
[67.61389923 31.17204666]
[75.30738831 44.04877853]
[83.00087738 56.92551041]
[90.69436646 69.80223846]
[98.38785553 82.67897034]
[96.59914398 67.78600311]
[102.79287720 54.12446213]
[115.17325592 45.65533447]
[130.15075684 44.83412552]
[143.38285828 51.89893723]
[151.03308105 64.80142212]
[150.88334656 79.80067444]
[142.97706604 92.54785919]
[129.60656738 99.34709930]
[114.65074158 98.22788239]
[127.85967255 105.33591461]
[141.06860352 112.44394684]
[156.16383362 104.90091705]
[172.62268066 107.78279877]
[184.02844238 119.76607513]
[186.05348206 136.01831055]
[199.41857910 142.82817078]
[212.78367615 149.63803101]
[226.22433472 156.29750061]
[239.73887634 162.80575562]
[253.25340271 169.31401062]
[263.88186646 158.52909851]
[277.43743896 151.78184509]
[292.44967651 149.80412292]
[307.29019165 152.81047058]
[320.34915161 160.47477722]
[330.21008301 171.96568298]
[335.80331421 186.03674316]
[336.52212524 201.16162109]
[332.28854370 215.69969177]
[323.56179810 228.07397461]
[311.28854370 236.94219971]
[296.80001831 241.34240723]
[281.66787720 240.79728699]
[267.53353882 235.36599731]
[255.93017578 225.63764954]
[248.11643982 212.66751099]
[244.93991089 197.86250305]
[246.74514771 182.82855225]
[233.23062134 176.32029724]
[219.71607971 169.81202698]
[212.26341248 169.74333191]
[205.97381592 163.00312805]
[192.60871887 156.19326782]
[179.24362183 149.38340759]
[167.91825867 156.53851318]
[154.42721558 157.14714050]
[142.31039429 150.94195557]
[134.80046082 139.45767212]
[133.96057129 125.65287781]
[120.75164795 118.54484558]
[107.54270935 111.43681335]
[105.11101532 113.19622803]
[102.26885223 114.42539978]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[4 27]
[5 26]
[6 25]
[31 85]
[32 84]
[33 83]
[34 82]
[35 81]
[36 78]
[37 77]
[38 76]
[42 73]
[43 72]
[44 71]
[45 70]
[50 69]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
[57 62]
[95 137]
[96 136]
[97 135]
[101 130]
[102 129]
[103 128]
[104 126]
[105 125]
[106 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
