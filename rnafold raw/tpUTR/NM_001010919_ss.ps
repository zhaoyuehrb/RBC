%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 13:14:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUUUGAAUGAGUAGAAAAAAAAAUUGUUUUGAAUUAUUGCUUUAUUAAAAAAUAAACAUUGGUA\
) } def
/len { sequence length } bind def

/coor [
[128.36401367 208.31431580]
[133.52728271 194.07986450]
[143.03463745 182.29475403]
[135.03289795 169.60728455]
[127.03116608 156.91979980]
[119.02942657 144.23231506]
[111.02768707 131.54483032]
[103.02594757 118.85735321]
[88.91788483 115.55451202]
[81.18846130 103.29881287]
[84.28657532 89.14437866]
[76.28483582 76.45690155]
[68.28309631 63.76942062]
[60.28135300 51.08193970]
[52.27961349 38.39445877]
[44.27787781 25.70697784]
[29.31069183 28.20879173]
[14.56567669 24.79887199]
[2.28272152 16.02717400]
[-5.68454266 3.25571036]
[-8.14845085 -11.55286884]
[-4.76425934 -26.13685417]
[3.92199874 -38.28091431]
[-4.07974052 -50.96839523]
[-12.08148003 -63.65587616]
[-26.83716011 -70.81143188]
[-27.74807167 -87.18525696]
[-13.87714672 -95.93337250]
[0.50639611 -88.05645752]
[0.60600132 -71.65761566]
[8.60774040 -58.97013474]
[16.60947990 -46.28265381]
[31.31107903 -48.88884735]
[45.93004227 -45.65908813]
[58.23194504 -37.05513382]
[66.32432556 -24.36257935]
[68.94777679 -9.49882507]
[65.67185211 5.27653790]
[56.96535873 17.70523834]
[64.96709442 30.39271927]
[72.96883392 43.08020020]
[80.97057343 55.76768112]
[88.97231293 68.45516205]
[96.97405243 81.14264679]
[111.08211517 84.44548798]
[118.81153870 96.70118713]
[115.71342468 110.85562134]
[123.71516418 123.54309845]
[131.71690369 136.23057556]
[139.71864319 148.91806030]
[147.72038269 161.60554504]
[155.72212219 174.29301453]
[170.45358276 170.79119873]
[185.52365112 172.26487732]
[199.29763794 178.55422974]
[210.28144836 188.97702026]
[217.28364563 202.40267944]
[219.54466248 217.37486267]
[216.81925964 232.26953125]
[209.40307617 245.47099304]
[198.10054016 255.54727173]
[184.13768005 261.40536499]
[169.02908325 262.40982056]
[154.41360474 258.45172119]
[141.87664795 249.96035767]
[132.77810669 237.85682678]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 52]
[4 51]
[5 50]
[6 49]
[7 48]
[8 47]
[11 44]
[12 43]
[13 42]
[14 41]
[15 40]
[16 39]
[23 32]
[24 31]
[25 30]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
