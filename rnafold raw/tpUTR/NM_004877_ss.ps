%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 10:52:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCUGGGCUGGGGACUGAAUUCCUGAUGUCUGAGUCCUCAAGGUGACUGGGGACUUGGAACCCCUAGGACCUGAACAACCAAGACUUUAAAUAAAUUUUAAAAUGCAAAAACUCGGAGA\
) } def
/len { sequence length } bind def

/coor [
[77.81179810 232.76106262]
[77.81179810 217.76106262]
[77.81179810 202.76106262]
[77.81179810 187.76106262]
[77.81179810 172.76106262]
[77.81179810 157.76106262]
[77.81179810 142.76106262]
[77.81179810 127.76106262]
[79.45477295 116.34582520]
[84.70160675 107.34469604]
[70.15558624 111.00710297]
[55.60956192 114.66950989]
[41.06354141 118.33192444]
[26.51751709 121.99433136]
[11.97149563 125.65673828]
[-2.57452703 129.31915283]
[-17.12055016 132.98155212]
[-18.64553070 148.06300354]
[-25.23949814 161.71202087]
[-36.10620117 172.28039551]
[-49.93343353 178.49195862]
[-65.05148315 179.59661865]
[-79.63478088 175.46101379]
[-91.92231750 166.58451843]
[-100.43031311 154.03900146]
[-104.13138580 139.33941650]
[-102.57861328 124.26079559]
[-95.95950317 110.62396240]
[-85.07334137 100.07563019]
[-71.23468781 93.88956451]
[-56.11462402 92.81275177]
[-41.53897476 96.97523499]
[-29.26781845 105.87436676]
[-20.78295708 118.43553162]
[-6.23693562 114.77312469]
[8.30908680 111.11071777]
[22.85510826 107.44831085]
[37.40113068 103.78589630]
[51.94715500 100.12348938]
[66.49317932 96.46108246]
[81.03919983 92.79867554]
[89.31193542 80.28620911]
[86.98465729 65.46784973]
[84.65737152 50.64949036]
[82.33009338 35.83113098]
[72.33330536 27.55643463]
[70.75585175 15.08108425]
[77.90637970 5.23052502]
[75.96457672 -9.64325714]
[74.02277374 -24.51704025]
[72.08097076 -39.39082336]
[70.13916779 -54.26460266]
[68.19736481 -69.13838959]
[54.20489883 -75.63565826]
[45.96569061 -88.67861938]
[46.10883331 -104.10532379]
[54.58865738 -116.99314880]
[68.69927979 -123.22965240]
[83.93804932 -120.82477570]
[95.44232941 -110.54591370]
[99.54115295 -95.67301178]
[94.92659760 -80.95195770]
[83.07114410 -71.08019257]
[85.01294708 -56.20640564]
[86.95475006 -41.33262634]
[88.89655304 -26.45884323]
[90.83835602 -11.58506012]
[92.78015900 3.28872180]
[104.19306946 16.55134201]
[97.14845276 33.50384903]
[99.47573090 48.32220840]
[101.80301666 63.14056778]
[104.13029480 77.95892334]
[109.19221497 63.83883286]
[109.31206512 48.83931351]
[115.71249390 35.27338409]
[127.21296692 25.64326477]
[141.69223022 21.72521782]
[156.47958374 24.24192047]
[168.84754944 32.72917175]
[176.51486206 45.62150955]
[178.06729126 60.54095840]
[173.21850586 74.73564911]
[162.86283875 85.58738708]
[148.91038513 91.09458160]
[133.93424988 90.24132538]
[119.51556396 94.37670898]
[134.15176392 97.66025543]
[148.78796387 100.94380951]
[163.42416382 104.22735596]
[178.06036377 107.51091003]
[192.69654846 110.79445648]
[206.96380615 103.45790100]
[221.53555298 110.16936493]
[225.23359680 125.78038788]
[215.22111511 138.31552124]
[199.17883301 138.15890503]
[189.41300964 125.43065643]
[174.77680969 122.14710236]
[160.14060974 118.86355591]
[145.50440979 115.58000183]
[130.86820984 112.29645538]
[116.23200989 109.01290894]
[110.37696075 113.69994354]
[121.64721680 123.59849548]
[135.78781128 128.60285950]
[141.35276794 142.53236389]
[134.55299377 155.90258789]
[120.01835632 159.60992432]
[107.64530945 151.13006592]
[105.85823822 136.23776245]
[98.66685486 123.07402802]
[92.81179810 127.76106262]
[92.81179810 142.76106262]
[92.81179810 157.76106262]
[92.81179810 172.76106262]
[92.81179810 187.76106262]
[92.81179810 202.76106262]
[92.81179810 217.76106262]
[92.81179810 232.76106262]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 120]
[2 119]
[3 118]
[4 117]
[5 116]
[6 115]
[7 114]
[8 113]
[10 41]
[11 40]
[12 39]
[13 38]
[14 37]
[15 36]
[16 35]
[17 34]
[42 73]
[43 72]
[44 71]
[45 70]
[48 68]
[49 67]
[50 66]
[51 65]
[52 64]
[53 63]
[87 103]
[88 102]
[89 101]
[90 100]
[91 99]
[92 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
