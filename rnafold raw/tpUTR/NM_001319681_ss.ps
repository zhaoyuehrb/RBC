%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 19:24:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAUGCUCAGAUGCAUCAGUUCCUUAAUAUACACGUGAAAUUUGAAAACUGUACAUUCGGUGAGAUUAAAUUUUAUAUACAACUAGCAA\
) } def
/len { sequence length } bind def

/coor [
[78.59159851 188.06126404]
[63.92317200 183.13583374]
[50.30642700 175.78689575]
[41.07150269 187.60705566]
[31.83658218 199.42721558]
[22.60165977 211.24737549]
[24.77624130 226.90135193]
[15.17836380 239.45747375]
[-0.49772146 241.46643066]
[-12.95167065 231.73634338]
[-14.79477787 216.03988647]
[-4.93355894 203.68949890]
[10.78149891 202.01245117]
[20.01642036 190.19229126]
[29.25134277 178.37213135]
[38.48626709 166.55197144]
[28.65225029 155.88026428]
[20.64767456 143.77571106]
[14.67778111 130.54870605]
[10.89564610 116.53839874]
[9.39824772 102.10401917]
[10.22398090 87.61569977]
[13.35167408 73.44492340]
[18.70112801 59.95505524]
[26.13517570 47.49198151]
[35.46320343 36.37527084]
[46.44602585 26.88997078]
[58.80203247 19.27929688]
[72.21440125 13.73839188]
[86.33922577 10.40933228]
[100.81433105 9.37747955]
[115.26855469 10.66929054]
[129.33126831 14.25164223]
[142.64190674 20.03267860]
[154.85914612 27.86416817]
[164.89610291 16.71699715]
[174.93305969 5.56982374]
[184.97003174 -5.57734871]
[195.00698853 -16.72452164]
[205.04394531 -27.87169266]
[215.08090210 -39.01886749]
[225.11785889 -50.16603851]
[235.15481567 -61.31320953]
[245.19178772 -72.46038055]
[255.22874451 -83.60755157]
[253.39083862 -102.28786469]
[265.41381836 -116.29195404]
[283.53131104 -117.26866913]
[292.76623535 -129.08883667]
[302.00115967 -140.90899658]
[311.23608398 -152.72915649]
[309.06149292 -168.38311768]
[318.65939331 -180.93925476]
[334.33547974 -182.94821167]
[346.78942871 -173.21810913]
[348.63253784 -157.52166748]
[338.77130127 -145.17127991]
[323.05624390 -143.49423218]
[313.82131958 -131.67407227]
[304.58639526 -119.85391235]
[295.35147095 -108.03375244]
[299.21450806 -97.02892303]
[297.16461182 -85.42415619]
[289.61132812 -76.22123718]
[278.40307617 -71.85965729]
[266.37591553 -73.57059479]
[256.33895874 -62.42342377]
[246.30198669 -51.27625275]
[236.26502991 -40.12907791]
[226.22807312 -28.98190689]
[216.19111633 -17.83473396]
[206.15415955 -6.68756199]
[196.11720276 4.45961046]
[186.08024597 15.60678291]
[176.04327393 26.75395584]
[166.00631714 37.90112686]
[175.60813904 50.03487396]
[183.00587463 63.62516785]
[187.98388672 78.27583313]
[190.39706421 93.55979156]
[190.17503357 109.03148651]
[187.32429504 124.23989868]
[181.92793274 138.74169922]
[174.14326477 152.11412048]
[164.19721985 163.96734619]
[152.37976074 173.95584106]
[139.03533936 181.78842163]
[124.55300903 187.23677063]
[109.35491180 190.14205933]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 16]
[4 15]
[5 14]
[6 13]
[35 76]
[36 75]
[37 74]
[38 73]
[39 72]
[40 71]
[41 70]
[42 69]
[43 68]
[44 67]
[45 66]
[48 61]
[49 60]
[50 59]
[51 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
