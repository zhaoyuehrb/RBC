%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 01:33:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAGACCAUUGAGCACUCAACAUAGAGGUAAUAGGUAUUUAAGCUUCUUGAUUUGUAGAUGAAUAUGUCAACUCUAACAAGGGGCUGGCUAAUGCUUG\
) } def
/len { sequence length } bind def

/coor [
[-1.09792817 187.81069946]
[-2.30990696 194.59881592]
[-4.87074947 200.98881531]
[-8.66945171 206.71617126]
[-13.54387379 211.54484558]
[-19.28765678 215.27691650]
[-25.65895271 217.76077271]
[-32.39061737 218.89726257]
[-39.20140076 218.64360046]
[-45.80769730 217.01499939]
[-51.93535995 214.08380127]
[-57.33108521 209.97633362]
[-61.77286530 204.86741638]
[-65.07912445 198.97297668]
[-79.81343842 201.78369141]
[-87.82568359 206.54412842]
[-95.05427551 204.44364929]
[-109.86960602 206.79016113]
[-124.68492889 209.13668823]
[-133.77052307 222.06832886]
[-149.35322571 224.70556641]
[-162.18809509 215.48376465]
[-164.66043091 199.87403870]
[-155.30343628 187.13739014]
[-139.66845703 184.83023071]
[-127.03144073 194.32136536]
[-112.21611786 191.97483826]
[-97.40079498 189.62832642]
[-82.62415314 187.04939270]
[-67.88984680 184.23866272]
[-57.80854034 161.37672424]
[-34.45086670 151.92788696]
[-10.91979504 161.50903320]
[1.74512339 153.47163391]
[14.41004276 145.43423462]
[27.07496071 137.39683533]
[39.73987961 129.35943604]
[52.40480042 121.32202911]
[65.06971741 113.28462982]
[77.73463440 105.24722290]
[80.76739502 87.61505890]
[95.56476593 77.55877686]
[113.07517242 81.22982025]
[125.21042633 72.41304016]
[137.34568787 63.59626389]
[149.48094177 54.77948380]
[161.61619568 45.96270752]
[173.75144958 37.14592743]
[185.88670349 28.32914734]
[198.02195740 19.51236916]
[210.15721130 10.69559097]
[208.24079895 -5.64089775]
[214.73857117 -20.64999580]
[227.81231689 -30.32106209]
[243.88050842 -32.12110138]
[258.59933472 -25.65760994]
[270.45166016 -34.85121536]
[276.61367798 -49.42310333]
[291.41244507 -51.11007309]
[303.26477051 -60.30368042]
[315.11709595 -69.49728394]
[316.84899902 -85.20639038]
[329.23373413 -95.02444458]
[344.92364502 -93.12655640]
[354.61019897 -80.63871765]
[352.54653931 -64.96974182]
[339.95700073 -55.41574860]
[324.31069946 -57.64495850]
[312.45837402 -48.45135498]
[300.60604858 -39.25774765]
[295.29177856 -25.34344673]
[279.64526367 -22.99888992]
[267.79293823 -13.80528450]
[270.53616333 -0.32851398]
[267.15136719 13.07022095]
[258.25143433 23.72935867]
[245.55062866 29.50582314]
[231.53460693 29.20577049]
[218.97398376 22.83084488]
[206.83872986 31.64762497]
[194.70347595 40.46440506]
[182.56822205 49.28118134]
[170.43296814 58.09796143]
[158.29771423 66.91474152]
[146.16246033 75.73152161]
[134.02720642 84.54829407]
[121.89195251 93.36507416]
[122.35839081 104.83549500]
[117.19387054 115.08809662]
[107.69906616 121.54075623]
[96.26525879 122.56837463]
[85.77204132 117.91213989]
[73.10711670 125.94954681]
[60.44219971 133.98695374]
[47.77728271 142.02435303]
[35.11236191 150.06175232]
[22.44744492 158.09915161]
[9.78252506 166.13655090]
[-2.88239360 174.17395020]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 30]
[15 29]
[17 28]
[18 27]
[19 26]
[33 99]
[34 98]
[35 97]
[36 96]
[37 95]
[38 94]
[39 93]
[40 92]
[43 87]
[44 86]
[45 85]
[46 84]
[47 83]
[48 82]
[49 81]
[50 80]
[51 79]
[56 73]
[57 72]
[59 70]
[60 69]
[61 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
