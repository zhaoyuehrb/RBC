%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:27:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGCUGGAGGCUCCAGGACUCCACUGGACAGACCCAGGUCUUCCAGACCUGCUUCCUGAAAUAAACACUGGUGCCAACCAAGA\
) } def
/len { sequence length } bind def

/coor [
[154.42024231 145.62422180]
[141.52325439 137.96475220]
[128.62625122 130.30528259]
[115.72925568 122.64581299]
[102.83226013 114.98635101]
[87.84249878 114.43207550]
[74.41505432 121.11814880]
[60.98760223 127.80422211]
[47.56015396 134.49029541]
[34.13270187 141.17637634]
[32.55363846 156.52272034]
[22.91053963 168.56489563]
[8.28048611 173.46031189]
[-6.66812611 169.64685059]
[-17.16524887 158.34135437]
[-19.86128998 143.15139771]
[-13.89595032 128.92402649]
[-1.17274892 120.19913483]
[14.24838638 119.76081085]
[27.44662857 127.74892426]
[40.87407684 121.06285095]
[54.30152512 114.37677765]
[67.72897339 107.69070435]
[81.15642548 101.00462341]
[85.79167938 86.73877716]
[78.85861969 73.43717194]
[71.92556763 60.13556671]
[64.99250793 46.83396149]
[58.05944824 33.53235626]
[51.15257645 27.18254280]
[51.12627029 19.60865784]
[44.68946075 6.05994987]
[38.25265121 -7.48875809]
[31.81584167 -21.03746605]
[18.01538658 -29.89632797]
[19.05733299 -46.26234055]
[33.86981583 -53.29955292]
[47.21502304 -43.76868439]
[45.36455154 -27.47427559]
[51.80136108 -13.92556667]
[58.23816681 -0.37685907]
[64.67498016 13.17184925]
[71.36105347 26.59929848]
[78.29411316 39.90090179]
[85.22717285 53.20250702]
[92.16022491 66.50411224]
[99.09328461 79.80571747]
[105.71798706 82.60441589]
[110.31747437 87.24195099]
[112.52685547 92.68848419]
[112.42815399 97.91934204]
[110.49172211 102.08934784]
[123.38872528 109.74881744]
[136.28572083 117.40828705]
[149.18272400 125.06775665]
[162.07971191 132.72721863]
[169.31336975 126.01393127]
[177.84696960 121.07729340]
[187.25318909 118.15928650]
[197.06213379 117.40093231]
[206.78488159 118.83549500]
[215.93780518 122.38703156]
[224.06660461 127.87442780]
[230.76893616 135.02058411]
[235.71424866 143.46646118]
[238.66011047 152.78907776]
[239.46411133 162.52270508]
[238.09072876 172.18211365]
[234.61282349 181.28680420]
[229.20788574 189.38490295]
[238.89680481 200.83587646]
[248.58573914 212.28684998]
[258.27465820 223.73782349]
[273.88229370 228.77110291]
[277.06213379 244.85900879]
[264.54306030 255.45167542]
[249.20359802 249.65228271]
[246.82368469 233.42675781]
[237.13476562 221.97578430]
[227.44583130 210.52479553]
[217.75691223 199.07382202]
[197.32217407 205.14109802]
[176.38890076 200.79856873]
[159.95796204 187.02319336]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 56]
[2 55]
[3 54]
[4 53]
[5 52]
[6 24]
[7 23]
[8 22]
[9 21]
[10 20]
[25 47]
[26 46]
[27 45]
[28 44]
[29 43]
[31 42]
[32 41]
[33 40]
[34 39]
[70 81]
[71 80]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
