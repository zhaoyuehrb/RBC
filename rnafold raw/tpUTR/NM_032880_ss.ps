%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 13:05:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCACCCGCCCCGGCCACUCCAUCAGGCACUGACAUCUCCACGACCGGUUUUCAUUUCUUUUCUAAACUAUUUCCAGUCUUGUUCUUAGUCUCUUUCCAUCUGUGUCUUGGCUUCUUCAGUCGGUUUAAUUAAAACAAACAGAACAAUUUUCCCCA\
) } def
/len { sequence length } bind def

/coor [
[107.02300262 135.18409729]
[100.13747406 138.15724182]
[96.30322266 152.65890503]
[92.46897125 167.16058350]
[97.28569794 182.83639526]
[85.92177582 194.65982056]
[70.06743622 190.46792603]
[66.03226471 174.57298279]
[77.96730042 163.32633972]
[81.80155182 148.82466125]
[85.63579559 134.32298279]
[71.62993622 117.64667511]
[70.44243622 98.17872620]
[79.91805267 83.77604675]
[71.49173737 71.36648560]
[63.06541824 58.95692444]
[54.63910294 46.54736710]
[46.21278381 34.13780594]
[43.08201981 48.80744553]
[31.35801315 58.16413498]
[16.35935783 57.96321487]
[4.89019585 48.29582977]
[2.15350938 33.54759216]
[9.39079666 20.40903473]
[23.31886292 14.84046650]
[37.62075424 19.36921501]
[30.99757195 5.91063309]
[24.37438965 -7.54794979]
[17.75120735 -21.00653267]
[11.12802505 -34.46511459]
[4.50484276 -47.92369843]
[-4.72786331 -54.49535751]
[-5.81116819 -64.49787903]
[-14.96229553 -76.38303375]
[-24.11342239 -88.26818848]
[-39.98146820 -84.78916168]
[-55.72491074 -88.55200195]
[-68.21485901 -98.75687408]
[-74.99168396 -113.32886505]
[-74.74933624 -129.33967590]
[-67.58671570 -143.59609985]
[-76.97233582 -155.29695129]
[-91.64275360 -161.22059631]
[-93.57077026 -175.98988342]
[-102.95639038 -187.69073486]
[-112.34201050 -199.39160156]
[-127.01242828 -205.31523132]
[-128.94044495 -220.08453369]
[-138.32606506 -231.78538513]
[-151.93576050 -225.31443787]
[-166.67102051 -222.15710449]
[-181.73721313 -222.48367310]
[-196.32182312 -226.27651978]
[-209.63833618 -233.33111572]
[-220.96859741 -243.26699829]
[-229.70158386 -255.54835510]
[-235.36634827 -269.51284790]
[-237.65737915 -284.40740967]
[-236.45112610 -299.42877197]
[-231.81265259 -313.76687622]
[-223.99209595 -326.64849854]
[-213.41120911 -337.37890625]
[-200.64060974 -345.37942505]
[-186.36900330 -350.21862793]
[-171.36604309 -351.63555908]
[-156.44079590 -349.55374146]
[-142.39819336 -344.08547974]
[-129.99549866 -335.52569580]
[-119.90161133 -324.33593750]
[-112.66086578 -311.11975098]
[-108.66374207 -296.58978271]
[-108.12580109 -281.52966309]
[-111.07605743 -266.75152588]
[-117.35540771 -253.05239868]
[-126.62521362 -241.17100525]
[-117.23959351 -229.47015381]
[-103.24049377 -224.38343811]
[-100.64115143 -208.77722168]
[-91.25553131 -197.07635498]
[-81.86991119 -185.37550354]
[-67.87081909 -180.28878784]
[-65.27147675 -164.68257141]
[-55.88585281 -152.98171997]
[-42.51076508 -156.77151489]
[-28.65891457 -155.16218567]
[-16.43314362 -148.36466980]
[-7.70215845 -137.38008118]
[-3.81492710 -123.85233307]
[-5.39233303 -109.82216644]
[-12.22826958 -97.41931152]
[-3.07714200 -85.53415680]
[6.07398510 -73.64900970]
[6.50011730 -88.64295197]
[13.60209656 -101.85514069]
[25.87299156 -110.48213959]
[40.70910263 -112.69343567]
[54.96242905 -108.01982880]
[65.60863495 -97.45298004]
[70.38875580 -83.23501587]
[68.28851318 -68.38277435]
[59.75356293 -56.04768372]
[46.59487915 -48.84705353]
[31.60454178 -48.30875397]
[17.96342659 -54.54688263]
[24.58660889 -41.08829880]
[31.20979118 -27.62971497]
[37.83297348 -14.17113209]
[44.45615387 -0.71254951]
[51.07933807 12.74603367]
[58.62234497 25.71148872]
[67.04866028 38.12104797]
[75.47497559 50.53060913]
[83.90129852 62.94017029]
[92.32761383 75.34973145]
[112.67185974 73.23452759]
[130.96861267 87.46163177]
[134.83259583 113.08007050]
[148.01721191 120.23308563]
[161.20184326 127.38610077]
[177.02153015 127.16606140]
[184.51881409 140.03617859]
[197.70344543 147.18919373]
[212.68443298 142.92216492]
[225.95362854 150.36416626]
[229.92926025 164.67254639]
[243.11387634 171.82556152]
[256.29852295 178.97857666]
[269.48312378 186.13159180]
[285.21096802 182.96690369]
[297.39813232 193.40013123]
[296.69570923 209.42779541]
[283.64251709 218.75485229]
[268.25186157 214.22636414]
[262.33013916 199.31622314]
[249.14549255 192.16320801]
[235.96087646 185.01019287]
[222.77624512 177.85717773]
[208.61389160 182.32524109]
[195.14091492 175.25888062]
[190.55043030 160.37380981]
[177.36579895 153.22080994]
[162.48918152 153.95246887]
[154.04882812 140.57072449]
[140.86421204 133.41770935]
[127.67958069 126.26470184]
[120.79405212 129.23783875]
[128.93531799 141.83624268]
[137.07658386 154.43464661]
[145.21783447 167.03305054]
[156.95744324 176.37016296]
[160.10699463 191.03578186]
[153.23616028 204.36962891]
[139.46525574 210.31625366]
[125.04824066 206.17504883]
[116.53247833 193.82669067]
[117.78580475 178.87806702]
[114.19820404 164.31341553]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 11]
[3 10]
[4 9]
[14 114]
[15 113]
[16 112]
[17 111]
[18 110]
[26 109]
[27 108]
[28 107]
[29 106]
[30 105]
[31 104]
[33 92]
[34 91]
[35 90]
[41 83]
[42 82]
[44 80]
[45 79]
[46 78]
[48 76]
[49 75]
[117 145]
[118 144]
[119 143]
[121 141]
[122 140]
[125 137]
[126 136]
[127 135]
[128 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
