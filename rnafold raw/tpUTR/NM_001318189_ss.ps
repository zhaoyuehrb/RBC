%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 15:49:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGUUUCCAGAAGAAUCUAUGGGAUUUUCCCCCCACUGGUCUGCAUAAAAGAAAAUAAAAUGACAUAAAAGGGAGCACUCAAGCAUUCCGUUGCC\
) } def
/len { sequence length } bind def

/coor [
[23.62425804 117.61977386]
[8.75258541 119.57766724]
[-6.11908770 121.53556061]
[-12.38566971 130.72412109]
[-22.51105499 134.75979614]
[-32.94604111 132.49485779]
[-40.17976379 124.94502258]
[-55.14764786 125.92607117]
[-70.11553192 126.90711975]
[-85.08341217 127.88816833]
[-73.83037567 137.80628967]
[-69.50379944 152.16876221]
[-73.40604401 166.65228271]
[-84.36247253 176.89710999]
[-99.07506561 179.81941223]
[-113.11510468 174.53952026]
[-122.25634766 162.64675903]
[-123.74715424 147.72102356]
[-117.13877106 134.25517273]
[-104.42043304 126.30261993]
[-119.02858734 122.89647675]
[-133.63674927 119.49033356]
[-148.24490356 116.08419037]
[-159.88940430 126.34017944]
[-175.34143066 127.75946045]
[-188.65936279 119.79628754]
[-194.72219849 105.51267242]
[-191.19863892 90.40095520]
[-179.44357300 80.27188873]
[-163.97705078 79.02031708]
[-150.74627686 87.12748718]
[-144.83876038 101.47603607]
[-130.23060608 104.88217926]
[-115.62244415 108.28832245]
[-101.01428986 111.69446564]
[-86.06446075 112.92028046]
[-71.09658051 111.93923950]
[-56.12869263 110.95819092]
[-41.16080856 109.97714233]
[-26.13187027 97.99703217]
[-8.07698059 106.66388702]
[6.79469252 104.70599365]
[21.66636467 102.74810028]
[21.96172905 92.66933441]
[23.54850197 82.71188354]
[26.40042686 73.04052734]
[30.47031021 63.81529999]
[35.69079971 55.18887329]
[41.97550201 47.30400085]
[49.22042084 40.29116821]
[57.30566025 34.26641846]
[66.09742737 29.32945633]
[75.45022583 25.56197929]
[85.20928192 23.02633476]
[95.21310425 21.76448441]
[105.29614258 21.79730606]
[115.29153442 23.12425995]
[125.03388214 25.72338676]
[134.36195374 29.55167389]
[143.12138367 34.54576874]
[151.16723633 40.62302780]
[158.36634827 47.68288422]
[164.59957886 55.60850525]
[169.76379395 64.26873779]
[173.77352905 73.52026367]
[176.56242371 83.20998383]
[178.08435059 93.17755890]
[178.31408691 103.25802612]
[177.24784851 113.28458405]
[174.90328979 123.09130859]
[171.31918335 132.51589966]
[184.30957031 140.01589966]
[197.29995728 147.51589966]
[210.29032898 155.01589966]
[223.40168762 162.30235291]
[236.63050842 169.37330627]
[251.67961121 164.54629517]
[265.69573975 171.84860229]
[270.36337280 186.94790649]
[262.91326904 200.88604736]
[247.76547241 205.39376831]
[233.90687561 197.79673767]
[229.55955505 182.60212708]
[216.33073425 175.53117371]
[208.80201721 175.14715576]
[202.79032898 168.00628662]
[189.79995728 160.50628662]
[176.80957031 153.00628662]
[163.81918335 145.50628662]
[148.33146667 161.70719910]
[128.89193726 172.86265564]
[107.09005737 178.06050110]
[84.70846558 176.87573242]
[63.57717896 169.40524292]
[45.42399979 156.25984192]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 43]
[2 42]
[3 41]
[7 39]
[8 38]
[9 37]
[10 36]
[20 35]
[21 34]
[22 33]
[23 32]
[71 89]
[72 88]
[73 87]
[74 86]
[75 84]
[76 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
