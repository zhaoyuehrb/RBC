%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 16:09:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGCCACAGACCUGGGACACCUCAGCCAGCUUGCCCACCCUCCACCUUUGCCCAAUUUCAGAUAUUUGAGCAUUUUGUUAAAAUAAAACAUUUUUAGGAGUU\
) } def
/len { sequence length } bind def

/coor [
[6.21482277 157.98135376]
[-7.06701756 164.95220947]
[-20.34885788 171.92304993]
[-33.52390289 179.09370422]
[-46.58914185 186.46252441]
[-45.58205414 197.39817810]
[-48.34925079 207.98571777]
[-54.53443909 216.96627808]
[-63.37657547 223.28137207]
[-73.80342102 226.19760132]
[-84.56152344 225.39181519]
[-94.36693573 220.98660278]
[-102.05840302 213.53260803]
[-115.91660309 219.27287292]
[-129.77479553 225.01312256]
[-143.63298035 230.75337219]
[-157.49118042 236.49362183]
[-167.03964233 249.82624817]
[-183.33158875 247.95428467]
[-189.60726929 232.80345154]
[-179.41079712 219.95962524]
[-163.23143005 222.63542175]
[-149.37322998 216.89517212]
[-135.51504517 211.15492249]
[-121.65685272 205.41467285]
[-107.79866028 199.67442322]
[-104.74214935 180.55230713]
[-90.84516144 166.86633301]
[-71.40175629 164.06283569]
[-53.95796204 173.39727783]
[-40.89271927 166.02847290]
[-36.54049301 159.89894104]
[-27.31970596 158.64122009]
[-14.03786564 151.67036438]
[-0.75602484 144.69952393]
[-0.77797723 132.37251282]
[4.53463507 121.16838837]
[14.20567799 113.29195404]
[26.39475250 110.32284546]
[38.74726868 112.89906311]
[48.84926224 120.58113861]
[62.52775955 114.42494202]
[76.20626068 108.26875305]
[89.88475800 102.11256409]
[87.27037048 98.57572937]
[86.09875488 93.64585876]
[86.95732880 87.94540405]
[90.16668701 82.31407166]
[95.70803070 77.69789886]
[103.19490051 75.01655579]
[111.33913422 62.42007065]
[119.48336792 49.82358551]
[120.47863770 34.03371429]
[133.88641357 27.54674911]
[142.03065491 14.95026302]
[150.17488098 2.35377765]
[143.10322571 -11.28026772]
[143.81204224 -26.62279510]
[152.11067200 -39.54674149]
[165.76681519 -46.57563019]
[181.10704041 -45.81872559]
[194.00491333 -37.47962952]
[200.99096680 -23.80151939]
[200.18597412 -8.46373749]
[191.80650330 4.40793037]
[178.10655212 11.35107040]
[162.77137756 10.49801254]
[154.62713623 23.09449768]
[146.48291016 35.69098282]
[146.07015991 50.57986832]
[132.07984924 57.96781921]
[123.93562317 70.56430817]
[115.79138184 83.16078949]
[126.07485199 72.24061584]
[141.02635193 71.03524780]
[152.92637634 80.16703033]
[155.63092041 94.92119598]
[147.74363708 107.68013763]
[133.33673096 111.85639191]
[119.84712219 105.29223633]
[131.92889404 114.18217468]
[144.01065063 123.07210541]
[156.09242249 131.96203613]
[168.17419434 140.85197449]
[182.91911316 136.01803589]
[197.67897034 140.80616760]
[206.77828979 153.37525940]
[206.71821594 168.89221191]
[197.52183533 181.39045715]
[182.72534180 186.06416321]
[168.01829529 181.11618042]
[159.05584717 168.44912720]
[159.28425598 152.93373108]
[147.20248413 144.04380798]
[135.12072754 135.15386963]
[123.03895569 126.26393890]
[110.95719147 117.37400818]
[96.04094696 115.79106140]
[82.36244965 121.94725037]
[68.68395233 128.10343933]
[55.00545502 134.25962830]
[51.93994522 151.98764038]
[39.04813766 164.31343079]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[3 33]
[4 31]
[5 30]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[41 101]
[42 100]
[43 99]
[44 98]
[50 73]
[51 72]
[52 71]
[54 69]
[55 68]
[56 67]
[80 97]
[81 96]
[82 95]
[83 94]
[84 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
