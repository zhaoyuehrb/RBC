%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 01:37:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGCAUGACUUUUGAGGAAGUGUAUUAAACCUGUAUGUGAAAUCAGGUCCUAAUACUGACAAGCAGUUUGUCUGUU\
) } def
/len { sequence length } bind def

/coor [
[103.05168915 299.35342407]
[112.97526550 287.05307007]
[111.14385223 272.16531372]
[109.31243896 257.27752686]
[107.48102570 242.38975525]
[103.42422485 235.95578003]
[105.89136505 226.85893250]
[104.66873169 211.90884399]
[103.44609070 196.95875549]
[102.22344971 182.00866699]
[100.69610596 167.08663940]
[98.86469269 152.19885254]
[97.03327179 137.31108093]
[95.20185852 122.42330170]
[84.84252167 117.20690155]
[78.36105347 107.58831024]
[77.41565704 96.02833557]
[82.24821472 85.48446655]
[91.62236786 78.65423584]
[91.01053619 63.66671371]
[90.39870453 48.67919922]
[89.78688049 33.69168091]
[89.17504883 18.70416451]
[76.33721924 12.77484608]
[67.39723206 1.90468454]
[64.08909607 -11.70656872]
[67.01467896 -25.33690071]
[75.53511810 -36.28637695]
[87.90924835 -42.41194534]
[87.90924835 -57.41194534]
[87.90924835 -72.41194153]
[87.90924835 -87.41194153]
[87.90924835 -102.41194153]
[84.70883179 -111.27742767]
[88.22770691 -118.02065277]
[88.83953857 -133.00816345]
[79.06864166 -145.73252869]
[83.06459808 -161.26995850]
[97.76205444 -167.70147705]
[111.88636780 -160.09338379]
[114.60258484 -144.28193665]
[103.82704926 -132.39634705]
[103.21522522 -117.40882111]
[102.90924835 -102.41194153]
[102.90924835 -87.41194153]
[102.90924835 -72.41194153]
[102.90924835 -57.41194534]
[102.90924835 -42.41194534]
[117.00358582 -34.78108597]
[125.44416046 -21.04705048]
[125.89099884 -4.83990765]
[118.13156891 9.50176907]
[104.16256714 18.09233475]
[104.77439880 33.07985306]
[105.38622284 48.06736755]
[105.99805450 63.05488586]
[106.60987854 78.04240417]
[120.33396912 89.40016937]
[121.78599548 107.15519714]
[110.08963776 120.59188843]
[111.92105103 135.47966003]
[113.75246429 150.36744690]
[115.58388519 165.25521851]
[119.84277344 173.66362000]
[117.17353821 180.78602600]
[118.39617920 195.73611450]
[119.61882019 210.68620300]
[120.84145355 225.63629150]
[122.36879730 240.55833435]
[124.20021820 255.44612122]
[126.03163147 270.33389282]
[127.86304474 285.22167969]
[140.47189331 294.75018311]
[142.56724548 310.41494751]
[132.90596008 322.92236328]
[117.21990967 324.85195923]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 72]
[3 71]
[4 70]
[5 69]
[7 68]
[8 67]
[9 66]
[10 65]
[11 63]
[12 62]
[13 61]
[14 60]
[19 57]
[20 56]
[21 55]
[22 54]
[23 53]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
[35 43]
[36 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
