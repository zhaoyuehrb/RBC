%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 10:19:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAAGACACGCUGAAAUGGUUCAGGCUGCUCCUGUGUUGGAAAUUUGACCAUUAAAAUUCUCCCAAUAAAGCUUUACAGCCUUCUGCAA\
) } def
/len { sequence length } bind def

/coor [
[112.18707275 198.90988159]
[122.34050751 186.79859924]
[120.78974915 171.87896729]
[119.23899078 156.95935059]
[117.68822479 142.03971863]
[116.13746643 127.12010193]
[109.89247131 122.96678925]
[105.85199738 137.41236877]
[90.86486816 138.03355408]
[85.64282990 123.97189331]
[97.40247345 114.66016388]
[91.15747833 110.50685883]
[76.79868317 114.84563446]
[62.43988800 119.18441772]
[48.08109283 123.52320099]
[33.72230148 127.86198425]
[22.89969254 140.18283081]
[6.87341404 136.70570374]
[2.12992620 121.00756073]
[13.54892159 109.23731995]
[29.38351822 113.50318909]
[43.74231339 109.16440582]
[58.10110474 104.82562256]
[72.45989990 100.48684692]
[86.81869507 96.14806366]
[98.70584869 86.99953461]
[106.57641602 74.23026276]
[114.44698334 61.46099854]
[122.31755066 48.69173050]
[114.90767670 32.34187698]
[118.60104370 14.93320751]
[131.78051758 3.20584750]
[149.19287109 1.58913255]
[156.16371155 -11.69270802]
[155.72593689 -27.50785637]
[168.49163818 -35.18159485]
[175.46247864 -48.46343231]
[182.43333435 -61.74527359]
[189.40417480 -75.02711487]
[196.37503052 -88.30895233]
[203.34587097 -101.59079742]
[201.42562866 -121.51209259]
[217.82141113 -131.51710510]
[223.85932922 -145.24821472]
[229.89723206 -158.97933960]
[235.93513489 -172.71046448]
[241.97305298 -186.44158936]
[234.03671265 -199.77552795]
[235.48712158 -215.22467041]
[245.76654053 -226.84849548]
[260.92233276 -230.17739868]
[275.12677002 -223.93135071]
[282.91799927 -210.51208496]
[281.30007935 -195.07958984]
[270.89517212 -183.56796265]
[255.70416260 -180.40367126]
[249.66625977 -166.67254639]
[243.62835693 -152.94143677]
[237.59043884 -139.21031189]
[231.55253601 -125.47919464]
[236.18270874 -116.07765961]
[234.72702026 -105.47499084]
[227.43798828 -97.33786011]
[216.62771606 -94.61994934]
[209.65686035 -81.33810425]
[202.68601990 -68.05626678]
[195.71516418 -54.77442551]
[188.74432373 -41.49258423]
[181.77346802 -28.21074486]
[182.70985413 -13.34560299]
[169.44555664 -4.72186041]
[162.47471619 8.55998039]
[169.51930237 18.73960876]
[171.49449158 31.03442955]
[167.95153809 43.04837418]
[159.52339172 52.41254807]
[147.81259155 57.25229263]
[135.08682251 56.56229782]
[127.21624756 69.33156586]
[119.34568024 82.10083008]
[111.47511292 94.87010193]
[131.05709839 125.56934357]
[132.60784912 140.48896790]
[134.15861511 155.40858459]
[135.70936584 170.32821655]
[137.26013184 185.24783325]
[149.68731689 195.01206970]
[151.48733521 210.71351624]
[141.59225464 223.03678894]
[125.87265778 224.67070007]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 86]
[3 85]
[4 84]
[5 83]
[6 82]
[12 25]
[13 24]
[14 23]
[15 22]
[16 21]
[26 81]
[27 80]
[28 79]
[29 78]
[33 72]
[34 71]
[36 69]
[37 68]
[38 67]
[39 66]
[40 65]
[41 64]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
