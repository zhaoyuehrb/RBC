%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:40:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUCUCUAGAGGUCCGCCACUGAAAAGUCAUCAAUCAUACAGUCAGUGAAUUCUACACCAACAGGUUAAAACCAUGAAAAUAAAAUCAACCUGAAUCGAAAGG\
) } def
/len { sequence length } bind def

/coor [
[64.31319427 144.93197632]
[56.90509415 137.88482666]
[50.86536026 129.63475037]
[46.38576126 120.44369507]
[43.60853958 110.60350800]
[42.62187576 100.42663574]
[43.45709610 90.23622131]
[29.13628387 85.77367401]
[14.81547165 81.31112671]
[0.49465874 76.84857941]
[-13.82615471 72.38603210]
[-21.01694107 79.44828033]
[-30.27038383 83.29245758]
[-40.23128510 83.40297699]
[-49.45843124 79.80765533]
[-56.63312149 73.06732178]
[-60.74758911 64.18880463]
[-61.24645233 54.47471619]
[-74.92494965 48.31852341]
[-88.60344696 42.16233444]
[-102.28194427 36.00614166]
[-115.96044159 29.84994888]
[-129.63894653 23.69375610]
[-139.61819458 35.04743195]
[-152.50152588 42.95383835]
[-167.14334106 46.70994949]
[-182.24172974 45.98176575]
[-196.45413208 40.83404541]
[-208.51679993 31.72451401]
[-217.35711670 19.46318817]
[-222.18902588 5.14033556]
[-222.58285522 -9.97046566]
[-218.50361633 -24.52557182]
[-210.31399536 -37.23075485]
[-198.74223328 -46.95627594]
[-184.81727600 -52.83735275]
[-169.77732849 -54.35103989]
[-154.95971680 -51.36274338]
[-141.68203735 -44.13817596]
[-131.12490845 -33.31974792]
[-124.22706604 -19.86942482]
[-121.60186768 -4.98319769]
[-123.48274994 10.01525879]
[-109.80425262 16.17145157]
[-96.12575531 22.32764244]
[-82.44725037 28.48383522]
[-68.76875305 34.64002609]
[-55.09025955 40.79621887]
[-36.90639877 31.79514503]
[-17.59850121 38.90122223]
[-9.36360836 58.06522369]
[4.95720434 62.52776718]
[19.27801704 66.99031067]
[33.59883118 71.45285797]
[47.91964340 75.91540527]
[59.90138245 58.95694733]
[77.13412476 47.37317276]
[97.36121368 42.68099594]
[117.93384552 45.49487686]
[136.15800476 55.44632721]
[149.64720154 71.23218536]
[156.63496399 90.78524780]
[171.62812805 90.33220673]
[186.62127686 89.87915802]
[201.61444092 89.42610931]
[216.60758972 88.97306824]
[231.60075378 88.52001953]
[235.40342712 73.90097809]
[243.17190552 60.94615936]
[254.27644348 50.70574951]
[267.81683350 44.00989151]
[282.69540405 41.40139008]
[297.70605469 43.09170532]
[311.63192749 48.94381332]
[323.34408569 58.48330307]
[331.89309692 70.93685913]
[336.58593750 85.29492188]
[337.04217529 100.39354706]
[333.22482300 115.00875854]
[325.44332886 127.95577240]
[314.32852173 138.18502808]
[300.78140259 144.86727905]
[285.90020752 147.46083069]
[270.89126587 145.75543213]
[256.97128296 139.88934326]
[245.26870728 130.33808899]
[236.73220825 117.87594604]
[232.05380249 103.51317596]
[217.06063843 103.96622467]
[202.06748962 104.41926575]
[187.07432556 104.87231445]
[172.08117676 105.32536316]
[157.08801270 105.77840424]
[155.15611267 115.81882477]
[151.47286987 125.35695648]
[146.15524292 134.08995056]
[139.37208557 141.74050903]
[131.33877563 148.06570435]
[122.31039429 152.86471558]
[112.57359314 155.98513794]
[102.43756104 157.32791138]
[92.22412872 156.85038757]
[82.25759888 154.56773376]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 55]
[8 54]
[9 53]
[10 52]
[11 51]
[18 48]
[19 47]
[20 46]
[21 45]
[22 44]
[23 43]
[62 93]
[63 92]
[64 91]
[65 90]
[66 89]
[67 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
