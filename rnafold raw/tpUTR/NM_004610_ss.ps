%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 08:32:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGGAGGCCAGGCGUUUCUAGCAUUGUUGACUGCCAGUUUAUUCCCAGUAAAUAAAGCAAUACGCUUUUCAGGAGGAAG\
) } def
/len { sequence length } bind def

/coor [
[122.68925476 291.91290283]
[119.23001862 277.31723022]
[115.77077484 262.72155762]
[112.31153870 248.12588501]
[108.85230255 233.53021240]
[105.39306641 218.93453979]
[101.93382263 204.33886719]
[99.31968689 202.75381470]
[97.26779175 199.90124512]
[96.32125092 196.02809143]
[96.90692139 191.59492493]
[99.25682068 187.22216797]
[98.09443665 172.26727295]
[96.93205261 157.31237793]
[95.76966095 142.35748291]
[94.60727692 127.40259552]
[83.31665802 122.39753723]
[75.28852081 113.01255798]
[72.09281158 101.08292389]
[74.35446167 88.94152069]
[81.63118744 78.96264648]
[92.50000000 73.09770203]
[92.50000000 58.09770203]
[84.76270294 44.29752731]
[92.50000000 31.57025528]
[92.50000000 16.57025528]
[92.50000000 1.57025611]
[92.50000000 -13.42974377]
[92.50000000 -28.42974472]
[84.76270294 -42.22991562]
[92.50000000 -54.95718765]
[92.50000000 -69.95719147]
[92.50000000 -84.95719147]
[92.50000000 -99.95719147]
[78.72612762 -106.53314972]
[69.17620850 -118.43952179]
[65.74636841 -133.31228638]
[69.11760712 -148.19842529]
[78.62057495 -160.14231873]
[92.36843872 -166.77247620]
[107.63156128 -166.77247620]
[121.37942505 -160.14231873]
[130.88238525 -148.19842529]
[134.25363159 -133.31228638]
[130.82379150 -118.43952179]
[121.27387238 -106.53314972]
[107.50000000 -99.95719147]
[107.50000000 -84.95719147]
[107.50000000 -69.95719147]
[107.50000000 -54.95718765]
[115.23729706 -42.22991562]
[107.50000000 -28.42974472]
[107.50000000 -13.42974377]
[107.50000000 1.57025611]
[107.50000000 16.57025528]
[107.50000000 31.57025528]
[115.23729706 44.29752731]
[107.50000000 58.09770203]
[107.50000000 73.09770203]
[121.91066742 82.68218994]
[127.90718842 98.91707611]
[123.18677521 115.56782532]
[109.56217194 126.24021149]
[110.72455597 141.19509888]
[111.88694763 156.14999390]
[113.04933167 171.10488892]
[114.21171570 186.05978394]
[116.52949524 200.87963867]
[119.98873901 215.47531128]
[123.44797516 230.07098389]
[126.90721130 244.66665649]
[130.36645508 259.26232910]
[133.82568359 273.85800171]
[137.28492737 288.45367432]
[151.33944702 295.30966187]
[157.65164185 309.61663818]
[153.24107361 324.61935425]
[140.19027710 333.23391724]
[124.66145325 331.39285278]
[113.98682404 319.96539307]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 74]
[2 73]
[3 72]
[4 71]
[5 70]
[6 69]
[7 68]
[12 67]
[13 66]
[14 65]
[15 64]
[16 63]
[22 59]
[23 58]
[25 56]
[26 55]
[27 54]
[28 53]
[29 52]
[31 50]
[32 49]
[33 48]
[34 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
