%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 10:21:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGACGUUUUCUACGUAGCUUUUGUAUUUUUUUUUUUAAUUUGAAGGAACACUGAUGAAGCCCUGCCAUACCCCUCCCGAGUCUAAUAAAACGUAUAAUCACAA\
) } def
/len { sequence length } bind def

/coor [
[123.88360596 166.92094421]
[115.74682617 154.31964111]
[109.23669434 140.80601501]
[104.45384979 126.58897400]
[101.47132111 111.88164520]
[92.36931610 123.80446625]
[83.26731110 135.72727966]
[74.16531372 147.65010071]
[74.86494446 163.67788696]
[62.67594528 174.10899353]
[46.94867706 170.94155884]
[39.74775314 156.60537720]
[46.59710312 142.09793091]
[62.24249649 138.54809570]
[71.34449768 126.62527466]
[80.44650269 114.70246124]
[89.54850006 102.77964783]
[89.35139465 101.15175629]
[89.40387726 99.52862549]
[79.27912903 88.46112061]
[69.15438843 77.39362335]
[59.02964401 66.32612610]
[48.90489578 55.25862503]
[34.89173126 60.99068451]
[19.79129982 61.58142853]
[5.42688322 56.97884750]
[-6.47371578 47.75681686]
[-14.48599339 35.04364014]
[-17.65924835 20.38400459]
[-15.62935352 5.55131674]
[-8.66042614 -7.66682816]
[-18.78517151 -18.73432732]
[-28.90991592 -29.80182648]
[-39.03466034 -40.86932373]
[-49.15940475 -51.93682480]
[-59.28415298 -63.00432205]
[-69.40889740 -74.07182312]
[-85.20672607 -74.52371979]
[-95.99703979 -86.07121277]
[-95.37814331 -101.86338043]
[-83.71720886 -112.53100586]
[-67.93247223 -111.74517822]
[-57.38872910 -99.97211456]
[-58.34139633 -84.19657135]
[-48.21665192 -73.12906647]
[-38.09190750 -62.06156921]
[-27.96716309 -50.99407196]
[-17.84241676 -39.92657089]
[-7.71767235 -28.85907173]
[2.40707278 -17.79157257]
[16.19181633 -23.55925560]
[31.14615822 -24.26404953]
[45.46611404 -19.80161476]
[57.41761780 -10.69210815]
[65.54649353 1.98036027]
[68.85539246 16.69672585]
[66.92612457 31.68505096]
[59.97239685 45.13388062]
[70.09714508 56.20138168]
[80.22188568 67.26888275]
[90.34663391 78.33638000]
[100.47137451 89.40387726]
[102.13502502 74.49642181]
[105.63574219 59.91064072]
[110.91942596 45.87202454]
[117.90438080 32.59759903]
[126.48262787 20.29257584]
[136.52156067 9.14718151]
[147.86598206 -0.66628474]
[160.34051514 -8.99611473]
[173.75230408 -15.71353531]
[187.89404297 -20.71470070]
[202.54707336 -23.92229462]
[217.48487854 -25.28673172]
[232.47654724 -24.78692055]
[247.29031372 -22.43058395]
[261.69717407 -18.25415230]
[275.47439575 -12.32218838]
[288.40899658 -4.72639656]
[300.30102539 4.41579819]
[310.96661377 14.96306515]
[320.24093628 26.75234985]
[327.98056030 39.60140228]
[334.06588745 53.31158066]
[338.40277100 67.67093658]
[340.92425537 82.45749664]
[341.59130859 97.44265747]
[340.39361572 112.39476013]
[337.34970093 127.08267212]
[332.50662231 141.27931213]
[325.93927002 154.76521301]
[317.74911499 167.33190918]
[308.06283569 178.78511047]
[297.03015137 188.94776917]
[284.82159424 197.66278076]
[271.62591553 204.79541016]
[257.64712524 210.23538208]
[243.10131836 213.89862061]
[228.21334839 215.72848511]
[213.21337891 215.69668579]
[198.33331299 213.80372620]
[183.80316162 210.07885742]
[169.84754944 204.57965088]
[156.68225098 197.39114380]
[144.51075745 188.62446594]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 17]
[6 16]
[7 15]
[8 14]
[19 62]
[20 61]
[21 60]
[22 59]
[23 58]
[31 50]
[32 49]
[33 48]
[34 47]
[35 46]
[36 45]
[37 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
