%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 07:12:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUGAAACCACAGGCAGCCCAGCCCUCCUCUGUCAACAUCAAAGAGCACAUUUACCAGUAUAGCUUGCAUAGUCAAUAUUUGGUAUUUCAAUAAAAGUAAAGACUGUAUCUUUUUA\
) } def
/len { sequence length } bind def

/coor [
[131.76924133 214.01486206]
[130.49470520 198.24720764]
[134.68132019 182.96447754]
[143.84460449 170.00410461]
[135.22279358 157.72956848]
[126.60099030 145.45503235]
[117.97917938 133.18048096]
[109.35736847 120.90594482]
[113.68354034 135.26853943]
[105.99752045 148.14973450]
[91.30332947 151.16316223]
[79.16768646 142.34692383]
[77.49155426 127.44086456]
[87.36579132 116.14983368]
[74.44248199 123.76482391]
[61.51916885 131.37980652]
[57.80751038 146.74206543]
[44.27684784 154.90887451]
[28.95468521 151.03500366]
[20.93138695 137.41876221]
[24.96703720 122.13841248]
[38.66735077 114.25952148]
[53.90417862 118.45649719]
[66.82749176 110.84151459]
[79.75080109 103.22652435]
[79.45136261 95.73250580]
[66.17189026 88.75714874]
[78.85249329 80.74446106]
[78.55305481 73.25044250]
[65.06337738 66.69083405]
[51.57369232 60.13122559]
[38.08401108 53.57161331]
[25.79875183 62.70019531]
[10.67663765 65.06245422]
[-3.80738068 60.11555099]
[-14.32498169 48.99626160]
[-18.45929718 34.25970459]
[-15.26029205 19.29224396]
[-5.46307516 7.53328419]
[8.68102646 1.68495178]
[23.92180061 3.09115028]
[36.75703049 11.42874527]
[44.23727036 24.78181839]
[44.64361954 40.08193207]
[58.13330078 46.64154053]
[71.62298584 53.20115280]
[85.11266327 59.76076126]
[73.35895538 50.44141006]
[70.88873291 35.64620972]
[78.97737122 23.01395226]
[93.44869232 19.06670380]
[106.83112335 25.84243393]
[112.21528625 39.84281921]
[106.81994629 53.84095383]
[115.11194611 41.34124374]
[123.40394592 28.84153557]
[131.69595337 16.34182739]
[139.98794556 3.84211874]
[148.27995300 -8.65758991]
[156.40483093 -21.26656914]
[164.36114502 -33.98258591]
[172.31745911 -46.69860458]
[172.48829651 -65.05237579]
[188.18428040 -72.77759552]
[195.79927063 -85.70090485]
[203.41426086 -98.62422180]
[200.80796814 -114.45415497]
[211.66583252 -126.26458740]
[227.65861511 -124.99556732]
[236.51803589 -111.62057495]
[231.44789124 -96.39976501]
[216.33757019 -91.00923157]
[208.72257996 -78.08592224]
[201.10758972 -65.16261292]
[203.82594299 -53.29316330]
[197.47996521 -42.43190002]
[185.03346252 -38.74229050]
[177.07714844 -26.02627182]
[169.12083435 -13.31025600]
[168.22908020 -5.87585545]
[160.77966309 -0.36558914]
[152.48765564 12.13411999]
[144.19564819 24.63382912]
[135.90365601 37.13353729]
[127.61165619 49.63324738]
[119.31964874 62.13295364]
[121.63190460 112.28413391]
[130.25372314 124.55867767]
[138.87553406 136.83322144]
[147.49734497 149.10775757]
[156.11915588 161.38229370]
[169.92852783 157.32484436]
[184.29386902 157.74890137]
[197.79933167 162.59927368]
[209.11804199 171.38526917]
[217.14231873 183.23013306]
[221.09213257 196.95869446]
[220.59095764 211.21380615]
[215.70153809 224.59062195]
[206.91841125 235.77497864]
[215.21041870 248.27468872]
[223.50242615 260.77441406]
[231.79441833 273.27410889]
[240.08642578 285.77380371]
[255.46221924 290.35250854]
[261.33526611 305.28189087]
[253.20025635 319.10946655]
[237.29768372 321.22784424]
[225.82662964 310.01202393]
[227.58671570 294.06582642]
[219.29470825 281.56610107]
[211.00271606 269.06640625]
[202.71070862 256.56668091]
[194.41871643 244.06698608]
[179.22108459 247.94862366]
[163.58419800 246.41166687]
[149.38496399 239.62226868]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 91]
[5 90]
[6 89]
[7 88]
[8 87]
[14 25]
[15 24]
[16 23]
[29 47]
[30 46]
[31 45]
[32 44]
[54 86]
[55 85]
[56 84]
[57 83]
[58 82]
[59 81]
[60 79]
[61 78]
[62 77]
[64 74]
[65 73]
[66 72]
[100 114]
[101 113]
[102 112]
[103 111]
[104 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
