%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 20:56:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUGAACUUCAGCAGUCAAUAAAGUCAAUAUGAAUUUUUACUAUUGGUUUCAGUGCCUUUUAAAAUAUACUUUUCAGAUCUCUU\
) } def
/len { sequence length } bind def

/coor [
[45.45223618 229.68382263]
[35.85713959 241.21351624]
[26.26204491 252.74322510]
[16.66694832 264.27294922]
[7.07185364 275.80264282]
[11.01724243 290.80975342]
[5.35680771 305.25756836]
[-7.73289824 313.59057617]
[-23.21861649 312.60461426]
[-35.14577103 302.67874146]
[-38.92813110 287.62973022]
[-33.11129761 273.24417114]
[-19.93196487 265.05361938]
[-4.45785332 266.20755005]
[5.13724184 254.67784119]
[14.73233700 243.14813232]
[24.32743263 231.61842346]
[33.92252731 220.08871460]
[25.61520767 199.37380981]
[30.55488968 177.49548340]
[47.11897278 162.20956421]
[69.54144287 159.00769043]
[74.89990997 144.99745178]
[80.25836945 130.98721313]
[85.61683655 116.97696686]
[90.97529602 102.96672058]
[89.90316010 97.56787872]
[92.06951904 91.99044800]
[97.27038574 88.15314484]
[103.63723755 74.57141876]
[110.00408936 60.98969650]
[116.37094116 47.40797043]
[105.31604767 37.91614532]
[97.12905121 25.87776947]
[92.37236786 12.13121414]
[91.36982727 -2.36821294]
[94.18457794 -16.61463737]
[100.61517334 -29.62141037]
[110.20998383 -40.48942566]
[122.29890442 -48.46929550]
[136.04011536 -53.01298523]
[150.47879028 -53.81148911]
[164.61332703 -50.81579590]
[171.47196960 -64.15592957]
[178.33059692 -77.49606323]
[185.18923950 -90.83619690]
[192.04786682 -104.17632294]
[190.70942688 -120.52075958]
[204.34703064 -129.62832642]
[218.93148804 -122.12995148]
[219.45954895 -105.73930359]
[205.38800049 -97.31768799]
[198.52937317 -83.97756195]
[191.67073059 -70.63742828]
[184.81210327 -57.29729462]
[177.95346069 -43.95716095]
[189.28125000 -33.39564514]
[197.21397400 -20.07713127]
[201.11271667 -5.05855799]
[200.65908813 10.46559143]
[195.88116455 25.25830269]
[187.15196228 38.13859177]
[175.16024780 48.07579041]
[160.85621643 54.27202606]
[145.37628174 56.22626114]
[129.95266724 53.77482224]
[123.58581543 67.35654449]
[117.21896362 80.93827057]
[110.85211182 94.51999664]
[104.98554230 108.32518768]
[99.62707520 122.33542633]
[94.26861572 136.34567261]
[88.91014862 150.35591125]
[83.55168915 164.36614990]
[90.50654602 170.07514954]
[95.92381287 177.24269104]
[99.50756073 185.46675110]
[101.06446075 194.28790283]
[100.51422882 203.21498108]
[97.89373779 211.75239563]
[93.35460663 219.42770386]
[87.15444183 225.81767273]
[79.64224243 230.57170105]
[71.23873901 233.43099976]
[62.41283798 234.24267578]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[3 16]
[4 15]
[5 14]
[22 74]
[23 73]
[24 72]
[25 71]
[26 70]
[29 69]
[30 68]
[31 67]
[32 66]
[43 56]
[44 55]
[45 54]
[46 53]
[47 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
