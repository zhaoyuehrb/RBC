%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 12:06:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGAGUACCAUUUGGGGUCUCAGUUCACUCUUUCCUUGUUUAUUAAAUAUCAACUUUUCCUGCCUAA\
) } def
/len { sequence length } bind def

/coor [
[173.24179077 125.25984955]
[163.01078796 114.26512909]
[154.17967224 102.11734009]
[146.87725830 88.99362183]
[132.98661804 94.65490723]
[119.09597778 100.31620026]
[113.37838745 113.62992859]
[99.96047974 119.09854889]
[86.56531525 113.57444000]
[72.67467499 119.23572540]
[65.15078735 133.40509033]
[49.35579681 136.21537781]
[37.40626144 125.51079559]
[38.46884918 109.50296783]
[51.72842789 100.47174072]
[67.01338959 105.34509277]
[80.90402222 99.68379974]
[86.62161255 86.37007141]
[100.03952026 80.90145111]
[113.43468475 86.42556000]
[127.32532501 80.76427460]
[141.21595764 75.10298157]
[137.26435852 60.61360168]
[135.08810425 45.75354385]
[134.71894836 30.73951530]
[136.16227722 15.79046249]
[139.39701843 1.12438703]
[144.37602234 -13.04483604]
[151.02667236 -26.51057816]
[159.25198364 -39.07646942]
[168.93200684 -50.55926132]
[179.92558289 -60.79150009]
[192.07238770 -69.62397003]
[205.19528198 -76.92787170]
[219.10290527 -82.59668732]
[233.59242249 -86.54775238]
[248.45256042 -88.72344208]
[263.46661377 -89.09204102]
[278.41561890 -87.64816284]
[293.08157349 -84.41286469]
[307.25061035 -79.43333435]
[320.71609497 -72.78218079]
[333.28167725 -64.55639648]
[344.76409912 -54.87594223]
[354.99594116 -43.88198853]
[363.82794189 -31.73485374]
[371.13134766 -18.61168480]
[376.79965210 -4.70385361]
[380.75018311 9.78582382]
[382.92532349 24.64604378]
[383.29333496 39.66009903]
[381.84890747 54.60904694]
[378.61306763 69.27487946]
[373.63299561 83.44373322]
[366.98135376 96.90897369]
[358.75509644 109.47425079]
[349.07421875 120.95631409]
[338.07986450 131.18772888]
[325.93240356 140.01930237]
[312.80895996 147.32221985]
[298.90093994 152.98999023]
[284.41110229 156.93997192]
[269.55081177 159.11454773]
[254.53672791 159.48202515]
[239.58784485 158.03703308]
[224.92213440 154.80064392]
[210.75346375 149.82003784]
[197.28846741 143.16787720]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 22]
[5 21]
[6 20]
[9 17]
[10 16]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
