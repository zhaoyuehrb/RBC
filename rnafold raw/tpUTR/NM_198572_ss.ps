%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 10:01:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUGGAGCUGGGAGGUCCAGGCUCGCUCAGCCCCACAGCCCUGUGCACGGCCAUUAAAGCUUCCCACAGACACUGGUCGCUGGGCCUGUGCCAGCGCUCCUGGGUGGUGCUGCCUCCUCUGGGGUGGCUCACCGGGCCCCGGCACCGUGCCCCUUCA\
) } def
/len { sequence length } bind def

/coor [
[127.82108307 365.45581055]
[139.78700256 355.71826172]
[138.01290894 340.82354736]
[136.09175110 325.94708252]
[134.02372742 311.09033203]
[131.95568848 296.23355103]
[122.53759003 284.69454956]
[128.29838562 269.95944214]
[126.23036194 255.10267639]
[124.16233063 240.24592590]
[122.09430695 225.38916016]
[120.02627563 210.53240967]
[117.95825195 195.67564392]
[114.71304321 192.10591125]
[113.71041870 186.44381714]
[116.11405182 180.19238281]
[114.63457489 165.26551819]
[113.15509796 150.33865356]
[111.67562866 135.41178894]
[91.14511108 133.66601562]
[76.07614136 121.75344849]
[62.94011688 128.99533081]
[49.80409241 136.23721313]
[36.66806793 143.47909546]
[30.84715271 158.42889404]
[15.48742294 163.06120300]
[2.37155032 153.82250977]
[1.56090868 137.79995728]
[13.67735291 127.28466034]
[29.42618370 130.34307861]
[42.56221008 123.10118866]
[55.69823074 115.85930634]
[68.83425903 108.61742401]
[67.68508911 101.14454651]
[68.30268097 93.60910034]
[70.65327454 86.42305756]
[74.60835266 79.97931671]
[79.95167542 74.63017273]
[73.63479614 61.02513504]
[67.31790924 47.42010117]
[54.48855972 38.16168213]
[56.14653015 23.35964394]
[49.82965088 9.75460720]
[43.51276779 -3.85042906]
[37.02592850 -10.35866547]
[37.20845032 -17.78723526]
[31.16160011 -31.51441956]
[25.11474991 -45.24160385]
[19.06789780 -58.96878815]
[12.88572979 -72.63556671]
[6.56884861 -86.24060059]
[0.25196722 -99.84564209]
[-6.06491423 -113.45067596]
[-14.41753006 -114.83256531]
[-21.44695473 -119.37945557]
[-26.02776527 -126.27381897]
[-27.46256065 -134.33013916]
[-25.58731461 -142.19850159]
[-20.78633499 -148.59072876]
[-26.00935936 -162.65202332]
[-31.23238373 -176.71331787]
[-45.32172394 -183.35623169]
[-50.41830444 -197.69079590]
[-43.99847794 -211.08187866]
[-49.22150421 -225.14317322]
[-64.37750244 -227.63140869]
[-76.24869537 -237.37667847]
[-81.64179230 -251.75756836]
[-79.10607147 -266.90570068]
[-69.32363892 -278.74627686]
[-54.92590714 -284.09426880]
[-39.78580475 -281.51107788]
[-27.97593880 -271.69158936]
[-22.67310333 -257.27716064]
[-25.30373573 -242.14523315]
[-35.16020966 -230.36619568]
[-29.93718338 -216.30490112]
[-16.33209038 -210.35200500]
[-10.83489227 -196.16625977]
[-17.17108917 -181.93634033]
[-11.94806385 -167.87504578]
[-6.72503948 -153.81375122]
[11.27894306 -141.83482361]
[7.54012203 -119.76755524]
[13.85700321 -106.16252136]
[20.17388535 -92.55747986]
[26.49076653 -78.95244598]
[32.19032288 -74.18463898]
[32.79508209 -65.01564026]
[38.84193420 -51.28845596]
[44.88878632 -37.56127167]
[50.93563461 -23.83408737]
[57.11780548 -10.16731071]
[63.43468475 3.43772578]
[69.75156403 17.04276276]
[82.12909698 25.32805443]
[80.92295074 41.10321808]
[87.23983002 54.70825577]
[93.55670929 68.31329346]
[106.47814178 67.31018066]
[119.14556885 71.52146912]
[129.48051453 80.57246399]
[135.66764832 93.27238464]
[136.46922302 107.76607513]
[151.46849060 107.61788940]
[166.46775818 107.46970367]
[181.46702576 107.32151794]
[196.46629333 107.17332458]
[205.06958008 103.94538116]
[211.76266479 107.17332458]
[226.76193237 107.32151794]
[241.76119995 107.46970367]
[256.76046753 107.61788940]
[271.75973511 107.76607513]
[286.75900269 107.91426086]
[301.75827026 108.06244659]
[316.75753784 108.21063232]
[330.76623535 99.68490601]
[345.02230835 107.79026794]
[344.86029053 124.18861389]
[330.44686890 132.01072693]
[316.60934448 123.20989990]
[301.61007690 123.06171417]
[286.61080933 122.91352844]
[271.61154175 122.76534271]
[256.61227417 122.61715698]
[241.61300659 122.46897125]
[226.61373901 122.32078552]
[211.61447144 122.17259979]
[196.61447144 122.17259979]
[181.61520386 122.32078552]
[166.61593628 122.46897125]
[151.61666870 122.61715698]
[136.61740112 122.76534271]
[126.60248566 133.93232727]
[128.08195496 148.85917664]
[129.56143188 163.78604126]
[131.04090881 178.71290588]
[132.81500244 193.60762024]
[134.88304138 208.46437073]
[136.95106506 223.32113647]
[139.01908875 238.17788696]
[141.08712769 253.03465271]
[143.15515137 267.89141846]
[152.72117615 280.49307251]
[146.81245422 294.16552734]
[148.88047791 309.02227783]
[150.94850159 323.87905884]
[155.25175476 331.99804688]
[152.90762329 339.04943848]
[154.68171692 353.94415283]
[168.60009766 360.59866333]
[176.69181824 373.73364258]
[176.37487793 389.15774536]
[167.75038147 401.94921875]
[153.57038879 408.02633667]
[138.35968018 405.44992065]
[126.97193909 395.04208374]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 151]
[3 150]
[4 148]
[5 147]
[6 146]
[8 144]
[9 143]
[10 142]
[11 141]
[12 140]
[13 139]
[16 138]
[17 137]
[18 136]
[19 135]
[21 33]
[22 32]
[23 31]
[24 30]
[38 99]
[39 98]
[40 97]
[42 95]
[43 94]
[44 93]
[46 92]
[47 91]
[48 90]
[49 89]
[50 87]
[51 86]
[52 85]
[53 84]
[59 82]
[60 81]
[61 80]
[64 77]
[65 76]
[104 134]
[105 133]
[106 132]
[107 131]
[108 130]
[110 129]
[111 128]
[112 127]
[113 126]
[114 125]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
