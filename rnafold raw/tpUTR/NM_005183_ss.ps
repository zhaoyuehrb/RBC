%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 00:05:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCCCACCCCUCCCCAACUGCUCAAUAAACCUCCUGCCCUCCCCUCCCCAGCAGGAGGCAGGCAUGGACCACA\
) } def
/len { sequence length } bind def

/coor [
[96.05199432 234.97375488]
[81.86070251 240.12252808]
[66.80645752 241.25044250]
[52.00638199 238.27383423]
[38.55873489 231.41354370]
[27.46142769 221.17869568]
[19.53795242 208.32873535]
[15.37628365 193.81726074]
[15.28524399 178.72109985]
[19.27158928 164.16047668]
[27.03950691 151.21589661]
[38.01256561 140.84794617]
[51.37649155 133.82597351]
[66.13959503 130.67106628]
[81.20635223 131.61734009]
[86.13935089 117.45169830]
[91.07234955 103.28604889]
[89.81726837 97.85960388]
[91.86639404 92.15950775]
[97.05667877 88.17135620]
[103.15773010 74.46817017]
[109.25878143 60.76498795]
[115.35983276 47.06180954]
[109.14844513 39.58084106]
[105.89229584 30.46599770]
[105.95713043 20.83172226]
[109.30458069 11.84492493]
[115.50056458 4.58363867]
[123.77128601 -0.09228290]
[133.09977722 -1.64293277]
[142.35098267 0.08945507]
[151.16775513 -12.04580021]
[159.98454285 -24.18105507]
[168.80131531 -36.31631088]
[177.61808777 -48.45156479]
[186.43487549 -60.58681870]
[195.25164795 -72.72207642]
[204.06843567 -84.85733032]
[196.41744995 -98.02481079]
[194.79010010 -113.16652679]
[199.46829224 -127.65908813]
[209.64152527 -138.99156189]
[223.54722595 -145.20054626]
[238.77613831 -145.21028137]
[252.68977356 -139.01908875]
[262.87750244 -127.69963074]
[267.57421875 -113.21306610]
[265.96621704 -98.06928253]
[258.33209229 -84.89202881]
[245.99449158 -75.96434784]
[231.09098816 -72.83301544]
[216.20368958 -76.04055023]
[207.38690186 -63.90529633]
[198.57012939 -51.77004242]
[189.75335693 -39.63478470]
[180.93656921 -27.49953079]
[172.11979675 -15.36427593]
[163.30300903 -3.22902107]
[154.48623657 8.90623379]
[160.26739502 29.06951904]
[149.82365417 47.56350708]
[129.06301880 53.16285706]
[122.96195984 66.86604309]
[116.86090851 80.56922150]
[110.75986481 94.27239990]
[105.23799133 108.21904755]
[100.30499268 122.38469696]
[95.37199402 136.55033875]
[107.76748657 145.16743469]
[117.37757111 156.80998230]
[123.48911285 170.61402893]
[125.64859772 185.55522156]
[123.69576263 200.52482605]
[117.77554321 214.41198730]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 68]
[16 67]
[17 66]
[20 65]
[21 64]
[22 63]
[23 62]
[31 59]
[32 58]
[33 57]
[34 56]
[35 55]
[36 54]
[37 53]
[38 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
