%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 12:24:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUGUGCCCUACCCUGGCUCAGGCUUCUGGGCUCUGAGAAAUAAACUAUGAGAGCAAUUUCCUCAGG\
) } def
/len { sequence length } bind def

/coor [
[106.36180115 121.01245880]
[98.98606873 121.93097687]
[91.72655487 120.33583069]
[85.41532135 116.40984344]
[80.77574158 110.60300446]
[78.33959198 103.58087921]
[63.59499741 100.82463837]
[48.85039902 98.06839752]
[34.10580444 95.31215668]
[21.63093758 108.06398010]
[4.19171619 111.00959015]
[-11.50573158 103.19860077]
[-19.53206635 87.78222656]
[-34.46807861 86.39820099]
[-49.40409088 85.01417542]
[-64.34010315 83.63014984]
[-80.66955566 88.18924713]
[-89.57092285 73.76004028]
[-78.16976166 61.21213913]
[-62.95608139 68.69413757]
[-48.02006531 70.07816315]
[-33.08405304 71.46218872]
[-18.14804077 72.84621429]
[-11.32738781 62.34639740]
[-0.55476010 55.82231140]
[12.05653286 54.62857056]
[23.99974251 59.06668091]
[32.87294388 68.31230164]
[36.86204529 80.56755829]
[51.60664368 83.32379913]
[66.35124207 86.08003998]
[81.09583282 88.83628845]
[101.01393127 78.06902313]
[119.85357666 90.62816620]
[134.78959656 89.24414062]
[149.72560120 87.86011505]
[164.66162109 86.47608948]
[179.59762573 85.09206390]
[194.49769592 83.36341858]
[209.35385132 81.29106903]
[224.21000671 79.21872711]
[239.06616211 77.14637756]
[242.85339355 62.42478943]
[251.99005127 50.27612686]
[265.08285522 42.55298233]
[280.13525391 40.43307114]
[294.85183716 44.23967361]
[306.98846436 53.39230347]
[314.69439697 66.49525452]
[316.79449463 81.55041504]
[312.96853638 96.26199341]
[303.79995728 108.38657379]
[290.68688965 116.07524872]
[275.62896729 118.15554810]
[260.92242432 114.31024170]
[248.80992126 105.12571716]
[241.13850403 92.00253296]
[226.28234863 94.07488251]
[211.42619324 96.14722443]
[196.57003784 98.21957397]
[190.16523743 102.40599823]
[180.98165894 100.02807617]
[166.04563904 101.41210175]
[151.10963440 102.79612732]
[136.17361450 104.18015289]
[121.23760223 105.56417847]
[118.16393280 112.33156586]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 32]
[7 31]
[8 30]
[9 29]
[13 23]
[14 22]
[15 21]
[16 20]
[34 66]
[35 65]
[36 64]
[37 63]
[38 62]
[39 60]
[40 59]
[41 58]
[42 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
