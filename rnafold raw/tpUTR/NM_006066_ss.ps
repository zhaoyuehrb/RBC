%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 19:12:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCACAGCUUCUUGGCCUCCCUUCCAGCUCUGCAGCUAAUGAGGUCCUGCCACAACGGAAAGAGGGAGUUAAUAAAGCCAUUGGAGCAUCCAUA\
) } def
/len { sequence length } bind def

/coor [
[87.33640289 322.42077637]
[74.43510437 314.42572021]
[65.29626465 302.30770874]
[61.15584183 287.70562744]
[62.57379150 272.59423828]
[69.35835266 259.01727295]
[80.59196472 248.81088257]
[94.75537872 243.35540771]
[94.75537872 228.35540771]
[94.75537872 213.35540771]
[94.75537872 198.35540771]
[94.75537872 183.35540771]
[85.14404297 168.77270508]
[94.22640228 152.85881042]
[93.73561096 137.86685181]
[93.24482727 122.87487793]
[92.75404358 107.88290405]
[90.31060791 93.08325958]
[85.95633698 78.72914886]
[81.60206604 64.37504578]
[77.24780273 50.02094269]
[72.89353180 35.66683578]
[68.53926086 21.31273079]
[63.48591232 7.18957090]
[57.74565887 -6.66862249]
[52.00540924 -20.52681541]
[36.83071518 -20.59285736]
[22.87500000 -26.44785881]
[12.25284672 -37.17089462]
[6.56077957 -51.10602951]
[6.63735294 -66.11798859]
[12.43975735 -79.91934967]
[23.05508995 -90.41906738]
[17.31484032 -104.27725983]
[11.57458782 -118.13545227]
[5.83433628 -131.99363708]
[-9.41400623 -133.31524658]
[-22.29530525 -141.58148193]
[-29.84953499 -154.89283752]
[-30.34078407 -170.19046021]
[-23.65617180 -183.95906067]
[-11.33176994 -193.03472900]
[3.80036330 -195.33193970]
[18.26297379 -190.32279968]
[28.73266029 -179.15837097]
[32.80356598 -164.40417480]
[29.54022408 -149.45060730]
[19.69252968 -137.73390198]
[25.43278122 -123.87570190]
[31.17303276 -110.01750946]
[36.91328430 -96.15931702]
[51.84387589 -96.24107361]
[65.70583344 -90.58495331]
[76.37503815 -80.02404022]
[82.20376587 -66.14551544]
[82.27510071 -51.05218506]
[76.54702759 -37.04389572]
[65.86360168 -26.26706696]
[71.60385132 -12.40887356]
[77.34410095 1.44931924]
[80.65011597 3.13836527]
[83.22757721 6.61908484]
[84.19274139 11.49283504]
[82.89336395 16.95846176]
[87.24763489 31.31256676]
[91.60190582 45.66667175]
[95.95617676 60.02077484]
[100.31044769 74.37487793]
[104.66471863 88.72898865]
[112.26813507 75.79886627]
[125.91740417 69.57814789]
[140.66430664 72.32201385]
[151.16268921 83.03574371]
[153.60661316 97.83531189]
[147.11009216 111.35548401]
[134.02827454 118.69483948]
[119.10367584 117.19264984]
[107.74600983 107.39212036]
[108.23679352 122.38408661]
[108.72758484 137.37605286]
[109.21836853 152.36802673]
[118.14950562 161.84913635]
[118.14305115 174.47090149]
[109.75537872 183.35540771]
[109.75537872 198.35540771]
[109.75537872 213.35540771]
[109.75537872 228.35540771]
[109.75537872 243.35540771]
[123.91879272 248.81088257]
[135.15240479 259.01727295]
[141.93696594 272.59423828]
[143.35491943 287.70562744]
[139.21449280 302.30770874]
[130.07565308 314.42572021]
[117.17434692 322.42077637]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 88]
[9 87]
[10 86]
[11 85]
[12 84]
[14 81]
[15 80]
[16 79]
[17 78]
[18 69]
[19 68]
[20 67]
[21 66]
[22 65]
[23 64]
[24 60]
[25 59]
[26 58]
[33 51]
[34 50]
[35 49]
[36 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
