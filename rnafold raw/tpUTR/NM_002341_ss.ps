%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 14:05:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAAUAUGAGUGCGUGGUGCGAGUGCGUGAAUAUUGGGGGCCCGGACGCCCAGGACCCCAUGGCAGUGGGAAAAAUGUAGGAGACUGUUUGGAAAUUGAUUUUGAACCUGAUGAAAAUAAAGAAUGGAAAGCUUCAGUGCUGCCGAUAA\
) } def
/len { sequence length } bind def

/coor [
[196.66873169 221.38240051]
[182.43247986 226.10774231]
[167.43260193 226.04605103]
[153.23568726 221.20376587]
[141.32446289 212.08660889]
[132.94291687 199.64677429]
[128.96640015 185.18345642]
[129.81025696 170.20721436]
[135.38632202 156.28215027]
[145.11224365 144.86257935]
[157.97224426 137.14117432]
[172.62626648 133.92417908]
[158.50144958 128.87541199]
[144.37664795 123.82666016]
[130.25184631 118.77790833]
[116.12704468 113.72914886]
[101.40932465 121.13256073]
[85.83884430 115.74906158]
[78.83701324 100.83610535]
[63.29609680 103.80099487]
[53.67700577 92.42900085]
[38.13608932 95.39389038]
[28.51699829 84.02189636]
[12.97608471 86.98678589]
[3.35699224 75.61479187]
[-10.86978722 70.86097717]
[-25.09656525 66.10716248]
[-30.90758514 72.27452087]
[-38.26068115 76.41726685]
[-46.48012543 78.17786407]
[-54.81740570 77.41662598]
[-62.51940536 74.22257233]
[-68.89643097 68.90357208]
[-73.38396454 61.95677185]
[-75.59259033 54.02216721]
[-75.34176636 45.82367325]
[-88.86595917 39.33550644]
[-102.39014435 32.84733963]
[-115.91433716 26.35917664]
[-129.43852234 19.87101173]
[-145.22766113 20.87787247]
[-153.35600281 8.39671516]
[-166.88020325 1.90855026]
[-182.66932678 2.91541171]
[-190.79768372 -9.56574535]
[-204.32186890 -16.05391121]
[-220.62318420 -14.26526928]
[-230.10334778 -27.64653969]
[-223.00999451 -42.43221664]
[-206.64013672 -43.41206741]
[-197.83369446 -29.57810020]
[-184.30950928 -23.08993530]
[-169.48771667 -24.56087494]
[-160.39202881 -11.61563969]
[-146.86784363 -5.12747478]
[-132.04605103 -6.59841299]
[-122.95036316 6.34682131]
[-109.42617035 12.83498669]
[-95.90198517 19.32315063]
[-82.37779236 25.81131744]
[-68.85359955 32.29948044]
[-49.10924530 22.83662605]
[-28.49274635 30.97701836]
[-20.34275055 51.88038254]
[-6.11597204 56.63419724]
[8.11080742 61.38801193]
[22.63412476 58.08309555]
[33.27081299 69.79512024]
[47.79413223 66.49019623]
[58.43082047 78.20221710]
[72.95413971 74.89730072]
[83.59082794 86.60932159]
[94.21349335 79.62630463]
[106.92082977 79.98316956]
[117.13484192 87.55136871]
[121.17580414 99.60434723]
[135.30061340 104.65310669]
[149.42541504 109.70185852]
[163.55021667 114.75061798]
[177.67501831 119.79936981]
[192.46772766 122.28449249]
[207.46690369 122.12845612]
[222.46366882 121.81639862]
[237.45635986 121.34835815]
[252.44337463 120.72438049]
[267.42309570 119.94453430]
[282.40280151 119.16468811]
[297.38250732 118.38484192]
[304.24032593 109.83757019]
[314.47149658 106.57769775]
[324.58596802 109.46159363]
[331.27301025 117.29200745]
[346.27218628 117.13597107]
[355.30355835 104.65637207]
[369.78234863 99.94274902]
[384.09115601 104.60346985]
[392.80746460 116.65186310]
[407.80664062 116.49582672]
[421.52557373 108.61539459]
[434.33264160 116.21987915]
[449.33184814 116.06384277]
[464.33102417 115.90780640]
[479.33023071 115.75177002]
[494.32940674 115.59573364]
[499.07662964 101.21717834]
[508.23730469 89.16062927]
[520.81781006 80.73387146]
[535.45343018 76.85099030]
[550.55664062 77.93315887]
[564.48919678 83.86300659]
[575.73974609 93.99729919]
[583.08795166 107.23674774]
[585.73669434 122.14522552]
[583.39868164 137.10559082]
[576.32751465 150.49504089]
[565.29022217 160.86119080]
[551.48406982 167.07960510]
[536.40661621 168.47575378]
[521.69335938 164.89817810]
[508.94027710 156.73497009]
[499.53076172 144.87159729]
[494.48544312 130.59492493]
[479.48626709 130.75096130]
[464.48706055 130.90699768]
[449.48788452 131.06303406]
[434.48867798 131.21907043]
[421.84259033 139.08834839]
[407.96267700 131.49501038]
[392.96350098 131.65104675]
[384.49972534 143.87817383]
[370.29098511 148.83555603]
[355.71725464 144.42417908]
[346.42822266 132.13516235]
[331.42904663 132.29119873]
[315.61975098 143.35897827]
[298.16235352 133.36456299]
[283.18264771 134.14440918]
[268.20294189 134.92424011]
[253.22322083 135.70408630]
[246.66453552 139.21540833]
[237.92440796 136.34104919]
[222.93170166 136.80909729]
[216.30139160 140.18319702]
[207.62295532 137.12763977]
[192.62376404 137.28367615]
[205.41983032 145.11059570]
[215.05148315 156.60977173]
[220.51283264 170.58023071]
[221.23345947 185.56291199]
[217.13813782 199.99302673]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 80]
[13 79]
[14 78]
[15 77]
[16 76]
[19 72]
[21 70]
[23 68]
[25 66]
[26 65]
[27 64]
[36 61]
[37 60]
[38 59]
[39 58]
[40 57]
[42 55]
[43 54]
[45 52]
[46 51]
[81 145]
[82 144]
[83 142]
[84 141]
[85 139]
[86 138]
[87 137]
[88 136]
[92 134]
[93 133]
[97 129]
[98 128]
[100 126]
[101 125]
[102 124]
[103 123]
[104 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
