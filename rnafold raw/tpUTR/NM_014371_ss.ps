%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 00:35:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGAGCUCGGGGCGGGCGGAGCCCGCGUGGCCGAAGCUGGAAACCAAACCUAAUAAAGUUUUCCCAUCCCACC\
) } def
/len { sequence length } bind def

/coor [
[104.47834015 127.16855621]
[96.70793915 139.99902344]
[88.93753052 152.82948303]
[81.16712952 165.65994263]
[81.36484528 182.05790710]
[67.12647247 190.19429016]
[53.09922409 181.69908142]
[53.71313477 165.31143188]
[68.33666229 157.88954163]
[76.10707092 145.05908203]
[83.87747192 132.22860718]
[91.64788055 119.39814758]
[84.97834778 105.96247101]
[70.06052399 104.39454651]
[55.14269257 102.82662201]
[40.22486496 101.25868988]
[25.30703735 99.69076538]
[10.38920879 98.12284088]
[-5.99517012 102.48041534]
[-14.71809864 87.94264221]
[-3.16321397 75.53615570]
[11.95713520 83.20500946]
[26.87496376 84.77293396]
[41.79279327 86.34086609]
[56.71062088 87.90879059]
[71.62844849 89.47671509]
[86.54627991 91.04464722]
[101.28058624 88.23392487]
[114.57363892 81.28448486]
[127.86669159 74.33504486]
[141.15974426 67.38560486]
[145.30014038 61.62203979]
[150.93527222 59.38922882]
[155.86886597 60.46401978]
[169.69680786 54.65128708]
[171.89262390 40.87553406]
[180.60026550 30.11752892]
[193.41236877 25.17827797]
[206.87223816 27.27359772]
[217.40634155 35.73691177]
[231.46557617 30.50832939]
[245.52481079 25.27974892]
[259.58404541 20.05116844]
[273.64328003 14.82258701]
[287.70248413 9.59400654]
[288.61660767 -5.60745049]
[295.64044189 -19.11987686]
[307.55706787 -28.60216331]
[322.30187988 -32.41144562]
[337.32022095 -29.88774300]
[350.01010132 -21.46830177]
[358.17291260 -8.61184216]
[360.39437866 6.45417690]
[356.28964233 21.11947632]
[346.56985474 32.84320450]
[332.91906738 39.59415817]
[317.70230103 40.20268631]
[303.55599976 34.56336594]
[292.93109131 23.65323639]
[278.87185669 28.88181686]
[264.81262207 34.11039734]
[250.75338745 39.33897781]
[236.69415283 44.56755829]
[222.63493347 49.79613876]
[218.82266235 65.62261200]
[206.27119446 76.24559784]
[189.70449829 77.41264343]
[175.50953674 68.47923279]
[161.68159485 74.29196930]
[148.10919189 80.67865753]
[134.81613159 87.62809753]
[121.52307892 94.57753754]
[108.23002625 101.52697754]
[112.25174713 108.22887421]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[4 9]
[13 27]
[14 26]
[15 25]
[16 24]
[17 23]
[18 22]
[28 73]
[29 72]
[30 71]
[31 70]
[34 69]
[35 68]
[40 64]
[41 63]
[42 62]
[43 61]
[44 60]
[45 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
