%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 14:47:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCUGCGGUUUAAGAGCCCUAGGGCAGGCUGGACCUGUCAAGACGGGAAGGGGAAGAGUAGAGAGGGAGGGACAAAGUGAGGAAAAGGUGCUCAUUAAAGCUACCGGGCACCUUAGCUCA\
) } def
/len { sequence length } bind def

/coor [
[206.00614929 160.03721619]
[183.97627258 153.72161865]
[167.64916992 137.55377197]
[161.08349609 115.47107697]
[146.20765686 113.54510498]
[131.33181763 111.61912537]
[116.45597076 109.69315338]
[104.91584778 118.45510101]
[90.54625702 116.59466553]
[81.61804962 105.18268585]
[66.74221039 103.25671387]
[51.86637115 101.33073425]
[43.48637772 114.04045868]
[30.47213364 121.81969452]
[15.43242168 123.17144775]
[1.35507405 117.88095856]
[-8.98658848 107.04769897]
[-13.58009434 92.85738373]
[-28.45593452 90.93140411]
[-43.33177567 89.00543213]
[-55.27832031 102.51288605]
[-72.77008057 106.20323944]
[-88.87210846 98.80307770]
[-97.31319427 83.39880371]
[-112.26845551 82.24117279]
[-127.22371674 81.08354187]
[-142.17898560 79.92590332]
[-157.13424683 78.76827240]
[-172.08950806 77.61064148]
[-185.16149902 86.91131592]
[-200.54298401 82.35176086]
[-206.43460083 67.42967987]
[-198.31680298 53.59201813]
[-182.41687012 51.45384216]
[-170.93186951 62.65538025]
[-155.97660828 63.81301117]
[-141.02134705 64.97064209]
[-126.06608582 66.12827301]
[-111.11082458 67.28590393]
[-96.15556335 68.44354248]
[-89.65518188 58.03369141]
[-79.25905609 51.37573242]
[-66.94049835 49.80735779]
[-55.06966400 53.69308472]
[-45.95746994 62.34197235]
[-41.40579987 74.12959290]
[-26.52995872 76.05556488]
[-11.65411949 77.98154449]
[-3.59820676 65.42893982]
[9.16138554 57.58660507]
[24.12190628 56.05564880]
[38.32147217 61.19301224]
[48.92545700 72.03009796]
[53.79234695 86.45489502]
[68.66819000 88.38087463]
[83.54402924 90.30684662]
[95.08415222 81.54489899]
[109.45374298 83.40533447]
[118.38195038 94.81731415]
[133.25778198 96.74328613]
[148.13362122 98.66926575]
[163.00947571 100.59523773]
[166.22795105 92.69400787]
[170.83271790 85.51960754]
[176.66662598 79.31240845]
[183.53143311 74.27985382]
[191.19442749 70.58953857]
[199.39648438 68.36360931]
[207.86065674 67.67472076]
[216.30162048 68.54368591]
[224.43530273 70.93885040]
[231.98838806 74.77722168]
[238.70753479 79.92736053]
[244.36787415 86.21388245]
[248.78050232 93.42340088]
[251.79882812 101.31181335]
[253.32344055 109.61254120]
[253.30532837 118.04552460]
[251.74749756 126.32669830]
[265.33303833 132.68540955]
[278.91857910 139.04412842]
[292.50411987 145.40284729]
[304.62466431 139.36775208]
[317.80996704 141.42356873]
[327.23773193 150.58988953]
[329.59231567 163.32807922]
[343.00961304 170.03448486]
[356.42694092 176.74089050]
[369.84423828 183.44731140]
[383.26153564 190.15371704]
[396.67886353 196.86012268]
[410.09616089 203.56652832]
[423.51345825 210.27293396]
[436.93075562 216.97933960]
[448.97109985 207.59886169]
[463.89089966 204.37983704]
[478.72784424 207.96141052]
[490.53607178 217.63244629]
[496.97100830 231.47276306]
[496.75500488 246.73435974]
[489.93093872 260.38702393]
[477.85379028 269.72000122]
[462.92141724 272.88024902]
[448.09869385 269.24029541]
[436.32864380 259.52282715]
[429.94827271 245.65725708]
[430.22436523 230.39663696]
[416.80706787 223.69023132]
[403.38973999 216.98382568]
[389.97244263 210.27742004]
[376.55514526 203.57101440]
[363.13781738 196.86460876]
[349.72052002 190.15820312]
[336.30322266 183.45179749]
[322.88592529 176.74539185]
[307.23657227 182.75639343]
[291.75296021 175.49851990]
[286.14538574 158.98838806]
[272.55984497 152.62966919]
[258.97433472 146.27095032]
[245.38879395 139.91223145]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 62]
[5 61]
[6 60]
[7 59]
[10 56]
[11 55]
[12 54]
[18 48]
[19 47]
[20 46]
[24 40]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
[79 121]
[80 120]
[81 119]
[82 118]
[86 115]
[87 114]
[88 113]
[89 112]
[90 111]
[91 110]
[92 109]
[93 108]
[94 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
