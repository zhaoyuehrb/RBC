%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 01:49:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGCCAUUAAAAGAGGACCAGAUUAUGAAUGACAACAGAGACUAACAUUUACAUUGACAAAAAACCCUAAAAAUUUCUGCAAUUAUCUUAUUGAACAAUAAAAUUGCAUGUUUACUUCUA\
) } def
/len { sequence length } bind def

/coor [
[51.68049622 180.91139221]
[42.98918152 193.13681030]
[34.29786301 205.36222839]
[25.60654831 217.58766174]
[17.23289299 230.03282166]
[9.18244934 242.68945312]
[15.75003147 256.64904785]
[13.70525169 271.94030762]
[3.70059299 283.68383789]
[-11.07149506 288.13229370]
[-25.89729309 283.86624146]
[-36.04594040 272.24691772]
[-38.27904510 256.98205566]
[-31.88402748 242.94255066]
[-18.90151787 234.60841370]
[-3.47418404 234.63900757]
[4.57625866 221.98237610]
[4.39823961 217.10112000]
[7.36730528 212.07981873]
[13.38112259 208.89634705]
[22.07243919 196.67091370]
[30.76375580 184.44549561]
[39.45507431 172.22006226]
[20.09712029 149.96955872]
[8.56457615 122.82520294]
[5.98689365 93.44542694]
[12.61652374 64.70758057]
[-0.80078286 58.00117874]
[-14.21808910 51.29476929]
[-27.63539505 44.58836365]
[-41.05270004 37.88195801]
[-54.47000885 31.17555046]
[-65.92932129 41.16317368]
[-80.34003448 46.00050735]
[-95.50461578 44.94989395]
[-109.11058807 38.17154312]
[-119.08312988 26.69910240]
[-123.90149689 12.28203869]
[-122.83094025 -2.88115191]
[-116.03469086 -16.47819138]
[-104.54914856 -26.43563271]
[-90.12575531 -31.23503685]
[-74.96398926 -30.14452934]
[-61.37590027 -23.33040428]
[-51.43357468 -11.83176804]
[-46.65314865 2.59792233]
[-47.76359940 17.75824356]
[-34.34629440 24.46465111]
[-20.92898750 31.17105675]
[-7.51168203 37.87746429]
[5.90562391 44.58386993]
[19.32292938 51.29027939]
[24.47907639 43.62609863]
[30.36076355 36.50351715]
[36.91148758 29.99095535]
[44.06831741 24.15098190]
[51.76248932 19.03970528]
[59.92008972 14.70622826]
[68.46274567 11.19218445]
[77.30838013 8.53133202]
[86.37202454 6.74923658]
[95.56658936 5.86301756]
[104.80374908 5.88118935]
[113.99475861 6.80357695]
[123.05132294 8.62131977]
[131.88642883 11.31695366]
[140.41519165 14.86458206]
[148.55567932 19.23012161]
[156.22967529 24.37163162]
[163.36346436 30.23971748]
[169.88851929 36.77799988]
[175.74214172 43.92367172]
[180.86808777 51.60807800]
[185.21713257 59.75739288]
[188.74746704 68.29332733]
[191.42520142 77.13387299]
[193.22459412 86.19409180]
[194.12835693 95.38695526]
[194.12780762 104.62413025]
[209.00364685 106.55010986]
[223.87948608 108.47608185]
[238.75532532 110.40205383]
[253.63116455 112.32803345]
[268.50701904 114.25400543]
[283.38284302 116.17998505]
[288.41693115 114.06597900]
[293.25500488 114.16794586]
[297.05966187 116.01683044]
[299.31552124 118.87197876]
[313.99835205 121.94026184]
[328.68118286 125.00854492]
[343.36401367 128.07682800]
[358.04687500 131.14511108]
[373.44842529 125.51273346]
[385.85168457 136.24081421]
[382.49719238 152.29321289]
[366.83578491 157.15660095]
[354.97857666 145.82794189]
[340.29574585 142.75965881]
[325.61291504 139.69137573]
[310.93008423 136.62309265]
[296.24725342 133.55480957]
[281.45687866 131.05581665]
[266.58102417 129.12985229]
[251.70518494 127.20387268]
[236.82934570 125.27790070]
[221.95350647 123.35192108]
[207.07766724 121.42594910]
[192.20182800 119.49996948]
[188.71406555 131.80000305]
[183.59359741 143.51477051]
[176.93466187 154.42869568]
[168.85981750 164.34091187]
[159.51765442 173.06898499]
[149.08012390 180.45227051]
[137.73930359 186.35491943]
[125.70393372 190.66825867]
[113.19550323 193.31294250]
[100.44421387 194.24028015]
[87.68476105 193.43319702]
[75.15194702 190.90655518]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[4 20]
[5 17]
[6 16]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[79 109]
[80 108]
[81 107]
[82 106]
[83 105]
[84 104]
[85 103]
[89 102]
[90 101]
[91 100]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
