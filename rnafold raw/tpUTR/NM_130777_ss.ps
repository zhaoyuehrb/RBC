%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 22:01:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAAGAUAAGCUGAAACAACACAAACUGUUUUUAUAUUAGAUAUUUUACUUUAAAAUAUCUUAAUAAAGUUUUAAGCUUUUCUCCAAAGAA\
) } def
/len { sequence length } bind def

/coor [
[104.52043915 360.27044678]
[115.45811462 349.26379395]
[112.93659973 334.47723389]
[110.41508484 319.69067383]
[106.09859467 313.49957275]
[108.06694031 304.36282349]
[106.04627228 289.49954224]
[96.66498566 277.93057251]
[102.47271729 263.21389771]
[100.45204926 248.35063171]
[98.43137360 233.48735046]
[96.41070557 218.62408447]
[94.39002991 203.76080322]
[92.11861420 188.93379211]
[89.59709930 174.14723206]
[87.07559204 159.36068726]
[84.55407715 144.57414246]
[82.03256226 129.78759766]
[71.16066742 119.45309448]
[56.26538849 117.68374634]
[41.37010956 115.91439056]
[26.47482681 114.14504242]
[13.03277397 122.90236664]
[-2.14899898 117.71649170]
[-7.42433405 102.56556702]
[1.25355375 89.07209778]
[17.22773170 87.58710480]
[28.24417686 99.24976349]
[43.13945770 101.01911163]
[58.03474045 102.78845978]
[72.93002319 104.55781555]
[74.06735229 95.32000732]
[78.13480377 87.36740112]
[84.41187286 81.55109406]
[91.96112061 78.39379883]
[99.76199341 78.04750061]
[104.73325348 63.89523697]
[109.70452118 49.74297333]
[114.67578125 35.59071350]
[119.64704895 21.43844986]
[124.37857819 7.20424318]
[128.86901855 -7.10784531]
[133.35946655 -21.41993523]
[137.84991455 -35.73202133]
[142.34036255 -50.04411316]
[146.83081055 -64.35620117]
[151.32125854 -78.66828918]
[155.81170654 -92.98037720]
[160.30215454 -107.29246521]
[159.27474976 -124.21525574]
[175.25178528 -129.88719177]
[185.12493896 -116.10470581]
[174.61424255 -102.80201721]
[170.12379456 -88.48992920]
[165.63334656 -74.17784119]
[161.14289856 -59.86575317]
[156.65245056 -45.55366516]
[152.16200256 -31.24157715]
[147.67155457 -16.92948723]
[143.18110657 -2.61739874]
[138.69065857 11.69468975]
[139.71334839 19.17240715]
[133.79931641 26.40971375]
[128.82804871 40.56197739]
[123.85678101 54.71423721]
[118.88552094 68.86650085]
[113.91425323 83.01876068]
[123.77735901 99.35186768]
[117.29238892 118.90200806]
[96.81910706 127.26608276]
[99.34062195 142.05262756]
[101.86213684 156.83917236]
[104.38365173 171.62573242]
[106.90515900 186.41227722]
[111.51844788 194.54074097]
[109.25330353 201.74014282]
[111.27397919 216.60340881]
[113.29464722 231.46669006]
[115.31532288 246.32995605]
[117.33599091 261.19323730]
[126.86180878 273.82531738]
[120.90954590 287.47888184]
[122.93021393 302.34213257]
[125.20162964 317.16915894]
[127.72314453 331.95571899]
[130.24465942 346.74227905]
[144.21199036 353.50195312]
[151.50885010 367.19631958]
[149.32945251 382.55957031]
[138.51182556 393.68426514]
[123.21556854 396.29269409]
[109.32239532 389.38186646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 86]
[3 85]
[4 84]
[6 83]
[7 82]
[9 80]
[10 79]
[11 78]
[12 77]
[13 76]
[14 74]
[15 73]
[16 72]
[17 71]
[18 70]
[19 31]
[20 30]
[21 29]
[22 28]
[36 67]
[37 66]
[38 65]
[39 64]
[40 63]
[41 61]
[42 60]
[43 59]
[44 58]
[45 57]
[46 56]
[47 55]
[48 54]
[49 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
