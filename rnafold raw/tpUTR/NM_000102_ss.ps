%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 15:09:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCUGUAACUCACAGCCCCUGUCCACCCUAUGUGGCCCCACAACACAGAUUUAGAGAUACAACCCCCCACCCUUCUCCGCCAUUCUUCCCUACUCCCAACCCACUCUGCCUUCUUUUUCAGCUUGUGGCAAUGCCAGUGAUGUGCAUAAACAGUUUUUUUUUUUCCAUAA\
) } def
/len { sequence length } bind def

/coor [
[72.34691620 221.73141479]
[69.87808228 206.93205261]
[64.51961517 220.94229126]
[59.16115570 234.95252991]
[53.80269241 248.96278381]
[48.44422913 262.97302246]
[43.08576584 276.98327637]
[48.28972244 292.15884399]
[39.54841614 305.61132812]
[23.56742477 307.02108765]
[12.60599899 295.30673218]
[15.07280636 279.45443726]
[29.07552338 271.62478638]
[34.43398666 257.61456299]
[39.79244995 243.60430908]
[45.15091324 229.59407043]
[50.50937653 215.58383179]
[55.86783981 201.57359314]
[54.11457443 192.85163879]
[59.37834167 184.33682251]
[59.92617416 169.34683228]
[60.47400284 154.35684204]
[61.02183151 139.36685181]
[48.36278915 131.32019043]
[35.02265930 138.17883301]
[21.68252563 145.03746033]
[8.34239292 151.89610291]
[2.09120393 166.67115784]
[-13.39616871 170.85694885]
[-26.23913765 161.24249268]
[-26.58567810 145.20318604]
[-14.16995049 135.04299927]
[1.48375821 138.55596924]
[14.82389069 131.69734192]
[28.16402245 124.83869934]
[41.50415421 117.98006439]
[42.93372726 110.61756897]
[27.93845558 110.24098969]
[12.94318390 109.86441040]
[-2.05208826 109.48782349]
[-17.04735947 109.11124420]
[-30.70892525 115.30492401]
[-45.59850311 113.48818970]
[-57.37001419 104.19133759]
[-62.58750534 90.12798309]
[-59.72805405 75.40306091]
[-49.62630463 64.31456757]
[-35.23082352 60.09910202]
[-20.74347115 63.98710632]
[-10.39345074 74.84272003]
[3.65313077 80.10518646]
[17.69971275 85.36765289]
[31.74629402 90.63011932]
[45.79287338 95.89258575]
[47.22244644 88.53009033]
[37.41837311 77.17755127]
[27.61429977 65.82501221]
[17.81022644 54.47247314]
[3.64995766 59.88196564]
[-11.50654602 60.11902618]
[-25.82906342 55.15502548]
[-37.58808136 45.58939362]
[-45.36364365 32.57722855]
[-48.21680832 17.68980789]
[-45.80304337 2.72486448]
[-38.41382599 -10.51051426]
[-26.94143486 -20.41809273]
[-12.77122211 -25.80147934]
[2.38569283 -26.01060677]
[16.69903755 -21.02022171]
[28.44040871 -11.43293667]
[36.19197464 1.59353697]
[39.01770020 16.48618889]
[36.57636261 31.44665909]
[29.16276360 44.66839981]
[38.96683884 56.02093887]
[48.77091217 67.37347412]
[58.57498550 78.72601318]
[87.62043762 61.66056824]
[115.45397949 69.70536804]
[125.04907227 58.17566299]
[134.64416504 46.64595413]
[144.23927307 35.11624908]
[153.83436584 23.58654022]
[143.80499268 12.39594173]
[135.51193237 -0.13574378]
[129.13197327 -13.74140072]
[124.80108643 -28.13102531]
[122.61158752 -42.99789810]
[122.61014557 -58.02513504]
[124.79679871 -72.89243317]
[129.12493896 -87.28288269]
[135.50230408 -100.88975525]
[143.79295349 -113.42302704]
[153.82019043 -124.61554718]
[165.37026978 -134.22874451]
[178.19700623 -142.05770874]
[192.02699280 -147.93557739]
[206.56544495 -151.73704529]
[221.50247192 -153.38110352]
[236.51969910 -152.83268738]
[251.29702759 -150.10351562]
[265.51947021 -145.25172424]
[278.88391113 -138.38076782]
[291.10543823 -129.63706970]
[301.92355347 -119.20702362]
[311.10769653 -107.31292725]
[318.46209717 -94.20832062]
[323.82998657 -80.17252350]
[327.09695435 -65.50471497]
[328.19335938 -50.51752472]
[327.09585571 -35.53042221]
[323.82778931 -20.86284828]
[318.45886230 -6.82744789]
[311.10348511 6.27661419]
[301.91845703 18.17002487]
[291.09957886 28.59927368]
[278.87741089 37.34206390]
[265.51248169 44.21203995]
[251.28965759 49.06276703]
[236.51213074 51.79085541]
[221.49485779 52.33815002]
[206.55795288 50.69298935]
[192.01977539 46.89044189]
[178.19023132 41.01155472]
[165.36407471 33.18163681]
[155.76896667 44.71134186]
[146.17387390 56.24105072]
[136.57878113 67.77075958]
[126.98368835 79.30046844]
[133.05445862 92.00044250]
[133.46243286 106.07088470]
[147.26762390 111.93745422]
[161.07281494 117.80402374]
[174.87800598 123.67060089]
[188.73620605 129.41084290]
[202.64624023 135.02430725]
[218.80050659 132.20085144]
[229.11384583 144.95101929]
[222.97679138 160.15853882]
[206.70260620 162.17921448]
[197.03279114 148.93434143]
[183.12275696 143.32089233]
[175.71585083 143.73519897]
[169.01144409 137.47578430]
[155.20625305 131.60922241]
[141.40106201 125.74264526]
[127.59586334 119.87607574]
[116.63729095 134.38134766]
[98.08380890 142.33847046]
[76.01182556 139.91467285]
[75.46399689 154.90467834]
[74.91616821 169.89466858]
[74.36833191 184.88465881]
[82.42605591 172.23265076]
[93.78622437 162.43742371]
[107.48613739 156.32904053]
[122.36481476 154.42515564]
[137.16139221 156.88710022]
[150.62196350 163.50625610]
[161.60581970 173.72167969]
[169.18214417 186.66769409]
[172.70892334 201.24719238]
[171.88725281 216.22467041]
[166.78677368 230.33088684]
[157.83973694 242.37040710]
[145.80432129 251.32299805]
[131.70045471 256.42996216]
[116.72335052 257.25851440]
[102.14222717 253.73846436]
[89.19273376 246.16807556]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 18]
[3 17]
[4 16]
[5 15]
[6 14]
[7 13]
[20 154]
[21 153]
[22 152]
[23 151]
[24 36]
[25 35]
[26 34]
[27 33]
[55 78]
[56 77]
[57 76]
[58 75]
[80 130]
[81 129]
[82 128]
[83 127]
[84 126]
[132 148]
[133 147]
[134 146]
[135 145]
[136 143]
[137 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
