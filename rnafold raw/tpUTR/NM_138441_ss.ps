%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 09:25:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUGUAUUUUUAGAAAGAUCUAAGAACUAGAGUCACCCUAAAUCCUGGAGAAUACAAGAAAAAUUUGAAAAGGGGCCAGACGCUGUGGCUCAC\
) } def
/len { sequence length } bind def

/coor [
[84.55265808 114.25228119]
[70.62435150 119.82023621]
[56.69603729 125.38819885]
[42.76772690 130.95616150]
[32.82558823 143.26324463]
[18.13556290 140.80307007]
[4.20725155 146.37103271]
[-9.62709427 152.16851807]
[-23.36369514 158.19393921]
[-37.10029602 164.21937561]
[-50.83689499 170.24481201]
[-64.57349396 176.27023315]
[-78.31009674 182.29566956]
[-92.04669189 188.32110596]
[-105.78329468 194.34652710]
[-115.05416870 207.87365723]
[-131.38133240 206.33879089]
[-137.96879578 191.32089233]
[-128.03994751 178.26907349]
[-111.80872345 180.60993958]
[-98.07212830 174.58450317]
[-84.33552551 168.55906677]
[-70.59892273 162.53364563]
[-56.86232376 156.50820923]
[-43.12572479 150.48277283]
[-29.38912582 144.45735168]
[-15.65252590 138.43191528]
[-10.69400978 132.74987793]
[-1.36070693 132.44271851]
[12.56760406 126.87475586]
[21.51349831 114.96592712]
[37.19976807 117.02784729]
[51.12807846 111.45988464]
[65.05638885 105.89192963]
[78.98470306 100.32396698]
[81.99599457 86.25260162]
[93.96497345 76.47457886]
[110.48534393 76.29344177]
[106.56314850 61.81530762]
[92.01406860 56.42049026]
[83.44266510 43.48563004]
[84.14479828 27.98444939]
[93.85049438 15.87746525]
[108.82771301 11.82006168]
[123.31741333 17.37239265]
[131.74800110 30.39947319]
[130.87774658 45.89212418]
[121.04128265 57.89310837]
[124.96347809 72.37123871]
[121.51089478 57.77399445]
[121.58300018 42.77416992]
[125.17577362 28.21079063]
[132.08824158 14.89847374]
[141.93376160 3.58185601]
[154.16160583 -5.10606003]
[168.08779907 -10.67930889]
[182.93336487 -12.82614517]
[197.86791992 -11.42648506]
[212.05607605 -6.55861998]
[224.70422363 1.50516319]
[235.10485840 12.31380939]
[242.67620850 25.26272964]
[246.99479675 39.62761307]
[247.81901550 54.60494995]
[245.10279846 69.35697174]
[238.99806213 83.05850983]
[229.84628296 94.94316101]
[218.15936279 104.34614563]
[204.59104919 110.74150085]
[189.90025330 113.77149200]
[174.90875244 113.26664734]
[160.45509338 109.25518799]
[147.34776306 101.96150970]
[136.32070923 91.79450989]
[147.01463318 102.31306458]
[157.70855713 112.83161926]
[168.40248108 123.35016632]
[179.09640503 133.86871338]
[189.79034424 144.38726807]
[205.33831787 142.71562195]
[218.29440308 151.47198486]
[222.54112244 166.52188110]
[216.07330322 180.75920105]
[201.94487000 187.46153259]
[186.82681274 183.46421814]
[177.85743713 170.65469360]
[179.27178955 155.08119202]
[168.57786560 144.56265259]
[157.88392639 134.04409790]
[147.19000244 123.52554321]
[136.49607849 113.00698853]
[125.80215454 102.48844147]
[119.33853912 115.35923004]
[107.48339844 122.24481201]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[3 33]
[4 32]
[6 30]
[7 29]
[8 27]
[9 26]
[10 25]
[11 24]
[12 23]
[13 22]
[14 21]
[15 20]
[38 49]
[39 48]
[74 92]
[75 91]
[76 90]
[77 89]
[78 88]
[79 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
