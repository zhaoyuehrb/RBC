%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 11:23:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUUUGGCGGUUAAGUGAGGCCAGGCCUUUCCUUGCAAUAUCGUUAAUGGCCCUUUUCAGGGCCGCGUA\
) } def
/len { sequence length } bind def

/coor [
[179.66799927 212.31584167]
[176.63407898 206.35848999]
[175.26977539 199.78601074]
[175.68533325 193.05906677]
[177.86572266 186.65299988]
[167.14244080 176.16436768]
[156.41915894 165.67575073]
[145.69587708 155.18711853]
[134.97259521 144.69850159]
[124.24932098 134.20986938]
[113.52603912 123.72124481]
[102.80275726 113.23262024]
[91.19445801 103.73276520]
[78.79197693 95.29602051]
[66.38950348 86.85928345]
[53.98702621 78.42254639]
[35.74053955 77.63575745]
[28.45774651 61.82222748]
[15.69422436 53.94234848]
[2.93070173 46.06246948]
[-9.83282089 38.18259048]
[-22.59634399 30.30271339]
[-39.25017929 27.12685776]
[-40.80867767 10.24469471]
[-25.01771164 4.07365561]
[-14.71646500 17.53919029]
[-1.95294249 25.41906929]
[10.81058025 33.29894638]
[23.57410240 41.17882538]
[36.33762741 49.05870438]
[48.38492203 46.59513855]
[59.15600204 53.32703018]
[62.42376328 66.02006531]
[74.82624054 74.45681000]
[87.22872162 82.89354706]
[99.63119507 91.33028412]
[103.01151276 90.83480072]
[106.65482330 91.72750854]
[109.97734833 94.10890961]
[112.36819458 97.83380890]
[113.29138184 102.50933838]
[124.01466370 112.99796295]
[134.73794556 123.48658752]
[145.46122742 133.97521973]
[156.18450928 144.46383667]
[166.90779114 154.95246887]
[177.63105774 165.44108582]
[188.35433960 175.92971802]
[213.99418640 177.30989075]
[224.91683960 199.91374207]
[238.86836243 205.42326355]
[252.81988525 210.93278503]
[266.77142334 216.44230652]
[280.72296143 221.95182800]
[294.67446899 227.46134949]
[310.80722046 224.51747131]
[321.21539307 237.19033813]
[315.19195557 252.44322205]
[298.93331909 254.58525085]
[289.16494751 241.41288757]
[275.21340942 235.90336609]
[261.26190186 230.39384460]
[247.31036377 224.88430786]
[233.35884094 219.37478638]
[219.40731812 213.86526489]
[214.72108459 218.36257935]
[208.99240112 221.48069763]
[202.61853027 222.98715210]
[196.04571533 222.76171875]
[189.73809814 220.80603027]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 48]
[6 47]
[7 46]
[8 45]
[9 44]
[10 43]
[11 42]
[12 41]
[13 36]
[14 35]
[15 34]
[16 33]
[18 30]
[19 29]
[20 28]
[21 27]
[22 26]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
