%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:46:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUGCACUCGCCUUCUAAGAACCUCAAUAAAGAGACUCUGGGGUGUCUGGAGCCCAUUGAUGUCUG\
) } def
/len { sequence length } bind def

/coor [
[-13.64647102 140.85350037]
[-24.25307274 151.46009827]
[-24.42176819 167.03602600]
[-35.32946777 177.64152527]
[-50.17768478 177.38471985]
[-60.78428650 187.99131775]
[-64.50373840 203.96308899]
[-80.27191162 208.46829224]
[-91.86785889 196.87234497]
[-87.36267090 181.10417175]
[-71.39089203 177.38471985]
[-60.78428650 166.77812195]
[-61.04110336 151.92990112]
[-50.43559647 141.02220154]
[-34.85967636 140.85350037]
[-24.25307274 130.24690247]
[-27.83749771 123.70320892]
[-30.11174774 116.58918762]
[-30.98973465 109.16461182]
[-30.43641090 101.70117950]
[-28.46915817 94.47256470]
[-25.15725899 87.74440002]
[-20.61946487 81.76447296]
[-15.01973152 76.75364685]
[-8.56130219 72.89768219]
[-1.47933114 70.34035492]
[5.96768093 69.17809296]
[13.50731945 69.45634460]
[20.86322403 71.16780090]
[27.76521111 74.25259399]
[33.95920944 78.60033417]
[39.21660614 84.05408478]
[43.34267426 90.41604614]
[46.18380737 97.45467377]
[61.11981964 96.07064819]
[76.05583191 94.68662262]
[90.99184418 93.30259705]
[105.89190674 91.57395172]
[120.74806213 89.50160217]
[135.49266052 86.74536133]
[150.09422302 83.31110382]
[164.69580078 79.87684631]
[179.29737854 76.44258881]
[190.95951843 65.75125122]
[205.12019348 70.36911774]
[213.22593689 56.80178833]
[228.57131958 53.02093506]
[242.05220032 61.26966858]
[245.67059326 76.65416718]
[237.27978516 90.04707336]
[221.85789490 93.50261688]
[208.55445862 84.97068787]
[197.93670654 95.41638184]
[182.73162842 91.04415894]
[168.13006592 94.47841644]
[153.52848816 97.91267395]
[138.92691040 101.34693146]
[135.54956055 105.16052246]
[129.61450195 106.66672516]
[122.82040405 104.35776520]
[107.96424866 106.43010712]
[100.77672577 110.70237732]
[92.37586975 108.23860931]
[77.43985748 109.62263489]
[62.50384521 111.00666046]
[47.56783295 112.39068604]
[35.95123672 136.41987610]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[5 12]
[6 11]
[34 66]
[35 65]
[36 64]
[37 63]
[38 61]
[39 60]
[40 57]
[41 56]
[42 55]
[43 54]
[45 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
