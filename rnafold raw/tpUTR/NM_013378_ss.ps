%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 23:47:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGGGGUGUGAGAUGGGUGCCUCCCCUCUGCCUCCCAUUUCUGCCCCUGACCUUGGGUCCCUUUUAAACUUUCUCUGAGCCUUGCUUCCCCUCUGUAAAAUGGGUUAAUAAUAUUCAACAUGUCAACAACA\
) } def
/len { sequence length } bind def

/coor [
[40.99320602 198.39057922]
[30.02301216 188.16047668]
[24.92746735 174.05249023]
[26.82870865 159.17346191]
[35.30810547 146.80001831]
[20.99941635 151.30128479]
[6.69072771 155.80255127]
[-7.61796093 160.30383301]
[-21.92664909 164.80509949]
[-36.23534012 169.30636597]
[-43.56442642 174.91722107]
[-50.93247604 173.74119568]
[-65.34275818 177.90579224]
[-79.75303650 182.07038879]
[-94.16331482 186.23498535]
[-108.57358551 190.39958191]
[-122.98386383 194.56419373]
[-137.39414978 198.72879028]
[-151.80442810 202.89338684]
[-164.19812012 216.45373535]
[-181.04811096 211.69517517]
[-195.35681152 216.19644165]
[-199.31918335 231.10627747]
[-210.72880554 241.49011230]
[-225.94490051 244.03451538]
[-240.11207581 237.92756653]
[-248.70962524 225.11796570]
[-248.99411011 209.69323730]
[-240.87475586 196.57531738]
[-226.94241333 189.95011902]
[-211.64283752 191.93170166]
[-199.85807800 201.88775635]
[-185.54939270 197.38648987]
[-179.63786316 186.76577759]
[-167.67982483 182.93348694]
[-155.96902466 188.48310852]
[-141.55874634 184.31851196]
[-127.14846802 180.15391541]
[-112.73818970 175.98930359]
[-98.32791138 171.82470703]
[-83.91763306 167.66011047]
[-69.50735474 163.49551392]
[-55.09707642 159.33091736]
[-40.73660660 154.99768066]
[-26.42791939 150.49641418]
[-12.11923027 145.99513245]
[2.18945813 141.49386597]
[16.49814606 136.99259949]
[30.80683517 132.49133301]
[44.41791916 126.18749237]
[57.10540009 118.18575287]
[69.79288483 110.18401337]
[82.48036194 102.18227386]
[90.23445129 85.29170227]
[108.81045532 84.70046234]
[121.10893250 76.11282349]
[133.40740967 67.52519226]
[145.70588684 58.93755722]
[158.00436401 50.34992218]
[170.30284119 41.76228714]
[181.74311829 32.06073761]
[192.22465515 21.33053207]
[202.70620728 10.60032845]
[213.06124878 -0.25200453]
[223.28836060 -11.22497463]
[233.51547241 -22.19794464]
[243.74259949 -33.17091370]
[253.96971130 -44.14388275]
[246.81550598 -56.01317596]
[243.00692749 -69.32491302]
[242.80101013 -83.15641022]
[246.20530701 -96.55076599]
[252.97784424 -108.58308411]
[262.64428711 -118.42429352]
[274.53125000 -125.39832306]
[287.81298828 -129.02850342]
[301.56903076 -129.07015991]
[314.84774780 -125.52711487]
[326.73233032 -118.65089417]
[337.46252441 -129.13243103]
[348.19274902 -139.61398315]
[358.92294312 -150.09552002]
[366.02841187 -165.48864746]
[382.78698730 -162.92210388]
[384.95996094 -146.10798645]
[369.40447998 -139.36531067]
[358.67428589 -128.88377380]
[347.94409180 -118.40223694]
[337.21386719 -107.92069244]
[344.66302490 -93.50996399]
[347.33242798 -77.49016571]
[344.95324707 -61.40598297]
[337.74386597 -46.81185913]
[326.39010620 -35.12173843]
[311.97991943 -27.47210693]
[295.89910889 -24.61149979]
[279.69818115 -26.82727051]
[264.94268799 -33.91676712]
[254.71556091 -22.94379807]
[244.48844910 -11.97082710]
[234.26132202 -0.99785721]
[224.03421021 9.97511292]
[221.75367737 17.07936668]
[213.43640137 21.08186913]
[202.95486450 31.81207466]
[192.47332764 42.54227829]
[207.46791077 42.13956833]
[219.93685913 50.47775650]
[225.29257202 64.48905182]
[221.56459045 79.01840210]
[210.12448120 88.72016144]
[195.18133545 90.02485657]
[182.23301697 82.45245361]
[176.04350281 68.78900146]
[178.89047241 54.06076431]
[166.59199524 62.64839935]
[154.29351807 71.23603058]
[141.99504089 79.82366943]
[129.69656372 88.41130066]
[117.39809418 96.99893951]
[116.21330261 106.98776245]
[109.76554871 114.70829773]
[100.14781189 117.65441132]
[90.48210144 114.86975861]
[77.79462433 122.87149811]
[65.10713959 130.87322998]
[52.41965866 138.87496948]
[67.34084320 140.41061401]
[79.91854095 148.58383179]
[87.38288116 161.59474182]
[88.09007263 176.57804871]
[81.88436890 190.23416138]
[70.13240051 199.55570984]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 49]
[6 48]
[7 47]
[8 46]
[9 45]
[10 44]
[12 43]
[13 42]
[14 41]
[15 40]
[16 39]
[17 38]
[18 37]
[19 36]
[21 33]
[22 32]
[50 127]
[51 126]
[52 125]
[53 124]
[55 120]
[56 119]
[57 118]
[58 117]
[59 116]
[60 115]
[61 106]
[62 105]
[63 104]
[64 102]
[65 101]
[66 100]
[67 99]
[68 98]
[79 89]
[80 88]
[81 87]
[82 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
