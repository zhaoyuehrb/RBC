%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 10:48:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUGCAGCCAUUCUGAGUGCACCAGAAACUGUGAGGCUGCAGUGGGGACCACAGUAUUGGCUCACCUCCUCUGGGCUGUGGGCGCUUCAGGGACAGGGUUGGGACUGCCUGCUGGAUCAGAUUCCGGCCCCUUUUGUCUCGUUUGCUAAUAA\
) } def
/len { sequence length } bind def

/coor [
[73.52919006 126.20653534]
[60.96294785 134.39735413]
[48.39670563 142.58818054]
[35.91411591 150.90592957]
[23.51645660 159.34974670]
[11.11879921 167.79356384]
[-1.27885866 176.23738098]
[-13.67651653 184.68119812]
[-26.07417488 193.12503052]
[-38.47183228 201.56884766]
[-50.86949158 210.01266479]
[-54.12605667 215.87561035]
[-59.11998367 218.74028015]
[-63.94509125 218.53549194]
[-76.67475128 226.46995544]
[-80.35999298 241.60456848]
[-93.38270569 249.46990967]
[-107.78855133 245.86332703]
[-120.51821136 253.79779053]
[-133.24787903 261.73223877]
[-133.35824585 277.15921021]
[-141.81065369 290.06503296]
[-155.90800476 296.33151245]
[-171.15184021 293.95901489]
[-182.67794800 283.70462036]
[-186.80836487 268.84045410]
[-182.22508240 254.10963440]
[-170.39064026 244.21269226]
[-155.08134460 242.30772400]
[-141.18234253 249.00257874]
[-128.45266724 241.06811523]
[-115.72300720 233.13366699]
[-112.61676025 218.61172485]
[-99.82010651 210.38371277]
[-84.60921478 213.74028015]
[-71.87955475 205.80583191]
[-59.31330872 197.61500549]
[-46.91564941 189.17118835]
[-34.51799393 180.72737122]
[-22.12033463 172.28355408]
[-9.72267723 163.83972168]
[2.67498016 155.39590454]
[15.07263851 146.95208740]
[27.47029686 138.50827026]
[31.25055313 132.10598755]
[40.20588303 130.02194214]
[52.77212524 121.83111572]
[65.33837128 113.64029694]
[62.82775879 97.61026001]
[67.37030029 82.03366852]
[78.10408020 69.86604309]
[71.91059113 56.20439529]
[65.71710205 42.54274368]
[59.52361298 28.88109398]
[53.33012390 15.21944427]
[47.13663483 1.55779445]
[40.94314194 -12.10385609]
[23.12500381 -15.18676853]
[10.79892921 -28.20303917]
[8.72694683 -45.85173035]
[17.54646873 -61.09799194]
[10.80442047 -74.49742126]
[-4.45492744 -77.91594696]
[-13.90574551 -90.37451935]
[-13.08564663 -105.99058533]
[-2.38185668 -117.39070892]
[13.15162277 -119.19210815]
[26.18035698 -110.54421234]
[30.55257607 -95.53029633]
[24.20385170 -81.23947144]
[30.94589996 -67.84004211]
[43.15044022 -67.66854858]
[54.17888260 -62.27167130]
[61.89332581 -52.62680435]
[64.76903534 -40.54127502]
[62.19550323 -28.31381416]
[54.60479355 -18.29734612]
[60.79828262 -4.63569546]
[66.99177551 9.02595425]
[73.18526459 22.68760490]
[79.37875366 36.34925461]
[85.57224274 50.01090622]
[91.76573181 63.67255402]
[111.63076782 64.61339569]
[128.18043518 75.64123535]
[136.69723511 93.61256409]
[151.69030762 94.06853485]
[159.82423401 81.11528778]
[173.26094055 74.01941681]
[188.34509277 74.59804535]
[201.02946472 82.59571075]
[207.96089172 95.77982330]
[222.95396423 96.23579407]
[237.94703674 96.69176483]
[252.94009399 97.14772797]
[267.93316650 97.60369873]
[282.92623901 98.05966187]
[297.92547607 97.90765381]
[312.90621948 97.14791870]
[327.88696289 96.38817596]
[342.86770630 95.62844086]
[357.84844971 94.86870575]
[372.82919312 94.10896301]
[387.80993652 93.34922791]
[402.79071045 92.58949280]
[417.77145386 91.82975006]
[432.74371338 90.91824341]
[447.70599365 89.85504150]
[462.66827393 88.79184723]
[477.60592651 87.42562866]
[492.51281738 85.75695801]
[505.38641357 75.59807587]
[520.51879883 81.91802216]
[522.34313965 98.21537781]
[508.98266602 107.72482300]
[494.18148804 100.66384888]
[479.27459717 102.33252716]
[475.61614990 105.48519135]
[469.92190552 106.33443451]
[463.73147583 103.75411987]
[448.76919556 104.81731415]
[433.80691528 105.88051605]
[427.31967163 109.51303101]
[418.53118896 106.81050110]
[403.55044556 107.57023621]
[388.56970215 108.32997894]
[373.58892822 109.08971405]
[358.60818481 109.84944916]
[343.62744141 110.60919189]
[328.64669800 111.36892700]
[313.66595459 112.12866211]
[298.68521118 112.88839722]
[296.69290161 114.93923950]
[293.74453735 116.30023193]
[290.10775757 116.59416199]
[286.18484497 115.55104828]
[282.47027588 113.05273438]
[267.47720337 112.59676361]
[252.48413086 112.14080048]
[237.49105835 111.68482971]
[222.49800110 111.22885895]
[207.50492859 110.77289581]
[199.78514099 123.51143646]
[186.63821411 130.72352600]
[171.54678345 130.38446045]
[158.56610107 122.48518372]
[151.23432922 109.06159973]
[136.24127197 108.60562897]
[132.70429993 117.83017731]
[126.86676025 125.80046082]
[119.13928223 131.95582581]
[110.06546021 135.86325073]
[100.28358459 137.24789429]
[90.48175812 136.01234436]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 48]
[2 47]
[3 46]
[4 44]
[5 43]
[6 42]
[7 41]
[8 40]
[9 39]
[10 38]
[11 37]
[14 36]
[15 35]
[18 32]
[19 31]
[20 30]
[51 83]
[52 82]
[53 81]
[54 80]
[55 79]
[56 78]
[57 77]
[61 71]
[62 70]
[86 148]
[87 147]
[92 142]
[93 141]
[94 140]
[95 139]
[96 138]
[97 137]
[98 132]
[99 131]
[100 130]
[101 129]
[102 128]
[103 127]
[104 126]
[105 125]
[106 124]
[107 122]
[108 121]
[109 120]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
