%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:33:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACUCCUCUGACGGCAGGAAAACUGGACAUGAAUGACUGCCCCCACGCCCCUCCCCUGCAGAGUGGCCAGAUGGAGUCCUGAGCCCUGGACAUGGGCCCGGCUUUCCUGGAUAUCAGGACUUCCAAUAAAUAAAGACUCUGUAUACUGGG\
) } def
/len { sequence length } bind def

/coor [
[75.03253937 104.95082092]
[60.11256409 103.40345001]
[45.19258881 101.85607910]
[30.27261353 100.30870819]
[15.35263920 98.76133728]
[0.43266475 97.21396637]
[-14.48731041 95.66659546]
[-29.42247772 94.27349091]
[-44.37124634 93.03480530]
[-59.32001495 91.79611206]
[-74.26878357 90.55741882]
[-74.67089081 102.36148071]
[-82.55474091 114.35437775]
[-97.67284393 122.27803802]
[-111.40943909 128.30346680]
[-125.14604187 134.32890320]
[-138.88264465 140.35432434]
[-152.61924744 146.37976074]
[-150.88151550 161.39547729]
[-153.64859009 176.25598145]
[-160.67442322 189.63989258]
[-171.33427429 200.35713196]
[-184.68028259 207.45471191]
[-199.52571106 210.30151367]
[-214.55055237 208.64443970]
[-228.41876221 202.63079834]
[-239.89723206 192.79533386]
[-247.96527100 180.01260376]
[-251.90548706 165.41925049]
[-251.36752319 150.31289673]
[-246.39921570 136.03678894]
[-237.44233704 123.86034393]
[-225.29331970 114.86629486]
[-211.03245544 109.85437775]
[-195.92782593 109.27025604]
[-181.32249451 113.16586304]
[-168.51516724 121.19480896]
[-158.64466858 132.64315796]
[-144.90808105 126.61772919]
[-131.17147827 120.59230042]
[-117.43487549 114.56686401]
[-103.69827271 108.54143524]
[-102.15915680 101.20105743]
[-117.07260895 102.81006622]
[-123.21135712 89.12372589]
[-112.09183502 79.05614471]
[-99.08093262 86.52030182]
[-97.54181671 79.17993164]
[-107.70103455 68.14407349]
[-117.86026001 57.10821152]
[-132.89938354 52.19542694]
[-135.82681274 37.59133530]
[-145.98603821 26.55547714]
[-156.14526367 15.51961899]
[-171.75700378 16.41828918]
[-184.26296997 7.03028297]
[-187.75823975 -8.21166897]
[-180.59243774 -22.11078453]
[-166.14904785 -28.10432434]
[-151.24780273 -23.36232376]
[-142.92459106 -10.12380981]
[-145.10940552 5.36039591]
[-134.95018005 16.39625359]
[-124.79095459 27.43211365]
[-110.47848511 31.55554008]
[-106.82440186 46.94898987]
[-96.66517639 57.98484802]
[-86.50595856 69.02070618]
[-73.03009033 75.60865784]
[-58.08132172 76.84734344]
[-43.13255692 78.08603668]
[-28.18378830 79.32472229]
[-21.21405411 76.72634125]
[-12.93993950 80.74662018]
[1.98003507 82.29399109]
[16.90000916 83.84136200]
[31.81998444 85.38873291]
[46.73995972 86.93610382]
[61.65993500 88.48347473]
[76.57991028 90.03084564]
[94.17378235 66.73130035]
[130.82525635 71.33097839]
[132.54722595 55.60375595]
[146.23974609 49.74164963]
[154.95590210 37.53391647]
[163.67204285 25.32618713]
[172.38819885 13.11845589]
[168.30488586 -1.97659552]
[174.92666626 -16.14296532]
[189.12693787 -22.69172478]
[204.20077515 -18.53075218]
[213.03076172 -5.62473059]
[211.44764709 9.93251133]
[200.19894409 20.79531860]
[184.59593201 21.83460808]
[175.87977600 34.04233932]
[167.16362000 46.25006866]
[158.44747925 58.45780182]
[157.34893799 73.31184387]
[143.03298950 80.04712677]
[150.17219543 93.23923492]
[165.15939331 92.61936188]
[173.80046082 79.86639404]
[188.12652588 74.70721436]
[202.57263184 78.92314148]
[211.65742493 90.69618225]
[226.64460754 90.07630920]
[241.63179016 89.45643616]
[256.61898804 88.83656311]
[271.60617065 88.21669006]
[283.48599243 77.43477631]
[299.29888916 80.14250183]
[306.91455078 94.26273346]
[300.49093628 108.96363831]
[284.95562744 112.96793365]
[272.22604370 103.20387268]
[257.23886108 103.82374573]
[242.25166321 104.44362640]
[227.26448059 105.06349945]
[212.27729797 105.68337250]
[204.19573975 118.16641998]
[190.14712524 123.56089783]
[175.44395447 119.60237885]
[165.77926636 107.60654449]
[150.79206848 108.22641754]
[146.49731445 114.37499237]
[159.94699097 121.01624298]
[173.39666748 127.65749359]
[188.39643860 127.74071503]
[199.56871033 137.74972534]
[201.29405212 152.65016174]
[192.70463562 164.94740295]
[178.12078857 168.45614624]
[164.87789917 161.41156006]
[159.63691711 147.35653687]
[148.77235413 137.01434326]
[137.90777588 126.67214966]
[133.61300659 132.82072449]
[138.18925476 147.10560608]
[142.76550293 161.39050293]
[157.54475403 166.11840820]
[166.69526672 178.65028381]
[166.69845581 194.16737366]
[157.55310059 206.70300293]
[142.77578735 211.43699646]
[128.04869080 206.54904175]
[119.03468323 193.91862488]
[119.19982147 178.40243530]
[128.48062134 165.96673584]
[123.90437317 151.68185425]
[119.32812500 137.39697266]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 80]
[2 79]
[3 78]
[4 77]
[5 76]
[6 75]
[7 74]
[8 72]
[9 71]
[10 70]
[11 69]
[14 42]
[15 41]
[16 40]
[17 39]
[18 38]
[48 68]
[49 67]
[50 66]
[52 64]
[53 63]
[54 62]
[82 100]
[84 98]
[85 97]
[86 96]
[87 95]
[101 125]
[102 124]
[106 120]
[107 119]
[108 118]
[109 117]
[110 116]
[138 151]
[139 150]
[140 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
