%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 22:49:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGUCCAAACAUAAGACGUAAACUGUCUUCUUAGUGCCAAAUGCAAGCCCUUUUUAAUUUAGUUUGUAAGAAGUUUAGUUUGUAGGAAAAACACUAUUGUAAAAUAACUAGUAUCCUUUUGUUUCCUUCCGUUGAAAUAAACCUCCACUGUCGUUGGAGUAGA\
) } def
/len { sequence length } bind def

/coor [
[87.13546753 273.40924072]
[95.53250885 259.32302856]
[95.24692535 244.32574463]
[87.26871490 231.74809265]
[94.74187469 217.80311584]
[94.45629883 202.80583191]
[94.17071533 187.80854797]
[93.88513184 172.81126404]
[93.59954834 157.81398010]
[86.74491882 156.63677979]
[80.07978821 154.64987183]
[73.69945526 151.88163757]
[67.69512939 148.37167358]
[62.15266037 144.17015076]
[51.00548553 154.20710754]
[39.85831451 164.24406433]
[28.71114159 174.28102112]
[17.56397057 184.31797791]
[6.41679764 194.35493469]
[4.14464808 210.23628235]
[-9.76096249 218.23712158]
[-24.63284111 212.21990967]
[-29.06255341 196.80053711]
[-19.65200424 183.80741882]
[-3.62016153 183.20776367]
[7.52701092 173.17080688]
[18.67418289 163.13385010]
[29.82135582 153.09689331]
[40.96852875 143.05993652]
[52.11569977 133.02296448]
[42.43589783 108.35445404]
[44.70360947 81.95195007]
[58.44816971 59.29535294]
[49.17578506 47.50455475]
[39.90340042 35.71376038]
[30.63101768 23.92296410]
[21.35863113 12.13216686]
[4.70504427 16.15723991]
[-11.98369503 12.53204727]
[-25.37975121 2.02868438]
[-32.83334732 -13.21414661]
[-32.89683151 -30.12648201]
[-25.60559464 -45.32536697]
[-35.32014084 -56.75461197]
[-45.03468704 -68.18385315]
[-54.74923325 -79.61309814]
[-64.46378326 -91.04233551]
[-74.17832947 -102.47158051]
[-83.89287567 -113.90082550]
[-104.46908569 -119.78030396]
[-107.48772430 -140.17269897]
[-117.83891296 -151.02871704]
[-128.19009399 -161.88471985]
[-138.54129028 -172.74073792]
[-148.89247131 -183.59674072]
[-159.24365234 -194.45275879]
[-169.59483337 -205.30876160]
[-184.50166321 -201.60984802]
[-199.25637817 -205.87532043]
[-209.89001465 -216.95779419]
[-213.54219055 -231.87614441]
[-209.23048401 -246.61740112]
[-198.11473083 -257.21624756]
[-183.18501282 -260.82165527]
[-168.45733643 -256.46377563]
[-157.89338684 -245.31484985]
[-154.33479309 -230.37388611]
[-158.73883057 -215.65994263]
[-148.38764954 -204.80393982]
[-138.03645325 -193.94792175]
[-127.68527222 -183.09191895]
[-117.33408356 -172.23590088]
[-106.98290253 -161.37989807]
[-96.63171387 -150.52388000]
[-87.76074982 -151.76695251]
[-79.19146729 -148.71760559]
[-72.91201782 -141.94784546]
[-70.44143677 -132.90763855]
[-72.46363068 -123.61537170]
[-62.74908447 -112.18612671]
[-53.03453827 -100.75688171]
[-43.31999207 -89.32764435]
[-33.60544586 -77.89839935]
[-23.89089966 -66.46915436]
[-14.17635250 -55.03991699]
[-1.87113917 -59.35024643]
[11.19839859 -59.20808792]
[23.46689415 -54.60864639]
[33.45748520 -46.08228683]
[39.95959854 -34.63348007]
[42.17560577 -21.62248421]
[39.81862259 -8.60375404]
[33.14942932 2.85978198]
[42.42181396 14.65057850]
[51.69419861 26.44137573]
[60.96658325 38.23217010]
[70.23896790 50.02296829]
[79.23031616 45.66729355]
[88.83441162 42.91451645]
[98.76789856 41.84585190]
[108.73773956 42.49282837]
[118.44980621 44.83635712]
[127.61756897 48.80730057]
[135.97058105 54.28850937]
[143.26239014 61.11827850]
[149.27789307 69.09511566]
[153.83963013 77.98370361]
[156.81300354 87.52180481]
[158.11030579 97.42803192]
[157.69326782 107.41013336]
[172.20046997 111.22340393]
[186.70767212 115.03668213]
[201.21487427 118.84996033]
[211.15200806 107.31675720]
[225.05453491 101.26641846]
[240.14360046 101.84986115]
[253.42843628 108.89785004]
[262.29916382 120.96513367]
[265.03952026 135.62651062]
[279.54672241 139.43978882]
[294.05392456 143.25306702]
[308.56112671 147.06634521]
[323.06832886 150.87960815]
[337.57553101 154.69288635]
[352.08273315 158.50616455]
[366.58993530 162.31944275]
[378.51666260 152.39305115]
[394.00231934 151.40638733]
[407.09240723 159.73883057]
[412.75347900 174.18638611]
[408.80874634 189.19367981]
[396.77505493 198.99009705]
[381.27957153 199.80871582]
[368.28067017 191.33476257]
[362.77667236 176.82664490]
[348.26947021 173.01336670]
[333.76226807 169.20008850]
[319.25503540 165.38681030]
[304.74783325 161.57354736]
[290.24063110 157.76026917]
[275.73342896 153.94699097]
[261.22622681 150.13371277]
[251.63061523 161.55253601]
[237.97257996 167.69804382]
[222.93913269 167.30245972]
[209.51348877 160.39071655]
[200.38307190 148.28607178]
[197.40159607 133.35716248]
[182.89439392 129.54388428]
[168.38719177 125.73060608]
[153.87998962 121.91733551]
[146.46852112 134.98712158]
[135.95657349 145.72250366]
[123.04552460 153.40718079]
[108.59683228 157.52841187]
[108.88241577 172.52568054]
[109.16799164 187.52296448]
[109.45357513 202.52024841]
[109.73915863 217.51753235]
[117.73779297 231.16789246]
[110.24420929 244.04016113]
[110.52979279 259.03744507]
[119.45701599 272.79379272]
[111.76725769 287.27822876]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 162]
[3 161]
[5 159]
[6 158]
[7 157]
[8 156]
[9 155]
[14 30]
[15 29]
[16 28]
[17 27]
[18 26]
[19 25]
[33 97]
[34 96]
[35 95]
[36 94]
[37 93]
[43 85]
[44 84]
[45 83]
[46 82]
[47 81]
[48 80]
[49 79]
[51 74]
[52 73]
[53 72]
[54 71]
[55 70]
[56 69]
[57 68]
[110 151]
[111 150]
[112 149]
[113 148]
[119 142]
[120 141]
[121 140]
[122 139]
[123 138]
[124 137]
[125 136]
[126 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
