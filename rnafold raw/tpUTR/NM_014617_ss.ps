%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:59:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGUGCCUGCCUUGUUGUGAUCCCCAUAGAAACAUAAUAAAUAUACAAGUUGUGUUCCCUGCA\
) } def
/len { sequence length } bind def

/coor [
[193.51730347 111.69393921]
[190.12126160 105.32389069]
[175.12564087 105.68634033]
[160.13002014 106.04879761]
[145.13439941 106.41125488]
[130.13877869 106.77371216]
[122.77771759 120.86635590]
[109.38253021 129.43122864]
[93.50179291 130.19938660]
[79.34251404 122.96731567]
[70.65567780 109.65090179]
[55.72570038 111.09860992]
[44.73959732 122.78984833]
[28.76161385 121.34637451]
[20.04869270 107.87549591]
[25.28464127 92.71092224]
[40.45288467 87.48561096]
[53.91764832 96.20797729]
[60.41082001 92.12600708]
[69.56915283 94.69030762]
[74.90647888 81.98487854]
[85.23802948 72.86489868]
[98.50756836 69.14546967]
[112.07414246 71.56684113]
[123.23766327 79.64710999]
[129.77632141 91.77809143]
[144.77194214 91.41563416]
[159.76756287 91.05317688]
[174.76318359 90.69071960]
[189.75880432 90.32826996]
[208.33193970 73.43920135]
[231.54624939 81.33169556]
[245.29814148 75.34122467]
[259.05001831 69.35076141]
[272.80191040 63.36029053]
[286.55377197 57.36982346]
[300.30566406 51.37935257]
[314.05755615 45.38888550]
[327.80941772 39.39841461]
[329.45809937 24.12826729]
[338.53393555 11.73774719]
[352.59555054 5.55984306]
[367.86047363 7.25637960]
[380.22247314 16.37099838]
[386.35626221 30.45191002]
[384.61187744 45.71142197]
[375.45855713 58.04480362]
[361.35848999 64.13442993]
[346.10452271 62.34223557]
[333.79989624 53.15029907]
[320.04800415 59.14076614]
[306.29614258 65.13123322]
[292.54425049 71.12170410]
[278.79235840 77.11217499]
[265.04049683 83.10264587]
[251.28860474 89.09310913]
[237.53672791 95.08358002]
[237.27543640 101.99761200]
[235.03428650 108.57875061]
[230.98297119 114.26955414]
[225.44531250 118.58223724]
[218.87347412 121.14049530]
[211.81106567 121.71224976]
[204.84812927 120.23058319]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 30]
[3 29]
[4 28]
[5 27]
[6 26]
[11 20]
[12 18]
[32 57]
[33 56]
[34 55]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
