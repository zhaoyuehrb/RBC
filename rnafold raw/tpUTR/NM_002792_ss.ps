%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 00:35:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAAUAAAAUGUCUUUGCUUGUAAUUUUUAAAUUCAUAUCAAUCAUGGAUGAGUCUCGAUGUGUAGGCCUUUCCAUUCCAUUUAUUCACACUGAGUGUCCUACAAUAAACUUCCGUAUUUUUAACCUGUU\
) } def
/len { sequence length } bind def

/coor [
[-26.28855705 240.05786133]
[-37.91928864 249.53025818]
[-49.55002213 259.00262451]
[-61.18075562 268.47500610]
[-72.81148529 277.94741821]
[-84.09402466 287.83193970]
[-95.01376343 298.11587524]
[-105.93350983 308.39981079]
[-116.85325623 318.68374634]
[-127.77299500 328.96768188]
[-128.40846252 344.53152466]
[-139.62913513 354.80535889]
[-154.46298218 354.10360718]
[-153.38703918 369.70413208]
[-162.63237000 382.31594849]
[-177.83363342 385.98413086]
[-191.81326294 378.97668457]
[-197.97047424 364.60229492]
[-193.39805603 349.64813232]
[-180.25494385 341.17510986]
[-164.74691772 343.18386841]
[-164.55857849 328.33462524]
[-153.63090515 317.74969482]
[-138.05693054 318.04794312]
[-127.13718414 307.76400757]
[-116.21743774 297.48007202]
[-105.29769897 287.19613647]
[-94.37795258 276.91220093]
[-93.93854523 273.31872559]
[-91.67449188 269.77554321]
[-87.63708496 267.16708374]
[-82.28386688 266.31668091]
[-70.65313721 256.84429932]
[-59.02240372 247.37190247]
[-47.39167404 237.89952087]
[-35.76094055 228.42713928]
[-43.18893814 211.43063354]
[-45.20336914 192.97618103]
[-41.61125565 174.74732971]
[-32.73150635 158.40982056]
[-19.36664009 145.45935059]
[-2.73025608 137.08464050]
[15.66315842 134.05831909]
[34.13610077 136.66567993]
[51.00104904 144.67778015]
[60.88559723 133.39524841]
[70.77014923 122.11270905]
[80.65470123 110.83016968]
[90.53925323 99.54763031]
[91.39530182 94.26338196]
[95.19867706 89.86836243]
[101.17839813 87.97579193]
[111.59252167 77.18014526]
[122.00664520 66.38449860]
[117.18067169 55.19807053]
[116.45514679 43.07157898]
[119.89311981 31.45637131]
[127.06076050 21.73450851]
[137.08195496 15.05432606]
[148.74531555 12.19480991]
[160.65065002 13.47481155]
[171.37698364 18.71768570]
[182.54017639 8.69856167]
[193.70338440 -1.32056248]
[204.86659241 -11.33968735]
[216.02980042 -21.35881233]
[227.19300842 -31.37793541]
[238.23527527 -41.53019333]
[249.03091431 -51.94431686]
[259.70092773 -62.48713684]
[270.37091064 -73.02996063]
[263.04043579 -86.22718048]
[259.54348755 -100.91301727]
[260.13955688 -115.99768829]
[264.78439331 -130.36180115]
[273.13336182 -142.93946838]
[284.56689453 -152.79730225]
[298.23654175 -159.20382690]
[313.12789917 -161.68360901]
[328.13598633 -160.05264282]
[342.14706421 -154.43196106]
[354.12142944 -145.23863220]
[363.17053223 -133.15489197]
[368.62280273 -119.07743073]
[370.07369995 -104.05086517]
[367.41552734 -89.19029236]
[360.84558105 -75.59844971]
[350.85134888 -64.28395081]
[338.17446899 -56.08639908]
[323.75570679 -51.61411285]
[308.66497803 -51.19896698]
[294.02212524 -54.87176132]
[280.91372681 -62.35995483]
[270.24374390 -51.81713486]
[259.57373047 -41.27431488]
[257.00137329 -34.26570129]
[248.51919556 -30.61044884]
[245.77952576 -23.66553497]
[237.21212769 -20.21473122]
[226.04891968 -10.19560623]
[214.88571167 -0.17648199]
[203.72250366 9.84264278]
[192.55931091 19.86176682]
[181.39610291 29.88089180]
[185.97735596 47.29949570]
[181.14926147 64.73851776]
[168.14181519 77.43831635]
[150.42924500 81.88864136]
[132.80229187 76.79862213]
[122.38816833 87.59426880]
[111.97404480 98.38991547]
[101.82179260 109.43218231]
[91.93724060 120.71472168]
[82.05268860 131.99725342]
[72.16813660 143.27980042]
[62.28358459 154.56233215]
[69.26426697 164.10554504]
[74.29773712 174.79843140]
[77.20169067 186.24884033]
[77.87187195 198.03726196]
[76.28584290 209.73219299]
[72.50369263 220.90597534]
[66.66578674 231.15040588]
[58.98756790 240.09162903]
[49.75156784 247.40382385]
[39.29704666 252.82106018]
[28.00752068 256.14694214]
[16.29668808 257.26177979]
[4.59327555 256.12680054]
[-6.67466259 252.78565979]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 34]
[4 33]
[5 32]
[6 28]
[7 27]
[8 26]
[9 25]
[10 24]
[13 21]
[45 116]
[46 115]
[47 114]
[48 113]
[49 112]
[52 111]
[53 110]
[54 109]
[62 104]
[63 103]
[64 102]
[65 101]
[66 100]
[67 99]
[68 97]
[69 95]
[70 94]
[71 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
