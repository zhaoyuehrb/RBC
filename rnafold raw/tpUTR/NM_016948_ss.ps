%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:46:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGUCAGGAUGAAGCCCCAUGCCACUCCACACUGCUGGGACAUGGCAGGGACUUCACAGUGGGGGUUUUUAGCUGGCUCACAGGGCUCCCUCAGCCUGGGGAACAUUAAAGGUUUUCUACAAAUACAGUCA\
) } def
/len { sequence length } bind def

/coor [
[81.81111145 166.03125000]
[94.32942963 157.76736450]
[108.70047760 153.46934509]
[123.70043945 153.50321960]
[138.05229187 157.86624146]
[128.50193787 146.29945374]
[118.95158386 134.73265076]
[109.40122986 123.16585541]
[89.34440613 122.61633301]
[76.15068054 107.50000000]
[61.15068054 107.50000000]
[46.15068054 107.50000000]
[31.15067863 107.50000000]
[16.15067863 107.50000000]
[2.35050654 115.23729706]
[-10.37676525 107.50000000]
[-25.37676620 107.50000000]
[-40.37676620 107.50000000]
[-49.05569077 110.65389252]
[-55.73266983 107.31725311]
[-70.72842407 106.96028900]
[-85.72417450 106.60332489]
[-100.71992493 106.24636078]
[-115.71567535 105.88939667]
[-131.60829163 115.10049438]
[-146.25135803 105.50421143]
[-161.25135803 105.50421143]
[-176.25135803 105.50421143]
[-184.93028259 108.65810394]
[-191.60726929 105.32147217]
[-206.60302734 104.96450043]
[-220.72904968 113.29439545]
[-234.87091064 104.99137115]
[-234.48063660 88.59687042]
[-219.95973206 80.97615051]
[-206.24604797 89.96875000]
[-191.25030518 90.32571411]
[-176.25135803 90.50421143]
[-161.25135803 90.50421143]
[-146.25135803 90.50421143]
[-137.42295837 82.14577484]
[-124.86351776 82.08084869]
[-115.35871124 90.89364624]
[-100.36296082 91.25061035]
[-85.36721039 91.60757446]
[-70.37145233 91.96453857]
[-55.37570190 92.32150269]
[-40.37676620 92.50000000]
[-25.37676620 92.50000000]
[-10.37676525 92.50000000]
[2.35050654 84.76270294]
[16.15067863 92.50000000]
[31.15067863 92.50000000]
[46.15068054 92.50000000]
[61.15068054 92.50000000]
[76.15068054 92.50000000]
[82.15452576 82.49060059]
[92.04798126 76.29756165]
[103.67466736 75.27072906]
[102.74496460 59.47686005]
[115.26568604 51.40959549]
[121.81985474 37.91727066]
[128.37402344 24.42494392]
[134.92819214 10.93261623]
[141.48236084 -2.55971074]
[148.03652954 -16.05203819]
[154.59069824 -29.54436493]
[139.70014954 -27.73563766]
[128.83241272 -38.07451630]
[129.89666748 -53.03671646]
[142.11837769 -61.73324966]
[156.60299683 -57.83507919]
[162.80911255 -44.17851639]
[170.91871643 -56.79732132]
[179.02833557 -69.41612244]
[177.03686523 -85.33509827]
[188.34384155 -96.71630859]
[204.27549744 -94.82906342]
[212.61044312 -81.12110138]
[206.95481873 -66.10799408]
[191.64712524 -61.30651093]
[183.53752136 -48.68770981]
[175.42790222 -36.06890488]
[168.08302307 -22.99019623]
[161.52885437 -9.49787045]
[154.97468567 3.99445701]
[148.42051697 17.48678398]
[141.86634827 30.97911072]
[135.31217957 44.47143936]
[128.75801086 57.96376419]
[130.15650940 72.79257202]
[117.16699219 81.82489777]
[123.47959900 91.41229248]
[124.84236908 102.81010437]
[120.96802521 113.61550903]
[130.51837158 125.18230438]
[140.06872559 136.74909973]
[149.61907959 148.31588745]
[161.51937866 157.44731140]
[175.16386414 163.67854309]
[188.80834961 169.90975952]
[202.45281982 176.14099121]
[216.09730530 182.37220764]
[229.74179077 188.60343933]
[243.78266907 181.71957397]
[258.95098877 185.52168274]
[268.08471680 198.21455383]
[266.87121582 213.80497742]
[255.88343811 224.93164062]
[240.30947876 226.34088135]
[227.50289917 217.36729431]
[223.51055908 202.24792480]
[209.86607361 196.01669312]
[196.22160339 189.78547668]
[182.57711792 183.55424500]
[168.93263245 177.32301331]
[155.28816223 171.09179688]
[163.21690369 183.82502747]
[167.13200378 198.30506897]
[166.70004272 213.29885864]
[161.95783997 227.52951050]
[153.30920410 239.78515625]
[141.49064636 249.02214050]
[127.50863647 254.45384216]
[112.55386353 255.61770630]
[97.89984131 252.41461182]
[84.79450989 245.11734009]
[74.35388947 234.34732056]
[67.46710205 221.02169800]
[64.72061157 206.27528381]
[66.34830475 191.36384583]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 98]
[6 97]
[7 96]
[8 95]
[10 56]
[11 55]
[12 54]
[13 53]
[14 52]
[16 50]
[17 49]
[18 48]
[20 47]
[21 46]
[22 45]
[23 44]
[24 43]
[26 40]
[27 39]
[28 38]
[30 37]
[31 36]
[59 92]
[61 90]
[62 89]
[63 88]
[64 87]
[65 86]
[66 85]
[67 84]
[73 83]
[74 82]
[75 81]
[99 117]
[100 116]
[101 115]
[102 114]
[103 113]
[104 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
