%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 02:09:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGGUCAACGGCCCAAGGGCCUCCUGCCCUGUCCUGCCUUGGACACUUCCCUGAGAAGCCCCUUCCACUCUCCCACCCACCCUCUUCAAAUGUUUACUAUAUAGAGUAUUCAAAUAAACUGCUGCUUAAUCUUG\
) } def
/len { sequence length } bind def

/coor [
[97.64137268 309.51464844]
[94.28249359 293.82714844]
[104.56426239 281.51193237]
[104.56426239 266.51193237]
[104.56426239 251.51193237]
[104.56426239 236.51193237]
[96.82696533 223.78465271]
[104.56426239 209.98448181]
[104.56426239 194.98448181]
[104.39101410 179.98548889]
[104.04454803 164.98948669]
[103.69808197 149.99348450]
[103.35160828 134.99748230]
[96.92980957 131.12315369]
[83.79748535 138.37174988]
[84.08619690 123.37449646]
[77.66439819 119.50016785]
[64.23694611 126.18624115]
[50.80949783 132.87231445]
[37.38204575 139.55839539]
[23.95459747 146.24447632]
[17.51343918 160.93769836]
[1.97338712 164.92347717]
[-10.74455929 155.14424133]
[-10.88428020 139.10179138]
[1.66140544 129.10252380]
[17.26852226 132.81701660]
[30.69597054 126.13094330]
[44.12342072 119.44487000]
[57.55086899 112.75879669]
[70.97831726 106.07272339]
[69.07769775 91.19361877]
[54.40069580 88.09754181]
[39.72369766 85.00146484]
[25.04669952 81.90538788]
[11.94387150 90.74232483]
[-3.55372238 87.64392090]
[-12.25163460 74.44839478]
[-8.98954868 58.98442459]
[4.29719782 50.42650986]
[19.72581291 53.85190582]
[28.14277458 67.22839355]
[42.81977463 70.32447052]
[57.49677277 73.42054749]
[72.17377472 76.51661682]
[77.09712219 70.85882568]
[65.70117950 61.10523224]
[51.93891144 55.13866806]
[53.28960800 40.19960403]
[67.89887238 36.79821777]
[75.70933533 49.60409546]
[86.94381714 59.54323578]
[91.86716461 53.88544083]
[86.77305603 39.77692795]
[80.86359406 32.69144821]
[81.72834015 25.28328705]
[76.96147156 11.06087780]
[72.19459534 -3.16153193]
[67.42772675 -17.38394165]
[56.66128540 -30.48050880]
[66.26558685 -44.45168304]
[82.34949493 -39.09032822]
[81.65013885 -22.15081215]
[86.41700745 -7.92840338]
[91.18387604 6.29400635]
[95.95075226 20.51641655]
[100.88156891 34.68281937]
[105.97567749 48.79133224]
[108.26915741 33.96770477]
[110.56263733 19.14407539]
[113.04203796 4.35040951]
[118.95004272 -9.43710232]
[127.95140076 -21.43608475]
[139.53532410 -30.96565628]
[153.04447937 -37.48505783]
[167.71229553 -40.62434387]
[182.70645142 -40.20537567]
[197.17608643 -36.25192642]
[210.30010986 -28.98834229]
[221.33383179 -18.82678795]
[229.65110779 -6.34388638]
[234.77999878 7.75201893]
[236.42944336 22.66105461]
[234.50585938 37.53720093]
[229.11839294 51.53631592]
[220.57275391 63.86401367]
[209.35386658 73.82075500]
[196.09835815 80.84154510]
[181.55841064 84.52799225]
[166.55995178 84.67099762]
[153.23361206 91.55641174]
[139.90728760 98.44181824]
[154.90327454 98.78828430]
[166.28507996 88.15379333]
[181.48822021 88.71878052]
[191.55644226 99.63512421]
[206.55242920 99.98159027]
[221.54843140 100.32805634]
[236.54443359 100.67453003]
[247.80036926 89.58042145]
[263.60342407 89.77839661]
[274.57791138 101.15100098]
[274.21286011 116.95107269]
[262.72485352 127.80471039]
[246.92953491 127.27263641]
[236.19796753 115.67052460]
[221.20196533 115.32405853]
[206.20596313 114.97759247]
[191.20997620 114.63111877]
[180.64833069 125.07082367]
[165.43531799 124.93308258]
[154.55680847 113.78428650]
[139.56080627 113.43781281]
[134.25750732 118.74111938]
[147.25163269 126.23463440]
[160.71310425 132.85192871]
[163.16558838 147.65008545]
[152.55851746 158.25622559]
[137.76058960 155.80245972]
[131.14442444 142.34184265]
[123.65090942 129.34771729]
[118.34761047 134.65101624]
[118.69407654 149.64701843]
[119.04055023 164.64302063]
[119.38701630 179.63900757]
[122.73843384 188.23516846]
[119.56426239 194.98448181]
[119.56426239 209.98448181]
[127.30155945 223.78465271]
[119.56426239 236.51193237]
[119.56426239 251.51193237]
[119.56426239 266.51193237]
[119.56426239 281.51193237]
[129.84603882 293.82714844]
[126.48715210 309.51464844]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 133]
[4 132]
[5 131]
[6 130]
[8 128]
[9 127]
[10 125]
[11 124]
[12 123]
[13 122]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[32 45]
[33 44]
[34 43]
[35 42]
[53 68]
[54 67]
[56 66]
[57 65]
[58 64]
[59 63]
[92 113]
[93 112]
[96 109]
[97 108]
[98 107]
[99 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
