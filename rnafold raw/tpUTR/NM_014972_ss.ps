%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 11:51:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUCCGCAGAGGUGACCGAAAAGCCGUAUGAUGAUGUUCCCGAUUUCUCUGUUGGUCGGAGUCGGCCAGUUGCCUGAAGUAGGGAAGCUGAGUGUGUCGCUCCCUGGUCCACUGUUUCUCCUAUAAAUGUAAAUGGGUCACGCUC\
) } def
/len { sequence length } bind def

/coor [
[69.64151764 311.85095215]
[66.77413940 326.57434082]
[72.61641693 341.89752197]
[62.05881119 354.44619751]
[45.96207809 351.31134033]
[40.88515854 335.71786499]
[52.05074692 323.70697021]
[54.91812897 308.98358154]
[49.75643921 295.01196289]
[59.98907852 282.94531250]
[62.85645676 268.22192383]
[65.72383881 253.49855042]
[68.43372345 238.74536133]
[70.98581696 223.96406555]
[73.53790283 209.18275452]
[76.08999634 194.40145874]
[78.64208221 179.62016296]
[81.19417572 164.83885193]
[75.73509216 150.98072815]
[85.70753479 138.69818115]
[70.09645844 130.07171631]
[59.21846390 115.32235718]
[55.38676071 96.89875793]
[59.69988251 78.07780457]
[45.73677826 72.59769440]
[31.77367210 67.11757660]
[17.81056595 61.63746262]
[8.60648632 61.40606308]
[3.60967731 55.88816071]
[-10.23313141 50.11090851]
[-24.70341873 55.87706375]
[-38.65969467 49.82091141]
[-44.06766891 35.99017334]
[-57.91047668 30.21291924]
[-71.75328827 24.43566704]
[-68.95158386 39.17169189]
[-78.55867004 50.69141388]
[-93.55826569 50.58172226]
[-102.99584198 38.92272568]
[-99.97891998 24.22924995]
[-86.71125793 17.23229027]
[-99.85894012 10.01160431]
[-113.00662994 2.79091787]
[-126.15431976 -4.42976809]
[-139.30200195 -11.65045452]
[-154.40493774 -6.99461555]
[-168.33726501 -14.45558548]
[-172.83316040 -29.60690308]
[-165.22531128 -43.45956039]
[-150.02729797 -47.79502106]
[-136.25585938 -40.04113388]
[-132.08131409 -24.79814148]
[-118.93363190 -17.57745552]
[-105.78594208 -10.35676956]
[-92.63825226 -3.13608360]
[-79.49057007 4.08460236]
[-65.97603607 10.59285831]
[-52.13322449 16.37011147]
[-38.29041672 22.14736176]
[-24.65496445 16.26433372]
[-10.53408909 21.92609215]
[-4.45587969 36.26809692]
[9.38692951 42.04534912]
[23.29067993 47.67435455]
[37.25378799 53.15447235]
[51.21689224 58.63458633]
[65.18000031 64.11470032]
[77.39018250 55.40198135]
[76.74923706 40.41568375]
[76.10829163 25.42938232]
[66.85753632 11.88849449]
[74.20184326 -2.77415228]
[90.58601379 -3.47488356]
[99.15541840 10.50715256]
[91.09458923 24.78843689]
[91.73553467 39.77473831]
[92.37648010 54.76103592]
[110.57920074 56.94508743]
[125.85870361 65.90180969]
[135.92106628 79.71451569]
[150.10557556 74.83604431]
[164.29010010 69.95757294]
[178.47460938 65.07910156]
[192.65913391 60.20063019]
[206.79071045 55.17087173]
[220.86773682 49.99039459]
[234.94476318 44.80992126]
[249.02178955 39.62944412]
[263.09881592 34.44896698]
[267.69497681 29.53795433]
[273.25195312 27.97529984]
[277.88958740 29.36199379]
[292.17510986 24.78775787]
[306.46063232 20.21352196]
[320.74615479 15.63928509]
[328.02667236 10.00343323]
[335.38607788 11.12346935]
[346.41439819 -0.22056182]
[360.81707764 3.57567930]
[365.86181641 -11.09845829]
[378.58761597 -19.97727776]
[394.10116577 -19.64669037]
[406.43719482 -10.23381519]
[410.85223389 4.64190626]
[405.64862061 19.26045418]
[392.82723999 28.00070000]
[377.31817627 27.50184059]
[365.08499146 17.95569801]
[355.08523560 28.99445724]
[339.65399170 25.50348663]
[325.32040405 29.92481422]
[311.03488159 34.49905014]
[296.74932861 39.07328796]
[282.46380615 43.64752579]
[268.27929688 48.52599335]
[254.20227051 53.70647049]
[240.12524414 58.88694763]
[226.04821777 64.06742096]
[211.97119141 69.24789429]
[206.74316406 74.54724884]
[197.53759766 74.38514709]
[183.35308838 79.26361847]
[169.16856384 84.14208984]
[154.98405457 89.02056122]
[140.79953003 93.89903259]
[141.24290466 100.91998291]
[140.48690796 107.91418457]
[138.55351257 114.67823029]
[135.49894714 121.01542664]
[131.41206360 126.74147797]
[126.41167450 131.68986511]
[120.64321899 135.71667480]
[114.27444458 138.70483398]
[107.49055481 140.56741333]
[100.48883820 141.25027466]
[105.76537323 156.16564941]
[95.97547150 167.39094543]
[93.42338562 182.17224121]
[90.87129211 196.95355225]
[88.31920624 211.73484802]
[85.76711273 226.51614380]
[83.21502686 241.29745483]
[84.84425354 250.35914612]
[80.44722748 256.36593628]
[77.57984161 271.08932495]
[74.71246338 285.81271362]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 8]
[2 7]
[10 146]
[11 145]
[12 144]
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[20 135]
[24 67]
[25 66]
[26 65]
[27 64]
[29 63]
[30 62]
[33 59]
[34 58]
[35 57]
[41 56]
[42 55]
[43 54]
[44 53]
[45 52]
[68 77]
[69 76]
[70 75]
[80 125]
[81 124]
[82 123]
[83 122]
[84 121]
[85 119]
[86 118]
[87 117]
[88 116]
[89 115]
[92 114]
[93 113]
[94 112]
[95 111]
[97 110]
[99 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
