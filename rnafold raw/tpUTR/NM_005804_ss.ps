%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 17:07:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACCACGUGCCAGAGCCGCCCACCCGGAGCCGCCCGCAUGCAGCUUCACCUCCCCUUUCCAGGCGCCACUGUUGAGAAGCUAGAGAUUGUAUGAGAAUAAACUUGUUAUUAUGGAAGCCUGGCUCCCACCCCAUCUA\
) } def
/len { sequence length } bind def

/coor [
[71.45707703 191.94654846]
[64.68156433 178.56401062]
[61.85618210 163.83250427]
[63.19971085 148.89279175]
[68.60811615 134.90176392]
[77.66258240 122.94280243]
[89.65770721 113.94435120]
[76.39408875 120.94981384]
[63.13047409 127.95527649]
[49.86685944 134.96073914]
[36.60324097 141.96620178]
[32.02935028 154.08497620]
[20.76907349 159.62931824]
[9.14432526 156.09794617]
[2.80023646 162.78936768]
[-4.65408802 162.79788208]
[-18.22071457 169.19683838]
[-27.40145683 182.08187866]
[-42.21324158 180.51336670]
[-55.77986908 186.91232300]
[-69.27331543 193.46418762]
[-82.69186401 200.16810608]
[-91.27562714 214.14132690]
[-107.65907288 213.42376709]
[-114.98831177 198.75358582]
[-105.72365570 185.22219849]
[-89.39579010 186.74955750]
[-75.97724152 180.04563904]
[-71.36058807 174.19297791]
[-62.17882538 173.34570312]
[-48.61219788 166.94674683]
[-40.40183258 154.51937866]
[-24.61967087 155.63020325]
[-11.05304527 149.23124695]
[2.44040394 142.67939758]
[11.25895119 127.54868317]
[29.59778214 128.70257568]
[42.86139679 121.69712067]
[56.12501526 114.69165802]
[69.38863373 107.68619537]
[82.65224457 100.68073273]
[67.65373230 100.46968842]
[53.78375626 106.18141174]
[38.78552628 105.95086670]
[25.09765625 99.81553650]
[14.94569969 88.77299500]
[9.98029518 74.61867523]
[11.00878429 59.65397644]
[17.86394119 46.31205750]
[29.43116379 36.76222229]
[43.82970047 32.55720901]
[58.71844864 34.38072586]
[71.67659760 41.93627930]
[80.59723663 53.99539185]
[84.02993011 68.59717560]
[92.93493652 80.66783142]
[90.90704346 65.80554199]
[88.87915039 50.94325638]
[76.57949066 41.38520813]
[74.73463440 26.28384590]
[83.92256927 14.61690807]
[81.89467621 -0.24538094]
[79.86678314 -15.10766983]
[67.13317871 -24.46880722]
[64.83110809 -40.10453796]
[74.32634735 -52.73845673]
[89.98554230 -54.87508774]
[102.51837158 -45.24680328]
[104.48931885 -29.56589317]
[94.72907257 -17.13556671]
[96.75696564 -2.27327704]
[98.78485870 12.58901215]
[110.76255798 21.36799049]
[113.03084564 36.41157532]
[103.74143982 48.91535950]
[105.76933289 63.77764893]
[107.79722595 78.63993835]
[110.31285095 85.87813568]
[109.67050934 92.50566864]
[124.59299469 90.98270416]
[139.51547241 89.45973969]
[154.43795776 87.93677521]
[169.36045837 86.41381073]
[184.28294373 84.89084625]
[192.58409119 80.87667847]
[199.55931091 83.50600433]
[212.70491028 74.70237732]
[226.00379944 81.40973663]
[240.95689392 80.22440338]
[254.10249329 71.42077637]
[267.40136719 78.12814331]
[282.35446167 76.94281006]
[297.30755615 75.75746918]
[312.26065063 74.57213593]
[327.21374512 73.38680267]
[340.35934448 64.58317566]
[353.65823364 71.29053497]
[368.61132812 70.10520172]
[383.56442261 68.91986847]
[398.51751709 67.73453522]
[411.71316528 57.99763107]
[426.63308716 64.80403137]
[427.92898560 81.15190125]
[414.26773071 90.22394562]
[399.70285034 82.68762207]
[384.74975586 83.87296295]
[369.79666138 85.05829620]
[354.84356689 86.24362946]
[342.76751709 94.96247864]
[328.39907837 88.33988953]
[313.44598389 89.52523041]
[298.49288940 90.71056366]
[283.53979492 91.89589691]
[268.58670044 93.08123779]
[256.51065063 101.80007935]
[242.14222717 95.17749786]
[227.18913269 96.36283112]
[215.11308289 105.08168030]
[200.74464417 98.45909119]
[185.80590820 99.81333160]
[170.88342285 101.33629608]
[155.96093750 102.85926056]
[141.03843689 104.38222504]
[126.11595917 105.90518951]
[111.19347382 107.42815399]
[126.16993713 108.26805878]
[140.33509827 113.20246887]
[152.59204102 121.84927368]
[161.99163818 133.53890991]
[167.80603027 147.36616516]
[169.58496094 162.26029968]
[167.19067383 177.06797791]
[160.80857849 190.64254761]
[150.93287659 201.93283081]
[138.32832336 210.06455994]
[123.97094727 214.40805054]
[108.97254181 214.62693787]
[94.49452972 210.70428467]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 41]
[8 40]
[9 39]
[10 38]
[11 37]
[14 35]
[16 34]
[17 33]
[19 31]
[20 30]
[21 28]
[22 27]
[56 77]
[57 76]
[58 75]
[61 72]
[62 71]
[63 70]
[79 125]
[80 124]
[81 123]
[82 122]
[83 121]
[84 120]
[86 119]
[88 117]
[89 116]
[91 114]
[92 113]
[93 112]
[94 111]
[95 110]
[97 108]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
