%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 00:56:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGGGCGUCUUCCUGCCCCAUGCUCCCCUGCCCCCCACCACCUGCCUGCUUGCUUCUCUGGCUGCCUGGUCAGUGCAGAGGUGCCCCCUGCAGAUGUUCAAUAAAGGAGACAAGUGCUUUCCCAGCUCUUUUCCUGCACCACC\
) } def
/len { sequence length } bind def

/coor [
[100.91899109 259.56002808]
[103.52367401 240.35414124]
[103.84641266 225.35762024]
[104.16915894 210.36109924]
[104.49189758 195.36456299]
[104.81463623 180.36804199]
[104.97602081 165.36891174]
[104.97602081 150.36891174]
[88.58030701 148.66992188]
[73.80059814 141.84397888]
[62.17103195 130.74458313]
[54.85142517 116.66054535]
[52.51224136 101.16727448]
[55.27498245 85.95082855]
[62.71300507 72.62449646]
[52.22113037 61.90439987]
[41.72925568 51.18429565]
[31.23738098 40.46419525]
[16.78880501 45.26002884]
[1.75206292 43.31493759]
[-10.89726830 35.06784058]
[-18.67952156 22.19937134]
[-20.09696198 7.28963232]
[-14.92176819 -6.69903660]
[-25.41364288 -17.41913795]
[-40.59593201 -21.86983490]
[-43.96848679 -36.37759399]
[-54.46036148 -47.09769821]
[-69.64264679 -51.54839325]
[-73.01520538 -66.05615234]
[-83.50708008 -76.77625275]
[-93.99895477 -87.49635315]
[-104.49082947 -98.21645355]
[-117.88117981 -94.03759766]
[-131.69752502 -96.04189301]
[-143.23831177 -103.77956390]
[-150.27195740 -115.68547821]
[-151.46829224 -129.39541626]
[-146.64971924 -142.21548462]
[-156.90852356 -153.15884399]
[-167.16731262 -164.10220337]
[-177.42610168 -175.04557800]
[-194.14237976 -172.70204163]
[-208.82887268 -180.68112183]
[-215.81971741 -195.68025208]
[-212.55177307 -211.73355103]
[-223.04364014 -222.45364380]
[-233.53552246 -233.17375183]
[-247.79608154 -227.82994080]
[-262.99688721 -228.75488281]
[-276.50430298 -235.78836060]
[-285.97808838 -247.71174622]
[-289.77682495 -262.45925903]
[-287.24243164 -277.47579956]
[-278.81393433 -290.15966797]
[-265.95166016 -298.31329346]
[-250.88406372 -300.52404785]
[-236.22169495 -296.40884399]
[-224.50489807 -286.68069458]
[-217.76368713 -273.02508545]
[-217.16600037 -257.80789185]
[-222.81541443 -243.66561890]
[-212.32354736 -232.94552612]
[-201.83166504 -222.22541809]
[-188.82040405 -225.39054871]
[-175.84530640 -221.66569519]
[-166.34272766 -211.92559814]
[-162.88455200 -198.65254211]
[-166.48274231 -185.30436707]
[-156.22395325 -174.36100769]
[-145.96514893 -163.41763306]
[-135.70635986 -152.47427368]
[-120.10105896 -156.53753662]
[-104.48049164 -152.17147827]
[-93.11310577 -140.47132874]
[-89.15425110 -124.54956055]
[-93.77072906 -108.70833588]
[-83.27885437 -97.98822784]
[-72.78697968 -87.26812744]
[-62.29510117 -76.54802704]
[-47.86326218 -72.86410522]
[-43.74026108 -57.58957291]
[-33.24838638 -46.86946869]
[-18.81654549 -43.18554688]
[-14.69354248 -27.91101265]
[-4.20166779 -17.19091225]
[9.89511299 -22.06392479]
[24.77090263 -20.32601357]
[37.46894836 -12.26868248]
[45.44197464 0.55516577]
[47.06307983 15.63027763]
[41.95748138 29.97232246]
[52.44935608 40.69242096]
[62.94123077 51.41252136]
[73.43310547 62.13262558]
[82.84325409 56.65135574]
[93.35302734 53.48913193]
[104.39524078 52.85794830]
[115.36430359 54.83207703]
[125.64937592 59.34181976]
[134.66842651 66.17518616]
[141.90107727 74.98760986]
[146.91864014 85.31914520]
[149.40931702 96.61844635]
[149.19737244 108.27211761]
[146.25486755 119.63806152]
[140.70542908 130.08081055]
[153.58688354 137.76638794]
[166.46835327 145.45195007]
[179.34980774 153.13752747]
[192.23126221 160.82310486]
[205.11273193 168.50866699]
[211.82414246 168.99319458]
[216.53520203 172.33253479]
[218.37290955 176.81219482]
[230.91180420 185.04484558]
[246.69427490 186.15116882]
[253.08676147 199.60424805]
[265.62564087 207.83688354]
[278.16452026 216.06953430]
[294.10220337 214.23385620]
[305.37228394 225.65161133]
[303.32931519 241.56405640]
[289.54049683 249.76452637]
[274.58340454 243.96232605]
[269.93188477 228.60841370]
[257.39300537 220.37576294]
[244.85412598 212.14312744]
[229.96850586 211.62565613]
[222.67915344 197.58372498]
[210.14027405 189.35107422]
[197.42715454 181.39012146]
[184.54570007 173.70455933]
[171.66423035 166.01898193]
[158.78277588 158.33341980]
[145.90132141 150.64784241]
[133.01986694 142.96226501]
[119.97602081 150.36891174]
[119.97602081 165.36891174]
[123.12364197 174.02287292]
[119.81116486 180.69078064]
[119.48842621 195.68730164]
[119.16567993 210.68383789]
[118.84294128 225.68035889]
[118.52020264 240.67689514]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 145]
[3 144]
[4 143]
[5 142]
[6 141]
[7 139]
[8 138]
[15 95]
[16 94]
[17 93]
[18 92]
[24 86]
[25 85]
[27 83]
[28 82]
[30 80]
[31 79]
[32 78]
[33 77]
[39 72]
[40 71]
[41 70]
[42 69]
[46 64]
[47 63]
[48 62]
[107 137]
[108 136]
[109 135]
[110 134]
[111 133]
[112 132]
[115 131]
[116 130]
[118 128]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
