%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 00:53:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACACACAAAGCCCCGGUGUCGGACACACAGCAGUAAUUUCCCAGUCAUAGUCUUCUUUUCAAAUGUUUUGAACACCUGGUGAUUUAAUAAAGUGGUCGUCUCACAA\
) } def
/len { sequence length } bind def

/coor [
[26.98439598 398.69912720]
[22.05990982 412.99041748]
[13.14042759 425.19427490]
[1.01906836 434.22555542]
[-13.22634697 439.28121948]
[-28.32912636 439.91168213]
[-42.94633865 436.06088257]
[-55.77823257 428.07128906]
[-65.68380737 416.65325928]
[-71.78226471 402.82214355]
[-73.53132629 387.80773926]
[-70.77547455 372.94512939]
[-63.75976181 359.55593872]
[-53.10801315 348.83065796]
[-39.76737595 341.72299194]
[-24.92409134 338.86495972]
[-9.89801598 340.51068115]
[-3.95681953 326.73745728]
[1.98437703 312.96420288]
[-6.82596922 299.19775391]
[-5.73977089 282.72396851]
[5.01489115 269.98092651]
[21.39324951 266.06512451]
[26.93134308 252.12489319]
[32.46943283 238.18467712]
[32.00691223 230.69075012]
[38.37665558 223.92338562]
[44.31785202 210.15014648]
[50.25904846 196.37690735]
[40.40468216 185.18061829]
[36.37215805 170.75674438]
[39.01288986 155.95175171]
[47.85583878 143.71154785]
[61.19046783 136.49528503]
[76.39743042 135.78134155]
[82.33862305 122.00809479]
[88.27982330 108.23484802]
[86.84752655 94.32657623]
[97.94693756 85.82395172]
[103.88813782 72.05071259]
[102.24958801 56.31458282]
[114.39511871 47.69278336]
[120.33631897 33.91954041]
[126.27751160 20.14630127]
[132.21870422 6.37305927]
[117.37324524 8.52065372]
[106.23671722 -1.52811301]
[106.85253906 -16.51546669]
[118.77593231 -25.61670876]
[133.39517212 -22.25841904]
[140.15142822 -8.86555576]
[148.02607727 -21.63230515]
[148.68550110 -37.43976212]
[161.95236206 -44.21025467]
[169.82701111 -56.97700500]
[177.70166016 -69.74375916]
[168.77424622 -82.04698944]
[165.23948669 -96.83123779]
[167.63641357 -111.84200287]
[175.59953308 -124.79026031]
[187.91448975 -133.70149231]
[202.70338440 -137.21679688]
[217.71098328 -134.80010986]
[230.64874268 -126.81998444]
[239.54377747 -114.49330139]
[243.03962708 -99.69980621]
[240.60319519 -84.69539642]
[232.60604858 -71.76813507]
[220.26768494 -62.88933945]
[205.46960449 -59.41295242]
[190.46841431 -61.86910629]
[182.59376526 -49.10235596]
[174.71911621 -36.33560562]
[174.62294006 -21.44131279]
[160.79283142 -13.75765705]
[152.91818237 -0.99090695]
[145.99194336 12.31425571]
[140.05075073 26.08749771]
[134.10955811 39.86074066]
[128.16836548 53.63397980]
[130.23185730 68.38495636]
[117.66137695 77.99190521]
[111.72017670 91.76515198]
[113.15247345 105.67342377]
[102.05306244 114.17604828]
[96.11186218 127.94928741]
[90.17066956 141.72253418]
[100.08701324 153.27360535]
[103.98886108 167.92497253]
[101.15406036 182.75683594]
[92.19748688 194.83743286]
[78.93865204 201.80255127]
[64.03229523 202.31809998]
[58.09109497 216.09133911]
[52.14989853 229.86457825]
[46.40964890 243.72277832]
[40.87155533 257.66299438]
[35.33346176 271.60321045]
[43.59132767 282.74856567]
[45.21049881 296.41543579]
[39.87059784 308.98165894]
[29.08135033 317.17056274]
[15.75761890 318.90539551]
[9.81642246 332.67864990]
[3.87522578 346.45187378]
[15.38380814 356.25207520]
[23.49103355 369.01000977]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 105]
[18 104]
[19 103]
[23 98]
[24 97]
[25 96]
[27 95]
[28 94]
[29 93]
[35 87]
[36 86]
[37 85]
[39 83]
[40 82]
[42 80]
[43 79]
[44 78]
[45 77]
[51 76]
[52 75]
[54 73]
[55 72]
[56 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
