%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 14:49:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGCAUUUUCCUGAUUGAUGAAAAAAAUAACUCAGUUAUGGCCAUCUACCCCUGCUAGAAGGUUACAGUGUAUUAUGUAGCAUGCAAUGUGUUAUGUAGUGCUUAAUAAAAAUAAAAUGAAAAAAAUGCA\
) } def
/len { sequence length } bind def

/coor [
[118.36811066 257.20855713]
[102.60348511 256.08956909]
[92.31072235 244.09646606]
[93.59633636 228.34455872]
[105.69759369 218.17916870]
[106.75964355 203.21681213]
[107.82170105 188.25445557]
[108.88375854 173.29209900]
[109.94580841 158.32974243]
[111.00786591 143.36738586]
[112.06992340 128.40504456]
[95.38171387 130.81452942]
[79.75253296 124.07101440]
[69.87072754 110.01424408]
[55.51984024 114.37910461]
[41.16895294 118.74397278]
[26.81806564 123.10883331]
[12.46717834 127.47370148]
[-1.88370907 131.83856201]
[-16.23459625 136.20343018]
[-18.07046700 151.32128906]
[-25.90217018 164.38208008]
[-38.37281799 173.12294006]
[-53.32179642 176.02947998]
[-68.15910339 172.59811401]
[-80.31407928 163.42335510]
[-87.68081665 150.09477234]
[-88.98296356 134.92163086]
[-83.99493408 120.53276062]
[-73.58092499 109.42113495]
[-59.54522324 103.51190186]
[-44.31960678 103.82887268]
[-30.54199982 110.31713104]
[-20.59946060 121.85253906]
[-6.24857378 117.48767853]
[8.10231304 113.12281036]
[22.45320129 108.75794983]
[36.80408859 104.39308167]
[51.15497589 100.02822113]
[65.50585938 95.66335297]
[70.54357147 81.53460693]
[62.19161224 69.07488251]
[53.83965302 56.61515045]
[45.48769760 44.15542603]
[37.13573837 31.69569588]
[23.02486610 24.54071045]
[22.36533546 9.66071415]
[14.01337814 -2.79901314]
[5.66142130 -15.25874043]
[-2.69053578 -27.71846771]
[-18.25606155 -29.21793556]
[-29.17917442 -40.40809250]
[-30.30231476 -56.00529099]
[-21.09516716 -68.64501190]
[-5.90506935 -72.35916138]
[8.09568214 -65.39403534]
[14.29635906 -51.03834915]
[9.76919174 -36.07042694]
[18.12114906 -23.61069870]
[26.47310638 -11.15097046]
[34.82506180 1.30875742]
[48.33854675 7.57254028]
[49.59546661 23.34373856]
[57.94742584 35.80346680]
[66.29938507 48.26319504]
[74.65133667 60.72292328]
[83.00329590 73.18264771]
[95.14937592 68.80227661]
[107.96208191 69.63121796]
[119.31386566 75.47396088]
[127.34288025 85.30728149]
[130.75828552 97.45896149]
[143.50605774 89.55361938]
[156.25382996 81.64827728]
[169.00158691 73.74294281]
[181.74935913 65.83760071]
[194.49713135 57.93225861]
[207.24490356 50.02691650]
[219.99266052 42.12157822]
[232.74043274 34.21623611]
[245.48820496 26.31089592]
[258.23596191 18.40555573]
[270.98373413 10.50021458]
[283.73150635 2.59487343]
[296.47927856 -5.31046724]
[301.52664185 -20.53884506]
[316.62890625 -25.95195961]
[330.20086670 -17.39733505]
[331.83126831 -1.43734467]
[320.26943970 9.68487072]
[304.38461304 7.43730068]
[291.63684082 15.34264183]
[278.88906860 23.24798203]
[266.14129639 31.15332222]
[253.39353943 39.05866241]
[240.64576721 46.96400452]
[227.89801025 54.86934662]
[215.15023804 62.77468491]
[202.40246582 70.68002319]
[189.65470886 78.58536530]
[176.90693665 86.49070740]
[164.15916443 94.39604950]
[151.41139221 102.30139160]
[138.66363525 110.20672607]
[153.64086914 109.38074493]
[166.84959412 102.27231598]
[181.53866577 99.23408508]
[196.48350525 100.51934814]
[210.43815613 106.02095032]
[222.23924255 115.28023529]
[230.90292358 127.52526093]
[235.70692444 141.73518372]
[236.25071716 156.72531128]
[232.48898315 171.24597168]
[224.73533630 184.08656311]
[213.63618469 194.17660522]
[200.11685181 200.67488098]
[185.30442810 203.03964233]
[170.43380737 201.07374573]
[156.74475098 194.94110107]
[145.37847900 185.15293884]
[137.28259277 172.52532959]
[133.13203430 158.11100769]
[133.27357483 143.10696411]
[127.03227997 129.46708679]
[125.97022247 144.42944336]
[124.90816498 159.39179993]
[123.84610748 174.35415649]
[122.78405762 189.31651306]
[121.72200012 204.27886963]
[120.65994263 219.24121094]
[131.20399475 231.01400757]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 131]
[6 130]
[7 129]
[8 128]
[9 127]
[10 126]
[11 125]
[14 40]
[15 39]
[16 38]
[17 37]
[18 36]
[19 35]
[20 34]
[41 67]
[42 66]
[43 65]
[44 64]
[45 63]
[47 61]
[48 60]
[49 59]
[50 58]
[72 104]
[73 103]
[74 102]
[75 101]
[76 100]
[77 99]
[78 98]
[79 97]
[80 96]
[81 95]
[82 94]
[83 93]
[84 92]
[85 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
