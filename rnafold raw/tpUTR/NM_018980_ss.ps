%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 19:28:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGGGAAGAAAAGUGUGGUCAGGACACUCUUGGGACGCUCUUUUGAUAGCUCUCUAUAAGGGAGCUGCUUUCCAUGUCUUUUAAGAUUUUCCUUCUUUUACACC\
) } def
/len { sequence length } bind def

/coor [
[162.16662598 201.32395935]
[164.89587402 187.68031311]
[171.10797119 175.21572876]
[160.04046631 165.09098816]
[148.97297668 154.96624756]
[137.90547180 144.84149170]
[126.83797455 134.71675110]
[115.77047729 124.59201050]
[104.70297241 114.46726227]
[90.88769531 108.62448883]
[75.91403961 107.73587799]
[60.94038010 106.84726715]
[45.96672440 105.95866394]
[30.99306870 105.07005310]
[16.75877190 111.97623444]
[4.51221466 103.49855042]
[-10.46144104 102.60993958]
[-25.43509674 101.72132874]
[-41.60526657 110.37286377]
[-55.91780853 100.33814240]
[-70.91122437 99.89363861]
[-85.90463257 99.44914246]
[-100.89804840 99.00463867]
[-115.89145660 98.56014252]
[-130.88487244 98.11563873]
[-146.89622498 103.68995667]
[-156.68507385 89.84746552]
[-146.09336853 76.60917664]
[-130.44036865 83.12223053]
[-115.44696045 83.56672668]
[-100.45354462 84.01123047]
[-85.46013641 84.45572662]
[-70.46672058 84.90022278]
[-55.47330856 85.34472656]
[-46.36384583 77.23351288]
[-33.76833725 77.58017731]
[-24.54648781 86.74767303]
[-9.57283211 87.63628387]
[5.40082407 88.52489471]
[18.56410599 81.55515289]
[31.88167953 90.09639740]
[46.85533524 90.98500061]
[61.82899094 91.87361145]
[76.80265045 92.76222229]
[91.77630615 93.65083313]
[92.30125427 90.52949524]
[93.87875366 87.38637543]
[96.52790070 84.54937744]
[100.90875244 70.20336151]
[105.28960419 55.85734940]
[109.67044830 41.51133347]
[114.05130005 27.16531944]
[118.43215179 12.81930447]
[122.81300354 -1.52671027]
[127.19385529 -15.87272549]
[131.57470703 -30.21874046]
[130.41790771 -47.13317490]
[146.35108948 -52.92715073]
[156.32937622 -39.22057724]
[145.92073059 -25.83788872]
[141.53987122 -11.49187374]
[137.15902710 2.85414124]
[132.77816772 17.20015526]
[128.39732361 31.54617119]
[124.01646423 45.89218521]
[119.63561249 60.23820114]
[115.25476074 74.58421326]
[110.87390900 88.93022919]
[114.82772064 103.39976501]
[125.89521790 113.52450562]
[136.96272278 123.64925385]
[148.03021240 133.77400208]
[159.09771729 143.89874268]
[170.16522217 154.02348328]
[181.23271179 164.14823914]
[195.31895447 155.92747498]
[211.22575378 152.40948486]
[227.42825317 153.91998291]
[242.37677002 160.30317688]
[254.64500427 170.93778992]
[263.06616211 184.79748535]
[266.84390259 200.54989624]
[265.62756348 216.68476868]
[259.54483032 231.65867615]
[271.19268799 241.11000061]
[282.84054565 250.56130981]
[294.48840332 260.01263428]
[309.80624390 256.86657715]
[323.53799438 264.34808350]
[329.19992065 278.92465210]
[324.11865234 293.71368408]
[310.69338989 301.73220825]
[295.26315308 299.19412231]
[285.11361694 287.29788208]
[285.03707886 271.66049194]
[273.38922119 262.20916748]
[261.74136353 252.75785828]
[250.09350586 243.30653381]
[238.83178711 251.27909851]
[225.86340332 256.02932739]
[212.09086609 257.21939087]
[198.47453308 254.75961304]
[185.96563721 248.81495667]
[175.43984985 239.79411316]
[167.63595581 228.32135010]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 75]
[4 74]
[5 73]
[6 72]
[7 71]
[8 70]
[9 69]
[10 45]
[11 44]
[12 43]
[13 42]
[14 41]
[16 39]
[17 38]
[18 37]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[25 29]
[48 68]
[49 67]
[50 66]
[51 65]
[52 64]
[53 63]
[54 62]
[55 61]
[56 60]
[84 98]
[85 97]
[86 96]
[87 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
