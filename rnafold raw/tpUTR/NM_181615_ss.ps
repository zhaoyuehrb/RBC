%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 07:53:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAUUCUAGAGCUCACCAGAUUUGUCUGCUUGUGAAACCUGGAUUCUCAUGCUGCUCUUGUUCAUCUGAUCCU\
) } def
/len { sequence length } bind def

/coor [
[101.67240906 132.83181763]
[88.90953064 130.94715881]
[77.85470581 124.29631805]
[70.21048737 113.90358734]
[67.15415955 101.36956024]
[52.41984940 98.55884552]
[37.68553925 95.74812317]
[24.70817947 104.36356354]
[9.80553436 101.30319977]
[1.67200303 88.87817383]
[-13.06230545 86.06745148]
[-27.79661369 83.25673676]
[-42.53092194 80.44601440]
[-55.50828552 89.06145477]
[-70.41092682 86.00109100]
[-78.54446411 73.57606506]
[-93.27877045 70.76534271]
[-105.28186035 80.78830719]
[-120.91919708 80.69920349]
[-132.80729675 70.54010773]
[-135.33296204 55.10783768]
[-127.30364990 41.68903351]
[-112.51056671 36.61964798]
[-97.93854523 42.29328918]
[-90.46804810 56.03103638]
[-75.73374176 58.84175491]
[-63.59741974 50.28340912]
[-48.61469269 52.92398453]
[-39.72020340 65.71170807]
[-24.98589516 68.52242279]
[-10.25158596 71.33314514]
[4.48272276 74.14386749]
[16.61904526 65.58551788]
[31.60177040 68.22609711]
[40.49626160 81.01381683]
[55.23056793 83.82453156]
[69.96488190 86.63525391]
[80.56226349 73.48775482]
[96.28850555 67.33580017]
[112.99407196 69.80266571]
[126.27101135 80.23743439]
[132.61604309 95.88677216]
[147.53387451 97.45469666]
[162.45170593 99.02262878]
[177.36952209 100.59055328]
[186.53320312 98.33267212]
[192.87457275 102.54929352]
[205.47976685 93.39797211]
[220.49749756 95.83159637]
[229.14419556 107.90512848]
[243.98329163 110.09637451]
[258.82235718 112.28762054]
[269.80654907 105.16712189]
[282.27728271 107.49090576]
[289.48370361 117.43478394]
[304.21801758 120.24550629]
[319.51861572 114.34432220]
[332.10778809 124.85357666]
[329.03491211 140.96224976]
[313.46105957 146.09912109]
[301.40728760 134.97981262]
[286.67297363 132.16909790]
[270.60610962 138.90394592]
[256.63113403 127.12670135]
[241.79203796 124.93545532]
[226.95295715 122.74421692]
[215.18566895 131.80326843]
[200.10549927 129.79241943]
[190.68331909 117.38838196]
[175.80160522 115.50838470]
[160.88377380 113.94045258]
[145.96594238 112.37252808]
[131.04811096 110.80460358]
[124.49950409 121.92029572]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 37]
[6 36]
[7 35]
[10 32]
[11 31]
[12 30]
[13 29]
[16 26]
[17 25]
[42 73]
[43 72]
[44 71]
[45 70]
[47 69]
[50 66]
[51 65]
[52 64]
[55 62]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
