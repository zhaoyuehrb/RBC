%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 14:52:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUCUAUGUUGUAAAUAAUAGAUGUGUUUAGUUUACCGUAAGCUGAAGCACUGGGUGAAUAUUUUUAUUGGGUAAUAAAUAUUUUCAUGAAAGCGC\
) } def
/len { sequence length } bind def

/coor [
[92.64416504 139.03863525]
[86.40196991 137.32582092]
[80.52079773 134.62202454]
[75.15679169 130.99900818]
[63.73510361 140.72244263]
[52.31341553 150.44586182]
[40.89172363 160.16929626]
[29.47003555 169.89271545]
[28.05492020 185.40513611]
[16.33318901 195.10336304]
[1.55318785 193.65867615]
[-3.43297768 209.28141785]
[-19.51121140 212.50979614]
[-30.14160347 200.02273560]
[-24.38851929 184.66584778]
[-8.17023849 182.23698425]
[-7.23752594 167.41586304]
[4.20717764 157.39222717]
[19.74660873 158.47102356]
[31.16829872 148.74760437]
[42.58998871 139.02416992]
[54.01167679 129.30075073]
[65.43336487 119.57732391]
[60.45796204 96.18542480]
[69.81317902 74.17598724]
[60.46083069 62.44851685]
[51.10848618 50.72104645]
[41.75613785 38.99357224]
[32.40378952 27.26609993]
[22.86467934 15.69003201]
[13.14125252 4.26834297]
[3.41782665 -7.15334654]
[-6.30559921 -18.57503510]
[-16.02902603 -29.99672508]
[-25.75245094 -41.41841507]
[-35.47587585 -52.84010315]
[-50.34721375 -60.98133850]
[-46.64093781 -77.52521515]
[-29.71760178 -78.54357910]
[-24.05418777 -62.56352997]
[-14.33076191 -51.14184189]
[-4.60733557 -39.72014999]
[5.11609030 -28.29846191]
[14.83951569 -16.87677193]
[24.56294250 -5.45508289]
[34.28636932 5.96660662]
[41.14714432 9.07705021]
[44.13126373 17.91375351]
[53.48360825 29.64122581]
[62.83595657 41.36869812]
[72.18830109 53.09616852]
[81.54064941 64.82363892]
[98.67893982 60.29636765]
[116.08026123 63.67440414]
[130.27987671 74.28516388]
[138.45051575 90.01595306]
[153.41970825 89.05490112]
[168.38888550 88.09384918]
[183.35806274 87.13279724]
[198.32723999 86.17173767]
[211.60333252 77.56615448]
[224.80018616 84.47212219]
[239.76936340 83.51107025]
[253.04545593 74.90548706]
[266.24230957 81.81144714]
[281.21148682 80.85039520]
[296.18066406 79.88934326]
[311.14984131 78.92829132]
[326.11901855 77.96723175]
[341.08822632 77.00617981]
[354.42831421 67.46817780]
[369.24456787 74.49746704]
[370.29525757 90.86292267]
[356.49954224 99.72916412]
[342.04925537 91.97536469]
[327.08007812 92.93641663]
[312.11090088 93.89746857]
[297.14172363 94.85852051]
[282.17254639 95.81957245]
[267.20336914 96.78063202]
[254.99797058 105.31747437]
[240.73042297 98.48024750]
[225.76124573 99.44129944]
[213.55584717 107.97814178]
[199.28829956 101.14092255]
[184.31912231 102.10197449]
[169.34992981 103.06302643]
[154.38075256 104.02407837]
[139.41157532 104.98513794]
[138.07881165 111.31936646]
[135.73506165 117.35307312]
[132.44256592 122.92605591]
[128.28871155 127.89035797]
[123.38381958 132.11418152]
[117.85808563 135.48538208]
[111.85822296 137.91445923]
[105.54352570 139.33691406]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 23]
[5 22]
[6 21]
[7 20]
[8 19]
[11 16]
[25 52]
[26 51]
[27 50]
[28 49]
[29 48]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
[56 89]
[57 88]
[58 87]
[59 86]
[60 85]
[62 83]
[63 82]
[65 80]
[66 79]
[67 78]
[68 77]
[69 76]
[70 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
