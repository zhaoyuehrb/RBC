%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 07:30:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUUUCAAGUUCUGUCAGUGAUACAGUGCCUUACAGAUCACAAGAAACUUUCCUUAUUUGUAACUUUGGAAAGACCUGAGAAAAGAAAGCAAUAUACUCAAAUUAUUUUUUCCCUGAAGAAAUAAAUACUCAAGAGCCUAA\
) } def
/len { sequence length } bind def

/coor [
[99.40751648 302.79385376]
[84.81201172 307.04116821]
[69.70269775 305.37475586]
[56.38361740 298.04873657]
[46.88584518 286.18026733]
[42.65771866 271.57919312]
[44.34399796 256.47207642]
[51.68753815 243.16264343]
[63.56850052 233.68049622]
[78.17512512 229.47157288]
[79.81950378 214.56198120]
[81.46387482 199.65238953]
[83.10825348 184.74279785]
[84.75263214 169.83320618]
[70.92099762 165.29602051]
[58.29539871 158.05070496]
[47.39948654 148.39776611]
[38.68515396 136.73754883]
[32.51383209 123.55365753]
[17.91115189 126.98320007]
[3.30847192 130.41273499]
[-11.29420757 133.84228516]
[-25.89688683 137.27182007]
[-33.60649490 142.31701660]
[-40.85796738 140.61256409]
[-52.75553894 151.04130554]
[-66.80975342 146.10893250]
[-81.48425293 149.21685791]
[-96.15874481 152.32479858]
[-110.40139008 161.52171326]
[-123.18164825 150.38165283]
[-116.01486206 135.01696777]
[-99.26667023 137.65029907]
[-84.59217834 134.54237366]
[-69.91768646 131.43443298]
[-59.06973267 121.22801208]
[-43.96589661 125.93807983]
[-29.32642746 122.66914368]
[-14.72374821 119.23960114]
[-0.12106884 115.81006622]
[14.48161030 112.38052368]
[29.08428955 108.95098114]
[28.57596016 97.21350098]
[29.99719429 85.55129242]
[33.30959320 74.27942657]
[38.42367554 63.70242310]
[45.20127869 54.10601425]
[53.45929718 45.74946213]
[62.97464371 38.85851669]
[56.59391785 25.28330612]
[50.21319199 11.70809555]
[43.83246994 -1.86711526]
[37.45174408 -15.44232559]
[31.07101822 -29.01753616]
[15.88831711 -28.27319336]
[1.57816863 -33.40038300]
[-9.67723465 -43.61724854]
[-16.16152573 -57.36579132]
[-16.88589668 -72.54945374]
[-11.73988628 -86.85285187]
[-1.50822401 -98.09480286]
[12.24883652 -104.56100464]
[27.43344307 -105.26539612]
[41.73005295 -100.10057831]
[52.95853806 -89.85413361]
[59.40663528 -76.08858490]
[60.09105682 -60.90306091]
[54.90743256 -46.61325836]
[44.64622879 -35.39826202]
[51.02695465 -21.82305145]
[57.40768051 -8.24784088]
[63.78840256 5.32737017]
[70.16912842 18.90258026]
[76.54985809 32.47779083]
[94.34091949 28.74599838]
[112.49799347 29.62274551]
[129.84672546 35.05132294]
[145.26506042 44.68062973]
[155.92974854 34.13244247]
[166.59445190 23.58425331]
[177.25914001 13.03606701]
[170.90594482 -0.72665954]
[169.64610291 -15.83257294]
[173.63177490 -30.45756149]
[182.38165283 -42.83558655]
[194.83914185 -51.47193909]
[209.49995422 -55.32374191]
[224.59371948 -53.92586899]
[238.29779053 -47.44712067]
[248.95733643 -36.66983414]
[255.28517151 -22.89542389]
[256.51715088 -7.78721380]
[252.50454712 6.83040476]
[243.73187256 19.19228363]
[231.25848389 27.80566597]
[216.59060669 31.63044357]
[201.49943542 30.20475578]
[187.80732727 23.70076180]
[177.14263916 34.24895096]
[166.47793579 44.79713821]
[155.81324768 55.34532547]
[166.60525513 74.05973053]
[171.31320190 95.14365387]
[169.50704956 116.67118073]
[183.64575195 121.68087006]
[197.78445435 126.69055939]
[211.92317200 131.70025635]
[226.06187439 136.70994568]
[240.20057678 141.71963501]
[254.33927917 146.72932434]
[268.47799683 151.73901367]
[282.61669922 156.74870300]
[296.75540161 161.75840759]
[313.70440674 161.34918213]
[318.78958130 177.52253723]
[304.65600586 186.88621521]
[291.74569702 175.89710999]
[277.60699463 170.88742065]
[263.46829224 165.87771606]
[249.32958984 160.86802673]
[235.19088745 155.85833740]
[221.05218506 150.84864807]
[206.91346741 145.83895874]
[192.77476501 140.82926941]
[178.63606262 135.81958008]
[164.49736023 130.80987549]
[159.51817322 139.58213806]
[153.35372925 147.56613159]
[146.12680054 154.60289001]
[137.98129272 160.55229187]
[129.07940674 165.29583740]
[119.59844208 168.73905945]
[109.72718811 170.81341553]
[99.66222382 171.47756958]
[98.01784515 186.38717651]
[96.37347412 201.29676819]
[94.72909546 216.20635986]
[93.08471680 231.11595154]
[106.42302704 238.40690613]
[115.95198822 250.25036621]
[120.21851349 264.84027100]
[118.57198334 279.95175171]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 138]
[11 137]
[12 136]
[13 135]
[14 134]
[19 42]
[20 41]
[21 40]
[22 39]
[23 38]
[25 37]
[27 35]
[28 34]
[29 33]
[49 74]
[50 73]
[51 72]
[52 71]
[53 70]
[54 69]
[78 101]
[79 100]
[80 99]
[81 98]
[104 126]
[105 125]
[106 124]
[107 123]
[108 122]
[109 121]
[110 120]
[111 119]
[112 118]
[113 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
