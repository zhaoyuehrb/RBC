%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 13:12:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGAAGGCAAGAGCGGCAAGAUGAGUUUUGAGCGUUGUAUUCCAAAGGCCUCAUCUGGAGCCUCGGGAAAGUCUGGUCCCACAUCUGCCCGCCCUUCCAGCCCUUCCCCAGCCCCUCCUCUUGUUUCUUCAUUCAUUCAACAAAAUUUGGCUGGAA\
) } def
/len { sequence length } bind def

/coor [
[276.03921509 242.99996948]
[271.55609131 236.96548462]
[269.45480347 229.67636108]
[270.04827881 222.04502869]
[257.98352051 213.13201904]
[245.91877747 204.21899414]
[233.85403442 195.30598450]
[221.78927612 186.39297485]
[209.63652039 177.60034180]
[197.14379883 169.29780579]
[184.40905762 161.37152100]
[171.67430115 153.44522095]
[156.78051758 153.28872681]
[149.15293884 139.42759705]
[136.41819763 131.50131226]
[123.68344116 123.57501221]
[110.94869232 115.64871979]
[96.81289673 118.83078766]
[84.51153564 111.17424011]
[81.12501526 97.08602905]
[68.39026642 89.15973663]
[55.65551376 81.23344421]
[42.92076492 73.30715179]
[30.18601418 65.38085938]
[20.39553261 71.52040863]
[9.06724834 73.52784729]
[-2.13599682 71.14777374]
[-11.58440876 64.76593018]
[-17.91833687 55.34733582]
[-20.24388313 44.29048538]
[-18.25889206 33.21977234]
[-30.49846458 24.54839134]
[-46.23188400 22.88403893]
[-52.14410782 9.21308804]
[-64.38368225 0.54170758]
[-76.80175018 7.04435110]
[-90.74397278 7.54785728]
[-103.47719574 2.01076293]
[-112.52995300 -8.42982769]
[-116.17214203 -21.69125938]
[-113.74546051 -35.16062546]
[-125.81020355 -44.07363892]
[-137.87495422 -52.98665619]
[-149.93969727 -61.89966965]
[-165.36781311 -59.75231552]
[-177.47621155 -68.96324921]
[-179.42831421 -83.68482971]
[-191.49305725 -92.59783936]
[-203.55781555 -101.51085663]
[-215.62255859 -110.42387390]
[-224.43638611 -113.02738953]
[-227.83621216 -119.63598633]
[-239.72135925 -128.78710938]
[-255.75190735 -128.15364075]
[-266.13262939 -140.38557434]
[-262.90029907 -156.09963989]
[-248.53453064 -163.24133301]
[-234.05548096 -156.33216858]
[-230.57023621 -140.67227173]
[-218.68508911 -131.52113342]
[-206.70954895 -122.48862457]
[-194.64479065 -113.57560730]
[-182.58004761 -104.66259003]
[-170.51530457 -95.74957275]
[-155.87002563 -98.20960236]
[-143.50769043 -89.34240723]
[-141.02668762 -73.96441650]
[-128.96194458 -65.05140686]
[-116.89719391 -56.13838959]
[-104.83244324 -47.22537231]
[-90.20751190 -54.03808594]
[-74.04805756 -52.55286789]
[-60.75735092 -43.07968521]
[-54.00462723 -28.11799240]
[-55.71229935 -11.69786644]
[-43.47272491 -3.02648640]
[-28.61476135 -1.98236942]
[-21.82708549 12.30881691]
[-9.58751106 20.98019791]
[7.67341042 13.95867443]
[25.83953476 18.73476028]
[37.60034943 33.57135773]
[38.11230850 52.64610672]
[50.84705734 60.57239914]
[63.58181000 68.49869537]
[76.31655884 76.42498779]
[89.05130768 84.35128021]
[103.18710327 81.16921234]
[115.48846436 88.82575989]
[118.87498474 102.91397095]
[131.60974121 110.84026337]
[144.34448242 118.76655579]
[157.07923889 126.69284821]
[172.88389587 127.41629028]
[179.60060120 140.71046448]
[192.33534241 148.63676453]
[205.07009888 156.56306458]
[210.39677429 156.73205566]
[214.67460632 158.75549316]
[217.36660767 161.90925598]
[218.30790710 165.36076355]
[227.17175293 167.78852844]
[230.70230103 174.32821655]
[242.76704407 183.24124146]
[254.83178711 192.15425110]
[266.89654541 201.06726074]
[278.96130371 209.98028564]
[302.13809204 210.48126221]
[310.76828003 231.20484924]
[323.65811157 238.87638855]
[336.54794312 246.54792786]
[349.43777466 254.21945190]
[362.32757568 261.89099121]
[375.21740723 269.56253052]
[385.73181152 261.46310425]
[398.34756470 257.44482422]
[411.54537964 257.96859741]
[423.74368286 262.94985962]
[433.48812866 271.77111816]
[439.62500000 283.35845947]
[441.43780518 296.31231689]
[438.73077393 309.07647705]
[451.30541992 317.25439453]
[463.88006592 325.43234253]
[476.45471191 333.61026001]
[489.02935791 341.78817749]
[501.78387451 333.46701050]
[516.82128906 331.05938721]
[531.53619385 334.98245239]
[543.37927246 344.55648804]
[550.29852295 358.12277222]
[551.09515381 373.33084106]
[545.63122559 387.54577637]
[534.85333252 398.30480957]
[520.62878418 403.74386597]
[505.42214966 402.92056274]
[491.86801147 395.97753906]
[482.31472778 384.11776733]
[478.41744995 369.39596558]
[480.85140991 354.36282349]
[468.27679443 346.18487549]
[455.70214844 338.00695801]
[443.12750244 329.82904053]
[430.55285645 321.65112305]
[416.41580200 330.81893921]
[399.64215088 332.91882324]
[383.57693481 327.48361206]
[371.44512939 315.55364990]
[365.70404053 299.47808838]
[367.54586792 282.45233154]
[354.65606689 274.78082275]
[341.76623535 267.10928345]
[328.87640381 259.43774414]
[315.98657227 251.76622009]
[303.09674072 244.09468079]
[296.74432373 247.57612610]
[289.50671387 248.61851501]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 107]
[5 106]
[6 105]
[7 104]
[8 103]
[9 101]
[10 97]
[11 96]
[12 95]
[14 93]
[15 92]
[16 91]
[17 90]
[20 87]
[21 86]
[22 85]
[23 84]
[24 83]
[31 79]
[32 78]
[34 76]
[35 75]
[41 70]
[42 69]
[43 68]
[44 67]
[47 64]
[48 63]
[49 62]
[50 61]
[52 60]
[53 59]
[109 155]
[110 154]
[111 153]
[112 152]
[113 151]
[114 150]
[122 144]
[123 143]
[124 142]
[125 141]
[126 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
