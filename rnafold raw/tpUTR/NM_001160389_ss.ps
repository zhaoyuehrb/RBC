%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 17:56:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAUUAAUUUAUAAAAAAGAAAUUUUAAAAAGUAACAAGAAAGAACUCGUUUGAAACCAUGUUUCAUCAUCCUGUA\
) } def
/len { sequence length } bind def

/coor [
[137.13429260 250.66737366]
[122.41952515 253.54795837]
[107.49543762 254.99493408]
[92.50136566 254.99478149]
[77.57730865 253.54750061]
[62.86260605 250.66661072]
[48.49463654 246.37899780]
[34.60755539 240.72470093]
[21.33101845 233.75651550]
[8.78898239 225.53948975]
[-2.90145135 216.15034485]
[-13.63113308 205.67675781]
[-23.29988480 194.21650696]
[-31.81743240 181.87660217]
[-39.10425186 168.77223206]
[-45.09230804 155.02577209]
[-49.72569275 140.76554871]
[-52.96114349 126.12471008]
[-54.76845932 111.23996735]
[-55.13075638 96.25027466]
[-54.04466248 81.29559326]
[-51.52030945 66.51554871]
[-47.58126831 52.04813004]
[-42.26432037 38.02842331]
[-35.61910248 24.58732414]
[-27.70766068 11.85032082]
[-18.60386276 -0.06366113]
[-8.39270592 -11.04338741]
[2.83047247 -20.98634338]
[14.96088505 -29.79969788]
[27.88527679 -37.40116119]
[41.48297501 -43.71976089]
[55.62702179 -48.69650650]
[70.18536377 -52.28493118]
[85.02207947 -54.45152664]
[99.99862671 -55.17607117]
[114.97519684 -54.45179367]
[129.81195068 -52.28545761]
[144.37034607 -48.69729233]
[158.51448059 -43.72079468]
[172.11230469 -37.40243530]
[185.03681946 -29.80119896]
[197.16738892 -20.98806000]
[208.39074707 -11.04530144]
[218.60209656 -0.06575564]
[227.70610046 11.84806633]
[235.61776733 24.58492851]
[242.26322937 38.02591324]
[247.58042908 52.04552460]
[251.51971436 66.51287079]
[254.04432678 81.29286957]
[255.13069153 96.24753571]
[254.76866150 111.23722839]
[269.65930176 113.04528046]
[284.54992676 114.85333252]
[299.44055176 116.66138458]
[314.33117676 118.46943665]
[329.22183228 120.27748108]
[345.67428589 116.18442535]
[354.16186523 130.86083984]
[342.40859985 143.07957458]
[327.41375732 135.16812134]
[312.52313232 133.36006165]
[297.63250732 131.55201721]
[282.74188232 129.74397278]
[267.85122681 127.93591309]
[252.96060181 126.12786865]
[249.72485352 140.76863098]
[245.09117126 155.02874756]
[239.10282898 168.77510071]
[231.81575012 181.87931824]
[223.29794312 194.21905518]
[213.62895203 205.67910767]
[202.89906311 216.15246582]
[191.20843506 225.54136658]
[178.66622925 233.75813293]
[165.38954163 240.72604370]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[53 67]
[54 66]
[55 65]
[56 64]
[57 63]
[58 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
