%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 13:30:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGCCUUGCUCUGUGUGAGCCCCGUGCGAGGGCCCUGCUUGUAGCUGGACCCUGGAACCUUCUGUAGCUAAGAGGGAAUCCUGGCCCCCUCCCCAGAAGCCAUUUGUCAAUAAACCAUUUCUAAGA\
) } def
/len { sequence length } bind def

/coor [
[156.71330261 203.57884216]
[148.68832397 190.90603638]
[140.66336060 178.23323059]
[132.63839722 165.56042480]
[124.61344147 152.88761902]
[110.14723206 157.44523621]
[94.99504852 158.11946106]
[80.18121338 154.86471558]
[66.70716095 147.90103149]
[56.63377762 159.01530457]
[46.56039429 170.12956238]
[36.48700714 181.24383545]
[35.83489609 197.27362061]
[22.81105232 206.64160156]
[7.40625381 202.16145325]
[1.43774414 187.26997375]
[9.48405361 173.39060974]
[25.37274170 171.17044067]
[35.44612503 160.05618286]
[45.51951218 148.94190979]
[55.59289551 137.82765198]
[50.36184692 130.64271545]
[46.28298187 122.74650574]
[43.45096970 114.32232666]
[41.93154907 105.56569672]
[41.75999069 96.67987823]
[42.94027328 87.87113190]
[45.44500351 79.34391022]
[29.62700081 79.66223907]
[22.04988670 66.83895874]
[8.82106686 59.76800537]
[-4.40775156 52.69705582]
[-17.63656998 45.62610245]
[-33.45457458 45.94443512]
[-41.03168869 33.12115097]
[-54.26050568 26.05020142]
[-70.07851410 26.36853600]
[-77.65562439 13.54525089]
[-90.88444519 6.47429991]
[-104.11325836 -0.59665096]
[-120.93235779 -2.73077083]
[-123.53762817 -19.48334885]
[-108.16095734 -26.62438011]
[-97.04231262 -13.82546997]
[-83.81349182 -6.75451899]
[-70.58467102 0.31643221]
[-55.71288300 -0.50766301]
[-47.18955612 12.82138252]
[-33.96073532 19.89233398]
[-19.08894730 19.06823921]
[-10.56561947 32.39728546]
[2.66319942 39.46823502]
[15.89201832 46.53918839]
[29.12083817 53.61013794]
[43.99262619 52.78604126]
[52.51595306 66.11508942]
[66.50923157 52.23714828]
[84.32513428 43.81085205]
[103.93016815 41.79797745]
[106.85652161 27.08619690]
[109.78287506 12.37441730]
[112.70923615 -2.33736157]
[115.63558960 -17.04914093]
[118.56194305 -31.76091957]
[108.63356018 -43.84236145]
[108.84547424 -59.47851181]
[119.09762573 -71.28645325]
[134.54925537 -73.69083405]
[147.90458679 -65.55638885]
[152.85763550 -50.72394943]
[147.06971741 -36.19693756]
[133.27372742 -28.83456421]
[130.34736633 -14.12278557]
[127.42101288 0.58899331]
[124.49465942 15.30077267]
[121.56830597 30.01255226]
[118.64194489 44.72433090]
[127.18474579 48.38690567]
[135.03736877 53.35983658]
[142.00045776 59.51687622]
[147.89723206 66.70170593]
[152.57800293 74.73191833]
[166.82092285 70.02668762]
[181.06384277 65.32146454]
[195.30676270 60.61623764]
[199.90084839 45.79483414]
[212.34947205 36.53139114]
[227.86589050 36.38788986]
[240.48370361 45.41950989]
[245.35113525 60.15341187]
[240.59652710 74.92410278]
[228.04815674 84.05196381]
[212.53109741 84.02713013]
[200.01199341 74.85916138]
[185.76907349 79.56438446]
[171.52613831 84.26961517]
[157.28321838 88.97483826]
[157.53562927 109.62149811]
[150.57945251 129.06269836]
[137.28623962 144.86265564]
[145.31120300 157.53546143]
[153.33616638 170.20826721]
[161.36112976 182.88107300]
[169.38609314 195.55386353]
[183.67984009 190.76301575]
[198.70481873 189.53280640]
[213.58750916 191.93473816]
[227.46263123 197.82917786]
[239.52349854 206.87344360]
[249.06893921 218.54170227]
[255.54396057 232.15556335]
[258.57214355 246.92355347]
[257.97741699 261.98709106]
[253.79435730 276.47036743]
[246.26615906 289.53137207]
[235.83052063 300.41073608]
[223.09413147 308.47595215]
[208.79748535 313.25814819]
[193.77175903 314.47924805]
[178.89053345 312.06829834]
[165.01899719 306.16543579]
[152.96359253 297.11386108]
[143.42524719 285.43981934]
[136.95846558 271.82205200]
[133.93923950 257.05221558]
[134.54310608 241.98905945]
[138.73493958 227.50831604]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 104]
[2 103]
[3 102]
[4 101]
[5 100]
[9 21]
[10 20]
[11 19]
[12 18]
[28 56]
[30 54]
[31 53]
[32 52]
[33 51]
[35 49]
[36 48]
[38 46]
[39 45]
[40 44]
[59 77]
[60 76]
[61 75]
[62 74]
[63 73]
[64 72]
[82 97]
[83 96]
[84 95]
[85 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
