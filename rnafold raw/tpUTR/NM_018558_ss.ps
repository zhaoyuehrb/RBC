%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 23:38:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCCCAGUGCUCCAGAACAGCGGGAGCACUGUGCUGUGCUCCUUUCAGUUUCUUUUGGGUUUGUUUUUCCCUCUUUCCUU\
) } def
/len { sequence length } bind def

/coor [
[76.14223480 140.38314819]
[70.29067993 136.29528809]
[65.12718201 131.36683655]
[60.77132797 125.71192169]
[57.32400894 119.46153259]
[54.86505508 112.76042175]
[39.96402359 114.48067474]
[25.06299210 116.20092773]
[10.16196060 117.92117310]
[-4.73907042 119.64142609]
[-19.64010239 121.36167908]
[-34.54113388 123.08193207]
[-49.44216537 124.80218506]
[-64.34319305 126.52243042]
[-77.16497803 135.79133606]
[-90.69561768 129.56469727]
[-101.75043488 141.19097900]
[-117.71963501 139.65335083]
[-126.35300446 126.13134766]
[-121.02776337 110.99789429]
[-105.82898712 105.86208344]
[-92.41586304 114.66365814]
[-80.65990448 105.51779938]
[-66.06344604 111.62139893]
[-51.16241455 109.90115356]
[-36.26138306 108.18090057]
[-21.36035347 106.46064758]
[-6.45932198 104.74039459]
[8.44170952 103.02014160]
[23.34274101 101.29989624]
[38.24377060 99.57964325]
[53.14480209 97.85939026]
[66.20460510 67.47519684]
[96.06627655 53.26117706]
[97.21451569 38.30519104]
[98.36275482 23.34920311]
[99.51099396 8.39321709]
[87.14744568 -0.83425146]
[81.75671387 -15.28913212]
[85.05896759 -30.35892487]
[96.00046539 -41.23491669]
[111.08982086 -44.44661331]
[125.51206970 -38.96917725]
[134.66513062 -26.55043602]
[135.62828064 -11.15316868]
[128.09420776 2.30941653]
[114.46697998 9.54145527]
[113.31874084 24.49744225]
[112.17050171 39.45343018]
[111.02227020 54.40941620]
[119.01255798 57.12210083]
[126.38749695 61.22253799]
[132.90840149 66.57801819]
[138.36421204 73.01521301]
[142.57835388 80.32577515]
[145.41444397 88.27310181]
[146.78067017 96.59997559]
[146.63284302 105.03688812]
[161.09663391 109.01161194]
[175.56044006 112.98633575]
[186.97303772 102.60576630]
[202.18984985 100.06571960]
[216.35528564 106.17672729]
[224.94915771 118.98877716]
[225.22923279 134.41358948]
[217.10612488 147.52919006]
[203.17187500 154.15039062]
[187.87287903 152.16442871]
[176.09097290 142.20501709]
[171.58572388 127.45013428]
[157.12191772 123.47541809]
[142.65811157 119.50069427]
[139.20506287 125.74791718]
[134.84402466 131.39881897]
[129.67599487 136.32254028]
[123.82069397 140.40502930]
[117.41370392 143.55174255]
[110.60341644 145.68981934]
[103.54755402 146.76971436]
[96.40953064 146.76644897]
[89.35466003 145.68006897]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 32]
[7 31]
[8 30]
[9 29]
[10 28]
[11 27]
[12 26]
[13 25]
[14 24]
[16 22]
[34 50]
[35 49]
[36 48]
[37 47]
[58 72]
[59 71]
[60 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
