%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 12:46:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCCAUCGCCAGCUGAUGACUCAAGAUUCCAAGGAGUUCUGCUCAUUCUAAUGAUGGCCCAUUCUACUUGCUCUGGACCUGCCCUCGCAUCCCCUGCCUCCAUCCUAGUAAAGACUCCUUGCUAUGCUGCA\
) } def
/len { sequence length } bind def

/coor [
[-13.02857876 376.54531860]
[-18.33349037 385.05847168]
[-25.96175194 391.52603149]
[-35.17302704 395.34411621]
[-45.08057022 396.16488647]
[-54.73660278 393.92803955]
[-63.32423782 406.22650146]
[-71.91187286 418.52499390]
[-80.49950409 430.82345581]
[-89.08714294 443.12194824]
[-87.70771027 459.10556030]
[-99.44288635 470.04473877]
[-115.29044342 467.54782104]
[-123.09349060 453.53027344]
[-116.86620331 438.74511719]
[-101.38562012 434.53430176]
[-92.79798126 422.23580933]
[-84.21035004 409.93734741]
[-75.62271118 397.63885498]
[-67.03507996 385.34039307]
[-75.18532562 366.85607910]
[-70.66239929 347.02783203]
[-55.09562683 333.72933960]
[-34.53254700 332.34072876]
[-27.44222069 319.12228394]
[-31.97747231 304.98129272]
[-24.97517395 291.47491455]
[-10.11207104 286.81381226]
[-3.02174354 273.59536743]
[-7.55699444 259.45440674]
[-0.55469596 245.94801331]
[14.30840683 241.28689575]
[21.39873505 228.06846619]
[28.48906136 214.85002136]
[35.57938766 201.63157654]
[42.66971588 188.41313171]
[49.76004410 175.19468689]
[56.85037231 161.97624207]
[63.94070053 148.75779724]
[64.33392334 141.30685425]
[71.35533905 135.31544495]
[78.75358582 122.26685333]
[72.50420380 113.82765198]
[69.45586395 103.77865601]
[69.96343231 93.28974915]
[73.96784210 83.58203888]
[81.00288391 75.78569794]
[90.24955750 70.80836487]
[100.63137054 69.22949219]
[110.93968201 71.23289490]
[119.52731323 58.93442154]
[128.11494446 46.63594437]
[126.63674164 33.76131821]
[134.11929321 23.67704010]
[146.07867432 21.50483894]
[154.95225525 9.41105938]
[163.82583618 -2.68272114]
[172.69941711 -14.77650166]
[181.57301331 -26.87028122]
[177.78759766 -32.70269394]
[175.38505554 -39.21107483]
[174.47697449 -46.07343674]
[175.10116577 -52.95186996]
[177.22019958 -59.50919724]
[180.72352600 -65.42547607]
[185.43321228 -70.41364288]
[191.11300659 -74.23340607]
[197.48019409 -76.70283508]
[204.21958923 -77.70701599]
[210.99920654 -77.20336914]
[217.48663330 -75.22344208]
[223.36523438 -71.87098694]
[234.80551147 -81.57253265]
[233.78201294 -96.94324493]
[241.91050720 -109.81883240]
[255.89657593 -115.37348938]
[270.29919434 -111.67177582]
[281.73947144 -121.37332916]
[293.17974854 -131.07487488]
[295.82318115 -137.30010986]
[300.53720093 -140.68136597]
[305.39120483 -140.94772339]
[317.27365112 -150.10238647]
[329.15606689 -159.25703430]
[334.89843750 -174.61793518]
[351.11502075 -177.05812073]
[361.12359619 -164.06732178]
[354.62817383 -149.00938416]
[338.31072998 -147.37460327]
[326.42828369 -138.21994019]
[314.54586792 -129.06529236]
[302.88128662 -119.63459778]
[291.44100952 -109.93305206]
[280.00073242 -100.23149872]
[281.29965210 -85.41762543]
[273.53460693 -72.52699280]
[259.50402832 -66.61128998]
[244.50704956 -70.13225555]
[233.06677246 -60.43070984]
[234.59420776 -36.43616486]
[218.17871094 -18.54542351]
[193.66679382 -17.99669838]
[184.79319763 -5.90291834]
[175.91961670 6.19086218]
[167.04603577 18.28464317]
[158.17245483 30.37842178]
[157.24513245 47.86288834]
[140.41342163 55.22357941]
[131.82579041 67.52205658]
[123.23815155 79.82053375]
[130.68768311 97.65717316]
[126.03215790 116.41796112]
[111.10800171 128.70252991]
[91.80218506 129.66510010]
[84.40393066 142.71369934]
[77.15914154 155.84812927]
[70.06881714 169.06657410]
[62.97848892 182.28500366]
[55.88816071 195.50344849]
[48.79783249 208.72189331]
[41.70750427 221.94033813]
[34.61717606 235.15878296]
[27.52684975 248.37722778]
[31.86495209 263.33779907]
[24.48604965 276.64218140]
[10.19670010 280.68569946]
[3.10637283 293.90414429]
[7.44447517 308.86471558]
[0.06557291 322.16909790]
[-14.22377777 326.21261597]
[-21.31410408 339.43106079]
[-14.90123940 347.29821777]
[-11.20761871 356.72006226]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[24 131]
[25 130]
[28 127]
[29 126]
[32 123]
[33 122]
[34 121]
[35 120]
[36 119]
[37 118]
[38 117]
[39 116]
[41 115]
[42 114]
[50 110]
[51 109]
[52 108]
[55 106]
[56 105]
[57 104]
[58 103]
[59 102]
[72 99]
[73 98]
[77 94]
[78 93]
[79 92]
[82 91]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
