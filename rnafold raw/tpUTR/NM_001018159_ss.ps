%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 17:56:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAAGCAAGCACCUUAAGUAGUGUGUUAAUGAUUGAAACUGUAAUUGCCUUCGGGUUGUGCUUUAGUCUGUAAAAUUCUAAAGGAGAGCUGCUAAAUUGUUUUCUUAAUAAACAUUUUUCUCAUUUGUAA\
) } def
/len { sequence length } bind def

/coor [
[154.05993652 233.36570740]
[164.74543762 222.83859253]
[178.22468567 216.25756836]
[193.09724426 214.30639648]
[207.81953430 217.18840027]
[197.21293640 206.58178711]
[186.60633850 195.97518921]
[175.99972534 185.36859131]
[168.97724915 182.83877563]
[165.27069092 174.38110352]
[154.91949463 163.52510071]
[136.05216980 159.56243896]
[131.36169434 140.02355957]
[120.50568390 129.67237854]
[109.64967346 119.32118988]
[98.79366302 108.97000885]
[94.85256958 108.52697754]
[91.14248657 106.30023193]
[88.47687531 102.44203186]
[87.56594849 97.47183990]
[77.47604370 86.37256622]
[67.38613129 75.27329254]
[52.37807846 70.26641083]
[49.54217529 55.64427567]
[39.45226669 44.54500580]
[24.44421387 39.53812408]
[21.60830688 24.91598701]
[11.51840210 13.81671715]
[1.42849636 2.71744680]
[-14.12175465 1.80781007]
[-24.19624138 -9.59216309]
[-23.23320961 -24.41134453]
[-33.32311630 -35.51061630]
[-43.41302109 -46.60988617]
[-53.50292587 -57.70915604]
[-63.59283447 -68.80842590]
[-73.68273926 -79.90769958]
[-83.77264404 -91.00696564]
[-88.93550873 -92.64432526]
[-92.53752899 -95.82210541]
[-94.24937439 -99.65979767]
[-94.15148926 -103.27681732]
[-103.42387390 -115.06761932]
[-112.69625854 -126.85841370]
[-126.22335052 -126.91883087]
[-137.06927490 -134.67182922]
[-141.37626648 -147.08258057]
[-137.77326965 -159.51258850]
[-146.76243591 -171.52070618]
[-155.75158691 -183.52882385]
[-171.03146362 -189.48342896]
[-173.24676514 -205.73226929]
[-160.11856079 -215.55990601]
[-145.15205383 -208.85652161]
[-143.74346924 -192.51799011]
[-134.75431824 -180.50987244]
[-125.76514435 -168.50175476]
[-109.07239532 -166.85501099]
[-98.49033356 -153.40954590]
[-100.90546417 -136.13079834]
[-91.63307953 -124.34000397]
[-82.36068726 -112.54920197]
[-72.67337036 -101.09687042]
[-62.58346939 -89.99760437]
[-52.49356079 -78.89833069]
[-42.40365601 -67.79906464]
[-32.31375122 -56.69979095]
[-22.22384453 -45.60052109]
[-12.13393974 -34.50125122]
[2.70968199 -34.05126953]
[13.10039425 -22.93876457]
[12.52776718 -7.37245893]
[22.61767197 3.72681165]
[32.70757675 14.82608223]
[46.99393463 19.03906822]
[50.55154037 34.45510101]
[60.64144516 45.55437088]
[74.92780304 49.76735687]
[78.48540497 65.18338776]
[88.57530975 76.28266144]
[98.66521454 87.38192749]
[109.14485168 98.11399841]
[120.00086212 108.46517944]
[130.85687256 118.81636810]
[141.71289062 129.16755676]
[152.67658997 128.28077698]
[162.09841919 133.51617432]
[166.93347168 142.90188599]
[165.77551270 153.17390442]
[176.12669373 164.02992249]
[186.60633850 174.76199341]
[197.21293640 185.36859131]
[207.81953430 195.97518921]
[218.42613220 206.58178711]
[230.94754028 214.84098816]
[244.87306213 220.41592407]
[258.79858398 225.99085999]
[274.48587036 223.93681335]
[283.42581177 235.85011292]
[297.35131836 241.42504883]
[311.27685547 247.00000000]
[325.20236206 252.57493591]
[339.12789917 258.14987183]
[352.82531738 250.60569763]
[368.15737915 253.68177795]
[377.88470459 265.92565918]
[377.41439819 281.55618286]
[366.96850586 293.19305420]
[351.47924805 295.34173584]
[338.26016235 286.98767090]
[333.55294800 272.07537842]
[319.62744141 266.50045776]
[305.70190430 260.92550659]
[291.77639771 255.35057068]
[277.85086060 249.77563477]
[263.15960693 252.22845459]
[253.22364807 239.91638184]
[239.29812622 234.34144592]
[225.37260437 228.76651001]
[233.81660461 241.16404724]
[237.87809753 255.60371399]
[237.13510132 270.58529663]
[231.66482544 284.55227661]
[222.03559875 296.05346680]
[209.24786377 303.89401245]
[194.63021851 307.25924683]
[179.70141602 305.79956055]
[166.01248169 299.66659546]
[154.98567200 289.49755859]
[147.76661682 276.34896851]
[145.10534668 261.58694458]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 94]
[6 93]
[7 92]
[8 91]
[10 90]
[11 89]
[13 85]
[14 84]
[15 83]
[16 82]
[20 81]
[21 80]
[22 79]
[24 77]
[25 76]
[27 74]
[28 73]
[29 72]
[32 69]
[33 68]
[34 67]
[35 66]
[36 65]
[37 64]
[38 63]
[42 62]
[43 61]
[44 60]
[48 57]
[49 56]
[50 55]
[95 119]
[96 118]
[97 117]
[99 115]
[100 114]
[101 113]
[102 112]
[103 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
