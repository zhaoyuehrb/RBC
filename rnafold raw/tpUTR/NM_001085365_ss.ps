%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 22:12:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUGGGGCAGAGACUUGUCACAUCUUUGUCCCCAGCAAAGGCUACAUGUUACCUCCUUCAGUUGAUAAUAAACCUUUCUGAGAUGCAGAGGGUCCAGGUCA\
) } def
/len { sequence length } bind def

/coor [
[94.00028992 148.81098938]
[93.53836823 133.81809998]
[93.07643890 118.82521820]
[80.20309448 111.12606812]
[66.77564240 117.81214142]
[53.34819412 124.49821472]
[39.92074585 131.18429565]
[26.49329758 137.87036133]
[13.06584740 144.55644226]
[-0.36160165 151.24252319]
[-13.78905106 157.92858887]
[-27.21650124 164.61466980]
[-40.64395142 171.30075073]
[-42.22301483 186.64707947]
[-51.86611176 198.68927002]
[-66.49617004 203.58468628]
[-81.44477844 199.77120972]
[-91.94190216 188.46572876]
[-94.63793945 173.27577209]
[-88.67259979 159.04838562]
[-75.94940186 150.32350159]
[-60.52826691 149.88517761]
[-47.33002472 157.87329102]
[-33.90257645 151.18722534]
[-20.47512627 144.50114441]
[-7.04767704 137.81506348]
[6.37977219 131.12899780]
[19.80722237 124.44291687]
[33.23467255 117.75684357]
[46.66212082 111.07077026]
[60.08956909 104.38469696]
[73.51702118 97.69861603]
[80.40907288 84.37572479]
[78.10820007 69.55323792]
[75.80732727 54.73075867]
[73.50645447 39.90827560]
[61.62807846 25.94372177]
[68.39065552 9.83100700]
[65.63441467 -4.91358995]
[62.87817001 -19.65818596]
[60.12192917 -34.40278244]
[45.29859924 -37.89403152]
[33.18076324 -47.11780548]
[25.86791229 -60.47602463]
[24.62703705 -75.65430450]
[29.67313004 -90.02291107]
[40.13192368 -101.09239197]
[54.19136810 -106.94490814]
[69.41558075 -106.56645966]
[83.16687775 -100.02262115]
[93.06275940 -88.44715881]
[97.38870239 -73.84558105]
[95.39521790 -58.74769974]
[87.42768097 -45.76932144]
[74.86652374 -37.15902710]
[77.62276459 -22.41442871]
[80.37901306 -7.66983271]
[83.13525391 7.07476377]
[93.00423431 14.25602055]
[95.33979797 26.64618683]
[88.32893372 37.60740280]
[90.62980652 52.42988205]
[92.93067932 67.25236511]
[95.23155975 82.07484436]
[100.31862640 67.96379852]
[107.70861053 54.91051865]
[120.81941986 47.62307358]
[135.80679321 48.23823166]
[148.27627563 56.57561874]
[154.57167053 70.19061279]
[152.84651184 85.09252167]
[137.97386169 87.04299927]
[151.96093750 92.46162415]
[165.94802856 97.88024902]
[179.93510437 103.29887390]
[193.92219543 108.71749878]
[203.23278809 108.92157745]
[208.25233459 114.52437592]
[222.06591797 120.37116241]
[235.87950134 126.21794891]
[251.22834778 121.54971313]
[264.36581421 130.75769043]
[265.21392822 146.77830505]
[253.12213135 157.32191467]
[237.36618042 154.30036926]
[230.03271484 140.03152466]
[216.21913147 134.18473816]
[202.40554810 128.33795166]
[188.50357056 122.70458221]
[174.51647949 117.28595734]
[160.52940369 111.86733246]
[146.54231262 106.44870758]
[132.55523682 101.03008270]
[126.43375397 105.36338806]
[135.10017395 117.60646820]
[122.85695648 126.27269745]
[114.19080353 114.02999115]
[108.06932831 118.36329651]
[108.53125000 133.35618591]
[108.99317932 148.34906006]
[111.77601624 167.52993774]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 100]
[2 99]
[3 98]
[4 32]
[5 31]
[6 30]
[7 29]
[8 28]
[9 27]
[10 26]
[11 25]
[12 24]
[13 23]
[33 64]
[34 63]
[35 62]
[36 61]
[38 58]
[39 57]
[40 56]
[41 55]
[72 93]
[73 92]
[74 91]
[75 90]
[76 89]
[78 88]
[79 87]
[80 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
