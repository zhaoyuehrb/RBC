%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 20:55:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUGGUGACAUCUGCUGGGAAGUGUGACCUGCUGUCUCGCUGGCCAUCUGGCACCUGGAAGAUUCCUCGACAACCUUAGCAAGGGGG\
) } def
/len { sequence length } bind def

/coor [
[207.79360962 346.91439819]
[209.01788330 334.29260254]
[215.60830688 323.37326050]
[208.03201294 310.42724609]
[200.45571899 297.48120117]
[192.87942505 284.53515625]
[179.77323914 277.45864868]
[179.48077393 261.64016724]
[171.90447998 248.69412231]
[165.67057800 244.41717529]
[164.29853821 235.15480042]
[157.18383789 221.94944763]
[150.06915283 208.74409485]
[142.95446777 195.53875732]
[130.10617065 188.00411987]
[130.37216187 172.18515015]
[123.25746918 158.97979736]
[116.14278412 145.77444458]
[109.02809143 132.56910706]
[101.91339874 119.36375427]
[84.97233582 112.36064911]
[81.36917114 94.38677216]
[69.78451538 84.85808563]
[58.19986343 75.32940674]
[46.61521149 65.80072021]
[31.04211044 63.00981522]
[26.12779427 48.94927597]
[14.54314137 39.42059326]
[2.95848823 29.89190865]
[-13.08413410 30.00943184]
[-23.06603050 17.44992065]
[-19.32994461 1.84795952]
[-4.74187994 -4.82796383]
[9.50744629 2.54334855]
[12.48717213 18.30725670]
[24.07182503 27.83594131]
[35.65647888 37.36462402]
[50.40096664 39.47397232]
[56.14389420 54.21606827]
[67.72854614 63.74475098]
[79.31320190 73.27343750]
[90.89785004 82.80211639]
[94.24900818 81.41123199]
[97.80013275 80.66669464]
[101.97991943 66.26081085]
[106.15969849 51.85492706]
[101.71904755 36.06845856]
[113.36232758 24.52004242]
[129.11193848 29.08969879]
[132.76602173 45.07655716]
[120.56558228 56.03470993]
[116.38579559 70.44058990]
[112.20601654 84.84647369]
[119.34906006 97.94331360]
[115.11875153 112.24906921]
[122.23343658 125.45441437]
[129.34812927 138.65975952]
[136.46281433 151.86511230]
[143.57751465 165.07044983]
[156.93469238 173.54962158]
[156.15980530 188.42405701]
[163.27450562 201.62940979]
[170.38919067 214.83476257]
[177.50387573 228.04010010]
[184.85050964 241.11782837]
[192.42680359 254.06385803]
[206.07490540 262.06634521]
[205.82545471 276.95886230]
[213.40174866 289.90490723]
[220.97804260 302.85095215]
[228.55433655 315.79696655]
[246.46177673 316.93038940]
[260.09704590 328.35516357]
[264.27459717 345.48779297]
[257.54736328 361.62170410]
[266.01797485 374.00106812]
[274.48858643 386.38043213]
[282.95922852 398.75979614]
[297.97216797 405.35852051]
[299.49478149 421.68682861]
[285.96072388 430.94757080]
[271.29266357 423.61407471]
[270.57986450 407.23040771]
[262.10922241 394.85107422]
[253.63861084 382.47171021]
[245.16799927 370.09234619]
[232.86505127 371.54907227]
[221.06944275 367.52880859]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 71]
[4 70]
[5 69]
[6 68]
[8 66]
[9 65]
[11 64]
[12 63]
[13 62]
[14 61]
[16 59]
[17 58]
[18 57]
[19 56]
[20 55]
[22 42]
[23 41]
[24 40]
[25 39]
[27 37]
[28 36]
[29 35]
[44 53]
[45 52]
[46 51]
[75 86]
[76 85]
[77 84]
[78 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
