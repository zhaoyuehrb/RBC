%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 21:16:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUUUUGGCAGUACUGUCUCCUUGGGCCAUGCUGGUCUGACUUAUGCUUACUAAUAAAUUCUGUUUACUGGCAA\
) } def
/len { sequence length } bind def

/coor [
[172.19978333 129.32012939]
[157.82336426 125.04007721]
[143.44696045 120.76004028]
[129.07054138 116.47999573]
[114.69412994 112.19995117]
[101.90135956 119.00371552]
[88.01419830 114.86932373]
[81.02582550 102.17646027]
[65.59162903 105.65441132]
[55.60119629 94.60722351]
[41.22478104 90.32717896]
[26.84836960 86.04713440]
[12.47195816 81.76708984]
[-1.90445447 77.48704529]
[-15.68335819 84.75200653]
[-30.20211411 80.20663452]
[-37.04322433 67.02577972]
[-51.41963577 62.74573898]
[-65.79605103 58.46569443]
[-80.17246246 54.18565369]
[-95.98948669 58.51621628]
[-107.45650482 46.79275894]
[-102.77722931 31.07536507]
[-86.76530457 27.53274536]
[-75.89241791 39.80924225]
[-61.51600266 44.08928299]
[-47.13959122 48.36932755]
[-32.76317978 52.64937210]
[-19.82678986 45.35653687]
[-5.18609333 49.49231339]
[2.37558889 63.11063385]
[16.75200081 67.39067841]
[31.12841415 71.67072296]
[45.50482559 75.95076752]
[59.88123703 80.23081207]
[74.28713989 76.44671631]
[85.30587006 87.80004883]
[98.09864044 80.99628448]
[111.98580170 85.13067627]
[118.97417450 97.82353973]
[133.35058594 102.10358429]
[147.72700500 106.38362122]
[162.10340881 110.66366577]
[176.47982788 114.94371033]
[194.12440491 110.17121887]
[205.84118652 123.06745148]
[220.38218689 126.74973297]
[234.92318726 130.43200684]
[249.46418762 134.11428833]
[260.20294189 123.22270966]
[274.85476685 119.19524384]
[289.45822144 123.01696014]
[300.11669922 133.56460571]
[304.03814697 147.93429565]
[318.57913208 151.61657715]
[333.12014771 155.29885864]
[347.66116333 158.98114014]
[362.12356567 152.03720093]
[376.50646973 159.14434814]
[379.77651978 174.85060120]
[369.42523193 187.10745239]
[353.39321899 186.51251221]
[343.97888184 173.52214050]
[329.43786621 169.83985901]
[314.89685059 166.15757751]
[300.35586548 162.47529602]
[290.06784058 173.24665833]
[275.67385864 177.45018005]
[261.01156616 173.86079407]
[250.04254150 163.34524536]
[245.78190613 148.65530396]
[231.24090576 144.97302246]
[216.69990540 141.29074097]
[202.15890503 137.60845947]
[191.42790222 143.57225037]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[3 42]
[4 41]
[5 40]
[8 37]
[10 35]
[11 34]
[12 33]
[13 32]
[14 31]
[17 28]
[18 27]
[19 26]
[20 25]
[46 74]
[47 73]
[48 72]
[49 71]
[54 66]
[55 65]
[56 64]
[57 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
