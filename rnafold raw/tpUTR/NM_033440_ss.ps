%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 22:38:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAAAGAAGUCCCUGGGACUGUUUCAGACUUGGAAAGGUCACAGAAGGAAAAUAAUAUAAUAAAGUGACAACUAUGCAAAUCA\
) } def
/len { sequence length } bind def

/coor [
[142.51506042 253.66787720]
[132.81396484 244.18055725]
[124.60762787 233.37167358]
[118.07394409 221.47451782]
[113.35466003 208.74601746]
[110.55236816 195.46110535]
[109.72823334 181.90684509]
[110.90065765 168.37622070]
[114.04489899 155.16177368]
[119.09355927 142.54931641]
[125.93806458 130.81170654]
[114.31000519 121.33604431]
[102.68194580 111.86038208]
[90.71168518 102.82086182]
[78.41558075 94.22983551]
[66.11946869 85.63880920]
[50.37548828 84.07754517]
[44.37385178 70.44561005]
[32.07774353 61.85457993]
[19.78163719 53.26355362]
[7.48553085 44.67252731]
[-8.25845337 43.11125946]
[-14.26008892 29.47932625]
[-26.55619621 20.88829994]
[-38.85230255 12.29727268]
[-51.14841080 3.70624542]
[-63.44451904 -4.88478184]
[-79.82042694 -5.75744534]
[-87.01042938 -20.49637032]
[-77.61806488 -33.93941498]
[-61.30538940 -32.25752640]
[-54.85349274 -17.18088913]
[-42.55738449 -8.58986187]
[-30.26127625 0.00116535]
[-17.96516991 8.59219265]
[-5.66906214 17.18321991]
[9.19542217 18.12999725]
[16.07655716 32.37641907]
[28.37266541 40.96744537]
[40.66877365 49.55847168]
[52.96487808 58.14950180]
[67.82936096 59.09627914]
[74.71050262 73.34269714]
[87.00660706 81.93372345]
[99.30271149 90.52475739]
[104.80576324 90.79139709]
[109.69625092 94.24893951]
[112.15760803 100.23232269]
[123.78566742 109.70798492]
[135.41372681 119.18365479]
[148.06195068 108.22570038]
[162.47586060 99.73039246]
[178.18209839 93.97520447]
[194.66511536 91.14761353]
[211.38412476 91.33905029]
[227.79083252 94.54190826]
[243.34747314 100.64984894]
[257.54431152 109.46132660]
[269.91650391 120.68624115]
[280.05920410 133.95549011]
[287.64077759 148.83309937]
[292.41381836 164.83056641]
[294.22308350 181.42288208]
[293.01049805 198.06575012]
[288.81723022 214.21347046]
[302.48254395 220.39881897]
[316.14788818 226.58416748]
[332.40533447 224.43290710]
[342.18118286 237.59971619]
[335.41888428 252.53970337]
[319.07492065 253.88389587]
[309.96255493 240.24949646]
[296.29721069 234.06416321]
[282.63186646 227.87881470]
[275.21917725 239.21501160]
[266.22299194 249.34327698]
[255.83735657 258.04425049]
[244.28642273 265.12939453]
[231.81954956 270.44500732]
[218.70602417 273.87564087]
[205.22917175 275.34655762]
[191.68028259 274.82537842]
[178.35224915 272.32275391]
[165.53330994 267.89221191]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 50]
[12 49]
[13 48]
[14 45]
[15 44]
[16 43]
[18 41]
[19 40]
[20 39]
[21 38]
[23 36]
[24 35]
[25 34]
[26 33]
[27 32]
[65 74]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
