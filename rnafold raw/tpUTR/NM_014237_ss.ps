%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 10:31:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUGCACAGAACUUCCAUAGCAAAUAACCUAAAGGAACGAAUGUGCUUUAUUUAUAACCUUACGUUAUCCCCAAUGCAUUGUAAAUGUCAAACUUUUGGAAAAUAAAGCCUGCGUGCCCUCCC\
) } def
/len { sequence length } bind def

/coor [
[-108.18716431 349.41177368]
[-127.45800018 355.17489624]
[-146.96797180 350.59561157]
[-156.38334656 362.27255249]
[-165.79870605 373.94949341]
[-175.21408081 385.62643433]
[-167.90216064 398.95324707]
[-166.25175476 414.06433105]
[-170.51452637 428.65530396]
[-180.04045105 440.50122070]
[-193.37687683 447.79559326]
[-208.49011230 449.42611694]
[-223.07548523 445.14416504]
[-234.90884399 435.60266113]
[-242.18568420 422.25665283]
[-243.79632568 407.14129639]
[-239.49517822 392.56155396]
[-229.93812561 380.74075317]
[-216.58255005 373.48147583]
[-201.46507263 371.89071655]
[-186.89102173 376.21105957]
[-177.47564697 364.53411865]
[-168.06027222 352.85717773]
[-158.64489746 341.18023682]
[-164.18736267 332.57077026]
[-167.29351807 322.79602051]
[-167.73910522 312.53207397]
[-165.48419189 302.49133301]
[-160.67662048 293.37310791]
[-153.64230347 285.81475830]
[-144.86318970 280.34738159]
[-134.94421387 277.35824585]
[-124.57160187 277.06353760]
[-114.46546173 279.49270630]
[-105.32972717 284.48583984]
[-94.26703644 274.35583496]
[-83.20433807 264.22586060]
[-86.55636597 249.71276855]
[-82.16470337 235.37507629]
[-71.11303711 225.09271240]
[-56.30124664 221.70043945]
[-41.68485260 226.20689392]
[-30.62215424 216.07690430]
[-19.55945778 205.94691467]
[-8.49676037 195.81692505]
[2.30787468 185.41212463]
[12.84762383 174.73908997]
[23.38737297 164.06605530]
[33.92712402 153.39302063]
[44.46687317 142.71998596]
[55.00662231 132.04695129]
[65.54637146 121.37391663]
[76.08612061 110.70088196]
[86.62586975 100.02784729]
[92.14773560 86.08119965]
[91.77079010 71.08593750]
[91.39383698 56.09067154]
[91.01688385 41.09540939]
[90.63993073 26.10014534]
[80.05192566 14.04719067]
[83.01552582 -1.71975756]
[97.25730133 -9.10564709]
[111.85218811 -2.44465470]
[115.60423279 13.15347576]
[105.63519287 25.72319412]
[106.01214600 40.71845627]
[106.38909912 55.71371841]
[106.76605225 70.70898438]
[107.14300537 85.70424652]
[113.42446136 89.80220032]
[125.98738098 97.99811554]
[132.26884460 102.09607697]
[146.14500427 96.39939117]
[160.02116394 90.70270538]
[173.89732361 85.00601959]
[176.04310608 69.86194611]
[185.41908264 57.90419388]
[199.42842102 52.28237534]
[214.27142334 54.41336823]
[225.97602844 63.62574005]
[239.85218811 57.92905426]
[253.72834778 52.23236847]
[258.30477905 37.27943420]
[271.45016479 28.80991173]
[286.95764160 30.82284927]
[297.50506592 42.36779785]
[298.11227417 57.99359131]
[288.49252319 70.32219696]
[273.18801880 73.53244019]
[259.42501831 66.10852814]
[245.54887390 71.80521393]
[231.67271423 77.50189972]
[229.81755066 92.28107452]
[220.75355530 104.22679138]
[206.83525085 110.07032013]
[191.76177979 108.14998627]
[179.59400940 98.88217163]
[165.71784973 104.57885742]
[151.84169006 110.27555084]
[137.96553040 115.97223663]
[111.59107208 123.32683563]
[97.29890442 110.56759644]
[86.75915527 121.24063110]
[76.21940613 131.91366577]
[65.67965698 142.58670044]
[55.13990784 153.25973511]
[44.60015869 163.93276978]
[34.06040955 174.60580444]
[23.52065849 185.27883911]
[12.98090935 195.95187378]
[10.88782215 202.41477966]
[6.46457911 206.20466614]
[1.63323140 206.87962341]
[-9.42946529 217.00961304]
[-20.49216270 227.13960266]
[-31.55485916 237.26959229]
[-28.34988213 252.22537231]
[-33.03027725 266.68188477]
[-44.24379349 276.78750610]
[-58.91185760 279.90261841]
[-73.07434845 275.28854370]
[-84.13703918 285.41854858]
[-95.19973755 295.54852295]
[-89.51717377 315.07449341]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 24]
[4 23]
[5 22]
[6 21]
[35 123]
[36 122]
[37 121]
[42 116]
[43 115]
[44 114]
[45 113]
[46 110]
[47 109]
[48 108]
[49 107]
[50 106]
[51 105]
[52 104]
[53 103]
[54 102]
[55 69]
[56 68]
[57 67]
[58 66]
[59 65]
[72 100]
[73 99]
[74 98]
[75 97]
[80 92]
[81 91]
[82 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
