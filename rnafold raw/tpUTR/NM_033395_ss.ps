%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:20:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUCUAGAAAUAGUGUAAAGGUUUUUUAAUUGUGUAUAUGUAGCAUUAGACAAAAUUAUUUAAAGUCAAUAAAUUGUUAUUCGAGG\
) } def
/len { sequence length } bind def

/coor [
[91.73291779 317.78570557]
[76.01918793 316.09631348]
[66.16767883 303.73818970]
[68.02311707 288.04318237]
[80.48471069 278.32287598]
[82.08813477 263.40884399]
[75.75565338 249.92741394]
[84.92378998 237.03338623]
[86.52722168 222.11933899]
[88.13064575 207.20527649]
[89.20073700 192.24349976]
[89.73612213 177.25305176]
[90.27149963 162.26260376]
[90.80688477 147.27217102]
[91.34226990 132.28172302]
[78.20941925 125.34238434]
[69.38031769 113.39779663]
[66.59875488 98.80706787]
[70.41411591 84.45195770]
[80.07284546 73.16766357]
[93.66728210 67.18289185]
[94.20266724 52.19244766]
[94.73805237 37.20200348]
[95.27343750 22.21156120]
[95.80882263 7.22111988]
[96.34420776 -7.76932287]
[85.98449707 -24.88251877]
[96.40361786 -41.00873184]
[95.86823273 -55.99917603]
[95.33284760 -70.98961639]
[94.79746246 -85.98005676]
[94.26207733 -100.97050476]
[86.03714752 -114.48571777]
[93.31524658 -127.48104095]
[92.77986145 -142.47148132]
[92.24447632 -157.46192932]
[84.01954651 -170.97714233]
[91.29765320 -183.97247314]
[90.76226807 -198.96290588]
[77.81642151 -207.51771545]
[72.40293121 -222.05984497]
[76.60340118 -236.99757385]
[88.80266571 -246.58703613]
[104.30985260 -247.14086914]
[117.16213989 -238.44613647]
[122.41754913 -223.84613037]
[118.05528259 -208.95484924]
[105.75270844 -199.49829102]
[106.28809357 -184.50785828]
[114.47473145 -172.06484985]
[107.23492432 -157.99731445]
[107.77030945 -143.00686646]
[108.30569458 -128.01643372]
[116.49232483 -115.57342529]
[109.25251770 -101.50588989]
[109.78790283 -86.51544189]
[110.32328796 -71.52500153]
[110.85867310 -56.53456116]
[111.39405823 -41.54411697]
[119.66341400 -35.08087921]
[122.96004486 -24.88251877]
[119.91500092 -14.37443256]
[111.33464813 -7.23393774]
[110.79926300 7.75650454]
[110.26387787 22.74694633]
[109.72850037 37.73738861]
[109.19311523 52.72783279]
[108.65773010 67.71827698]
[121.79058075 74.65761566]
[130.61968994 86.60220337]
[133.40124512 101.19293213]
[129.58587646 115.54804230]
[119.92715454 126.83233643]
[106.33271790 132.81710815]
[105.79733276 147.80755615]
[105.26194763 162.79798889]
[104.72656250 177.78843689]
[104.19117737 192.77888489]
[107.10469818 199.12591553]
[106.31667328 205.04701233]
[103.04470062 208.80870056]
[101.44127655 223.72276306]
[99.83784485 238.63681030]
[106.05564117 253.18499756]
[97.00218964 265.01226807]
[95.39876556 279.92633057]
[105.50937653 292.07339478]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 86]
[6 85]
[8 83]
[9 82]
[10 81]
[11 78]
[12 77]
[13 76]
[14 75]
[15 74]
[21 68]
[22 67]
[23 66]
[24 65]
[25 64]
[26 63]
[28 59]
[29 58]
[30 57]
[31 56]
[32 55]
[34 53]
[35 52]
[36 51]
[38 49]
[39 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
