%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 14:29:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGGCCCCGCGCCGGAGUCCAGGGGCCCCUUCUGGACGCCCCGCGACUCUGGCGAAAUAAAGCGAGUGCUGCGGCCG\
) } def
/len { sequence length } bind def

/coor [
[90.19966888 222.96197510]
[77.50612640 211.72319031]
[84.79177856 196.41450500]
[85.98352814 181.46192932]
[87.17527771 166.50933838]
[88.36703491 151.55676270]
[89.55878448 136.60417175]
[72.30040741 126.10780334]
[62.84260941 108.25913239]
[63.84882736 88.08457184]
[75.03569794 71.26555634]
[67.62195587 58.22574997]
[60.20822144 45.18594742]
[52.79448318 32.14614105]
[45.38074493 19.10633850]
[37.96700668 6.06653452]
[30.55326843 -6.97326946]
[23.13953018 -20.01307297]
[15.72579288 -33.05287933]
[8.31205463 -46.09268188]
[-6.66133881 -50.38631058]
[-13.99416637 -63.71613693]
[-9.80857277 -77.96451569]
[-17.22231102 -91.00432587]
[-24.63604927 -104.04412842]
[-32.04978561 -117.08393097]
[-39.46352386 -130.12373352]
[-55.50549698 -138.90223694]
[-55.01636124 -156.32690430]
[-62.94265366 -169.06164551]
[-77.65560150 -176.30465698]
[-78.46931458 -192.68360901]
[-64.54671478 -201.34924316]
[-50.21017456 -193.38710022]
[-50.20790482 -176.98794556]
[-42.28161240 -164.25318909]
[-30.42307854 -161.11714172]
[-23.76169586 -150.33880615]
[-26.42371941 -137.53747559]
[-19.00998306 -124.49766541]
[-11.59624481 -111.45786285]
[-4.18250656 -98.41806030]
[3.23123097 -85.37825775]
[17.61583519 -81.68789673]
[25.32017708 -68.56929779]
[21.35186005 -53.50642014]
[28.76559639 -40.46661377]
[36.17933655 -27.42681122]
[43.59307098 -14.38700771]
[51.00680923 -1.34720325]
[58.42054749 11.69260120]
[65.83428955 24.73240471]
[73.24802399 37.77220917]
[80.66175842 50.81201172]
[88.07550049 63.85181808]
[100.20259857 61.93632126]
[112.30861664 63.98080063]
[123.13410187 69.77256012]
[131.55282593 78.70905304]
[136.68891907 89.86056519]
[138.00805664 102.06693268]
[135.37301636 114.05827332]
[147.94764709 122.23619080]
[160.52229309 130.41410828]
[176.91815186 130.74243164]
[184.59367371 145.23443604]
[175.65295410 158.98200989]
[159.29342651 157.84280396]
[152.34437561 142.98875427]
[139.76972961 134.81083679]
[127.19509125 126.63291168]
[120.54582977 132.04299927]
[112.85456085 135.82798767]
[104.51136780 137.79592896]
[103.31961823 152.74851990]
[102.12786102 167.70109558]
[100.93611145 182.65367126]
[99.74436188 197.60626221]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 78]
[4 77]
[5 76]
[6 75]
[7 74]
[11 55]
[12 54]
[13 53]
[14 52]
[15 51]
[16 50]
[17 49]
[18 48]
[19 47]
[20 46]
[23 43]
[24 42]
[25 41]
[26 40]
[27 39]
[29 36]
[30 35]
[62 71]
[63 70]
[64 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
