%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 06:29:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUGCUCUCUACCAACUACCAUGAGGCUAAAAGCAAAGUCAACAAACCCCUAUUAUACCUUCCACCAAAUUCUUUAUCAUUGUCUUUCUUAGGAAACAGACAUACUCAUUCAUUUGAUUUAAUAAAGUUUUAUUUUUCCAAAUGUACAGCUGGUUGGACCUGUAAAAAAAAAUUAAAAGAAUCAGAACCAUAA\
) } def
/len { sequence length } bind def

/coor [
[-80.60182953 496.82235718]
[-86.70288086 510.52551270]
[-92.80392456 524.22869873]
[-98.90497589 537.93188477]
[-105.00602722 551.63507080]
[-94.28604889 562.37969971]
[-88.17494202 576.27276611]
[-87.49919128 591.43548584]
[-92.35018158 605.81719971]
[-102.07185364 617.47277832]
[-115.34943390 624.82604980]
[-130.38723755 626.88244629]
[-145.15153503 623.36389160]
[-157.64555359 614.74627686]
[-166.17961121 602.19500732]
[-169.59951782 587.40753174]
[-167.44277954 572.38378906]
[-160.00105286 559.15557861]
[-148.28079224 549.51196289]
[-133.86706543 544.75708008]
[-118.70920563 545.53399658]
[-112.60816193 531.83081055]
[-106.50711060 518.12768555]
[-100.40605927 504.42446899]
[-94.30500793 490.72128296]
[-105.28903961 480.50604248]
[-118.51429749 487.58367920]
[-131.73954773 494.66128540]
[-144.96481323 501.73889160]
[-146.94961548 517.12847900]
[-157.62561035 528.38916016]
[-172.88763428 531.19097900]
[-186.86715698 524.45654297]
[-194.18873596 510.77536011]
[-192.03709412 495.40817261]
[-181.23957825 484.26397705]
[-165.94805908 481.62792969]
[-152.04241943 488.51364136]
[-138.81716919 481.43600464]
[-125.59191132 474.35839844]
[-112.36665344 467.28079224]
[-120.19258118 452.03686523]
[-124.99147797 435.62237549]
[-126.60310364 418.63082886]
[-124.98225403 401.67413330]
[-120.19986725 385.36047363]
[-112.44007111 370.27261353]
[-101.99310303 356.94696045]
[-89.24447632 345.85455322]
[-74.66075134 337.38446045]
[-58.77248001 331.83007812]
[-42.15491104 329.37899780]
[-25.40715218 330.10662842]
[-9.13057137 333.97412109]
[-3.25107193 320.17443848]
[2.62842727 306.37475586]
[8.50792599 292.57507324]
[14.38742542 278.77536011]
[7.94917345 267.60494995]
[9.14216423 254.57177734]
[17.75373077 244.45933533]
[30.80755234 241.10856628]
[36.90860367 227.40539551]
[43.00965118 213.70220947]
[49.11070251 199.99902344]
[55.10116959 186.24714661]
[60.98067093 172.44744873]
[66.86016846 158.64776611]
[57.51055908 152.27288818]
[49.35997772 144.42292786]
[42.63842010 135.31936646]
[37.53557587 125.21911621]
[34.19543457 114.40719604]
[32.71225739 103.18872070]
[33.12789917 91.88025665]
[35.43062973 80.80092621]
[39.55546570 70.26338196]
[45.38600540 60.56499100]
[52.75772095 51.97942734]
[61.46258545 44.74897385]
[71.25495148 39.07767105]
[81.85848236 35.12555695]
[79.45230865 20.31980324]
[77.04614258 5.51404905]
[74.63996887 -9.29170513]
[72.23380280 -24.09745789]
[69.58942413 -38.86252594]
[66.70752716 -53.58308029]
[63.82562256 -68.30363464]
[52.64818954 -80.30350494]
[57.70972824 -95.90199280]
[73.80335999 -99.05271149]
[84.37333679 -86.51446533]
[78.54617310 -71.18553162]
[81.42807770 -56.46498108]
[84.30997467 -41.74442673]
[87.71363831 -38.37691879]
[89.02963257 -32.83107758]
[87.03955841 -26.50362778]
[89.44572449 -11.69787407]
[91.85189819 3.10787988]
[94.25806427 17.91363335]
[96.66423035 32.71938705]
[103.67308807 32.73696136]
[110.64218140 33.48269272]
[117.49606323 34.94851303]
[124.16053772 37.11855316]
[130.56346130 39.96931839]
[136.63552856 43.46995163]
[142.31098938 47.58255386]
[147.52841187 52.26260376]
[152.23130798 57.45944214]
[164.84416199 49.34059143]
[177.45703125 41.22174072]
[190.06988525 33.10288620]
[202.68273926 24.98403740]
[215.29560852 16.86518669]
[214.65921021 1.58309686]
[221.71099854 -11.87681484]
[234.46839905 -19.94619370]
[249.45173645 -20.54253197]
[262.63302612 -13.60573101]
[275.24588013 -21.72458267]
[287.85873413 -29.84343338]
[300.47161865 -37.96228409]
[313.08447266 -46.08113480]
[320.10311890 -60.90242386]
[336.46780396 -61.96487808]
[345.34396362 -48.17553329]
[337.60052490 -33.71968842]
[321.20330811 -33.46827316]
[308.59045410 -25.34942245]
[295.97760010 -17.23057175]
[283.36474609 -9.11172104]
[270.75186157 -0.99287039]
[271.60787964 13.87766552]
[264.86074829 27.26915550]
[252.23306274 35.54006577]
[237.06129456 36.38536072]
[223.41445923 29.47804642]
[210.80158997 37.59689713]
[198.18873596 45.71574783]
[185.57588196 53.83459854]
[172.96301270 61.95344925]
[160.35015869 70.07230377]
[166.80702209 91.36112213]
[165.97773743 113.59211731]
[157.95275879 134.34072876]
[143.60729980 151.34403992]
[124.50592804 162.74765015]
[102.73186493 167.30783081]
[80.65985870 164.52725220]
[74.78036499 178.32695007]
[68.90086365 192.12664795]
[68.41400909 201.26176453]
[62.81388474 206.10008240]
[56.71283340 219.80325317]
[50.61178589 233.50643921]
[44.51073456 247.20962524]
[51.07890320 263.41625977]
[44.03847504 279.05386353]
[28.18711662 284.65487671]
[22.30761719 298.45455933]
[16.42811966 312.25424194]
[10.54862022 326.05395508]
[4.66912079 339.85363770]
[12.67255783 344.56787109]
[20.14235306 350.10253906]
[26.99463272 356.39761353]
[33.15224075 363.38455200]
[38.54559326 370.98693848]
[43.11347198 379.12152100]
[46.80372620 387.69885254]
[49.57384491 396.62448120]
[51.39147568 405.79992676]
[52.23477936 415.12377930]
[52.09268951 424.49273682]
[50.96508026 433.80285645]
[48.86275101 442.95071411]
[45.80735779 451.83441162]
[41.83116913 460.35488892]
[36.97673416 468.41693115]
[31.29643059 475.93020630]
[24.85189629 482.81033325]
[17.71335983 488.97985840]
[9.95887947 494.36907959]
[1.67348647 498.91677856]
[-7.05174494 502.57101440]
[-16.12070084 505.28970337]
[-25.43328476 507.04104614]
[-34.88652420 507.80392456]
[-44.37570190 507.56817627]
[-53.79553604 506.33468628]
[-63.04131317 504.11547852]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[4 22]
[5 21]
[26 41]
[27 40]
[28 39]
[29 38]
[54 166]
[55 165]
[56 164]
[57 163]
[58 162]
[62 159]
[63 158]
[64 157]
[65 156]
[66 154]
[67 153]
[68 152]
[82 103]
[83 102]
[84 101]
[85 100]
[86 99]
[87 96]
[88 95]
[89 94]
[112 145]
[113 144]
[114 143]
[115 142]
[116 141]
[117 140]
[122 135]
[123 134]
[124 133]
[125 132]
[126 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
