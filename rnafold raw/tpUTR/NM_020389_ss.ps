%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 17:58:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCCCACAUCGGCGUCUGUGACUUCUACCAGCAUUCCAAGGCCAGGUUGGAUGCCCUCGCCCCCAUCCUUGGUGGGGAGGGGUCCCCAGCCCACUCCUCUAGGACACGAAGGGGAUCUCCUGG\
) } def
/len { sequence length } bind def

/coor [
[76.69834900 178.49076843]
[62.68135071 194.06770325]
[41.61978531 199.66581726]
[35.40415192 213.31741333]
[29.18851852 226.96899414]
[34.96249771 241.68078613]
[28.56602478 256.13281250]
[13.79401207 261.75091553]
[-0.58956575 255.20199585]
[-6.05118752 240.37141418]
[0.64942956 226.05787659]
[15.53692818 220.75335693]
[21.75256157 207.10177612]
[27.96819687 193.45018005]
[16.41049767 183.88882446]
[4.16540861 192.55241394]
[-8.07968044 201.21600342]
[-17.51758575 215.30012512]
[-33.66395950 210.12992859]
[-33.16557693 193.18330383]
[-16.74327087 188.97091675]
[-4.49818182 180.30732727]
[7.74690676 171.64373779]
[7.40931988 156.75375366]
[12.61733913 143.20573425]
[22.32214928 132.92837524]
[34.85914230 127.26658630]
[48.22835159 126.80882263]
[60.41201401 131.33717346]
[70.11785126 119.90053558]
[79.82369232 108.46389771]
[77.94369507 93.58217621]
[65.69860840 84.91858673]
[53.45351791 76.25499725]
[41.20842743 67.59140778]
[32.28786850 65.14790344]
[28.76818848 58.55304337]
[16.74468422 49.58446884]
[4.72117901 40.61589432]
[-7.30232573 31.64731789]
[-22.47916603 35.41527939]
[-36.50451279 28.49981880]
[-42.75603104 14.16620255]
[-38.28194046 -0.81767285]
[-25.19477081 -9.37687969]
[-9.67388439 -7.47002172]
[0.95223087 4.00254011]
[1.66624880 19.62381363]
[13.68975353 28.59238815]
[25.71325874 37.56096268]
[37.73676300 46.52953720]
[49.87201691 55.34631729]
[62.11710739 64.00991058]
[74.36219788 72.67350006]
[86.60728455 81.33708954]
[100.81375885 76.52293396]
[105.26938629 62.19996643]
[109.72500610 47.87699890]
[114.18063354 33.55403137]
[113.74793243 24.31498909]
[118.93238068 18.92965126]
[123.74653625 4.72317743]
[128.56068420 -9.48329735]
[133.19593811 -23.74914551]
[137.65156555 -38.07211304]
[142.10719299 -52.39508057]
[137.97047424 -68.26390839]
[149.83335876 -79.58663177]
[165.49232483 -74.71540070]
[168.83877563 -58.66132355]
[156.43016052 -47.93945694]
[151.97453308 -33.61648941]
[147.51890564 -19.29352188]
[148.54779053 -11.88935184]
[142.76716614 -4.66914320]
[137.95300293 9.53733158]
[133.13885498 23.74380684]
[128.50360107 38.00965500]
[124.04797363 52.33262253]
[119.59235382 66.65559387]
[115.13672638 80.97856140]
[122.03042603 94.30060577]
[136.29627991 98.93585968]
[150.56211853 103.57111359]
[164.82797241 108.20636749]
[179.09381104 112.84162140]
[193.35966492 117.47688293]
[207.62551880 122.11213684]
[221.58033752 115.19112396]
[235.98191833 120.09515381]
[242.49403381 133.44160461]
[253.06706238 124.50024414]
[266.57580566 121.99942780]
[279.44390869 126.49170685]
[288.31866455 136.69256592]
[290.94464111 149.84544373]
[305.08950806 154.83773804]
[319.23437500 159.83003235]
[335.24783325 156.29435730]
[346.11538696 168.57556152]
[340.65744019 184.03981018]
[324.48861694 186.77879333]
[314.24206543 173.97488403]
[300.09719849 168.98258972]
[285.95236206 163.99029541]
[272.79428101 173.71949768]
[256.26446533 173.72924805]
[242.82856750 163.81916809]
[237.85877991 147.70745850]
[224.74551392 154.67723083]
[210.21188354 150.17964172]
[202.99024963 136.37797546]
[188.72441101 131.74272156]
[174.45855713 127.10747528]
[160.19271851 122.47221375]
[145.92686462 117.83695984]
[131.66101074 113.20170593]
[117.39517212 108.56645203]
[112.95423126 114.68633270]
[106.45383453 118.69351959]
[98.84341431 119.93578339]
[91.26033020 118.16973877]
[81.55448914 129.60636902]
[71.84864807 141.04301453]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 14]
[4 13]
[5 12]
[15 23]
[16 22]
[17 21]
[29 124]
[30 123]
[31 122]
[32 55]
[33 54]
[34 53]
[35 52]
[37 51]
[38 50]
[39 49]
[40 48]
[56 81]
[57 80]
[58 79]
[59 78]
[61 77]
[62 76]
[63 75]
[64 73]
[65 72]
[66 71]
[82 118]
[83 117]
[84 116]
[85 115]
[86 114]
[87 113]
[88 112]
[91 109]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
