%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 09:49:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUCCCAGUUUAAUAUUCCAAUACCCUAGAAGAAAACCCGAGGGACAGCAGAUUCCACAGGACACGAAGGCUGCCCCUGUAAGGUUUCAAUGCAUACAAUAAAAGAGCUUUAUCCCUAACUUCUGUUA\
) } def
/len { sequence length } bind def

/coor [
[81.17051697 257.43054199]
[78.66555023 272.27005005]
[73.31337738 286.33563232]
[65.31973267 299.08663940]
[54.99186707 310.03292847]
[42.72675323 318.75378418]
[28.99583435 324.91397095]
[14.32688618 328.27673340]
[-0.71625370 328.71282959]
[-15.55536842 326.20544434]
[-29.62008095 320.85101318]
[-42.36978149 312.85528564]
[-53.31440735 302.52566528]
[-62.03327179 290.25912476]
[-68.19124603 276.52722168]
[-71.55164337 261.85772705]
[-71.98528290 246.81451416]
[-69.47550964 231.97579956]
[-64.11878967 217.91195679]
[-56.12101746 205.16355896]
[-45.78960800 194.22059631]
[-33.52167130 185.50372314]
[-19.78875732 179.34796143]
[-5.11872244 175.98994446]
[9.92455769 175.55874634]
[24.76285934 178.07090759]
[38.82584000 183.42991638]
[46.79526901 170.72210693]
[54.76470184 158.01431274]
[62.73413086 145.30651855]
[70.70356750 132.59870911]
[78.67299652 119.89091492]
[73.67441559 113.68679047]
[70.47373962 106.24138641]
[69.37400818 98.07387543]
[70.52890015 89.77564240]
[73.92611694 81.96744537]
[79.38300323 75.25301361]
[86.55515289 70.17251587]
[94.95754242 67.15946198]
[103.99716949 66.50447083]
[100.38015747 51.94709778]
[96.76314545 37.38972092]
[93.14613342 22.83234406]
[82.30945587 11.30511665]
[86.74945831 -2.91232324]
[83.13244629 -17.46969986]
[79.51543427 -32.02707672]
[75.89842224 -46.58445358]
[58.09329224 -50.99129105]
[44.98147202 -63.69754410]
[40.06301498 -81.19374847]
[44.59157562 -98.70816803]
[57.25619125 -111.50809479]
[52.58620834 -125.76261139]
[47.91622162 -140.01712036]
[37.23914719 -153.18664551]
[46.93829346 -167.09214783]
[62.98535156 -161.62147522]
[62.17074203 -144.68710327]
[66.84072113 -130.43258667]
[71.51070404 -116.17807770]
[83.42868042 -115.36431122]
[94.38817596 -110.52449799]
[103.06809998 -102.21608734]
[108.41332245 -91.41617584]
[109.76290131 -79.40661621]
[106.93174744 -67.62191010]
[100.23554230 -57.47786331]
[90.45580292 -50.20146561]
[94.07281494 -35.64408875]
[97.68982697 -21.08671188]
[101.30683899 -6.52933550]
[111.88480377 3.95665002]
[107.70350647 19.21533203]
[111.32051849 33.77270889]
[114.93753052 48.33008575]
[118.55454254 62.88746262]
[130.53773499 71.90982819]
[145.52774048 71.36199188]
[160.51773071 70.81416321]
[175.50772095 70.26633453]
[190.49771118 69.71850586]
[205.48770142 69.17066956]
[220.47769165 68.62284088]
[235.46769714 68.07501221]
[250.45768738 67.52718353]
[254.82763672 53.02951813]
[263.67022705 40.73776245]
[276.02627563 31.98522186]
[290.55548096 27.72131348]
[305.68182373 28.40855408]
[319.76452637 33.97239304]
[331.27600098 43.80931091]
[338.96752930 56.85227203]
[342.00485229 71.68647003]
[340.05847168 86.70280457]
[333.33950806 100.27241516]
[322.57681274 110.92337036]
[308.93780518 117.50034332]
[293.90197754 119.28990173]
[279.10028076 116.09793091]
[266.13830566 108.27067566]
[256.42208862 96.65717316]
[251.00550842 82.51717377]
[236.01551819 83.06500244]
[221.02552795 83.61283875]
[206.03553772 84.16066742]
[191.04554749 84.70849609]
[176.05555725 85.25632477]
[161.06555176 85.80415344]
[146.07556152 86.35198975]
[131.08557129 86.89981842]
[132.98831177 97.53452301]
[131.42227173 108.01132965]
[126.68439484 117.25016785]
[119.39151001 124.34197998]
[110.40315247 128.63786316]
[100.72164154 129.80728149]
[91.38079834 127.86035156]
[83.41136169 140.56814575]
[75.44193268 153.27593994]
[67.47250366 165.98374939]
[59.50307083 178.69154358]
[51.53363800 191.39933777]
[62.48160553 201.72543335]
[71.20444489 213.98913574]
[77.36686707 227.71907043]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[27 125]
[28 124]
[29 123]
[30 122]
[31 121]
[32 120]
[41 78]
[42 77]
[43 76]
[44 75]
[46 73]
[47 72]
[48 71]
[49 70]
[54 62]
[55 61]
[56 60]
[79 113]
[80 112]
[81 111]
[82 110]
[83 109]
[84 108]
[85 107]
[86 106]
[87 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
