%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 22:48:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGGAGCGGGUAGAGGGAUGGGCUCUGCUCAGCUAUUCUUGGGCCAGAUGGGGCCUGACCGAUAGAAUAAAAGACUUUUCUACAACA\
) } def
/len { sequence length } bind def

/coor [
[89.24631500 102.80021667]
[74.30467987 104.12220001]
[59.36305237 105.44419098]
[44.42142105 106.76617432]
[29.47978973 108.08816528]
[14.56381607 109.67364502]
[-0.32185280 111.52211761]
[-15.20752144 113.37059784]
[-30.05824852 115.48149109]
[-44.86941147 117.85415649]
[-59.68056870 120.22681427]
[-74.49172974 122.59947968]
[-89.30289459 124.97213745]
[-104.11405182 127.34480286]
[-118.92520905 129.71746826]
[-133.73637390 132.09011841]
[-141.61087036 145.60035706]
[-156.34468079 150.83949280]
[-170.98097229 145.33377075]
[-178.60893250 131.68281555]
[-175.62686157 116.33220673]
[-163.44281006 106.53002167]
[-147.80970764 106.90455627]
[-136.10903931 117.27896118]
[-121.29787445 114.90630341]
[-106.48671722 112.53363800]
[-91.67555237 110.16098022]
[-76.86439514 107.78831482]
[-62.05323029 105.41565704]
[-47.24207306 103.04299164]
[-32.43091202 100.67033386]
[-26.18640137 96.40887451]
[-17.05599785 98.48492432]
[-2.17032862 96.63645172]
[12.71533966 94.78797150]
[19.10635376 90.74954987]
[28.15780258 93.14653778]
[43.09943390 91.82454681]
[58.04106522 90.50255585]
[72.98269653 89.18057251]
[87.92432404 87.85858154]
[99.83804321 78.74467468]
[105.02359009 64.66951752]
[110.20913696 50.59435654]
[115.39468384 36.51919556]
[120.58023071 22.44403839]
[113.73054504 8.20123672]
[119.03704071 -6.68555784]
[133.35147095 -13.38427448]
[148.18132019 -7.92068338]
[154.72833252 6.46376371]
[149.10824585 21.23502922]
[134.65539551 27.62958336]
[129.46984863 41.70474243]
[124.28429413 55.77990341]
[119.09874725 69.85506439]
[113.91320801 83.93022156]
[121.95694733 71.26932526]
[136.41416931 67.27072906]
[149.82057190 73.99890137]
[155.25439453 87.98008728]
[149.91015625 101.99575806]
[136.54708862 108.80960083]
[122.06291962 104.90239716]
[135.39176941 111.78292084]
[148.72062683 118.66345215]
[162.04948425 125.54397583]
[175.37834167 132.42449951]
[188.25997925 124.06036377]
[203.59870911 123.27365112]
[217.26847839 130.27598572]
[225.59220886 143.18379211]
[226.33084106 158.52490234]
[219.28569031 172.17266846]
[206.35186768 180.45588684]
[191.00849915 181.14643860]
[177.38288879 174.05853271]
[169.14024353 161.09881592]
[168.49780273 145.75335693]
[155.16896057 138.87283325]
[141.84010315 131.99230957]
[128.51124573 125.11177826]
[115.18239594 118.23125458]
[108.68241882 120.13076782]
[102.40852356 119.97682190]
[96.95080566 118.06410217]
[92.74948883 114.84143066]
[90.05939484 110.85099030]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 41]
[2 40]
[3 39]
[4 38]
[5 37]
[6 35]
[7 34]
[8 33]
[9 31]
[10 30]
[11 29]
[12 28]
[13 27]
[14 26]
[15 25]
[16 24]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
[64 83]
[65 82]
[66 81]
[67 80]
[68 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
