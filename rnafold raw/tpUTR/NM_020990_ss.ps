%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 12:46:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCCAUCGCCAGCUGAUGACUCAAGAUUCCCAGGAGUUCUGCUCAUUCUAAUGAUGGCCCAUUCUACUUGCUCUGGACCUGCCCCCGCAUCCCCUGCCUCCAUCCUAGUAAAGACUCCUUGCUAUGCUGCA\
) } def
/len { sequence length } bind def

/coor [
[86.65387726 127.05881500]
[84.37660980 141.88494873]
[69.55052185 139.60743713]
[71.82771301 124.78179932]
[74.10473633 109.95562744]
[66.69165802 108.81711578]
[58.10401917 121.11559296]
[49.51638412 133.41407776]
[40.92874908 145.71255493]
[32.34111404 158.01103210]
[33.72054291 173.99465942]
[21.98536873 184.93382263]
[6.13781309 182.43692017]
[-1.66523540 168.41935730]
[4.56205416 153.63421631]
[20.04263878 149.42338562]
[28.63027382 137.12490845]
[37.21790695 124.82643890]
[45.80554199 112.52796173]
[54.39317703 100.22948456]
[40.96061707 106.90528107]
[28.51066589 98.53875732]
[19.86041641 86.28424072]
[16.14609337 71.75138855]
[17.85557938 56.84911728]
[24.76433182 43.53487015]
[35.96487427 33.55749893]
[49.98598862 28.22755432]
[64.98597717 28.24513054]
[78.99456024 33.60791779]
[90.17169189 43.61150742]
[97.04922485 56.94190979]
[98.72393799 71.84591675]
[98.83885193 86.84548187]
[105.92917633 73.62703705]
[113.01950836 60.40859222]
[120.10983276 47.19014740]
[127.20016479 33.97170258]
[134.29049683 20.75325966]
[135.61264038 11.61821270]
[141.70512390 7.31091213]
[149.10337830 -5.73768330]
[142.69667053 -14.45408535]
[139.61399841 -24.78302193]
[140.19129944 -35.50812149]
[144.33506775 -45.37546921]
[151.53636169 -53.24018478]
[160.93318176 -58.19927979]
[171.41352844 -59.69526672]
[181.74708557 -57.57875061]
[190.33471680 -69.87722778]
[198.92234802 -82.17570496]
[197.44413757 -95.05033112]
[204.92669678 -105.13461304]
[216.88607788 -107.30680847]
[225.75965881 -119.40058899]
[234.63323975 -131.49436951]
[243.50683594 -143.58815002]
[252.38041687 -155.68193054]
[248.59501648 -161.51434326]
[246.19247437 -168.02272034]
[245.28437805 -174.88508606]
[245.90856934 -181.76351929]
[248.02760315 -188.32084656]
[251.53092957 -194.23713684]
[256.24060059 -199.22529602]
[261.92041016 -203.04505920]
[268.28759766 -205.51448059]
[275.02697754 -206.51866150]
[281.80661011 -206.01501465]
[288.29403687 -204.03509521]
[294.17263794 -200.68263245]
[305.61291504 -210.38418579]
[304.58941650 -225.75489807]
[312.71792603 -238.63047791]
[326.70397949 -244.18513489]
[341.10659790 -240.48342896]
[352.54687500 -250.18498230]
[363.98715210 -259.88653564]
[366.63058472 -266.11175537]
[371.34463501 -269.49301147]
[376.19860840 -269.75936890]
[388.08105469 -278.91403198]
[399.96347046 -288.06869507]
[405.70584106 -303.42959595]
[421.92242432 -305.86975098]
[431.93099976 -292.87896729]
[425.43560791 -277.82101440]
[409.11813354 -276.18624878]
[397.23568726 -267.03158569]
[385.35327148 -257.87695312]
[373.68869019 -248.44624329]
[362.24841309 -238.74470520]
[350.80813599 -229.04315186]
[352.10705566 -214.22927856]
[344.34204102 -201.33863831]
[330.31143188 -195.42294312]
[315.31445312 -198.94390869]
[303.87417603 -189.24235535]
[305.40161133 -165.24781799]
[288.98611450 -147.35707092]
[264.47418213 -146.80834961]
[255.60061646 -134.71456909]
[246.72702026 -122.62078857]
[237.85343933 -110.52700806]
[228.97985840 -98.43322754]
[228.05255127 -80.94876099]
[211.22082520 -73.58806610]
[202.63319397 -61.28959274]
[194.04556274 -48.99111557]
[201.72375488 -31.11645699]
[197.16084290 -12.05930901]
[182.00201416 0.58118343]
[162.15197754 1.66056991]
[154.75372314 14.70916557]
[147.50892639 27.84358788]
[140.41860962 41.06203079]
[133.32827759 54.28047562]
[126.23795319 67.49891663]
[119.14762115 80.71736145]
[112.05729675 93.93580627]
[110.65267181 108.86989594]
[115.15394592 123.17858124]
[119.65521240 137.48727417]
[133.78314209 144.57084656]
[138.68489075 159.59577942]
[131.45234680 173.64802551]
[116.37643433 178.39065552]
[102.40143585 171.00993347]
[97.81846619 155.88471985]
[105.34652710 141.98854065]
[100.84525299 127.67985535]
[96.34398651 113.37116241]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[34 121]
[35 120]
[36 119]
[37 118]
[38 117]
[39 116]
[41 115]
[42 114]
[50 110]
[51 109]
[52 108]
[55 106]
[56 105]
[57 104]
[58 103]
[59 102]
[72 99]
[73 98]
[77 94]
[78 93]
[79 92]
[82 91]
[83 90]
[84 89]
[122 133]
[123 132]
[124 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
