%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 14:41:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGGCUCUCUUCCUCCUUCCACCGUGACCCCAACCUCUCCUGUCCCCUCCCUCCAACUCUGUCUCUAAGUUAUUUAAAUUAUGGCUGGGGUCGGGGAGGGUACAGGGGGCACUGGGACCUGGAUUUGUUUUUCUAAAUAAAGUUGGAAAAGCAG\
) } def
/len { sequence length } bind def

/coor [
[98.25070953 135.76412964]
[90.84909058 136.97491455]
[86.35864258 151.28700256]
[81.86819458 165.59909058]
[89.40676117 179.48957825]
[84.83523560 194.61824036]
[70.86582184 202.00952148]
[55.78632736 197.27830505]
[48.54315186 183.23153687]
[53.43353653 168.20289612]
[67.55610657 161.10864258]
[72.04655457 146.79655457]
[76.53700256 132.48446655]
[67.89953613 119.79201508]
[65.09879303 105.62339020]
[67.90048218 92.38211060]
[75.17335510 82.05885315]
[85.16877747 75.93218231]
[80.96932220 61.53202820]
[76.76985931 47.13187027]
[72.57039642 32.73171234]
[61.62909698 25.82934189]
[58.44932556 13.70440769]
[64.21446228 3.02819681]
[60.30770874 -11.45411301]
[56.52122879 -15.21645927]
[54.77244949 -19.62121773]
[54.95944595 -23.76891899]
[56.63235092 -26.93576050]
[53.61287308 -41.62871170]
[50.59339905 -56.32165909]
[47.57392120 -71.01461029]
[33.59842682 -77.49471283]
[26.20480537 -90.80590820]
[28.04524422 -105.74166107]
[38.20593262 -116.59976196]
[35.18645477 -131.29270935]
[32.16697693 -145.98565674]
[29.14749908 -160.67861938]
[26.12802124 -175.37156677]
[23.10854340 -190.06451416]
[20.08906555 -204.75746155]
[17.06958771 -219.45040894]
[6.71271515 -231.41058350]
[11.72965145 -245.43482971]
[8.71017361 -260.12777710]
[5.69069624 -274.82073975]
[2.67121840 -289.51367188]
[-0.34825954 -304.20663452]
[-3.36773729 -318.89956665]
[-6.38721514 -333.59252930]
[-9.40669250 -348.28549194]
[-18.88041306 -353.77841187]
[-23.63930893 -363.39608765]
[-22.31417084 -373.82254028]
[-15.58848953 -381.61032104]
[-18.01004601 -396.41357422]
[-20.43160439 -411.21682739]
[-22.85316086 -426.02008057]
[-25.27471733 -440.82330322]
[-27.84616661 -455.60125732]
[-30.56724358 -470.35238647]
[-33.28831863 -485.10351562]
[-48.30312347 -486.84909058]
[-62.13566971 -492.94433594]
[-73.55597687 -502.84725952]
[-81.54856873 -515.67730713]
[-85.40273285 -530.29364014]
[-84.77577209 -545.39654541]
[-79.72342682 -559.64312744]
[-70.69495392 -571.76660156]
[-58.49316025 -580.68890381]
[-44.20301437 -585.61669922]
[-29.09519386 -586.11181641]
[-14.51307201 -582.13024902]
[-1.75328088 -574.02593994]
[8.04958725 -562.51965332]
[14.02386761 -548.63439941]
[15.63833046 -533.60498047]
[12.74942112 -518.76763916]
[5.61401701 -505.44183350]
[-5.13340521 -494.81243896]
[-18.53719330 -487.82458496]
[-15.81611633 -473.07345581]
[-13.09504032 -458.32232666]
[-8.76339054 -452.27944946]
[-10.47147274 -443.24487305]
[-8.04991627 -428.44161987]
[-5.62835884 -413.63836670]
[-3.20680189 -398.83514404]
[-0.78524488 -384.03189087]
[12.54300404 -370.07046509]
[5.28625631 -351.30496216]
[8.30573368 -336.61199951]
[11.32521152 -321.91906738]
[14.34468937 -307.22610474]
[17.36416817 -292.53317261]
[20.38364601 -277.84020996]
[23.40312386 -263.14724731]
[26.42260170 -248.45431519]
[36.56349945 -237.54507446]
[31.76253700 -222.46987915]
[34.78201294 -207.77693176]
[37.80149078 -193.08398438]
[40.82096863 -178.39103699]
[43.84044647 -163.69808960]
[46.85992432 -149.00514221]
[49.87940216 -134.31219482]
[52.89888000 -119.61923981]
[66.51808167 -113.64802551]
[74.09936523 -100.64849091]
[72.55429077 -85.50035095]
[62.26686859 -74.03408813]
[65.28634644 -59.34113693]
[68.30582428 -44.64818954]
[71.32530212 -29.95523834]
[74.79001617 -15.36086464]
[78.69676971 -0.87855548]
[91.77594757 10.78434181]
[86.97055054 28.53225136]
[91.17001343 42.93240738]
[95.36947632 57.33256531]
[99.56893921 71.73271942]
[121.24533844 75.79764557]
[135.90063477 95.86416626]
[132.59083557 123.31501770]
[141.40760803 135.45027161]
[150.22439575 147.58552551]
[159.04116821 159.72077942]
[167.85795593 171.85603333]
[176.67472839 183.99128723]
[185.49150085 196.12654114]
[194.30828857 208.26179504]
[203.12506104 220.39704895]
[211.94184875 232.53230286]
[220.75862122 244.66757202]
[236.40557861 246.89204407]
[245.82977295 259.57904053]
[243.43998718 275.20162964]
[230.65405273 284.49114990]
[215.05763245 281.93630981]
[205.90379333 269.05288696]
[208.62336731 253.48434448]
[199.80659485 241.34909058]
[190.98980713 229.21383667]
[182.17303467 217.07858276]
[173.35624695 204.94332886]
[164.53947449 192.80807495]
[155.72270203 180.67282104]
[146.90591431 168.53755188]
[138.08914185 156.40229797]
[129.27235413 144.26704407]
[120.45558167 132.13179016]
[113.05395508 133.34257507]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[18 123]
[19 122]
[20 121]
[21 120]
[24 118]
[25 117]
[29 116]
[30 115]
[31 114]
[32 113]
[36 109]
[37 108]
[38 107]
[39 106]
[40 105]
[41 104]
[42 103]
[43 102]
[45 100]
[46 99]
[47 98]
[48 97]
[49 96]
[50 95]
[51 94]
[52 93]
[56 91]
[57 90]
[58 89]
[59 88]
[60 87]
[61 85]
[62 84]
[63 83]
[126 153]
[127 152]
[128 151]
[129 150]
[130 149]
[131 148]
[132 147]
[133 146]
[134 145]
[135 144]
[136 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
