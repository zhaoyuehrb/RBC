%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 19:10:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAAAACCAUCAGUUAAGUGCCAUUUAUCAACUGAAUAGACCUUCUAAGAAGAAUGCAGUUUGGCCUCUUU\
) } def
/len { sequence length } bind def

/coor [
[66.76654053 255.55989075]
[55.72499466 265.84320068]
[42.39770126 272.91751099]
[27.69334793 276.30047607]
[12.61449337 275.76141357]
[-1.81075668 271.33709717]
[-14.59886646 263.32916260]
[-24.87792015 252.28366089]
[-31.94707489 238.95364380]
[-35.32434464 224.24797058]
[-34.77946472 209.16932678]
[-30.34957886 194.74578857]
[-22.33672905 181.96076965]
[-11.28724289 171.68598938]
[2.04550648 164.62197876]
[16.75247002 161.25038147]
[31.83090210 161.80108643]
[46.25273132 166.23654175]
[54.21368408 153.52343750]
[55.12063980 145.95260620]
[62.80059814 140.44497681]
[71.30112457 128.08612061]
[79.80165100 115.72727966]
[88.30217743 103.36843872]
[73.30687714 102.99291992]
[62.68710709 92.39950562]
[62.27433014 77.40518951]
[72.29521179 66.24356079]
[87.24713898 65.04363251]
[98.91979980 74.46430969]
[100.90349579 89.33281708]
[112.27808380 79.55432892]
[123.65266418 69.77584839]
[135.02725220 59.99736404]
[146.40184021 50.21887589]
[142.55842590 38.29908752]
[143.09681702 25.82194710]
[147.92527771 14.34271431]
[156.41891479 5.28369617]
[167.50032043 -0.24196033]
[179.77633667 -1.56702030]
[191.71307373 1.44935596]
[201.82765198 8.40709305]
[214.36653137 0.17444839]
[226.90541077 -8.05819607]
[239.44429016 -16.29084015]
[249.36613464 -30.03832626]
[265.32299805 -24.30991554]
[264.23577881 -7.39086533]
[247.67694092 -3.75195813]
[235.13806152 4.48068619]
[222.59918213 12.71333027]
[210.06028748 20.94597435]
[212.07650757 38.59871674]
[205.08131409 55.02021027]
[190.82485962 65.89579773]
[172.97644043 68.32473755]
[156.18032837 61.59346390]
[144.80574036 71.37194824]
[133.43115234 81.15043640]
[122.05656433 90.92891693]
[110.68197632 100.70740509]
[100.66101837 111.86896515]
[92.16049194 124.22780609]
[83.65996552 136.58665466]
[75.15943909 148.94549561]
[66.92679596 161.48437500]
[58.96584702 174.19749451]
[69.25342560 185.23507690]
[76.33287048 198.55963135]
[79.72149658 213.26268005]
[79.18826294 228.34173584]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 68]
[19 67]
[21 66]
[22 65]
[23 64]
[24 63]
[31 62]
[32 61]
[33 60]
[34 59]
[35 58]
[43 53]
[44 52]
[45 51]
[46 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
