%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 13:11:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACCAAGGUUUUGAAAUCCCAUCAGGUCACCGCGAGGCCUGACUGGCCUUAUUGUUGAAUAAAUGUAUCUGAAUAUCCCC\
) } def
/len { sequence length } bind def

/coor [
[183.53245544 191.06465149]
[190.29684448 177.60394287]
[178.72451782 168.06030273]
[167.15217590 158.51666260]
[148.03028870 157.00819397]
[140.68571472 138.42224121]
[128.41676331 129.79244995]
[116.14782715 121.16267395]
[103.87889099 112.53289795]
[106.25716400 127.34315491]
[101.14616394 141.44555664]
[89.83137512 151.29316711]
[75.15859985 154.40919495]
[60.81822205 150.00991821]
[50.41703033 139.20181274]
[46.57105637 124.70323944]
[50.24760056 110.16078186]
[60.52197647 99.23204803]
[74.81004333 94.66574860]
[89.51670074 97.60964203]
[81.36318970 85.01916504]
[73.20967102 72.42868042]
[64.81649017 59.99668884]
[56.18670654 47.72774887]
[47.55692673 35.45880890]
[38.92714691 23.18986893]
[30.29736710 10.92092800]
[21.66758728 -1.34801280]
[13.03780746 -13.61695290]
[-2.55747867 -14.76633358]
[-13.72924232 -25.70825768]
[-15.20251751 -41.27628708]
[-6.28167057 -54.11966705]
[8.82114887 -58.17415619]
[22.97485161 -51.52534103]
[29.49649048 -37.31259155]
[25.30674744 -22.24673271]
[33.93652725 -9.97779274]
[42.56630707 2.29114771]
[51.19608688 14.56008816]
[59.82586670 26.82902908]
[68.45565033 39.09796906]
[77.08542633 51.36690903]
[83.67665863 55.12082291]
[85.80015564 64.27516937]
[93.95366669 76.86564636]
[102.10717773 89.45613098]
[112.50866699 100.26395416]
[124.77761078 108.89373779]
[137.04655457 117.52351379]
[149.31549072 126.15329742]
[160.22494507 123.62477112]
[170.46430969 127.57753754]
[176.59078979 136.41461182]
[176.69581604 146.94432068]
[188.26814270 156.48796082]
[199.84048462 166.03160095]
[211.76710510 156.82814026]
[225.44287109 150.50982666]
[240.18182373 147.39358521]
[255.24465942 147.63571167]
[269.87582397 151.22407532]
[283.34146118 157.97868347]
[294.96609497 167.56071472]
[304.16668701 179.48956299]
[310.48165894 193.16685486]
[313.59436035 207.90657043]
[313.34857178 222.96934509]
[309.75665283 237.59965515]
[302.99877930 251.06364441]
[293.41394043 262.68597412]
[281.48287964 271.88363647]
[267.80404663 278.19531250]
[253.06358337 281.30444336]
[238.00085449 281.05499268]
[223.37141418 277.45953369]
[209.90907288 270.69842529]
[198.28907776 261.11074829]
[189.09428406 249.17744446]
[182.78591919 235.49708557]
[179.68037415 220.75587463]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 57]
[3 56]
[4 55]
[6 51]
[7 50]
[8 49]
[9 48]
[20 47]
[21 46]
[22 45]
[23 43]
[24 42]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
