%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 07:11:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAUACUAAACAUCAAAGAAUCUAUGUUGGAGCACAAGAUUCUAAAUCAGUGGUUCCCUGAUCCCUCAAAAAUCCAUUUGUUUUUGGAUUUCCAAAAACGAACAUUAAAAAAAAAUGGUUUGGCACAA\
) } def
/len { sequence length } bind def

/coor [
[128.33111572 266.42266846]
[114.74746704 259.46224976]
[105.53588867 247.29220581]
[102.52532959 232.32894897]
[106.31355286 217.54341125]
[116.14839172 205.87127686]
[130.07713318 199.63006592]
[130.43959045 184.63444519]
[130.80204773 169.63882446]
[131.16450500 154.64320374]
[131.52696228 139.64758301]
[131.88941956 124.65196228]
[120.36724091 133.22325134]
[107.00353241 136.97422791]
[93.66104126 135.73616028]
[82.07833862 130.01269531]
[73.64330292 120.86963654]
[69.22803497 109.75458527]
[54.26743317 110.84111023]
[39.30683899 111.92762756]
[24.34624100 113.01415253]
[9.38564301 114.10066986]
[-5.57495451 115.18719482]
[-20.53555107 116.27371979]
[-28.96714783 120.04927063]
[-35.87000656 117.20127869]
[-50.85248947 117.92597961]
[-65.83497620 118.65068054]
[-76.27040863 130.51985168]
[-92.04728699 131.45027161]
[-103.80546570 120.88992310]
[-104.56902313 105.10408783]
[-93.88495636 93.45822144]
[-78.09193420 92.86160278]
[-66.55967712 103.66819763]
[-51.57719040 102.94349670]
[-36.59470749 102.21879578]
[-21.62207413 101.31311798]
[-6.66147614 100.22660065]
[8.29912090 99.14007568]
[23.25971794 98.05355072]
[38.22031403 96.96703339]
[53.18091202 95.88050842]
[68.14151001 94.79399109]
[79.56774139 71.63681793]
[106.00550079 62.85060883]
[132.66435242 76.38445282]
[125.69350433 63.10261536]
[118.72266388 49.82077408]
[111.75181580 36.53893280]
[104.78096771 23.25709343]
[97.95228577 17.03489494]
[97.80654144 9.56902122]
[83.86925507 0.92702860]
[84.65517426 -15.45327568]
[99.35581207 -22.72123909]
[112.84841156 -13.40020370]
[111.25294495 2.92114782]
[118.06280518 16.28624535]
[125.03365326 29.56808662]
[132.00450134 42.84992599]
[138.97534180 56.13176727]
[145.94619751 69.41360474]
[146.19635010 54.41569519]
[146.44651794 39.41777802]
[142.31312561 24.99851990]
[144.78778076 10.20405769]
[153.38867188 -2.08514929]
[166.44122314 -9.47641754]
[181.40412903 -10.53067970]
[195.36413574 -5.04267406]
[205.60325623 5.91909552]
[210.12796021 20.22039223]
[208.05728149 35.07678223]
[199.79438782 47.59575272]
[186.94738770 55.34009933]
[176.91674805 66.49296570]
[166.88612366 77.64582825]
[181.03579712 72.66721344]
[195.18547058 67.68859100]
[209.33515930 62.70997620]
[223.48483276 57.73135757]
[237.63450623 52.75274277]
[251.78417969 47.77412415]
[265.93386841 42.79550552]
[280.08352661 37.81688690]
[294.23321533 32.83826828]
[308.38290405 27.85965157]
[318.64184570 15.06565952]
[334.80798340 17.82027245]
[340.25097656 33.28978348]
[329.37155151 45.56048203]
[313.36151123 42.00933075]
[299.21182251 46.98794556]
[285.06216431 51.96656418]
[270.91247559 56.94518280]
[256.76281738 61.92380142]
[242.61312866 66.90242004]
[228.46345520 71.88103485]
[214.31376648 76.85965729]
[200.16409302 81.83827209]
[186.01441956 86.81688690]
[171.86474609 91.79550934]
[169.51821899 106.61083221]
[181.43688965 115.71826935]
[193.35556030 124.82570648]
[205.27421570 133.93315125]
[220.49374390 130.34147644]
[234.43792725 137.41915894]
[240.52276611 151.82432556]
[235.87516785 166.75529480]
[222.68960571 175.16212463]
[207.19187927 173.07536316]
[196.69955444 161.48031616]
[196.16677856 145.85180664]
[184.24812317 136.74436951]
[172.32945251 127.63693237]
[160.41078186 118.52949524]
[146.88504028 125.01441956]
[146.52258301 140.01004028]
[146.16012573 155.00566101]
[145.79766846 170.00128174]
[145.43521118 184.99690247]
[145.07275391 199.99252319]
[158.68370056 206.89938354]
[167.94314575 219.03305054]
[171.01260376 233.98434448]
[167.28263855 248.78468323]
[157.49383545 260.49545288]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 124]
[8 123]
[9 122]
[10 121]
[11 120]
[12 119]
[18 44]
[19 43]
[20 42]
[21 41]
[22 40]
[23 39]
[24 38]
[26 37]
[27 36]
[28 35]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[53 58]
[78 103]
[79 102]
[80 101]
[81 100]
[82 99]
[83 98]
[84 97]
[85 96]
[86 95]
[87 94]
[88 93]
[104 118]
[105 117]
[106 116]
[107 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
