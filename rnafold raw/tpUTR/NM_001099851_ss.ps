%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 15:37:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAAGGCCUGAUUAGUGGGAUGGAUAUGCUUUCUUCAGGACCCUUAGGCACUAAAAUCUAGGACACAGGUGGGUUUUUUUGUUUUUUUGUUUUUUUGUUUUGAUGGAGUCUCGCUCUGUCCCUCAGGCU\
) } def
/len { sequence length } bind def

/coor [
[51.35269547 469.14337158]
[36.31906509 474.74423218]
[22.64158440 466.35937500]
[20.81244278 450.42092896]
[32.23480606 439.15551758]
[33.68251419 424.22555542]
[35.13022232 409.29559326]
[36.57793045 394.36560059]
[38.02563858 379.43563843]
[39.47334671 364.50564575]
[40.92105865 349.57568359]
[27.58072472 356.43392944]
[13.80153847 350.50653076]
[9.60649109 336.10507202]
[18.04706383 323.70523071]
[32.98357773 322.32659912]
[43.55093384 332.97131348]
[46.78769684 318.32467651]
[50.02445984 303.67807007]
[53.26122284 289.03146362]
[56.49798584 274.38482666]
[59.73474884 259.73822021]
[62.97151184 245.09159851]
[66.20827484 230.44499207]
[54.95078659 218.56137085]
[52.93829346 202.14953613]
[61.15380859 187.60972595]
[76.55277252 180.73010254]
[71.40486908 166.75338745]
[81.64940643 154.69685364]
[84.53130341 139.97630310]
[87.41320801 125.25575256]
[90.29510498 110.53520203]
[85.94290924 97.24798584]
[94.98434448 86.58290100]
[97.86624146 71.86235046]
[100.74814606 57.14179611]
[103.63004303 42.42124557]
[106.51194763 27.70069313]
[109.39384460 12.98014069]
[112.27574921 -1.74041140]
[100.81342316 -11.86771774]
[95.99103546 -26.27748680]
[99.00875092 -41.06801605]
[108.95799255 -52.28713226]
[123.09182739 -56.98822021]
[125.97373199 -71.70877075]
[128.85563660 -86.42932129]
[131.73753357 -101.14987946]
[134.61943054 -115.87042999]
[126.06681061 -128.88928223]
[129.19917297 -143.77696228]
[141.66336060 -151.85034180]
[144.54525757 -166.57089233]
[147.42716980 -181.29144287]
[150.30906677 -196.01199341]
[153.19096375 -210.73254395]
[143.16871643 -225.01103210]
[146.45918274 -241.80000305]
[160.56413269 -250.87463379]
[163.08949280 -265.66052246]
[165.61483765 -280.44641113]
[168.14019775 -295.23229980]
[170.66555786 -310.01818848]
[159.73074341 -321.02770996]
[157.38879395 -336.36703491]
[164.54025269 -350.13790894]
[178.43522644 -357.04510498]
[193.73081970 -354.43267822]
[204.54554749 -343.30520630]
[206.72094727 -327.94137573]
[199.42053223 -314.24890137]
[185.45144653 -307.49282837]
[182.92608643 -292.70693970]
[180.40072632 -277.92105103]
[177.87538147 -263.13516235]
[175.35002136 -248.34927368]
[184.22532654 -238.92720032]
[186.04922485 -225.91522217]
[179.92735291 -214.06916809]
[167.91151428 -207.85064697]
[165.02961731 -193.13009644]
[162.14772034 -178.40954590]
[159.26580811 -163.68899536]
[156.38391113 -148.96844482]
[164.88349915 -136.79089355]
[162.17054749 -121.82110596]
[149.33998108 -112.98852539]
[146.45808411 -98.26797485]
[143.57618713 -83.54742432]
[140.69427490 -68.82687378]
[137.81237793 -54.10631943]
[149.13003540 -44.42249298]
[154.11408997 -30.27982712]
[151.33158875 -15.44324875]
[141.43136597 -3.91578126]
[126.99629974 1.14148927]
[124.11439514 15.86204147]
[121.23249817 30.58259392]
[118.35059357 45.30314636]
[115.46869659 60.02369690]
[112.58679199 74.74424744]
[109.70489502 89.46479797]
[114.05709076 102.75201416]
[105.01565552 113.41709900]
[102.13375854 128.13764954]
[99.25185394 142.85820007]
[96.36995697 157.57875061]
[101.31172943 172.60836792]
[91.27332306 183.61199951]
[101.42029572 193.02534485]
[105.53303528 206.12738037]
[102.63218689 219.43876648]
[93.58613586 229.48017883]
[80.85488892 233.68174744]
[77.61812592 248.32836914]
[74.38136292 262.97497559]
[71.14459991 277.62161255]
[67.90783691 292.26821899]
[64.67107391 306.91482544]
[61.43431091 321.56146240]
[58.19754791 336.20806885]
[55.85103226 351.02337646]
[54.40332413 365.95336914]
[52.95561218 380.88333130]
[51.50790405 395.81332397]
[50.06019592 410.74328613]
[48.61248779 425.67324829]
[47.16477966 440.60324097]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 129]
[6 128]
[7 127]
[8 126]
[9 125]
[10 124]
[11 123]
[17 122]
[18 121]
[19 120]
[20 119]
[21 118]
[22 117]
[23 116]
[24 115]
[28 110]
[30 108]
[31 107]
[32 106]
[33 105]
[35 103]
[36 102]
[37 101]
[38 100]
[39 99]
[40 98]
[41 97]
[46 92]
[47 91]
[48 90]
[49 89]
[50 88]
[53 85]
[54 84]
[55 83]
[56 82]
[57 81]
[60 77]
[61 76]
[62 75]
[63 74]
[64 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
