%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 18:01:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCUGCUUCUGCUGGGGCUGUGUACAGAGUGCAAAUGUUUAUUUAAAAUAAAGUUCUAUUUAUCCCUUGUGACCA\
) } def
/len { sequence length } bind def

/coor [
[88.93799591 120.70131683]
[78.01184845 130.97843933]
[67.08570099 141.25556946]
[56.15955353 151.53269958]
[45.23340607 161.80981445]
[34.51917267 172.30767822]
[24.02130699 183.02191162]
[20.46495819 199.03080750]
[4.74355698 203.69659424]
[-6.97006416 192.21952820]
[-2.62593746 176.40621948]
[13.30707264 172.52404785]
[23.80493736 161.80981445]
[26.30584526 154.62657166]
[34.95628357 150.88366699]
[45.88242722 140.60655212]
[56.80857468 130.32942200]
[67.73472595 120.05229187]
[78.66087341 109.77516937]
[76.81637573 103.66494751]
[76.68618011 97.28372955]
[78.27991486 91.10336304]
[66.94367218 81.28044891]
[55.60742569 71.45753479]
[44.27118301 61.63462830]
[32.93493652 51.81171417]
[17.00501060 46.00880814]
[18.17129517 29.09502411]
[34.74694061 25.53352737]
[42.75785065 40.47547150]
[54.09409332 50.29838181]
[65.43033600 60.12129211]
[76.76657867 69.94420624]
[88.10282135 79.76711273]
[100.62928009 76.53691101]
[112.96458435 80.43390656]
[121.36174011 90.27433777]
[136.28378296 88.74699402]
[149.22438049 79.64472961]
[162.67333984 86.04588318]
[177.59538269 84.51853943]
[192.51742554 82.99119568]
[207.43945312 81.46385193]
[212.69047546 67.17440796]
[223.58058167 56.62487030]
[237.91249084 51.86919403]
[252.82670593 53.79980850]
[265.37194824 61.98066711]
[273.08917236 74.74427795]
[288.01119995 73.21693420]
[302.93325806 71.68959045]
[317.85528564 70.16224670]
[332.77731323 68.63489532]
[342.56106567 56.22304153]
[358.26531982 54.44766617]
[370.57302856 64.36207581]
[372.18228149 80.08422089]
[362.13830566 92.28643799]
[346.40002441 93.72936249]
[334.30465698 83.55693817]
[319.38262939 85.08428192]
[304.46060181 86.61162567]
[289.53854370 88.13896942]
[274.61651611 89.66631317]
[269.64505005 103.72867584]
[259.01730347 114.28141022]
[244.80345154 119.19342804]
[229.80528259 117.43982697]
[217.00379944 109.31523895]
[208.96679688 96.38588715]
[194.04476929 97.91323853]
[179.12272644 99.44058228]
[164.20068359 100.96792603]
[152.32740784 109.96093750]
[137.81112671 103.66902924]
[122.88908386 105.19637299]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[3 17]
[4 16]
[5 15]
[6 13]
[7 12]
[22 34]
[23 33]
[24 32]
[25 31]
[26 30]
[37 76]
[38 75]
[40 73]
[41 72]
[42 71]
[43 70]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
