%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 23:21:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUAAUUGGAUUUUUAAACAAUGUGAAUAAAGAGGCUUGUGUUUUGAUUACUAGUGUAAACUGGUUAUUGAGAUAGAUUAUGACAUUGGUGGAUAUUUUGGCACUUUUAUAUGAAAAUAAAUUUUUUAAUGAA\
) } def
/len { sequence length } bind def

/coor [
[76.86203766 167.83218384]
[64.89582062 176.87705994]
[51.02223587 182.58000183]
[36.15425491 184.56575012]
[21.27029037 182.70361328]
[7.34980011 177.11613464]
[-4.69115591 168.17098999]
[-14.06020546 156.45686340]
[-20.14080238 142.74459839]
[-22.53280640 127.93654633]
[-21.07880783 113.00717926]
[-15.87448788 98.93895721]
[-7.26232433 86.65763855]
[4.19094515 76.97143555]
[17.73162270 70.51774597]
[32.46864319 67.72127533]
[47.43221283 68.76604462]
[61.63763428 73.58330536]
[74.15010071 81.85604095]
[84.14520264 93.03839111]
[75.61318207 80.70127106]
[67.08116913 68.36414337]
[58.54914856 56.02701569]
[50.01713181 43.68988800]
[41.48511505 31.35276222]
[28.90426826 28.24932480]
[22.06191063 17.72159958]
[24.19436073 5.75626802]
[15.95172596 -6.77604914]
[7.70909119 -19.30836678]
[-0.53354353 -31.84068298]
[-4.14916372 -17.28296089]
[-16.16028595 -8.29780960]
[-31.14653015 -8.94004917]
[-42.34490585 -18.91984940]
[-44.70180511 -33.73352432]
[-37.15361023 -46.69596100]
[-23.10667229 -51.95746994]
[-8.90010452 -47.14365005]
[-21.58151627 -56.60369110]
[-19.68978882 -71.37767792]
[-25.79083824 -85.08085632]
[-31.89188766 -98.78404236]
[-37.99293900 -112.48722076]
[-44.09398651 -126.19040680]
[-50.19503784 -139.89358521]
[-56.29608536 -153.59677124]
[-62.39713669 -167.29994202]
[-68.49818420 -181.00312805]
[-81.17959595 -190.46316528]
[-79.28787231 -205.23715210]
[-85.38891602 -218.94033813]
[-91.48996735 -232.64352417]
[-97.59101868 -246.34669495]
[-103.69207001 -260.04989624]
[-109.79312134 -273.75305176]
[-123.37112427 -282.94924927]
[-121.92627716 -299.28460693]
[-106.94490814 -305.95474243]
[-93.83856964 -296.09799194]
[-96.08993530 -279.85412598]
[-89.98888397 -266.15093994]
[-83.88783264 -252.44775391]
[-77.78678894 -238.74456787]
[-71.68573761 -225.04138184]
[-65.58468628 -211.33821106]
[-53.33966446 -202.85830688]
[-54.79500198 -187.10418701]
[-48.69395447 -173.40100098]
[-42.59290314 -159.69781494]
[-36.49185562 -145.99462891]
[-30.39080620 -132.29145813]
[-24.28975487 -118.58827209]
[-18.18870544 -104.88508606]
[-12.08765602 -91.18190765]
[-5.98660660 -77.47872162]
[6.25841665 -68.99882507]
[4.80307674 -53.24469757]
[11.99877357 -40.08331680]
[20.24140739 -27.55100060]
[28.48404312 -15.01868343]
[36.72667694 -2.48636675]
[52.79195404 4.47797155]
[53.82224274 22.82074547]
[62.35425949 35.15787125]
[70.88627625 47.49499893]
[79.41828918 59.83212662]
[87.95030975 72.16925049]
[96.48232269 84.50637817]
[110.45452118 89.96327209]
[125.08945465 86.67409515]
[136.85713196 76.09902191]
[150.97128296 80.85719299]
[165.60621643 77.56801605]
[177.29138184 66.06197357]
[193.02429199 70.68881989]
[196.62026978 86.68885040]
[184.38009644 97.60260773]
[168.89540100 92.20294952]
[154.26046753 95.49212646]
[143.53956604 105.83193970]
[128.37863159 101.30902863]
[113.74369812 104.59821320]
[111.26072693 111.67527771]
[121.03560638 123.05295563]
[106.29477692 125.82939911]
[103.81179810 132.90646362]
[113.18362427 144.61837769]
[122.55545044 156.33029175]
[131.92727661 168.04219055]
[141.29910278 179.75410461]
[149.17939758 184.55644226]
[150.74893188 191.84933472]
[159.84570312 203.77613831]
[168.94245911 215.70295715]
[178.03923035 227.62976074]
[187.13600159 239.55657959]
[196.23275757 251.48338318]
[211.87660217 255.04008484]
[218.71957397 269.55053711]
[211.51235962 283.88357544]
[195.78370667 287.04409790]
[183.59928894 276.60763550]
[184.30595398 260.58016968]
[175.20918274 248.65335083]
[166.11242676 236.72653198]
[157.01565552 224.79971313]
[147.91888428 212.87290955]
[138.82212830 200.94609070]
[129.58720398 189.12593079]
[120.21537018 177.41401672]
[110.84354401 165.70211792]
[101.47171783 153.99020386]
[92.09989166 142.27828979]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 89]
[21 88]
[22 87]
[23 86]
[24 85]
[25 84]
[28 82]
[29 81]
[30 80]
[31 79]
[39 78]
[41 76]
[42 75]
[43 74]
[44 73]
[45 72]
[46 71]
[47 70]
[48 69]
[49 68]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
[90 103]
[91 102]
[93 100]
[94 99]
[107 134]
[108 133]
[109 132]
[110 131]
[111 130]
[113 129]
[114 128]
[115 127]
[116 126]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
