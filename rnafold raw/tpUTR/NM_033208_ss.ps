%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 15:03:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUUGUGUUUAAAGAUUUCUGCCAUUAUAUGAUGUAGGCCAGCUGUGAAUUGUCUUGUUUUAGCAACUGACAUUAUUUUGUAUAUCAGUGCCCAUUUAUAUAAUGGUUAUAAAAUUUACAGUUUGAAAAUAAUACAUUUGUGUUUCUUUAAAUUUA\
) } def
/len { sequence length } bind def

/coor [
[305.38830566 490.53143311]
[291.83770752 496.96420288]
[276.91836548 498.51785278]
[262.33309937 495.01507568]
[249.74645996 486.85562134]
[240.59500122 474.97073364]
[235.92315674 460.71682739]
[236.26412964 445.72070312]
[241.57899475 431.69387817]
[251.26118469 420.23721313]
[264.20565796 412.65826416]
[278.93508911 409.82199097]
[293.76837158 412.05215454]
[307.01461792 419.09573364]
[299.60086060 406.05593872]
[292.18713379 393.01611328]
[284.77340698 379.97631836]
[277.35964966 366.93652344]
[269.94592285 353.89669800]
[252.06623840 350.15722656]
[242.38490295 334.29360962]
[247.40330505 316.06958008]
[239.47702026 303.33483887]
[231.55072021 290.60009766]
[223.62443542 277.86535645]
[215.69813538 265.13058472]
[207.77185059 252.39584351]
[199.84555054 239.66108704]
[191.91925049 226.92634583]
[183.99296570 214.19158936]
[176.06666565 201.45684814]
[168.14038086 188.72209167]
[160.21408081 175.98733521]
[146.83613586 176.26667786]
[134.97863770 169.83547974]
[127.80207062 158.28581238]
[127.27945709 144.58964539]
[133.65507507 132.33430481]
[125.98354340 119.44448090]
[118.31201172 106.55465698]
[104.81179047 117.58885193]
[89.12657928 113.09458160]
[84.24744415 98.70189667]
[71.67279816 90.52397919]
[59.09815979 82.34605408]
[46.52352142 74.16812897]
[37.57015228 72.09468079]
[33.78240585 65.70052338]
[21.37284660 57.27420425]
[8.96328545 48.84788895]
[-3.44627476 40.42157364]
[-18.92043304 43.63497543]
[-32.08852005 34.89558029]
[-35.13814163 19.38831139]
[-26.26001167 6.31336021]
[-10.72136879 3.42786121]
[2.25898767 12.44373035]
[4.98004150 28.01201248]
[17.38960266 36.43832779]
[29.79916191 44.86464691]
[42.20872116 53.29096222]
[54.70144272 61.59349060]
[67.27608490 69.77141571]
[79.85072327 77.94933319]
[92.42536163 86.12725830]
[101.50141144 82.43619537]
[112.08298492 84.75878143]
[111.78475189 69.76174927]
[111.48651886 54.76470947]
[111.18828583 39.76767731]
[110.89005280 24.77064133]
[102.87990570 11.12703133]
[110.36263275 -1.75155926]
[110.06439972 -16.74859428]
[97.25547028 -25.50707436]
[92.07265472 -40.13301086]
[96.50885010 -55.00243759]
[108.85825348 -64.39775085]
[124.37226105 -64.70626068]
[137.08541870 -55.80934525]
[142.10926819 -41.12804413]
[137.51202393 -26.30762100]
[125.06143188 -17.04682732]
[125.35966492 -2.04979205]
[133.34848022 10.52112961]
[125.88709259 24.47240829]
[126.18532562 39.46944427]
[126.48355865 54.46648026]
[126.78179169 69.46351624]
[127.08002472 84.46054840]
[131.20184326 98.88312531]
[138.87336731 111.77294922]
[146.54490662 124.66277313]
[163.38291931 125.96520233]
[176.01478577 136.92315674]
[179.60975647 153.08476257]
[172.94883728 168.06105042]
[180.87512207 180.79579163]
[188.80142212 193.53054810]
[196.72770691 206.26530457]
[204.65400696 219.00004578]
[212.58030701 231.73480225]
[220.50659180 244.46954346]
[228.43289185 257.20428467]
[236.35917664 269.93905640]
[244.28547668 282.67379761]
[252.21176147 295.40853882]
[260.13806152 308.14331055]
[272.08493042 308.54141235]
[282.23922729 314.61734009]
[288.11685181 324.74896240]
[288.34600830 336.33956909]
[282.98571777 346.48297119]
[290.39947510 359.52276611]
[297.81320190 372.56259155]
[305.22692871 385.60238647]
[312.64068604 398.64218140]
[320.05441284 411.68200684]
[326.78930664 414.78994751]
[330.67749023 420.24859619]
[331.24194336 426.21194458]
[341.95346069 436.71255493]
[352.66497803 447.21319580]
[363.37649536 457.71383667]
[374.08801270 468.21444702]
[384.79956055 478.71508789]
[395.51107788 489.21572876]
[406.22259521 499.71636963]
[419.61920166 498.03512573]
[431.35845947 504.30081177]
[437.24282837 516.01806641]
[435.31597900 528.79040527]
[445.81658936 539.50195312]
[456.31723022 550.21350098]
[466.81787109 560.92498779]
[477.31848145 571.63653564]
[493.25250244 575.51458740]
[497.60070801 591.32678223]
[485.89007568 602.80688477]
[470.16744995 598.14514160]
[466.60696411 582.13714600]
[456.10635376 571.42565918]
[445.60571289 560.71411133]
[435.10507202 550.00256348]
[424.60446167 539.29107666]
[407.82083130 539.85803223]
[395.56045532 527.89440918]
[395.72195435 510.42788696]
[385.01043701 499.92724609]
[374.29891968 489.42660522]
[363.58740234 478.92599487]
[352.87588501 468.42535400]
[342.16433716 457.92471313]
[331.45281982 447.42410278]
[320.74130249 436.92346191]
[324.16476440 451.52755737]
[322.53002930 466.43823242]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 118]
[15 117]
[16 116]
[17 115]
[18 114]
[19 113]
[22 108]
[23 107]
[24 106]
[25 105]
[26 104]
[27 103]
[28 102]
[29 101]
[30 100]
[31 99]
[32 98]
[33 97]
[38 93]
[39 92]
[40 91]
[43 65]
[44 64]
[45 63]
[46 62]
[48 61]
[49 60]
[50 59]
[51 58]
[67 90]
[68 89]
[69 88]
[70 87]
[71 86]
[73 84]
[74 83]
[121 155]
[122 154]
[123 153]
[124 152]
[125 151]
[126 150]
[127 149]
[128 148]
[132 145]
[133 144]
[134 143]
[135 142]
[136 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
