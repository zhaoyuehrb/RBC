%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 00:18:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGAAAGGGGCAGAUUAAAAAAAAAAAAAGAAUCUAAACCUUACAUGUGUAAAGGUUUCAUGUUCACUGUGAGUGAAAAUUUUUACAUUCAUCAAUAUCCCUCUUGUAAGUCAUCUACUUAAUAAAUAUUACAGUGAAUUACCUGUCUCAAUAUGUCA\
) } def
/len { sequence length } bind def

/coor [
[61.62233734 304.87896729]
[50.94193268 294.14547729]
[44.32762146 280.52456665]
[42.49687576 265.49368286]
[45.64828110 250.68331909]
[53.43999481 237.69995117]
[65.02683258 227.95191956]
[79.15193939 222.49664307]
[78.56304169 207.50820923]
[77.97414398 192.51977539]
[77.38524628 177.53134155]
[76.79634857 162.54289246]
[76.20745087 147.55445862]
[75.61855316 132.56602478]
[68.94952393 146.00195312]
[62.28048706 159.43786621]
[62.74322891 174.43074036]
[59.03733063 188.96572876]
[51.45245743 201.90673828]
[40.58149338 212.24221802]
[27.27416611 219.16429138]
[12.57065010 222.13188171]
[-2.37974834 220.91304016]
[-16.40842438 215.60302734]
[-28.41882324 206.61691284]
[-37.47214508 194.65708923]
[-42.86073303 180.65840149]
[-44.16338730 165.71507263]
[-41.27828598 150.99514771]
[-34.43093872 137.64921570]
[-24.15657997 126.72047424]
[-11.25830269 119.06316376]
[3.25569224 115.27581787]
[18.25091171 115.65448761]
[32.55510712 120.16950226]
[47.29682541 117.39790344]
[62.03854370 114.62631226]
[47.77269745 109.99105835]
[33.50685120 105.35580444]
[19.24100113 100.72055054]
[4.97515392 96.08529663]
[-9.29069328 91.45003510]
[-23.55654144 86.81478119]
[-37.86720657 82.31980133]
[-52.22131348 77.96553802]
[-68.06050110 82.21431732]
[-79.46678925 70.43176270]
[-74.70636749 54.73875427]
[-58.67634964 51.27891541]
[-47.86704254 63.61143112]
[-33.51293564 67.96569824]
[-26.16107559 66.89241028]
[-18.92128563 72.54893494]
[-4.65543890 77.18418884]
[9.61040878 81.81944275]
[23.87625694 86.45470428]
[38.14210510 91.08995819]
[52.40795135 95.72521210]
[66.67379761 100.36046600]
[72.57054138 84.12241364]
[85.31206512 73.77426147]
[100.71073151 71.58493042]
[114.24248505 77.31047821]
[125.45510864 67.34669495]
[136.66773987 57.38290405]
[147.88035583 47.41912079]
[159.09298706 37.45533371]
[170.30560303 27.49154663]
[181.51823425 17.52775955]
[192.73086548 7.56397295]
[203.94348145 -2.39981365]
[215.15611267 -12.36360073]
[226.36872864 -22.32738686]
[232.64863586 -35.94953537]
[232.94313049 -50.94664383]
[233.23764038 -65.94374847]
[233.53215027 -80.94085693]
[233.82666016 -95.93796539]
[225.43798828 -110.02919006]
[233.68205261 -124.20549774]
[250.07803345 -123.88352203]
[257.75915527 -109.39448547]
[248.82376099 -95.64346313]
[248.52925110 -80.64635468]
[248.23475647 -65.64924622]
[247.94024658 -50.65213776]
[247.64573669 -35.65502930]
[253.39633179 -30.84039116]
[260.84478760 -43.86040115]
[268.29321289 -56.88040543]
[275.74166870 -69.90041351]
[283.19012451 -82.92042542]
[290.63858032 -95.94042969]
[293.33801270 -110.69553375]
[303.03176880 -122.14241028]
[317.14068604 -127.23542786]
[331.91082764 -124.61951447]
[343.41235352 -114.99066925]
[348.58511353 -100.91081238]
[346.05282593 -86.12610626]
[336.48919678 -74.57027435]
[322.43667603 -69.31771851]
[310.92883301 -59.69639969]
[299.42098999 -50.07508087]
[287.91317749 -40.45375824]
[276.40533447 -30.83243942]
[264.89749146 -21.21111870]
[270.64810181 -16.39648056]
[285.35986328 -19.32283592]
[300.07165527 -22.24919128]
[314.78344727 -25.17554474]
[329.49520874 -28.10190010]
[339.56793213 -40.58868790]
[355.60928345 -40.35482407]
[365.31372070 -27.57970810]
[361.23681641 -12.06331539]
[346.50604248 -5.70849466]
[332.42156982 -13.39012146]
[317.70977783 -10.46376610]
[302.99801636 -7.53741169]
[288.28622437 -4.61105680]
[273.57446289 -1.68470180]
[276.71725464 12.98236275]
[271.30865479 26.97332954]
[259.11749268 35.71263123]
[244.13070679 36.34218597]
[231.24955750 28.65610504]
[224.68664551 15.16802692]
[226.58830261 0.28905830]
[236.33251953 -11.11476231]
[225.11990356 -1.15097535]
[213.90727234 8.81281090]
[202.69464111 18.77659798]
[191.48202515 28.74038506]
[180.26939392 38.70417023]
[169.05677795 48.66795731]
[157.84414673 58.63174438]
[146.63151550 68.59552765]
[135.41889954 78.55931854]
[124.20627594 88.52310181]
[128.17642212 103.74311066]
[122.85634613 119.52210236]
[109.03560638 130.37812805]
[90.60698700 131.97712708]
[91.19588470 146.96556091]
[91.78478241 161.95399475]
[92.37368011 176.94244385]
[92.96257782 191.93087769]
[93.55147552 206.91931152]
[94.14037323 221.90774536]
[108.64995575 226.23796082]
[120.96588898 235.04684448]
[129.75224304 247.37886047]
[134.05595398 261.89633179]
[133.41015625 277.02450562]
[127.88491821 291.12240601]
[118.07957458 302.66076660]
[105.05773926 310.38803101]
[90.23191833 313.46597290]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 150]
[9 149]
[10 148]
[11 147]
[12 146]
[13 145]
[14 144]
[37 59]
[38 58]
[39 57]
[40 56]
[41 55]
[42 54]
[43 53]
[44 51]
[45 50]
[63 140]
[64 139]
[65 138]
[66 137]
[67 136]
[68 135]
[69 134]
[70 133]
[71 132]
[72 131]
[73 130]
[74 87]
[75 86]
[76 85]
[77 84]
[78 83]
[108 122]
[109 121]
[110 120]
[111 119]
[112 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
