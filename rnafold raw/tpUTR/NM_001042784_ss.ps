%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:16:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGUUGCUUGCCUAUUCUUUACAGAGGAAUGAGGCCCAAUUAAUUGUGGUGUUACUCGUAAUUAGUGCCCUGUGUACUUUUUCUUUUUAUGUGAAAAUUUAAUAAAAGAUACCCUGUCUUGUAAACUCUA\
) } def
/len { sequence length } bind def

/coor [
[131.44413757 216.22186279]
[125.36853790 202.17388916]
[126.52884674 186.91242981]
[134.65843201 173.94444275]
[147.88917542 166.24989319]
[147.17544556 151.26689148]
[146.46171570 136.28387451]
[145.74798584 121.30087280]
[120.18083191 141.86509705]
[90.03811646 141.30226135]
[69.31201935 123.24536896]
[55.81969452 129.79954529]
[42.32736588 136.35371399]
[28.83504105 142.90786743]
[15.42166138 149.62213135]
[2.08912969 156.49552917]
[-11.24340153 163.36892700]
[-24.57593346 170.24232483]
[-37.90846634 177.11572266]
[-51.24099731 183.98912048]
[-64.57353210 190.86251831]
[-75.88131714 203.49462891]
[-91.15007019 196.12567139]
[-88.29589844 179.41369629]
[-71.44692993 177.52998352]
[-58.11439514 170.65658569]
[-44.78186417 163.78318787]
[-31.44933128 156.90979004]
[-18.11680031 150.03639221]
[-4.78426790 143.16299438]
[8.54826355 136.28959656]
[13.09620667 130.37086487]
[22.28087234 129.41554260]
[35.77320099 122.86138153]
[49.26552582 116.30721283]
[62.75785446 109.75304413]
[63.84603119 77.68392944]
[90.37308502 54.53271484]
[128.51431274 58.36420822]
[118.96395874 46.79741287]
[109.41360474 35.23061752]
[99.86325073 23.66382217]
[90.31290436 12.09702682]
[74.93006897 12.91841888]
[62.16242218 4.62139606]
[56.79206848 -9.43645859]
[60.68275070 -23.78917885]
[51.13239670 -35.35597610]
[41.58204269 -46.92277145]
[26.03614426 -52.14359665]
[23.05020905 -68.26861572]
[35.69591522 -78.70979309]
[50.96444321 -72.72613525]
[53.14883804 -56.47312164]
[62.69919205 -44.90632629]
[72.24954224 -33.33953094]
[87.07920837 -34.44363403]
[99.86667633 -26.50986099]
[105.59746552 -12.40271950]
[101.87969971 2.54667425]
[111.43004608 14.11347008]
[120.98040009 25.68026543]
[130.53076172 37.24706268]
[140.08110046 48.81385803]
[154.77520752 45.80001831]
[159.00120544 31.40762520]
[163.22718811 17.01523018]
[167.45318604 2.62283611]
[171.67916870 -11.76955795]
[165.28347778 -26.48263931]
[172.92597961 -40.58837509]
[188.74400330 -43.26604843]
[200.60330200 -32.46157837]
[199.40644836 -16.46323395]
[186.07156372 -7.54357004]
[181.84558105 6.84882450]
[177.61958313 21.24121857]
[173.39360046 35.63361359]
[169.16760254 50.02600861]
[180.73440552 59.57636261]
[194.06694031 52.70296478]
[207.39947510 45.82956696]
[220.73199463 38.95616913]
[234.06452942 32.08277130]
[235.42860413 16.71582985]
[244.90217590 4.53982639]
[259.46224976 -0.55992055]
[274.46279907 3.04389930]
[285.11715698 14.20131969]
[288.02557373 29.35204887]
[282.26000977 43.66154480]
[269.66018677 52.56369781]
[254.24670410 53.21786499]
[240.93792725 45.41530228]
[227.60539246 52.28870010]
[214.27287292 59.16209793]
[200.94033813 66.03549194]
[187.60780334 72.90888977]
[186.71740723 80.35585022]
[201.71308899 80.71583557]
[215.89263916 75.82292938]
[227.56774902 85.24056244]
[225.78646851 100.13442230]
[212.21974182 106.53316498]
[199.59446716 98.43530273]
[184.93663025 95.24977112]
[184.04623413 102.69673157]
[195.38247681 112.51963806]
[206.71871948 122.34255219]
[218.05496216 132.16546631]
[229.39120483 141.98837280]
[240.72744751 151.81127930]
[256.65737915 157.61419678]
[255.49108887 174.52796936]
[238.91545105 178.08947754]
[230.90454102 163.14752197]
[219.56829834 153.32461548]
[208.23205566 143.50170898]
[196.89581299 133.67880249]
[185.55957031 123.85588074]
[174.22332764 114.03297424]
[160.73098755 120.58714294]
[161.44471741 135.57014465]
[162.15844727 150.55316162]
[162.87217712 165.53616333]
[176.77442932 171.93821716]
[186.09988403 184.07470703]
[188.70562744 199.15676880]
[183.99287415 213.71865845]
[173.04460144 224.41415405]
[158.37661743 228.78552246]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 125]
[6 124]
[7 123]
[8 122]
[11 36]
[12 35]
[13 34]
[14 33]
[15 31]
[16 30]
[17 29]
[18 28]
[19 27]
[20 26]
[21 25]
[39 64]
[40 63]
[41 62]
[42 61]
[43 60]
[47 56]
[48 55]
[49 54]
[65 79]
[66 78]
[67 77]
[68 76]
[69 75]
[80 98]
[81 97]
[82 96]
[83 95]
[84 94]
[107 121]
[108 120]
[109 119]
[110 118]
[111 117]
[112 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
