%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:21:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGGACCGCCAAAGGCUGAUGUGUUAGGGCUGGCCUGAUGCUGGUGUCUGUGCCGGAGCCAGCUCAUAUCACCCACUGGGCCGCACCUGGGCCUGCUCUCUGGAUUUUCCAGGGCUGUCUUUAUAGCCUGUCGAAAUAAGGAGCCAGAGGAGUUACCUGUGUCCUGCAUUAUGAUUAAAGCCUUUUAAAGUUG\
) } def
/len { sequence length } bind def

/coor [
[59.14139557 203.12715149]
[48.55233765 192.50303650]
[43.53352356 178.36906433]
[39.94379044 192.93319702]
[36.35405350 207.49732971]
[41.43382263 223.08988953]
[30.27042198 235.10281372]
[14.34780407 231.17825317]
[10.04579258 215.35343933]
[21.78992844 203.90759277]
[25.37966347 189.34346008]
[28.96939659 174.77932739]
[31.13673401 159.93673706]
[31.86143303 144.95425415]
[32.58613586 129.97177124]
[33.31083679 114.98928833]
[34.03553772 100.00680542]
[34.76023483 85.02432251]
[23.77620697 74.80908203]
[8.88557339 76.61713409]
[-6.00505972 78.42518616]
[-20.89569283 80.23323059]
[-35.78632736 82.04128265]
[-50.67695999 83.84933472]
[-54.07515717 86.60067749]
[-57.79862976 87.98038483]
[-61.37366486 88.05545807]
[-64.39754486 87.04066467]
[-66.58079529 85.26226044]
[-81.55695343 86.10762024]
[-96.53311157 86.95298767]
[-111.50927734 87.79835510]
[-126.48543549 88.64372253]
[-141.46159363 89.48908234]
[-156.43775940 90.33444977]
[-171.40661621 91.30042267]
[-186.36721802 92.38694763]
[-201.32780457 93.47346497]
[-214.53128052 102.19005585]
[-227.78556824 95.39498138]
[-242.74617004 96.48149872]
[-257.70675659 97.56802368]
[-265.77951050 110.81983948]
[-280.11264038 116.76466370]
[-295.19479370 113.11660004]
[-305.22656250 101.27839661]
[-306.35052490 85.80207825]
[-298.13452148 72.63861847]
[-283.73773193 66.84962463]
[-268.69604492 70.66108704]
[-258.79327393 82.60742188]
[-243.83268738 81.52090454]
[-228.87210083 80.43437958]
[-216.73870850 71.79550934]
[-202.41433716 78.51287079]
[-187.45373535 77.42634583]
[-172.49313354 76.33982849]
[-166.04096985 72.71488953]
[-157.28311157 75.35829163]
[-142.30696106 74.51292419]
[-127.33080292 73.66755676]
[-112.35463715 72.82219696]
[-97.37847900 71.97682953]
[-82.40232086 71.13146210]
[-67.42616272 70.28609467]
[-52.48500824 68.95870209]
[-37.59437561 67.15065002]
[-22.70374298 65.34259796]
[-7.81310987 63.53454971]
[7.07752323 61.72650146]
[21.96815681 59.91844940]
[25.92545891 53.54743958]
[11.02869225 55.30424881]
[0.36706150 44.75296021]
[1.96879649 29.83872604]
[14.62778759 21.79199028]
[28.81178665 26.67196655]
[33.84006119 40.80542374]
[37.79736328 34.43441391]
[32.81874466 20.28473473]
[27.84012794 6.13505793]
[22.86151123 -8.01461887]
[17.88289261 -22.16429710]
[3.18393660 -27.50046539]
[-4.60130262 -41.06232834]
[-1.79687238 -56.44638443]
[10.27306080 -66.38875580]
[25.90944290 -66.19495392]
[37.72925186 -55.95649338]
[40.15153885 -40.50765610]
[32.03256989 -27.14291382]
[37.01118851 -12.99323750]
[41.98980713 1.15644014]
[46.96842194 15.30611706]
[51.94704056 29.45579529]
[59.44606781 29.33496857]
[54.58161545 15.14563942]
[66.57328796 6.13454390]
[78.84896088 14.75473881]
[74.44412231 29.09331894]
[81.94314575 28.97249413]
[86.46333313 14.66977024]
[90.98352814 0.36704719]
[95.50371552 -13.93567562]
[100.02390289 -28.23839951]
[99.03168488 -45.16328812]
[115.02046967 -50.80200195]
[124.86495972 -36.99901962]
[114.32662964 -23.71821022]
[109.80643463 -9.41548729]
[105.28624725 4.88723612]
[100.76605988 19.18995857]
[96.24587250 33.49268341]
[109.11373901 41.20098495]
[119.59140778 30.46700096]
[130.06907654 19.73301697]
[140.54675293 8.99903202]
[151.02442932 -1.73495281]
[161.50209045 -12.46893692]
[165.02828979 -28.48449135]
[180.74087524 -33.17987823]
[192.47608948 -21.72488785]
[188.16174316 -5.90343094]
[172.23608398 -1.99126673]
[161.75840759 8.74271774]
[151.28073120 19.47670174]
[140.80307007 30.21068573]
[130.32539368 40.94467163]
[119.84772491 51.67865372]
[136.33912659 76.06763458]
[134.78056335 100.56662750]
[149.37313843 104.03893280]
[163.96571350 107.51123047]
[178.55828857 110.98352814]
[193.77470398 106.65094757]
[204.36518860 117.12428284]
[218.95776367 120.59658051]
[233.55033875 124.06888580]
[251.06105042 118.39181519]
[263.34179688 130.91981506]
[277.98843384 134.15658569]
[292.63504028 137.39334106]
[307.28164673 140.63011169]
[320.50338745 132.39457703]
[335.31100464 135.88575745]
[343.08087158 148.54139709]
[357.72747803 151.77815247]
[372.37408447 155.01492310]
[381.44256592 153.81060791]
[387.22970581 158.42359924]
[400.55532837 149.92637634]
[415.96817017 153.42208862]
[424.32403564 166.83682251]
[420.66555786 182.21183777]
[407.16323853 190.42541504]
[391.82775879 186.60458374]
[383.75738525 173.01617432]
[369.13732910 169.66152954]
[354.49072266 166.42477417]
[339.84408569 163.18800354]
[327.46472168 171.39085388]
[312.56484985 168.31697083]
[304.04489136 155.27671814]
[289.39828491 152.03996277]
[274.75167847 148.80319214]
[260.10504150 145.56643677]
[249.73368835 151.80853271]
[237.49813843 149.22222900]
[230.07803345 138.66145325]
[215.48545837 135.18914795]
[200.89288330 131.71685791]
[186.72023010 136.29780579]
[175.08598328 125.57610321]
[160.49340820 122.10380554]
[145.90084839 118.63150024]
[131.30827332 115.15920258]
[114.45301819 136.38298035]
[84.52478027 140.66703796]
[57.21738434 121.48711395]
[49.74272156 85.74902344]
[49.01802063 100.73150635]
[48.29331970 115.71398926]
[47.56861877 130.69647217]
[46.84391785 145.67895508]
[46.11921692 160.66143799]
[54.97111511 148.55177307]
[68.15625763 141.39971924]
[83.13403320 140.58338928]
[97.01837921 146.26007080]
[107.13395691 157.33595276]
[111.53161621 171.67681885]
[109.36396027 186.51937866]
[101.04868317 199.00361633]
[88.18804932 206.72396851]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 12]
[4 11]
[5 10]
[13 185]
[14 184]
[15 183]
[16 182]
[17 181]
[18 180]
[19 71]
[20 70]
[21 69]
[22 68]
[23 67]
[24 66]
[29 65]
[30 64]
[31 63]
[32 62]
[33 61]
[34 60]
[35 59]
[36 57]
[37 56]
[38 55]
[40 53]
[41 52]
[42 51]
[79 95]
[80 94]
[81 93]
[82 92]
[83 91]
[101 113]
[102 112]
[103 111]
[104 110]
[105 109]
[114 129]
[115 128]
[116 127]
[117 126]
[118 125]
[119 124]
[131 176]
[132 175]
[133 174]
[134 173]
[136 171]
[137 170]
[138 169]
[140 166]
[141 165]
[142 164]
[143 163]
[146 160]
[147 159]
[148 158]
[150 157]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
