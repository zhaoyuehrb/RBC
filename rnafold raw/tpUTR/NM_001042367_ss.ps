%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:48:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCUCUAUAUACAUAUAUAACUAAGGAACUUCAAAGUAUUGAAAAAUGCUUCCUCCUAAAAUUAAAGAAGAUAUUAGAAUAAAGAGUAUUAUCCAA\
) } def
/len { sequence length } bind def

/coor [
[108.76403046 251.20997620]
[104.92086029 236.71066284]
[101.07769012 222.21134949]
[97.23452759 207.71203613]
[93.39135742 193.21272278]
[89.54819489 178.71340942]
[78.80828857 168.39335632]
[82.75157166 153.07144165]
[78.90840149 138.57212830]
[75.06523132 124.07280731]
[73.99008942 139.03422546]
[67.10666656 152.36158752]
[55.52873230 161.89843750]
[41.12967300 166.10165405]
[26.23933601 164.29115295]
[13.26707172 156.75985718]
[4.31186533 144.72639465]
[0.82272214 130.13783264]
[3.36420631 115.35471344]
[11.52509022 102.76900482]
[23.98489571 94.41716766]
[38.72755432 91.65056610]
[53.36761093 94.91685486]
[65.53797913 103.68944550]
[56.87915039 91.44099426]
[48.22032166 79.19253540]
[39.56148911 66.94408417]
[35.71459961 81.44240570]
[23.60627937 90.29614258]
[8.62406731 89.56584930]
[-2.56577039 79.57647705]
[-4.98436689 64.77275085]
[2.44442010 51.74151230]
[16.41518784 46.28096008]
[30.71083641 50.82007599]
[25.02673721 36.93875504]
[19.34263611 23.05743790]
[13.65853500 9.17611885]
[7.97443485 -4.70519924]
[2.29033446 -18.58651733]
[-11.00352669 -28.18887711]
[-9.06562233 -44.47312164]
[6.11049700 -50.68741226]
[18.91294098 -40.43902588]
[16.17165375 -24.27061844]
[21.85575294 -10.38929939]
[27.53985405 3.49201870]
[33.22395325 17.37333679]
[38.90805435 31.25465584]
[44.59215546 45.13597488]
[51.80994415 58.28525162]
[60.46877670 70.53370667]
[69.12760925 82.78216553]
[77.78643799 95.03061676]
[93.83746338 80.56235504]
[112.10615540 86.65273285]
[125.89360809 80.74459839]
[139.68106079 74.83646393]
[153.46852112 68.92832947]
[163.10560608 56.38092804]
[177.85157776 58.47980881]
[191.63903809 52.57167435]
[205.42649841 46.66353607]
[211.06330872 31.89865303]
[225.52342224 25.52048874]
[240.22787476 31.31309700]
[246.45280457 45.83982468]
[240.50505066 60.48222351]
[225.91333008 66.55321503]
[211.33462524 60.45099258]
[197.54718018 66.35913086]
[183.75971985 72.26726532]
[175.10881042 84.39207458]
[159.37666321 82.71578217]
[145.58920288 88.62391663]
[131.80174255 94.53205109]
[118.01428986 100.44019318]
[110.39728546 117.54124451]
[89.56454468 120.22964478]
[93.40771484 134.72895813]
[97.25087738 149.22827148]
[108.26567078 160.58541870]
[104.04750824 174.87025452]
[107.89067078 189.36956787]
[111.73384094 203.86888123]
[115.57700348 218.36819458]
[119.42017365 232.86750793]
[123.26333618 247.36680603]
[137.97666931 252.00592041]
[147.82865906 263.87780762]
[149.67556763 279.19421387]
[142.92803955 293.06774902]
[129.73919678 301.07138062]
[114.31756592 300.65118408]
[101.58410645 291.94128418]
[95.60203552 277.72091675]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 88]
[2 87]
[3 86]
[4 85]
[5 84]
[6 83]
[8 81]
[9 80]
[10 79]
[24 54]
[25 53]
[26 52]
[27 51]
[35 50]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
[56 77]
[57 76]
[58 75]
[59 74]
[61 72]
[62 71]
[63 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
