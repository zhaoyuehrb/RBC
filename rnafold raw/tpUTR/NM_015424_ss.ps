%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 08:43:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGUUGCAGAUAUGAGCUGUAUAAUUGUUGUUAUUAUAUAUUAAUAAAUAAGAAGUUGCAUUACCCUCAG\
) } def
/len { sequence length } bind def

/coor [
[63.84204483 281.87698364]
[56.74972534 295.32196045]
[45.04891586 305.02554321]
[30.52390289 309.50799561]
[15.38964558 308.08578491]
[1.95400751 300.97576904]
[-7.73417282 289.26220703]
[-12.19751835 274.73132324]
[-10.75540257 259.59893799]
[-3.62773561 246.17266846]
[8.09856319 236.49990845]
[22.63532066 232.05567932]
[37.76578522 233.51770020]
[44.78179932 220.25965881]
[51.79781342 207.00163269]
[58.81382751 193.74359131]
[55.14588928 172.56349182]
[73.09127808 159.47479248]
[77.66336060 145.18856812]
[82.23545074 130.90235901]
[86.80753326 116.61613464]
[79.63313293 105.94371033]
[79.94116974 93.08767700]
[87.61847687 82.77110291]
[99.84454346 78.78413391]
[105.04408264 64.71414185]
[102.57012939 49.08755493]
[114.23944855 39.83140182]
[119.43898773 25.76140785]
[124.63851929 11.69141102]
[129.83805847 -2.37858534]
[135.03759766 -16.44858170]
[139.92460632 -30.63015938]
[144.49668884 -44.91637802]
[149.06878662 -59.20259476]
[153.64086914 -73.48881531]
[147.60211182 -88.35195923]
[155.58279419 -102.26914978]
[171.46083069 -104.56430817]
[183.05593872 -93.47679138]
[181.47334290 -77.51198578]
[167.92709351 -68.91672516]
[163.35499573 -54.63050842]
[158.78291321 -40.34429169]
[154.21083069 -26.05807304]
[155.20466614 -18.48785591]
[149.10758972 -11.24904251]
[143.90805054 2.82095337]
[138.70852661 16.89094925]
[133.50898743 30.96094513]
[128.30944824 45.03094101]
[131.15530396 59.65114594]
[119.11407471 69.91368103]
[113.91453552 83.98367310]
[121.17309570 98.64457703]
[115.84320831 114.11133575]
[101.09375763 121.18822479]
[96.52166748 135.47444153]
[91.94958496 149.76065063]
[87.37749481 164.04687500]
[92.96344757 171.19004822]
[95.04360962 179.91708374]
[93.31793213 188.62278748]
[88.17889404 195.74005127]
[80.62592316 200.02186584]
[72.07186127 200.75961304]
[65.05584717 214.01763916]
[58.03983307 227.27568054]
[51.02381897 240.53372192]
[60.74278641 252.22175598]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 69]
[14 68]
[15 67]
[16 66]
[18 60]
[19 59]
[20 58]
[21 57]
[25 54]
[26 53]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[33 45]
[34 44]
[35 43]
[36 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
