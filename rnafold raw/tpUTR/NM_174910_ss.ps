%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 02:33:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAUUACAGGUACUAAGGAUUGUUUACUUCCGAACUUUUCAAAAAUAAAUGAAAUUUACAUAUUUGUAA\
) } def
/len { sequence length } bind def

/coor [
[75.14990234 340.66543579]
[59.71533585 345.04190063]
[46.75476074 335.58657837]
[46.21042633 319.55276489]
[58.49989700 309.24023438]
[61.14092255 294.47457886]
[63.78195190 279.70889282]
[66.42298126 264.94323730]
[69.06401062 250.17756653]
[71.70503235 235.41189575]
[74.34606171 220.64622498]
[76.98709106 205.88055420]
[79.62812042 191.11488342]
[72.70236969 175.14175415]
[84.28534698 161.02128601]
[86.27065277 146.15324402]
[88.25596619 131.28520203]
[90.24127197 116.41716766]
[81.52543640 104.84217834]
[83.44317627 90.48013306]
[94.89069366 81.59751892]
[96.87599945 66.72948456]
[98.86130524 51.86144638]
[100.84661102 36.99340820]
[102.83192444 22.12537003]
[104.81723022 7.25733185]
[106.80253601 -7.61070633]
[100.95980835 -22.31353378]
[110.31354523 -33.90477753]
[112.29885101 -48.77281570]
[102.97365570 -61.24993134]
[105.19884491 -76.29995728]
[117.15133667 -85.11321259]
[119.13664246 -99.98124695]
[121.12194824 -114.84928894]
[117.22517395 -131.34933472]
[132.00164795 -139.66148376]
[144.07951355 -127.76351166]
[135.98999023 -112.86398315]
[134.00468445 -97.99594116]
[132.01937866 -83.12790680]
[141.24069214 -71.48733521]
[139.43911743 -56.38075256]
[127.16689301 -46.78750610]
[125.18158722 -31.91946793]
[131.16630554 -18.28010178]
[121.67057800 -5.62539816]
[119.68526459 9.24263954]
[117.69995880 24.11067772]
[115.71465302 38.97871399]
[113.72934723 53.84675217]
[111.74403381 68.71479034]
[109.75872803 83.58283234]
[118.47456360 95.15782166]
[116.55682373 109.51986694]
[105.10930634 118.40248108]
[103.12400055 133.27052307]
[101.13869476 148.13854980]
[99.15338898 163.00659180]
[106.43177795 173.90689087]
[104.26419830 186.42233276]
[94.39378357 193.75590515]
[91.75276184 208.52157593]
[89.11173248 223.28724670]
[86.47070312 238.05291748]
[83.82967377 252.81858826]
[81.18865204 267.58425903]
[78.54762268 282.34991455]
[75.90659332 297.11560059]
[73.26556396 311.88125610]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 70]
[6 69]
[7 68]
[8 67]
[9 66]
[10 65]
[11 64]
[12 63]
[13 62]
[15 59]
[16 58]
[17 57]
[18 56]
[21 53]
[22 52]
[23 51]
[24 50]
[25 49]
[26 48]
[27 47]
[29 45]
[30 44]
[33 41]
[34 40]
[35 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
