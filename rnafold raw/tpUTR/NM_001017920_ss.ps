%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 14:16:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUGGAUUUAAAACACAGCCGUCUGGCCAGCUGCCUCGAAUAUCUGACAGCUUAGCAAAAAGGGCCAAAGCUUUCCAUAGGCGUGCUGCACUUGCUUGGUAAAUUAAGCAGCUUUUGUAUCUUCCCCUUUGACUUUAGGUAAUAAAGCAUCCAAACUUGUAA\
) } def
/len { sequence length } bind def

/coor [
[108.53733826 231.25958252]
[111.57988739 216.33769226]
[120.43395996 203.94715881]
[133.56553650 196.23472595]
[131.84527588 181.33369446]
[130.12503052 166.43266296]
[128.40478516 151.53163147]
[126.68452454 136.63059998]
[115.49671173 141.55503845]
[103.65311432 143.22738647]
[92.05967712 141.66252136]
[81.56545258 137.11766052]
[72.90042877 130.06300354]
[66.62492371 121.13695526]
[63.09412003 111.09038544]
[62.43981171 100.72434998]
[64.57019806 90.82657623]
[51.12771606 84.17077637]
[37.68523407 77.51498413]
[24.24275017 70.85918427]
[10.73713398 64.33244324]
[-2.83037376 57.93535614]
[-16.39788246 51.53826904]
[-29.96538925 45.14118195]
[-43.53289795 38.74409485]
[-57.22045135 32.60806274]
[-71.02303314 26.73534393]
[-85.53279877 32.40142441]
[-99.44691467 26.24902725]
[-104.75923157 12.38126469]
[-118.56181335 6.50854445]
[-132.36439514 0.63582432]
[-146.16696167 -5.23689604]
[-160.13256836 -10.71064186]
[-174.24967957 -15.78089523]
[-188.36677551 -20.85114861]
[-202.48387146 -25.92140198]
[-211.76713562 -15.08824444]
[-224.16836548 -8.09588814]
[-238.18330383 -5.76903152]
[-252.11994934 -8.36786556]
[-264.30282593 -15.55915451]
[-273.27438354 -26.45881081]
[-277.96945190 -39.74053955]
[-277.84161377 -53.79720306]
[-291.85900879 -59.13694000]
[-305.87637329 -64.47667694]
[-319.89376831 -69.81640625]
[-335.98959351 -66.67686462]
[-346.55087280 -79.22245026]
[-340.71307373 -94.54733276]
[-324.48159790 -96.88658905]
[-314.55404663 -83.83380127]
[-300.53665161 -78.49406433]
[-286.51925659 -73.15432739]
[-272.50186157 -67.81459808]
[-261.81979370 -79.49109650]
[-247.44387817 -86.19927979]
[-231.55632019 -86.88832092]
[-216.58132935 -81.42357635]
[-204.81510925 -70.61161041]
[-198.07391357 -56.08130646]
[-197.41362000 -40.03850174]
[-183.29652405 -34.96825027]
[-169.17942810 -29.89799690]
[-155.06231689 -24.82774353]
[-151.69952393 -26.02630043]
[-147.58270264 -25.62664223]
[-143.48289490 -23.28962708]
[-140.29425049 -19.03947449]
[-126.49166870 -13.16675377]
[-112.68909454 -7.29403305]
[-98.88651276 -1.42131293]
[-85.21075439 -7.21002722]
[-71.12931824 -1.45087671]
[-65.15030670 12.93276596]
[-51.34773254 18.80548668]
[-46.62247086 17.86296844]
[-41.25863647 19.91186714]
[-37.13581085 25.17658615]
[-23.56830215 31.57367325]
[-10.00079441 37.97076035]
[3.56671357 44.36784744]
[17.13422203 50.76493454]
[24.56005287 50.77322388]
[30.89854622 57.41670227]
[44.34103012 64.07250214]
[57.78351212 70.72829437]
[71.22599792 77.38409424]
[82.51072693 65.87866211]
[98.29154968 59.94971848]
[115.84106445 61.28445816]
[131.84196472 70.25280762]
[143.01345825 85.72740936]
[153.62005615 75.12080383]
[164.22666931 64.51420593]
[174.83326721 53.90760422]
[185.43986511 43.30100250]
[196.04646301 32.69440079]
[195.79583740 16.89209938]
[206.85237122 5.59925175]
[222.65644836 5.51570415]
[233.83177185 16.69102478]
[233.74821472 32.49509048]
[222.45536804 43.55163574]
[206.65307617 43.30100250]
[196.04646301 53.90760422]
[185.43986511 64.51420593]
[174.83326721 75.12080383]
[164.22666931 85.72740936]
[153.62005615 96.33400726]
[157.31700134 110.87129211]
[171.70201111 115.12233734]
[186.08703613 119.37338257]
[200.47204590 123.62443542]
[214.85705566 127.87548065]
[228.62127686 120.58275604]
[243.14916992 125.09883881]
[250.01684570 138.26586914]
[264.40185547 142.51690674]
[278.78686523 146.76795959]
[293.17187500 151.01899719]
[307.55691528 155.27005005]
[317.08837891 143.42861938]
[330.42822266 136.14050293]
[345.54223633 134.51705933]
[360.12561035 138.80587769]
[371.95446777 148.35292053]
[379.22503662 161.70234680]
[380.82858276 176.81846619]
[376.52059937 191.39617920]
[366.95800781 203.21249390]
[353.59902954 210.46548462]
[338.48080444 212.04916382]
[323.90878296 207.72200012]
[312.10507202 198.14385986]
[304.86962891 184.77534485]
[303.30584717 169.65505981]
[288.92083740 165.40402222]
[274.53582764 161.15296936]
[260.15081787 156.90193176]
[245.76580811 152.65087891]
[232.84414673 159.96978760]
[218.19514465 155.86354065]
[210.60601807 142.26049805]
[196.22099304 138.00944519]
[181.83598328 133.75839233]
[167.45097351 129.50735474]
[153.06596375 125.25630951]
[141.58555603 134.91033936]
[143.30581665 149.81137085]
[145.02606201 164.71240234]
[146.74630737 179.61343384]
[148.46656799 194.51446533]
[163.01002502 199.03196716]
[174.45442200 209.07914734]
[180.81694031 222.91525269]
[180.99523926 238.14312744]
[174.95843506 252.12443542]
[163.75244141 262.43682861]
[149.31874084 267.29360962]
[134.15809631 265.85336304]
[120.89714813 258.36553955]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 154]
[5 153]
[6 152]
[7 151]
[8 150]
[17 89]
[18 88]
[19 87]
[20 86]
[21 84]
[22 83]
[23 82]
[24 81]
[25 80]
[26 77]
[27 76]
[30 73]
[31 72]
[32 71]
[33 70]
[34 66]
[35 65]
[36 64]
[37 63]
[45 56]
[46 55]
[47 54]
[48 53]
[94 111]
[95 110]
[96 109]
[97 108]
[98 107]
[99 106]
[112 149]
[113 148]
[114 147]
[115 146]
[116 145]
[119 142]
[120 141]
[121 140]
[122 139]
[123 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
