%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:05:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUUUUGGACUUCAUUCAUUCAAGCAAAAGAAUUAUUAACUCUGUGUUUAUCUAAAAUGUUGAAUCCAUUCUGGUUUUAGAUAUUAUGUUAGAGUUCACAGUGGUAAGACUCAUAUGCCUGUAUGUGUUGCUAAUAAAUUAGAUUUUGGAUUUUAA\
) } def
/len { sequence length } bind def

/coor [
[-28.57785416 189.08442688]
[-40.36687088 187.22105408]
[-50.79535294 181.48767090]
[-58.63920975 172.58410645]
[-72.79041290 177.55839539]
[-86.94161224 182.53268433]
[-101.09281158 187.50697327]
[-115.24401093 192.48126221]
[-129.39520264 197.45555115]
[-143.54640198 202.42985535]
[-129.28794861 207.08776855]
[-118.29850769 217.29719543]
[-112.60532379 231.17478943]
[-113.25860596 246.16055298]
[-120.13784790 259.49008179]
[-131.97402954 268.70443726]
[-146.58375549 272.10388184]
[-161.27192688 269.06134033]
[-173.32907104 260.13800049]
[-180.53096008 246.98002625]
[-181.54908752 232.01461792]
[-176.19563293 218.00245667]
[-165.46075439 207.52998352]
[-180.35414124 209.31526184]
[-195.24751282 211.10052490]
[-210.14089966 212.88580322]
[-225.03428650 214.67108154]
[-233.63253784 224.33305359]
[-246.11155701 225.48692322]
[-255.70021057 218.05644226]
[-270.62612915 219.54524231]
[-285.55206299 221.03405762]
[-292.47164917 234.82255554]
[-305.75903320 242.66151428]
[-321.17425537 242.04953003]
[-333.79837036 233.18188477]
[-339.60308838 218.88822937]
[-336.73614502 203.72959900]
[-326.11233521 192.54306030]
[-311.12173462 188.89820862]
[-296.54772949 193.95808411]
[-287.04089355 206.10812378]
[-272.11495972 204.61930847]
[-257.18902588 203.13050842]
[-243.54380798 192.13235474]
[-226.81954956 199.77769470]
[-211.92617798 197.99241638]
[-197.03279114 196.20715332]
[-182.13940430 194.42187500]
[-167.24603271 192.63661194]
[-159.50558472 186.50430298]
[-148.52069092 188.27865601]
[-134.36949158 183.30435181]
[-120.21829987 178.33006287]
[-106.06710052 173.35577393]
[-91.91590118 168.38148499]
[-77.76470184 163.40719604]
[-63.61350250 158.43290710]
[-61.13337326 140.54293823]
[-49.90285492 126.29029083]
[-32.93185043 119.63281250]
[-14.83893013 122.47402191]
[-0.59449345 134.11985779]
[13.23499393 128.31079102]
[27.06448174 122.50172424]
[40.89397049 116.69265747]
[54.72345734 110.88359070]
[68.55294800 105.07452393]
[82.38243103 99.26545715]
[92.84942627 83.88208008]
[111.27855682 86.44594574]
[124.86615753 80.09165955]
[138.45376587 73.73737335]
[152.04136658 67.38307953]
[165.62898254 61.02879715]
[179.21658325 54.67450714]
[192.80418396 48.32022095]
[178.19731140 44.90861893]
[167.16355896 34.74709702]
[162.56332397 20.46991730]
[165.58915710 5.77827549]
[175.45664978 -5.51918793]
[189.60775757 -10.49373436]
[204.37397766 -7.85577011]
[215.92732239 1.71084344]
[221.27273560 15.72607040]
[219.02447510 30.55662346]
[209.76451111 42.35849762]
[224.33955383 38.81333160]
[238.91459656 35.26816559]
[253.48962402 31.72299767]
[268.06466675 28.17783165]
[282.63970947 24.63266563]
[286.92807007 11.50056553]
[297.07437134 2.28587151]
[310.34588623 -0.67457604]
[323.23919678 3.29077387]
[332.40484619 13.03952980]
[347.04748535 9.78484821]
[361.69012451 6.53016567]
[376.33276367 3.27548385]
[385.83346558 -13.06574631]
[403.93902588 -17.25748444]
[419.12594604 -7.10737753]
[433.62762451 -10.94162655]
[448.12930298 -14.77587605]
[462.63095093 -18.61012650]
[467.27911377 -33.32060623]
[479.15707397 -43.16529083]
[494.47460938 -45.00277328]
[508.34396362 -38.24671936]
[516.33947754 -25.05296326]
[515.90985107 -9.63158321]
[507.19207764 3.09651279]
[492.96804810 9.06983757]
[477.77658081 6.38232327]
[466.46520996 -4.10845232]
[451.96353149 -0.27420297]
[437.46185303 3.56004643]
[422.96020508 7.39429617]
[419.46917725 18.32289124]
[411.03192139 26.27315331]
[399.68234253 29.16850471]
[388.23504639 26.17071152]
[379.58746338 17.91812897]
[364.94479370 21.17281151]
[350.30215454 24.42749214]
[335.65951538 27.68217468]
[329.62783813 42.92277908]
[315.57019043 51.66941071]
[298.90225220 50.31999969]
[286.18487549 39.20770645]
[271.60983276 42.75287247]
[257.03479004 46.29803848]
[242.45976257 49.84320450]
[227.88471985 53.38837051]
[213.30967712 56.93353653]
[199.15847778 61.90782547]
[185.57087708 68.26211548]
[171.98326111 74.61640167]
[158.39566040 80.97068787]
[144.80805969 87.32497406]
[131.22044373 93.67926025]
[117.63284302 100.03354645]
[114.77265167 109.62741089]
[107.15057373 116.11791992]
[97.22354889 117.41291046]
[88.19149780 113.09494019]
[74.36201477 118.90401459]
[60.53252411 124.71308136]
[46.70303726 130.52214050]
[32.87355042 136.33120728]
[19.04406166 142.14028931]
[5.21457434 147.94935608]
[5.23883915 160.05839539]
[1.16774869 171.42568970]
[-6.49423218 180.71253967]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 58]
[5 57]
[6 56]
[7 55]
[8 54]
[9 53]
[10 52]
[23 50]
[24 49]
[25 48]
[26 47]
[27 46]
[30 44]
[31 43]
[32 42]
[63 154]
[64 153]
[65 152]
[66 151]
[67 150]
[68 149]
[69 148]
[71 144]
[72 143]
[73 142]
[74 141]
[75 140]
[76 139]
[77 138]
[88 137]
[89 136]
[90 135]
[91 134]
[92 133]
[93 132]
[98 128]
[99 127]
[100 126]
[101 125]
[104 120]
[105 119]
[106 118]
[107 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
