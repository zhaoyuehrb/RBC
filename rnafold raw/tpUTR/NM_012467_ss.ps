%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 15:32:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGCAGGAAUCCAAGUGCAUUUCUUAAAUAAGUUACUAUUUAUUCCGCUCCGCCCCCUCCCUCUCCCUUGAGAAGCUGAGUCUUCUGCAUCAGAUUAUUGCAACAUUUAACCUGAAUUUAAAAGCACACGAAACAAA\
) } def
/len { sequence length } bind def

/coor [
[169.82385254 351.47811890]
[176.58874512 338.02261353]
[186.08837891 326.33624268]
[197.87840271 316.96560669]
[191.28237915 303.49368286]
[184.68635559 290.02175903]
[178.09034729 276.54986572]
[163.29475403 278.70663452]
[148.53697205 276.18127441]
[135.26435852 269.20861816]
[124.78260040 258.46041870]
[118.12724304 244.98046875]
[115.96132660 230.08335876]
[118.50942230 215.22618103]
[125.53440094 201.86608887]
[136.35940552 191.31732178]
[129.76339722 177.84539795]
[123.16737366 164.37348938]
[116.57135010 150.90156555]
[104.86053467 153.30998230]
[92.90726471 153.05914307]
[81.30780792 150.16156006]
[70.64076233 144.76174927]
[61.43824768 137.12910461]
[54.15930557 127.64435577]
[49.16703415 116.78061676]
[46.71046066 105.07981110]
[31.72600365 104.39709473]
[16.74154854 103.71437073]
[1.75709438 103.03165436]
[-13.22736073 102.34893799]
[-28.21181679 101.66621399]
[-43.19626999 100.98349762]
[-57.49996948 109.00448608]
[-71.45806122 100.39614105]
[-70.71166229 84.01398468]
[-56.02859879 76.71057892]
[-42.51355362 85.99904633]
[-27.52909660 86.68176270]
[-12.54464149 87.36447906]
[2.43981338 88.04720306]
[17.42426872 88.72991943]
[32.40872192 89.41263580]
[47.39317703 90.09535980]
[53.67622375 73.17301178]
[65.22669983 59.30113983]
[80.73121643 50.05709839]
[77.34585571 35.44411087]
[73.96050262 20.83112526]
[70.57514954 6.21813869]
[59.92291260 -5.47974253]
[64.58815765 -19.62487411]
[61.20280457 -34.23785782]
[48.98813248 -40.03485107]
[42.46197128 -51.65269852]
[43.82600403 -64.71189117]
[52.35487747 -74.43689728]
[49.30303574 -89.12315369]
[46.25119781 -103.80941772]
[31.64083862 -108.54576874]
[21.36800003 -119.96349335]
[18.19602013 -134.99127197]
[22.97814751 -149.58671570]
[34.42801285 -159.82371521]
[49.46566010 -162.94856262]
[64.04603577 -158.12071228]
[74.24710083 -146.63882446]
[77.32480621 -131.59144592]
[72.45127106 -117.02627563]
[60.93745804 -106.86125946]
[63.98929596 -92.17499542]
[67.04113770 -77.48873901]
[81.46485901 -68.91620636]
[85.34259796 -52.24572754]
[75.81578827 -37.62321472]
[79.20114899 -23.01022911]
[89.61123657 -12.35756683]
[85.18813324 2.83278298]
[88.57348633 17.44576836]
[91.95884705 32.05875397]
[95.34420013 46.67174149]
[110.56277466 47.52136230]
[124.92497253 52.62568665]
[137.26637268 61.57088470]
[149.11451721 52.37188339]
[160.96264648 43.17288208]
[172.81079102 33.97388077]
[181.61372375 19.48441124]
[197.97383118 23.93223381]
[198.22875977 40.88426590]
[182.00979614 45.82202148]
[170.16165161 55.02102280]
[158.31352234 64.22002411]
[146.46537781 73.41902161]
[152.23252869 88.28070831]
[153.36752319 104.18170166]
[149.76969910 119.71185303]
[141.75810242 133.49388123]
[130.04325867 144.30555725]
[136.63928223 157.77746582]
[143.23530579 171.24937439]
[149.83132935 184.72129822]
[164.80216980 182.64009094]
[179.66317749 185.28453064]
[192.96115112 192.38327026]
[203.39973450 203.22996521]
[209.96569824 216.75367737]
[212.02734375 231.62448120]
[209.39521790 246.38429260]
[202.33949280 259.58984375]
[191.56225586 269.95382690]
[198.15827942 283.42575073]
[204.75430298 296.89767456]
[211.35032654 310.36956787]
[225.98240662 306.80361938]
[241.03900146 306.46697998]
[255.81584167 309.37533569]
[269.62182617 315.39273071]
[281.81121826 324.23767090]
[291.81387329 335.49649048]
[299.16198730 348.64257812]
[303.51184082 363.06106567]
[304.65997314 378.07757568]
[302.55273438 392.98977661]
[297.28863525 407.10015869]
[289.11392212 419.74880981]
[278.41094971 430.34408569]
[265.68026733 438.39044189]
[251.51733398 443.51153564]
[236.58457947 445.46786499]
[221.58044434 444.16787720]
[207.20669556 439.67239380]
[194.13560486 432.19171143]
[182.97854614 422.07568359]
[174.25733948 409.79745483]
[168.37991333 395.93130493]
[165.62115479 381.12579346]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 114]
[5 113]
[6 112]
[7 111]
[16 102]
[17 101]
[18 100]
[19 99]
[27 44]
[28 43]
[29 42]
[30 41]
[31 40]
[32 39]
[33 38]
[47 81]
[48 80]
[49 79]
[50 78]
[52 76]
[53 75]
[57 72]
[58 71]
[59 70]
[84 94]
[85 93]
[86 92]
[87 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
