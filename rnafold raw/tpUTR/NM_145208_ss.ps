%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 00:29:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAAAAAGGGAAGAUAGUGCAGAUGAAAUAAAGUGUAAUCCUUUAUUAACAUCUCUUUGCAGUGUCCCCAAUGAGG\
) } def
/len { sequence length } bind def

/coor [
[71.11121368 357.84957886]
[57.08850479 352.09289551]
[45.88246155 341.88504028]
[38.84626770 328.45864868]
[36.82957840 313.43505859]
[40.07592010 298.62838745]
[48.19327545 285.82666016]
[60.20144272 276.57574463]
[74.65036774 271.99267578]
[75.25436401 257.00485229]
[75.85835266 242.01701355]
[73.13745880 237.78330994]
[73.24866486 231.74597168]
[77.16255188 225.86160278]
[78.97060394 210.97096252]
[80.77864838 196.08033752]
[82.58670044 181.18969727]
[76.43991852 167.62258911]
[85.78423309 154.85566711]
[87.59227753 139.96504211]
[89.40032959 125.07440186]
[91.20838165 110.18376923]
[91.81237030 95.19593811]
[91.20838165 80.20809937]
[90.60439301 65.22026825]
[90.00040436 50.23242950]
[79.77433777 35.07533646]
[88.19746399 19.81676865]
[86.99046326 4.86540985]
[85.78347015 -10.08594990]
[84.57646942 -25.03730965]
[83.36946869 -39.98867035]
[82.16247559 -54.94002914]
[80.95547485 -69.89138794]
[77.05395508 -78.46496582]
[80.01332092 -85.46703339]
[70.79598999 -99.03069305]
[78.17642975 -113.67517853]
[94.56227875 -114.33551025]
[103.09717560 -100.33238220]
[95.00115967 -86.07102203]
[95.90682983 -71.09838867]
[97.11383057 -56.14702606]
[98.32083130 -41.19566727]
[99.52783203 -26.24430847]
[100.73482513 -11.29294777]
[101.94182587 3.65841150]
[103.14882660 18.60977173]
[112.25246429 26.83585167]
[113.22898865 39.47240067]
[104.98823547 49.62844086]
[105.59222412 64.61627960]
[106.19621277 79.60411072]
[106.80020905 94.59194946]
[109.15985870 96.99066925]
[110.58731842 100.39196014]
[110.67417908 104.40558624]
[109.18174744 108.48302460]
[106.09901428 111.99182129]
[104.29096222 126.88245392]
[102.48291779 141.77308655]
[100.67486572 156.66372681]
[106.69232178 171.29589844]
[97.47733307 182.99775696]
[95.66928101 197.88838196]
[93.86123657 212.77902222]
[92.05318451 227.66964722]
[90.84618378 242.62100220]
[90.24219513 257.60885620]
[89.63820648 272.59667969]
[103.67150116 278.32751465]
[114.89633942 288.51470947]
[121.95726013 301.92810059]
[124.00163269 316.94796753]
[120.78258514 331.76058960]
[112.68883514 344.57723999]
[100.69773865 353.85028076]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 70]
[10 69]
[11 68]
[14 67]
[15 66]
[16 65]
[17 64]
[19 62]
[20 61]
[21 60]
[22 59]
[23 54]
[24 53]
[25 52]
[26 51]
[28 48]
[29 47]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[36 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
