%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 21:59:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUGCAGUCUCCCCAGGAACUUAUGAUGCCUCCGAAAACCACCUGGGGACUCACGUAGCUGGAGAGCAUUACAGCCUCAUCCACUUACCUGGAGCUGCUCUCCUGUAUUAUCCUCCACAAUAAAAUUCUCCAGAAAAUAAGU\
) } def
/len { sequence length } bind def

/coor [
[70.53976440 146.78114319]
[76.57565308 133.04913330]
[84.55314636 120.34639740]
[94.30107880 108.94551849]
[79.65663910 112.19210815]
[65.01219940 115.43870544]
[57.24161530 120.38629150]
[50.01297379 118.59270477]
[35.30119324 121.51905823]
[20.84926796 135.50096130]
[2.80087280 128.68681335]
[-11.76925850 132.25210571]
[-26.33938980 135.81739807]
[-40.90951920 139.38267517]
[-55.47965240 142.94796753]
[-70.04978180 146.51325989]
[-84.61991119 150.07855225]
[-99.19004822 153.64382935]
[-99.20690918 168.71908569]
[-102.83170319 183.35206604]
[-109.85369873 196.69204712]
[-119.86463928 207.96345520]
[-132.28250122 216.51097107]
[-146.38533020 221.83767700]
[-161.35319519 223.63386536]
[-176.31590271 221.79512024]
[-190.40351868 216.42834473]
[-202.79702759 207.84555054]
[-212.77587891 196.54573059]
[-219.75990295 183.18583679]
[-223.34307861 168.54260254]
[-223.31707764 153.46736145]
[-219.68341064 138.83657837]
[-212.65333557 125.50086212]
[-202.63555908 114.23552704]
[-190.21252441 105.69553375]
[-176.10647583 100.37738037]
[-161.13751221 98.59026337]
[-146.17593384 100.43807983]
[-132.09156799 105.81340027]
[-119.70326233 114.40370941]
[-109.73126221 125.70957947]
[-102.75533295 139.07369995]
[-88.18520355 135.50842285]
[-73.61507416 131.94313049]
[-59.04494095 128.37783813]
[-44.47480774 124.81255341]
[-29.90467834 121.24726105]
[-15.33454704 117.68197632]
[-0.76441556 114.11668396]
[3.78154635 104.86228180]
[12.88184547 99.56224823]
[23.61459541 100.20058441]
[32.37483978 106.80728149]
[47.08662033 103.88092041]
[61.76560211 100.79426575]
[76.41004181 97.54766846]
[91.05448151 94.30107880]
[102.95478058 85.16965485]
[109.88101196 71.86449432]
[109.39015198 56.05090332]
[122.13002014 48.33436203]
[129.05625916 35.02920151]
[135.98248291 21.72403717]
[142.90870667 8.41887569]
[149.83494568 -4.88628721]
[156.76116943 -18.19145012]
[163.68739319 -31.49661255]
[170.61363220 -44.80177307]
[155.69073486 -43.28284454]
[145.04016113 -53.84529495]
[146.43504333 -68.78029633]
[158.85736084 -77.18779755]
[173.24089050 -72.93172455]
[179.08799744 -59.11689758]
[187.42155457 -71.58894348]
[187.54188538 -76.10317993]
[188.98840332 -79.93154144]
[191.36862183 -82.73293304]
[194.21836853 -84.33461761]
[197.06497192 -84.74090576]
[206.45382690 -96.43917847]
[215.84268188 -108.13744354]
[225.23153687 -119.83570862]
[223.26203918 -135.51679993]
[233.02345276 -147.94621277]
[248.72448730 -149.74981689]
[261.05001831 -139.85752869]
[262.68750000 -124.13830566]
[252.66546631 -111.91806030]
[236.92979431 -110.44686127]
[227.54093933 -98.74858856]
[218.15209961 -87.05032349]
[208.76324463 -75.35205841]
[199.89360046 -63.25538635]
[191.56004333 -50.78334427]
[183.91879272 -37.87554550]
[176.99255371 -24.57038307]
[170.06632996 -11.26522064]
[163.14010620 2.03994203]
[156.21386719 15.34510422]
[149.28764343 28.65026665]
[142.36141968 41.95542908]
[135.43518066 55.26059341]
[136.42144775 70.12250519]
[123.18617249 78.79072571]
[116.25994873 92.09588623]
[129.79522705 85.63090515]
[144.12986755 81.21293640]
[158.95616150 78.93680573]
[173.95591736 78.85137939]
[188.80718994 80.95847321]
[203.19120789 85.21286774]
[216.79925537 91.52326202]
[229.33926392 99.75419617]
[240.54206848 109.72901154]
[250.16723633 121.23362732]
[258.00817871 134.02111816]
[263.89660645 147.81700134]
[267.70611572 162.32519531]
[269.35494995 177.23429871]
[268.80770874 192.22430420]
[266.07617188 206.97351074]
[261.21896362 221.16531372]
[254.34030151 234.49513245]
[245.58784485 246.67686462]
[235.14944458 257.44903564]
[223.24914551 266.58047485]
[210.14237976 273.87515259]
[196.11042786 279.17651367]
[181.45448303 282.37078857]
[166.48912048 283.38940430]
[151.53550720 282.21051025]
[136.91464233 278.85940552]
[122.94029236 273.40798950]
[109.91242981 265.97329712]
[98.11064911 256.71490479]
[87.78826141 245.83149719]
[79.16682434 233.55668640]
[72.43138123 220.15393066]
[67.72649384 205.91090393]
[65.15313721 191.13328552]
[64.76654816 176.13827515]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 58]
[5 57]
[6 56]
[8 55]
[9 54]
[11 50]
[12 49]
[13 48]
[14 47]
[15 46]
[16 45]
[17 44]
[18 43]
[59 107]
[60 106]
[62 104]
[63 103]
[64 102]
[65 101]
[66 100]
[67 99]
[68 98]
[69 97]
[75 96]
[76 95]
[81 94]
[82 93]
[83 92]
[84 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
