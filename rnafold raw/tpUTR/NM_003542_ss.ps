%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 11:23:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUAAGAAUACGCGGUCUCCUGAGAACUUCAAAAAACAAAAACAAAAAAACCCAAAGGCCCUUUUCAGGGCCGCUCA\
) } def
/len { sequence length } bind def

/coor [
[95.13866425 230.44641113]
[83.44696045 240.09420776]
[69.15957642 245.15843201]
[54.00178528 245.02758789]
[39.80395889 239.71745300]
[28.28055573 229.86924744]
[20.82308578 216.67221069]
[18.33207130 201.71992493]
[21.10831451 186.81797791]
[28.81657219 173.76582336]
[40.52603531 164.13960266]
[54.82272720 159.10169983]
[69.98025513 159.26048279]
[75.23491669 145.21098328]
[80.48957825 131.16148376]
[85.74423981 117.11197662]
[90.99890137 103.06247711]
[89.87540436 97.63378143]
[92.03266907 92.00508118]
[97.26986694 88.13336182]
[103.62415314 74.54575348]
[109.97843933 60.95814896]
[116.33272552 47.37054443]
[122.68701935 33.78293610]
[129.04130554 20.19533157]
[135.39558411 6.60772562]
[141.74987793 -6.97988033]
[129.39961243 -15.55769253]
[118.67676544 -26.09944916]
[109.88986206 -38.30183792]
[103.29171753 -51.81377792]
[99.07216644 -66.24649811]
[97.35263062 -81.18474579]
[98.18256378 -96.19871521]
[101.53810883 -110.85642242]
[107.32270050 -124.73613739]
[115.36991119 -137.43850708]
[125.44821167 -148.59806824]
[137.26762390 -157.89373779]
[150.48808289 -165.05805969]
[164.72921753 -169.88490295]
[179.58125305 -172.23538208]
[194.61689758 -172.04187012]
[209.40353394 -169.30995178]
[223.51571655 -164.11820984]
[236.54742432 -156.61602783]
[248.12368774 -147.01925659]
[257.91146851 -135.60401917]
[265.62908936 -122.69874573]
[271.05456543 -108.67475891]
[274.03176880 -93.93554688]
[274.47506714 -78.90519714]
[272.37164307 -64.01615143]
[267.78204346 -49.69680405]
[260.83834839 -36.35914612]
[251.74032593 -24.38693428]
[240.74974060 -14.12462807]
[228.18281555 -5.86749744]
[214.40110779 0.14688492]
[199.80117798 3.74547243]
[184.80307007 4.82472706]
[169.83831787 3.35359597]
[155.33747864 -0.62559295]
[148.98320007 12.96201324]
[142.62890625 26.54961967]
[136.27462769 40.13722610]
[129.92033386 53.72483063]
[123.56604767 67.31243896]
[117.21176147 80.90003967]
[110.85747528 94.48764801]
[105.04840851 108.31713867]
[99.79373932 122.36663818]
[94.53907776 136.41613770]
[89.28441620 150.46563721]
[84.02975464 164.51515198]
[95.57128906 174.34208679]
[103.05306244 187.52537537]
[105.57163239 202.47303772]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 75]
[14 74]
[15 73]
[16 72]
[17 71]
[20 70]
[21 69]
[22 68]
[23 67]
[24 66]
[25 65]
[26 64]
[27 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
