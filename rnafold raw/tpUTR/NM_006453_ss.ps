%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 11:56:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGUCCGGCCUCUCUCCAGUCCAUCCUGAACCCCUGGAAAACCCAUAAAGGCCGCUCUCCUGGC\
) } def
/len { sequence length } bind def

/coor [
[95.75909424 168.59539795]
[95.04537201 153.61239624]
[94.33164215 138.62937927]
[93.61791229 123.64637756]
[78.68508911 112.06468201]
[76.44156647 93.30058289]
[88.22296906 78.52481079]
[85.38420105 63.79588318]
[82.54543304 49.06695175]
[79.70666504 34.33802414]
[76.86789703 19.60909271]
[74.02912140 4.88016176]
[53.74307632 -1.93640745]
[40.87426376 -18.89182281]
[39.77769470 -40.03465652]
[50.70434570 -58.03426743]
[43.20434570 -71.02465057]
[35.70434570 -84.01502991]
[28.20434380 -97.00540924]
[20.70434380 -109.99578857]
[5.63806200 -107.97698212]
[-9.05264854 -111.88229370]
[-21.12756157 -121.11619568]
[-28.74534035 -134.27058411]
[-30.74432755 -149.33950806]
[-26.81969452 -164.02507019]
[-17.56991768 -176.08782959]
[-4.40552187 -183.68829346]
[10.66601944 -185.66744995]
[25.34640503 -181.72351074]
[37.39698029 -172.45787048]
[44.98012543 -159.28349304]
[46.93946075 -144.20935059]
[42.97620392 -129.53416443]
[33.69472504 -117.49578857]
[41.19472504 -104.50540924]
[48.69472504 -91.51502991]
[56.19472504 -78.52465057]
[63.69472504 -65.53427124]
[73.42517853 -67.30506897]
[83.28772736 -66.33741760]
[92.52498627 -62.69479752]
[100.42462921 -56.64654160]
[106.37431335 -48.64791489]
[109.90913391 -39.30588913]
[110.74796295 -29.33306122]
[108.81572723 -19.49331093]
[104.25005341 -10.54329109]
[97.39146423 -3.17424250]
[88.75805664 2.04139304]
[91.59682465 16.77032280]
[94.43559265 31.49925423]
[97.27436066 46.22818375]
[100.11312866 60.95711517]
[102.95189667 75.68604279]
[113.10283661 79.30706024]
[120.71671295 86.93477631]
[124.31927490 97.09227753]
[123.21298218 107.81278229]
[117.61203003 117.02053070]
[108.60092163 122.93264771]
[109.31465149 137.91564941]
[110.02838135 152.89866638]
[110.74210358 167.88168335]
[113.84677887 187.01309204]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[3 62]
[4 61]
[7 55]
[8 54]
[9 53]
[10 52]
[11 51]
[12 50]
[16 39]
[17 38]
[18 37]
[19 36]
[20 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
