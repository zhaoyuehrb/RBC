%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 12:16:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCUGCCCUCCCACCUCCGCUGGGAGGAACCUGAACCUGGGAACCAUGAAGCUGGAAGCACUGCUGUGUCCGCUUUCAUGAACACAGCCUGGGACCAGGGCAUAUUAAAGGCUUUUGGCAGCAAAGUGUCAGUGUUGGCA\
) } def
/len { sequence length } bind def

/coor [
[150.92857361 303.99981689]
[150.36451721 287.29843140]
[159.93632507 273.39883423]
[154.73678589 259.32882690]
[149.53724670 245.25883484]
[144.33770752 231.18882751]
[139.13816833 217.11883545]
[133.93862915 203.04884338]
[116.78747559 199.11172485]
[105.28640747 185.58728027]
[104.13575745 167.71459961]
[113.97782898 152.56500244]
[108.16101837 138.73876953]
[89.19071960 138.08482361]
[72.70532227 128.67568970]
[60.49251938 137.38473511]
[48.27971649 146.09376526]
[36.06691360 154.80281067]
[23.85411072 163.51185608]
[17.54770470 178.64993286]
[1.25198460 180.48884583]
[-8.26940727 167.13687134]
[-1.22168100 152.32937622]
[15.14506721 151.29905701]
[27.35787010 142.59001160]
[39.57067490 133.88096619]
[51.78347778 125.17192841]
[63.99628067 116.46288300]
[60.58212662 96.32228851]
[67.66317749 77.16090393]
[83.35406494 64.08054352]
[79.73955536 49.52254868]
[76.12503815 34.96455002]
[72.51052094 20.40655327]
[59.25427246 12.22672272]
[55.79602432 -2.58864665]
[63.67593765 -15.17604351]
[60.06142044 -29.73404121]
[56.44690704 -44.29203796]
[52.83238983 -58.85003662]
[49.21787643 -73.40803528]
[45.60335922 -87.96602631]
[26.76389694 -94.36780548]
[15.58815479 -110.65808105]
[16.38510895 -130.25495911]
[28.66736984 -145.36331177]
[23.78036118 -159.54489136]
[18.89335251 -173.72647095]
[14.00634384 -187.90805054]
[9.11933517 -202.08961487]
[4.23232651 -216.27119446]
[-0.81125581 -230.39785767]
[-6.01079464 -244.46784973]
[-11.96690178 -251.49983215]
[-11.16595840 -258.90701294]
[-16.05296707 -273.08859253]
[-20.87709236 -277.79510498]
[-22.32131004 -283.39480591]
[-20.82734108 -288.00689697]
[-25.08226776 -302.39077759]
[-29.33719444 -316.77462769]
[-33.59212112 -331.15850830]
[-45.84960938 -342.05282593]
[-42.27902603 -358.05853271]
[-26.55348206 -362.71035767]
[-14.85007095 -351.22286987]
[-19.20825577 -335.41342163]
[-14.95332909 -321.02957153]
[-10.69840240 -306.64569092]
[-6.44347572 -292.26184082]
[-1.87138903 -277.97561646]
[3.01561952 -263.79403687]
[8.05920219 -249.66738892]
[13.25874043 -235.59738159]
[18.56973648 -230.37231445]
[18.41390419 -221.15820312]
[23.30091286 -206.97662354]
[28.18792152 -192.79505920]
[33.07492828 -178.61347961]
[37.96193695 -164.43190002]
[42.84894562 -150.25032043]
[53.33524323 -149.45690918]
[62.97863007 -145.16650391]
[70.64453125 -137.85557556]
[75.42153168 -128.35754395]
[76.72971344 -117.76789856]
[74.39089203 -107.31783295]
[68.65243530 -98.23104858]
[60.16135788 -91.58054352]
[63.77587128 -77.02254486]
[67.39038849 -62.46455002]
[71.00490570 -47.90655518]
[74.61941528 -33.34855652]
[78.23393250 -18.79055977]
[91.08630371 -11.35065269]
[94.95932007 3.36173630]
[87.06851959 16.79203796]
[90.68303680 31.35003471]
[94.29754639 45.90803146]
[97.91206360 60.46603012]
[107.24730682 61.07994461]
[116.17783356 63.86730194]
[124.20493317 68.67244720]
[130.88032532 75.22704315]
[135.83125305 83.16505432]
[138.78121948 92.04319000]
[139.56550598 101.36566925]
[138.14028931 110.61188507]
[134.58518982 119.26548767]
[129.09870911 126.84323883]
[121.98725128 132.92195129]
[127.80406189 146.74818420]
[140.33369446 147.98811340]
[151.06863403 154.42788696]
[157.98019409 164.77825928]
[159.79324341 177.01809692]
[156.22106934 188.78892517]
[148.00862122 197.84930420]
[153.20816040 211.91929626]
[158.40769958 225.98928833]
[163.60723877 240.05929565]
[168.80677795 254.12928772]
[174.00631714 268.19927979]
[187.55784607 270.95245361]
[197.88391113 279.98614502]
[202.34283447 292.84643555]
[199.86489868 306.11996460]
[191.20668030 316.33975220]
[196.09368896 330.52133179]
[200.98069763 344.70291138]
[205.86770630 358.88449097]
[210.75471497 373.06604004]
[223.48210144 383.40750122]
[220.62298584 399.55551147]
[205.11860657 404.89834595]
[192.91851807 393.93978882]
[196.57313538 377.95306396]
[191.68612671 363.77148438]
[186.79911804 349.58990479]
[181.91210938 335.40832520]
[177.02510071 321.22674561]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 123]
[4 122]
[5 121]
[6 120]
[7 119]
[8 118]
[12 112]
[13 111]
[15 28]
[16 27]
[17 26]
[18 25]
[19 24]
[31 100]
[32 99]
[33 98]
[34 97]
[37 94]
[38 93]
[39 92]
[40 91]
[41 90]
[42 89]
[46 81]
[47 80]
[48 79]
[49 78]
[50 77]
[51 76]
[52 74]
[53 73]
[55 72]
[56 71]
[59 70]
[60 69]
[61 68]
[62 67]
[128 141]
[129 140]
[130 139]
[131 138]
[132 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
