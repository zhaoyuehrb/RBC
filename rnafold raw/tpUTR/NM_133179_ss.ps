%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 18:59:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAGACAAGCUGAAACAACACAAAACUGUUUUUAUCUAAGAUAUUUGACUUAAAAAUAUCGAAAUAAACUUUUGCAGCUUUCUCCAA\
) } def
/len { sequence length } bind def

/coor [
[82.96766663 287.12945557]
[89.01400757 271.29031372]
[89.01400757 256.29031372]
[81.27671051 243.56304932]
[89.01400757 229.76287842]
[89.01400757 214.76287842]
[89.01400757 199.76287842]
[85.79542542 192.92584229]
[89.28493500 184.24166870]
[89.80842590 169.25080872]
[90.33191681 154.25994873]
[90.85540771 139.26908875]
[91.37889862 124.27822113]
[91.90239716 109.28736115]
[80.39772797 118.91246033]
[65.45337677 120.20337677]
[52.46857834 112.69371796]
[46.13459015 99.09663391]
[48.73981857 84.32460785]
[59.34301376 73.71460724]
[74.11336517 71.09989929]
[87.71450806 77.42516327]
[95.23213196 90.40348053]
[99.86738586 76.13763428]
[104.50263977 61.87178421]
[109.13789368 47.60593796]
[113.77314758 33.34008789]
[112.71875000 26.45089722]
[115.09399414 20.98239326]
[119.26154327 18.26085663]
[124.88064575 4.35309792]
[130.49974060 -9.55465984]
[136.11883545 -23.46241760]
[128.06735229 -36.59556961]
[129.27876282 -51.77403641]
[139.07958984 -63.19365311]
[153.55220032 -66.61150360]
[159.17129517 -80.51926422]
[158.35531616 -86.12823486]
[159.77658081 -90.93170929]
[162.69560242 -94.17453003]
[166.17411804 -95.53684998]
[173.21618652 -108.78106689]
[180.25827026 -122.02528381]
[187.30033875 -135.26950073]
[194.34240723 -148.51370239]
[201.38449097 -161.75791931]
[208.42655945 -175.00213623]
[202.40126038 -189.43229675]
[207.11045837 -204.34396362]
[220.33062744 -212.69627380]
[235.81959534 -210.54554749]
[246.26396179 -198.90727234]
[246.73220825 -183.27670288]
[237.00323486 -171.03410339]
[221.67077637 -167.96006775]
[214.62869263 -154.71585083]
[207.58662415 -141.47163391]
[200.54455566 -128.22741699]
[193.50248718 -114.98320770]
[186.46040344 -101.73899078]
[179.41833496 -88.49478149]
[173.07905579 -74.90016174]
[167.45996094 -60.99240494]
[175.49644470 -48.48029327]
[174.61384583 -33.45747757]
[164.94140625 -21.69748306]
[150.02659607 -17.84331894]
[144.40750122 -3.93556094]
[138.78840637 9.97219658]
[133.16929626 23.87995529]
[128.03900146 37.97534561]
[123.40374756 52.24119186]
[118.76848602 66.50704193]
[114.13323212 80.77288818]
[109.49797821 95.03873444]
[106.89325714 109.81085205]
[106.36976624 124.80171204]
[105.84627533 139.79257202]
[105.32277679 154.78343201]
[104.79928589 169.77430725]
[104.27579498 184.76516724]
[104.01400757 199.76287842]
[104.01400757 214.76287842]
[104.01400757 229.76287842]
[111.75131226 243.56304932]
[104.01400757 256.29031372]
[104.01400757 271.29031372]
[110.06034851 287.12945557]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 88]
[3 87]
[5 85]
[6 84]
[7 83]
[9 82]
[10 81]
[11 80]
[12 79]
[13 78]
[14 77]
[23 76]
[24 75]
[25 74]
[26 73]
[27 72]
[30 71]
[31 70]
[32 69]
[33 68]
[37 64]
[38 63]
[42 62]
[43 61]
[44 60]
[45 59]
[46 58]
[47 57]
[48 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
