%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 20:31:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCGUGGAUGCCGUCACCACCAGCACACGGAACUACCUCCCACCCCCUUUUUGUACAAAACACAAGGAAAAACAUUUUUUGCUUGA\
) } def
/len { sequence length } bind def

/coor [
[76.47817993 167.36434937]
[52.83232880 153.53916931]
[36.13727188 131.82426453]
[22.08302498 137.06622314]
[8.02877903 142.30819702]
[-6.02546692 147.55015564]
[-20.07971191 152.79211426]
[-24.82865715 157.91276550]
[-30.60059929 159.45063782]
[-35.32807541 157.86726379]
[-49.72047043 162.09324646]
[-64.11286163 166.31922913]
[-75.17418671 177.63107300]
[-89.56575775 173.79287720]
[-95.66917419 188.19018555]
[-109.62248230 195.24987793]
[-124.83736420 191.63858032]
[-134.12980652 179.06143188]
[-133.11221313 163.45700073]
[-122.26506042 152.19319153]
[-106.71003723 150.58845520]
[-93.79174805 159.40048218]
[-83.75987244 148.39091492]
[-68.33885193 151.92683411]
[-53.94645691 147.70085144]
[-39.55406570 143.47486877]
[-25.32167435 138.73786926]
[-11.26742935 133.49591064]
[2.78681660 128.25393677]
[16.84106255 123.01197815]
[30.89530754 117.77001953]
[29.27335930 109.43261719]
[28.65361023 100.96154785]
[29.04484367 92.47686005]
[30.44151497 84.09877014]
[32.82383347 75.94600677]
[36.15804291 68.13408661]
[40.39689636 60.77370453]
[45.48033142 53.96916580]
[51.33631134 47.81688690]
[57.88185501 42.40404510]
[65.02422333 37.80734253]
[72.66219330 34.09191132]
[80.68754578 31.31040192]
[88.98654938 29.50222778]
[97.44161987 28.69301033]
[105.93294525 28.89421844]
[114.34019470 30.10299873]
[122.54425049 32.30222321]
[130.42884827 35.46073151]
[137.88226318 39.53376007]
[144.79888916 44.46360016]
[151.08071899 50.18039703]
[156.63871765 56.60313797]
[161.39414978 63.64081573]
[165.27961731 71.19370270]
[168.24008179 79.15478516]
[170.23358154 87.41123199]
[171.23185730 95.84606934]
[171.22077942 104.33977509]
[170.20048523 112.77197266]
[168.18545532 121.02320099]
[165.20423889 128.97653198]
[161.29907227 136.51925659]
[173.30718994 145.50840759]
[185.31530762 154.49757385]
[197.32342529 163.48674011]
[213.00782776 165.56285095]
[218.55973816 179.38404846]
[230.56785583 188.37321472]
[242.57597351 197.36238098]
[254.58409119 206.35154724]
[266.59222412 215.34071350]
[282.89553833 219.99240112]
[282.93884277 236.94628906]
[266.65948486 241.68121338]
[257.60305786 227.34883118]
[245.59494019 218.35966492]
[233.58680725 209.37049866]
[221.57868958 200.38133240]
[209.57057190 191.39216614]
[194.74508667 189.95903015]
[188.33425903 175.49485779]
[176.32614136 166.50569153]
[164.31802368 157.51654053]
[152.30990601 148.52737427]
[130.17332458 164.65911865]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 31]
[4 30]
[5 29]
[6 28]
[7 27]
[10 26]
[11 25]
[12 24]
[14 22]
[64 86]
[65 85]
[66 84]
[67 83]
[69 81]
[70 80]
[71 79]
[72 78]
[73 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
