%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 10:22:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAAAAAAUGUGGUGUGUGACAUGUAAAAAUGCUCAACCUGGUUUCCAAAGUCUUUCAACGACACCCUGAUCUUCACUAAAAAUUGUAAAGGUUUCAACACGUUGCUUUAAUAAAUCACUUGCCCUGC\
) } def
/len { sequence length } bind def

/coor [
[56.31354141 331.00241089]
[43.22001648 338.64016724]
[28.30330658 341.33602905]
[13.36467743 338.76440430]
[0.20804055 331.23590088]
[-9.57787514 319.65954590]
[-14.81137371 305.43328857]
[-14.86048508 290.27502441]
[-9.71927738 276.01516724]
[-0.00857744 264.37564087]
[13.09900093 256.76202393]
[28.02065277 254.09367371]
[30.56539536 239.31111145]
[33.11013794 224.52853394]
[24.33448029 212.54841614]
[26.70462799 197.52053833]
[39.32998657 188.39704895]
[41.87473297 173.61448669]
[44.41947556 158.83190918]
[46.96421814 144.04934692]
[35.79263306 134.03956604]
[21.37706947 138.18583679]
[6.96150541 142.33209229]
[-0.46907339 156.28063965]
[-15.61055374 160.80957031]
[-29.47976303 153.23193359]
[-33.84834671 138.04341125]
[-26.12450027 124.25509644]
[-10.89064598 120.04734039]
[2.81524110 127.91653442]
[17.23080635 123.77026367]
[31.64636993 119.62400055]
[32.73838043 112.20392609]
[17.89822769 110.01991272]
[3.10947633 112.52845764]
[-3.84610629 99.23861694]
[6.64402390 88.51681519]
[20.08224487 95.17975616]
[34.92239761 97.36377716]
[36.01440430 89.94370270]
[23.40458679 81.82012939]
[10.79476833 73.69654846]
[-5.79499674 70.20140839]
[-7.02894878 53.29242325]
[8.87763309 47.42582321]
[18.91834450 61.08673096]
[31.52816200 69.21030426]
[44.13798141 77.33388519]
[50.96408081 67.22282410]
[59.52604675 58.90658951]
[69.38692474 52.66089630]
[80.07154846 48.66046143]
[91.08901215 46.97526169]
[101.95497131 47.57155228]
[112.21288300 50.31758118]
[121.45318604 54.99345779]
[129.32960510 61.30464172]
[140.12815857 50.89352798]
[150.92671204 40.48241806]
[161.72526550 30.07130432]
[172.52381897 19.66019058]
[166.91523743 6.51051521]
[166.15074158 -7.73483562]
[170.30230713 -21.35192299]
[178.84820557 -32.69987869]
[190.73851013 -40.41861343]
[204.52401733 -43.59183502]
[218.53291321 -41.85577011]
[231.07345581 -35.44074249]
[242.12232971 -45.58581161]
[253.17120361 -55.73088074]
[264.22006226 -65.87595367]
[275.26895142 -76.02101898]
[286.31781006 -86.16609192]
[291.24987793 -101.19889832]
[305.85769653 -104.10761261]
[316.90658569 -114.25267792]
[315.00064087 -129.65225220]
[322.53979492 -143.21473694]
[336.62506104 -149.72506714]
[351.84039307 -146.67990112]
[362.33520508 -135.25015259]
[364.07397461 -119.83081055]
[356.38812256 -106.35090637]
[342.23306274 -99.99375916]
[327.05163574 -103.20381165]
[316.00277710 -93.05873871]
[311.86099243 -78.75157166]
[296.46289062 -75.11721802]
[285.41403198 -64.97215271]
[274.36514282 -54.82707977]
[263.31628418 -44.68201065]
[252.26741028 -34.53694153]
[241.21853638 -24.39187050]
[246.87586975 -9.64013672]
[246.45915222 6.19211388]
[240.00242615 20.69598007]
[228.46092224 31.65344048]
[213.56991577 37.37653351]
[197.58381653 36.96734238]
[182.93492126 30.45874405]
[172.13636780 40.86985779]
[161.33782959 51.28096771]
[150.53927612 61.69208145]
[139.74072266 72.10319519]
[146.59370422 82.93306732]
[150.48153687 95.43503571]
[151.00132751 108.79404449]
[147.97482300 122.09993744]
[141.47019958 134.40940857]
[131.80668640 144.81282043]
[119.54117584 152.50086975]
[105.43704224 156.82653809]
[90.41709137 157.35745239]
[75.50319672 153.91458130]
[61.74678421 146.59408569]
[59.20204163 161.37666321]
[56.65729904 176.15922546]
[54.11255646 190.94178772]
[62.96045685 203.76179504]
[60.16914368 218.71716309]
[47.89270401 227.07328796]
[45.34796143 241.85585022]
[42.80321884 256.63842773]
[55.97370911 264.14270020]
[65.78094482 275.70095825]
[71.04064941 289.91757202]
[71.11769104 305.07571411]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 124]
[13 123]
[14 122]
[17 119]
[18 118]
[19 117]
[20 116]
[21 32]
[22 31]
[23 30]
[40 48]
[41 47]
[42 46]
[57 105]
[58 104]
[59 103]
[60 102]
[61 101]
[69 94]
[70 93]
[71 92]
[72 91]
[73 90]
[74 89]
[76 87]
[77 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
