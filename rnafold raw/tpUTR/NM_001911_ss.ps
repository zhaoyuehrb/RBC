%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 05:14:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGACUCUUCUUCUCGGGGACACAGGCCAGCUCCACAGUGUUGCCAGAGCCUUAAUAAACGUCCACAGAGUAUAAAUAACCAAUUCCUCAUUUGUUCAUUAAACGUCAUUCAGUACUUA\
) } def
/len { sequence length } bind def

/coor [
[100.69705963 185.39836121]
[112.55865479 175.84732056]
[108.67637634 161.35844421]
[104.79409027 146.86955261]
[100.91180420 132.38066101]
[95.18941498 132.03431702]
[89.61769104 130.68463135]
[84.37114716 128.37388611]
[79.61411285 125.17447662]
[75.49556732 121.18658447]
[72.14450836 116.53512573]
[69.66589355 111.36577606]
[68.13735962 105.84043884]
[53.15791321 105.05540466]
[38.17847061 104.27036285]
[23.19003677 103.68146515]
[8.19517612 103.28881073]
[-5.80280638 110.66221619]
[-18.32317734 102.59440613]
[-33.31803894 102.20175171]
[-48.31289673 101.80909729]
[-63.30775833 101.41644287]
[-78.30261993 101.02378845]
[-95.43175507 111.49540710]
[-111.57189941 100.98005676]
[-126.56675720 101.37271118]
[-137.26254272 113.00782013]
[-153.05615234 113.58854675]
[-164.57752991 102.77034760]
[-164.99124146 86.97147369]
[-154.05183411 75.56511688]
[-138.24946594 75.31846619]
[-126.95941162 86.37785339]
[-111.96455383 85.98519897]
[-105.51595306 77.86561584]
[-95.43175507 74.63211823]
[-85.03869629 77.60926819]
[-77.90996552 86.02893066]
[-62.91510391 86.42158508]
[-47.92024231 86.81423950]
[-32.92538452 87.20689392]
[-17.93052292 87.59954834]
[-5.00507402 80.19805908]
[8.58783054 88.29395294]
[23.58268929 88.68660736]
[30.43587875 85.67925262]
[38.96351242 89.29092407]
[53.94295502 90.07595825]
[68.92239380 90.86100006]
[80.71450043 73.97293091]
[100.30397034 67.60792542]
[119.77053833 74.33943939]
[131.42773438 64.89962769]
[143.08491516 55.45982361]
[154.74211121 46.02001953]
[166.39929199 36.58021164]
[172.25480652 21.88247108]
[187.01499939 19.88595200]
[198.67218018 10.44614506]
[210.32937622 1.00633943]
[221.98655701 -8.43346596]
[217.74003601 -23.00201988]
[219.39028931 -38.04594421]
[226.65489197 -51.27618027]
[238.39955139 -60.69163895]
[252.81506348 -64.88184357]
[267.69604492 -63.23818588]
[280.77828979 -56.04207230]
[292.43548584 -65.48188019]
[304.09268188 -74.92168427]
[315.74987793 -84.36148834]
[312.68627930 -99.35725403]
[316.95361328 -114.05583954]
[327.57128906 -125.07961273]
[342.09942627 -129.89538574]
[357.19958496 -127.39655304]
[369.40182495 -118.15729523]
[375.90219116 -104.30075073]
[375.20693970 -89.01103973]
[367.47583008 -75.80163574]
[354.48541260 -67.70795441]
[339.22079468 -66.58986664]
[325.18966675 -72.70429993]
[313.53247070 -63.26449585]
[301.87527466 -53.82468796]
[290.21810913 -44.38488388]
[294.53701782 -30.09235764]
[293.05081177 -15.19481850]
[285.95501709 -1.96551228]
[274.30346680 7.56490278]
[259.85195923 11.92003727]
[244.79365540 10.40642166]
[231.42636108 3.22372293]
[219.76918030 12.66352844]
[208.11198425 22.10333443]
[196.45480347 31.54314041]
[191.43309021 45.56568527]
[175.83909607 48.23740387]
[164.18191528 57.67720795]
[152.52471924 67.11701202]
[140.86753845 76.55681610]
[129.21034241 85.99662781]
[132.33436584 101.95632935]
[127.30895233 117.42296600]
[115.40068817 128.49838257]
[119.28297424 142.98725891]
[123.16526031 157.47615051]
[127.04754639 171.96504211]
[142.09552002 174.30567932]
[154.88696289 182.56997681]
[163.20571899 195.32608032]
[165.61048889 210.36393738]
[161.68463135 225.07812500]
[152.10833740 236.91934204]
[138.54074097 243.83601379]
[123.33252716 244.62979126]
[109.11860657 239.16314697]
[98.36161804 228.38320923]
[92.92528534 214.15766907]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 108]
[3 107]
[4 106]
[5 105]
[13 49]
[14 48]
[15 47]
[16 45]
[17 44]
[19 42]
[20 41]
[21 40]
[22 39]
[23 38]
[25 34]
[26 33]
[52 102]
[53 101]
[54 100]
[55 99]
[56 98]
[58 96]
[59 95]
[60 94]
[61 93]
[68 86]
[69 85]
[70 84]
[71 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
