%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 07:55:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCAGCCAGGCCCCCAAAUACGGUCAGCCCAGCAGAGGCCGGGGCCCAGCUCCAGAACCACCCGCCCCCACCAUGCGUCCUGCUCUCAGACUCAGAAUUAAACCCCGGUGUUGGCACUGUC\
) } def
/len { sequence length } bind def

/coor [
[38.16488266 139.49539185]
[31.18121147 139.61962891]
[24.57083321 137.53038025]
[19.01125145 133.47656250]
[15.06115723 127.90655518]
[0.16012579 129.62680054]
[-14.74090576 131.34706116]
[-24.55114937 143.44651794]
[-39.68741989 144.97882080]
[-51.16194534 135.55168152]
[-66.06298065 137.27194214]
[-80.96401215 138.99218750]
[-95.86504364 140.71244812]
[-110.76607513 142.43269348]
[-125.66710663 144.15293884]
[-114.41599274 154.07325745]
[-111.96203613 168.87117004]
[-119.40874481 181.89216614]
[-133.40739441 187.28082275]
[-147.66291809 182.61390686]
[-155.76470947 169.99006653]
[-154.06945801 155.08618164]
[-143.33961487 144.60443115]
[-158.30905151 143.64727783]
[-173.27847290 142.69012451]
[-188.24790955 141.73297119]
[-205.76683044 151.54823303]
[-221.49296570 140.41595459]
[-236.49174500 140.22439575]
[-252.40679932 146.06797791]
[-262.42773438 132.39254761]
[-252.06080627 118.97750092]
[-236.30018616 125.22562408]
[-221.30140686 125.41717529]
[-214.54797363 117.56053162]
[-204.35514832 114.71957397]
[-194.09130859 118.08779144]
[-187.29075623 126.76353455]
[-172.32131958 127.72068787]
[-157.35189819 128.67784119]
[-142.38246155 129.63499451]
[-127.38735199 129.25190735]
[-112.48632050 127.53166199]
[-97.58528900 125.81140900]
[-82.68425751 124.09115601]
[-67.78322601 122.37091064]
[-52.88219833 120.65065765]
[-43.85750961 108.85698700]
[-28.77025032 106.90013885]
[-16.46115685 116.44602203]
[-1.56012559 114.72577667]
[13.34090614 113.00552368]
[29.88515282 96.80285645]
[52.14855194 105.37177277]
[66.61235046 101.39704895]
[81.07615662 97.42232513]
[88.33168793 84.88025665]
[102.30325317 81.04080200]
[114.94911957 88.11386871]
[129.41291809 84.13915253]
[143.87672424 80.16442871]
[158.28858948 76.00531769]
[172.58953857 71.47951508]
[186.83151245 66.77144623]
[201.07350159 62.06337357]
[200.35989380 45.88063812]
[204.18673706 30.15495682]
[212.24255371 16.13362503]
[223.88075256 4.92654133]
[238.17152405 -2.58165693]
[253.97612000 -5.80141640]
[270.03762817 -4.48455429]
[285.08084106 1.25662708]
[297.91363525 10.95887566]
[307.52133179 23.84535789]
[321.50433350 18.41622734]
[331.56842041 6.20864773]
[346.23324585 8.81482887]
[360.21624756 3.38569808]
[374.19924927 -2.04343271]
[381.16424561 -8.13610649]
[388.60934448 -7.42764473]
[402.72644043 -12.49789810]
[412.90219116 -25.35813522]
[429.08587646 -22.70839310]
[434.62905884 -7.27449942]
[423.82940674 5.06648016]
[407.79669189 1.61920285]
[393.67959595 6.68945599]
[379.62838745 11.93957615]
[365.64538574 17.36870766]
[351.66235352 22.79783821]
[342.59844971 34.61708832]
[326.93347168 32.39923477]
[312.95046997 37.82836533]
[314.60290527 51.61933899]
[312.87124634 65.41063690]
[307.85336304 78.38356018]
[299.84243774 89.76682281]
[289.30978394 98.88240051]
[276.87698364 105.18591309]
[263.27938843 108.29913330]
[249.32250977 108.03269958]
[235.83438110 104.39758301]
[223.61636353 97.60477448]
[213.39556885 88.05300903]
[205.78157043 76.30535889]
[191.53958130 81.01342773]
[177.29760742 85.72149658]
[171.87135315 90.86803436]
[162.63140869 90.36289978]
[157.07548523 95.36917877]
[147.85145569 94.62822723]
[133.38764954 98.60295105]
[118.92384338 102.57767487]
[111.66831207 115.11974335]
[97.69674683 118.95919800]
[85.05088043 111.88613129]
[70.58707428 115.86084747]
[56.12327576 119.83557129]
[54.29206467 126.79174805]
[50.37079239 132.75987244]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 52]
[6 51]
[7 50]
[10 47]
[11 46]
[12 45]
[13 44]
[14 43]
[15 42]
[23 41]
[24 40]
[25 39]
[26 38]
[28 34]
[29 33]
[54 120]
[55 119]
[56 118]
[59 115]
[60 114]
[61 113]
[62 111]
[63 109]
[64 108]
[65 107]
[75 95]
[76 94]
[78 92]
[79 91]
[80 90]
[82 89]
[83 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
