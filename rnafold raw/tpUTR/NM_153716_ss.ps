%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 17:14:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGCCAUUAAAAGAGGACCAGAUUAUGAAUGACAACAGAGACUAACAUUUACAUUGACAAAAAACCCUAAAAAUUUCUGCAAUUAUCUUAUUGAACAAUAAAAUUGCAUGUUUACUUCU\
) } def
/len { sequence length } bind def

/coor [
[52.42552948 179.05262756]
[43.67188644 191.23348999]
[34.91823959 203.41436768]
[26.16459465 215.59524536]
[17.73012352 227.99926758]
[9.62051105 240.61807251]
[16.12266350 254.60826111]
[14.00631332 269.88977051]
[3.94678164 281.58633423]
[-10.84597206 285.96560669]
[-25.65163422 281.63015747]
[-35.74576950 269.96347046]
[-37.90737915 254.68829346]
[-31.44670105 240.67889404]
[-18.42531204 232.40562439]
[-2.99829197 232.50845337]
[5.11132050 219.88964844]
[4.95548487 215.00549316]
[7.95033693 209.99606323]
[13.98372078 206.84159851]
[22.73736572 194.66072083]
[31.49101067 182.47985840]
[40.24465561 170.29898071]
[21.34181213 148.22381592]
[10.24348164 121.36386871]
[8.05084801 92.38417816]
[14.98146534 64.16013336]
[1.67880154 57.22910309]
[-11.62386227 50.29807663]
[-24.92652702 43.36705017]
[-38.22919083 36.43602371]
[-51.53185272 29.50499725]
[-63.15745544 39.29856110]
[-77.64745331 43.89294052]
[-92.79223633 42.58753204]
[-106.28232574 35.58140182]
[-116.06058502 23.94292831]
[-120.63590240 9.44689655]
[-119.31056976 -5.69615316]
[-112.28669739 -19.17701530]
[-100.63537598 -28.93995667]
[-86.13333893 -33.49620056]
[-70.99204254 -32.15095139]
[-57.52043152 -25.10935211]
[-47.77282715 -13.44519424]
[-43.23566437 1.06282413]
[-44.60082626 16.20233345]
[-31.29816437 23.13335991]
[-17.99550056 30.06438828]
[-4.69283581 36.99541473]
[8.60982800 43.92644119]
[21.91249275 50.85746765]
[27.14000702 43.39550400]
[33.07798767 36.48550034]
[39.66853333 30.19482994]
[46.84737778 24.58484077]
[54.54452133 19.71023178]
[62.68490601 15.61853886]
[71.18915558 12.34965801]
[79.97433472 9.93546677]
[88.95479584 8.39950466]
[98.04295349 7.75674915]
[107.15019989 8.01346779]
[116.18772125 9.16715908]
[125.06739807 11.20657063]
[133.70263672 14.11181736]
[142.00923157 17.85457039]
[149.90618896 22.39833069]
[157.31651306 27.69879532]
[164.16793823 33.70427704]
[170.39366150 40.35621643]
[175.93295288 47.58974838]
[180.73181152 55.33433914]
[184.74345398 63.51447296]
[187.92875671 72.05037689]
[190.25665283 80.85882568]
[191.70443726 89.85391235]
[192.25801086 98.94794464]
[191.91195679 108.05223083]
[206.69886780 110.57167816]
[221.48576355 113.09113312]
[236.27265930 115.61058044]
[251.05955505 118.13002777]
[265.84646606 120.64947510]
[280.63336182 123.16893005]
[285.75234985 121.25605774]
[290.58630371 121.55297089]
[294.31549072 123.55619049]
[296.45391846 126.50308228]
[310.99993896 130.16548157]
[325.54595947 133.82789612]
[340.09197998 137.49031067]
[354.63800049 141.15270996]
[370.25573730 136.15086365]
[382.21276855 147.37409973]
[378.20874023 163.27693176]
[362.36264038 167.49987793]
[350.97558594 155.69873047]
[336.42956543 152.03633118]
[321.88354492 148.37391663]
[307.33752441 144.71150208]
[292.79150391 141.04910278]
[278.11389160 137.95582581]
[263.32699585 135.43637085]
[248.54011536 132.91693115]
[233.75320435 130.39747620]
[218.96630859 127.87802887]
[204.17941284 125.35858154]
[189.39251709 122.83913422]
[185.21594238 135.36791992]
[179.29341125 147.17205811]
[171.74623108 158.00970459]
[162.72906494 167.65879822]
[152.42665100 175.92163086]
[141.05006409 182.62892151]
[128.83242798 187.64324951]
[116.02403259 190.86186218]
[102.88732910 192.21882629]
[89.69146729 191.68632507]
[76.70681763 189.27528381]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[4 20]
[5 17]
[6 16]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[79 109]
[80 108]
[81 107]
[82 106]
[83 105]
[84 104]
[85 103]
[89 102]
[90 101]
[91 100]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
