%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 01:26:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGACUCUUUUGUCUCACGUGGUGGAUCCGGUGGAAAUCCAAGCUCUGGGCUGGUAAUUUUUAUGAGCAUUUUCAGCUUUUGCAAAUACAAAAUAUAAUUCUUUACAAAAAUAAAUUUUUAUUCUAAUCUAAA\
) } def
/len { sequence length } bind def

/coor [
[131.47688293 262.09304810]
[129.14826965 247.27314758]
[123.32689667 261.09747314]
[117.50552368 274.92178345]
[111.68414307 288.74609375]
[117.87786102 303.28613281]
[111.89868164 317.91574097]
[97.29395294 323.95538330]
[82.72839355 317.82186890]
[76.84349060 303.15408325]
[83.13066101 288.65420532]
[97.85983276 282.92471313]
[103.68121338 269.10040283]
[109.50258636 255.27607727]
[115.32396698 241.45176697]
[114.24505615 238.41471863]
[114.02520752 234.98840332]
[114.78961182 231.42497253]
[116.58789062 228.01362610]
[113.44628143 213.34629822]
[110.30467987 198.67897034]
[107.16307831 184.01165771]
[96.93177795 173.18716431]
[101.60716248 158.07255554]
[98.46556091 143.40522766]
[95.32395172 128.73791504]
[92.18235016 114.07058716]
[81.70080566 103.34038544]
[67.11116791 99.85580444]
[52.52152252 96.37122345]
[37.93187714 92.88664246]
[23.19493866 90.08974457]
[8.34310150 87.98667145]
[-6.50873661 85.88359833]
[-21.50970078 92.50953674]
[-34.58692932 82.61417389]
[-32.28768539 66.37701416]
[-16.97724152 60.50144577]
[-4.40566349 71.03175354]
[10.44617462 73.13482666]
[25.29801178 75.23789978]
[27.65931511 73.56722260]
[30.85493851 72.77682495]
[34.53559113 73.20111847]
[38.23346329 75.03527832]
[41.41645813 78.29699707]
[56.00609970 81.78157806]
[70.59574127 85.26615906]
[85.18538666 88.75074005]
[95.02037811 77.42497253]
[89.52467346 63.46799088]
[84.02897644 49.51101303]
[71.77357483 39.50522232]
[74.30984497 24.82814407]
[68.81414795 10.87116528]
[63.31844711 -3.08581400]
[57.82274628 -17.04279327]
[46.39369583 -29.56529808]
[55.26293945 -44.01427078]
[71.60249329 -39.49151611]
[71.77972412 -22.53849411]
[77.27542877 -8.58151436]
[82.77112579 5.37546492]
[88.26683044 19.33244514]
[100.12913513 28.33993721]
[97.98595428 44.01531219]
[103.48165131 57.97229004]
[108.97735596 71.92926788]
[116.43565369 72.71906281]
[118.01523590 57.80246353]
[114.90805054 43.12781143]
[127.90431976 35.63800812]
[139.04359436 45.68373108]
[132.93183899 59.38204956]
[131.35224915 74.29864502]
[138.81054688 75.08843994]
[147.10751343 62.59202576]
[147.59152222 46.20002365]
[162.15577698 38.66246414]
[175.81781006 47.73334122]
[174.52330017 64.08131409]
[159.60392761 70.88899231]
[151.30696106 83.38540649]
[164.57933044 76.39655304]
[178.97123718 80.62419891]
[191.05250549 89.51481628]
[199.36894226 101.99828339]
[202.91952515 116.57200623]
[201.27690125 131.48179626]
[194.63877869 144.93301392]
[183.80415344 155.30657959]
[170.07716370 161.35388184]
[155.11007690 162.34701538]
[140.70442200 158.16644287]
[128.59416199 149.31536865]
[120.23696136 136.85916138]
[116.63857269 122.29460144]
[106.84967041 110.92898560]
[109.99127197 125.59630585]
[113.13288116 140.26362610]
[116.27448273 154.93095398]
[126.73049164 166.80455017]
[121.83039856 180.87005615]
[124.97200012 195.53736877]
[128.11360168 210.20469666]
[131.25520325 224.87202454]
[136.30555725 210.74778748]
[144.05415344 197.90414429]
[154.19381714 186.85029602]
[166.32252502 178.02452087]
[179.95941162 171.77670288]
[194.56382751 168.35456848]
[209.55674744 167.89378357]
[224.34375000 170.41261292]
[238.33857727 175.81120300]
[250.98637390 183.87551880]
[261.78570557 194.28582764]
[270.30841064 206.62939453]
[276.21658325 220.41683960]
[279.27597046 235.10151672]
[279.36529541 250.10125732]
[276.48101807 264.82135010]
[270.73748779 278.67819214]
[262.36242676 291.12237549]
[251.68785095 301.66058350]
[239.13699341 309.87496948]
[225.20745850 315.43984985]
[210.45150757 318.13464355]
[195.45416260 317.85244751]
[180.81002808 314.60449219]
[167.09968567 308.51956177]
[154.86671448 299.83886719]
[144.59611511 288.90658569]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[19 106]
[20 105]
[21 104]
[22 103]
[24 101]
[25 100]
[26 99]
[27 98]
[28 49]
[29 48]
[30 47]
[31 46]
[32 41]
[33 40]
[34 39]
[50 68]
[51 67]
[52 66]
[54 64]
[55 63]
[56 62]
[57 61]
[76 83]
[77 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
