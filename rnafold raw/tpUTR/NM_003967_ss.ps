%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 21:04:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCUUCUACUAAAUGCAGGCAAGGAGUAGGACCUCACAGGAAAGAUAAGUGGCACUGUGACCGUGGGCUGUGUGGUGUUG\
) } def
/len { sequence length } bind def

/coor [
[54.01830673 135.71458435]
[40.84062195 142.88038635]
[27.66293907 150.04618835]
[14.48525429 157.21197510]
[1.30757070 164.37777710]
[-11.87011337 171.54357910]
[-14.23075485 184.95904541]
[-23.80655861 194.36894226]
[-36.87374878 196.43342590]
[-48.53305054 190.60910034]
[-61.97553253 197.26490784]
[-66.79366302 212.31684875]
[-80.88198853 219.47888184]
[-95.88215637 214.50187683]
[-102.89482880 200.33862305]
[-97.75952148 185.39190674]
[-83.52291107 178.52937317]
[-68.63133240 183.82241821]
[-55.18884659 177.16662598]
[-50.59938812 161.10842896]
[-35.57905960 153.07121277]
[-19.03590965 158.36589050]
[-5.85822678 151.20008850]
[7.31945705 144.03430176]
[20.49714088 136.86849976]
[33.67482376 129.70269775]
[46.85250854 122.53690338]
[59.89051437 115.12000275]
[72.78405762 107.45472717]
[85.67760468 99.78944397]
[92.68019867 87.68756866]
[106.65711975 87.31700897]
[119.55065918 79.65173340]
[132.44419861 71.98645020]
[140.35250854 58.28355789]
[155.24638367 58.43043137]
[168.13993835 50.76515198]
[181.03347778 43.09987259]
[193.92701721 35.43459320]
[206.82057190 27.76931190]
[203.96482849 14.93493652]
[204.92440796 1.84003437]
[209.60754395 -10.40688610]
[217.60771179 -20.77213097]
[228.23889160 -28.38407135]
[240.59442139 -32.60643005]
[253.62425232 -33.09146118]
[266.22421265 -29.80857849]
[277.32962036 -23.04603386]
[286.00515747 -13.38565445]
[299.69271851 -19.52168465]
[309.12033081 -32.22721481]
[323.89910889 -30.37322998]
[337.58666992 -36.50925827]
[349.56655884 -48.50585938]
[364.41067505 -40.31512833]
[360.64932251 -23.78368950]
[343.72268677 -22.82170486]
[330.03512573 -16.68567467]
[321.58654785 -4.41903305]
[305.82873535 -5.83412981]
[292.14120483 0.30189991]
[293.25436401 17.31514168]
[287.89505005 33.53656006]
[276.82125854 46.59017944]
[261.62991333 54.55389404]
[244.52665710 56.24248123]
[228.00567627 51.38392639]
[214.48583984 40.66285706]
[201.59230042 48.32813644]
[188.69876099 55.99341583]
[175.80522156 63.65869522]
[162.91166687 71.32397461]
[155.92559814 84.47859955]
[140.10948181 84.87999725]
[127.21594238 92.54527283]
[114.32239532 100.21055603]
[107.31980133 112.31243134]
[93.34288025 112.68299103]
[80.44934082 120.34826660]
[67.55579376 128.01354980]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[3 25]
[4 24]
[5 23]
[6 22]
[10 19]
[11 18]
[28 81]
[29 80]
[30 79]
[32 77]
[33 76]
[34 75]
[36 73]
[37 72]
[38 71]
[39 70]
[40 69]
[50 62]
[51 61]
[53 59]
[54 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
