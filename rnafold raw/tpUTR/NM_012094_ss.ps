%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 12:22:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCUGGGCCAGAUUACUUCCUCCACCCCUCCCUAUCUCACCUGCCCAGCCCUGUGCUGGGGCCCUGCAAUUGGAAUGUUGGCCAGAUUUCUGCAAUAAACACUUGUGGUUUGCGGCCAUCUCCUUGGUUA\
) } def
/len { sequence length } bind def

/coor [
[50.61080551 154.17243958]
[46.41573334 168.57386780]
[42.22066116 182.97531128]
[38.02558899 197.37673950]
[39.40089798 214.27482605]
[23.54393196 220.27423096]
[13.38933277 206.69776917]
[23.62415123 193.18167114]
[27.81922531 178.78024292]
[32.01429749 164.37879944]
[36.20936966 149.97737122]
[25.03827286 159.98768616]
[12.10532093 167.58628845]
[-2.07673597 172.47190857]
[-16.94562340 174.45083618]
[-31.91183662 173.44464111]
[-46.38201141 169.49317932]
[-59.78245544 162.75312805]
[-71.58187866 153.49172974]
[-81.31246948 142.07614136]
[-88.58843994 128.95896912]
[-93.12132263 114.66026306]
[-94.73140717 99.74692535]
[-93.35485840 84.81022644]
[-89.04624939 70.44235229]
[-81.97639465 57.21294403]
[-72.42560577 45.64650726]
[-60.77253342 36.20161819]
[-47.47918701 29.25273705]
[-33.07260895 25.07536316]
[-18.12397003 23.83511543]
[-3.22594047 25.58116531]
[11.03082180 30.24429131]
[24.08107948 37.63961029]
[35.40743256 47.47392654]
[44.56082535 59.35733795]
[51.17835236 72.81870270]
[54.99765396 87.32431793]
[55.86730194 102.29908752]
[53.75282288 117.14930725]
[48.73730469 131.28778076]
[60.46477890 121.93542480]
[72.19225311 112.58307648]
[67.19657135 99.51306915]
[68.47244263 84.59046173]
[76.60250092 70.85249329]
[90.70238495 61.44361115]
[82.35042572 48.98388290]
[73.99846649 36.52415848]
[65.64650726 24.06442833]
[57.29455185 11.60470104]
[41.89693451 7.09993744]
[35.95223236 -7.80107212]
[44.02071762 -21.66754723]
[59.91293335 -23.86231613]
[71.43773651 -12.70173931]
[69.75428009 3.25274444]
[78.10623932 15.71247196]
[86.45819855 28.17219925]
[94.81015015 40.63192749]
[103.16210938 53.09165573]
[118.03570557 51.14839935]
[122.90619659 36.96113968]
[127.77668762 22.77388191]
[132.64717102 8.58662415]
[127.68186188 -3.38497853]
[132.10087585 -15.14016533]
[143.00218201 -20.51940346]
[148.20640564 -34.58766937]
[153.41061401 -48.65593338]
[145.50637817 -62.14878464]
[148.17536926 -77.55691528]
[160.15736389 -87.60507965]
[175.79484558 -87.54884338]
[187.70426941 -77.41476440]
[190.26235962 -61.98783112]
[182.26127625 -48.55218124]
[167.47888184 -43.45171356]
[162.27467346 -29.38344955]
[157.07044983 -15.31518364]
[160.98956299 1.74875557]
[146.83444214 13.45711613]
[141.96394348 27.64437485]
[137.09346008 41.83163452]
[132.22296143 56.01889038]
[139.51747131 69.12576294]
[154.14138794 72.46357727]
[168.76531982 75.80139160]
[183.38923645 79.13920593]
[196.66749573 70.99515533]
[211.45068359 74.58849335]
[219.13294983 87.29747772]
[233.75686646 90.63529205]
[248.38079834 93.97310638]
[263.00469971 97.31092072]
[277.62863159 100.64873505]
[292.25253296 103.98654938]
[303.93948364 93.95053864]
[319.11761475 92.73474884]
[331.94946289 100.59652710]
[337.62353516 114.34217834]
[352.24746704 117.67999268]
[367.75000000 112.33184052]
[379.95385742 123.28623199]
[376.30468750 139.27421570]
[360.55648804 143.84873962]
[348.90963745 132.30390930]
[334.28573608 128.96609497]
[323.20953369 138.88861084]
[308.23733521 140.40429688]
[295.08984375 132.72337341]
[288.91473389 118.61046600]
[274.29080200 115.27265167]
[259.66690063 111.93483734]
[245.04298401 108.59702301]
[230.41905212 105.25920868]
[215.79513550 101.92139435]
[203.35942078 110.03857422]
[188.48114014 106.86187744]
[180.05142212 93.76312256]
[165.42750549 90.42530823]
[150.80357361 87.08749390]
[136.17965698 83.74967957]
[137.62013245 104.01431274]
[128.99238586 121.35089874]
[113.54774475 131.37818909]
[96.09915161 132.11402893]
[81.54460144 124.31055450]
[69.81712341 133.66290283]
[58.08965302 143.01524353]
[57.32398605 146.77143860]
[55.67141724 149.99697876]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[3 9]
[4 8]
[41 130]
[42 129]
[43 128]
[47 61]
[48 60]
[49 59]
[50 58]
[51 57]
[62 85]
[63 84]
[64 83]
[65 82]
[68 80]
[69 79]
[70 78]
[86 123]
[87 122]
[88 121]
[89 120]
[92 117]
[93 116]
[94 115]
[95 114]
[96 113]
[97 112]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
