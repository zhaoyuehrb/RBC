%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 06:43:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAAGACACGUUGAAAUGAUGCAGGCUGCUCCUAUGUUGGAAAUUUGUUCAUUAAAAUUCUCCCAAUAAAGCUUUACAGCCUUCUGCAAAGAAGUCUUGCGCA\
) } def
/len { sequence length } bind def

/coor [
[90.96841431 344.28890991]
[87.91954803 329.16583252]
[93.55212402 314.80346680]
[106.06880188 305.78479004]
[105.17173767 290.81164551]
[104.27468109 275.83847046]
[103.37761688 260.86532593]
[102.48055267 245.89218140]
[88.41773987 237.57127380]
[81.96652222 222.37896729]
[85.82177734 206.16046143]
[98.67134857 195.28271484]
[97.32675934 180.34310913]
[95.98217010 165.40348816]
[85.69005585 160.05245972]
[79.25616455 150.25521851]
[78.41835785 138.44299316]
[83.50787354 127.61682892]
[93.33494568 120.58507538]
[92.88621521 105.59178925]
[90.33167267 102.45905304]
[89.24976349 98.17614746]
[90.13701630 93.46490479]
[93.13073730 89.24767303]
[94.02780151 74.27452087]
[94.92486572 59.30137253]
[95.82192230 44.32822037]
[96.71898651 29.35506821]
[97.61605072 14.38191605]
[83.33575439 3.43434191]
[78.40605927 -13.70965004]
[84.58184814 -30.27975464]
[99.26979065 -39.84592056]
[99.26979065 -54.84592056]
[91.53248596 -68.64609528]
[99.26979065 -81.37336731]
[99.26979065 -96.37336731]
[99.26979065 -111.37336731]
[99.26979065 -126.37336731]
[99.26979065 -141.37336731]
[99.26979065 -156.37336731]
[88.33441162 -173.17692566]
[98.32473755 -189.61810303]
[97.42767334 -204.59126282]
[96.53060913 -219.56440735]
[95.63354492 -234.53756714]
[94.73648834 -249.51071167]
[81.58791351 -257.75054932]
[75.82499695 -272.15777588]
[79.66368103 -287.19253540]
[91.62792206 -297.07366943]
[107.11722565 -298.00164795]
[120.17563629 -289.61965942]
[125.78192902 -275.15075684]
[121.78036499 -260.15853882]
[109.70964050 -250.40777588]
[110.60669708 -235.43463135]
[111.50376129 -220.46147156]
[112.40082550 -205.48832703]
[113.29788971 -190.51516724]
[121.66568756 -184.30813599]
[125.22547913 -174.28103638]
[122.53532410 -163.75753784]
[114.26979065 -156.37336731]
[114.26979065 -141.37336731]
[114.26979065 -126.37336731]
[114.26979065 -111.37336731]
[114.26979065 -96.37336731]
[114.26979065 -81.37336731]
[122.00708771 -68.64609528]
[114.26979065 -54.84592056]
[114.26979065 -39.84592056]
[125.19213104 -34.13875198]
[132.64326477 -24.23170090]
[135.12538147 -12.01210499]
[132.09487915 0.15820298]
[124.07981873 9.89939404]
[112.58920288 15.27897835]
[111.69213867 30.25213051]
[110.79507446 45.22528458]
[109.89801788 60.19843292]
[109.00095367 75.17158508]
[108.10388947 90.14473724]
[107.87950134 105.14305878]
[108.32823181 120.13634491]
[122.57656860 132.42388916]
[123.47553253 150.90203857]
[110.92178345 164.05889893]
[112.26637268 178.99851990]
[113.61096191 193.93812561]
[126.01218414 200.16407776]
[133.62150574 211.63768005]
[134.51802063 225.26699829]
[128.57263184 237.44296265]
[117.45370483 244.99511719]
[118.35076904 259.96826172]
[119.24783325 274.94143677]
[120.14488983 289.91458130]
[121.04195404 304.88772583]
[134.54588318 312.34747314]
[141.85295105 325.93460083]
[140.63150024 341.31353760]
[131.27130127 353.57690430]
[116.75915527 358.81152344]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 99]
[5 98]
[6 97]
[7 96]
[8 95]
[12 90]
[13 89]
[14 88]
[19 85]
[20 84]
[24 83]
[25 82]
[26 81]
[27 80]
[28 79]
[29 78]
[33 72]
[34 71]
[36 69]
[37 68]
[38 67]
[39 66]
[40 65]
[41 64]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
