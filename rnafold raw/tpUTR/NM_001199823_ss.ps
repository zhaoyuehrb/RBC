%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 07:59:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGAAAGGAAAUCAAGAAGGCAUUUUCAGGUGCAUUUGUAAUUUAUUAAAGUUCAUCUGUGUGUGACAGAAGAGAUUUUACCCACA\
) } def
/len { sequence length } bind def

/coor [
[-92.50363922 164.48402405]
[-104.42906952 149.86679077]
[-118.07354736 156.09800720]
[-131.71803284 162.32923889]
[-145.36250305 168.56045532]
[-159.00698853 174.79168701]
[-172.65145874 181.02291870]
[-186.29594421 187.25413513]
[-185.37472534 202.40391541]
[-189.99217224 216.86225891]
[-199.52381897 228.67378235]
[-212.68057251 236.24110413]
[-227.68310547 238.54077148]
[-242.50244141 235.26179504]
[-255.13438416 226.84761047]
[-263.87057495 214.43618774]
[-267.52951050 199.70606995]
[-265.61636353 184.64936829]
[-258.38983154 171.30238342]
[-246.82730103 161.47018433]
[-232.49246216 156.48251343]
[-217.32400513 157.01388550]
[-203.37333679 162.99244690]
[-192.52717590 173.60966492]
[-178.88269043 167.37843323]
[-165.23820496 161.14720154]
[-151.59373474 154.91598511]
[-137.94924927 148.68475342]
[-124.30477142 142.45353699]
[-110.66029358 136.22230530]
[-113.30457306 124.72920227]
[-113.85210419 112.94428253]
[-112.28372955 101.24707794]
[-108.64845276 90.01454163]
[-103.06193542 79.60896301]
[-95.70275879 70.36621094]
[-86.80678558 62.58494186]
[-76.65954590 56.51694107]
[-65.58711243 52.35896301]
[-53.94558334 50.24635696]
[-42.10966110 50.24866867]
[-30.46058846 52.36734390]
[-19.37384605 56.53563309]
[-9.20707798 62.62070847]
[-0.28853402 70.42786407]
[7.09351635 79.70678711]
[12.70010757 90.15953827]
[16.34931183 101.45015717]
[31.26336670 99.84673309]
[46.17742157 98.24330902]
[61.09147644 96.63987732]
[76.00553131 95.03645325]
[90.91958618 93.43302917]
[105.80264282 91.56365204]
[120.64996338 89.42893219]
[133.20854187 79.80641174]
[146.90739441 85.65367889]
[161.75471497 83.51895905]
[176.60203552 81.38423920]
[191.44935608 79.24951172]
[206.29667664 77.11479187]
[217.02331543 65.18503571]
[233.02914429 66.27716827]
[242.03588867 79.55339050]
[237.13432312 94.82933044]
[222.08453369 100.38658905]
[208.43141174 91.96211243]
[193.58409119 94.09683228]
[178.73677063 96.23155975]
[163.88943481 98.36627960]
[149.04211426 100.50099945]
[137.54553223 109.97082520]
[122.78469086 104.27625275]
[107.93736267 106.41097260]
[100.86032867 110.67000580]
[92.52301025 108.34707642]
[77.60895538 109.95050812]
[62.69490051 111.55393219]
[47.78084564 113.15736389]
[32.86679077 114.76078796]
[17.95273781 116.36421204]
[15.06016827 135.11605835]
[6.96589661 152.26147461]
[-5.65621758 166.39118958]
[-21.76050377 176.34625244]
[-40.01610565 181.31304932]
[-58.91695786 180.88984680]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 30]
[3 29]
[4 28]
[5 27]
[6 26]
[7 25]
[8 24]
[48 81]
[49 80]
[50 79]
[51 78]
[52 77]
[53 76]
[54 74]
[55 73]
[57 71]
[58 70]
[59 69]
[60 68]
[61 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
