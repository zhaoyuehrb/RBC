%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 22:50:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUCGUGUAGAUGUGCUGCAGCCUUGGGCCCUCCCCGGCCCACGUCCUCCGUUGACACAGCUUCUCUGGAGACCCUAGAAGGCGGCAUGUCCUGCCCUCAACCUGCCUGCCUGGAUUGCACCUUUCUGCCCUUUCCCCCUCAUUAUUAAAUGUUUCUUUUUGCCA\
) } def
/len { sequence length } bind def

/coor [
[181.48103333 374.33303833]
[181.14735413 359.31396484]
[182.81855774 344.38446045]
[186.46481323 329.81091309]
[192.02105713 315.85342407]
[199.38815308 302.76107788]
[208.43458557 290.76751709]
[218.99894714 280.08679199]
[230.89268494 270.90951538]
[223.39268494 257.91912842]
[215.89268494 244.92875671]
[208.39268494 231.93836975]
[200.89268494 218.94798279]
[186.08525085 217.57760620]
[174.79049683 207.63313293]
[171.47843933 192.77098083]
[177.62377930 178.64508057]
[171.53070068 174.40698242]
[170.10760498 165.34092712]
[162.85182190 152.21257019]
[155.59603882 139.08422852]
[148.34025574 125.95587158]
[141.08447266 112.82752228]
[133.70625305 99.76758575]
[126.20625305 86.77720642]
[112.88999176 121.56030273]
[82.88537598 111.97171021]
[68.32642365 115.58238983]
[53.76747513 119.19306946]
[39.20852661 122.80374908]
[24.64958000 126.41442871]
[10.09063053 130.02511597]
[2.14963722 143.68952942]
[-13.14887238 147.65577698]
[-26.72856522 139.57075500]
[-30.53284836 124.23117065]
[-22.30470848 110.73771667]
[-6.92575645 107.09582520]
[6.47994995 115.46616364]
[21.03889847 111.85548401]
[35.59784698 108.24480438]
[50.15679550 104.63411713]
[64.71574402 101.02343750]
[79.27468872 97.41275787]
[79.55776978 85.40158844]
[87.10839844 73.62924957]
[75.55785370 64.05924225]
[64.00730896 54.48924255]
[55.36388397 51.40546417]
[52.33243942 44.63069534]
[40.96286392 34.84638596]
[29.59328842 25.06207466]
[18.22371292 15.27776241]
[2.67873955 16.27352905]
[-8.71224594 6.18888187]
[-9.56575871 -8.63701153]
[-20.93533325 -18.42132187]
[-36.33777618 -15.71968555]
[-49.84734344 -23.59531403]
[-55.08523941 -38.32957458]
[-49.57828522 -52.96540451]
[-35.92669678 -60.59220505]
[-20.57633591 -57.60884094]
[-10.77517605 -45.42396545]
[-11.15102291 -29.79089737]
[0.21855290 -20.00658798]
[15.00606251 -21.37229156]
[26.67580986 -11.61157322]
[28.00802422 3.90818691]
[39.37760162 13.69249821]
[50.74717712 23.47680855]
[62.11675262 33.26111984]
[73.57731628 42.93870163]
[85.12785339 52.50870132]
[96.67839813 62.07870483]
[104.06036377 60.75333023]
[94.38271332 49.29282761]
[99.46888733 35.18145752]
[114.23276520 32.53043365]
[123.91062164 43.99075699]
[118.82428741 58.10258102]
[126.20625305 56.77720642]
[133.70625305 43.78682327]
[141.20625305 30.79644394]
[148.70625305 17.80606270]
[156.08447266 4.74612522]
[163.34025574 -8.38222599]
[170.59603882 -21.51057816]
[177.85182190 -34.63892746]
[177.75535583 -50.45984268]
[190.68363953 -57.85636902]
[197.93942261 -70.98471832]
[189.94398499 -84.09839630]
[189.59262085 -99.45326996]
[196.97982788 -112.91895294]
[210.11849976 -120.87324524]
[225.47441101 -121.17648315]
[238.91687012 -113.74710083]
[246.82994080 -100.58355713]
[247.08503723 -85.22678375]
[239.61355591 -71.80767822]
[226.42527771 -63.93590546]
[211.06777954 -63.72893906]
[203.81199646 -50.60058594]
[204.42744446 -35.71870041]
[190.98016357 -27.38314629]
[183.72438049 -14.25479412]
[176.46859741 -1.12644267]
[169.21281433 12.00190830]
[168.72746277 19.40809250]
[161.69664001 25.30606270]
[154.19664001 38.29644394]
[146.69664001 51.28682327]
[139.19664001 64.27720642]
[139.19664001 79.27720642]
[146.69664001 92.26758575]
[153.72746277 98.16555786]
[154.21281433 105.57173920]
[161.46859741 118.70008850]
[168.72438049 131.82844543]
[175.98016357 144.95678711]
[183.23594666 158.08514404]
[190.61416626 171.14508057]
[205.92022705 172.88600159]
[217.13519287 183.18540955]
[220.09999084 197.93917847]
[213.88305664 211.44798279]
[221.38305664 224.43836975]
[228.88305664 237.42875671]
[236.38305664 250.41912842]
[243.88305664 263.40951538]
[257.77767944 257.69787598]
[272.30963135 253.88923645]
[287.21957397 252.05157471]
[302.24142456 252.21766663]
[317.10708618 254.38455200]
[331.55130005 258.51358032]
[345.31622314 264.53103638]
[358.15628052 272.32952881]
[369.84225464 281.76992798]
[380.16567993 292.68371582]
[388.94223022 304.87612915]
[396.01535034 318.12960815]
[401.25878906 332.20761108]
[404.57894897 346.85888672]
[405.91659546 361.82199097]
[405.24786377 376.82986450]
[402.58468628 391.61468506]
[397.97457886 405.91259766]
[391.49981689 419.46844482]
[383.27597046 432.04028320]
[373.44976807 443.40380859]
[362.19662476 453.35617065]
[349.71728516 461.71978760]
[336.23452759 468.34539795]
[321.98895264 473.11471558]
[307.23477173 475.94271851]
[292.23529053 476.77883911]
[277.25820923 475.60821533]
[262.57080078 472.45172119]
[248.43516541 467.36572266]
[235.10360718 460.44091797]
[222.81401062 451.80093384]
[211.78572083 441.59994507]
[202.21553040 430.01998901]
[194.27424622 417.26776123]
[188.10357666 403.57083130]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 131]
[10 130]
[11 129]
[12 128]
[13 127]
[17 123]
[19 122]
[20 121]
[21 120]
[22 119]
[23 118]
[24 116]
[25 115]
[27 44]
[28 43]
[29 42]
[30 41]
[31 40]
[32 39]
[46 75]
[47 74]
[48 73]
[50 72]
[51 71]
[52 70]
[53 69]
[56 66]
[57 65]
[82 114]
[83 113]
[84 112]
[85 111]
[86 109]
[87 108]
[88 107]
[89 106]
[91 104]
[92 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
