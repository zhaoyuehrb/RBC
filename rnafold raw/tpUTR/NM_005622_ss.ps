%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 11:24:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUGUUUCAUUAAUUACCAUAUCUAUAAAACAAACAUAGUAUCUGUCAAUCUCUAGAAACCACAAGAUGAUGGAGAGGUCAUAAAAACUGUGGUAGUAUGCUUAGAAACUGUUGAUUUAAAAUAUCUUGUGGUUAUGAUAUCAGAGGCUAAAUUUUGAAAUAAAAUAUUUGGCAAAUUCCUCCA\
) } def
/len { sequence length } bind def

/coor [
[81.15645599 132.16761780]
[83.02568817 117.28453827]
[75.57084656 118.10628510]
[66.79510498 130.27125549]
[58.01937485 142.43621826]
[49.24363708 154.60119629]
[40.46790314 166.76615906]
[31.69216919 178.93112183]
[29.89332581 194.64973450]
[16.17231369 200.44483948]
[7.39657879 212.60980225]
[9.71861553 228.01258850]
[0.64547789 240.22457886]
[-14.05303669 242.34336853]
[-22.82877159 254.50834656]
[-20.05662537 270.06759644]
[-29.16687965 282.98190308]
[-44.75458527 285.58938599]
[-57.57183075 276.34310913]
[-60.01437378 260.72869873]
[-50.63309479 248.00991821]
[-34.99374008 245.73260498]
[-26.21800613 233.56764221]
[-28.84382248 218.95118713]
[-20.11727333 206.48916626]
[-4.76839018 203.83406067]
[4.00734472 191.66909790]
[5.17848778 176.82060242]
[19.52719879 170.15539551]
[28.30293465 157.99043274]
[37.07867050 145.82545471]
[45.85440445 133.66049194]
[54.63013840 121.49551392]
[63.40587616 109.33055115]
[49.87224579 115.79900360]
[34.87501526 115.51084137]
[20.67276573 110.68422699]
[8.60553265 101.77458191]
[-0.18810247 89.62254333]
[-4.87842989 75.37471008]
[-5.02290154 60.37540436]
[-0.60788637 46.03986359]
[7.95004463 33.72069931]
[19.84342194 24.58026314]
[33.95006561 19.48098564]
[48.93896103 18.90399933]
[63.39586639 22.90374756]
[75.95671082 31.10284042]
[85.43634796 42.72766495]
[90.94033051 56.68137741]
[91.94915771 71.64964294]
[96.10063934 86.06370544]
[99.36784363 71.42384338]
[102.63504791 56.78398895]
[105.90224457 42.14413452]
[104.71655273 33.06441498]
[109.35024261 27.28559875]
[112.86423492 12.70301247]
[115.63512421 -2.03883815]
[117.65579987 -16.90211105]
[119.67646790 -31.76538467]
[121.69714355 -46.62865829]
[123.71781158 -61.49193192]
[125.73848724 -76.35520172]
[127.75915527 -91.21847534]
[129.77983093 -106.08174896]
[131.80050659 -120.94502258]
[133.82116699 -135.80828857]
[135.84184265 -150.67156982]
[137.86251831 -165.53483582]
[126.92633057 -172.44883728]
[119.45077515 -182.95176697]
[116.52091217 -195.45806885]
[118.53881073 -208.09611511]
[125.16880798 -218.98834229]
[135.39273071 -226.53010559]
[147.66606140 -229.62615967]
[150.18757629 -244.41270447]
[152.70909119 -259.19924927]
[155.23060608 -273.98580933]
[157.75212097 -288.77233887]
[160.27363586 -303.55889893]
[146.58384705 -309.88543701]
[135.00721741 -319.53256226]
[126.32902527 -331.83804321]
[121.13593292 -345.95959473]
[119.77629852 -360.93255615]
[122.33682251 -375.73568726]
[128.63703918 -389.36093140]
[138.24205017 -400.88204956]
[150.49247742 -409.51754761]
[164.54978943 -414.68362427]
[179.45370483 -416.03381348]
[181.97521973 -430.82037354]
[184.49673462 -445.60690308]
[187.01824951 -460.39346313]
[183.72052002 -477.02359009]
[198.78784180 -484.79611206]
[210.42765808 -472.46926880]
[201.80479431 -457.87194824]
[199.28327942 -443.08538818]
[196.76176453 -428.29885864]
[194.24024963 -413.51229858]
[207.85438538 -407.29901123]
[219.40510559 -397.76605225]
[228.10124207 -385.55859375]
[233.34510803 -371.50534058]
[234.77362061 -356.56210327]
[232.28340149 -341.74697876]
[226.03831482 -328.07086182]
[216.45858765 -316.46847534]
[204.19259644 -307.73452759]
[190.07299805 -302.46932983]
[175.06018066 -301.03738403]
[172.53866577 -286.25082397]
[170.01715088 -271.46429443]
[167.49563599 -256.67773438]
[164.97412109 -241.89118958]
[162.45260620 -227.10464478]
[176.08512878 -216.61776733]
[182.57411194 -200.59342957]
[180.05357361 -183.39996338]
[169.12695312 -169.77369690]
[152.72578430 -163.51417542]
[150.70512390 -148.65089417]
[148.68444824 -133.78762817]
[146.66377258 -118.92434692]
[144.64309692 -104.06108093]
[142.62243652 -89.19780731]
[140.60176086 -74.33453369]
[138.58108521 -59.47126007]
[136.56040955 -44.60798645]
[134.53974915 -29.74471283]
[132.51907349 -14.88143921]
[130.49839783 -0.01816628]
[143.14045715 -8.09148502]
[157.82133484 -5.01383448]
[166.15655518 7.45709229]
[163.38575745 22.19896126]
[151.09138489 30.79246712]
[136.29493713 28.32973099]
[127.44682312 16.21700859]
[123.93282318 30.79959679]
[120.54210663 45.41133881]
[117.27490234 60.05119324]
[114.00769806 74.69104767]
[110.74049377 89.33090210]
[115.35164642 103.60456085]
[126.56637573 113.56597900]
[137.78109741 123.52739716]
[148.99583435 133.48881531]
[160.21055603 143.45024109]
[171.42529297 153.41165161]
[182.64001465 163.37307739]
[193.93847656 173.23942566]
[205.31983948 183.01002502]
[216.70121765 192.78060913]
[232.43885803 191.33078003]
[244.53866577 201.49789429]
[245.82202148 217.25000000]
[235.52754211 229.24162292]
[219.76275635 230.35836792]
[207.88063049 219.93768311]
[206.93063354 204.16197205]
[195.54925537 194.39138794]
[184.16787720 184.62080383]
[177.02908325 182.64512634]
[172.67860413 174.58779907]
[161.46386719 164.62638855]
[150.24914551 154.66496277]
[139.03440857 144.70355225]
[127.81968689 134.74212646]
[116.60495758 124.78070831]
[105.39022827 114.81929016]
[97.93537903 115.64103699]
[103.00147247 129.75962830]
[108.06756592 143.87823486]
[119.04586029 154.09963989]
[122.76522827 168.63119507]
[118.04756165 182.86999512]
[106.38718414 192.30586243]
[91.47755432 193.94996643]
[78.04134369 187.28150940]
[70.33451080 174.41276550]
[70.79821014 159.41993713]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 34]
[4 33]
[5 32]
[6 31]
[7 30]
[8 29]
[10 27]
[11 26]
[14 23]
[15 22]
[52 147]
[53 146]
[54 145]
[55 144]
[57 143]
[58 142]
[59 135]
[60 134]
[61 133]
[62 132]
[63 131]
[64 130]
[65 129]
[66 128]
[67 127]
[68 126]
[69 125]
[70 124]
[77 119]
[78 118]
[79 117]
[80 116]
[81 115]
[82 114]
[93 103]
[94 102]
[95 101]
[96 100]
[148 174]
[149 173]
[150 172]
[151 171]
[152 170]
[153 169]
[154 168]
[155 166]
[156 165]
[157 164]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
