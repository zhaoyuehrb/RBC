%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 01:34:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCUCUGGUGUCAGAAACCAGGGAAAACCCUUGUCUUUUCUUCUAAGUGACAUGUUGGAAGCCUUCUCAUCCCGGGGCAAAGCAGGCAUCAAAACCAGAAUAGGCCAAUCUCUUUUCCAUUAAAUAAACUGUAAACACAAGAACCCA\
) } def
/len { sequence length } bind def

/coor [
[171.99110413 118.34431458]
[157.10937500 116.46431732]
[142.22766113 114.58432007]
[127.34593964 112.70432281]
[112.46421814 110.82432556]
[99.17116547 117.77376556]
[92.22172546 131.06681824]
[85.27228546 144.35987854]
[78.32284546 157.65292358]
[79.54980469 174.00610352]
[65.85041809 183.02047729]
[51.31743622 175.42280579]
[50.90114594 159.02894592]
[65.02979279 150.70349121]
[71.97923279 137.41043091]
[78.92867279 124.11737823]
[85.87811279 110.82432556]
[75.60944366 99.88931274]
[65.34169769 88.95526123]
[51.63851929 95.05631256]
[42.17847824 107.73772430]
[27.40449142 105.84600067]
[13.70131016 111.94704437]
[-0.00187140 118.04809570]
[-13.70505333 124.14914703]
[-22.90123558 137.72715759]
[-39.23661041 136.28230286]
[-45.90674210 121.30094147]
[-36.04997635 108.19460297]
[-19.80610275 110.44596863]
[-6.10292101 104.34491730]
[7.60026073 98.24386597]
[21.30344200 92.14281464]
[29.78334045 79.89779663]
[45.53746796 81.35313416]
[59.24065018 75.25208282]
[60.02461243 67.79316711]
[45.35239410 70.91181946]
[37.85243607 57.92141342]
[47.88945007 46.77429199]
[61.59254074 52.87533951]
[62.37650299 45.41642761]
[50.24124908 36.59964752]
[38.10599518 27.78286934]
[25.97073936 18.96608925]
[13.83548450 10.14931107]
[1.70023012 1.33253229]
[-10.43502522 -7.48424625]
[-25.15047073 -2.56131268]
[-39.93898392 -7.26019478]
[-49.11407852 -19.77407646]
[-49.14774704 -35.29111481]
[-40.02703857 -47.84469223]
[-25.25905418 -52.60770416]
[-10.52238464 -47.74866867]
[-1.48358071 -35.13599396]
[-1.61824608 -19.61950111]
[10.51700878 -10.80272293]
[22.65226364 -1.98594379]
[34.78751755 6.83083487]
[46.92277527 15.64761353]
[59.05802917 24.46439171]
[71.19328308 33.28116989]
[79.05992126 20.50948334]
[90.65090179 10.98850060]
[104.70730591 5.75232363]
[119.70242310 5.36966753]
[134.00759888 9.88209343]
[146.06910706 18.79949379]
[154.57691956 31.15332794]
[158.60696411 45.60181046]
[157.72154236 60.57565689]
[152.01683044 74.44851685]
[142.11241150 85.71361542]
[129.08404541 93.14743042]
[114.34422302 95.94260406]
[129.22593689 97.82260132]
[144.10766602 99.70259857]
[158.98937988 101.58259583]
[173.87110901 103.46260071]
[188.33670044 83.70453644]
[211.50526428 76.11795807]
[234.64897156 83.42782593]
[249.12670898 102.77235413]
[263.96578979 100.58110809]
[278.80487061 98.38986206]
[293.64395142 96.19861603]
[294.87142944 81.67459869]
[299.31124878 67.79936218]
[306.73565674 55.27366638]
[316.76626587 44.72933960]
[328.89324951 36.69738007]
[342.50143433 31.58122253]
[356.90130615 29.63649368]
[371.36413574 30.95821571]
[385.15866089 35.47618866]
[397.58825684 42.95869446]
[408.02593994 53.02439880]
[415.94619751 65.16176605]
[420.95117188 78.75506592]
[435.83288574 76.87506104]
[450.71459961 74.99506378]
[463.43621826 65.58915710]
[477.03286743 71.67029572]
[491.91461182 69.79029846]
[506.79632568 67.91030121]
[516.28363037 55.27041626]
[531.94146729 53.12395096]
[544.48034668 62.74435806]
[546.46112061 78.42402649]
[536.70867920 90.86048126]
[521.00897217 92.67539978]
[508.67633057 82.79202271]
[493.79458618 84.67201996]
[478.91287231 86.55201721]
[467.25570679 95.82345581]
[452.59460449 89.87678528]
[437.71289062 91.75678253]
[422.83117676 93.63678741]
[421.14773560 109.00881195]
[415.84597778 123.54475403]
[407.22750854 136.40533447]
[395.78573608 146.84693909]
[382.17730713 154.26466370]
[367.18466187 158.22729492]
[351.67092896 158.50239563]
[336.53021240 155.06997681]
[322.63619995 148.12384033]
[310.79156494 138.06062317]
[301.68176270 125.45723724]
[295.83520508 111.03769684]
[280.99612427 113.22894287]
[266.15704346 115.42018890]
[251.31794739 117.61143494]
[250.41902161 124.57415009]
[248.29606628 131.27375793]
[245.01400757 137.49664307]
[240.67477417 143.04386902]
[235.41413879 147.73759460]
[229.39747620 151.42674255]
[222.81455994 153.99186707]
[215.87351990 155.34901428]
[208.79438782 155.45249939]
[201.80201721 154.29640198]
[195.11894226 151.91484070]
[188.95838928 148.38098145]
[183.51734924 143.80480957]
[178.97039795 138.32969666]
[175.46398926 132.12786865]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 80]
[2 79]
[3 78]
[4 77]
[5 76]
[6 17]
[7 16]
[8 15]
[9 14]
[19 36]
[20 35]
[22 33]
[23 32]
[24 31]
[25 30]
[42 63]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[84 134]
[85 133]
[86 132]
[87 131]
[100 119]
[101 118]
[102 117]
[104 115]
[105 114]
[106 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
