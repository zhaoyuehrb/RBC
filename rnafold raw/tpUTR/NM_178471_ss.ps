%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 19:21:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACGGUAAGGGCAGAGAAGUUUCAAAGUGCCUUUCUCCUCCCCACUCUGGAGCCCCAACUAGAUCAGCAGGAGCUAGGGGGAUGAGAGCACUUGC\
) } def
/len { sequence length } bind def

/coor [
[-37.97686386 323.01248169]
[-41.44215775 337.66873169]
[-47.97750473 351.23721313]
[-57.27723694 363.08325195]
[-68.90638733 372.65286255]
[-82.32102966 379.49838257]
[-96.89375305 383.29968262]
[-111.94296265 383.87893677]
[-126.76476288 381.20907593]
[-140.66592407 375.41497803]
[-152.99627686 366.76760864]
[-163.17907715 355.67147827]
[-170.73808289 342.64550781]
[-175.31973267 328.29901123]
[-176.70974731 313.30291748]
[-174.84309387 298.35870361]
[-169.80708313 284.16531372]
[-161.83728027 271.38656616]
[-151.30642700 260.62017822]
[-138.70707703 252.36970520]
[-124.62851715 247.02102661]
[-109.72923279 244.82432556]
[-94.70610046 245.88232422]
[-80.26175690 250.14556885]
[-67.07181549 257.41464233]
[-57.18162537 246.13703918]
[-47.29143906 234.85945129]
[-37.40125275 223.58184814]
[-27.51106453 212.30424500]
[-17.62087631 201.02665710]
[-17.56822968 197.31452942]
[-15.58644772 193.46339417]
[-11.64219570 190.44216919]
[-6.16552496 189.19015503]
[4.78243637 178.93626404]
[15.73039722 168.68238831]
[26.67835808 158.42849731]
[30.67837715 144.08105469]
[46.03978729 140.29454041]
[56.98774719 130.04066467]
[67.93570709 119.78677368]
[78.88366699 109.53289032]
[89.83163452 99.27900696]
[93.17909241 91.75931549]
[101.30959320 88.87598419]
[112.58718872 78.98580170]
[113.92851257 74.37675476]
[116.49931335 70.88856506]
[119.75061035 68.78274536]
[123.10614777 68.09737396]
[126.04412842 68.65992737]
[138.51617432 60.32637787]
[150.98822021 51.99282455]
[158.16403198 37.89252853]
[173.04498291 37.25496674]
[185.51702881 28.92141151]
[188.72119141 13.67768955]
[201.48832703 5.40394974]
[216.00114441 8.55257416]
[228.47319031 0.21902050]
[233.00067139 -15.17193031]
[247.91044617 -21.09462738]
[261.76498413 -13.00568199]
[263.93630981 2.88975739]
[252.75872803 14.39807034]
[236.80674744 12.69106483]
[224.33470154 21.02461815]
[221.68983459 35.63763428]
[209.16012573 44.26671219]
[193.85057068 41.39345551]
[181.37852478 49.72700882]
[175.09480286 63.23123169]
[159.32176208 64.46486664]
[146.84973145 72.79842377]
[134.37768555 81.13197327]
[122.47737885 90.26339722]
[111.19978333 100.15358734]
[100.08551788 110.22696686]
[89.13755798 120.48085022]
[78.18959045 130.73474121]
[67.24163055 140.98861694]
[56.29367065 151.24250793]
[51.51058197 166.32337952]
[36.93224335 169.37646484]
[25.98428154 179.63034058]
[15.03632069 189.88423157]
[4.08835936 200.13812256]
[-6.34327984 210.91683960]
[-16.23346710 222.19444275]
[-26.12365532 233.47203064]
[-36.01384354 244.74963379]
[-45.90402985 256.02722168]
[-55.79421616 267.30484009]
[-46.86569977 279.43313599]
[-40.75357056 293.19741821]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[25 93]
[26 92]
[27 91]
[28 90]
[29 89]
[30 88]
[34 87]
[35 86]
[36 85]
[37 84]
[39 82]
[40 81]
[41 80]
[42 79]
[43 78]
[45 77]
[46 76]
[51 75]
[52 74]
[53 73]
[55 71]
[56 70]
[59 67]
[60 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
