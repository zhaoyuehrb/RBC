%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 20:43:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAUACGUGAACUAAUCCUUAUAUAUACAUAUAAAAAGAAAUUAUGUGAAAAUCACAUUCUAAAAUAG\
) } def
/len { sequence length } bind def

/coor [
[119.39891052 149.40936279]
[112.20360565 151.65921021]
[104.76213837 152.86705017]
[97.22461700 153.00848389]
[89.74307251 152.08068848]
[82.46842957 150.10235596]
[75.54740906 147.11340332]
[69.11962891 143.17413330]
[63.31474304 138.36396790]
[58.24983978 132.77998352]
[54.02708817 126.53476715]
[50.73165894 119.75432587]
[48.43003082 112.57540894]
[47.16862869 105.14283752]
[46.97289658 97.60652924]
[47.84677887 90.11849213]
[49.77265549 82.82978821]
[52.71167374 75.88742065]
[56.60454941 69.43142700]
[61.37276459 63.59204483]
[52.02041626 51.86457062]
[42.66807175 40.13710022]
[33.31572342 28.40962791]
[23.96337509 16.68215561]
[14.61102867 4.95468330]
[-0.84387571 -0.52965426]
[-3.55526638 -16.70310211]
[9.26610374 -26.92780304]
[24.43070793 -20.68546104]
[26.33850098 -4.39766407]
[35.69084930 7.32980824]
[45.04319382 19.05728149]
[54.39554214 30.78475189]
[63.74789047 42.51222610]
[73.10023499 54.23969650]
[102.50746155 46.97816086]
[131.09815979 56.98248291]
[149.56216431 80.99488068]
[164.18608093 77.65706635]
[178.80999756 74.31925201]
[182.39305115 70.64318085]
[186.59439087 68.73454285]
[190.69427490 68.54960632]
[194.08166504 69.78454590]
[196.33909607 71.94477844]
[211.32398987 71.27180481]
[226.30888367 70.59883118]
[241.29377747 69.92585754]
[256.27868652 69.25289154]
[271.26358032 68.57991791]
[286.81549072 61.82904434]
[297.60772705 74.90435791]
[288.03100586 88.89444733]
[271.93655396 83.56481171]
[256.95166016 84.23778534]
[241.96675110 84.91075897]
[226.98185730 85.58373260]
[211.99696350 86.25669861]
[197.01205444 86.92967224]
[182.14781189 88.94317627]
[167.52389526 92.28099060]
[152.89997864 95.61880493]
[152.98712158 103.15715027]
[152.00544739 110.63181305]
[149.97477722 117.89202118]
[146.93605042 124.79132843]
[142.95056152 131.19056702]
[138.09872437 136.96064758]
[132.47837830 141.98519897]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 35]
[21 34]
[22 33]
[23 32]
[24 31]
[25 30]
[38 62]
[39 61]
[40 60]
[45 59]
[46 58]
[47 57]
[48 56]
[49 55]
[50 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
