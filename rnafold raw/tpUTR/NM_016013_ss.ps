%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 00:51:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUCAUAUGGUAGUUUUGUUUUACUAAUCUAAGGGUACUAGCAUCUACAAUGAUAUAGACAAAAUAAAAUAUUUCUUUAAUGGCAUCCAACCAA\
) } def
/len { sequence length } bind def

/coor [
[181.43658447 181.04846191]
[170.05976868 157.62365723]
[169.59939575 131.54614258]
[155.39544678 126.72454834]
[141.19148254 121.90295410]
[126.98753357 117.08136749]
[112.78358459 112.25977325]
[103.92007446 117.27295685]
[93.76087952 116.57695770]
[85.66387939 110.40180969]
[82.30535889 100.78858185]
[68.44716644 95.04833221]
[54.58897400 89.30808258]
[40.73078156 83.56782532]
[30.70947838 88.39206696]
[19.92280388 86.82437134]
[12.01831245 79.64537811]
[9.52863979 69.49017334]
[-3.92445183 62.85584259]
[-17.37754250 56.22151184]
[-30.83063316 49.58718491]
[-49.07437897 51.29219437]
[-58.39056015 36.51920319]
[-72.05352020 30.32859612]
[-85.71647644 24.13799095]
[-99.37943268 17.94738579]
[-112.80102539 25.73457718]
[-128.23304749 24.11204529]
[-139.74154663 13.70368671]
[-142.90129089 -1.48827362]
[-136.49728394 -15.62221622]
[-122.99199677 -23.26335144]
[-107.57849884 -21.47350693]
[-96.18357849 -10.94091606]
[-93.18882751 4.28442764]
[-79.52587128 10.47503281]
[-65.86291504 16.66563797]
[-52.19995499 22.85624313]
[-40.64573288 18.88290977]
[-29.14636230 24.08612442]
[-24.19630432 36.13409042]
[-10.74321270 42.76842117]
[2.70987844 49.40275192]
[16.16296959 56.03708267]
[35.16846848 53.17647171]
[46.47103500 69.70963287]
[60.32922745 75.44989014]
[74.18742371 81.19013977]
[88.04561615 86.93038940]
[106.23912048 83.42304230]
[117.60517883 98.05582428]
[131.80912781 102.87741089]
[146.01307678 107.69900513]
[160.21702576 112.52059937]
[174.42098999 117.34218597]
[178.44584656 110.31994629]
[183.37001038 103.89915466]
[189.10498047 98.19419098]
[195.54785156 93.30657959]
[202.58306885 89.32317352]
[210.08462524 86.31464386]
[217.91821289 84.33417511]
[225.94366455 83.41656494]
[234.01750183 83.57760620]
[241.99542236 84.81381226]
[249.73493958 87.10247040]
[257.09793091 90.40208435]
[263.95300293 94.65312958]
[270.17800903 99.77910614]
[275.66210938 105.68791962]
[280.30767822 112.27355194]
[284.03222656 119.41795349]
[286.76974487 126.99314880]
[288.47186279 134.86354065]
[289.10876465 142.88835144]
[288.66970825 150.92410278]
[287.16311646 158.82720947]
[284.61657715 166.45654297]
[281.07611084 173.67594910]
[276.60562134 180.35667419]
[271.28546143 186.37965393]
[265.21121216 191.63766479]
[272.71121216 204.62805176]
[280.21121216 217.61843872]
[295.64160156 220.15550232]
[305.79193115 232.05110168]
[305.86944580 247.68849182]
[295.83761597 259.68417358]
[280.43313599 262.37414551]
[266.92953491 254.48831177]
[261.70278931 239.75009155]
[267.22082520 225.11843872]
[259.72082520 212.12805176]
[252.22082520 199.13766479]
[226.74107361 203.89891052]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 55]
[4 54]
[5 53]
[6 52]
[7 51]
[11 49]
[12 48]
[13 47]
[14 46]
[18 44]
[19 43]
[20 42]
[21 41]
[23 38]
[24 37]
[25 36]
[26 35]
[82 94]
[83 93]
[84 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
