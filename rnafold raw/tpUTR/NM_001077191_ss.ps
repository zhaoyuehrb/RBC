%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 09:39:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAAGGGCCUCUGCUGACUCCUACCAGAGCAUCCGUCCAGCUCAGCCAUCCAGCCUGUCUCUACCGGGCCCCACUUCUCUGGAUCAGAGACCCUGCCUCUGUUUGACCCCGCACUGACUGAAUAAAGCUCCUCUGGCCGUU\
) } def
/len { sequence length } bind def

/coor [
[-42.23510742 450.34014893]
[-49.78261948 463.30297852]
[-57.33013535 476.26580811]
[-64.87764740 489.22863770]
[-60.09221649 506.01623535]
[-68.72526550 520.79974365]
[-85.04294586 524.72369385]
[-92.30387878 537.84924316]
[-99.56481171 550.97473145]
[-98.72377014 567.35229492]
[-112.63188934 576.04113770]
[-126.98169708 568.10290527]
[-127.01133728 551.70379639]
[-112.69031525 543.71380615]
[-105.42938232 530.58825684]
[-98.16844940 517.46276855]
[-103.43672943 505.65463257]
[-100.88025665 492.78085327]
[-91.21697998 483.61300659]
[-77.84048462 481.68112183]
[-70.29296875 468.71829224]
[-62.74545288 455.75546265]
[-55.19794083 442.79263306]
[-57.78104782 420.49508667]
[-37.85118103 408.66665649]
[-31.77020645 394.95455933]
[-25.68923378 381.24246216]
[-19.60825920 367.53033447]
[-13.52728653 353.81823730]
[-7.44631338 340.10614014]
[-19.71492004 329.47125244]
[-28.13219261 315.56546021]
[-31.87411499 299.72808838]
[-30.56761551 283.48861694]
[-24.32772636 268.41891479]
[-13.74756908 255.98115540]
[0.15802470 247.38597107]
[16.04983330 243.47451782]
[32.39322662 244.63623047]
[37.86603928 230.67025757]
[43.33885193 216.70428467]
[42.84690475 209.27145386]
[49.08833313 202.49378967]
[54.86661911 188.65141296]
[60.64490509 174.80903625]
[66.42319489 160.96665955]
[51.67259598 150.08790588]
[40.27323532 135.73583984]
[33.01558685 118.90567780]
[30.40293312 100.76452637]
[32.61644363 82.57035828]
[39.50262451 65.58483124]
[50.58395767 50.98580933]
[65.09201050 39.78564453]
[59.01103973 26.07353973]
[52.93006897 12.36143684]
[46.84909439 -1.35066557]
[40.76811981 -15.06276798]
[25.69351959 -19.22094345]
[16.86113930 -32.12532425]
[18.44136047 -47.68286133]
[29.68805122 -58.54775620]
[45.29086685 -59.58994293]
[57.88263702 -50.31732941]
[61.51791000 -35.10816193]
[54.48022461 -21.14374161]
[60.56119537 -7.43163872]
[66.64217377 6.28046417]
[72.72314453 19.99256706]
[78.80411530 33.70466995]
[94.65348053 30.60438728]
[110.79070282 31.24029541]
[114.69950104 16.75853920]
[118.60830688 2.27678347]
[110.51494598 -11.29793453]
[114.47178650 -26.59888077]
[128.13131714 -34.54827499]
[143.38957214 -30.42988205]
[151.19410706 -16.68707275]
[146.91462708 -1.47321129]
[133.09005737 6.18558836]
[129.18125916 20.66734314]
[125.27245331 35.14910126]
[135.86088562 40.34823990]
[145.41928101 47.26078415]
[153.67308044 55.68817902]
[166.20204163 47.44044495]
[178.73100281 39.19271469]
[191.25996399 30.94498062]
[203.78892517 22.69724846]
[205.41818237 7.14477158]
[216.69906616 -3.68461752]
[232.30508423 -4.67761230]
[244.86756897 4.63464880]
[248.45487976 19.85520172]
[241.37319946 33.79736328]
[226.96629333 39.87807846]
[212.03665161 35.22621155]
[199.50769043 43.47394562]
[186.97872925 51.72167587]
[174.44976807 59.96940994]
[161.92080688 68.21714020]
[166.59880066 79.77782440]
[169.13856506 91.98776245]
[169.45854187 104.45494843]
[167.54849243 116.77909851]
[163.46971130 128.56452942]
[157.35314941 139.43287659]
[149.39521790 149.03518677]
[139.85139465 157.06315613]
[129.02807617 163.25904846]
[117.27279663 167.42393494]
[104.96295166 169.42410278]
[92.49375916 169.19532776]
[80.26557159 166.74494934]
[74.48728180 180.58732605]
[68.70899200 194.42970276]
[62.93070984 208.27207947]
[57.30482101 222.17709351]
[51.83200836 236.14306641]
[46.35919952 250.10903931]
[57.36637115 258.50268555]
[65.79955292 269.46347046]
[71.08185577 282.23062134]
[72.85478973 295.92022705]
[71.00259399 309.58642578]
[65.65972900 322.28668213]
[57.20119095 333.14682007]
[46.21615982 341.42123413]
[33.46698761 346.54406738]
[19.83627701 348.16784668]
[6.26578951 346.18710327]
[0.18481602 359.89923096]
[-5.89615726 373.61132812]
[-11.97713089 387.32342529]
[-18.05810356 401.03552246]
[-24.13907623 414.74761963]
[-19.81450653 421.13568115]
[-18.03416252 428.57116699]
[-18.97945786 436.08908081]
[-22.48122406 442.73104858]
[-28.04754829 447.66760254]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[4 20]
[7 16]
[8 15]
[9 14]
[25 137]
[26 136]
[27 135]
[28 134]
[29 133]
[30 132]
[39 121]
[40 120]
[41 119]
[43 118]
[44 117]
[45 116]
[46 115]
[54 70]
[55 69]
[56 68]
[57 67]
[58 66]
[72 83]
[73 82]
[74 81]
[86 102]
[87 101]
[88 100]
[89 99]
[90 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
