%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:50:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGUCGUCUCCUCACUCCGCCUUUUCAAAUUUUUGUAUAACCCCGUGUUGUGUAAAUACAGUUUUUGCUCCGGUG\
) } def
/len { sequence length } bind def

/coor [
[70.35150146 187.83203125]
[69.24108124 202.91917419]
[63.52094269 216.92401123]
[53.75149155 228.47445679]
[40.88983536 236.43894958]
[26.19603157 240.03718567]
[11.10962677 238.91665649]
[-2.89136553 233.18713379]
[-14.43527126 223.40994263]
[-22.39113617 210.54295349]
[-25.97952461 195.84674072]
[-24.84888458 180.76109314]
[-19.10998344 166.76394653]
[-9.32506180 155.22659302]
[3.54725504 147.27934265]
[18.24586868 143.70080566]
[33.33075714 144.84155273]
[47.32405853 150.58982849]
[57.01854706 139.14356995]
[66.71303558 127.69731140]
[76.40752411 116.25105286]
[71.44562531 102.31284332]
[74.09963226 87.75776672]
[83.66167450 76.46788025]
[97.58140564 71.45439148]
[112.14621735 74.05445862]
[121.84070587 62.60820007]
[131.53518677 51.16193771]
[141.22967529 39.71567535]
[137.26913452 18.57347107]
[149.42132568 1.14580798]
[170.10897827 -2.35843849]
[177.24818420 -15.55054474]
[184.38739014 -28.74265099]
[191.52661133 -41.93475723]
[198.66581726 -55.12686539]
[205.80502319 -68.31896973]
[212.94424438 -81.51107788]
[220.08345032 -94.70318604]
[227.22265625 -107.89528656]
[234.36186218 -121.08739471]
[231.18072510 -136.81188965]
[241.60119629 -149.00997925]
[257.62957764 -148.32432556]
[266.97030640 -135.28091431]
[262.45791626 -119.88552094]
[247.55397034 -113.94818115]
[240.41476440 -100.75608063]
[233.27555847 -87.56397247]
[226.13633728 -74.37186432]
[218.99713135 -61.17975998]
[211.85792542 -47.98765182]
[204.71870422 -34.79554749]
[197.57949829 -21.60343933]
[190.44029236 -8.41133404]
[183.30107117 4.78077269]
[188.84854126 12.36384964]
[191.47679138 21.43067551]
[190.83891296 30.89375687]
[186.98162842 39.60718155]
[180.34332275 46.50537109]
[171.70448303 50.73339081]
[162.09594727 51.75282288]
[152.67593384 49.41016388]
[142.98144531 60.85642624]
[133.28695679 72.30268860]
[123.59247589 83.74894714]
[128.55438232 97.68715668]
[125.90036774 112.24223328]
[116.33832550 123.53211975]
[102.41859436 128.54560852]
[87.85378265 125.94554138]
[78.15929413 137.39179993]
[68.46480560 148.83805847]
[58.77032089 160.28431702]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 75]
[19 74]
[20 73]
[21 72]
[26 67]
[27 66]
[28 65]
[29 64]
[32 56]
[33 55]
[34 54]
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
