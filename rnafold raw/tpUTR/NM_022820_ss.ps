%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:36:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUCCCUAAGGACUUCCACUUUGUUCAAGAAAGCUGUAUCCCAGAACACUAGACACUUCAAAUUGUUUUGUGAAUAAAACUCAGAAAUGAAGAUGAGCUUAA\
) } def
/len { sequence length } bind def

/coor [
[-8.37975216 236.11260986]
[-12.65906429 244.57572937]
[-18.66796875 251.89950562]
[-26.11616135 257.73706055]
[-34.64530945 261.81314087]
[-43.84628677 263.93710327]
[-53.27878952 264.01184082]
[-62.49243164 262.03817749]
[-71.04822540 258.11465454]
[-78.53949738 252.43261719]
[-84.61124420 245.26686096]
[-98.28974152 251.42304993]
[-111.96823883 257.57922363]
[-125.64673615 263.73544312]
[-127.82436371 279.00833130]
[-137.93074036 290.66442871]
[-152.74093628 294.98434448]
[-167.52908325 290.58956909]
[-177.57633972 278.88247681]
[-179.67666626 263.59872437]
[-173.15985107 249.61537170]
[-160.10537720 241.39439392]
[-144.67889404 241.55911255]
[-131.80293274 250.05693054]
[-118.12443542 243.90074158]
[-104.44593811 237.74455261]
[-90.76744080 231.58836365]
[-90.79214478 210.11997986]
[-80.40909576 191.25538635]
[-62.14852142 179.72160339]
[-40.52336121 178.44320679]
[-20.91402435 187.80104065]
[-9.39106083 178.19786072]
[2.13190317 168.59466553]
[13.65486717 158.99147034]
[25.17782974 149.38827515]
[28.35389137 142.57464600]
[37.19692993 139.67543030]
[49.00468063 130.42463684]
[60.81243134 121.17385864]
[72.62018585 111.92307281]
[68.81244659 101.35222626]
[69.12465668 89.62950134]
[73.86685181 78.36901855]
[82.71656799 69.24622345]
[94.72045135 63.75122070]
[108.39108276 62.95357895]
[121.89021301 67.31467438]
[129.25903320 54.24943161]
[136.62785339 41.18419266]
[136.66793823 25.36303711]
[149.65957642 18.07836342]
[157.02839661 5.01312304]
[164.39721680 -8.05211735]
[171.76603699 -21.11735725]
[179.13485718 -34.18259811]
[172.55885315 -48.23734283]
[175.53298950 -63.46672821]
[186.91362000 -74.01474762]
[202.32469177 -75.82546997]
[215.84030151 -68.20262909]
[222.26345825 -54.07737732]
[219.12429810 -38.88115311]
[207.62989807 -28.45721245]
[192.20010376 -26.81377792]
[184.83128357 -13.74853897]
[177.46246338 -0.68329829]
[170.09364319 12.38194180]
[162.72482300 25.44718170]
[163.21180725 40.33382416]
[149.69308472 48.55301285]
[142.32427979 61.61825180]
[134.95545959 74.68349457]
[136.96943665 81.90802002]
[149.69999695 73.97499847]
[162.21411133 65.70474243]
[176.26585388 70.95339203]
[180.29377747 85.40246582]
[170.98377991 97.16358948]
[155.99604797 96.56002045]
[140.99742126 96.35708618]
[143.01141357 103.58161926]
[156.07664490 110.95043182]
[169.14189148 118.31925201]
[185.52583313 117.61315918]
[194.09980774 131.59239197]
[186.04365540 145.87631226]
[169.64483643 145.77084351]
[161.77307129 131.38449097]
[148.70782471 124.01567841]
[135.64259338 116.64685822]
[108.24972534 133.60298157]
[81.87097168 123.73082733]
[70.06321716 132.98161316]
[58.25546265 142.23239136]
[46.44771194 151.48318481]
[34.78102493 160.91123962]
[23.25806046 170.51443481]
[11.73509598 180.11763000]
[0.21213222 189.72082520]
[-11.31083107 199.32400513]
[-7.53519297 208.06771851]
[-5.75071859 217.41279602]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 27]
[12 26]
[13 25]
[14 24]
[32 101]
[33 100]
[34 99]
[35 98]
[36 97]
[38 96]
[39 95]
[40 94]
[41 93]
[48 73]
[49 72]
[50 71]
[52 69]
[53 68]
[54 67]
[55 66]
[56 65]
[82 91]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
