%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 01:09:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUCUGUGUGUAAAAUCCAAGACCACGAGACACCAGAAAGUUGGAGAACAAGACUUUGAAAGAAUUUGUGUAAACUAACCCAAUAAAAAGCGUUCCAGGA\
) } def
/len { sequence length } bind def

/coor [
[78.18692780 135.66624451]
[84.10409546 121.88266754]
[93.09197998 109.87509155]
[78.66459656 113.98004150]
[64.23721313 118.08498383]
[49.80982590 122.18992615]
[35.38244247 126.29487610]
[27.82944298 131.74290466]
[20.44731522 130.29672241]
[5.90036058 133.95542908]
[-8.64659405 137.61413574]
[-23.19354820 141.27284241]
[-24.19962692 156.36730957]
[-29.82279396 170.41136169]
[-39.51214981 182.02908325]
[-52.31842804 190.08230591]
[-66.98699951 193.78205872]
[-82.08079529 192.76586914]
[-96.12106323 187.13328552]
[-107.73229980 177.43615723]
[-115.77693939 164.62448120]
[-119.46685791 149.95343018]
[-118.44055176 134.86032104]
[-112.79856873 120.82382202]
[-103.09365082 109.21909332]
[-90.27658844 101.18303680]
[-75.60307312 97.50295258]
[-60.51065445 98.53937531]
[-46.47794342 104.19076538]
[-34.87971878 113.90345001]
[-26.85225296 126.72589111]
[-12.30529976 123.06718445]
[2.24165463 119.40847778]
[16.78860855 115.74977875]
[31.27749634 111.86749268]
[45.70487976 107.76254272]
[60.13226700 103.65760040]
[74.55964661 99.55265808]
[88.98703766 95.44770813]
[92.90540314 90.52412415]
[98.75000763 88.30844879]
[107.03548431 75.80441284]
[115.32095337 63.30038071]
[123.60643005 50.79634476]
[131.89190674 38.29230881]
[125.02684784 21.66848946]
[129.34658813 4.36908388]
[142.98153687 -6.87881517]
[160.47715759 -7.81434965]
[167.97715759 -20.80473137]
[175.47715759 -33.79511261]
[182.97715759 -46.78549194]
[190.47715759 -59.77587509]
[189.97766113 -78.10221863]
[205.34770203 -86.41570282]
[212.44410706 -99.63088989]
[219.54051208 -112.84606934]
[221.70700073 -129.66102600]
[238.46455383 -132.23403931]
[245.57597351 -116.84365082]
[232.75569153 -105.74966431]
[225.65928650 -92.53448486]
[218.56288147 -79.31929779]
[221.74951172 -67.53742218]
[215.80142212 -56.42026520]
[203.46754456 -52.27587509]
[195.96754456 -39.28549194]
[188.46754456 -26.29511261]
[180.96754456 -13.30473137]
[173.46754456 -0.31434986]
[180.07749939 10.09918785]
[181.57289124 22.41581726]
[177.60052490 34.24665833]
[168.87391663 43.26985931]
[157.04591370 47.68622971]
[144.39593506 46.57778168]
[136.11045837 59.08181763]
[127.82498932 71.58585358]
[119.53952026 84.08988953]
[111.25404358 96.59392548]
[125.42244720 91.66886139]
[140.35124207 90.20896149]
[155.20535278 92.29589081]
[169.15391541 97.81291199]
[181.41670227 106.45142365]
[191.30780029 117.72823334]
[198.27391052 131.01254272]
[201.92541504 145.56130981]
[202.05802917 160.56072998]
[198.66436768 175.17178345]
[191.93423462 188.57720947]
[182.24409485 200.02714539]
[170.13595581 208.88114929]
[156.28712463 214.64395142]
[141.47224426 216.99319458]
[126.51997375 215.79750061]
[112.26669312 211.12373352]
[99.50967407 203.23333740]
[88.96249390 192.56764221]
[81.21510315 179.72326660]
[76.70087433 165.41867065]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 39]
[4 38]
[5 37]
[6 36]
[7 35]
[9 34]
[10 33]
[11 32]
[12 31]
[41 80]
[42 79]
[43 78]
[44 77]
[45 76]
[49 70]
[50 69]
[51 68]
[52 67]
[53 66]
[55 63]
[56 62]
[57 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
