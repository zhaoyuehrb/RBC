%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 16:51:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUGCUUUAGAGGGAGGCAGUCAUAUCUCUGUGUGCAGAUAAUAAAAGCAUAUUUCUAAGAGGUU\
) } def
/len { sequence length } bind def

/coor [
[114.40055847 130.16107178]
[99.90953064 133.42240906]
[85.43637085 130.08267212]
[73.83959961 120.80142975]
[60.30334854 127.26438904]
[46.76709366 133.72734070]
[33.23083878 140.19030762]
[19.69458199 146.65325928]
[6.15832758 153.11621094]
[-0.52509975 167.70083618]
[-16.12898064 171.42889404]
[-28.68335533 161.44055176]
[-28.55757904 145.39797974]
[-15.84813881 135.60769653]
[-0.30462873 139.57995605]
[13.23162651 133.11700439]
[26.76788139 126.65404510]
[40.30413437 120.19109344]
[53.84038925 113.72813416]
[67.37664795 107.26517487]
[67.45024872 92.41186523]
[73.95259857 79.05725098]
[85.59944153 69.83893585]
[100.09046936 66.57758331]
[114.56362915 69.91733551]
[126.16040039 79.19857025]
[139.69665527 72.73561096]
[153.23291016 66.27265167]
[166.76916504 59.80969620]
[180.30541992 53.34674072]
[193.84167480 46.88378525]
[206.52915955 38.88204575]
[218.19371033 29.45135307]
[229.85827637 20.02066040]
[241.52284241 10.58996773]
[253.18740845 1.15927470]
[264.85195923 -8.27141857]
[261.80010986 -23.26957512]
[266.07891846 -37.96481705]
[276.70523071 -48.98028946]
[291.23712158 -53.78471375]
[306.33529663 -51.27407074]
[318.53033447 -42.02528763]
[325.01986694 -28.16366386]
[324.31265259 -12.87450409]
[316.57122803 0.32885864]
[303.57449341 8.41238594]
[288.30899048 9.51854420]
[274.28265381 3.39314461]
[262.61810303 12.82383728]
[250.95353699 22.25452995]
[239.28897095 31.68522453]
[227.62440491 41.11591721]
[215.95983887 50.54660797]
[215.96278381 53.22627640]
[214.84568787 56.07305527]
[212.54191589 58.64481735]
[209.15025330 60.48470688]
[204.93481445 61.18022156]
[200.30462646 60.42004013]
[186.76837158 66.88299561]
[173.23211670 73.34595490]
[159.69586182 79.80890656]
[146.15960693 86.27186584]
[132.62335205 92.73482513]
[132.54974365 107.58813477]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 20]
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[26 65]
[27 64]
[28 63]
[29 62]
[30 61]
[31 60]
[32 54]
[33 53]
[34 52]
[35 51]
[36 50]
[37 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
