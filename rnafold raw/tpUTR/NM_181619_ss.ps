%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 06:06:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAUCACUGUCGGAGGACCAUUUGCUUCUAAAAUGACACGUCUGAAGAUAAUGCUGAUUCAAGGAUUCGUACUCCAAGAUUUCUAUAUCCAAGAAUUACAUGCUUGACAGAAUCUUCGACCUC\
) } def
/len { sequence length } bind def

/coor [
[99.53160858 284.21130371]
[86.01073456 291.21884155]
[70.80818939 292.11465454]
[56.55790329 286.74349976]
[45.72883224 276.03598022]
[40.19717407 261.84722900]
[40.92132187 246.63552856]
[47.77581406 233.03642273]
[59.57306671 223.40602112]
[74.26913452 219.41284180]
[76.52252197 204.58306885]
[78.77590179 189.75329590]
[81.02928925 174.92350769]
[83.28266907 160.09373474]
[85.53605652 145.26396179]
[87.78943634 130.43418884]
[82.01988220 127.42358398]
[76.95846558 123.33291626]
[72.80451965 118.32330322]
[69.72165680 112.59203339]
[54.92136765 115.03159332]
[40.12107849 117.47115326]
[25.32078934 119.91070557]
[10.52049923 122.35026550]
[2.70713162 135.89593506]
[-12.00286770 141.20158386]
[-26.66388512 135.76205444]
[-34.35343933 122.14571381]
[-31.44075394 106.78178406]
[-19.30111313 96.92464447]
[-3.66648316 97.22853851]
[8.08094215 107.54997253]
[22.88123131 105.11042023]
[37.68152237 102.67086029]
[52.48181152 100.23130035]
[67.28209686 97.79174805]
[69.80872345 87.20062256]
[75.66392517 78.02062988]
[84.20217133 71.26385498]
[94.48212433 67.67523193]
[105.37042236 67.65041351]
[115.66664124 71.19212341]
[125.65681458 60.00300217]
[135.64698792 48.81388474]
[145.63717651 37.62476730]
[144.92526245 22.06421089]
[155.21612549 10.85916996]
[170.05513000 10.27637386]
[180.04530334 -0.91274309]
[179.33340454 -16.47330093]
[189.62425232 -27.67834282]
[204.46325684 -28.26113892]
[214.45343018 -39.45025635]
[224.44360352 -50.63937378]
[227.87825012 -59.22717667]
[234.82818604 -61.98009872]
[245.09640503 -72.91462708]
[255.36460876 -83.84915924]
[265.63281250 -94.78368378]
[275.90103149 -105.71821594]
[286.16921997 -116.65274811]
[285.84857178 -132.22627258]
[296.41778564 -143.16917419]
[311.26672363 -143.37887573]
[321.53494263 -154.31340027]
[331.80313110 -165.24794006]
[342.07135010 -176.18246460]
[334.40728760 -189.19934082]
[330.72229004 -203.84848022]
[331.31509399 -218.94236755]
[336.13760376 -233.25738525]
[344.79891968 -245.63310242]
[356.59689331 -255.06625366]
[370.57510376 -260.79214478]
[385.60043335 -262.34661865]
[400.45483398 -259.60363770]
[413.93408203 -252.78558350]
[424.94555664 -242.44514465]
[432.59652710 -229.42057800]
[436.26681519 -214.76774597]
[435.65884399 -199.67446899]
[430.82196045 -185.36428833]
[422.14819336 -172.99728394]
[410.34075928 -163.57598877]
[396.35678101 -157.86413574]
[381.32992554 -156.32475281]
[366.47830200 -159.08265686]
[353.00588989 -165.91426086]
[342.73767090 -154.97973633]
[332.46948242 -144.04519653]
[322.20126343 -133.11067200]
[322.92434692 -118.27784729]
[312.66668701 -107.04240417]
[297.10375977 -106.38453674]
[286.83554077 -95.45001221]
[276.56735229 -84.51548004]
[266.29913330 -73.58094788]
[256.03091431 -62.64641953]
[245.76272583 -51.71189117]
[235.63272095 -40.64919281]
[225.64254761 -29.46007729]
[215.65237427 -18.27095985]
[216.74797058 -3.46098924]
[206.77590942 8.02868080]
[191.23442078 9.07743454]
[181.24424744 20.26655197]
[182.33984375 35.07652283]
[172.36778259 46.56619263]
[156.82629395 47.61494827]
[146.83610535 58.80406570]
[136.84593201 69.99317932]
[126.85575104 81.18229675]
[132.66113281 102.93048859]
[123.07697296 123.29787445]
[102.61921692 132.68757629]
[100.36582947 147.51734924]
[98.11244965 162.34712219]
[95.85906219 177.17689514]
[93.60568237 192.00666809]
[91.35229492 206.83645630]
[89.09890747 221.66622925]
[101.94552612 229.84451294]
[110.34967804 242.54450989]
[112.85528564 257.56588745]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 121]
[11 120]
[12 119]
[13 118]
[14 117]
[15 116]
[16 115]
[20 36]
[21 35]
[22 34]
[23 33]
[24 32]
[42 112]
[43 111]
[44 110]
[45 109]
[48 106]
[49 105]
[52 102]
[53 101]
[54 100]
[56 99]
[57 98]
[58 97]
[59 96]
[60 95]
[61 94]
[64 91]
[65 90]
[66 89]
[67 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
