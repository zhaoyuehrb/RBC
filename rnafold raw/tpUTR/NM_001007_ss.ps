%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 12:18:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGGGUCCCUGGGUGACAUGUCAGAUCUUUGUACGUAAUUAAAAAUAUUGUGGCAGGAUUAAUAGCA\
) } def
/len { sequence length } bind def

/coor [
[81.50588226 133.34716797]
[72.54771423 126.46578217]
[59.91215897 134.54925537]
[47.27659988 142.63273621]
[46.23413467 158.00218201]
[36.45584869 169.67430115]
[21.85230064 173.30752563]
[8.07453346 167.71189880]
[-4.56102610 175.79536438]
[-14.64508152 189.42431641]
[-30.53294754 183.50721741]
[-29.24528885 166.60223389]
[-12.64450550 163.15980530]
[-0.00894625 155.07633972]
[0.68606788 140.22187805]
[10.10615635 128.48620605]
[24.80216217 124.50113678]
[39.19311905 129.99717712]
[51.82867813 121.91370392]
[64.46424103 113.83022308]
[62.20174789 94.96437073]
[69.32442474 77.34884644]
[84.06374359 65.35752106]
[102.75997925 61.96780396]
[120.77091980 68.02133942]
[131.25610352 57.29470062]
[141.74128723 46.56805801]
[152.22647095 35.84141541]
[162.71166992 25.11477280]
[173.19685364 14.38813019]
[173.18824768 -1.18870175]
[183.97451782 -11.91767693]
[198.82470703 -11.82988644]
[209.30989075 -22.55652809]
[219.79507446 -33.28317261]
[230.28025818 -44.00981522]
[224.62202454 -58.14856720]
[225.21022034 -73.36611938]
[231.94291687 -87.02593994]
[243.65364075 -96.76138306]
[258.31344604 -100.88571930]
[273.38241577 -98.68438721]
[286.24978638 -90.53878784]
[294.68615723 -77.86017609]
[297.22994995 -62.84521484]
[293.44036865 -48.09533310]
[283.97402954 -36.16603088]
[270.47100830 -29.12413979]
[255.27079773 -28.18970680]
[241.00689697 -33.52462769]
[230.52171326 -22.79798508]
[220.03652954 -12.07134247]
[209.55134583 -1.34469986]
[209.97714233 13.49963474]
[199.49649048 24.52734184]
[183.92349243 24.87331581]
[173.43830872 35.59996033]
[162.95312500 46.32660294]
[152.46792603 57.05324554]
[141.98274231 67.77988434]
[131.49755859 78.50653076]
[136.41241455 88.67739105]
[138.13188171 99.84186554]
[136.50506592 111.02022552]
[131.67474365 121.23149109]
[124.06478119 129.57958984]
[114.34300232 135.33190918]
[103.36254883 137.98365784]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 20]
[3 19]
[4 18]
[8 14]
[9 13]
[25 61]
[26 60]
[27 59]
[28 58]
[29 57]
[30 56]
[33 53]
[34 52]
[35 51]
[36 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
