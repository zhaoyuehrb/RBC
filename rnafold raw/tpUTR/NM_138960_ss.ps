%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 07:11:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGAUGAUGUUCCAAAAACCCAAGUAGUCAGUCCCUUAUGUACUGUGGUAAACCUGUUUAUGUUCACCCCAA\
) } def
/len { sequence length } bind def

/coor [
[115.02429199 263.02883911]
[125.44110107 251.52798462]
[122.23828888 236.87390137]
[119.03547668 222.21981812]
[106.39788055 214.42066956]
[102.94101715 199.60498047]
[111.20716858 186.40238953]
[108.00435638 171.74830627]
[104.80154419 157.09423828]
[89.86472321 156.39222717]
[75.61824799 151.84916687]
[63.03247833 143.77452087]
[52.96467590 132.71826172]
[46.10058975 119.43347168]
[42.90774536 104.82500458]
[43.60361862 89.88790131]
[48.14081573 75.63955688]
[56.21028900 63.05047226]
[67.26240540 52.97812653]
[80.54438019 46.10858154]
[77.34156799 31.45450211]
[74.13874817 16.80042458]
[69.65589905 11.27191925]
[68.99314117 5.23038769]
[71.34827423 0.75053257]
[69.41704559 -14.12462711]
[67.48582458 -28.99978638]
[65.55460358 -43.87494659]
[63.30377197 -58.70511246]
[60.73437500 -73.48341370]
[46.74522400 -80.19782257]
[39.40404129 -93.86846924]
[41.53365707 -109.23871613]
[52.31518936 -120.39837646]
[67.60292816 -123.05635071]
[81.51841736 -116.19057465]
[88.71086884 -102.44109344]
[86.41464233 -87.09485626]
[75.51268005 -76.05281067]
[78.08207703 -61.27450943]
[82.46500397 -55.03511810]
[80.42976379 -45.80617142]
[82.36098480 -30.93100929]
[84.29220581 -16.05584908]
[86.22343445 -1.18069017]
[88.79283142 13.59761143]
[91.99564362 28.25168800]
[95.19845581 42.90576553]
[110.13527679 43.60778046]
[124.38175201 48.15082932]
[136.96751404 56.22547913]
[147.03532410 67.28173828]
[153.89941406 80.56652832]
[157.09225464 95.17499542]
[156.39637756 110.11209869]
[151.85919189 124.36044312]
[143.78970337 136.94952393]
[132.73759460 147.02186584]
[119.45561981 153.89141846]
[122.65843201 168.54550171]
[125.86125183 183.19956970]
[138.88171387 191.74974060]
[141.92106628 206.65667725]
[133.68955994 219.01701355]
[136.89236450 233.67108154]
[140.09518433 248.32516479]
[154.36024475 254.43151855]
[162.28277588 267.77368164]
[160.81639099 283.22131348]
[150.52496338 294.83447266]
[135.36572266 298.14770508]
[121.16773987 291.88696289]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 66]
[3 65]
[4 64]
[7 61]
[8 60]
[9 59]
[20 48]
[21 47]
[22 46]
[25 45]
[26 44]
[27 43]
[28 42]
[29 40]
[30 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
