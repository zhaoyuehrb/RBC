%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 10:31:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCAGAGCAUGAGACUUUUAGUUCAGAGCAGAGCCUGAUGCCUGAGAUCCUGGGUCGUGACCAGCCUGGCUUGCUUGGAAUAAAAUCUUUAGCCAUGACCAUGCUA\
) } def
/len { sequence length } bind def

/coor [
[95.33455658 271.86337280]
[81.60730743 279.09817505]
[66.25406647 276.84924316]
[55.17847061 265.98138428]
[52.63930893 250.67346191]
[59.61294174 236.81172180]
[73.41786957 229.72625732]
[75.59184265 214.88464355]
[77.76582336 200.04301453]
[79.93980408 185.20138550]
[82.11377716 170.35975647]
[84.28775787 155.51814270]
[76.26293182 152.58982849]
[68.75841522 148.50877380]
[61.93868637 143.36444092]
[55.95324707 137.26957703]
[50.93328476 130.35780334]
[46.98883820 122.78058624]
[44.20636368 114.70403290]
[42.64685822 106.30517578]
[42.34449768 97.76811981]
[43.30591202 89.27998352]
[45.51003265 81.02681732]
[32.10554123 74.29483032]
[18.70105171 67.56284332]
[5.29656219 60.83085632]
[-8.10792732 54.09886932]
[-17.33741379 53.00916290]
[-21.80010796 46.97117233]
[-35.00312805 39.85216522]
[-48.20615005 32.73315811]
[-62.13328552 39.57526779]
[-77.41648102 36.89131927]
[-88.17903137 25.71334648]
[-90.28252411 10.33950710]
[-82.91811371 -3.31864452]
[-68.91757202 -10.00926876]
[-53.66439056 -7.15968466]
[-43.02373123 4.13438416]
[-41.08714294 19.53013802]
[-27.88412285 26.64914513]
[-14.68110180 33.76815033]
[-1.37593973 40.69437790]
[12.02855015 47.42636490]
[25.43303871 54.15835571]
[38.83752823 60.89034271]
[52.24201965 67.62232971]
[62.57957840 56.08132172]
[75.61547852 47.70723343]
[90.40972137 43.10391235]
[105.89550781 42.60329819]
[109.35474396 28.00762558]
[112.81398010 13.41195202]
[116.27321625 -1.18372059]
[106.79059601 -13.61810493]
[107.57079315 -29.23621368]
[118.24541473 -40.66365433]
[133.77424622 -42.50473785]
[146.82502747 -33.89015961]
[151.23559570 -18.88746262]
[144.92341614 -4.58046150]
[130.86889648 2.27551746]
[127.40965271 16.87119102]
[123.95041656 31.46686363]
[120.49118042 46.06253815]
[138.97293091 57.45298386]
[151.93716431 74.86695862]
[157.54846191 95.83910370]
[172.52308655 96.71128082]
[187.49771118 97.58345032]
[202.47232056 98.45561981]
[217.44694519 99.32779694]
[223.55807495 90.25491333]
[232.85873413 84.65295410]
[243.57382202 83.51061249]
[253.69200134 86.97304535]
[261.34310913 94.32744598]
[265.14389038 104.14860535]
[279.98553467 106.32257843]
[294.82714844 108.49655914]
[307.35287476 98.85903931]
[323.01364136 100.98413086]
[332.51818848 113.61104584]
[330.22763062 129.24847412]
[317.50094604 138.61898804]
[301.88861084 136.16323853]
[292.65316772 123.33818054]
[277.81155396 121.16420746]
[262.96990967 118.99022675]
[248.45487976 131.77951050]
[228.89253235 129.98672485]
[216.57478333 114.30242157]
[201.60015869 113.43024445]
[186.62553406 112.55807495]
[171.65090942 111.68589783]
[156.67628479 110.81372833]
[151.49440002 126.02815247]
[142.31671143 139.22288513]
[129.85537720 149.37402344]
[115.07735443 155.69390869]
[99.12937927 157.69212341]
[96.95540619 172.53373718]
[94.78142548 187.37536621]
[92.60744476 202.21699524]
[90.43347168 217.05860901]
[88.25949097 231.90023804]
[99.45233154 242.64732361]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 106]
[8 105]
[9 104]
[10 103]
[11 102]
[12 101]
[23 47]
[24 46]
[25 45]
[26 44]
[27 43]
[29 42]
[30 41]
[31 40]
[51 65]
[52 64]
[53 63]
[54 62]
[68 96]
[69 95]
[70 94]
[71 93]
[72 92]
[78 89]
[79 88]
[80 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
