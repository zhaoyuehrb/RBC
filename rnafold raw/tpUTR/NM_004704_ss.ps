%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 21:02:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUCUUAUCCUCCUUAUUUAAGUCCUUCCCAGGCUAUGCCCCACCCUCUUUGUAUUAAAAGCCUCCUCUUUUGGGCCUU\
) } def
/len { sequence length } bind def

/coor [
[60.62940216 237.85400391]
[53.24567795 250.98519897]
[43.12472916 262.14379883]
[30.77421379 270.77005005]
[16.81363106 276.43130493]
[1.94323623 278.84359741]
[-13.09107685 277.88589478]
[-27.53519249 273.60626221]
[-40.66460037 266.21936035]
[-51.82073975 256.09570312]
[-60.44401550 243.74310303]
[-66.10189056 229.78115845]
[-68.51056671 214.91017151]
[-67.54923248 199.87609863]
[-63.26610184 185.43301392]
[-55.87601852 172.30538940]
[-45.74966049 161.15171814]
[-33.39496613 152.53143311]
[-19.43164253 146.87693787]
[-4.56008053 144.47186279]
[10.47376633 145.43684387]
[24.91580772 149.72346497]
[38.04163361 157.11672974]
[48.12175369 146.00857544]
[58.20186996 134.90042114]
[68.28199005 123.79225922]
[61.16283798 107.98615265]
[61.46760178 90.65345764]
[69.13801575 75.10739899]
[82.70784760 64.31967926]
[99.58316040 60.35242844]
[116.53815460 63.96400070]
[125.26053619 51.76071930]
[133.98291016 39.55743790]
[142.70529175 27.35415840]
[151.42767334 15.15087700]
[159.17816162 2.30837321]
[165.91015625 -11.09611607]
[172.64213562 -24.50060654]
[179.37413025 -37.90509415]
[170.01663208 -49.96329117]
[166.82608032 -64.88921356]
[170.43594360 -79.71930695]
[180.12948608 -91.50904083]
[193.98205566 -97.91756439]
[209.24320984 -97.67245483]
[222.88282776 -90.82238007]
[232.19276428 -78.72743225]
[235.32452393 -63.78905869]
[231.65628052 -48.97329712]
[221.91638184 -37.22182465]
[208.03868103 -30.86790276]
[192.77862549 -31.17310715]
[186.04663086 -17.76861763]
[179.31465149 -4.36412859]
[172.58265686 9.04036140]
[173.56634521 11.93491745]
[173.30459595 15.43904591]
[171.54006958 19.01448631]
[168.24183655 22.03401756]
[163.63095093 23.87325859]
[154.90856934 36.07653809]
[146.18618774 48.27981949]
[137.46382141 60.48310089]
[128.74143982 72.68637848]
[135.86935425 83.10344696]
[139.36213684 95.23286438]
[138.86584473 107.84540558]
[134.43074036 119.66286469]
[126.50630188 129.48762512]
[115.89562988 136.32398987]
[103.67404175 139.47917175]
[91.08010864 138.63339233]
[79.39015198 133.87237549]
[69.31002808 144.98052979]
[59.22991180 156.08869934]
[49.14979553 167.19685364]
[57.77905655 179.54527283]
[63.44369888 193.50448608]
[65.85958099 208.37429810]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[23 77]
[24 76]
[25 75]
[26 74]
[32 65]
[33 64]
[34 63]
[35 62]
[36 61]
[37 56]
[38 55]
[39 54]
[40 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
