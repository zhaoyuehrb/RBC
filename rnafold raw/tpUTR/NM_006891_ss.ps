%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:59:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAUGUCCUCUUUUGUUGUUUCUUAAUUUGGAAACUAAUAAAAUAUUUUCUGUGUGUUCCUGGCA\
) } def
/len { sequence length } bind def

/coor [
[140.85932922 330.59674072]
[129.41554260 320.83914185]
[119.84017181 309.24243164]
[112.42417145 296.15908813]
[107.39291382 281.98666382]
[104.89929962 267.15585327]
[105.01910400 252.11734009]
[107.74868011 237.32814026]
[113.00508118 223.23767090]
[120.62857819 210.27412415]
[130.38749695 198.83146667]
[141.98527527 189.25740051]
[134.58702087 176.20880127]
[127.18876648 163.16020203]
[119.79051208 150.11161804]
[112.39225769 137.06301880]
[104.99400330 124.01441956]
[97.59574890 110.96582031]
[89.89363861 98.09424591]
[81.89189911 85.40676880]
[73.89015961 72.71928406]
[65.88842010 60.03180695]
[57.88668442 47.34432602]
[49.88494492 34.65684509]
[34.41761017 31.41074753]
[25.84596252 18.13285637]
[29.25540733 2.70070648]
[42.62318039 -5.73008013]
[58.01842117 -2.15766740]
[66.30740356 11.29849529]
[62.57242584 26.65510559]
[70.57416534 39.34258652]
[78.57590485 52.03006744]
[86.57764435 64.71754456]
[94.57938385 77.40502930]
[102.58112335 90.09250641]
[109.43754578 94.88983154]
[110.64434814 103.56757355]
[118.04260254 116.61616516]
[125.44085693 129.66476440]
[132.83911133 142.71336365]
[140.23736572 155.76194763]
[147.63562012 168.81054688]
[155.03387451 181.85914612]
[169.20457458 176.82307434]
[184.03454590 174.32440186]
[199.07308960 174.43908691]
[213.86322021 177.16363525]
[227.95547485 182.41525269]
[240.92161560 190.03433228]
[252.36759949 199.78935242]
[261.94561768 211.38388062]
[269.36459351 224.46554565]
[274.39904785 238.63682556]
[276.89602661 253.46707153]
[276.77963257 268.50561523]
[274.05340576 283.29544067]
[268.80020142 297.38708496]
[261.17965698 310.35235596]
[251.42332458 321.79724121]
[239.82772827 331.37393188]
[226.74520874 338.79141235]
[212.57336426 343.82427979]
[197.74282837 346.31958008]
[182.70431519 346.20147705]
[167.91479492 343.47357178]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 44]
[13 43]
[14 42]
[15 41]
[16 40]
[17 39]
[18 38]
[19 36]
[20 35]
[21 34]
[22 33]
[23 32]
[24 31]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
