%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 17:55:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUGGCCAAGUAGGUUUUUGUAUCAUAUUAGCCUAAAGAUGAAAGGCUUAUUAUUAUGAUAUAAUCUGUAAUACACUGUAAUUUAAUAAAAGUCUUCAUAAUCAA\
) } def
/len { sequence length } bind def

/coor [
[35.25339890 198.54187012]
[28.66481781 202.14402771]
[21.54930305 204.52223206]
[14.13186455 205.60372925]
[6.64663458 205.35671997]
[-0.67053378 203.79130554]
[-7.58949184 200.95912170]
[-13.89303589 196.95155334]
[-19.38372612 191.89689636]
[-23.89006996 185.95616150]
[-27.27187920 179.31802368]
[-41.95022583 182.40769958]
[-56.62857437 185.49737549]
[-71.30692291 188.58706665]
[-85.98526764 191.67674255]
[-100.66361237 194.76641846]
[-109.31396484 207.72053528]
[-124.24390411 210.64482117]
[-136.54037476 202.31820679]
[-151.21871948 205.40788269]
[-165.89706421 208.49755859]
[-180.15113831 217.67677307]
[-192.91754150 206.52081299]
[-185.73164368 191.16505432]
[-168.98674011 193.81921387]
[-154.30839539 190.72953796]
[-139.63005066 187.63984680]
[-131.73364258 175.06278992]
[-116.89173126 171.72032166]
[-103.75329590 180.08807373]
[-89.07495117 176.99839783]
[-74.39659882 173.90870667]
[-59.71825409 170.81903076]
[-45.03990555 167.72935486]
[-30.36155701 164.63967896]
[-24.00396347 140.93867493]
[-5.42106056 124.76439667]
[19.12304497 121.71280670]
[41.27412796 132.93186951]
[53.46143341 124.18717957]
[65.64873505 115.44248199]
[77.83603668 106.69779205]
[90.02333832 97.95310211]
[94.30131531 90.95577240]
[102.70388031 89.13618469]
[115.14496613 80.75647736]
[127.58605194 72.37677765]
[140.02713013 63.99707794]
[152.46821594 55.61737442]
[157.94873047 48.10408783]
[165.40446472 47.18009567]
[178.08840942 39.17274475]
[190.77233887 31.16539383]
[203.45628357 23.15804291]
[216.14022827 15.15069199]
[228.82415771 7.14334154]
[229.95903015 -8.21954441]
[239.80732727 -19.83265877]
[254.43246460 -23.37800217]
[268.17633057 -17.69961739]
[280.86026001 -25.70696831]
[293.54421997 -33.71431732]
[306.22814941 -41.72166824]
[308.05886841 -52.64905548]
[315.51727295 -60.54016495]
[325.89193726 -62.88553238]
[335.60592651 -59.12955856]
[348.74194336 -66.37144470]
[361.87799072 -73.61332703]
[372.82974243 -86.55532837]
[388.29769897 -79.61427307]
[385.90988159 -62.82931900]
[369.11987305 -60.47729874]
[355.98382568 -53.23541641]
[342.84780884 -45.99353409]
[334.28424072 -28.76399422]
[314.23550415 -29.03772926]
[301.55157471 -21.03037834]
[288.86761475 -13.02302837]
[276.18368530 -5.01567745]
[275.39935303 9.83433342]
[265.90887451 21.51314354]
[251.18916321 25.40976906]
[236.83151245 19.82728195]
[224.14756775 27.83463287]
[211.46363831 35.84198380]
[198.77969360 43.84933472]
[186.09574890 51.85668564]
[173.41181946 59.86403656]
[160.84791565 68.05846405]
[148.40682983 76.43816376]
[135.96574402 84.81786346]
[123.52466583 93.19756317]
[111.08358002 101.57726288]
[98.76803589 110.14040375]
[86.58073425 118.88509369]
[74.39342499 127.62979126]
[62.20612335 136.37448120]
[50.01882172 145.11917114]
[52.62371826 152.21780396]
[53.93113327 159.65872192]
[53.90214157 167.20703125]
[52.53997421 174.62478638]
[49.88985062 181.67861938]
[46.03747177 188.14701843]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 35]
[12 34]
[13 33]
[14 32]
[15 31]
[16 30]
[19 27]
[20 26]
[21 25]
[39 99]
[40 98]
[41 97]
[42 96]
[43 95]
[45 94]
[46 93]
[47 92]
[48 91]
[49 90]
[51 89]
[52 88]
[53 87]
[54 86]
[55 85]
[56 84]
[60 80]
[61 79]
[62 78]
[63 77]
[67 75]
[68 74]
[69 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
