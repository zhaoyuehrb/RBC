%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 08:44:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGCCCCCAGUUCCUCCCCCAGUUCCUCCCAGGAAGCCCAGGAGCCUCACUGGGGCAGACAAUAAACCCUCAGAGCCUCGC\
) } def
/len { sequence length } bind def

/coor [
[172.75466919 234.68708801]
[174.71083069 219.76199341]
[179.63166809 205.53631592]
[187.31568909 192.59255981]
[176.21931458 182.49946594]
[165.12294006 172.40638733]
[154.02656555 162.31329346]
[142.93017578 152.22019958]
[135.68295288 149.99415588]
[131.61412048 141.52905273]
[120.90763092 131.02328491]
[110.20114136 120.51752472]
[92.39627838 121.61516571]
[79.19997406 109.61202240]
[78.61040497 91.78310394]
[67.14003754 82.11714172]
[55.66967392 72.45118713]
[44.19930649 62.78523254]
[30.27647591 68.94284058]
[15.12256622 68.44683838]
[1.74151444 61.44915390]
[-7.23744726 49.38518906]
[-10.07635880 34.67974854]
[-6.26472855 20.25972748]
[-17.73509598 10.59377289]
[-29.20546150 0.92781723]
[-40.67582703 -8.73813820]
[-52.14619446 -18.40409279]
[-68.15447998 -23.98720169]
[-67.22109985 -40.91543579]
[-50.69603729 -44.70473099]
[-42.48023987 -29.87446022]
[-31.00987244 -20.20850372]
[-19.53950691 -10.54254913]
[-8.06913948 -0.87659371]
[3.40122676 8.78936195]
[16.96648788 2.58862376]
[31.94034195 2.89380956]
[45.35171127 9.69793797]
[54.51629257 21.69921494]
[57.57377625 36.54976273]
[53.86526489 51.31486893]
[65.33563232 60.98082352]
[76.80599976 70.64678192]
[88.27635956 80.31273651]
[99.38082123 77.09478760]
[110.64291382 79.70812225]
[119.19550323 87.48741913]
[122.86124420 98.45220184]
[120.70690155 109.81103516]
[131.41339111 120.31679535]
[142.11988831 130.82255554]
[153.02326965 141.12382507]
[164.11964417 151.21691895]
[175.21601868 161.30999756]
[186.31239319 171.40309143]
[197.40878296 181.49618530]
[209.56860352 172.62355042]
[223.26570129 166.38059998]
[237.93919373 163.02299500]
[252.98820496 162.68821716]
[267.79647827 165.38998413]
[281.75765991 171.01765442]
[294.30001831 179.34075928]
[304.90994263 190.01850891]
[313.15298462 202.61363220]
[318.69158936 216.61036682]
[321.29898071 231.43556213]
[320.86834717 246.48214722]
[317.41732788 261.13394165]
[311.08724976 274.79098511]
[302.13732910 286.89404297]
[290.93405151 296.94747925]
[277.93618774 304.53964233]
[263.67602539 309.35958862]
[248.73744202 311.20996094]
[233.73220825 310.01501465]
[219.27476501 305.82366943]
[205.95715332 298.80755615]
[194.32469177 289.25399780]
[184.85374451 277.55416870]
[177.93214417 264.18716431]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 57]
[5 56]
[6 55]
[7 54]
[8 53]
[10 52]
[11 51]
[12 50]
[15 45]
[16 44]
[17 43]
[18 42]
[24 36]
[25 35]
[26 34]
[27 33]
[28 32]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
