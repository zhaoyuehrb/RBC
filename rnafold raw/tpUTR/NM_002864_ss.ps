%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 05:57:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACCAUACAGGCUGUAUAUUUUGGUGGAUUCUCUGUCCUAUACAUUUACUUAGAAGGAAUGGAGUUAUUUGUCUCUAUAAAAUAGACACUAAAAAUAUUUGCUGAAUAAAUAUGUACUUCUGGUCAAACUA\
) } def
/len { sequence length } bind def

/coor [
[204.56733704 464.81375122]
[216.04977417 454.37664795]
[214.28231812 439.48114014]
[212.51486206 424.58563232]
[210.74740601 409.69012451]
[208.97994995 394.79461670]
[206.51103210 379.99920654]
[203.34616089 365.33688354]
[200.18128967 350.67456055]
[197.01641846 336.01223755]
[192.31381226 321.76846313]
[186.12657166 308.10397339]
[179.93933105 294.43948364]
[165.15721130 285.05725098]
[166.99531555 266.77954102]
[160.48706055 253.26499939]
[153.97879028 239.75047302]
[147.47053528 226.23593140]
[141.67886353 221.52960205]
[140.97239685 212.32447815]
[134.78515625 198.65998840]
[128.59791565 184.99551392]
[122.41066742 171.33102417]
[116.22342682 157.66654968]
[110.03618622 144.00207520]
[103.84893799 130.33758545]
[97.66169739 116.67311096]
[69.92787170 100.23667145]
[58.20040131 90.88432312]
[46.47292709 81.53197479]
[34.74545670 72.17963409]
[23.01798439 62.82728195]
[14.26794720 59.88270950]
[11.12740326 53.11292267]
[-4.40237427 54.32278061]
[-15.93122959 44.39604187]
[-16.98893929 29.58331490]
[-28.49224854 19.95658875]
[-39.99555969 10.32986164]
[-51.49886703 0.70313436]
[-64.77242279 8.06365013]
[-79.80909729 10.12829018]
[-94.57531738 6.61782980]
[-107.07405853 -1.99297011]
[-115.61497498 -14.53956985]
[-119.04297638 -29.32514572]
[-116.89446259 -44.35006714]
[-109.45998383 -57.58234024]
[-97.74501038 -67.23240662]
[-83.33388519 -71.99517822]
[-68.17559814 -71.22651672]
[-54.32019043 -65.03039551]
[-43.64147949 -54.24477768]
[-37.58367920 -40.32833099]
[-36.96605682 -25.16314125]
[-41.87213898 -10.80017471]
[-30.36883163 -1.17344820]
[-18.86552238 8.45327854]
[-7.36221218 18.08000565]
[7.40507603 16.51068115]
[19.20820427 26.10968208]
[20.75412941 41.60961151]
[32.37033081 51.09981155]
[44.09780502 60.45215988]
[55.82527542 69.80450439]
[67.55274963 79.15685272]
[79.28022003 88.50920105]
[68.09906769 78.51010895]
[65.37821198 63.75893784]
[72.25629425 50.42882156]
[85.85493469 44.09819031]
[100.48333740 47.41631317]
[110.01973724 58.99460983]
[110.47332001 73.98774719]
[101.65322876 86.12207794]
[111.14343262 74.50587463]
[120.63362885 62.88967133]
[130.12382507 51.27347183]
[139.61402893 39.65727234]
[144.95275879 23.56583595]
[161.89324951 24.24137878]
[165.93370056 40.70682907]
[151.23022461 49.14746857]
[141.74003601 60.76367188]
[132.24983215 72.37987518]
[122.75962830 83.99607086]
[113.26943207 95.61227417]
[111.32617950 110.48586273]
[117.51342010 124.15034485]
[123.70066071 137.81481934]
[129.88790894 151.47930908]
[136.07514954 165.14378357]
[142.26239014 178.80827332]
[148.44963074 192.47274780]
[154.63688660 206.13722229]
[160.98507690 219.72767639]
[167.49333191 233.24221802]
[174.00158691 246.75674438]
[180.50984192 260.27127075]
[192.45658875 265.29611206]
[197.57641602 276.76342773]
[193.60380554 288.25225830]
[199.79106140 301.91674805]
[205.97830200 315.58120728]
[210.44993591 301.26324463]
[221.84399414 291.50747681]
[236.67980957 289.29412842]
[250.42524719 295.29937744]
[258.88131714 307.68869019]
[259.46478271 322.67733765]
[251.99746704 335.68652344]
[238.76048279 342.74215698]
[223.79750061 341.68884277]
[211.67874146 332.84738159]
[214.84361267 347.50970459]
[218.00846863 362.17202759]
[221.17333984 376.83435059]
[224.36814880 380.09082031]
[226.12196350 383.83169556]
[226.46421814 387.52404785]
[225.60102844 390.70336914]
[223.87544250 393.02716064]
[225.64291382 407.92266846]
[227.41036987 422.81817627]
[229.17782593 437.71368408]
[230.94528198 452.60919189]
[244.55136108 460.06936646]
[251.14347839 474.11654663]
[248.18681335 489.34933472]
[236.81826782 499.91040039]
[221.40928650 501.73880005]
[207.88493347 494.13146973]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 126]
[3 125]
[4 124]
[5 123]
[6 122]
[7 117]
[8 116]
[9 115]
[10 114]
[11 104]
[12 103]
[13 102]
[15 99]
[16 98]
[17 97]
[18 96]
[20 95]
[21 94]
[22 93]
[23 92]
[24 91]
[25 90]
[26 89]
[27 88]
[28 67]
[29 66]
[30 65]
[31 64]
[32 63]
[34 62]
[37 59]
[38 58]
[39 57]
[40 56]
[75 87]
[76 86]
[77 85]
[78 84]
[79 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
