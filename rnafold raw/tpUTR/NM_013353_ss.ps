%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 22:16:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUGCAUUUCCCUUUACCAACUAGCGCUGGGAGCACUGGACACUUAAAUCCUCAUCUGUCCUCCUUUCCUGUAAAUAAAAGCCCUUCUAUCCA\
) } def
/len { sequence length } bind def

/coor [
[80.63619232 151.49716187]
[83.00984955 136.68615723]
[87.69493866 122.43659973]
[94.57064056 109.11164093]
[80.02963257 112.79392242]
[65.48863220 116.47621155]
[61.47346115 120.41683197]
[56.79447174 122.10684967]
[52.47819138 121.69207001]
[49.32460403 119.72618103]
[34.49038696 121.95013428]
[19.65616798 124.17408752]
[4.82194948 126.39804077]
[1.83102071 141.25839233]
[-6.06472349 154.19798279]
[-17.91183281 163.65429688]
[-32.27971268 168.48542786]
[-47.43337250 168.10800171]
[-61.54293060 162.56759644]
[-72.90459442 152.53321838]
[-80.14637756 139.21661377]
[-82.39381409 124.22578430]
[-79.37550354 109.37096405]
[-71.45592499 96.44594574]
[-59.59140778 87.01148224]
[-45.21464920 82.20684052]
[-30.06171417 82.61219025]
[-15.96238995 88.17859650]
[-4.61923981 98.23387909]
[2.59799480 111.56381989]
[17.43221283 109.33986664]
[32.26642990 107.11591339]
[47.10065079 104.89196014]
[61.80634689 101.93520355]
[76.34735107 98.25292206]
[90.88835907 94.57064056]
[82.95209503 81.84210205]
[93.29237366 70.97570801]
[106.39881134 78.27107239]
[109.35556030 63.56537247]
[112.31231689 48.85967255]
[115.26907349 34.15397263]
[118.22583008 19.44827461]
[105.58472443 11.00606060]
[97.14072418 -1.63384664]
[94.18146515 -16.54395294]
[97.15822601 -31.45057297]
[105.61705780 -44.08055878]
[118.26806641 -52.50792694]
[133.18205261 -55.44756699]
[148.08474731 -52.45120621]
[160.70358276 -43.97576141]
[169.11430359 -31.31368446]
[172.03433228 -16.39584351]
[169.01835632 -1.49710608]
[160.52632141 11.11058140]
[147.85319519 19.50463676]
[132.93153381 22.40502930]
[129.97477722 37.11072922]
[127.01802063 51.81642914]
[124.06126404 66.52212524]
[121.10450745 81.22782898]
[134.07728577 73.69742584]
[148.07734680 68.31239319]
[162.75260925 65.20815277]
[177.73408508 64.46276093]
[192.64501953 66.09495544]
[207.11045837 70.06369781]
[220.76666260 76.26918793]
[233.27021790 84.55538177]
[244.30671692 94.71390533]
[253.59863281 106.48932648]
[260.91229248 119.58551788]
[266.06381226 133.67317200]
[268.92361450 148.39802551]
[269.41979980 163.38981628]
[267.53991699 178.27156067]
[263.33120728 192.66900635]
[256.89950562 206.22015381]
[248.40657043 218.58421326]
[238.06593323 229.45027161]
[226.13764954 238.54510498]
[212.92166138 245.64001465]
[198.75030518 250.55656433]
[183.97993469 253.17115784]
[168.98196411 253.41801453]
[154.13354492 251.29093933]
[139.80804443 246.84342957]
[126.36573029 240.18730164]
[114.14459229 231.48995972]
[103.45195770 220.97009277]
[94.55671692 208.89224243]
[87.68253326 195.56010437]
[83.00228119 181.30895996]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 36]
[5 35]
[6 34]
[10 33]
[11 32]
[12 31]
[13 30]
[39 62]
[40 61]
[41 60]
[42 59]
[43 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
