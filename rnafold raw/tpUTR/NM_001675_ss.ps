%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 12:56:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGAGGAUAGUCAGGAGCGUCAAUGUGCUUGUACAUAGAGUGCUGUAGCUGUGUGUUCCAAUAAAUUAUUUUGUAGGGAAAGUA\
) } def
/len { sequence length } bind def

/coor [
[171.53198242 196.16333008]
[164.54699707 190.56388855]
[159.06074524 183.47259521]
[155.38388062 175.28065491]
[153.72703552 166.44184875]
[154.18869019 157.44744873]
[156.74946594 148.79887390]
[144.45336914 140.20785522]
[132.15725708 131.61682129]
[119.86114502 123.02579498]
[107.56504059 114.43476868]
[95.84234619 115.75773621]
[86.29828644 108.82357025]
[83.93399048 97.26580811]
[68.25845337 95.12384796]
[62.76463699 81.27944946]
[50.79437637 72.23992920]
[38.82411957 63.20041275]
[26.85385895 54.16089249]
[14.71860504 45.34411240]
[2.42249775 36.75308609]
[-13.32148552 35.19182205]
[-19.32312202 21.55988693]
[-31.61923027 12.96885967]
[-43.91533661 4.37783289]
[-56.21144485 -4.21319437]
[-68.50755310 -12.80422115]
[-84.88346100 -13.67688465]
[-92.07346344 -28.41581154]
[-82.68109131 -41.85885620]
[-66.36842346 -40.17696762]
[-59.91652298 -25.10032845]
[-47.62041855 -16.50930214]
[-35.32431030 -7.91827440]
[-23.02820206 0.67275268]
[-10.73209476 9.26377964]
[4.13238859 10.21055698]
[11.01352501 24.45697975]
[23.30963135 33.04800797]
[30.77464676 34.32783508]
[35.89337921 42.19063568]
[47.86363602 51.23015213]
[59.83389664 60.26967239]
[71.80415344 69.30918884]
[86.62350464 70.80458832]
[92.97351074 85.29554749]
[109.57913971 86.81544495]
[116.15606689 102.13866425]
[128.45217896 110.72969055]
[140.74827576 119.32071686]
[153.04438782 127.91174316]
[165.34049988 136.50277710]
[185.68428040 126.56349945]
[207.96929932 129.88897705]
[224.36392212 145.18421936]
[229.17816162 166.97006226]
[243.60554504 171.07499695]
[258.03292847 175.17994690]
[272.46032715 179.28489685]
[287.85110474 175.61955261]
[297.97509766 186.54446411]
[312.40246582 190.64941406]
[326.82986450 194.75436401]
[341.25723267 198.85929871]
[355.68463135 202.96424866]
[371.44784546 198.44171143]
[383.05654907 210.02488708]
[378.56869507 225.79800415]
[362.60101318 229.53503418]
[351.57968140 217.39163208]
[337.15231323 213.28668213]
[322.72491455 209.18174744]
[308.29754639 205.07679749]
[293.87014771 200.97184753]
[279.51132202 204.93080139]
[268.35537720 193.71228027]
[253.92799377 189.60733032]
[239.50061035 185.50238037]
[225.07321167 181.39744568]
[220.14178467 188.75569153]
[213.61314392 194.76223755]
[205.84672546 199.07781982]
[197.27215576 201.45645142]
[188.36546326 201.75953674]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 52]
[8 51]
[9 50]
[10 49]
[11 48]
[14 46]
[16 44]
[17 43]
[18 42]
[19 41]
[20 39]
[21 38]
[23 36]
[24 35]
[25 34]
[26 33]
[27 32]
[56 79]
[57 78]
[58 77]
[59 76]
[61 74]
[62 73]
[63 72]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
