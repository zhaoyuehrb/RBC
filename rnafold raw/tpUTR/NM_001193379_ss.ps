%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 14:12:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCCCAGUGAGCCAUCCCGUCCCCACCACCCUCCUCCUGCCUCCUGACCCAGGACUGCUGAAUACAAAGAUGUUAAUUUUUAAAAUGUUACUAGUAUAAUUUAUUCUAUGCAUUUUAUAAAAUAAAUAAAGCUUUAGAAAAAUGAA\
) } def
/len { sequence length } bind def

/coor [
[90.72570801 180.00987244]
[78.59688568 177.64984131]
[66.97176361 173.46241760]
[56.12392044 167.54614258]
[46.30865097 160.04023743]
[37.75694275 151.12136841]
[25.32929993 159.52098083]
[12.90165520 167.92060852]
[7.49652910 175.37200928]
[0.11988886 176.36334229]
[-12.48324108 184.49728394]
[-25.08637238 192.63124084]
[-21.77540779 207.40495300]
[-23.71513748 222.39193726]
[-30.65230751 235.78581238]
[-41.73250580 245.97891235]
[-55.60535812 251.75518799]
[-70.58908081 252.43531799]
[-84.87435913 247.95648193]
[-96.74282074 238.87767029]
[-109.34594727 247.01161194]
[-116.34683990 261.84130859]
[-132.71025085 262.92333984]
[-141.60290527 249.14465332]
[-133.87680054 234.67953491]
[-117.47989655 234.40849304]
[-104.87677002 226.27453613]
[-108.26100922 211.72007751]
[-106.45812988 196.85809326]
[-99.66656494 183.48464966]
[-88.68880463 173.22256470]
[-74.83660889 167.32452393]
[-59.77430344 166.52012634]
[-45.31876755 170.92575073]
[-33.22031784 180.02810669]
[-20.61718941 171.89416504]
[-8.01405907 163.76020813]
[4.50203323 155.49296570]
[16.92967796 147.09333801]
[29.35732269 138.69371033]
[20.98621559 115.63372803]
[19.94503021 91.12342834]
[26.33035660 67.43659210]
[13.23514557 60.12117004]
[0.13993396 52.80574799]
[-12.95527744 45.49032211]
[-26.05048943 38.17490005]
[-42.82704544 35.72877502]
[-45.12072754 18.93069649]
[-29.61408234 12.07648182]
[-18.73506546 25.07968712]
[-5.63985348 32.39511108]
[7.45535803 39.71053314]
[20.55056953 47.02595901]
[33.64578247 54.34138489]
[42.33785629 43.76239014]
[52.69615173 34.80845642]
[64.42134857 27.73831367]
[77.17463684 22.75626564]
[90.58750153 20.00627327]
[104.27233887 19.56780052]
[117.83373260 21.45351982]
[130.87979126 25.60893822]
[143.03353882 31.91398239]
[153.94378662 40.18645859]
[163.29525757 50.18732452]
[170.81771851 61.62759018]
[184.61421204 55.74057770]
[198.41070557 49.85356903]
[212.20718384 43.96656036]
[223.48533630 27.31338310]
[242.55012512 30.28967667]
[256.08432007 23.82243156]
[269.61853027 17.35518646]
[283.15274048 10.88794231]
[292.26843262 -2.04321122]
[307.08792114 -0.54935515]
[320.62213135 -7.01659966]
[334.15634155 -13.48384380]
[347.69055176 -19.95108795]
[361.22476196 -26.41833305]
[374.68957520 -33.02885437]
[388.08346558 -39.78190994]
[401.47735596 -46.53496933]
[414.87124634 -53.28802490]
[428.26510620 -60.04108047]
[441.65899658 -66.79413605]
[455.05288696 -73.54719543]
[468.44677734 -80.30024719]
[469.41461182 -95.56493378]
[477.83746338 -108.21216583]
[491.36990356 -114.90087891]
[506.33328247 -113.92450714]
[518.71545410 -105.64519501]
[532.10937500 -112.39824677]
[545.50323486 -119.15130615]
[558.89715576 -125.90435791]
[565.26483154 -140.62957764]
[580.78479004 -144.69291687]
[593.55139160 -134.97732544]
[593.77124023 -118.93577576]
[581.27569580 -108.87397766]
[565.65020752 -112.51047516]
[552.25628662 -105.75741577]
[538.86242676 -99.00436401]
[525.46850586 -92.25130463]
[524.76220703 -77.37290955]
[516.64947510 -64.76181030]
[503.22494507 -57.85908508]
[488.04809570 -58.60760498]
[475.19982910 -66.90636444]
[461.80593872 -60.15330505]
[448.41204834 -53.40024948]
[435.01818848 -46.64719391]
[421.62429810 -39.89413452]
[408.23040771 -33.14107895]
[394.83651733 -26.38802338]
[381.44262695 -19.63496780]
[376.85421753 -13.77459431]
[367.69201660 -12.88412571]
[354.15780640 -6.41688156]
[340.62359619 0.05036270]
[327.08938599 6.51760721]
[313.55517578 12.98485184]
[305.40753174 25.45342445]
[289.61999512 24.42214966]
[276.08578491 30.88939285]
[262.55157471 37.35663986]
[249.01736450 43.82388306]
[246.46133423 53.80458069]
[238.64505005 60.85045624]
[228.01747131 62.42578506]
[218.09419250 57.76305008]
[204.29771423 63.65005875]
[190.50122070 69.53707123]
[176.70472717 75.42407990]
[179.56117249 87.44567108]
[180.54524231 99.76272583]
[179.63375854 112.08535767]
[176.84819031 124.12357330]
[172.25408936 135.59407043]
[165.95957947 146.22689819]
[158.11277771 155.77183533]
[148.89834595 164.00424194]
[138.53315735 170.73037720]
[127.26114655 175.79196167]
[115.34756470 179.06987000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 40]
[7 39]
[8 38]
[10 37]
[11 36]
[12 35]
[20 27]
[21 26]
[43 55]
[44 54]
[45 53]
[46 52]
[47 51]
[67 136]
[68 135]
[69 134]
[70 133]
[72 129]
[73 128]
[74 127]
[75 126]
[77 124]
[78 123]
[79 122]
[80 121]
[81 120]
[82 118]
[83 117]
[84 116]
[85 115]
[86 114]
[87 113]
[88 112]
[89 111]
[94 106]
[95 105]
[96 104]
[97 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
