%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 13:59:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCUCUGAAAGCCCCCAUUCCCUGAGAAUCCUGUUGUUAGUAAAGUGCUUAUUUUUGUAGUUA\
) } def
/len { sequence length } bind def

/coor [
[93.88336182 126.48544312]
[85.10361481 122.73740387]
[78.16112518 116.18503571]
[73.91214752 107.63647461]
[72.88072968 98.14606476]
[75.19408417 88.88430786]
[63.72935104 79.21166992]
[52.26461792 69.53903961]
[40.79988098 59.86640549]
[25.26285362 56.88121414]
[20.52453804 42.76039124]
[9.05980206 33.08775711]
[-2.40493393 23.41512489]
[-15.71227646 27.72859764]
[-29.28612900 24.83177185]
[-39.51065445 15.60823345]
[-43.71831512 2.61178064]
[-40.88529968 -10.63992596]
[-51.86933136 -20.85516357]
[-62.85335922 -31.07040215]
[-73.83738708 -41.28564072]
[-89.85749054 -42.14348602]
[-99.05750275 -55.28652191]
[-94.37995911 -70.63253784]
[-79.41307068 -76.40937805]
[-65.63816071 -68.18555450]
[-63.62215042 -52.26966858]
[-52.63812256 -42.05443192]
[-41.65409088 -31.83919334]
[-30.67006302 -21.62395668]
[-14.85238743 -25.32992935]
[0.25990584 -18.93441010]
[8.78060246 -4.71869564]
[7.26769924 11.95038891]
[18.73243523 21.62302208]
[30.19717026 31.29565430]
[44.91416168 33.58899689]
[50.47251511 48.40167236]
[61.93724823 58.07430267]
[73.40198517 67.74694061]
[84.86672211 77.41957092]
[105.12950134 73.30580139]
[122.42449188 84.63659668]
[126.74525452 104.85624695]
[140.19166565 111.50411987]
[155.99160767 110.68431854]
[163.97157288 123.26086426]
[177.41798401 129.90873718]
[190.86437988 136.55661011]
[204.54096985 129.22648621]
[219.90948486 131.36856079]
[231.06042480 142.15911865]
[233.70600891 157.44900513]
[226.82896423 171.35893250]
[213.07366943 178.54023743]
[197.72929382 176.23159790]
[186.69607544 165.32069397]
[184.21650696 150.00300598]
[170.77011108 143.35513306]
[157.32369995 136.70726013]
[142.48553467 138.00256348]
[133.54379272 124.95052338]
[120.09738159 118.30265045]
[112.53015137 124.12233734]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 41]
[7 40]
[8 39]
[9 38]
[11 36]
[12 35]
[13 34]
[18 30]
[19 29]
[20 28]
[21 27]
[44 63]
[45 62]
[47 60]
[48 59]
[49 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
