%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 13:36:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCCAGCCACCACCAGGCUGAGCAGUGAGGAGAGAAAGUUUCUGCCUGGCCCUGCAUCUGGUUCCAGCCCACCUGCCCUCCCCUUUUUCGGGACUCUGUAUUCCCUCUUGGGCUGACCACAGCUUCUCCCUUUCCCAACCAAUAAAGUAACCACUUUCAGCA\
) } def
/len { sequence length } bind def

/coor [
[70.30508423 116.86347198]
[63.39301682 130.17599487]
[56.48095322 143.48852539]
[49.56888580 156.80105591]
[48.38074875 165.90602112]
[42.39479065 170.30049133]
[35.22899246 183.47817993]
[28.06319427 196.65586853]
[20.89739799 209.83354187]
[26.78730011 224.31950378]
[21.93865776 239.18640137]
[8.64084911 247.41455078]
[-6.82730532 245.11885071]
[-17.16221619 233.38328552]
[-17.48405647 217.74900818]
[-7.64086056 205.59806824]
[7.71971416 202.66775513]
[14.88551140 189.49006653]
[22.05130768 176.31237793]
[29.21710587 163.13468933]
[36.25635910 149.88897705]
[43.16842651 136.57646179]
[50.08049011 123.26393127]
[56.99255753 109.95140839]
[73.36687469 89.49629974]
[92.68029022 89.11724854]
[84.16312408 75.78426361]
[91.15664673 62.63359833]
[90.29509735 47.65836334]
[89.43354797 32.68312454]
[88.57199860 17.70788765]
[84.94047546 9.27436447]
[87.84016418 2.43807745]
[87.26562500 -12.55091476]
[86.69108582 -27.53990746]
[86.11654663 -42.52890015]
[85.54199982 -57.51789474]
[82.07268524 -66.01943207]
[85.10279846 -72.79891968]
[84.81547546 -87.79616547]
[84.52815247 -102.79341125]
[76.22386169 -108.02729797]
[70.93449402 -116.08831787]
[69.49221802 -125.44466400]
[55.47482681 -130.78439331]
[41.45743942 -136.12413025]
[28.53947258 -127.52728271]
[13.03693962 -128.19891357]
[0.91087836 -137.88076782]
[-3.17599320 -152.84996033]
[2.34781075 -167.35055542]
[15.35827446 -175.80676270]
[30.85260963 -174.96701050]
[42.87292862 -165.15417480]
[46.79717255 -150.14152527]
[60.81456375 -144.80178833]
[74.83195496 -139.46205139]
[79.35372162 -143.45956421]
[84.78787994 -146.08569336]
[90.72966003 -147.14480591]
[95.25547028 -161.44573975]
[99.78128052 -175.74668884]
[104.30709076 -190.04763794]
[103.24598694 -196.64984131]
[105.38751221 -201.97737122]
[109.28984833 -204.80371094]
[114.36009979 -218.92080688]
[119.43035126 -233.03791809]
[124.50060272 -247.15501404]
[129.57086182 -261.27212524]
[134.64111328 -275.38922119]
[139.71136475 -289.50631714]
[128.36929321 -308.88079834]
[134.84193420 -330.09338379]
[154.57804871 -339.59902954]
[157.99584961 -354.20446777]
[161.41365051 -368.80990601]
[150.81045532 -384.46582031]
[154.90011597 -402.60089111]
[170.64823914 -411.86782837]
[173.50410461 -426.59344482]
[176.35997009 -441.31906128]
[179.21583557 -456.04470825]
[169.22970581 -468.07846069]
[169.36674500 -483.71542358]
[179.56222534 -495.57232666]
[195.00216675 -498.05068970]
[208.39628601 -489.98028564]
[213.42031860 -475.17175293]
[207.70204163 -460.61718750]
[193.94145203 -453.18884277]
[191.08558655 -438.46319580]
[188.22972107 -423.73757935]
[185.37385559 -409.01196289]
[193.68980408 -401.12182617]
[197.18008423 -390.07662964]
[194.86036682 -378.60510254]
[187.19706726 -369.60076904]
[176.01907349 -365.39208984]
[172.60127258 -350.78668213]
[169.18347168 -336.18124390]
[175.68504333 -331.27328491]
[180.46028137 -324.63186646]
[183.06410217 -316.84170532]
[183.24362183 -308.59597778]
[180.96264648 -300.63473511]
[176.40675354 -293.67843628]
[169.96823120 -288.36276245]
[162.21252441 -285.18051147]
[153.82846069 -284.43606567]
[148.75820923 -270.31896973]
[143.68795776 -256.20187378]
[138.61770630 -242.08476257]
[133.54745483 -227.96766663]
[128.47720337 -213.85055542]
[123.40694427 -199.73345947]
[118.60803223 -185.52183533]
[114.08222961 -171.22088623]
[109.55641937 -156.91993713]
[105.03060913 -142.61898804]
[114.07006836 -121.57869720]
[99.52539825 -103.08074188]
[99.81272125 -88.08348846]
[100.10004425 -73.08624268]
[100.53099823 -58.09243393]
[101.10553741 -43.10344315]
[101.68007660 -28.11444855]
[102.25461578 -13.12545586]
[102.82916260 1.86353648]
[103.54723358 16.84633827]
[104.40878296 31.82157707]
[105.27033234 46.79681396]
[106.13188171 61.77205276]
[114.58741760 74.03390503]
[107.65552521 88.25569916]
[113.77359772 74.56011200]
[126.10694885 66.02263641]
[141.07968140 65.11859894]
[154.35064697 72.11011505]
[162.07211304 84.97008514]
[162.00534058 99.96994019]
[154.16969299 112.76065826]
[140.83700562 119.63375092]
[125.87291718 118.59645081]
[113.61760712 109.95140839]
[120.52967072 123.26393127]
[127.44174194 136.57646179]
[134.35380554 149.88897705]
[141.26586914 163.20150757]
[155.37107849 171.56663513]
[154.90872192 187.95925903]
[140.35444641 195.51606750]
[126.68044281 186.46324158]
[127.95334625 170.11357117]
[121.04128265 156.80105591]
[114.12921143 143.48852539]
[107.21714783 130.17599487]
[100.30508423 116.86347198]
[92.80508423 116.86347198]
[92.80508423 131.86346436]
[92.80484772 146.86346436]
[77.80484772 146.86300659]
[77.80508423 131.86346436]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 24]
[2 23]
[3 22]
[4 21]
[6 20]
[7 19]
[8 18]
[9 17]
[26 135]
[28 133]
[29 132]
[30 131]
[31 130]
[33 129]
[34 128]
[35 127]
[36 126]
[37 125]
[39 124]
[40 123]
[41 122]
[44 57]
[45 56]
[46 55]
[60 120]
[61 119]
[62 118]
[63 117]
[66 116]
[67 115]
[68 114]
[69 113]
[70 112]
[71 111]
[72 110]
[75 101]
[76 100]
[77 99]
[80 94]
[81 93]
[82 92]
[83 91]
[145 158]
[146 157]
[147 156]
[148 155]
[149 154]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
