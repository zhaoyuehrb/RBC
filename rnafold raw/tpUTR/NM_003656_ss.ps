%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 22:40:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCUGGACCUCGGGUCAUGAUCCUCUGCGUGGGAGGGCUUGGGGGCAGCCUGCUCCCCUUCCCUCCCUGAACCGGGAGUUUCUCUGCCCUGUCCCCUCCUCACCUGCUUCCCUACCACUCCUCACUGCAUUUUCCAUACAAAUGUUUCUAUUUUAUUGUUCCUUCUUGUAAUAAAGGGAAGAUAAAACCAUC\
) } def
/len { sequence length } bind def

/coor [
[100.79684448 122.36697388]
[96.27665710 136.66969299]
[91.75646973 150.97242737]
[87.23627472 165.27514648]
[82.71608734 179.57786560]
[92.04557800 191.97706604]
[92.27156830 207.49249268]
[83.30715179 220.15815735]
[68.59934235 225.10383606]
[53.80357742 220.42782593]
[44.60914230 207.92814636]
[44.55147934 192.41117859]
[53.65276337 179.84352112]
[68.41336823 175.05767822]
[72.93355560 160.75495911]
[77.45374298 146.45222473]
[81.97393036 132.14950562]
[86.49411774 117.84678650]
[75.67018890 128.23150635]
[68.65083313 141.48777771]
[56.41946411 150.17073059]
[41.58981323 152.42491150]
[27.33081245 147.76863098]
[16.68947029 137.19688416]
[11.93972969 122.96875000]
[14.09656143 108.12462616]
[22.69907379 95.83654785]
[35.90899658 88.73036194]
[50.90350723 88.32457733]
[64.47743225 94.70511627]
[79.36909485 96.50471497]
[67.16320801 87.78597260]
[54.95732498 79.06723785]
[42.68160629 70.44709778]
[30.33684921 61.92612839]
[17.99209213 53.40515900]
[5.64733315 44.88418579]
[-6.69742489 36.36321640]
[-19.04218292 27.84224510]
[-31.67553329 33.37374496]
[-45.28406906 31.94841576]
[-56.32100296 24.04536438]
[-61.96303558 11.81787872]
[-60.83222580 -1.49228120]
[-73.03810883 -10.21102142]
[-85.24398804 -18.92976189]
[-97.44987488 -27.64850044]
[-109.65575409 -36.36724091]
[-121.86164093 -45.08597946]
[-134.06752014 -53.80472183]
[-150.03015137 -48.23021317]
[-166.01292419 -53.21438599]
[-175.78157043 -66.60579681]
[-175.64956665 -83.01493073]
[-187.99432373 -91.53590393]
[-200.33908081 -100.05686951]
[-212.68383789 -108.57784271]
[-225.02859497 -117.09881592]
[-237.37336731 -125.61978912]
[-255.75143433 -126.66909790]
[-262.66198730 -142.79399109]
[-275.14239502 -151.11497498]
[-287.62283325 -159.43597412]
[-302.57946777 -154.87164307]
[-316.95050049 -161.03666687]
[-323.95037842 -175.02006531]
[-320.27395630 -190.21934509]
[-307.65713501 -199.45785522]
[-292.05722046 -198.37344360]
[-280.83996582 -187.47814941]
[-279.30184937 -171.91639709]
[-266.82141113 -163.59541321]
[-254.34098816 -155.27441406]
[-242.41311646 -157.33712769]
[-231.94456482 -150.49555969]
[-228.85238647 -137.96453857]
[-216.50762939 -129.44357300]
[-204.16287231 -120.92259979]
[-191.81811523 -112.40162659]
[-179.47335815 -103.88066101]
[-167.12860107 -95.35968781]
[-154.99287415 -100.94207764]
[-141.57615662 -99.78632355]
[-130.39549255 -92.08795166]
[-124.43477631 -79.77154541]
[-125.34877777 -66.01060486]
[-113.14289856 -57.29186249]
[-100.93701935 -48.57312393]
[-88.73113251 -39.85438538]
[-76.52525330 -31.13564301]
[-64.31936646 -22.41690445]
[-52.11348343 -13.69816399]
[-36.72374725 -19.39316177]
[-20.81126595 -14.75102234]
[-10.69703293 -1.40960968]
[-10.52121162 15.49748611]
[1.82354641 24.01845741]
[14.16830444 32.53942871]
[26.51306152 41.06039810]
[38.85781860 49.58137131]
[51.20257950 58.10234070]
[58.50304794 59.31632233]
[63.67606735 66.86135101]
[75.88195038 75.58009338]
[88.08782959 84.29883575]
[96.63721466 80.58047485]
[105.93908691 81.20761871]
[113.91197205 86.03993225]
[118.77177429 93.99609375]
[133.77128601 93.87526703]
[148.77079773 93.75443268]
[163.77030945 93.63360596]
[178.76982117 93.51277924]
[193.76934814 93.39194489]
[208.76885986 93.27111816]
[195.54760742 86.18600464]
[181.69052124 80.44311523]
[170.89373779 70.03015900]
[164.65327454 56.38990402]
[163.83374023 41.41231155]
[168.54872131 27.17261124]
[178.14491272 15.64381504]
[191.29269409 8.42330837]
[206.17036438 6.51154041]
[220.71652222 10.17339897]
[232.91571045 18.90150833]
[241.07763672 31.48653412]
[244.07142639 46.18466568]
[233.25929260 56.58166504]
[247.73242188 52.64105606]
[262.20556641 48.70044327]
[276.67868042 44.75983429]
[291.15182495 40.81922150]
[305.62496948 36.87861252]
[312.01184082 22.60479164]
[326.10198975 15.82235527]
[341.24249268 19.73375893]
[350.28445435 32.49216080]
[348.95855713 48.07342911]
[337.89080811 59.12057114]
[322.30709839 60.41746140]
[309.56558228 51.35174561]
[295.09243774 55.29235458]
[280.61929321 59.23296738]
[266.14617920 63.17357635]
[251.67303467 67.11418915]
[237.19990540 71.05480194]
[235.87771606 78.43733215]
[250.64277649 81.08171082]
[265.50238037 79.03419495]
[272.04138184 92.53387451]
[261.22296143 102.92433167]
[247.99839783 95.84677887]
[233.23333740 93.20240021]
[231.91114807 100.58493805]
[244.11703491 109.30368042]
[256.32290649 118.02241516]
[268.52880859 126.74115753]
[280.73468018 135.45989990]
[292.94055176 144.17863464]
[305.14645386 152.89736938]
[319.82174683 147.85606384]
[334.64764404 152.43566895]
[343.92324829 164.87524414]
[344.08190918 180.39149475]
[335.06262207 193.01814270]
[320.33346558 197.89996338]
[305.55813599 193.15979004]
[296.41802979 180.62033081]
[296.42770386 165.10325623]
[284.22183228 156.38452148]
[272.01593018 147.66578674]
[259.81005859 138.94703674]
[247.60417175 130.22830200]
[235.39828491 121.50955963]
[223.19241333 112.79081726]
[208.88967896 108.27062988]
[193.89016724 108.39145660]
[178.89065552 108.51229095]
[163.89114380 108.63311768]
[148.89163208 108.75394440]
[133.89212036 108.87477875]
[118.89260101 108.99560547]
[132.11384583 116.08071899]
[146.89039612 118.66011810]
[158.92808533 127.60965729]
[165.65455627 141.01690674]
[165.63244629 156.01689148]
[158.86647034 169.40426636]
[146.80245972 178.31826782]
[132.01835632 180.85409546]
[117.67337799 176.46983337]
[106.83290100 166.10238647]
[101.81341553 151.96716309]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[3 16]
[4 15]
[5 14]
[31 105]
[32 104]
[33 103]
[34 101]
[35 100]
[36 99]
[37 98]
[38 97]
[39 96]
[44 92]
[45 91]
[46 90]
[47 89]
[48 88]
[49 87]
[50 86]
[54 81]
[55 80]
[56 79]
[57 78]
[58 77]
[59 76]
[61 73]
[62 72]
[63 71]
[109 183]
[110 182]
[111 181]
[112 180]
[113 179]
[114 178]
[115 177]
[129 147]
[130 146]
[131 145]
[132 144]
[133 143]
[134 142]
[155 176]
[156 175]
[157 174]
[158 173]
[159 172]
[160 171]
[161 170]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
