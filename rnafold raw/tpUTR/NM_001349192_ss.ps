%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:47:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAGGAGACAAGUUCCAUGGGAUACAACCUCCCUCUUGUUUUGUUUGUCUCUCCUUUUCUUUUGUUACUGUUCUUGCUGCUAGAACUUUUUUAAAUAAACUUUUUUUCAAUGUGAUUA\
) } def
/len { sequence length } bind def

/coor [
[227.55101013 107.50000000]
[212.55101013 107.50000000]
[197.55101013 107.50000000]
[182.55101013 107.50000000]
[167.55101013 107.50000000]
[152.55101013 107.50000000]
[137.55101013 107.50000000]
[122.55100250 107.50000000]
[107.55100250 107.50000000]
[92.59724426 108.67688751]
[77.78192139 111.02340698]
[62.96659470 113.36991882]
[48.15126801 115.71643829]
[44.54459000 130.45643616]
[35.59346390 142.65972900]
[22.68701363 150.48515320]
[7.80812025 152.76684570]
[-6.77118349 149.18792725]
[-18.83666611 140.32397461]
[-26.56817055 127.55083466]
[-41.38349533 129.89735413]
[-56.19882202 132.24386597]
[-71.01414490 134.59037781]
[-78.91246796 148.08670044]
[-93.65550995 153.29981995]
[-108.28206635 147.76828003]
[-115.88591003 134.10388184]
[-112.87675476 118.75856018]
[-100.67541504 108.97789764]
[-85.04300690 109.38002014]
[-73.36066437 119.77506256]
[-58.54533768 117.42854309]
[-43.73001099 115.08202362]
[-28.91468620 112.73551178]
[-25.50870705 98.19836426]
[-16.77286148 86.03981018]
[-4.01307011 78.13079071]
[10.84268188 75.70298767]
[25.53563309 79.15709686]
[37.81968307 87.99706268]
[45.80475235 100.90111542]
[60.62007523 98.55459595]
[75.43540192 96.20807648]
[90.25072479 93.86156464]
[79.32825470 83.58052826]
[78.63323975 68.59664154]
[88.55710602 57.34867096]
[103.51083374 56.17136765]
[115.07262421 65.72777557]
[116.73099518 80.63582611]
[107.55100250 92.50000000]
[122.55100250 92.50000000]
[137.55101013 92.50000000]
[152.55101013 92.50000000]
[167.55101013 92.50000000]
[182.55101013 92.50000000]
[197.55101013 92.50000000]
[212.55101013 92.50000000]
[227.55101013 92.50000000]
[231.18049622 71.86471558]
[238.86990356 52.37957382]
[250.30560303 34.83441544]
[265.02209473 19.94005203]
[282.42105103 8.29946518]
[301.79559326 0.38339609]
[322.35897827 -3.48868680]
[343.27667236 -3.16148329]
[363.70004272 1.34991074]
[382.80090332 9.86069107]
[399.80508423 22.02391243]
[414.02380371 37.34463501]
[426.60385132 29.17505074]
[439.18389893 21.00546646]
[451.76397705 12.83588028]
[464.34402466 4.66629457]
[466.07006836 -10.87573910]
[477.41812134 -21.63470078]
[493.03002930 -22.53053474]
[505.53430176 -13.14025879]
[509.02679443 2.10232854]
[501.85848999 16.00014114]
[487.41400146 21.99106026]
[472.51361084 17.24635315]
[459.93356323 25.41593933]
[447.35348511 33.58552551]
[434.77343750 41.75511169]
[422.19338989 49.92469406]
[426.95205688 59.73083496]
[430.65615845 69.98282623]
[433.26461792 80.56762695]
[434.74850464 91.36846924]
[435.09124756 102.26622009]
[434.28887939 113.14063263]
[432.35012817 123.87171173]
[429.29617310 134.34103394]
[425.16058350 144.43301392]
[419.98876953 154.03623962]
[413.83767700 163.04467773]
[406.77502441 171.35882568]
[398.87860107 178.88682556]
[390.23541260 185.54551697]
[380.94073486 191.26126099]
[371.09701538 195.97085571]
[360.81280518 199.62216187]
[350.20147705 202.17475891]
[339.38012695 203.60029602]
[328.46810913 203.88285828]
[317.58581543 203.01916504]
[306.85333252 201.01855469]
[296.38909912 197.90295410]
[286.30865479 193.70657349]
[276.72326660 188.47552490]
[267.73880005 182.26737976]
[259.45446777 175.15051270]
[251.96180725 167.20329285]
[245.34361267 158.51330566]
[239.67304993 149.17631531]
[235.01281738 139.29525757]
[231.41452026 128.97908020]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 59]
[2 58]
[3 57]
[4 56]
[5 55]
[6 54]
[7 53]
[8 52]
[9 51]
[10 44]
[11 43]
[12 42]
[13 41]
[20 34]
[21 33]
[22 32]
[23 31]
[71 87]
[72 86]
[73 85]
[74 84]
[75 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
