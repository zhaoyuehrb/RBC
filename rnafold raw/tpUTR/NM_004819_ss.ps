%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 20:08:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGGCUCGAGGGGGAAAGGGGGUGGGACAGGGACUCGGGGCUGGGGGACGGGGCGGGGCUUGACCUGCGGGUGCUUUGCCUUAAAAAGAAAUAAAAGAUGUGAACUUGGGCAAGUUA\
) } def
/len { sequence length } bind def

/coor [
[166.56993103 359.98681641]
[160.42137146 345.97061157]
[161.50230408 330.70330811]
[169.56434631 317.69323730]
[182.75489807 309.92999268]
[181.96325684 294.95089722]
[181.17163086 279.97180176]
[180.38000488 264.99270630]
[179.58836365 250.01361084]
[178.79673767 235.03451538]
[178.00511169 220.05541992]
[172.77157593 205.99803162]
[163.57484436 194.14813232]
[154.37811279 182.29823303]
[140.46240234 176.98764038]
[138.11372375 161.34173584]
[128.91699219 149.49183655]
[119.72025299 137.64193726]
[110.52351379 125.79204559]
[93.14870453 127.00062561]
[78.45220947 117.65408325]
[72.17920685 101.40618896]
[76.78194427 84.60858154]
[66.97264099 73.26055908]
[57.16334152 61.91253281]
[47.35403824 50.56451035]
[37.54473877 39.21648788]
[22.66653252 33.83600998]
[20.19702721 19.14755058]
[10.38772678 7.79952860]
[0.57842642 -3.54849434]
[-9.23087406 -14.89651775]
[-22.09396935 -16.63657188]
[-30.02802277 -26.39618301]
[-29.16129112 -38.54051590]
[-38.66762161 -50.14352036]
[-48.17395020 -61.74652100]
[-57.68028259 -73.34952545]
[-71.22286987 -73.14246368]
[-82.22850800 -80.69670868]
[-86.76869202 -93.04174805]
[-83.38201904 -105.54943848]
[-92.57875061 -117.39933777]
[-101.77548981 -129.24923706]
[-117.44866943 -132.67427063]
[-124.41342163 -147.12666321]
[-117.32698059 -161.51979065]
[-101.62545776 -164.81245422]
[-89.35372162 -154.47882080]
[-89.92559052 -138.44596863]
[-80.72885132 -126.59607697]
[-71.53211975 -114.74617767]
[-54.82545090 -113.39957428]
[-44.00193405 -100.16490173]
[-46.07727814 -82.85585785]
[-36.57094955 -71.25285339]
[-27.06461906 -59.64984894]
[-17.55828857 -48.04684448]
[-0.86280465 -42.81802750]
[2.11714888 -24.70581818]
[11.92644978 -13.35779476]
[21.73575020 -2.00977182]
[31.54504967 9.33825111]
[45.72163010 13.90704250]
[48.89276123 29.40718651]
[58.70206070 40.75521088]
[68.51136017 52.10323334]
[78.32066345 63.45125580]
[88.12996674 74.79927826]
[100.03720093 72.14371490]
[111.93730164 74.83106995]
[121.54779053 82.34591675]
[127.02534485 93.24686432]
[127.31935120 105.44309235]
[122.37341309 116.59531403]
[131.57014465 128.44520569]
[140.76689148 140.29510498]
[149.96362305 152.14500427]
[164.53713989 158.30319214]
[166.22801208 173.10150146]
[175.42474365 184.95140076]
[184.62147522 196.80130005]
[184.06869507 181.81149292]
[187.17413330 167.13647461]
[193.75172424 153.65554810]
[203.40734863 142.17648315]
[215.56245422 133.38708496]
[229.48870850 127.81399536]
[244.35168457 125.79116058]
[259.26080322 127.43977356]
[273.32275391 132.66105652]
[285.69494629 141.14216614]
[295.63604736 152.37490845]
[302.55038452 165.68623352]
[306.02371216 180.27856445]
[305.84786987 195.27754211]
[302.03341675 209.78442383]
[294.80889893 222.93000793]
[284.60720825 233.92662048]
[272.03961182 242.11534119]
[257.85913086 247.00553894]
[242.91543579 248.30418396]
[228.10397339 245.93345642]
[214.31217957 240.03543091]
[202.36648560 230.96348572]
[192.98420715 219.26379395]
[193.77583313 234.24288940]
[194.56745911 249.22198486]
[195.35910034 264.20108032]
[196.15072632 279.18017578]
[196.94235229 294.15927124]
[197.73399353 309.13836670]
[211.66934204 315.46804810]
[221.05776978 327.55587769]
[223.74191284 342.62417603]
[219.10494995 357.21038818]
[208.21243286 367.96267700]
[193.56738281 372.41024780]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 112]
[6 111]
[7 110]
[8 109]
[9 108]
[10 107]
[11 106]
[12 82]
[13 81]
[14 80]
[16 78]
[17 77]
[18 76]
[19 75]
[23 69]
[24 68]
[25 67]
[26 66]
[27 65]
[29 63]
[30 62]
[31 61]
[32 60]
[35 58]
[36 57]
[37 56]
[38 55]
[42 52]
[43 51]
[44 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
