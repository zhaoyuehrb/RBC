%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 12:45:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUACGUUCUGUGUUAGAGUCAAAGCGCUAGGUUCAUAUCAACUUAGUAGUGUACAGCAGUGAAGAAAAACAUUAUUACAUGCCCAGUGUGUCAAACA\
) } def
/len { sequence length } bind def

/coor [
[111.40980530 199.83764648]
[108.59909058 185.10333252]
[105.78836823 170.36903381]
[102.97764587 155.63471985]
[100.16693115 140.90040588]
[97.35620880 126.16609955]
[88.79865265 125.92182922]
[80.21331024 122.78542328]
[72.59505463 116.74680328]
[61.03735733 126.30816650]
[49.47966003 135.86952209]
[37.92195892 145.43087769]
[29.57178116 160.18591309]
[13.08182621 156.24665833]
[12.30225754 139.31063843]
[28.36060143 133.87318420]
[39.91830063 124.31182861]
[51.47599792 114.75046539]
[63.03369522 105.18910980]
[63.97555542 90.21870422]
[53.70734787 79.28417206]
[43.26865768 68.51228333]
[32.66205597 57.90567780]
[20.78613663 60.23974228]
[9.40047550 56.50651550]
[1.37608409 47.77189255]
[-1.32472372 36.34675598]
[1.87271011 25.17637825]
[-8.04696751 13.92471123]
[-17.96664619 2.67304540]
[-27.88632393 -8.57862091]
[-37.80600357 -19.83028603]
[-47.72568130 -31.08195305]
[-57.64535904 -42.33361816]
[-67.56503296 -53.58528519]
[-83.35189056 -54.32738113]
[-93.92820740 -66.07118988]
[-93.01924896 -81.84931946]
[-81.16427612 -92.30088043]
[-65.39663696 -91.22515106]
[-55.07099533 -79.26034546]
[-56.31336975 -63.50496292]
[-46.39369202 -52.25329590]
[-36.47401428 -41.00162888]
[-26.55433655 -29.74996376]
[-16.63465691 -18.49829865]
[-6.71497965 -7.24663258]
[3.20469809 4.00503349]
[13.12437630 15.25669956]
[31.29703522 15.18260288]
[44.10318756 28.51599503]
[43.26865768 47.29907608]
[53.87525940 57.90567780]
[60.95793915 60.45521927]
[64.64187622 69.01596832]
[74.91008759 79.95050049]
[101.95074463 70.85717010]
[122.55012512 86.46684265]
[137.07887268 82.73649597]
[151.60762024 79.00614929]
[166.07598877 75.04804993]
[180.48039246 70.86318207]
[194.88479614 66.67831421]
[209.28919983 62.49345016]
[220.38278198 51.21324539]
[234.76333618 55.09252930]
[249.16773987 50.90766144]
[256.56091309 36.93925858]
[271.69021606 32.36978912]
[285.57968140 39.91024399]
[289.98892212 55.08700180]
[282.30206299 68.89596558]
[267.07952881 73.14451599]
[253.35260010 65.31206512]
[238.94819641 69.49693298]
[228.88491821 80.47781372]
[213.47406006 76.89785767]
[199.06965637 81.08272552]
[184.66525269 85.26758575]
[170.26084900 89.45245361]
[164.61456299 94.43080902]
[155.33796692 93.53489685]
[140.80921936 97.26524353]
[126.28047180 100.99559021]
[125.11164856 107.81407928]
[122.20525360 114.09188080]
[117.76240540 119.39462280]
[112.09051514 123.35538483]
[114.90123749 138.08969116]
[117.71195984 152.82400513]
[120.52267456 167.55830383]
[123.33339691 182.29261780]
[126.14411926 197.02693176]
[139.88186646 204.49742126]
[145.55551147 219.06944275]
[140.48611450 233.86253357]
[127.06731415 241.89183044]
[111.63504028 239.36616516]
[101.47595215 227.47807312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 93]
[2 92]
[3 91]
[4 90]
[5 89]
[6 88]
[9 19]
[10 18]
[11 17]
[12 16]
[20 56]
[21 55]
[22 53]
[23 52]
[28 49]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
[34 43]
[35 42]
[58 84]
[59 83]
[60 82]
[61 80]
[62 79]
[63 78]
[64 77]
[66 75]
[67 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
