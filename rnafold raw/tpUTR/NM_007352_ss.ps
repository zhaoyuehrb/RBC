%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 18:59:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCAAGGCCCAGCUGGCAGUGCUGAUCGAUCCCACAUCCUGAAUAAAGAAUAAAGAUCUCUCAGAAAAUUCCAA\
) } def
/len { sequence length } bind def

/coor [
[100.34729767 152.98855591]
[93.66232300 139.56056213]
[92.41775513 124.61228943]
[96.78916931 110.26544189]
[83.59706116 117.40465546]
[78.99100494 132.28491211]
[65.51062775 139.33715820]
[51.35296631 134.85427856]
[38.16086197 141.99349976]
[24.96875572 149.13270569]
[19.03141785 164.03665161]
[3.63602829 168.54902649]
[-9.40739059 159.20831299]
[-10.09304237 143.17993164]
[2.10504532 132.75946045]
[17.82954407 135.94059753]
[31.02165031 128.80139160]
[44.21375656 121.66217804]
[48.20435333 107.35795593]
[61.48132324 99.92985535]
[76.45784760 104.21254730]
[89.64995575 97.07333374]
[100.25656128 86.46673584]
[107.39576721 73.27462769]
[114.53498077 60.08252335]
[121.67418671 46.89041519]
[117.39149475 31.91389084]
[124.81960297 18.63692093]
[139.12382507 14.64632320]
[146.26303101 1.45421708]
[153.40223694 -11.73788929]
[160.54145813 -24.92999458]
[151.16276550 -35.84475708]
[146.12867737 -49.29404831]
[146.03598022 -63.62417984]
[150.87528992 -77.08077240]
[160.03465271 -88.02353668]
[172.37690735 -95.12622070]
[186.38078308 -97.53733063]
[200.32847595 -94.98214722]
[208.00674438 -107.86795807]
[203.88455200 -123.12519073]
[211.83053589 -136.78669739]
[227.13049316 -140.74736023]
[240.70722961 -132.65737915]
[244.50590515 -117.31639862]
[236.27284241 -103.82595825]
[220.89256287 -100.18968201]
[213.21427917 -87.30387115]
[222.82556152 -74.87322998]
[226.99739075 -59.68462753]
[225.07485962 -44.01284409]
[217.31809998 -30.21648598]
[204.86744690 -20.38300896]
[189.57595825 -16.01290512]
[173.73356628 -17.79078484]
[166.59434509 -4.59867811]
[159.45513916 8.59342766]
[152.31593323 21.78553391]
[156.79879761 35.94319916]
[149.74655151 49.42356873]
[134.86630249 54.02962875]
[127.72708893 67.22173309]
[120.58787537 80.41384125]
[113.44866180 93.60594940]
[127.79749298 89.23432159]
[142.74571228 90.47963715]
[156.17337036 97.16529083]
[166.17617798 108.34312439]
[171.33554077 122.42790222]
[170.91975403 137.42213440]
[164.98779297 151.19935608]
[154.38093567 161.80569458]
[140.60340881 167.73696899]
[125.60915375 168.15199280]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 22]
[5 21]
[8 18]
[9 17]
[10 16]
[23 65]
[24 64]
[25 63]
[26 62]
[29 59]
[30 58]
[31 57]
[32 56]
[40 49]
[41 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
