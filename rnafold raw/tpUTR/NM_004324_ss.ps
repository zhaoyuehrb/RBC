%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:02:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAAUCCCCGAUUCAUCUACCCUGCUGACCUCCCAGUGACCCCUGACCUCACUGUGACCUUGACUUGAUUAGUGCCUUCUGCCCUCCCUGGAGCCUCCACUGCCUCUGGAAUUGCUCAAGUUCAUUGAUGACCCUCUGACCCUAGCUCUUUCCUUUUUUUUUUUU\
) } def
/len { sequence length } bind def

/coor [
[86.66033173 359.52310181]
[81.02948761 345.59750366]
[77.22568512 331.06616211]
[75.31139374 316.16772461]
[75.31804657 301.14678955]
[77.24552917 286.25006104]
[81.06220245 271.72210693]
[86.70537567 257.80151367]
[94.08239746 244.71685791]
[103.07212067 232.68302917]
[113.52693176 221.89761353]
[125.27515411 212.53771973]
[138.12387085 204.75703430]
[132.05741882 191.03851318]
[125.99096680 177.31997681]
[119.92451477 163.60144043]
[113.85806274 149.88290405]
[107.38066864 151.24330139]
[100.78265381 151.76618958]
[94.17184448 151.44300842]
[87.65629578 150.27905273]
[81.34248352 148.29335022]
[75.33361053 145.51834106]
[69.72787476 141.99938965]
[64.61690521 137.79400635]
[60.08423615 132.97093201]
[56.20394135 127.60897064]
[53.03944016 121.79578400]
[50.64245987 115.62636566]
[49.05216599 109.20155334]
[48.29455948 102.62635803]
[33.36166382 101.20907593]
[18.89217186 107.60784912]
[6.95289803 98.70262909]
[-7.97999620 97.28535461]
[-22.91288948 95.86807251]
[-37.84578323 94.45079803]
[-52.77867889 93.03352356]
[-67.71157074 91.61624146]
[-77.16010284 103.81168365]
[-91.70967865 108.94133759]
[-106.71759033 105.36834717]
[-117.39485931 94.23284149]
[-120.33441162 79.08811951]
[-114.59824371 64.76680756]
[-102.01675415 55.83878708]
[-86.60463715 55.15295029]
[-73.27986145 62.92815018]
[-66.29429626 76.68334961]
[-51.36140060 78.10062408]
[-36.42850876 79.51790619]
[-21.49561310 80.93518066]
[-6.56271935 82.35245514]
[8.37017536 83.76973724]
[21.77156830 77.26958466]
[34.77894211 86.27618408]
[49.71183777 87.69345856]
[55.73410416 73.15077972]
[65.84807587 61.08989334]
[79.11887360 52.62565231]
[94.31980896 48.54044724]
[110.04579163 49.21188736]
[115.05735016 35.07384491]
[120.06891632 20.93580246]
[125.08047485 6.79776049]
[130.09204102 -7.34028196]
[135.10360718 -21.47832489]
[140.11515808 -35.61636734]
[137.43318176 -51.20859146]
[148.97808838 -60.61944199]
[153.98965454 -74.75748444]
[159.00122070 -88.89552307]
[164.01278687 -103.03356934]
[161.33079529 -118.62579346]
[172.87571716 -128.03665161]
[177.88726807 -142.17468262]
[168.03573608 -153.87487793]
[165.38085938 -168.83644104]
[170.53703308 -183.02377319]
[182.02539062 -192.66087341]
[196.69621277 -195.23626709]
[201.70776367 -209.37431335]
[195.11196899 -216.62411499]
[191.65411377 -225.73300171]
[191.77598572 -235.41728210]
[195.41801453 -244.32872009]
[202.03353882 -251.24229431]
[210.67041016 -255.22459412]
[220.10791016 -255.75964355]
[226.17436218 -269.47817993]
[232.24081421 -283.19671631]
[238.30726624 -296.91525269]
[239.18328857 -313.84655762]
[255.69541931 -317.69180298]
[263.96142578 -302.88943481]
[252.02580261 -290.84878540]
[245.95935059 -277.13024902]
[239.89289856 -263.41171265]
[233.82644653 -249.69319153]
[242.82225037 -231.38081360]
[235.36132812 -212.07852173]
[215.84580994 -204.36274719]
[210.83424377 -190.22471619]
[220.60777283 -178.98443604]
[223.46179199 -164.26333618]
[218.53150940 -149.99594116]
[207.04638672 -140.04663086]
[192.02531433 -137.16311646]
[187.01374817 -123.02507782]
[190.05419922 -108.44410706]
[178.15081787 -98.02200317]
[173.13926697 -83.88396454]
[168.12770081 -69.74591827]
[163.11613464 -55.60787964]
[166.15658569 -41.02690125]
[154.25320435 -30.60480309]
[149.24163818 -16.46676254]
[144.23008728 -2.32871938]
[139.21852112 11.80932331]
[134.20695496 25.94736481]
[129.19538879 40.08540726]
[124.18383026 54.22344971]
[140.70840454 68.01287079]
[150.19787598 87.33020782]
[151.01231384 108.83709717]
[143.01095581 128.81678772]
[127.57659149 143.81645203]
[133.64305115 157.53498840]
[139.70950317 171.25352478]
[145.77595520 184.97206116]
[151.84240723 198.69058228]
[166.24377441 194.42105103]
[181.07289124 192.02821350]
[196.08624268 191.55139160]
[211.03730774 192.99839783]
[225.68058777 196.34548950]
[239.77560425 201.53768921]
[253.09089661 208.48973083]
[265.40783691 217.08746338]
[276.52420044 227.18971252]
[286.25735474 238.63058472]
[294.44757080 251.22221375]
[300.96029663 264.75781250]
[305.68859863 279.01513672]
[308.55484009 293.76007080]
[309.51199341 308.75048828]
[308.54425049 323.74020386]
[305.66760254 338.48312378]
[300.92919922 352.73709106]
[294.40692139 366.26809692]
[286.20782471 378.85391235]
[276.46655273 390.28790283]
[265.34307861 400.38229370]
[253.02006531 408.97134399]
[239.69984436 415.91397095]
[225.60116577 421.09619141]
[210.95553589 424.43295288]
[196.00344849 425.86938477]
[180.99041748 425.38195801]
[166.16300964 422.97863770]
[151.76466370 418.69891357]
[138.03182983 412.61306763]
[125.19001007 404.82101440]
[113.45008087 395.45071411]
[103.00482178 384.65603638]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 131]
[14 130]
[15 129]
[16 128]
[17 127]
[31 57]
[32 56]
[34 54]
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[62 122]
[63 121]
[64 120]
[65 119]
[66 118]
[67 117]
[68 116]
[70 114]
[71 113]
[72 112]
[73 111]
[75 109]
[76 108]
[81 103]
[82 102]
[89 99]
[90 98]
[91 97]
[92 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
