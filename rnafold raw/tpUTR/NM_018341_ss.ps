%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 10:34:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUUGUAAGUCAGGAUGCUUUUAAUUUUAACAGAUUUUAACAGCGUGUAAAUUAAAAACCCAAAGACAG\
) } def
/len { sequence length } bind def

/coor [
[131.00755310 239.96455383]
[124.35768127 226.51914978]
[120.63603973 211.98815918]
[120.00350952 197.00840759]
[108.51284790 206.65022278]
[97.02217865 216.29203796]
[85.53150940 225.93385315]
[82.70649719 241.72621155]
[68.53012848 249.23689270]
[53.87731171 242.70433044]
[49.98842621 227.13973999]
[59.84669495 214.48297119]
[75.88970184 214.44319153]
[87.38036346 204.80137634]
[98.87103271 195.15956116]
[110.36170197 185.51774597]
[114.55913544 171.11698914]
[110.04854584 156.81123352]
[105.53795624 142.50549316]
[101.02737427 128.19973755]
[96.51678467 113.89397430]
[86.33901215 104.30729675]
[89.17745972 90.61660767]
[84.66687012 76.31085205]
[80.15628815 62.00510025]
[75.64569855 47.69934464]
[61.90758514 40.35755157]
[57.53699875 25.78522873]
[64.62094116 12.73327923]
[60.11035156 -1.57247460]
[47.66066360 -12.24661636]
[50.94544220 -28.31342316]
[66.58558655 -33.24474335]
[78.49185944 -21.96765518]
[74.41610718 -6.08306170]
[78.92669678 8.22269249]
[92.21581268 14.85103989]
[96.99398041 29.29485512]
[89.95145416 43.18875885]
[94.46204376 57.49451447]
[98.97262573 71.80027008]
[103.48321533 86.10602570]
[113.66098785 95.69270325]
[110.82254028 109.38339233]
[115.33312988 123.68914795]
[119.84371185 137.99490356]
[124.35430145 152.30065918]
[128.86488342 166.60641479]
[137.45150757 154.30722046]
[148.39878845 144.05261230]
[161.23219299 136.28706360]
[175.39544678 131.34719849]
[190.27462769 129.44714355]
[205.22474670 130.66925049]
[219.59780884 134.96055603]
[232.77076721 142.13502502]
[244.17263794 151.88169861]
[253.30915833 163.77807617]
[259.78433228 177.30850220]
[263.31744385 191.88645935]
[263.75540161 206.88006592]
[261.07916260 221.63938904]
[255.40475464 235.52467346]
[246.97814941 247.93403625]
[236.16459656 258.32958984]
[223.43284607 266.26068115]
[209.33476257 271.38357544]
[194.48144531 273.47619629]
[179.51673889 272.44781494]
[165.08930969 268.34304810]
[151.82453918 261.33978271]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 16]
[5 15]
[6 14]
[7 13]
[17 48]
[18 47]
[19 46]
[20 45]
[21 44]
[23 42]
[24 41]
[25 40]
[26 39]
[29 36]
[30 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
