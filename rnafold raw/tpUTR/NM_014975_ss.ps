%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 15:53:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAGGGGGUCAUCGGCCCCGCGCUGUACAGCCUCCGUAUACAUAUGUACACAUAUAAAUAAAGUGCGUCCGUGCUGCGUGA\
) } def
/len { sequence length } bind def

/coor [
[29.42473221 274.39303589]
[18.32835579 284.48611450]
[3.45308685 286.41650391]
[-9.85193443 279.48999023]
[-16.80222511 266.19738770]
[-14.89846420 251.31869507]
[-27.39018822 259.62271118]
[-39.88191223 267.92672729]
[-52.37363434 276.23077393]
[-64.86535645 284.53479004]
[-77.35707855 292.83880615]
[-87.20035553 306.64266968]
[-103.18963623 301.00537109]
[-102.19890594 284.08038330]
[-85.66110992 280.34710693]
[-73.16938019 272.04306030]
[-60.67766190 263.73904419]
[-48.18593597 255.43501282]
[-35.69421387 247.13099670]
[-23.20248985 238.82696533]
[-12.10611248 228.73387146]
[-2.65895510 217.08264160]
[6.78820276 205.43141174]
[16.23536110 193.78018188]
[18.24119186 179.02125549]
[32.94262314 173.17501831]
[42.38978195 161.52378845]
[51.83694077 149.87255859]
[61.28409958 138.22132874]
[62.97438049 120.86270142]
[80.00162506 114.16614532]
[89.00111389 102.16576385]
[97.77189636 89.99723053]
[99.26654816 74.24678040]
[112.87297058 68.18753052]
[110.25361633 52.83250427]
[119.08898926 40.44739914]
[133.74380493 38.04487228]
[142.28273010 25.71253204]
[150.82167053 13.38019276]
[148.20231628 -1.97483039]
[157.03768921 -14.35993671]
[171.69248962 -16.76246262]
[180.23143005 -29.09480286]
[188.77035522 -41.42714310]
[197.30929565 -53.75948334]
[205.84822083 -66.09182739]
[206.65161133 -82.47128296]
[221.35998535 -89.72356415]
[234.84263611 -80.38815308]
[233.22978210 -64.06851196]
[218.18057251 -57.55289078]
[209.64163208 -45.22055054]
[201.10270691 -32.88821030]
[192.56376648 -20.55587006]
[184.02482605 -8.22352982]
[186.93270874 6.33943129]
[178.44869995 18.96781921]
[163.15400696 21.91912651]
[154.61506653 34.25146484]
[146.07614136 46.58380508]
[148.98400879 61.14676666]
[140.50000000 73.77515411]
[125.20531464 76.72646332]
[124.32142639 91.59481812]
[110.10424042 98.53616333]
[108.40307617 106.64005280]
[101.00149536 111.16526031]
[92.00200653 123.16564178]
[93.02968597 136.18675232]
[85.07922363 146.03558350]
[72.93533325 147.66848755]
[63.48817062 159.31971741]
[54.04101562 170.97094727]
[44.59385681 182.62217712]
[41.91230011 198.21447754]
[27.88659286 203.22734070]
[18.43943405 214.87857056]
[8.99227715 226.52980042]
[-0.45488074 238.18103027]
[14.53713226 237.69160461]
[27.11357498 245.86676025]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[11 15]
[21 80]
[22 79]
[23 78]
[24 77]
[26 75]
[27 74]
[28 73]
[29 72]
[31 69]
[32 68]
[33 66]
[35 64]
[38 61]
[39 60]
[40 59]
[43 56]
[44 55]
[45 54]
[46 53]
[47 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
