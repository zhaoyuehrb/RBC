%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 01:33:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGGAAGAUAAAGAGCCUUUGGUACCGCAAGCCCUGUCAUCUGUGAGUGUGGCACAGUGAAGGCCUGGAGAGUCAUGACCUAGGCCCUGUGAAGUCAAGUAUUUUUACCAAGUAAAAAGAUUGGCAAUAAAACAUUUCCACAUAGUACAUG\
) } def
/len { sequence length } bind def

/coor [
[2.80795121 252.92205811]
[-11.27039623 247.74517822]
[-18.87671852 234.81677246]
[-16.56456375 219.99772644]
[-28.89584732 228.53819275]
[-41.22713089 237.07864380]
[-48.16671371 251.29669189]
[-63.03496170 252.18241882]
[-75.36624146 260.72286987]
[-87.69753265 269.26333618]
[-90.91041565 275.15570068]
[-95.88593292 278.05950928]
[-100.71502686 277.88903809]
[-113.38654327 285.91604614]
[-120.90399933 299.83718872]
[-135.79606628 300.11175537]
[-148.46759033 308.13876343]
[-151.91967773 313.89425659]
[-157.01020813 316.59133911]
[-161.82823181 316.22274780]
[-174.81861877 323.72274780]
[-187.80900574 331.22274780]
[-191.65684509 346.55148315]
[-205.25944519 354.59786987]
[-220.54663086 350.58819580]
[-228.44877625 336.90127563]
[-224.27767944 321.65734863]
[-210.50798035 313.90032959]
[-195.30900574 318.23236084]
[-182.31861877 310.73236084]
[-169.32823181 303.23236084]
[-156.49458313 295.46722412]
[-143.82307434 287.44024658]
[-137.21195984 274.09323120]
[-121.41353607 273.24450684]
[-108.74202728 265.21752930]
[-96.23799133 256.93203735]
[-83.90670776 248.39158630]
[-71.57541656 239.85113525]
[-65.51785278 226.24395752]
[-49.76758957 224.74736023]
[-37.43630600 216.20690918]
[-25.10502243 207.66644287]
[-13.41881466 198.26258850]
[-2.43801165 188.04388428]
[8.54279041 177.82516479]
[12.74481392 160.81378174]
[30.68021202 156.77000427]
[41.44889069 146.32798767]
[52.21757126 135.88597107]
[62.98624802 125.44396973]
[73.75492859 115.00196075]
[84.52360535 104.55995178]
[89.36341858 90.36219788]
[87.21484375 75.51687622]
[85.06626129 60.67155457]
[82.91768646 45.82622910]
[80.76910400 30.98090744]
[77.86197662 27.56794930]
[76.38095093 23.78243828]
[76.26418304 20.13098526]
[77.28778839 17.04529953]
[79.10558319 14.83472538]
[78.18217468 -0.13682446]
[77.25875854 -15.10837460]
[76.33534241 -30.07992363]
[75.41193390 -45.05147552]
[74.48851776 -60.02302551]
[73.56510162 -74.99457550]
[69.89406586 -83.42779541]
[72.77964020 -90.28240204]
[59.78806686 -98.76760864]
[54.29661560 -113.28047943]
[58.41686249 -128.24053955]
[70.56448364 -137.89532471]
[86.06848145 -138.53237915]
[98.96723938 -129.90673828]
[104.30093384 -115.33514404]
[100.01863861 -100.42066956]
[87.76699829 -90.89823151]
[88.53665161 -75.91798401]
[89.46006775 -60.94643784]
[90.38348389 -45.97488785]
[91.30689240 -31.00333786]
[92.23030853 -16.03178787]
[93.15372467 -1.06023800]
[94.07713318 13.91131210]
[95.61442566 28.83232880]
[97.76300812 43.67765045]
[99.91159058 58.52297211]
[102.06016541 73.36829376]
[104.20874786 88.21362305]
[106.88360596 88.28647614]
[109.66082764 88.97673798]
[112.39804077 90.32115173]
[127.17015839 87.71643066]
[141.94227600 85.11170197]
[156.71438599 82.50698090]
[171.48651123 79.90225983]
[177.91441345 68.02406311]
[189.84475708 62.12081146]
[202.80184937 64.15612030]
[212.06796265 73.16120148]
[226.89044189 70.86032867]
[241.71292114 68.55944824]
[256.53540039 66.25857544]
[271.35787964 63.95770264]
[286.18035889 61.65682602]
[301.00283813 59.35595322]
[315.72708130 50.95157623]
[327.87908936 62.77381134]
[319.88287354 77.72362518]
[303.30371094 74.17843628]
[288.48123169 76.47930908]
[273.65875244 78.78018188]
[258.83627319 81.08105469]
[244.01379395 83.38193512]
[229.19131470 85.68280792]
[214.36883545 87.98368073]
[205.06156921 101.95787811]
[188.20079041 104.96549988]
[174.09123230 94.67437744]
[159.31910706 97.27909851]
[144.54699707 99.88381958]
[129.77488708 102.48854065]
[115.00276184 105.09326935]
[129.96374512 106.17447662]
[143.09126282 113.43177795]
[151.96366882 125.52641296]
[154.94429016 140.22729492]
[151.48327637 154.82255554]
[142.21910095 166.61978149]
[128.86070251 173.44277954]
[113.87230682 174.03288269]
[100.01883698 168.28125000]
[89.85583496 157.24887085]
[85.25805664 142.97090149]
[87.07367706 128.08119202]
[94.96561432 115.32862854]
[84.19693756 125.77063751]
[73.42826080 136.21264648]
[62.65958023 146.65466309]
[51.89089966 157.09666443]
[41.12221909 167.53868103]
[40.13226700 180.43920898]
[30.89615822 188.91656494]
[18.76149750 188.80596924]
[7.78069544 199.02468872]
[-3.20010710 209.24339294]
[11.77212048 210.15574646]
[22.77316475 220.35266113]
[24.81718826 235.21273804]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 43]
[5 42]
[6 41]
[8 39]
[9 38]
[10 37]
[13 36]
[14 35]
[16 33]
[17 32]
[20 31]
[21 30]
[22 29]
[44 149]
[45 148]
[46 147]
[48 144]
[49 143]
[50 142]
[51 141]
[52 140]
[53 139]
[54 92]
[55 91]
[56 90]
[57 89]
[58 88]
[63 87]
[64 86]
[65 85]
[66 84]
[67 83]
[68 82]
[69 81]
[71 80]
[95 126]
[96 125]
[97 124]
[98 123]
[99 122]
[103 119]
[104 118]
[105 117]
[106 116]
[107 115]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
