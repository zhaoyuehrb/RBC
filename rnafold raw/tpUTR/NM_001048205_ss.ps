%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 05:43:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUAGAGUCCAUUUACAAAGCUGCCAGGAAACCGGCCACUUCUAGUAAACCACGUCGUGCCUCACUGGGUCCUGCUUACCUCAUUUCUGAAUGUGCAUUUCCAGCCUUCUUGCUCUCAGAGCUAUUGUUCAAGCAGAAAACAAGCUGCUUUUAUUACAGUA\
) } def
/len { sequence length } bind def

/coor [
[75.84828186 116.99946594]
[61.79174423 122.23527527]
[47.73520279 127.47107697]
[41.10510635 141.56645203]
[26.77518845 146.67607117]
[13.37826347 140.26841736]
[-0.67827767 145.50422668]
[-2.16169906 160.65548706]
[-10.04425049 173.60740662]
[-22.71672249 181.81890869]
[-37.63647842 183.70622253]
[-51.83753967 178.94815063]
[-62.52022552 168.53921509]
[-76.57676697 173.77502441]
[-90.63330841 179.01083374]
[-104.68984985 184.24664307]
[-118.74638367 189.48245239]
[-130.81610107 205.58888245]
[-149.72265625 201.67070007]
[-163.56698608 207.44432068]
[-177.41130066 213.21794128]
[-183.49327087 227.55834961]
[-197.61563110 233.21641541]
[-211.24954224 227.32980347]
[-225.09387207 233.10342407]
[-238.93818665 238.87704468]
[-245.69361877 245.09802246]
[-253.10539246 244.62568665]
[-267.05841064 250.13142395]
[-279.57269287 261.56948853]
[-294.02804565 252.71063232]
[-289.51705933 236.36782837]
[-272.56414795 236.17840576]
[-258.61114502 230.67266846]
[-244.71180725 225.03273010]
[-230.86749268 219.25910950]
[-217.02316284 213.48548889]
[-211.61157227 199.65615845]
[-197.65370178 193.60366821]
[-183.18492126 199.37362671]
[-169.34060669 193.59999084]
[-155.49627686 187.82637024]
[-152.44934082 178.01170349]
[-144.31646729 171.37528992]
[-133.65193176 170.31509399]
[-123.98219299 175.42590332]
[-109.92565155 170.19009399]
[-95.86911011 164.95429993]
[-81.81256866 159.71849060]
[-67.75602722 154.48268127]
[-66.48597717 139.62158203]
[-58.85810471 126.73262787]
[-46.33927536 118.39956665]
[-31.38284683 116.31979370]
[-16.94796181 120.95887756]
[-5.91408348 131.44767761]
[8.14245701 126.21187592]
[14.08298588 112.60137177]
[28.26373100 107.09127808]
[42.49939728 113.41453552]
[56.55593872 108.17873383]
[70.61248016 102.94292450]
[69.44688416 86.70861053]
[77.53594971 70.46981812]
[94.28699493 59.51317978]
[116.15250397 58.35005951]
[118.45617676 43.52801132]
[120.75984955 28.70596504]
[123.06352997 13.88391685]
[125.36720276 -0.93812972]
[116.20456696 -10.84941769]
[114.46404266 -24.03786087]
[120.56053925 -35.64174652]
[132.06123352 -41.51375198]
[134.65013123 -56.28865051]
[137.23902893 -71.06354523]
[126.04421997 -79.49370575]
[119.61372375 -91.87059784]
[119.15587616 -105.74449921]
[124.70317078 -118.39704895]
[135.11709595 -127.37387085]
[148.32128906 -130.96063232]
[151.19445801 -145.68287659]
[154.06762695 -160.40513611]
[148.23136902 -175.73062134]
[158.79391479 -188.27513123]
[174.88940430 -185.13395691]
[179.96018982 -169.53846741]
[168.78988647 -157.53196716]
[165.91671753 -142.80970764]
[163.04353333 -128.08744812]
[175.47479248 -117.79840088]
[181.06610107 -102.56121826]
[178.20758057 -86.48904419]
[167.58406067 -73.97123718]
[152.01393127 -68.47463989]
[149.42503357 -53.69974518]
[146.83612061 -38.92485046]
[157.07470703 -25.61005592]
[154.48757935 -8.67317009]
[140.18925476 1.36554587]
[137.88557434 16.18759346]
[135.58189392 31.00963974]
[133.27822876 45.83168793]
[130.97454834 60.65373230]
[136.30334473 65.93141937]
[145.43107605 54.02828979]
[153.59313965 41.44335556]
[168.32727051 44.25501633]
[171.28147888 58.96123123]
[158.77554321 67.24477386]
[146.96092224 76.48679352]
[152.28971863 81.76448059]
[167.08888245 79.31807709]
[181.88803101 76.87167358]
[196.68719482 74.42527008]
[211.32814026 65.87662506]
[223.59570312 77.57888794]
[215.74678040 92.60655212]
[199.13360596 89.22442627]
[184.33444214 91.67082977]
[169.53527832 94.11723328]
[154.73612976 96.56363678]
[150.04591370 110.81150818]
[160.49809265 121.57032013]
[170.95027161 132.32913208]
[181.40245056 143.08793640]
[191.85462952 153.84674072]
[202.30680847 164.60556030]
[222.33682251 163.78007507]
[236.35601807 177.68251038]
[235.71781921 197.11250305]
[246.77427673 207.24932861]
[257.83071899 217.38613892]
[268.88717651 227.52294922]
[279.94360352 237.65975952]
[291.00006104 247.79656982]
[306.17907715 244.57518005]
[320.33889771 250.92175293]
[328.03479004 264.39590454]
[326.30752563 279.81655884]
[315.82128906 291.25415039]
[300.60821533 294.31066895]
[286.51809692 287.81085205]
[278.96881104 274.25402832]
[280.86325073 258.85302734]
[269.80679321 248.71620178]
[258.75033569 238.57939148]
[247.69390869 228.44258118]
[236.63745117 218.30577087]
[225.58100891 208.16896057]
[215.74446106 211.37945557]
[205.38511658 210.18286133]
[196.40097046 204.73036194]
[190.46643066 195.95909119]
[188.72033691 185.43159485]
[191.54798889 175.05773926]
[181.09580994 164.29891968]
[170.64363098 153.54011536]
[160.19145203 142.78131104]
[149.73928833 132.02249146]
[139.28710938 121.26368713]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 62]
[2 61]
[3 60]
[6 57]
[7 56]
[13 50]
[14 49]
[15 48]
[16 47]
[17 46]
[19 42]
[20 41]
[21 40]
[24 37]
[25 36]
[26 35]
[28 34]
[29 33]
[66 105]
[67 104]
[68 103]
[69 102]
[70 101]
[74 98]
[75 97]
[76 96]
[82 91]
[83 90]
[84 89]
[113 123]
[114 122]
[115 121]
[116 120]
[124 162]
[125 161]
[126 160]
[127 159]
[128 158]
[129 157]
[132 151]
[133 150]
[134 149]
[135 148]
[136 147]
[137 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
