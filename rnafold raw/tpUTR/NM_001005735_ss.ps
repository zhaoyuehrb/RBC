%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 00:17:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCCGUGGUUUGAACACGAAAGAAAUGUACCUUCUUUCACUCUGUCAUCUUUCUUUUCUUUGAGUCUGUUUUUUUAUAGUUUGUAUUUUAAUUAUGGGAAUAAUUGCUUUUUCACAGUCACUGAUGUACAAUUAAAAACCUGAUGGAACCUGG\
) } def
/len { sequence length } bind def

/coor [
[93.84513855 302.18362427]
[99.17150116 287.70489502]
[111.49387360 278.42251587]
[110.27910614 263.47177124]
[109.06433868 248.52104187]
[107.84956360 233.57031250]
[106.63479614 218.61958313]
[105.11727142 203.69654846]
[103.29761505 188.80732727]
[101.47795868 173.91810608]
[99.65830231 159.02888489]
[97.83864594 144.13966370]
[91.84865570 143.43428040]
[86.01050568 141.91987610]
[80.43292999 139.62463379]
[75.21981812 136.59130859]
[70.46828461 132.87643433]
[66.26682281 128.54916382]
[62.69370270 123.69012451]
[48.85009766 129.46546936]
[35.00648880 135.24081421]
[21.16288567 141.01614380]
[7.31928015 146.79148865]
[-6.52432537 152.56683350]
[-20.36793137 158.34217834]
[-24.85943604 173.32084656]
[-37.95654678 181.86483765]
[-53.47520447 179.93994141]
[-64.08797455 168.45503235]
[-64.78383636 152.83293152]
[-55.23421860 140.44993591]
[-39.94816208 137.15289307]
[-26.14327431 144.49858093]
[-12.29966831 138.72323608]
[1.54393661 132.94789124]
[15.38754177 127.17254639]
[29.23114777 121.39720154]
[43.07475281 115.62185669]
[56.91835785 109.84651184]
[56.53230667 92.02871704]
[63.21561813 75.50732422]
[75.88135529 62.96929932]
[92.46962738 56.45375824]
[110.28260040 57.02035522]
[116.19793701 43.23598862]
[122.11327362 29.45162010]
[127.88861847 15.60801506]
[133.52337646 1.70659339]
[139.15812683 -12.19482803]
[144.79289246 -26.09625053]
[132.05139160 -34.94128418]
[121.59124756 -46.38462067]
[113.93021393 -59.85524368]
[109.44651031 -74.68190765]
[108.36009979 -90.12657928]
[110.72191620 -105.42118073]
[116.41150665 -119.80577087]
[125.14311981 -132.56631470]
[136.48010254 -143.07015991]
[149.85671997 -150.79730225]
[164.60639954 -155.36627197]
[179.99487305 -156.55284119]
[195.25686646 -154.30108643]
[200.60873413 -168.31385803]
[205.96058655 -182.32662964]
[211.31245422 -196.33938599]
[200.91525269 -207.45962524]
[196.39567566 -221.93237305]
[198.59904480 -236.87109375]
[207.03533936 -249.32058716]
[219.98692322 -256.84161377]
[234.85803223 -257.98873901]
[240.20988464 -272.00152588]
[245.56173706 -286.01428223]
[250.91360474 -300.02703857]
[256.26547241 -314.03979492]
[261.61730957 -328.05258179]
[266.96917725 -342.06533813]
[272.32104492 -356.07809448]
[277.67288208 -370.09088135]
[283.02474976 -384.10363770]
[288.37661743 -398.11639404]
[279.79095459 -411.04180908]
[280.47598267 -426.54376221]
[290.16833496 -438.66143799]
[305.14105225 -442.73535156]
[319.63687134 -437.19900513]
[328.08181763 -424.18121338]
[327.22863770 -408.68762207]
[317.40542603 -396.67581177]
[302.38937378 -392.76455688]
[297.03750610 -378.75177002]
[291.68566895 -364.73901367]
[286.33380127 -350.72625732]
[280.98193359 -336.71347046]
[275.63009644 -322.70071411]
[270.27822876 -308.68795776]
[264.92636108 -294.67517090]
[259.57452393 -280.66241455]
[254.22265625 -266.64965820]
[248.87078857 -252.63688660]
[259.19104004 -241.86849976]
[263.83151245 -227.62857056]
[261.82089233 -212.72494507]
[253.50488281 -200.12080383]
[240.48822021 -192.34561157]
[225.32521057 -190.98753357]
[219.97335815 -176.97476196]
[214.62149048 -162.96199036]
[209.26963806 -148.94923401]
[221.44851685 -141.02781677]
[231.70898438 -130.73348999]
[239.59683228 -118.51834869]
[244.76208496 -104.91966248]
[246.97463989 -90.53613281]
[246.13441467 -76.00161743]
[242.27593994 -61.95713425]
[235.56686401 -49.02264786]
[226.30079651 -37.76965714]
[214.88435364 -28.69597054]
[201.81935120 -22.20367050]
[187.68074036 -18.58130455]
[173.09132385 -17.99105835]
[158.69430542 -20.46149445]
[153.05955505 -6.56007290]
[147.42478943 7.34134912]
[141.79003906 21.24277115]
[142.19438171 28.66679382]
[135.89764404 35.36695862]
[129.98229980 49.15132523]
[124.06696320 62.93569183]
[136.07058716 74.46777344]
[142.95675659 89.62220001]
[143.74850464 106.24895477]
[138.33352661 121.98915100]
[127.48003387 134.60968018]
[112.72785950 142.32000732]
[114.54752350 157.20922852]
[116.36717987 172.09844971]
[118.18683624 186.98767090]
[120.00649261 201.87689209]
[123.72373199 207.45913696]
[123.97983551 213.21066284]
[121.58552551 217.40481567]
[122.80030060 232.35554504]
[124.01506805 247.30627441]
[125.22983551 262.25701904]
[126.44460297 277.20773315]
[140.10386658 284.37908936]
[147.69776917 297.80801392]
[146.80311584 313.20941162]
[137.70541382 325.66876221]
[123.30767059 331.21029663]
[108.20418549 328.06576538]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 141]
[9 140]
[10 139]
[11 138]
[12 137]
[19 39]
[20 38]
[21 37]
[22 36]
[23 35]
[24 34]
[25 33]
[44 131]
[45 130]
[46 129]
[47 127]
[48 126]
[49 125]
[50 124]
[63 110]
[64 109]
[65 108]
[66 107]
[72 101]
[73 100]
[74 99]
[75 98]
[76 97]
[77 96]
[78 95]
[79 94]
[80 93]
[81 92]
[82 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
