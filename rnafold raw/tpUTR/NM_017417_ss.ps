%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 09:40:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUCAGAUGGUGCUGGAUCUGGGUCAUCAAUUCUUGCAAGUGGAAUGGCUUCUACUCCUAACACUCCCAGCUUCUUUCUCAAUGAGAAAGAAAGCAUGUGUAUGUCUGUUUAUGGCGACUUCAGGUGG\
) } def
/len { sequence length } bind def

/coor [
[-6.13897371 296.03054810]
[-14.39599895 300.07357788]
[-23.44721794 299.80755615]
[-32.55465698 311.72622681]
[-41.66209412 323.64489746]
[-50.76953125 335.56356812]
[-59.87696838 347.48220825]
[-68.98440552 359.40087891]
[-78.09184265 371.31954956]
[-73.52593231 386.14965820]
[-78.58078766 400.82031250]
[-91.31271362 409.69033813]
[-106.82604218 409.34906006]
[-119.15556335 399.92767334]
[-123.56032562 385.04888916]
[-118.34661865 370.43395996]
[-105.51921844 361.70254517]
[-90.01051331 362.21212769]
[-80.90306854 350.29345703]
[-71.79563141 338.37478638]
[-62.68819809 326.45611572]
[-53.58076096 314.53744507]
[-44.47332001 302.61877441]
[-35.36588287 290.70013428]
[-34.68383408 270.12826538]
[-14.99543571 261.83981323]
[-6.77524805 249.29277039]
[1.44493973 236.74571228]
[9.66512775 224.19866943]
[1.88189590 211.47518921]
[0.38863564 196.57286072]
[5.53482199 182.44212341]
[16.35006523 171.90406799]
[30.72660446 167.08720398]
[45.82995605 168.99774170]
[54.05014420 156.45068359]
[62.27033234 143.90362549]
[70.49051666 131.35658264]
[57.19573593 104.67329407]
[64.41947937 75.74982452]
[53.68549347 65.27215576]
[42.95150757 54.79448318]
[32.21752548 44.31681442]
[21.48353958 33.83914185]
[10.74955463 23.36147308]
[0.01557067 12.88380241]
[-15.99998283 9.35760498]
[-20.69537163 -6.35498190]
[-9.24038029 -18.09019470]
[6.58107710 -13.77585316]
[10.49324131 2.14981842]
[21.22722626 12.62748909]
[31.96121025 23.10515976]
[42.69519424 33.58282852]
[53.42918015 44.06050110]
[64.16316223 54.53816986]
[74.89714813 65.01583862]
[84.48511505 59.83368301]
[95.06707764 57.22488022]
[105.96508789 57.35656738]
[116.48092651 60.22031021]
[125.94087219 65.63263702]
[136.92489624 55.41739655]
[147.90893555 45.20215988]
[158.89295959 34.98692322]
[156.57916260 24.39115715]
[158.90922546 13.88224030]
[165.38606262 5.38676977]
[174.75888062 0.43279773]
[185.26425171 -0.12482619]
[194.95780945 3.74875712]
[206.65292358 -5.64402103]
[218.34803772 -15.03679848]
[230.04315186 -24.42957687]
[241.62391663 -33.96297836]
[253.08865356 -43.63561249]
[264.55340576 -53.30824280]
[276.01812744 -62.98087692]
[287.48284912 -72.65351105]
[298.94760132 -82.32614136]
[310.41232300 -91.99877930]
[318.61950684 -106.83383179]
[335.14675903 -103.05416107]
[336.08999634 -86.12647247]
[320.08496094 -80.53404236]
[308.62023926 -70.86141205]
[297.15548706 -61.18877411]
[285.69076538 -51.51614380]
[274.22601318 -41.84350967]
[262.76129150 -32.17087555]
[251.29655457 -22.49824333]
[248.18133545 -15.71179295]
[239.43592834 -12.73446178]
[227.74081421 -3.34168339]
[216.04570007 6.05109453]
[204.35058594 15.44387245]
[203.77871704 34.82929993]
[189.01425171 47.86378860]
[169.10820007 45.97095108]
[158.12417603 56.18618774]
[147.14013672 66.40142822]
[136.15611267 76.61666870]
[139.79335022 83.55208588]
[142.11427307 91.03157806]
[143.04211426 98.80773926]
[142.54615784 106.62334442]
[140.64283752 114.21984863]
[137.39509583 121.34598541]
[132.91038513 127.76601410]
[127.33702087 133.26757812]
[120.85938263 137.66870117]
[113.69174957 140.82377625]
[106.07120514 142.62844849]
[98.24983215 143.02304077]
[90.48635101 141.99446106]
[83.03757477 139.57676697]
[74.81738281 152.12382507]
[66.59719849 164.67086792]
[58.37701035 177.21792603]
[66.16031647 190.30155945]
[67.48574066 205.40554810]
[62.14375305 219.52940369]
[51.24400711 229.89070129]
[36.98530960 234.47315979]
[22.21217918 232.41885376]
[13.99199200 244.96591187]
[5.77180433 257.51296997]
[-2.44838333 270.05999756]
[0.74350333 279.12393188]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 24]
[4 23]
[5 22]
[6 21]
[7 20]
[8 19]
[9 18]
[26 128]
[27 127]
[28 126]
[29 125]
[35 119]
[36 118]
[37 117]
[38 116]
[40 57]
[41 56]
[42 55]
[43 54]
[44 53]
[45 52]
[46 51]
[62 102]
[63 101]
[64 100]
[65 99]
[71 96]
[72 95]
[73 94]
[74 93]
[75 91]
[76 90]
[77 89]
[78 88]
[79 87]
[80 86]
[81 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
