%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:37:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCACAGUGCCAGGCAACCCUUCAGAAAGGCUUUGCUCCUGCUCUCAGAUCAGAUCAAGCAUUCUUUCUAUUUUAUUAUCUGGGACAUAUUUAAAUACAAACAUAUUCAGAACAAUU\
) } def
/len { sequence length } bind def

/coor [
[237.55792236 469.77566528]
[234.16026306 455.13619995]
[232.98255920 440.15386963]
[234.05111694 425.16333008]
[237.34205627 410.49951172]
[242.78186035 396.49002075]
[250.24900818 383.44781494]
[259.57666016 371.66424561]
[270.55645752 361.40258789]
[262.06036377 349.04067993]
[248.47505188 342.93426514]
[247.03506470 327.17874146]
[238.53897095 314.81683350]
[230.04287720 302.45492554]
[221.54678345 290.09304810]
[213.05068970 277.73114014]
[198.84878540 282.43045044]
[183.88304138 282.93798828]
[169.36601257 279.20416260]
[156.47633362 271.52322388]
[146.26298523 260.51031494]
[139.55995178 247.05218506]
[136.91812134 232.23568726]
[138.55999756 217.26005554]
[144.36103821 203.33992004]
[153.85896301 191.60667419]
[145.36286926 179.24478149]
[136.86677551 166.88288879]
[128.37068176 154.52099609]
[119.87459564 142.15910339]
[111.37850189 129.79719543]
[102.88240814 117.43531036]
[92.86676025 116.16834259]
[85.17904663 109.62483978]
[82.32814026 99.94027710]
[85.24443054 90.27520752]
[77.40695190 77.48560333]
[69.56947327 64.69600677]
[61.73199844 51.90640259]
[55.94269562 48.31625366]
[53.32306290 43.09740829]
[53.83934402 38.23592377]
[46.68196106 25.05366707]
[33.29741669 16.61775970]
[34.02415848 1.74089503]
[26.86677742 -11.44136143]
[19.70939636 -24.62361908]
[4.48665428 -28.87140274]
[-3.20092273 -42.67997742]
[1.20756829 -57.85695648]
[15.09664822 -65.39810944]
[30.22617149 -60.82940674]
[37.62005997 -46.86137390]
[32.89165497 -31.78100014]
[40.04903412 -18.59874344]
[47.20641708 -5.41648626]
[60.07901764 2.07653737]
[59.86421967 17.89628601]
[67.02159882 31.07854271]
[74.52159882 44.06892395]
[82.35907745 56.85852432]
[90.19655609 69.64812469]
[98.03403473 82.43772888]
[114.82095337 90.37516022]
[115.24430084 108.93921661]
[123.74039459 121.30110931]
[132.23649597 133.66300964]
[140.73257446 146.02490234]
[149.22866821 158.38679504]
[157.72476196 170.74868774]
[166.22085571 183.11058044]
[180.57855225 178.44830322]
[195.65303040 178.02110291]
[210.22236633 181.85505676]
[223.10803223 189.63117981]
[233.27012634 200.71197510]
[239.89140320 214.19361877]
[242.44293213 228.97976685]
[240.72634888 243.87068176]
[234.88925171 257.66052246]
[225.41258240 269.23504639]
[233.90867615 281.59695435]
[242.40476990 293.95883179]
[250.90086365 306.32073975]
[259.39697266 318.68264771]
[273.58996582 325.67324829]
[274.42227173 340.54458618]
[282.91836548 352.90649414]
[296.43325806 346.33340454]
[310.77688599 341.84814453]
[325.62884521 339.55087280]
[340.65728760 339.49291992]
[355.52648926 341.67562866]
[369.90429688 346.05017090]
[383.46948242 352.51882935]
[395.91897583 360.93713379]
[406.97467041 371.11697388]
[416.38955688 382.83093262]
[423.95336914 395.81735229]
[429.49703979 409.78607178]
[432.89678955 424.42504883]
[434.07662964 439.40722656]
[433.01019287 454.39788818]
[429.72134399 469.06216431]
[424.28353882 483.07244873]
[416.81823730 496.11572266]
[407.49227905 507.90063477]
[396.51391602 518.16387939]
[384.12850952 526.67614746]
[370.61267090 533.24725342]
[356.26840210 537.73052979]
[341.41610718 540.02563477]
[326.38766479 540.08148193]
[311.51876831 537.89666748]
[297.14157104 533.52008057]
[283.57733154 527.04943848]
[271.12902832 518.62939453]
[260.07479858 508.44796753]
[250.66154480 496.73266602]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 88]
[10 87]
[12 85]
[13 84]
[14 83]
[15 82]
[16 81]
[26 71]
[27 70]
[28 69]
[29 68]
[30 67]
[31 66]
[32 65]
[36 63]
[37 62]
[38 61]
[39 60]
[42 59]
[43 58]
[45 56]
[46 55]
[47 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
