%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 08:35:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUGUGGCCCUGAGACUGCAUCGGAGGCGGCGCCCCGUUCUAGGGCCGUGGCCUUUGCCGAGACUGUAGCAGAGAAAACGUAUUUAUUAUUCCA\
) } def
/len { sequence length } bind def

/coor [
[155.47917175 239.33409119]
[150.19541931 253.37268066]
[144.91166687 267.41125488]
[148.11541748 283.49441528]
[135.61209106 294.10568237]
[120.26403046 288.32907104]
[117.86000824 272.10708618]
[130.87307739 262.12750244]
[136.15682983 248.08892822]
[141.44058228 234.05033875]
[141.19515991 219.05235291]
[135.45491028 205.19415283]
[129.71464539 191.33596802]
[115.89840698 185.89105225]
[109.87956238 171.91865540]
[115.68434906 157.46382141]
[109.94409943 143.60562134]
[97.92525482 134.80810547]
[99.79248810 119.09746552]
[86.44643402 113.45574188]
[80.90153503 100.06917572]
[86.34931946 86.64278412]
[80.60906982 72.78459167]
[74.86881256 58.92639923]
[69.12856293 45.06820679]
[62.71523666 31.50836754]
[55.64428711 18.27954865]
[48.57333755 5.05072927]
[41.50238419 -8.17808914]
[28.17333984 -16.70141602]
[28.99743462 -31.57320595]
[21.92648315 -44.80202484]
[14.85553265 -58.03084564]
[1.52648652 -66.55416870]
[2.35058165 -81.42596436]
[-4.72036934 -94.65477753]
[-11.79132080 -107.88359833]
[-26.98593521 -112.23092651]
[-34.58296967 -126.08951569]
[-30.07524300 -141.23731995]
[-16.13710403 -148.68740845]
[-1.03780615 -144.01977539]
[6.26450539 -130.00366211]
[1.43749857 -114.95455170]
[8.50844955 -101.72573090]
[15.57940102 -88.49691010]
[28.40268517 -80.91979980]
[28.08435059 -65.10179901]
[35.15530396 -51.87297821]
[42.22625351 -38.64415741]
[55.04953766 -31.06704330]
[54.73120499 -15.24904060]
[61.80215454 -2.02022171]
[68.87310791 11.20859718]
[75.94405365 24.43741608]
[79.39970398 25.79428291]
[82.30592346 29.00560760]
[83.74414825 33.76128769]
[82.98675537 39.32795334]
[88.72701263 53.18614960]
[94.46726227 67.04434204]
[100.20751190 80.90253448]
[113.55356598 86.54425812]
[119.09846497 99.93082428]
[113.65068054 113.35721588]
[126.08010864 123.14597321]
[123.80229187 137.86537170]
[129.54254150 151.72357178]
[143.86825562 157.84007263]
[149.49227905 171.97602844]
[143.57284546 185.59570312]
[149.31309509 199.45390320]
[155.05334473 213.31208801]
[159.75021362 199.06640625]
[167.75035095 186.37792969]
[178.57958984 175.99873352]
[191.59602356 168.54405212]
[206.02813721 164.45573425]
[221.02046204 163.97612000]
[235.68437195 167.13362122]
[249.15066528 173.74110413]
[260.62115479 183.40692139]
[269.41595459 195.55812073]
[275.01373291 209.47447205]
[277.08273315 224.33108521]
[275.50027466 239.24739075]
[270.36016846 253.33920288]
[261.96710205 265.77127075]
[250.81855774 275.80670166]
[237.57533264 282.85064697]
[223.02243042 286.48562622]
[208.02243042 286.49612427]
[193.46444702 282.88153076]
[180.21139526 275.85610962]
[169.04881287 265.83630371]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[3 8]
[11 73]
[12 72]
[13 71]
[16 68]
[17 67]
[19 65]
[22 62]
[23 61]
[24 60]
[25 59]
[26 55]
[27 54]
[28 53]
[29 52]
[31 50]
[32 49]
[33 48]
[35 46]
[36 45]
[37 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
