%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 11:00:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCACUGGCCUAGUUCCCGACUUGUUUCUCAGGUGUGAAUCAACUUCUUGGGCCUUGGCUCUGAGUUGGAAAAGGUUUUAGAAAAAGUGAAGAGCUGGAAUGUGGGGGAAAAUAAAAAGCUUUUUUGCCCAGUGG\
) } def
/len { sequence length } bind def

/coor [
[97.89543152 218.97778320]
[83.80981445 211.29827881]
[81.17367554 195.47328186]
[92.00924683 183.64239502]
[92.69694519 168.65815735]
[93.38464355 153.67393494]
[94.07234192 138.68971252]
[76.12733459 129.07702637]
[66.06192780 112.31059265]
[66.02339935 93.55649567]
[75.20487213 78.12917328]
[66.49977875 65.91355133]
[57.79467773 53.69793701]
[49.08957672 41.48232269]
[40.38447952 29.26670837]
[31.67938232 17.05109215]
[22.97428322 4.83547688]
[7.57195234 4.56272936]
[-4.57445192 -4.61976767]
[-8.93325424 -19.02340698]
[-4.03345156 -33.06370544]
[-12.73855019 -45.27931976]
[-21.44364929 -57.49493408]
[-30.14874649 -69.71054840]
[-37.74646759 -74.94176483]
[-38.90960693 -82.30755615]
[-47.33232117 -94.71955872]
[-55.75503540 -107.13156891]
[-64.17774963 -119.54357147]
[-72.60046387 -131.95558167]
[-86.75181580 -139.03016663]
[-87.49600220 -153.90615845]
[-95.91871643 -166.31817627]
[-104.34143066 -178.73017883]
[-112.76414490 -191.14218140]
[-126.91549683 -198.21676636]
[-127.65968323 -213.09277344]
[-143.05171204 -213.71861267]
[-154.98437500 -223.17720032]
[-159.01176453 -237.67700195]
[-153.79130554 -251.60125732]
[-162.21401978 -264.01327515]
[-170.63673401 -276.42526245]
[-179.05944824 -288.83728027]
[-187.48216248 -301.24926758]
[-195.90487671 -313.66128540]
[-204.32759094 -326.07330322]
[-215.21931458 -327.52145386]
[-223.31689453 -334.61758423]
[-226.06677246 -344.79895020]
[-222.78286743 -354.58834839]
[-230.62768555 -367.37344360]
[-238.47248840 -380.15856934]
[-246.31729126 -392.94366455]
[-260.98370361 -400.28048706]
[-261.69277954 -416.66430664]
[-247.71513367 -425.24084473]
[-233.42973328 -417.18731689]
[-233.53219604 -400.78848267]
[-225.68737793 -388.00338745]
[-217.84257507 -375.21826172]
[-209.99775696 -362.43316650]
[-192.37963867 -354.59100342]
[-191.91558838 -334.49600220]
[-183.49287415 -322.08398438]
[-175.07015991 -309.67199707]
[-166.64744568 -297.25997925]
[-158.22473145 -284.84799194]
[-149.80201721 -272.43597412]
[-141.37930298 -260.02395630]
[-126.51147461 -259.73150635]
[-114.52499390 -250.63269043]
[-110.14337921 -236.05000305]
[-115.24767303 -221.51548767]
[-101.69876862 -215.32868958]
[-100.35213470 -199.56489563]
[-91.92942047 -187.15289307]
[-83.50670624 -174.74089050]
[-75.08399200 -162.32887268]
[-61.53508759 -156.14208984]
[-60.18845749 -140.37829590]
[-51.76574326 -127.96628571]
[-43.34302902 -115.55428314]
[-34.92031479 -103.14227295]
[-26.49760056 -90.73027039]
[-17.93313217 -78.41564941]
[-9.22803307 -66.20003510]
[-0.52293468 -53.98441696]
[8.18216419 -41.76880264]
[23.05279350 -41.81732178]
[35.24475479 -32.99575043]
[39.95958328 -18.51736259]
[35.18989944 -3.86962152]
[43.89499664 8.34599400]
[52.60009384 20.56160927]
[61.30519485 32.77722549]
[70.01029205 44.99283981]
[78.71539307 57.20845413]
[87.42048645 69.42407227]
[101.20648193 65.94572449]
[115.61335754 68.57638550]
[127.98229980 77.18916321]
[135.88455200 90.52272034]
[137.59434509 106.35721588]
[132.45324707 121.88188934]
[143.93162537 131.53834534]
[155.41000366 141.19477844]
[170.95121765 144.15805054]
[175.70945740 158.27217102]
[187.18783569 167.92861938]
[198.66621399 177.58505249]
[210.14457703 187.24150085]
[221.62295532 196.89794922]
[236.32966614 192.23789978]
[251.21517944 196.29071045]
[261.52957153 207.76315308]
[263.98153687 222.99441528]
[257.78869629 237.12425232]
[244.92715454 245.64389038]
[229.50097656 245.83473206]
[216.43258667 237.63589478]
[209.89208984 223.66358948]
[211.96650696 208.37632751]
[200.48814392 198.71987915]
[189.00976562 189.06343079]
[177.53138733 179.40698242]
[166.05300903 169.75054932]
[151.33279419 167.47796631]
[145.75355530 152.67315674]
[134.27517700 143.01670837]
[122.79680634 133.36026001]
[109.05657196 139.37741089]
[108.36887360 154.36163330]
[107.68117523 169.34585571]
[106.99347687 184.33009338]
[116.69982147 197.10374451]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 135]
[5 134]
[6 133]
[7 132]
[11 99]
[12 98]
[13 97]
[14 96]
[15 95]
[16 94]
[17 93]
[21 89]
[22 88]
[23 87]
[24 86]
[26 85]
[27 84]
[28 83]
[29 82]
[30 81]
[32 79]
[33 78]
[34 77]
[35 76]
[37 74]
[41 70]
[42 69]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
[51 62]
[52 61]
[53 60]
[54 59]
[105 131]
[106 130]
[107 129]
[109 127]
[110 126]
[111 125]
[112 124]
[113 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
