%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 00:15:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGUGAACUCAUUCUUUGGAUCACUAGAAUCUGUCUAUCAUCCUGACUUAAUUCUCCUUUCAGGUCUUUUUACCCCCUCUGUGAAUUGCGCA\
) } def
/len { sequence length } bind def

/coor [
[45.20755386 222.91593933]
[37.13631821 235.55932617]
[29.06508255 248.20269775]
[20.99384689 260.84609985]
[12.92261124 273.48947144]
[4.85137606 286.13284302]
[4.66179132 302.53091431]
[-9.76475525 310.32876587]
[-23.58747101 301.50469971]
[-22.58672905 285.13610840]
[-7.79200792 278.06161499]
[0.27922741 265.41824341]
[8.35046291 252.77485657]
[16.42169762 240.13146973]
[24.49293327 227.48808289]
[32.56416702 214.84469604]
[22.25388527 199.95886230]
[19.27616692 182.04776001]
[24.24226761 164.53201294]
[36.24227142 150.77493286]
[53.01148605 143.43670654]
[71.35775757 143.96006775]
[77.67178345 130.35369873]
[83.98580170 116.74733734]
[90.29982758 103.14097595]
[90.59020233 94.90827942]
[97.05890656 89.19088745]
[103.82405853 75.80310822]
[110.58921051 62.41532516]
[98.87351990 52.96431732]
[89.38268280 41.28841782]
[82.52964783 27.89951324]
[78.61180878 13.38395500]
[77.79806519 -1.62314069]
[80.12155914 -16.46567154]
[85.47833252 -30.49523544]
[93.63195038 -43.09945679]
[104.22399139 -53.72872162]
[116.78972626 -61.92013168]
[130.77857971 -67.31767273]
[145.57821655 -69.68768311]
[160.54135132 -68.92897034]
[175.01405334 -65.07712555]
[181.77920532 -78.46490479]
[188.54435730 -91.85269165]
[195.30950928 -105.24047089]
[202.07466125 -118.62825775]
[192.41862488 -130.40454102]
[188.39349365 -145.09188843]
[190.69667053 -160.14562988]
[198.92909241 -172.95762634]
[211.66444397 -181.30810547]
[226.69627380 -183.75030518]
[241.42019653 -179.86109924]
[253.28521729 -170.31430054]
[260.23565674 -156.76397705]
[261.06729126 -141.55778503]
[255.63603210 -127.33029175]
[244.88290405 -116.54650116]
[230.67094421 -111.07476807]
[215.46244812 -111.86310577]
[208.69729614 -98.47531891]
[201.93214417 -85.08753967]
[195.16699219 -71.69975281]
[188.40184021 -58.31197357]
[200.08775330 -48.94527435]
[209.57438660 -37.34895706]
[216.44522095 -24.02836990]
[220.39772034 -9.56464863]
[221.25680542 5.41062927]
[218.98248291 20.24302483]
[213.67176819 34.28383255]
[205.55450439 46.91846085]
[194.98348999 57.59332657]
[182.41902161 65.84011078]
[168.40899658 71.29631042]
[153.56491089 73.72116089]
[138.53521729 73.00627899]
[123.97698975 69.18047333]
[117.21183777 82.56826019]
[110.44668579 95.95603943]
[103.90618896 109.45500183]
[97.59217072 123.06136322]
[91.27814484 136.66772461]
[84.96412659 150.27409363]
[93.75485992 158.71499634]
[99.74092865 169.30819702]
[102.42760468 181.15530396]
[101.59942627 193.25535583]
[97.33741760 204.58924866]
[90.01132965 214.20571899]
[80.24758148 221.30105591]
[68.87570953 225.28636169]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[22 85]
[23 84]
[24 83]
[25 82]
[27 81]
[28 80]
[29 79]
[43 65]
[44 64]
[45 63]
[46 62]
[47 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
