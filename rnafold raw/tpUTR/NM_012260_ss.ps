%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 11:30:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAAGACGCCAGUUGGUGGUCUUGAGUUUUCUCUUUCUUGCAAGAUGAAAUUUUAUUUUCCACAGCAAAAUUACUCUACUGUUAAAAUUGUGCAAAAUAAAAUAAACAUUUAAAAUGACAUUUUACAGUAAAGGAAUUGAUUAAAAACAGAAAAAGUUAG\
) } def
/len { sequence length } bind def

/coor [
[58.48972321 493.50921631]
[51.38354492 492.53906250]
[44.43807602 490.75759888]
[37.74559784 488.18890381]
[29.99510765 501.03140259]
[22.24461555 513.87390137]
[14.49412537 526.71643066]
[6.74363518 539.55889893]
[-0.88196856 552.47595215]
[-8.38196850 565.46636963]
[-15.88196850 578.45672607]
[-15.34088326 594.84692383]
[-29.40573883 603.27972412]
[-43.60781860 595.08013916]
[-43.33723831 578.68322754]
[-28.87234879 570.95672607]
[-21.37234879 557.96636963]
[-13.87234974 544.97595215]
[-13.24827385 537.57446289]
[-6.09886837 531.80841064]
[1.65162230 518.96594238]
[9.40211296 506.12341309]
[17.15260315 493.28091431]
[24.90309334 480.43841553]
[8.52901554 461.20233154]
[1.14865243 437.01119995]
[4.00320959 411.85015869]
[16.64573479 389.87426758]
[37.01089478 374.72229004]
[61.75234985 368.91424561]
[63.20450974 353.98468018]
[64.65667725 339.05514526]
[62.16197968 332.05883789]
[66.28449249 323.85116577]
[68.02588654 308.95257568]
[69.76728058 294.05401611]
[71.50867462 279.15542603]
[65.30123901 265.61596680]
[74.58832550 252.80735779]
[76.32971954 237.90878296]
[78.07111359 223.01020813]
[71.86367035 209.47074890]
[81.15075684 196.66212463]
[82.89215088 181.76354980]
[84.63354492 166.86497498]
[86.37493896 151.96640015]
[88.11633301 137.06782532]
[89.85772705 122.16925812]
[77.42420197 109.20188904]
[77.25000763 91.23761749]
[89.42974091 78.03158569]
[87.39977264 63.16957855]
[85.36980438 48.30757523]
[83.33983612 33.44556808]
[81.30986786 18.58356094]
[79.27989960 3.72155523]
[77.24992371 -11.14045048]
[75.21995544 -26.00245667]
[73.18998718 -40.86446381]
[71.16001892 -55.72646713]
[61.62630463 -68.35258484]
[67.57002258 -82.00987244]
[65.54005432 -96.87187958]
[63.51008606 -111.73388672]
[61.48011780 -126.59588623]
[59.45014572 -141.45790100]
[46.56948853 -144.63420105]
[35.56996155 -151.99371338]
[27.75734329 -162.63647461]
[24.05010986 -175.27439880]
[24.87149811 -188.38714600]
[30.10130501 -200.40493774]
[39.09289932 -209.89657593]
[50.75309753 -215.73982239]
[49.30093384 -230.66935730]
[36.93851471 -240.51548767]
[35.24226761 -256.22848511]
[45.21854019 -268.48611450]
[60.94859314 -270.01614380]
[73.10005951 -259.91082764]
[74.46369934 -244.16546631]
[64.23047638 -232.12152100]
[65.68264008 -217.19198608]
[81.67048645 -211.85839844]
[93.77526855 -200.05186462]
[99.54345703 -184.09831238]
[97.77667999 -167.17079163]
[88.78035736 -152.65844727]
[74.31215668 -143.48786926]
[76.34212494 -128.62585449]
[78.37209320 -113.76385498]
[80.40206146 -98.90184784]
[82.43202972 -84.03984070]
[91.82054901 -72.47675323]
[86.02202606 -57.75643921]
[88.05199432 -42.89443207]
[90.08196259 -28.03242683]
[92.11193085 -13.17042065]
[94.14189911 1.69158578]
[96.17187500 16.55359268]
[98.20184326 31.41559792]
[100.23181152 46.27760315]
[102.26177979 61.13961029]
[104.29174805 76.00161743]
[108.69814301 77.22537231]
[112.79846954 79.25052643]
[116.44843292 82.00582123]
[119.51960754 85.39429474]
[133.71182251 80.53828430]
[147.90405273 75.68228149]
[162.09626770 70.82627106]
[175.12503052 59.97787094]
[189.15618896 69.49433136]
[183.89585876 85.61155701]
[166.95228577 85.01849365]
[152.76005554 89.87450409]
[138.56784058 94.73050690]
[124.37561798 99.58651733]
[118.97585297 115.30551147]
[104.75630188 123.91065216]
[103.01490784 138.80921936]
[101.27351379 153.70779419]
[99.53211975 168.60636902]
[97.79072571 183.50494385]
[96.04933167 198.40351868]
[102.13221741 213.00863647]
[92.96968842 224.75160217]
[91.22829437 239.65017700]
[89.48690033 254.54875183]
[95.56977844 269.15386963]
[86.40724945 280.89682007]
[84.66585541 295.79541016]
[82.92446136 310.69396973]
[81.18306732 325.59255981]
[79.58621979 340.50732422]
[78.13405609 355.43685913]
[76.68189240 370.36639404]
[83.62560272 372.33990479]
[90.29424286 375.09912109]
[96.59925842 378.60696411]
[102.45697784 382.81640625]
[107.78972626 387.67111206]
[112.52684784 393.10623169]
[116.60563660 399.04913330]
[119.97217560 405.42056274]
[122.58204651 412.13558960]
[124.40092468 419.10473633]
[125.40501404 426.23516846]
[125.58135986 433.43200684]
[124.92803192 440.59948730]
[123.45413971 447.64233398]
[121.17967987 454.46691895]
[118.13531494 460.98260498]
[114.36190033 467.10287476]
[109.90998840 472.74655151]
[104.83912659 477.83883667]
[99.21705627 482.31225586]
[93.11882019 486.10763550]
[86.62575531 489.17483521]
[79.82440948 491.47344971]
[72.80538177 492.97326660]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 24]
[5 23]
[6 22]
[7 21]
[8 20]
[9 18]
[10 17]
[11 16]
[30 137]
[31 136]
[32 135]
[34 134]
[35 133]
[36 132]
[37 131]
[39 129]
[40 128]
[41 127]
[43 125]
[44 124]
[45 123]
[46 122]
[47 121]
[48 120]
[51 104]
[52 103]
[53 102]
[54 101]
[55 100]
[56 99]
[57 98]
[58 97]
[59 96]
[60 95]
[62 93]
[63 92]
[64 91]
[65 90]
[66 89]
[74 83]
[75 82]
[108 118]
[109 117]
[110 116]
[111 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
