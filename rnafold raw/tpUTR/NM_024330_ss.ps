%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 13:30:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACUUCCACACCUGAGGCACCUGAGAGAGGAACUCUGUGGGGUGGGGGCCGUUGCAGGUGUACUGGGCUGUCAGGGAUCUUUUCUAUACCAGAACUGCGGUCACUAUUUUGUAAUAAAUGUGGCUGGAGCUGAUCCAGCUGUCUCUGACCUACAGUA\
) } def
/len { sequence length } bind def

/coor [
[-86.61578369 237.98582458]
[-90.67881775 252.42506409]
[-101.32538605 262.99154663]
[-115.79489899 266.94546509]
[-130.33547974 263.26153564]
[-141.17686462 252.89503479]
[-145.50793457 238.53390503]
[-142.20567322 223.90193176]
[-132.12600708 212.79286194]
[-146.91496277 215.30024719]
[-161.70391846 217.80761719]
[-176.49287415 220.31498718]
[-191.28181458 222.82237244]
[-206.07077026 225.32974243]
[-220.85972595 227.83711243]
[-236.41798401 242.52268982]
[-255.49568176 234.72360229]
[-270.11010742 238.10267639]
[-284.72454834 241.48175049]
[-299.19409180 245.43556213]
[-313.49612427 249.95791626]
[-327.79815674 254.48028564]
[-342.10018921 259.00265503]
[-352.92550659 270.54055786]
[-367.39331055 267.00042725]
[-378.21859741 278.53833008]
[-392.68640137 274.99819946]
[-406.98843384 279.52056885]
[-421.29046631 284.04293823]
[-435.59249878 288.56530762]
[-448.87170410 299.10565186]
[-462.67617798 289.26327515]
[-457.03991699 273.27362061]
[-440.11486816 274.26327515]
[-425.81283569 269.74090576]
[-411.51080322 265.21853638]
[-397.20877075 260.69616699]
[-387.40643311 249.48175049]
[-371.91564941 252.69839478]
[-362.11334229 241.48396301]
[-346.62255859 244.70060730]
[-332.32052612 240.17825317]
[-318.01849365 235.65588379]
[-303.71646118 231.13352966]
[-302.30712891 228.65188599]
[-299.80368042 226.59475708]
[-296.36862183 225.39166260]
[-292.32034302 225.40309143]
[-288.10363770 226.86730957]
[-273.48919678 223.48823547]
[-258.87475586 220.10916138]
[-255.42041016 211.82955933]
[-248.41770935 206.00347900]
[-239.37791443 204.05448914]
[-230.33038330 206.55093384]
[-223.36709595 213.04817200]
[-208.57814026 210.54078674]
[-193.78919983 208.03341675]
[-179.00024414 205.52604675]
[-164.21128845 203.01866150]
[-149.42234802 200.51129150]
[-134.63339233 198.00392151]
[-120.16385651 194.05010986]
[-106.15484619 188.68843079]
[-92.14583588 183.32673645]
[-78.13682556 177.96505737]
[-75.86895752 164.77854919]
[-67.30239105 154.35961914]
[-54.60037613 149.50823975]
[-41.05506516 151.59671021]
[-30.23432732 160.18345642]
[-16.12211990 155.09960938]
[-2.00991344 150.01574707]
[12.10229397 144.93188477]
[26.21450043 139.84803772]
[40.32670975 134.76417542]
[54.43891525 129.68031311]
[68.55112457 124.59645844]
[82.66333008 119.51260376]
[72.43611145 107.25713348]
[70.75780487 90.00028992]
[79.72808075 73.57369232]
[97.59423065 64.37350464]
[103.09404755 50.41814423]
[108.59386444 36.46278763]
[114.09368134 22.50742722]
[109.04339600 7.28001308]
[117.92024231 -6.08341074]
[133.91467285 -7.33156872]
[144.75711060 4.49301958]
[142.13018799 20.31954193]
[128.04904175 28.00724411]
[122.54922485 41.96260071]
[117.04940796 55.91796112]
[111.54959106 69.87332153]
[116.50164032 75.50600433]
[131.20979309 72.56145477]
[126.40574646 86.77137756]
[131.35780334 92.40406799]
[145.90263367 88.73690796]
[160.44744873 85.06974792]
[174.99227905 81.40259552]
[189.53710938 77.73543549]
[204.08192444 74.06827545]
[218.62675476 70.40111542]
[226.23115540 65.24269104]
[233.49517822 66.80821228]
[248.10961914 63.42913437]
[262.72406006 60.05005264]
[277.33850098 56.67097473]
[285.49542236 43.13436127]
[300.85498047 39.41149902]
[314.30459595 47.71110153]
[317.86486816 63.10915375]
[309.42352295 76.47026825]
[293.98870850 79.86753845]
[280.71755981 71.28541565]
[266.10314941 74.66448975]
[251.48869324 78.04357147]
[236.87425232 81.42265320]
[222.29391479 84.94593811]
[207.74908447 88.61309814]
[193.20426941 92.28025818]
[178.65943909 95.94741821]
[164.11460876 99.61457825]
[149.56979370 103.28173828]
[135.02496338 106.94889069]
[124.44425964 118.90974426]
[111.34864044 123.50553894]
[123.53594208 132.25022888]
[135.72325134 140.99491882]
[147.91055298 149.73960876]
[160.09785461 158.48429871]
[176.49183655 162.80561829]
[176.87770081 179.75517273]
[160.69735718 184.81806946]
[151.35316467 170.67160034]
[139.16584778 161.92691040]
[126.97855377 153.18222046]
[114.79125214 144.43753052]
[102.60394287 135.69284058]
[87.74718475 133.62481689]
[73.63497925 138.70866394]
[59.52277374 143.79252625]
[45.41056442 148.87638855]
[31.29835892 153.96023560]
[17.18615150 159.04409790]
[3.07394385 164.12796021]
[-11.03826332 169.21180725]
[-25.15047073 174.29566956]
[-29.62753105 190.58041382]
[-42.78608322 200.90101624]
[-59.33697128 201.35986328]
[-72.77514648 191.97407532]
[-86.78415680 197.33575439]
[-100.79316711 202.69743347]
[-114.80217743 208.05911255]
[-100.47415924 212.49848938]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 62]
[10 61]
[11 60]
[12 59]
[13 58]
[14 57]
[15 56]
[17 51]
[18 50]
[19 49]
[20 44]
[21 43]
[22 42]
[23 41]
[25 39]
[27 37]
[28 36]
[29 35]
[30 34]
[63 157]
[64 156]
[65 155]
[66 154]
[71 150]
[72 149]
[73 148]
[74 147]
[75 146]
[76 145]
[77 144]
[78 143]
[79 142]
[83 95]
[84 94]
[85 93]
[86 92]
[99 127]
[100 126]
[101 125]
[102 124]
[103 123]
[104 122]
[105 121]
[107 120]
[108 119]
[109 118]
[110 117]
[129 141]
[130 140]
[131 139]
[132 138]
[133 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
