%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 01:58:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCCUGCUCUAUCUUGGGUUUCUUAAUUGCUUCCAAGCUUCCAAAGGCUCUUUUCAGAGCCACUUA\
) } def
/len { sequence length } bind def

/coor [
[95.62944031 170.43089294]
[83.65036011 168.64620972]
[72.15288544 164.83943176]
[61.47570419 159.12268066]
[51.93331909 151.66438293]
[43.80682755 142.68420410]
[37.33560562 132.44668579]
[32.71027756 121.25339508]
[30.06708717 109.43404388]
[29.48389626 97.33679962]
[30.97788429 85.31800079]
[34.50504303 73.73168945]
[39.96147156 62.91915894]
[47.18644333 53.19891357]
[37.08100891 42.11377716]
[26.97557449 31.02864456]
[16.87014008 19.94351196]
[6.76470518 8.85837746]
[-3.34072924 -2.22675657]
[-17.78168297 2.60840106]
[-32.94016266 1.14540982]
[-46.18987274 -6.36225796]
[-55.23522186 -18.61385345]
[-58.50904083 -33.48671341]
[-55.44412994 -48.40402603]
[-46.57149887 -60.78127670]
[-33.42838669 -68.47402954]
[-18.29191399 -70.14946747]
[-3.78456879 -65.51731873]
[7.58016443 -55.38012314]
[13.83327675 -41.49421692]
[13.89137936 -26.26540947]
[7.74440432 -12.33219147]
[17.84983826 -1.24705732]
[27.95527458 9.83807659]
[38.06070709 20.92321014]
[48.16614151 32.00834274]
[58.27157593 43.09347916]
[74.89195251 34.05154037]
[93.31738281 29.75075722]
[112.22324371 30.50031853]
[130.25035095 36.24633408]
[146.10270691 46.57571793]
[158.64065552 60.74586868]
[166.96282959 77.73807526]
[170.47091675 96.33072662]
[168.91271973 115.18716431]
[183.13513184 119.95403290]
[197.35754395 124.72090912]
[211.57995605 129.48777771]
[225.80236816 134.25465393]
[240.02476501 139.02151489]
[255.98002625 135.23181152]
[267.04138184 147.33876038]
[261.82989502 162.88778687]
[245.70664978 165.88337708]
[235.25790405 153.24392700]
[221.03549194 148.47706604]
[206.81307983 143.71018982]
[192.59066772 138.94331360]
[178.36825562 134.17645264]
[164.14585876 129.40957642]
[158.17214966 139.94514465]
[150.48487854 149.30406189]
[141.31048584 157.21064758]
[130.91921997 163.43197632]
[119.61716461 167.78480530]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 38]
[15 37]
[16 36]
[17 35]
[18 34]
[19 33]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
