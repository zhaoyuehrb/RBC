%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 20:34:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGAGGGACCUCCCUGUCCCUGGCCUGCCUGGGUCCAGAUCUGCUAAUGCUUUUUAGGAGUCUGCCUGGAAACUUUGACAUGGUUCAUGUUUUUACUCAAAAUCCAAUAAAACAAGGUAGUUUGGCUGUGCA\
) } def
/len { sequence length } bind def

/coor [
[82.14929962 277.01284790]
[67.87992096 272.38845825]
[58.24646759 260.89077759]
[56.19198227 246.03091431]
[47.84002304 258.49066162]
[39.48806763 270.95037842]
[31.13611031 283.41009521]
[22.78415298 295.86984253]
[14.43219662 308.32955933]
[17.73807716 323.78421021]
[9.07758141 337.00433350]
[-6.41117239 340.14663696]
[-19.53898239 331.34686279]
[-22.51734924 315.82574463]
[-13.57926369 302.79171753]
[1.97246885 299.97760010]
[10.32442570 287.51788330]
[18.67638206 275.05813599]
[27.02833939 262.59841919]
[35.38029861 250.13868713]
[43.73225403 237.67897034]
[50.71516418 224.40345764]
[56.25020981 210.46203613]
[61.78525162 196.52061462]
[67.32029724 182.57919312]
[72.19078827 168.39193726]
[76.38585663 153.99049377]
[80.58093262 139.58906555]
[84.77600861 125.18762207]
[88.97107697 110.78618622]
[84.94638062 96.33621216]
[73.91052246 86.17698669]
[62.87466431 76.01776123]
[56.36838531 74.15977478]
[52.43190765 69.89507294]
[51.57200623 65.10864258]
[41.02822495 54.43959427]
[30.48444176 43.77054214]
[19.94065857 33.10149002]
[11.59853745 29.14640617]
[9.27756023 22.05372810]
[-1.01129079 11.13862133]
[-16.10738182 6.40379333]
[-19.20708466 -8.16470337]
[-29.49593735 -19.07980919]
[-39.78478622 -29.99491692]
[-50.07363892 -40.91002274]
[-65.87644958 -41.12601471]
[-76.83796692 -52.51112366]
[-76.45491028 -68.31076813]
[-64.95454407 -79.15129852]
[-49.15983200 -78.60122681]
[-38.44149399 -66.98688507]
[-39.15853119 -51.19887161]
[-28.86968040 -40.28376770]
[-18.58082962 -29.36865997]
[-8.29197884 -18.45355415]
[6.06818485 -14.49944782]
[9.90381527 0.84977031]
[20.19266701 11.76487637]
[30.60970879 22.55770874]
[41.15349197 33.22676086]
[51.69727325 43.89580917]
[62.24105835 54.56486130]
[73.03388977 64.98190308]
[84.06974792 75.14112854]
[95.10560608 85.30035400]
[110.07946014 86.18562317]
[122.23550415 77.39753723]
[134.39155579 68.60944366]
[135.51695251 57.67013168]
[142.37896729 49.36106873]
[152.48558044 46.31565094]
[162.37333679 49.32205582]
[174.93084717 41.11783218]
[187.48834229 32.91361237]
[200.04583740 24.70938873]
[212.60333252 16.50516701]
[224.44044495 7.29197550]
[235.47630310 -2.86724806]
[246.51216125 -13.02647209]
[257.54800415 -23.18569565]
[265.10617065 -38.36168289]
[281.78137207 -35.30003738]
[283.45553589 -18.42895317]
[267.70724487 -12.14983654]
[256.67138672 -1.99061310]
[245.63552856 8.16861057]
[234.59967041 18.32783318]
[249.54794312 19.57236099]
[260.33776855 29.99250793]
[262.10247803 44.88834000]
[254.04611206 57.54119873]
[239.80242920 62.24409866]
[225.79592896 56.87583542]
[218.34417725 43.85771942]
[220.80755615 29.06266403]
[208.25006104 37.26688385]
[195.69256592 45.47110748]
[183.13505554 53.67533112]
[170.57756042 61.87955093]
[163.24729919 79.71186829]
[143.17964172 80.76549530]
[131.02359009 89.55358124]
[118.86754608 98.34167480]
[133.74273682 96.41060638]
[147.46780396 102.46223450]
[156.07495117 114.74707031]
[157.07588196 129.71363831]
[150.18122864 143.03520203]
[137.38421631 150.86056519]
[122.38436127 150.92747498]
[109.51804352 143.21658325]
[102.50483704 129.95706177]
[103.37251282 114.98126221]
[99.17744446 129.38269043]
[94.98236847 143.78413391]
[90.78729248 158.18556213]
[86.59222412 172.58700562]
[87.85205841 176.97155762]
[87.61402130 181.09628296]
[86.15766144 184.50650024]
[83.88532257 186.89179993]
[81.26171875 188.11422729]
[75.72667694 202.05566406]
[70.19163513 215.99708557]
[64.65658569 229.93850708]
[78.06410217 223.21253967]
[92.99643707 224.63574219]
[104.89199066 233.77333069]
[110.11688232 247.83393860]
[107.07497406 262.52224731]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 21]
[5 20]
[6 19]
[7 18]
[8 17]
[9 16]
[22 127]
[23 126]
[24 125]
[25 124]
[26 119]
[27 118]
[28 117]
[29 116]
[30 115]
[31 67]
[32 66]
[33 65]
[36 64]
[37 63]
[38 62]
[39 61]
[41 60]
[42 59]
[44 57]
[45 56]
[46 55]
[47 54]
[68 105]
[69 104]
[70 103]
[74 101]
[75 100]
[76 99]
[77 98]
[78 97]
[79 89]
[80 88]
[81 87]
[82 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
