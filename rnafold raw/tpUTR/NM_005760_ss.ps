%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 21:21:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUAUUAAUGUAAAUUAUAGAUUAAAAUUCUACUUACAUCUAAUUUUUGCUGUUCAACCAUGUUUUUUGAUCUAGCUCUCUGAUUCCAUACAUUCCAGACUUCUCAGUGGAUUUGUAAUAAACUAUAAAUAA\
) } def
/len { sequence length } bind def

/coor [
[39.45512009 131.30296326]
[34.78928757 117.04708862]
[37.70475769 102.33315277]
[47.45405197 90.93353271]
[61.53763199 85.77089691]
[76.34471893 88.16884613]
[88.07952118 97.51323700]
[77.79067230 86.59812927]
[67.50182343 75.68302155]
[57.21297073 64.76791382]
[46.92411804 53.85280991]
[36.63526917 42.93770599]
[25.96621704 32.39392090]
[14.93035889 22.23469925]
[3.89449978 12.07547474]
[-7.14135885 1.91625118]
[-18.17721748 -8.24297237]
[-29.90468979 -17.59531975]
[-42.26491165 -26.09384537]
[-54.62512970 -34.59237289]
[-66.98535156 -43.09090042]
[-79.34557343 -51.58942795]
[-91.70578766 -60.08795166]
[-104.06600952 -68.58647919]
[-116.42623138 -77.08500671]
[-128.78645325 -85.58353424]
[-141.14666748 -94.08206177]
[-156.49304199 -91.41246796]
[-168.90699768 -100.20725250]
[-171.35746765 -114.85412598]
[-186.57226562 -105.52745819]
[-204.27462769 -103.72838593]
[-220.95619202 -109.76778412]
[-233.33073425 -122.40759277]
[-238.98144531 -139.11428833]
[-236.83293152 -156.56660461]
[-249.76385498 -164.16865540]
[-262.69479370 -171.77070618]
[-278.51266479 -172.09463501]
[-285.56307983 -185.21488953]
[-299.73355103 -178.89212036]
[-314.90713501 -182.13900757]
[-325.24926758 -193.70707703]
[-326.78317261 -209.14814758]
[-318.91906738 -222.52482605]
[-304.68084717 -228.69349670]
[-289.54339600 -225.28219604]
[-279.32736206 -213.60263062]
[-277.96102905 -198.14582825]
[-263.06805420 -198.36563110]
[-255.09274292 -184.70162964]
[-242.16181946 -177.09957886]
[-229.23088074 -169.49752808]
[-219.73300171 -177.44841003]
[-208.21704102 -182.07647705]
[-195.80944824 -182.91259766]
[-183.72895813 -179.85937500]
[-173.16694641 -173.20220947]
[-165.16987610 -163.58265686]
[-160.53564453 -151.93667603]
[-159.73399353 -139.40351868]
[-162.85894775 -127.21434784]
[-148.30557251 -130.16986084]
[-135.64949036 -121.72722626]
[-132.64814758 -106.44228363]
[-120.28792572 -97.94375610]
[-107.92770386 -89.44522858]
[-95.56748199 -80.94670105]
[-83.20726776 -72.44817352]
[-70.84704590 -63.94964600]
[-58.48682404 -55.45111847]
[-46.12660217 -46.95259476]
[-33.76638412 -38.45406723]
[-21.40616226 -29.95553970]
[-22.43378067 -44.92029953]
[-12.74413109 -56.37065506]
[2.18443775 -57.83279037]
[13.91158772 -48.48003769]
[15.80700493 -33.60027313]
[6.79905510 -21.60624123]
[-8.01799393 -19.27883148]
[3.01786470 -9.11960793]
[14.05372334 1.03961611]
[25.08958244 11.19883919]
[36.12544250 21.35806274]
[39.73723984 21.54188538]
[43.42839813 23.54492569]
[46.31638336 27.37911415]
[47.55037308 32.64885330]
[57.83922577 43.56396103]
[68.12807465 54.47906494]
[78.41693115 65.39417267]
[88.70578003 76.30928040]
[98.99462891 87.22438812]
[112.35167694 94.05002594]
[127.22526550 95.99327850]
[142.09886169 97.93653107]
[151.37294006 85.69369507]
[165.53216553 79.74290466]
[180.76777649 81.68490601]
[192.98149109 90.99731445]
[198.88786316 105.17512512]
[196.89811707 120.40457916]
[187.54748535 132.58905029]
[173.35122681 138.45094299]
[158.12806702 136.41346741]
[145.97297668 127.02468109]
[140.15560913 112.81012726]
[125.28201294 110.86686707]
[110.40841675 108.92361450]
[102.50308228 121.67138672]
[110.85503387 134.13110352]
[119.20699310 146.59083557]
[127.55895233 159.05056763]
[135.91090393 171.51029968]
[144.26286316 183.97001648]
[152.61482239 196.42974854]
[168.16654968 199.24385071]
[177.10464478 212.27789307]
[174.12626648 227.79899597]
[160.99845886 236.59878540]
[145.50970459 233.45648193]
[136.84921265 220.23637390]
[140.15509033 204.78170776]
[131.80313110 192.32197571]
[123.45117950 179.86224365]
[115.09922028 167.40252686]
[106.74726868 154.94279480]
[98.39530945 142.48306274]
[90.04335022 130.02334595]
[79.51938629 140.71194458]
[65.10873413 144.87522888]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 94]
[8 93]
[9 92]
[10 91]
[11 90]
[12 89]
[13 85]
[14 84]
[15 83]
[16 82]
[17 81]
[18 74]
[19 73]
[20 72]
[21 71]
[22 70]
[23 69]
[24 68]
[25 67]
[26 66]
[27 65]
[30 62]
[36 53]
[37 52]
[38 51]
[40 49]
[95 110]
[96 109]
[97 108]
[111 130]
[112 129]
[113 128]
[114 127]
[115 126]
[116 125]
[117 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
