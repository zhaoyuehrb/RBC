%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 19:59:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACUUGAUUUGAUCUCCUCAUUCCCUUCAGCACAUGUAGAGGUGCCAGUGGGUGGAUUGGAGGGAGAAGAUAUUCAAUUUCUAGAGUUUGUCUGUCUACAAAAAUCAACACAAACAGAACUCCUCUGCACGUGAAUUUUCAUCUAU\
) } def
/len { sequence length } bind def

/coor [
[152.09094238 144.13526917]
[151.86390686 159.13356018]
[146.86706543 173.27680969]
[137.62190247 185.08895874]
[125.09329224 193.33723450]
[110.58879852 197.16079712]
[95.62218475 196.16059875]
[81.75543976 190.44102478]
[70.43578339 180.59901428]
[62.84458542 167.66171265]
[59.77411270 152.97932434]
[61.54481125 138.08421326]
[67.97188568 124.53087616]
[78.38456726 113.73384094]
[91.69509888 106.82026672]
[76.74913788 105.54817963]
[61.80317307 104.27608490]
[46.85720825 103.00399780]
[36.46936417 110.72567749]
[24.00720978 109.31587219]
[16.12911224 100.07937622]
[1.21351850 98.49034119]
[-13.70207596 96.90130615]
[-28.61767006 95.31227112]
[-43.54928970 93.88162231]
[-58.49525452 92.60953522]
[-73.44121552 91.33744812]
[-84.30068970 104.26220703]
[-100.55686188 108.15395355]
[-115.78689575 101.67777252]
[-124.09349060 87.55558014]
[-139.06307983 86.60101318]
[-154.03268433 85.64643860]
[-169.00227356 84.69187164]
[-178.79931641 96.72505951]
[-193.80680847 100.66900635]
[-208.25407410 95.00717926]
[-216.58583069 81.91667175]
[-215.59835815 66.43104553]
[-205.67135620 54.50484467]
[-190.62196350 50.72393799]
[-176.23696899 56.54215622]
[-168.04769897 69.72227478]
[-153.07810974 70.67684937]
[-138.10852051 71.63141632]
[-123.13891602 72.58598328]
[-115.58262634 61.53309250]
[-103.44660950 55.62568665]
[-89.86954498 56.51105118]
[-78.42238617 64.06396484]
[-72.16912842 76.39148712]
[-57.22316360 77.66357422]
[-42.27720261 78.93566132]
[-35.29739380 76.35112762]
[-27.02863503 80.39667511]
[-12.11303997 81.98571014]
[2.80255461 83.57474518]
[17.71814919 85.16378021]
[33.31217575 77.17897797]
[48.12929916 88.05803680]
[63.07526016 89.33012390]
[78.02122498 90.60221100]
[92.96718597 91.87430573]
[107.89880371 90.44365692]
[122.33130646 86.35673523]
[136.76380920 82.26980591]
[151.15211487 78.02993011]
[165.49461365 73.63758850]
[179.83711243 69.24524689]
[194.17961121 64.85290527]
[208.52210999 60.46056747]
[222.86462402 56.06822586]
[227.72406006 51.42126846]
[233.35690308 50.16840363]
[237.90979004 51.80780411]
[252.42578125 48.02813339]
[266.94177246 44.24846268]
[269.96688843 30.55303383]
[278.56857300 19.55886841]
[291.01504517 13.38646984]
[304.84036255 13.19485855]
[317.33276367 18.96435547]
[326.06665039 29.51166534]
[340.65960693 26.04095268]
[355.25253296 22.57024002]
[369.84548950 19.09952927]
[384.43844604 15.62881660]
[388.91195679 1.00230432]
[400.03256226 -9.35283756]
[414.74545288 -12.72889328]
[429.07684326 -8.31677914]
[439.20733643 2.60286331]
[453.80029297 -0.86784858]
[468.39324951 -4.33856058]
[482.98620605 -7.80927229]
[497.57913208 -11.27998447]
[498.77987671 -26.36021614]
[504.58380127 -40.33053970]
[514.42224121 -51.82228470]
[527.33135986 -59.70960617]
[542.04644775 -63.21978760]
[557.12585449 -62.00893402]
[571.09228516 -56.19567490]
[582.57745361 -46.34952927]
[590.45611572 -33.43513107]
[593.95642090 -18.71769333]
[592.73547363 -3.63908482]
[586.91284180 10.32344818]
[577.05902100 21.80199814]
[564.13934326 29.67201233]
[549.41955566 33.16246796]
[534.34179688 31.93140984]
[520.38317871 26.09943771]
[508.91122437 16.23791122]
[501.04986572 3.31296468]
[486.45690918 6.78367662]
[471.86395264 10.25438881]
[457.27099609 13.72510052]
[442.67807007 17.19581223]
[438.54833984 31.50703239]
[427.73779297 41.89877701]
[413.08038330 45.50799942]
[398.48858643 41.26816177]
[387.90914917 30.22176552]
[373.31622314 33.69247818]
[358.72326660 37.16318893]
[344.13031006 40.63389969]
[329.53735352 44.10461426]
[325.31451416 59.66901398]
[313.76620483 71.05976868]
[297.96386719 75.11501312]
[282.17736816 70.64167786]
[270.72143555 58.76445770]
[256.20544434 62.54412842]
[241.68945312 66.32379913]
[227.25695801 70.41072845]
[212.91445923 74.80307007]
[198.57196045 79.19541168]
[184.22946167 83.58775330]
[169.88696289 87.98009491]
[155.54444885 92.37243652]
[150.03163147 97.37306213]
[140.85072327 96.70230103]
[126.41822815 100.78923035]
[111.98573303 104.87615967]
[126.36785126 109.13698578]
[138.64106750 117.76068878]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 63]
[16 62]
[17 61]
[18 60]
[21 58]
[22 57]
[23 56]
[24 55]
[25 53]
[26 52]
[27 51]
[31 46]
[32 45]
[33 44]
[34 43]
[64 145]
[65 144]
[66 143]
[67 141]
[68 140]
[69 139]
[70 138]
[71 137]
[72 136]
[75 135]
[76 134]
[77 133]
[83 128]
[84 127]
[85 126]
[86 125]
[87 124]
[92 119]
[93 118]
[94 117]
[95 116]
[96 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
