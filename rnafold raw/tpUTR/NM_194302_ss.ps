%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 20:41:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCCGCGCCCAGCCUCUCCGACAUGCCGCUAGGGGUCACGCCUGGCCCCCUCUCCACCGCCAGUAAAAGCAUCUAGUCUUUUUUCUGUA\
) } def
/len { sequence length } bind def

/coor [
[156.37709045 151.86749268]
[144.36283875 134.95175171]
[140.31550598 114.56175995]
[125.53362274 112.01309967]
[110.75172424 109.46444702]
[97.56621552 114.11566925]
[86.69961548 105.31744385]
[77.49443817 106.95950317]
[71.46020508 102.42115784]
[56.77394867 99.36931610]
[45.28504944 109.63144684]
[30.13354111 111.14315796]
[17.15073395 103.53324890]
[11.20953941 89.90092468]
[-3.47672200 86.84908295]
[-18.16298294 83.79724121]
[-32.84924316 80.74540710]
[-47.53550720 77.69356537]
[-62.22176743 74.64172363]
[-79.44718170 80.86728668]
[-92.17484283 68.91728210]
[-106.95674133 66.36862946]
[-119.72220612 75.68626404]
[-135.32421875 73.16576385]
[-144.50636292 60.30249405]
[-141.82106018 44.72800827]
[-128.86141968 35.68236923]
[-113.31620026 38.53219223]
[-104.40808105 51.58673477]
[-89.62619019 54.13539124]
[-79.43612671 47.37619781]
[-66.98863220 49.52532578]
[-59.16992569 59.95546341]
[-44.48366547 63.00730133]
[-29.79740524 66.05914307]
[-15.11114311 69.11098480]
[-0.42488173 72.16282654]
[14.26137924 75.21466064]
[25.14184189 65.07791901]
[40.08161545 63.27039337]
[53.37648392 70.69332123]
[59.82578659 84.68305969]
[74.51204681 87.73489380]
[89.24827576 90.53555298]
[102.43378448 85.88433075]
[113.30038452 94.68255615]
[128.08227539 97.23120880]
[142.86416626 99.77986908]
[147.20501709 90.32981110]
[153.41258240 81.99627686]
[161.21243286 75.14215088]
[170.26091003 70.06503296]
[180.16023254 66.98432922]
[190.47601318 66.03176117]
[200.75633240 67.24574280]
[210.55146790 70.56983948]
[219.43363953 75.85540009]
[227.01567078 82.86817169]
[232.96783447 91.29870605]
[237.03227234 100.77600098]
[239.03404236 110.88381195]
[238.88874817 121.17897034]
[236.60606384 131.21080017]
[249.92434692 138.11177063]
[263.24261475 145.01274109]
[281.50891113 143.66540527]
[290.54052734 158.60615540]
[304.08663940 165.04840088]
[317.63275146 171.49066162]
[331.17889404 177.93290710]
[344.72500610 184.37516785]
[358.37915039 190.58520508]
[373.77105713 186.06105042]
[386.82162476 195.39176941]
[387.51956177 211.41963196]
[375.32943726 221.84942627]
[359.60250854 218.68032837]
[352.40313721 204.34336853]
[344.85617065 204.57124329]
[338.28274536 197.92127991]
[324.73663330 191.47903442]
[311.19052124 185.03677368]
[297.64437866 178.59452820]
[284.09826660 172.15228271]
[272.46246338 175.91157532]
[261.05639648 170.48384094]
[256.34164429 158.33102417]
[243.02336121 151.43005371]
[229.70509338 144.52906799]
[214.40693665 158.30911255]
[194.77139282 164.63401794]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 48]
[4 47]
[5 46]
[7 44]
[9 43]
[10 42]
[14 38]
[15 37]
[16 36]
[17 35]
[18 34]
[19 33]
[21 30]
[22 29]
[63 89]
[64 88]
[65 87]
[67 84]
[68 83]
[69 82]
[70 81]
[71 80]
[72 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
