%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 21:46:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGAUGAUACAGCAGUGGGCUACAUACAAUGAGAGCCCUGAGCCCUCAAGAACUCAUGCCAGCUCAGCCCUACACCAGUUUCCACCUGGAGUUCAUGCAAGGGCAAAAGGCAGUGCCAUGCAAGCUGUUUAAAAUAAAGAUGUUACCUUGUAAAAUGCAAGUUGAUUUAAAUAAAUACUGAGUUAAAGGCUUAA\
) } def
/len { sequence length } bind def

/coor [
[19.33446503 281.23571777]
[32.81427765 287.81558228]
[43.64811707 298.18994141]
[50.80559158 311.37216187]
[53.60594940 326.10845947]
[51.78286362 340.99725342]
[45.50971603 354.62249756]
[35.38314438 365.68832397]
[22.36627769 373.14227295]
[7.69714022 376.27539062]
[-7.22910118 374.78967285]
[-20.99282455 368.82647705]
[-32.28497314 358.95288086]
[-40.03156281 346.10803223]
[-43.49581909 331.51354980]
[-42.34826279 316.55752563]
[-36.69868469 302.66345215]
[-48.31776047 312.15014648]
[-59.93683624 321.63681030]
[-71.55590820 331.12350464]
[-83.17498016 340.61016846]
[-89.29596710 357.97070312]
[-106.70685577 360.12219238]
[-118.17158508 369.79483032]
[-129.63632202 379.46746826]
[-137.84349060 394.30252075]
[-154.37074280 390.52282715]
[-155.31399536 373.59515381]
[-139.30895996 368.00271606]
[-127.84422302 358.33007812]
[-116.37948608 348.65747070]
[-115.04221344 336.62664795]
[-105.55823517 328.47485352]
[-92.66166687 328.99111938]
[-81.04258728 319.50442505]
[-69.42351532 310.01773071]
[-57.80443954 300.53106689]
[-46.18536758 291.04437256]
[-36.05894089 279.97842407]
[-27.63768578 267.56542969]
[-19.21643066 255.15243530]
[-10.79517651 242.73944092]
[-2.37392211 230.32643127]
[6.04733229 217.91343689]
[0.33631697 208.30432129]
[-1.37798488 197.20643616]
[1.19074130 186.22192383]
[7.70768070 176.95106506]
[17.25999069 170.75920105]
[28.48451233 168.57565308]
[39.76226044 170.75448608]
[48.77339554 158.76284790]
[57.78452682 146.77120972]
[66.79566193 134.77955627]
[75.80679321 122.78791809]
[84.81793213 110.79627991]
[81.60562134 103.36466217]
[81.84344482 95.24153900]
[85.51242828 87.95621490]
[91.94517517 82.89119720]
[90.01724243 68.01560974]
[88.08930206 53.14002609]
[86.16136169 38.26443863]
[84.23342133 23.38885498]
[62.03144836 14.85775661]
[51.11064529 -9.22259331]
[61.08402634 -36.56206131]
[55.42760468 -50.45468140]
[49.77117920 -64.34729767]
[44.11475754 -78.23992157]
[38.45833588 -92.13253784]
[23.38000107 -91.08311462]
[8.73538685 -94.74067688]
[-4.04436636 -102.73481750]
[-13.71436977 -114.27197266]
[-19.33725357 -128.21420288]
[-20.37402344 -143.19139099]
[-16.73569679 -157.73590088]
[-8.79079533 -170.42639160]
[2.67194533 -180.02673340]
[-2.98447728 -193.91935730]
[-8.64089966 -207.81196594]
[-14.29732227 -221.70458984]
[-27.57201958 -231.33343506]
[-25.60166359 -247.61376953]
[-10.41318798 -253.79780579]
[2.36880469 -243.52392578]
[-0.40470284 -227.36102295]
[5.25171995 -213.46839905]
[10.90814209 -199.57577515]
[16.56456566 -185.68315125]
[31.47323799 -186.82002258]
[46.02305603 -183.28831482]
[58.78614426 -175.42169189]
[68.50596619 -163.97984314]
[74.22103882 -150.07514954]
[75.36003876 -135.06455994]
[71.79885864 -120.41716003]
[63.87403107 -107.57038116]
[52.35095596 -97.78896332]
[58.00737762 -83.89633942]
[63.66379929 -70.00372314]
[69.32022095 -56.11110306]
[74.97664642 -42.21848297]
[82.46472931 -41.79579926]
[83.31034088 -56.77194595]
[98.28646851 -55.92608261]
[97.44088745 -40.95043564]
[104.92896271 -40.52775192]
[112.11287689 -53.69556808]
[119.29679108 -66.86338806]
[121.57478333 -83.66359711]
[138.34904480 -86.12538910]
[145.35821533 -70.68816376]
[132.46461487 -59.67947006]
[125.28069305 -46.51165390]
[118.09677887 -33.34383774]
[123.47355652 -21.75531578]
[124.78548431 -9.61824894]
[122.24848175 1.74292445]
[116.48052216 11.19719696]
[108.40215302 17.91953468]
[99.10900879 21.46091461]
[101.03694153 36.33649826]
[102.96488190 51.21208572]
[104.89282227 66.08766937]
[106.82076263 80.96325684]
[112.26057434 66.98439789]
[112.03555298 51.98608780]
[117.74217987 38.11401749]
[128.45591736 27.61564255]
[142.44099426 22.19184113]
[157.43164062 22.72133827]
[170.99919128 29.11834908]
[180.94551086 40.34647369]
[185.65916443 54.58660507]
[184.37649536 69.53166199]
[177.30528259 82.76035309]
[165.59118652 92.12944031]
[151.13203430 96.12102509]
[136.27365112 94.08956909]
[121.74102783 97.80474854]
[136.27575684 101.51168823]
[150.81050110 105.21862030]
[165.34524536 108.92556000]
[180.62947083 104.83867645]
[191.04986572 115.48126221]
[205.58460999 119.18820190]
[220.11935425 122.89513397]
[234.65408325 126.60207367]
[249.18882751 130.30900574]
[263.72357178 134.01594543]
[280.56564331 132.07145691]
[287.09646606 147.71704102]
[273.87023926 158.32379150]
[260.01663208 148.55068970]
[245.48188782 144.84375000]
[230.94714355 141.13681030]
[216.41241455 137.42987061]
[201.87767029 133.72293091]
[187.34294128 130.01600647]
[173.09831238 134.36802673]
[161.63830566 123.46029663]
[147.10356140 119.75335693]
[132.56883240 116.04642487]
[118.03408813 112.33948517]
[129.01231384 122.56095123]
[142.28039551 129.55796814]
[151.01924133 141.74946594]
[153.38414001 156.56187439]
[148.87585449 170.86834717]
[138.44609070 181.64888000]
[124.29650116 186.62774658]
[109.41400146 184.75392151]
[96.94021606 176.42297363]
[89.50830841 163.39352417]
[88.68711090 148.41601562]
[94.65065765 134.65122986]
[96.80957031 119.80741119]
[87.79843903 131.79905701]
[78.78730011 143.79069519]
[69.77616882 155.78233337]
[60.76503754 167.77398682]
[51.75390244 179.76562500]
[58.15181351 197.78953552]
[52.45428848 215.88984680]
[37.12994003 226.82514954]
[18.46032906 226.33470154]
[10.03907394 238.74769592]
[1.61781991 251.16069031]
[-6.80343437 263.57369995]
[-15.22468853 275.98669434]
[-23.64594269 288.39968872]
[-10.30514431 281.54232788]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 38]
[18 37]
[19 36]
[20 35]
[21 34]
[23 31]
[24 30]
[25 29]
[39 193]
[40 192]
[41 191]
[42 190]
[43 189]
[44 188]
[51 184]
[52 183]
[53 182]
[54 181]
[55 180]
[56 179]
[60 127]
[61 126]
[62 125]
[63 124]
[64 123]
[67 104]
[68 103]
[69 102]
[70 101]
[71 100]
[80 91]
[81 90]
[82 89]
[83 88]
[109 117]
[110 116]
[111 115]
[142 166]
[143 165]
[144 164]
[145 163]
[147 161]
[148 160]
[149 159]
[150 158]
[151 157]
[152 156]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
