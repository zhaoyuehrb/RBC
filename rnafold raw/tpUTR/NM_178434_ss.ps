%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 19:37:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGGAUCCUGAUGAUGAGACAAGUGAUCUUUGGAGGAAACAAGGAUCCCAAAGGCCCAGGAAAAGCUCC\
) } def
/len { sequence length } bind def

/coor [
[143.04254150 228.58438110]
[137.22573853 214.75814819]
[131.40892029 200.93191528]
[125.59210968 187.10568237]
[119.77529907 173.27944946]
[108.53619385 168.29055786]
[103.67507935 156.55581665]
[108.38412476 144.32403564]
[103.18458557 130.25404358]
[97.98504639 116.18405151]
[87.56356049 110.55075073]
[83.70393372 99.35054016]
[88.44264221 88.49300385]
[83.87055206 74.20678711]
[75.98313141 86.96565247]
[62.58658981 93.71343994]
[47.63936234 92.45629883]
[35.55809021 83.56568909]
[29.91257668 69.66863251]
[32.37096786 54.87145996]
[42.20685196 43.54647064]
[56.51390457 39.04000092]
[71.06464386 42.68362808]
[81.55955505 53.40068054]
[79.14919281 44.24837112]
[83.28873444 37.83275604]
[85.27404022 22.96471786]
[87.25934601 8.09667969]
[89.24465942 -6.77135801]
[91.22996521 -21.63939667]
[93.21527100 -36.50743484]
[95.20057678 -51.37547302]
[97.18589020 -66.24350739]
[86.50964355 -77.66944122]
[85.72724915 -93.28743744]
[95.20811462 -105.72315979]
[110.47566986 -109.10484314]
[124.32103729 -101.83575439]
[130.20686340 -87.34813690]
[125.35404968 -72.48260498]
[112.05392456 -64.25820160]
[110.06861877 -49.39016342]
[108.08331299 -34.52212524]
[106.09799957 -19.65408897]
[104.11269379 -4.78605032]
[102.12738800 10.08198833]
[100.14208221 24.95002556]
[98.15676880 39.81806564]
[96.50086212 54.72638321]
[98.15676880 69.63470459]
[102.72885895 83.92092133]
[115.41915894 94.68651581]
[112.05503845 110.98451233]
[117.25457764 125.05450439]
[122.45411682 139.12449646]
[136.85334778 150.35905457]
[133.60153198 167.46263123]
[139.41835022 181.28886414]
[145.23515320 195.11509705]
[151.05197144 208.94132996]
[156.86877441 222.76756287]
[172.11695862 224.60841370]
[184.39219666 233.83955383]
[190.39253235 247.97785950]
[188.50389099 263.22018433]
[179.23431396 275.46643066]
[165.07728577 281.42242432]
[149.84094238 279.48602295]
[137.62380981 270.17810059]
[131.71223450 256.00247192]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 61]
[2 60]
[3 59]
[4 58]
[5 57]
[8 55]
[9 54]
[10 53]
[13 51]
[14 50]
[24 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
