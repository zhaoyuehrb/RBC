%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 22:48:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAGGGCACUGUCUGUGUCCUUCCUUGAACUGUCUACCCUGUUGCUUUUCACAAAUCAUGGUAAUAAAACAAGUUAUUCUUGAGGACUAGUCAUUA\
) } def
/len { sequence length } bind def

/coor [
[-9.31793499 266.79217529]
[-21.08166122 269.84280396]
[-33.14250565 268.66946411]
[-44.03442764 263.43896484]
[-55.13859940 273.52346802]
[-66.24276733 283.60797119]
[-77.34693909 293.69250488]
[-88.45111084 303.77700806]
[-99.55527496 313.86151123]
[-110.65944672 323.94604492]
[-112.86369324 339.83694458]
[-126.73498535 347.89715576]
[-141.63244629 341.94357300]
[-146.12802124 326.54324341]
[-136.77308655 313.51004028]
[-120.74395752 312.84185791]
[-109.63979340 302.75735474]
[-98.53562164 292.67285156]
[-87.43144989 282.58831787]
[-76.32727814 272.50381470]
[-65.22311401 262.41931152]
[-54.11894226 252.33477783]
[-58.82762909 235.05491638]
[-54.26032639 217.65121460]
[-41.55642319 204.79212952]
[-24.04926872 199.96971130]
[-6.39180851 204.55169678]
[3.69270468 193.44752502]
[13.77721786 182.34335327]
[15.98478889 175.14115906]
[24.36734200 171.05152893]
[34.80258179 160.27627563]
[45.06377411 149.33517456]
[55.14828873 138.23100281]
[65.23280334 127.12683105]
[75.31731415 116.02265930]
[70.83615112 103.92819214]
[71.95756531 91.07908630]
[78.46612549 79.94375610]
[89.11149597 72.66136169]
[101.84861755 70.63091278]
[106.57524109 56.39507675]
[111.30186462 42.15924072]
[116.02848816 27.92340469]
[120.75511169 13.68756771]
[125.48173523 -0.54826814]
[130.20835876 -14.78410435]
[118.92823792 -25.01536942]
[112.79071045 -38.95275116]
[112.85913086 -54.18151474]
[119.12165070 -68.06317902]
[130.49325562 -78.19267273]
[145.00373840 -82.81498718]
[160.13906860 -81.12928772]
[173.27696228 -73.42763519]
[182.14120483 -61.04437256]
[185.19599915 -46.12498474]
[181.91210938 -31.25434685]
[172.85845947 -19.00888443]
[159.60366821 -11.51019859]
[144.44419861 -10.05748081]
[139.71757507 4.17835522]
[134.99095154 18.41419220]
[130.26432800 32.65002823]
[125.53769684 46.88586426]
[120.81107330 61.12170029]
[116.08444977 75.35753632]
[121.47702789 79.88289642]
[125.64048004 85.55955505]
[128.33653259 92.06262970]
[129.41088867 99.01996613]
[144.03480530 102.35778046]
[158.65872192 105.69559479]
[173.28263855 109.03340912]
[187.57701111 101.74981689]
[202.12376404 108.51528168]
[205.76388550 124.13991547]
[195.70497131 136.63783264]
[179.66337585 136.42170715]
[169.94482422 123.65732574]
[155.32090759 120.31951141]
[140.69699097 116.98169708]
[126.07307434 113.64388275]
[108.82393646 128.07308960]
[86.42148590 126.10717773]
[76.33696747 137.21134949]
[66.25245667 148.31552124]
[56.16794205 159.41967773]
[52.62378693 168.04704285]
[45.57781982 170.71151733]
[35.14258194 181.48675537]
[24.88138771 192.42787170]
[14.79687500 203.53204346]
[4.71236134 214.63621521]
[9.92463779 225.80830383]
[10.97820950 238.05618286]
[7.76881123 249.88661194]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 22]
[5 21]
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[27 94]
[28 93]
[29 92]
[31 91]
[32 90]
[33 88]
[34 87]
[35 86]
[36 85]
[41 67]
[42 66]
[43 65]
[44 64]
[45 63]
[46 62]
[47 61]
[71 83]
[72 82]
[73 81]
[74 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
