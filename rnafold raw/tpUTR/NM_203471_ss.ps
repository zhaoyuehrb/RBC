%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 09:47:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAGAUGAUCAGACUCCUCAUUGUUGAGGAAUCCCUCUUUCUACCUGACCAUGGGAUUCCCAGAGCCUACUAACAGAAUAAUCCCUCCUCACCCCUUCCCCUACACUUGAUCAUUAAAACAGCACCAAACUUCA\
) } def
/len { sequence length } bind def

/coor [
[118.35465240 267.62603760]
[122.20213318 253.05000305]
[129.42669678 239.81863403]
[139.60830688 228.70117188]
[152.15504456 220.34396362]
[147.06094360 206.23545837]
[141.96682739 192.12693787]
[136.87272644 178.01843262]
[131.77861023 163.90992737]
[126.68450928 149.80140686]
[121.59040070 135.69290161]
[116.49629974 121.58438873]
[111.40219116 107.47588348]
[108.39644623 116.76004791]
[98.53146362 123.81159973]
[83.94061279 124.10897827]
[70.67118073 131.10342407]
[57.40175247 138.09785461]
[44.13231659 145.09228516]
[30.86288452 152.08673096]
[17.59345245 159.08116150]
[9.31590271 173.23794556]
[-7.07927656 172.87719727]
[-14.72613049 158.37004089]
[-5.75823116 144.64018250]
[10.59901524 145.81173706]
[23.86844826 138.81729126]
[37.13788223 131.82286072]
[50.40731430 124.82842255]
[63.67674637 117.83398438]
[76.94618225 110.83954620]
[77.11942291 95.84054565]
[64.01509094 88.54148102]
[50.91075134 81.24241638]
[37.80641556 73.94334412]
[24.70208168 66.64427948]
[11.52286625 74.40672302]
[-3.67192698 74.52941895]
[-16.80074120 67.07954407]
[-24.38707924 54.14496231]
[-24.47989464 39.25009918]
[-37.58423233 31.95103073]
[-53.34624100 34.94076920]
[-65.41674042 24.37277031]
[-64.53627014 8.35389709]
[-51.38026047 -0.82754254]
[-36.04086685 3.87166739]
[-30.28516388 18.84669495]
[-17.18082809 26.14576149]
[-4.46809816 18.38354111]
[10.52279854 18.02439308]
[23.76823807 25.26488495]
[31.66294861 38.24834824]
[32.00114822 53.53994370]
[45.10548401 60.83901215]
[58.20981979 68.13807678]
[71.31415558 75.43714142]
[84.41849518 82.73621368]
[91.55674744 80.43506622]
[82.76818085 68.27936554]
[91.61326599 56.16473389]
[105.86819458 60.83346558]
[105.83326721 75.83277893]
[112.97152710 73.53163147]
[119.34567261 59.95333481]
[125.71981812 46.37503433]
[114.17941284 36.65487289]
[105.54879761 24.27848816]
[100.41641998 10.08971977]
[99.13221741 -4.94401646]
[101.78374481 -19.79769707]
[108.19022369 -33.45857239]
[117.91483307 -44.99522018]
[130.29455566 -53.62105560]
[144.48530579 -58.74795532]
[159.51953125 -60.02635193]
[174.37219238 -57.36909103]
[188.03059387 -50.95734406]
[199.56347656 -41.22827530]
[208.18453979 -28.84522820]
[213.30595398 -14.65250206]
[214.57855225 0.38222179]
[211.91555786 15.23384953]
[205.49853516 28.88977432]
[195.76501465 40.41891098]
[183.37863159 49.03518295]
[169.18392944 54.15111923]
[154.14871216 55.41790771]
[139.29812622 52.74917984]
[132.92398071 66.32747650]
[126.54982758 79.90578461]
[133.37112427 66.54651642]
[144.25148010 56.22093201]
[157.94914246 50.10748291]
[172.90077209 48.90390015]
[187.39996338 52.74753952]
[199.79191589 61.19973755]
[208.66233826 73.29583740]
[212.99884033 87.65531921]
[212.30651855 102.63933563]
[206.66436768 116.53775787]
[196.71633911 127.76436615]
[183.59779358 135.03787231]
[168.80595398 137.52813721]
[154.02900696 134.95097351]
[140.95344543 127.60047913]
[131.07157898 116.31558990]
[125.51069641 102.38177490]
[130.60481262 116.49028015]
[135.69891357 130.59880066]
[140.79301453 144.70730591]
[145.88713074 158.81581116]
[150.98123169 172.92433167]
[156.07534790 187.03283691]
[161.16944885 201.14134216]
[166.26354980 215.24986267]
[181.25515747 213.66389465]
[196.19058228 215.71244812]
[210.20150757 221.27639771]
[222.47334290 230.03228760]
[232.29263306 241.47103882]
[239.08848572 254.92762756]
[242.46580505 269.61968994]
[242.22824097 284.69308472]
[238.38960266 299.27142334]
[231.17306519 312.50717163]
[220.99818420 323.63082886]
[208.45652771 331.99563599]
[194.27722168 337.11529541]
[179.28466797 338.69216919]
[164.35047913 336.63455200]
[150.34294128 331.06210327]
[138.07641602 322.29879761]
[128.26406860 310.85409546]
[121.47637177 297.39340210]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 116]
[6 115]
[7 114]
[8 113]
[9 112]
[10 111]
[11 110]
[12 109]
[13 108]
[16 31]
[17 30]
[18 29]
[19 28]
[20 27]
[21 26]
[32 58]
[33 57]
[34 56]
[35 55]
[36 54]
[41 49]
[42 48]
[64 91]
[65 90]
[66 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
