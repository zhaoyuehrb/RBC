%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 03:19:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUGACCUCCACUGGAAGAGGGGGCUAGCGUGAGCGCUGAUUCUCAACCUACCAUAACUCUUUCCUGCCUCAGGAACUCCAAUAAAACAUUUUCCAUCCAACA\
) } def
/len { sequence length } bind def

/coor [
[91.61850739 309.49844360]
[76.92087555 312.94549561]
[61.83831406 312.29821777]
[47.49005508 307.60458374]
[34.94083023 299.21295166]
[25.12187386 287.74603271]
[18.76181984 274.05468750]
[16.33262825 259.15496826]
[18.01455688 244.15252686]
[23.68280029 230.16061401]
[32.91673279 218.21754456]
[45.03113937 209.20954895]
[59.12704468 203.80511475]
[74.15844727 202.40525818]
[76.83679962 187.64631653]
[79.51515198 172.88737488]
[82.19350433 158.12843323]
[84.87185669 143.36949158]
[87.55021667 128.61054993]
[90.22856903 113.85160065]
[83.31893158 100.53781891]
[69.70854950 94.23246002]
[56.09817123 87.92710114]
[42.48778915 81.62174225]
[28.87740898 75.31638336]
[13.10327244 76.53588867]
[4.80750179 64.16538239]
[-8.80287838 57.86001968]
[-22.41325951 51.55466080]
[-36.02363968 45.24930573]
[-49.63402176 38.94394684]
[-65.90975189 40.95206070]
[-75.56935883 27.69973564]
[-68.67585754 12.81982613]
[-52.32069397 11.61950779]
[-43.32866287 25.33356476]
[-29.71828079 31.63892365]
[-16.10790062 37.94428253]
[-2.49752045 44.24964142]
[11.11285973 50.55500031]
[25.91349030 48.88449097]
[35.18276596 61.70600128]
[48.79314804 68.01136017]
[62.40352631 74.31671906]
[76.01390839 80.62207794]
[89.62429047 86.92743683]
[80.70300293 74.86879730]
[68.43025208 66.24444580]
[59.91892624 53.89303589]
[56.22971725 39.35378647]
[57.82236481 24.43857956]
[64.49840546 11.00613499]
[75.42585754 0.73040068]
[89.24295807 -5.10806656]
[104.22782898 -5.78168011]
[118.51305389 -1.20649397]
[130.31842041 8.04733372]
[138.17274475 20.82659531]
[141.09722900 35.53874588]
[138.72743225 50.35036469]
[131.35865784 63.41563416]
[119.90607452 73.10818481]
[112.10163116 85.91797638]
[125.09201050 78.41797638]
[138.08239746 70.91797638]
[151.07276917 63.41797638]
[164.06315613 55.91797638]
[177.05354309 48.41797638]
[187.74746704 35.26212692]
[203.34954834 41.89622498]
[201.29379272 58.72507477]
[184.55354309 61.40835953]
[171.56315613 68.90835571]
[158.57276917 76.40835571]
[145.58239746 83.90835571]
[132.59201050 91.40835571]
[119.60163116 98.90835571]
[133.61442566 93.55657959]
[148.60273743 94.14874268]
[162.14964294 100.58936310]
[172.07064819 111.83985138]
[176.76596069 126.08604431]
[175.47845459 141.03068542]
[168.41572571 154.26390076]
[156.71669006 163.65179443]
[142.26783752 167.68052673]
[127.39910126 165.70043945]
[114.50811768 158.03085327]
[105.67360687 145.90850830]
[102.32015991 131.28816223]
[104.98751068 116.52995300]
[102.30915833 131.28889465]
[99.63080597 146.04783630]
[96.95245361 160.80679321]
[94.27409363 175.56573486]
[91.59574127 190.32467651]
[88.91738892 205.08361816]
[102.49844360 211.67585754]
[113.79653931 221.68862915]
[121.97328949 234.37892151]
[126.42192078 248.80500793]
[126.81232452 263.89639282]
[123.11551666 278.53323364]
[115.60583496 291.62930298]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 97]
[15 96]
[16 95]
[17 94]
[18 93]
[19 92]
[20 91]
[21 46]
[22 45]
[23 44]
[24 43]
[25 42]
[27 40]
[28 39]
[29 38]
[30 37]
[31 36]
[63 77]
[64 76]
[65 75]
[66 74]
[67 73]
[68 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
