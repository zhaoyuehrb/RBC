%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 12:58:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAAGAUUUGUUUUAAUGUACUUGCAAAUAAAAAUACAAUAUUAAACAGAUUAUUUUACAUUAGGAAGCUUAGGACUUGCUGAAUAUACAGAUCAUGUUUCAAAGAUACAGUAUUUUUGUAUUUUUUAUUAAAGGCUAUUUUUUAA\
) } def
/len { sequence length } bind def

/coor [
[83.67876434 654.01782227]
[78.63520050 639.34332275]
[83.21252441 624.51672363]
[95.65066528 615.23919678]
[95.33228302 600.24261475]
[95.01390839 585.24597168]
[94.69552612 570.24932861]
[94.37714386 555.25274658]
[82.05912781 546.92181396]
[76.94823456 532.76751709]
[81.20161438 518.14691162]
[93.38935852 508.72543335]
[93.07098389 493.72879028]
[92.75260162 478.73217773]
[92.43421936 463.73556519]
[92.11583710 448.73895264]
[91.79745483 433.74230957]
[91.47908020 418.74569702]
[91.16069794 403.74908447]
[76.83530426 396.34191895]
[68.13320160 382.65301514]
[67.49820709 366.35098267]
[75.19702148 351.86123657]
[89.22118378 343.16473389]
[88.58456421 328.17825317]
[87.94794464 313.19177246]
[87.31133270 298.20529175]
[86.67471313 283.21881104]
[86.03809357 268.23233032]
[83.99219513 266.22061157]
[82.64877319 263.24948120]
[82.38803101 259.59317017]
[83.47974396 255.66212463]
[86.03809357 251.95909119]
[86.67471313 236.97261047]
[87.31133270 221.98611450]
[87.94794464 206.99963379]
[88.58456421 192.01315308]
[78.35121155 181.25144958]
[78.78334808 166.04396057]
[90.14058685 155.38323975]
[90.77720642 140.39675903]
[91.41381836 125.41027832]
[92.05043793 110.42378998]
[92.05043793 95.42378998]
[91.41381836 80.43730927]
[90.77720642 65.45082092]
[90.14058685 50.46433640]
[89.50396729 35.47785187]
[88.70832825 20.49897003]
[87.75376129 5.52937412]
[86.79919434 -9.44022179]
[85.84461975 -24.40981865]
[71.97372437 -28.13874817]
[59.95611191 -35.96605301]
[50.96476364 -47.11187363]
[45.87235641 -60.47323227]
[45.16658020 -74.73317719]
[48.90345764 -88.49060059]
[56.70315170 -100.39788055]
[67.78852844 -109.29290009]
[81.06258392 -114.31246948]
[80.42596436 -129.29895020]
[79.78934479 -144.28543091]
[79.15273285 -159.27192688]
[70.83670807 -172.73127747]
[78.02687073 -185.77546692]
[77.39025879 -200.76194763]
[76.75363922 -215.74842834]
[75.95800018 -230.72731018]
[66.42577362 -244.07156372]
[73.46148682 -258.88476562]
[89.82739258 -259.92837524]
[98.68765259 -246.12879944]
[90.92759705 -231.68188477]
[94.51696014 -225.16160583]
[91.74011993 -216.38505554]
[92.37673950 -201.39855957]
[93.01335907 -186.41207886]
[101.28384399 -174.02465820]
[94.13921356 -159.90853882]
[94.77583313 -144.92205811]
[95.41245270 -129.93557739]
[96.04906464 -114.94908905]
[111.08953094 -110.40225983]
[123.69263458 -100.97396088]
[132.33036804 -87.78442383]
[135.94772339 -72.41125488]
[134.09144592 -56.70074844]
[126.96682739 -42.54613495]
[115.41510010 -31.65942764]
[100.81421661 -25.36438560]
[101.76879120 -10.39479065]
[102.72335815 4.57480526]
[103.67792511 19.54440117]
[107.26729584 26.06467628]
[104.49044800 34.84123611]
[105.12706757 49.82772064]
[105.76368713 64.81420135]
[106.40030670 79.80068970]
[107.03692627 94.78717041]
[109.17109680 97.07005310]
[110.49619293 100.20072174]
[110.68906403 103.87117767]
[109.54869080 107.65581512]
[107.03692627 111.06040955]
[106.40030670 126.04689026]
[105.76368713 141.03337097]
[105.12706757 156.01986694]
[115.53929901 167.60533142]
[114.68019104 182.79469299]
[103.57105255 192.64976501]
[102.93443298 207.63624573]
[102.29781342 222.62274170]
[101.66119385 237.60922241]
[101.02457428 252.59570312]
[101.02457428 267.59570312]
[101.66119385 282.58218384]
[102.29781342 297.56866455]
[102.93443298 312.55514526]
[103.57105255 327.54165649]
[104.20766449 342.52813721]
[116.95838165 348.37066650]
[125.89359283 359.09555054]
[129.30523682 372.56307983]
[126.57983398 386.11843872]
[118.30794525 397.11492920]
[106.15731812 403.43069458]
[106.47570038 418.42730713]
[106.79408264 433.42395020]
[107.11245728 448.42056274]
[107.43083954 463.41717529]
[107.74922180 478.41378784]
[108.06760406 493.41043091]
[108.38598633 508.40704346]
[120.96260834 517.30279541]
[125.83267212 531.72973633]
[121.32711029 546.08813477]
[109.37376404 554.93432617]
[109.69214630 569.93096924]
[110.01052856 584.92761230]
[110.32891083 599.92419434]
[110.64728546 614.92083740]
[123.46797180 623.66210938]
[128.67042542 638.28106689]
[124.25421906 653.15643311]
[111.91744995 662.56829834]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 143]
[5 142]
[6 141]
[7 140]
[8 139]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[24 122]
[25 121]
[26 120]
[27 119]
[28 118]
[29 117]
[34 116]
[35 115]
[36 114]
[37 113]
[38 112]
[41 109]
[42 108]
[43 107]
[44 106]
[45 101]
[46 100]
[47 99]
[48 98]
[49 97]
[50 95]
[51 94]
[52 93]
[53 92]
[62 84]
[63 83]
[64 82]
[65 81]
[67 79]
[68 78]
[69 77]
[70 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
