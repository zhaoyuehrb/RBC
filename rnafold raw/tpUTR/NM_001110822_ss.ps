%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 10:03:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUAGAAGAGAAACUCCUUAGAUGGGGGACUUAACCUGAAGACAUCCUUUUAGAAACGAUCGAAUGGAUUGUUGCUUCUGAGAAAUUGUUCCUUGUUUUUUGGAUAAUAAACGAUCUUCCUUUUGGUA\
) } def
/len { sequence length } bind def

/coor [
[83.99380493 330.20004272]
[90.04014587 314.36090088]
[90.04014587 299.36090088]
[90.04014587 284.36090088]
[90.04014587 269.36090088]
[90.04014587 254.36090088]
[90.04014587 239.36090088]
[90.04014587 224.36090088]
[90.04014587 209.36090088]
[86.86198425 202.60369873]
[90.22576141 193.99954224]
[90.58821869 179.00392151]
[90.95067596 164.00830078]
[66.55678558 155.32182312]
[47.52889252 137.75892639]
[34.41937256 145.04867554]
[21.30985069 152.33842468]
[8.20033073 159.62817383]
[-4.90919018 166.91792297]
[-10.67553425 181.88885498]
[-26.01826286 186.57716370]
[-39.16774750 177.38636780]
[-40.03683090 161.36688232]
[-27.95882416 150.80746460]
[-12.19894123 153.80841064]
[0.91057932 146.51864624]
[14.02009964 139.22889709]
[27.12961960 131.93914795]
[40.23913956 124.64939880]
[37.84249496 117.75943756]
[36.23737335 110.64332581]
[35.44421387 103.39167786]
[35.47311783 96.09683990]
[36.32371902 88.85170746]
[37.98518372 81.74854279]
[40.43635559 74.87779236]
[43.64602280 68.32695007]
[31.51076698 59.51016998]
[19.37551117 50.69338989]
[7.24025679 41.87660980]
[-4.89499807 33.05983353]
[-17.03025246 24.24305344]
[-32.59879303 26.96262550]
[-45.48223114 17.80879784]
[-48.03705215 2.21237350]
[-38.74752426 -10.57356453]
[-23.12496185 -12.96334743]
[-10.43795204 -3.53915763]
[-8.21347427 12.10779858]
[3.92178059 20.92457771]
[16.05703545 29.74135590]
[28.19229126 38.55813599]
[40.32754517 47.37491226]
[52.46279907 56.19169235]
[70.65186310 42.40103912]
[92.50000000 35.79172134]
[92.50000000 20.79172134]
[92.50000000 5.79172039]
[92.50000000 -9.20827961]
[92.50000000 -24.20827866]
[92.50000000 -39.20827866]
[92.50000000 -54.20827866]
[82.21823120 -66.52350616]
[85.57711029 -82.21099854]
[100.00000000 -89.23665619]
[114.42288971 -82.21099854]
[117.78176880 -66.52350616]
[107.50000000 -54.20827866]
[107.50000000 -39.20827866]
[107.50000000 -24.20827866]
[107.50000000 -9.20827961]
[107.50000000 5.79172039]
[107.50000000 20.79172134]
[107.50000000 35.79172134]
[123.87846375 39.92694092]
[138.62641907 48.16416931]
[150.73681641 59.94093323]
[159.38272095 74.45307922]
[173.75640869 70.16389465]
[188.13009644 65.87470245]
[202.50378418 61.58552170]
[216.87747192 57.29633713]
[231.25115967 53.00714874]
[245.62484741 48.71796417]
[259.99853516 44.42877960]
[274.37222290 40.13959503]
[288.74591064 35.85041046]
[293.76892090 21.16882324]
[306.48156738 12.27118587]
[321.99560547 12.57881927]
[334.34555054 21.97343254]
[338.78259277 36.84260559]
[333.60058594 51.46883774]
[320.79217529 60.22804260]
[305.28237915 59.75213242]
[293.03509521 50.22409821]
[278.66140747 54.51328278]
[264.28771973 58.80246735]
[249.91403198 63.09165192]
[235.54034424 67.38083649]
[221.16665649 71.67002106]
[206.79296875 75.95920563]
[192.41928101 80.24839020]
[178.04559326 84.53757477]
[163.67190552 88.82676697]
[164.57463074 96.98828888]
[164.43547058 105.19841003]
[163.25666809 113.32465363]
[161.05726624 121.23590851]
[157.87272644 128.80453491]
[153.75442505 135.90841675]
[148.76884460 142.43293762]
[142.99638367 148.27281189]
[136.53019714 153.33383179]
[129.47462463 157.53433228]
[121.94348907 160.80654907]
[114.05830383 163.09768677]
[105.94629669 164.37075806]
[105.58383942 179.36637878]
[105.22138214 194.36199951]
[105.04014587 209.36090088]
[105.04014587 224.36090088]
[105.04014587 239.36090088]
[105.04014587 254.36090088]
[105.04014587 269.36090088]
[105.04014587 284.36090088]
[105.04014587 299.36090088]
[105.04014587 314.36090088]
[111.08648682 330.20004272]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 128]
[3 127]
[4 126]
[5 125]
[6 124]
[7 123]
[8 122]
[9 121]
[11 120]
[12 119]
[13 118]
[15 29]
[16 28]
[17 27]
[18 26]
[19 25]
[37 54]
[38 53]
[39 52]
[40 51]
[41 50]
[42 49]
[56 74]
[57 73]
[58 72]
[59 71]
[60 70]
[61 69]
[62 68]
[78 105]
[79 104]
[80 103]
[81 102]
[82 101]
[83 100]
[84 99]
[85 98]
[86 97]
[87 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
