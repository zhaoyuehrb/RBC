%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 15:53:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAGGUAUCUUUCCUCCUUCCCUAUCCUAUUUCCAUCCUGAAAAUAAAGAAUAUAUUUCAACUCUA\
) } def
/len { sequence length } bind def

/coor [
[66.84415436 165.98347473]
[51.68355942 155.84487915]
[39.47021103 142.29981995]
[26.36587524 149.59887695]
[13.26153946 156.89794922]
[0.15720356 164.19702148]
[0.00091775 179.55511475]
[-7.82728910 192.76930237]
[-21.22166824 200.28503418]
[-36.57920074 200.08059692]
[-49.76878738 192.21101379]
[-57.24249268 178.79313660]
[-56.98992920 163.43632507]
[-49.07903671 150.27146912]
[-35.63780212 142.83985901]
[-20.28185463 143.14056396]
[-7.14186382 151.09268188]
[5.96247244 143.79360962]
[19.06680870 136.49455261]
[32.17114258 129.19548035]
[28.20945549 117.29876709]
[26.31765747 104.90328979]
[26.55029869 92.36643982]
[28.90067101 80.04968262]
[33.30100632 68.30814362]
[39.62443161 57.48035431]
[47.68862534 47.87850571]
[57.26108551 39.77944565]
[68.06581116 33.41669083]
[79.79127502 28.97368813]
[92.09940338 26.57854271]
[104.63532257 26.30031586]
[117.03759766 28.14702415]
[128.94863892 32.06542587]
[140.02500916 37.94254303]
[149.94738770 45.60892487]
[158.42964172 54.84353256]
[165.22723389 65.38010406]
[170.14418030 76.91485596]
[173.03869629 89.11520386]
[188.02268982 88.42245483]
[203.00668335 87.72970581]
[217.99067688 87.03694916]
[232.97467041 86.34420013]
[247.93867493 85.30553436]
[262.87469482 83.92150879]
[277.81069946 82.53748322]
[289.12469482 71.16326904]
[305.05520630 73.06036377]
[313.38165283 86.77347565]
[307.71673584 101.78308105]
[292.40609741 106.57509613]
[279.19473267 97.47349548]
[264.25869751 98.85752106]
[249.32269287 100.24154663]
[242.73138428 104.12770844]
[233.66741943 101.32819366]
[218.68342590 102.02094269]
[203.69943237 102.71369934]
[188.71543884 103.40644836]
[173.73144531 104.09919739]
[170.47801208 122.04495239]
[162.92549133 138.64598083]
[151.53459167 152.88964844]
[137.00015259 163.90710449]
[120.20872498 171.02630615]
[102.18460083 173.81298828]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 20]
[4 19]
[5 18]
[6 17]
[40 61]
[41 60]
[42 59]
[43 58]
[44 57]
[45 55]
[46 54]
[47 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
