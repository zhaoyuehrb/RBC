%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 03:00:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGAGAACACAGCCCACCUCAGGCCUCCUGCAAAAAUACAUAGAAUAAACAACAACAGUUACUAAAUGAA\
) } def
/len { sequence length } bind def

/coor [
[174.36140442 109.85146332]
[169.72004700 95.56146240]
[154.94793701 98.16619110]
[140.17582703 100.77091217]
[125.40370178 103.37563324]
[110.63158417 105.98035431]
[120.84643555 116.96474457]
[120.70156097 131.96405029]
[110.27645111 142.74908447]
[95.29070282 143.40278625]
[83.96604919 133.56651306]
[82.51562500 118.63680267]
[91.73380280 106.80545044]
[76.79088593 105.49811554]
[61.84796524 104.19078064]
[50.91920090 115.37541962]
[35.35292053 116.86701965]
[22.49904060 107.96130371]
[18.42677498 92.86326599]
[25.05891991 78.70174408]
[39.26398087 72.16337585]
[54.33476257 76.33538055]
[63.15530014 89.24785614]
[78.09822083 90.55519104]
[93.04114532 91.86253357]
[108.02686310 91.20823669]
[122.79898071 88.60351562]
[137.57109070 85.99879456]
[152.34321594 83.39407349]
[167.11532593 80.78934479]
[166.58930969 65.77371216]
[168.15826416 50.83100128]
[171.79164124 36.25208664]
[177.41871643 22.32075310]
[184.92997742 9.30817604]
[194.17919922 -2.53235221]
[204.98634338 -12.97035122]
[217.14103699 -21.80264282]
[230.40670776 -28.85730362]
[244.52511597 -33.99701309]
[259.22146606 -37.12172318]
[274.20965576 -38.17061234]
[289.19793701 -37.12326431]
[303.89459229 -34.00006485]
[318.01354980 -28.86180687]
[331.27993774 -21.80850983]
[343.43554688 -12.97746849]
[354.24377441 -2.54058027]
[363.49420166 9.29899693]
[371.00677490 22.31080246]
[376.63531494 36.24155807]
[380.27017212 50.82009888]
[381.84066772 65.76264191]
[381.31619263 80.77833557]
[378.70697021 95.57489014]
[374.06378174 109.86428833]
[367.47698975 123.36838531]
[359.07485962 135.82431030]
[349.02090454 146.98962402]
[337.51083374 156.64695740]
[324.76867676 164.60836792]
[311.04248047 170.71885681]
[296.59945679 174.85948181]
[281.72070312 176.94966125]
[266.69586182 176.94868469]
[251.81736755 174.85659790]
[237.37486267 170.71411133]
[223.64945984 164.60186768]
[210.90834045 156.63882446]
[199.39950562 146.98001099]
[189.34698486 135.81340027]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 30]
[3 29]
[4 28]
[5 27]
[6 26]
[13 25]
[14 24]
[15 23]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
