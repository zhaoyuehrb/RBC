%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 23:40:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGAGAUACUGCUGCUGGAAUGGGCGAGACAUUGCUGCAAAGAAGUCAAGCUUUUUUCAGACAAAAGGUGUGAGGGGGCUUGCUUGGUAUGCUUACCUGGGCUUGUGUACCUCAGUGGUUUUUGUGUACUUUUUUCAAUAAAAUAUCAAAGUUGAAGAA\
) } def
/len { sequence length } bind def

/coor [
[94.43841553 107.96990967]
[80.47019196 113.43696594]
[66.50196838 118.90402222]
[52.53374481 124.37108612]
[38.56552124 129.83813477]
[24.59729767 135.30519104]
[22.10864830 148.89218140]
[13.29095078 159.38334656]
[0.53808767 164.09725952]
[-12.76929569 161.89869690]
[-23.15984154 153.46995544]
[-37.23271179 158.66171265]
[-51.30558014 163.85346985]
[-65.27380371 169.32052612]
[-79.13199615 175.06077576]
[-92.99018860 180.80102539]
[-92.88117218 196.85458374]
[-98.91658783 211.68930054]
[-110.14806366 223.05233765]
[-124.84057617 229.23025513]
[-140.74044800 229.30741882]
[-155.42102051 223.30152893]
[-166.65303040 212.15643311]
[-180.39585876 218.16767883]
[-194.13867188 224.17890930]
[-207.88150024 230.19013977]
[-221.62431335 236.20137024]
[-230.90916443 249.71890259]
[-247.23474121 248.16716003]
[-253.80667114 233.14247131]
[-243.86433411 220.10092163]
[-227.63554382 222.45855713]
[-213.89273071 216.44731140]
[-200.14990234 210.43608093]
[-186.40708923 204.42485046]
[-172.66427612 198.41362000]
[-173.47137451 184.37689209]
[-169.42199707 170.88150024]
[-160.98463440 159.55993652]
[-149.15985107 151.78903198]
[-135.36166382 148.52252197]
[-121.24848938 150.17402649]
[-108.52377319 156.56478882]
[-98.73044586 166.94282532]
[-84.87224579 161.20257568]
[-71.01405334 155.46232605]
[-68.37625885 151.42443848]
[-63.15048981 149.02941895]
[-56.49733734 149.78059387]
[-42.42446518 144.58883667]
[-28.35159683 139.39707947]
[-24.42057610 123.48340607]
[-11.66299915 112.92843628]
[5.03657103 112.02958679]
[19.13023949 121.33697510]
[33.09846497 115.86991882]
[47.06668854 110.40285492]
[61.03491211 104.93579865]
[75.00313568 99.46874237]
[88.97135925 94.00168610]
[100.28126526 84.14846039]
[107.61058044 71.06101990]
[114.93990326 57.97357559]
[122.26921844 44.88613892]
[129.59854126 31.79869652]
[136.92785645 18.71125603]
[144.25717163 5.62381697]
[144.24946594 -10.19738770]
[157.21903992 -17.52127266]
[156.52947998 -35.89850616]
[171.90219116 -44.31701660]
[178.97314453 -57.54583740]
[186.04409790 -70.77465820]
[193.11505127 -84.00347137]
[200.18600464 -97.23229218]
[194.79603577 -113.84855652]
[202.90849304 -128.93751526]
[219.09222412 -133.42517090]
[225.90208435 -146.79026794]
[221.24929810 -161.65597534]
[228.34585571 -175.11306763]
[242.54670715 -179.45718384]
[249.35656738 -192.82228088]
[256.16641235 -206.18737793]
[262.97628784 -219.55247498]
[269.65460205 -232.98377991]
[276.20074463 -246.48001099]
[282.74688721 -259.97622681]
[289.29299927 -273.47244263]
[287.57434082 -289.78128052]
[300.99615479 -299.20394897]
[315.75128174 -292.04721069]
[316.66085815 -275.67330933]
[302.78924561 -266.92633057]
[296.24310303 -253.43009949]
[289.69696045 -239.93386841]
[283.15081787 -226.43763733]
[283.06082153 -219.00839233]
[276.34136963 -212.74261475]
[269.53152466 -199.37751770]
[262.72164917 -186.01242065]
[255.91180420 -172.64732361]
[260.74441528 -158.60519409]
[254.02862549 -144.95407104]
[239.26718140 -139.98040771]
[232.45732117 -126.61531067]
[238.12126160 -115.00818634]
[236.01844788 -102.06770325]
[226.69772339 -92.57292938]
[213.41481018 -90.16134644]
[206.34387207 -76.93252563]
[199.27291870 -63.70370483]
[192.20196533 -50.47488785]
[185.13101196 -37.24606705]
[188.34103394 -25.54953003]
[182.51550293 -14.45550823]
[170.30648804 -10.19195366]
[170.83843994 4.69314957]
[157.34461975 12.95313549]
[150.01528931 26.04057503]
[142.68597412 39.12801743]
[135.35665894 52.21545410]
[128.02734375 65.30289459]
[120.69802094 78.39033508]
[113.36870575 91.47777557]
[126.19696045 83.70372772]
[140.58885193 87.93144226]
[147.17445374 101.40844727]
[141.66621399 115.36047363]
[127.65026093 120.70399475]
[114.25204468 113.96042633]
[122.58560181 126.43247223]
[130.91915894 138.90451050]
[139.25271606 151.37655640]
[147.58625793 163.84860229]
[155.91981506 176.32064819]
[164.25337219 188.79269409]
[172.58692932 201.26473999]
[180.92047119 213.73678589]
[196.13365173 212.05818176]
[210.38011169 217.65257263]
[220.38610840 229.23440552]
[223.85232544 244.14224243]
[219.98228455 258.95040894]
[209.66526794 270.25604248]
[195.27204895 275.46124268]
[180.11010742 273.36987305]
[167.66352844 264.46249390]
[160.79243469 250.78599548]
[161.07577515 235.48310852]
[168.44842529 222.07034302]
[160.11488342 209.59829712]
[151.78132629 197.12625122]
[143.44776917 184.65420532]
[135.11421204 172.18215942]
[126.78066254 159.71011353]
[118.44711304 147.23806763]
[110.11355591 134.76602173]
[101.78000641 122.29398346]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 60]
[2 59]
[3 58]
[4 57]
[5 56]
[6 55]
[11 51]
[12 50]
[13 49]
[14 46]
[15 45]
[16 44]
[23 36]
[24 35]
[25 34]
[26 33]
[27 32]
[61 125]
[62 124]
[63 123]
[64 122]
[65 121]
[66 120]
[67 119]
[69 117]
[71 114]
[72 113]
[73 112]
[74 111]
[75 110]
[78 106]
[79 105]
[82 102]
[83 101]
[84 100]
[85 99]
[86 97]
[87 96]
[88 95]
[89 94]
[131 159]
[132 158]
[133 157]
[134 156]
[135 155]
[136 154]
[137 153]
[138 152]
[139 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
