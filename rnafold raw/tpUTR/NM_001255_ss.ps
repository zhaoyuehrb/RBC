%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 08:46:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACCAACCCAUCACCUCAGUUGUUUUUUAUUUUUCUAAUAAAGUCAUGUCUCCCUUCAUGUUUUUUUUUUAA\
) } def
/len { sequence length } bind def

/coor [
[75.86373138 186.30455017]
[74.73513794 171.34706116]
[78.39919281 156.80145264]
[86.47908783 144.16360474]
[98.14331055 134.73350525]
[84.22497559 140.32635498]
[70.30664062 145.91920471]
[56.38830185 151.51205444]
[54.90494156 166.74551392]
[46.50245667 179.53834534]
[33.11167526 186.95086670]
[17.80970001 187.27973938]
[4.11281395 180.44937134]
[-4.83153820 168.02934265]
[-6.96801043 152.87367249]
[-1.80565703 138.46504211]
[9.46925068 128.11444092]
[24.26582336 124.20035553]
[39.18391418 127.62222290]
[50.79545593 137.59371948]
[64.71379089 132.00086975]
[78.63212585 126.40802002]
[92.55046082 120.81517029]
[81.74483490 109.83946228]
[81.17978668 95.42631531]
[89.84288788 85.14202881]
[87.30787659 70.35778809]
[84.77286530 55.57355118]
[82.23785400 40.78931427]
[79.70284271 26.00507545]
[77.16783142 11.22083664]
[74.63281250 -3.56340241]
[62.41765594 -13.96385670]
[63.07702637 -29.99335480]
[76.10511017 -39.35543442]
[91.50788116 -34.86831284]
[97.46965027 -19.97412491]
[89.41705322 -6.09841442]
[91.95206451 8.68582439]
[94.48707581 23.47006226]
[97.02209473 38.25430298]
[99.55710602 53.03853989]
[102.09211731 67.82277679]
[104.62712860 82.60701752]
[119.04893494 93.73411560]
[117.25704193 113.81887817]
[132.04129028 111.28386688]
[146.82551575 108.74885559]
[161.60975647 106.21384430]
[168.35668945 92.24034882]
[182.04438782 84.93098450]
[197.40963745 87.09635162]
[208.54418945 97.90381622]
[211.16658020 113.19769287]
[204.26846313 127.09716797]
[190.50228882 134.25761414]
[175.16143799 131.92570496]
[164.14477539 120.99807739]
[149.36053467 123.53309631]
[134.57629395 126.06810760]
[119.79206085 128.60311890]
[134.66937256 130.51766968]
[148.17565918 137.04299927]
[158.92193604 147.50807190]
[165.80303955 160.83662415]
[168.11131287 175.65795898]
[165.60935974 190.44783020]
[158.55450439 203.68524170]
[147.67227173 214.00885010]
[134.08177185 220.35696411]
[119.18069458 222.07675171]
[104.50144958 218.99133301]
[91.55367279 211.41801453]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 23]
[6 22]
[7 21]
[8 20]
[26 44]
[27 43]
[28 42]
[29 41]
[30 40]
[31 39]
[32 38]
[46 61]
[47 60]
[48 59]
[49 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
