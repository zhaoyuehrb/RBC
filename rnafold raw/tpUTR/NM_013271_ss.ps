%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:16:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACUGCCCGGAUCCCGUGCACCCUGGGACCCAGAAGUGCCCCCGCCAUCCCGCCACCAGGACUGCUCCCCGCCAGCACGUCCAGAGCAACUUACCCCGGCCAGCCAGCCCUCUCACCCGAGGAUCCCUACCCCCUGGCCCCACAAUAAACAUGAUCUGAAGCAGCUC\
) } def
/len { sequence length } bind def

/coor [
[92.61699677 392.65798950]
[84.86545563 379.07684326]
[87.70806885 363.69979858]
[99.80265045 353.78741455]
[99.80265045 338.78741455]
[99.80265045 323.78741455]
[99.80265045 308.78741455]
[90.21541595 294.10928345]
[99.50159454 278.22973633]
[99.22277069 263.23233032]
[98.94394684 248.23492432]
[98.66512299 233.23751831]
[98.38629913 218.24009705]
[98.10747528 203.24269104]
[87.23666382 193.12533569]
[86.74024963 177.91979980]
[97.42597198 166.58609009]
[97.14714813 151.58868408]
[84.27450562 143.88835144]
[70.92845154 150.73545837]
[57.58239365 157.58255005]
[44.23633575 164.42964172]
[34.63662338 180.12164307]
[17.16961861 178.61611938]
[3.95314336 185.71011353]
[-9.26333237 192.80410767]
[-22.47980881 199.89810181]
[-33.57612991 212.71636963]
[-48.96522141 205.60215759]
[-46.38915253 188.84506226]
[-29.57380295 186.68162537]
[-16.35732651 179.58763123]
[-3.14085126 172.49363708]
[10.07562447 165.39964294]
[13.88062477 153.89044189]
[24.86773872 147.88092041]
[37.38923645 151.08358765]
[50.73529434 144.23649597]
[64.08135223 137.38938904]
[77.42740631 130.54229736]
[76.66193390 123.08145905]
[61.74024200 124.61215973]
[60.20978928 109.69044495]
[75.13098907 108.15979004]
[74.36551666 100.69895935]
[59.90713120 96.70456696]
[46.28478241 104.71749878]
[31.00750732 100.67022705]
[23.13904572 86.96392059]
[27.34761429 71.73028564]
[41.13634491 64.00717926]
[56.32462692 68.37657166]
[63.90152359 82.24618530]
[78.35990906 86.24057770]
[83.06716156 80.40175629]
[69.05189514 75.05644989]
[69.80481720 60.07535553]
[84.28540039 56.16219711]
[92.48165894 68.72412109]
[97.18891144 62.88530731]
[90.21806335 49.60346603]
[83.24721527 36.32162476]
[76.27636719 23.03978539]
[69.18237305 9.82330990]
[61.96584702 -3.32666039]
[54.74931717 -16.47663116]
[47.53278732 -29.62660027]
[32.16103363 -32.49769974]
[22.27108192 -44.61061859]
[22.53266716 -60.24601746]
[32.82227325 -72.02133179]
[48.28146744 -74.37661743]
[61.61088562 -66.19978333]
[66.51679230 -51.35168076]
[60.68275833 -36.84312820]
[67.89928436 -23.69315910]
[75.11581421 -10.54319000]
[82.33234406 2.60678029]
[88.33132935 6.97550297]
[89.55821228 16.06893730]
[96.52906036 29.35077858]
[103.49990845 42.63261795]
[110.47074890 55.91445923]
[110.72090912 40.91654587]
[110.97106934 25.91863060]
[106.72235107 11.53293228]
[108.59230804 -3.35005355]
[116.26774597 -16.23755074]
[128.46310425 -24.97101784]
[143.13574219 -28.08766937]
[157.82814026 -25.06549454]
[170.07943726 -16.41068077]
[177.83764648 -3.57283831]
[179.80332947 11.29780674]
[175.64726257 25.71054649]
[166.06553650 37.25137329]
[152.66206360 43.98754501]
[141.88865662 54.42467499]
[131.11524963 64.86180115]
[145.57362366 60.86740875]
[160.03201294 56.87301636]
[174.49038696 52.87862396]
[188.94877625 48.88423157]
[203.40716553 44.88983917]
[205.95031738 25.28372955]
[216.71284485 8.75574112]
[233.53442383 -1.45134890]
[253.07080078 -3.35606861]
[271.45867920 3.37721276]
[285.07958984 17.38000870]
[299.00354004 11.80114937]
[312.92749023 6.22229099]
[326.85144043 0.64343214]
[332.83749390 -13.98334503]
[347.44506836 -20.01611519]
[362.00775146 -13.87574291]
[367.88574219 0.79479671]
[361.59173584 15.29173374]
[346.85986328 21.01429176]
[332.43029785 14.56737995]
[318.50634766 20.14623833]
[304.58239746 25.72509766]
[290.65844727 31.30395699]
[291.64596558 41.89208603]
[290.05810547 52.41993332]
[285.98190308 62.26953125]
[279.65048218 70.86122894]
[271.43005371 77.68780518]
[261.79840088 82.34440613]
[251.31741333 84.55255127]
[240.60009766 84.17678833]
[230.27481079 81.23297119]
[220.94842529 75.88771820]
[213.17063904 68.44895172]
[207.40155029 59.34822083]
[192.94316101 63.34261322]
[178.48478699 67.33700562]
[164.02639771 71.33139801]
[149.56802368 75.32579041]
[135.10963440 79.32018280]
[149.87995911 81.93502808]
[162.63662720 89.82601929]
[171.57142639 101.87464142]
[175.41792297 116.37306976]
[173.63087463 131.26623535]
[166.46360779 144.44311523]
[154.93203735 154.03596497]
[140.67068481 158.68504333]
[125.70102692 157.73136902]
[112.14456177 151.30986023]
[112.42338562 166.30726624]
[123.52300262 177.23596191]
[123.59212494 192.44943237]
[113.10488129 202.96386719]
[113.38370514 217.96127319]
[113.66252899 232.95869446]
[113.94135284 247.95610046]
[114.22017670 262.95349121]
[114.49900055 277.95089722]
[123.24269867 287.46893311]
[123.14388275 299.99176025]
[114.80265045 308.78741455]
[114.80265045 323.78741455]
[114.80265045 338.78741455]
[114.80265045 353.78741455]
[126.89723969 363.69979858]
[129.73985291 379.07684326]
[121.98831177 392.65798950]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 165]
[5 164]
[6 163]
[7 162]
[9 159]
[10 158]
[11 157]
[12 156]
[13 155]
[14 154]
[17 151]
[18 150]
[19 40]
[20 39]
[21 38]
[22 37]
[24 34]
[25 33]
[26 32]
[27 31]
[45 54]
[46 53]
[60 83]
[61 82]
[62 81]
[63 80]
[64 78]
[65 77]
[66 76]
[67 75]
[99 140]
[100 139]
[101 138]
[102 137]
[103 136]
[104 135]
[110 123]
[111 122]
[112 121]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
