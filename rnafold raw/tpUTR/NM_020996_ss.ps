%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 16:16:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACCCACAAAAGAAGGCUCACAGAUUUAAAGCAUCAUCUGUUCGAUUGAAAUUUUGCACCAGCGAAGAAUUC\
) } def
/len { sequence length } bind def

/coor [
[82.73324585 126.24782562]
[92.50791168 114.86950684]
[80.44795227 123.78900909]
[73.95351410 138.21582031]
[59.11996841 139.56311035]
[47.06000900 148.48260498]
[48.17406845 163.86968994]
[40.77232742 177.40548706]
[27.21666145 184.77076721]
[11.83262920 183.61531067]
[-0.47077912 174.30780029]
[-5.76759005 159.81823730]
[-2.36761093 144.77020264]
[8.64423752 133.96543884]
[23.75411415 130.85173035]
[38.14051056 136.42265320]
[50.20046997 127.50315094]
[55.83230591 113.71432495]
[71.52845764 111.72904968]
[83.58841705 102.80955505]
[87.05912781 88.21660614]
[80.30606842 74.82271576]
[73.55301666 61.42882919]
[66.79995728 48.03493881]
[60.04690170 34.64105225]
[53.29384613 21.24716568]
[37.95522308 20.45835495]
[25.07472420 12.09245300]
[18.11713982 -1.60015798]
[18.95402527 -16.93623352]
[27.36026001 -29.79044533]
[41.07461166 -36.70507431]
[56.40798950 -35.82012558]
[69.23578644 -27.37363815]
[76.10739899 -13.63767910]
[75.17438507 1.69284773]
[66.68773651 14.49410915]
[73.44078827 27.88799667]
[80.19384766 41.28188324]
[86.94689941 54.67577362]
[93.69995880 68.06965637]
[100.45301819 81.46354675]
[97.07058716 66.84988403]
[100.44296265 52.23389435]
[109.88626099 40.57953262]
[123.48548889 34.25016022]
[138.48289490 34.52929688]
[151.83717346 41.36034012]
[160.84024048 53.35803604]
[163.66639709 68.08939362]
[159.74250793 82.56707001]
[149.86430359 93.85516357]
[136.03497314 99.66459656]
[121.05982208 98.81752777]
[134.72825623 104.99604797]
[148.39668274 111.17456818]
[162.06510925 117.35308838]
[175.73353577 123.53160095]
[191.98988342 121.37222290]
[201.77230835 134.53414917]
[195.01748657 149.47752380]
[178.67419434 150.82987976]
[169.55500793 137.20002747]
[155.88658142 131.02151489]
[142.21815491 124.84299469]
[128.54972839 118.66447449]
[114.88130188 112.48595428]
[126.83354950 121.54927826]
[131.62805176 135.76240540]
[127.60794830 150.21365356]
[116.16249084 159.90908813]
[101.24690247 161.49822998]
[88.01560974 154.43191528]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 20]
[3 19]
[5 17]
[6 16]
[21 42]
[22 41]
[23 40]
[24 39]
[25 38]
[26 37]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
