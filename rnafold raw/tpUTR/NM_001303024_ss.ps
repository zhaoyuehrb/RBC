%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 03:46:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAAGCCCCUGAGAAAAACCCUCUAGAAAAACAGCUGUUCCUCUGUGUGGUUUGUUUUUUUCCUGGUUCCAAGUGUGCAUGCCAGCCCCAGCUCCACUCACCUUUUUCCAGCUUUUGGCCUCUUCACCUCUCCACUCUGCUCUCCUUGACGCC\
) } def
/len { sequence length } bind def

/coor [
[162.00599670 206.57879639]
[153.68824768 194.09620667]
[145.37051392 181.61361694]
[137.05276489 169.13102722]
[123.55650330 162.83020020]
[122.34285736 147.05561829]
[114.02510834 134.57302856]
[105.70735931 122.09043121]
[92.94594574 122.91930389]
[81.10942078 116.59533691]
[74.06732178 104.43540192]
[74.50671387 89.75803375]
[59.52596283 90.51776886]
[44.54521561 91.27751160]
[29.56446838 92.03724670]
[14.58372116 92.79698181]
[-0.39702624 93.55672455]
[-15.37777424 94.31645966]
[-30.35852051 95.07619476]
[-45.33926773 95.83593750]
[-60.29000092 97.05070496]
[-75.19689178 98.71938324]
[-88.05067444 107.94385529]
[-101.55968475 101.67042542]
[-116.44889832 103.49008942]
[-131.31890869 105.46054077]
[-146.18893433 107.43099213]
[-161.05894470 109.40144348]
[-170.66444397 121.66407013]
[-185.77282715 123.45056152]
[-197.40417480 114.21761322]
[-212.27418518 116.18806458]
[-227.14419556 118.15851593]
[-239.80924988 128.57621765]
[-255.06665039 122.56425476]
[-257.22091675 106.30722046]
[-244.05589294 96.52895355]
[-229.11465454 103.28849792]
[-214.24464417 101.31804657]
[-199.37461853 99.34759521]
[-190.54942322 87.40391541]
[-175.49719238 85.19377136]
[-163.02938843 94.53142548]
[-148.15937805 92.56097412]
[-133.28936768 90.59052277]
[-118.41934967 88.62007141]
[-112.16483307 84.60005188]
[-103.22836304 86.76353455]
[-91.44082642 77.65840912]
[-76.86557007 83.81248474]
[-61.95867538 82.14380646]
[-59.46378708 79.57417297]
[-55.57687378 78.11461639]
[-50.84729767 78.41665649]
[-46.09900665 80.85518646]
[-31.11825943 80.09545135]
[-16.13751221 79.33570862]
[-1.15676379 78.57597351]
[13.82398415 77.81623840]
[28.80473137 77.05649567]
[43.78548050 76.29676056]
[58.76622772 75.53702545]
[73.74697113 74.77728271]
[86.14463043 66.33346558]
[92.33811951 52.67181778]
[98.53160858 39.01016617]
[104.72510529 25.34851646]
[97.02767944 13.87431526]
[96.02825928 0.20230210]
[101.88191986 -12.07353020]
[112.95635223 -19.77941513]
[126.28536987 -20.98218346]
[132.75447083 -34.51550674]
[139.22357178 -48.04882431]
[140.11314392 -57.20032120]
[145.96336365 -61.78884506]
[152.70541382 -75.18827820]
[159.44746399 -88.58770752]
[154.71942139 -103.42964935]
[161.74769592 -116.92253876]
[175.92636108 -121.33854675]
[182.66839600 -134.73797607]
[179.36680603 -147.24613953]
[185.30424500 -158.28570557]
[196.79956055 -162.16845703]
[203.81179810 -175.42849731]
[210.82402039 -188.68852234]
[209.67442322 -205.04733276]
[223.41629028 -213.99681091]
[237.91317749 -206.33050537]
[238.25192261 -189.93486023]
[224.08406067 -181.67630005]
[217.07183838 -168.41625977]
[210.05960083 -155.15621948]
[211.68086243 -137.70745850]
[196.06784058 -127.99593353]
[189.32579041 -114.59649658]
[194.22947693 -100.57903290]
[187.58296204 -86.89405823]
[172.84689331 -81.84565735]
[166.10484314 -68.44622803]
[159.36280823 -55.04679489]
[152.75689697 -41.57972717]
[146.28779602 -28.04640770]
[139.81869507 -14.51308632]
[148.09503174 -0.36756366]
[146.31237793 16.09082603]
[134.97436523 28.37999153]
[118.38674927 31.54200745]
[112.19326019 45.20365524]
[105.99977112 58.86530685]
[99.80628204 72.52695465]
[109.50304413 75.05117798]
[117.38081360 80.76955414]
[122.47617340 88.72698212]
[124.26108551 97.71505737]
[122.69227600 106.45361328]
[118.18994904 113.77268219]
[126.50769806 126.25527191]
[134.82543945 138.73786926]
[148.91664124 145.93153381]
[149.53535461 160.81327820]
[157.85310364 173.29586792]
[166.17085266 185.77845764]
[174.48858643 198.26104736]
[174.66433716 183.26208496]
[180.39825439 169.40127563]
[190.87005615 158.66156006]
[204.58163452 152.57939148]
[219.57138062 152.02487183]
[233.69483948 157.07734680]
[244.93151855 167.01400757]
[251.67387390 180.41328430]
[252.95732117 195.35827637]
[248.59826660 209.71092224]
[239.22030640 221.41793823]
[226.16508484 228.80447388]
[211.30027771 230.81382751]
[196.75245667 227.15852356]
[184.60166931 218.36019897]
[189.66842651 232.47856140]
[194.87800598 246.54483032]
[200.22987366 260.55761719]
[214.22889709 268.39385986]
[216.68823242 284.24728394]
[205.72128296 295.95648193]
[189.74095154 294.53918457]
[181.00599670 281.08258057]
[186.21710205 265.90945435]
[180.86524963 251.89669800]
[175.50924683 246.73985291]
[175.55007935 237.54531860]
[170.48330688 223.42697144]
[165.12893677 220.33917236]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 125]
[2 124]
[3 123]
[4 122]
[6 120]
[7 119]
[8 118]
[12 63]
[13 62]
[14 61]
[15 60]
[16 59]
[17 58]
[18 57]
[19 56]
[20 55]
[21 51]
[22 50]
[24 48]
[25 46]
[26 45]
[27 44]
[28 43]
[31 40]
[32 39]
[33 38]
[64 112]
[65 111]
[66 110]
[67 109]
[72 105]
[73 104]
[74 103]
[76 102]
[77 101]
[78 100]
[81 97]
[82 96]
[85 94]
[86 93]
[87 92]
[140 153]
[141 152]
[142 150]
[143 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
