%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 18:08:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCAUUCUAAUGAAAGAAAAUGUGACCAAAGAAAUGCACGAAAUGUGAAGUUCUUUGUCACUGUCCUGUAUAUCAAGGAAAUAA\
) } def
/len { sequence length } bind def

/coor [
[84.20600128 130.27754211]
[74.51708221 141.72851562]
[64.82816315 153.17948914]
[61.82088089 168.71224976]
[47.69334030 173.43049622]
[38.00441742 184.88146973]
[28.31549644 196.33244324]
[25.93557739 212.55798340]
[10.59611607 218.35736084]
[-1.92296529 207.76469421]
[1.25689185 191.67680359]
[16.86452293 186.64352417]
[26.55344391 175.19255066]
[36.24236298 163.74157715]
[38.55662537 149.02784729]
[53.37718582 143.49057007]
[63.06610489 132.03959656]
[72.75502777 120.58861542]
[66.32279968 105.65913391]
[67.52201843 89.44726562]
[76.08093262 75.62670135]
[90.06003571 67.32926941]
[88.95225525 52.37022781]
[87.84446716 37.41119003]
[86.73667908 22.45215225]
[85.62889099 7.49311543]
[81.79605865 -1.07043767]
[84.76699829 -8.03735447]
[84.21272278 -23.02710915]
[83.65845490 -38.01686478]
[83.10417938 -53.00662231]
[82.54990387 -67.99637604]
[81.99563599 -82.98613739]
[69.28061676 -91.68293762]
[64.18418121 -106.03144836]
[68.46329498 -120.45896912]
[80.27599335 -129.49214172]
[79.72171783 -144.48188782]
[79.16744995 -159.47164917]
[68.43763733 -171.39854431]
[71.21454620 -187.19943237]
[85.36797333 -194.75325012]
[100.04061890 -188.26533508]
[103.97688293 -172.71266174]
[94.15720367 -160.02592468]
[94.71147919 -145.03616333]
[95.26574707 -130.04641724]
[107.71331024 -121.91030121]
[113.04624939 -107.83821106]
[109.02340698 -93.15249634]
[96.98538971 -83.54040527]
[97.53966522 -68.55065155]
[98.09393311 -53.56089401]
[98.64820862 -38.57114029]
[99.20248413 -23.58138275]
[99.75675201 -8.59162617]
[100.58792877 6.38532734]
[101.69571686 21.34436417]
[102.80350494 36.30340195]
[103.91128540 51.26243973]
[105.01907349 66.22148132]
[123.00350189 74.76077271]
[133.16954041 91.87832642]
[132.06196594 111.75625610]
[144.66712952 119.88705444]
[157.27229309 128.01785278]
[169.87745667 136.14865112]
[184.29750061 130.41787720]
[199.32366943 134.29008484]
[209.17808533 146.27633667]
[210.07151794 161.76766968]
[201.66043091 174.80735779]
[187.17906189 180.38136292]
[172.19580078 176.34637451]
[162.47198486 164.25393677]
[161.74665833 148.75381470]
[149.14149475 140.62301636]
[136.53633118 132.49221802]
[123.93117523 124.36141968]
[119.19401550 128.24481201]
[113.83930206 131.21943665]
[108.03931427 133.18959045]
[101.98066711 134.09188843]
[95.85828400 133.89727783]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[3 16]
[5 14]
[6 13]
[7 12]
[22 61]
[23 60]
[24 59]
[25 58]
[26 57]
[28 56]
[29 55]
[30 54]
[31 53]
[32 52]
[33 51]
[37 47]
[38 46]
[39 45]
[64 79]
[65 78]
[66 77]
[67 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
