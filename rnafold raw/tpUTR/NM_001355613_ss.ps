%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 13:50:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGAAGAGUGGACAAGGGUCUGCAGCAGGGAACCAAGGAUGCAACUCUGCAAAGUAGUGCUAAGUGUCAGAGAAACACAGUCGCAGGUCAGG\
) } def
/len { sequence length } bind def

/coor [
[103.73407745 151.94752502]
[97.03241730 151.99694824]
[90.37988281 151.18537903]
[83.88665009 149.52624512]
[77.66023254 147.04704285]
[71.80372620 143.78880310]
[66.41410828 139.80549622]
[61.58061981 135.16305542]
[57.38330078 129.93836975]
[43.99551773 136.70352173]
[30.60773659 143.46867371]
[17.21995354 150.23382568]
[3.83217168 156.99897766]
[-9.55561066 163.76412964]
[-18.07544899 177.77642822]
[-34.46199799 177.13371277]
[-41.85818100 162.49716187]
[-32.65543747 148.92361450]
[-16.32076263 150.37634277]
[-2.93298030 143.61119080]
[10.45480251 136.84603882]
[23.84258461 130.08088684]
[37.23036575 123.31574249]
[50.61814880 116.55059052]
[49.76893997 86.24028778]
[65.94623566 60.59403229]
[57.87500000 47.95064926]
[49.80376434 35.30726624]
[41.73252869 22.66388130]
[33.66129303 10.02049637]
[25.59005737 -2.62288737]
[10.22164249 -3.68023777]
[-1.44100487 -13.46982574]
[-5.06008196 -28.07688904]
[0.54889596 -41.84922791]
[-7.52233934 -54.49261475]
[-22.31706047 -61.56709290]
[-23.31780243 -77.93567657]
[-9.49508667 -86.75977325]
[4.93145990 -78.96189880]
[5.12104464 -62.56384659]
[13.19227982 -49.92046356]
[28.04605865 -49.21105957]
[39.77259827 -39.77960968]
[43.74343109 -25.07974815]
[38.23344421 -10.69412231]
[46.30467606 1.94926131]
[54.37591171 14.59264565]
[62.44714737 27.23602867]
[70.51838684 39.87941360]
[78.58962250 52.52279663]
[92.22595215 48.50190735]
[106.44155884 48.31832504]
[120.17717743 51.98572540]
[132.40933228 59.23083878]
[142.22654724 69.51380920]
[148.89730835 82.06840515]
[151.92456055 95.95915222]
[166.89106750 96.96104431]
[181.85757446 97.96293640]
[196.83872986 98.71459961]
[211.83035278 99.21582031]
[218.13333130 96.30535126]
[224.02645874 97.05869293]
[227.79707336 100.28466797]
[242.72174072 101.78610229]
[257.64639282 103.28753662]
[272.57107544 104.78897095]
[283.64428711 93.74731445]
[299.22863770 92.45815277]
[311.96566772 101.53017426]
[315.84136963 116.67986298]
[309.02572632 130.75398254]
[294.73687744 137.10719299]
[279.72161865 132.73966980]
[271.06964111 119.71363831]
[256.14495850 118.21220398]
[241.22029114 116.71076965]
[226.29562378 115.20933533]
[211.32913208 114.20744324]
[196.33750916 113.70622253]
[189.40800476 116.68931580]
[180.85568237 112.92943573]
[165.88917542 111.92755127]
[150.92268372 110.92565918]
[149.09808350 117.37435150]
[146.46047974 123.53534698]
[143.05357361 129.30664062]
[138.93376160 134.59265137]
[134.16926575 139.30586243]
[128.83897400 143.36822510]
[123.03115845 146.71246338]
[116.84197998 149.28323364]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[14 19]
[26 51]
[27 50]
[28 49]
[29 48]
[30 47]
[31 46]
[35 42]
[36 41]
[58 85]
[59 84]
[60 83]
[61 81]
[62 80]
[65 79]
[66 78]
[67 77]
[68 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
