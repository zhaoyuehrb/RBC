%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 18:38:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGUUCUUGCAUAGGCUCUUAAGCAGCAUGGAAAAAUGGUUGAUGGAAAAUAAACAUCAGUUUCUAA\
) } def
/len { sequence length } bind def

/coor [
[87.82580566 110.85545349]
[73.29366302 114.57257080]
[58.76152802 118.28968048]
[44.22938919 122.00679779]
[29.69725037 125.72391510]
[15.16511345 129.44104004]
[9.22410488 146.26860046]
[-5.35784435 156.28836060]
[-22.89101982 155.80906677]
[-36.66159439 145.19430542]
[-50.79550552 150.21749878]
[-61.01406479 163.04376221]
[-77.18881226 160.34011841]
[-82.68054962 144.88784790]
[-71.83985138 132.58291626]
[-55.81870270 136.08358765]
[-41.68478775 131.06039429]
[-39.91242218 118.67394257]
[-32.88855362 108.23006439]
[-21.95822716 101.84321594]
[-9.26482105 100.83981323]
[2.67016435 105.48327637]
[11.44799614 114.90889740]
[25.98013496 111.19178009]
[40.51227188 107.47466278]
[55.04441071 103.75754547]
[69.57654572 100.04042816]
[84.10868835 96.32331085]
[95.59931946 84.29376221]
[111.66749573 88.60169220]
[126.01539612 84.22700500]
[140.36328125 79.85231781]
[154.71118164 75.47763062]
[169.05908203 71.10293579]
[183.40696716 66.72824860]
[186.28526306 63.07886124]
[189.82885742 60.76136780]
[193.53790283 59.82162094]
[196.94950867 60.13821030]
[199.68925476 61.44933701]
[201.50994873 63.39437103]
[216.47499084 62.37073517]
[231.44001770 61.34709930]
[246.40504456 60.32346344]
[261.37008667 59.29982758]
[276.33511353 58.27618790]
[283.68038940 44.70967484]
[297.20526123 37.28797913]
[312.59396362 38.37934494]
[324.93603516 47.63551331]
[330.29318237 62.10288239]
[326.95593262 77.16496277]
[315.98916626 88.01549530]
[300.89239502 91.19212341]
[286.48291016 85.68119812]
[277.35873413 73.24121857]
[262.39370728 74.26485443]
[247.42868042 75.28849030]
[232.46365356 76.31212616]
[217.49862671 77.33576965]
[202.53358459 78.35940552]
[187.78166199 81.07614899]
[173.43376160 85.45083618]
[159.08587646 89.82552338]
[144.73797607 94.20021057]
[130.39007568 98.57490540]
[116.04219055 102.94959259]
[109.80762482 113.03312683]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[3 26]
[4 25]
[5 24]
[6 23]
[10 17]
[11 16]
[30 67]
[31 66]
[32 65]
[33 64]
[34 63]
[35 62]
[41 61]
[42 60]
[43 59]
[44 58]
[45 57]
[46 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
