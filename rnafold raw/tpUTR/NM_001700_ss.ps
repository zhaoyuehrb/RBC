%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 16:12:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGCCUGUGACCUCCCAUGGAGCCCAGCCCCGCCCUCCACACCUCCGGCGCUCCGCACCCACCUCCCACGGCCCCGCCCCUGCCCCCGCUCCGGCCAGAGGGGCCCUGGCUGUAAUAAAGAAGCCGAUCUCUCCUCUGC\
) } def
/len { sequence length } bind def

/coor [
[88.82881165 108.41447449]
[89.09608459 101.79472351]
[74.33041382 99.15369415]
[59.56474304 96.51266479]
[44.79907608 93.87163544]
[30.03340721 91.23061371]
[15.26773834 88.58958435]
[0.47375831 86.11205292]
[-14.34672165 83.79831696]
[-29.17520523 89.31435394]
[-40.55668640 79.70648956]
[-55.37716675 77.39275360]
[-62.97260284 91.35617065]
[-74.86077881 101.86755371]
[-89.59948730 107.67612457]
[-105.40904236 108.10015869]
[-120.38714600 103.10692596]
[-132.73779297 93.31442261]
[-140.98663330 79.91496277]
[-144.15692139 64.53001404]
[-159.02496338 62.54470825]
[-173.89300537 60.55940247]
[-188.76104736 58.57409286]
[-203.62907410 56.58878708]
[-218.49711609 54.60347748]
[-223.46647644 56.66228867]
[-228.23834229 56.56406021]
[-232.00723267 54.76033020]
[-234.27281189 51.96153641]
[-248.97645569 48.99450684]
[-263.68008423 46.02748108]
[-271.31405640 59.10422897]
[-282.78201294 68.99180603]
[-296.84005737 74.61769104]
[-311.96322632 75.37162018]
[-326.51107788 71.17182159]
[-338.90560913 62.47385025]
[-347.80230713 50.22119904]
[-352.23614502 35.74295044]
[-351.72616577 20.60958672]
[-346.32769775 6.46266794]
[-336.62634277 -5.16325521]
[-323.67437744 -13.00708961]
[-308.87680054 -16.21799469]
[-293.83868408 -14.44767570]
[-280.19128418 -7.88816404]
[-269.41494751 2.74901438]
[-262.67864990 16.31001663]
[-260.71304321 31.32384872]
[-246.00941467 34.29087830]
[-231.30578613 37.25790787]
[-216.51181030 39.73543930]
[-201.64376831 41.72074890]
[-186.77574158 43.70605469]
[-171.90769958 45.69136429]
[-157.03965759 47.67667007]
[-142.17161560 49.66197968]
[-135.97286987 36.89048004]
[-126.10963440 26.65021896]
[-113.54158783 19.95675278]
[-99.49755096 17.47961235]
[-85.35534668 19.47533989]
[-72.50661469 25.76099777]
[-62.21986389 35.73083878]
[-55.51525497 48.41467667]
[-53.06343079 62.57227325]
[-38.24295044 64.88600922]
[-24.47452927 59.20447540]
[-12.03298759 68.97783661]
[2.78749228 71.29157257]
[9.93795395 69.19896698]
[17.90876579 73.82391357]
[32.67443466 76.46494293]
[47.44010162 79.10597229]
[62.20577240 81.74699402]
[76.97144318 84.38802338]
[91.73710632 87.02905273]
[105.91868591 82.14204407]
[115.92272186 70.96531677]
[125.92675018 59.78858185]
[122.80811310 44.70281601]
[129.09693909 30.83543968]
[142.19061279 23.41793633]
[156.96446228 25.11255836]
[166.96849060 13.93582726]
[169.79931641 -2.21714473]
[185.29431152 -7.58713770]
[197.51358032 3.35003638]
[193.88696289 19.34315109]
[178.14521790 23.93985939]
[168.14118958 35.11659241]
[171.45639038 49.61305237]
[165.52969360 63.44555664]
[152.44131470 71.22681427]
[137.10348511 69.79261780]
[127.09944916 80.96934509]
[117.09542084 92.14608002]
[119.24507141 106.99124146]
[132.00859070 114.87112427]
[144.77210999 122.75099945]
[157.53564453 130.63087463]
[170.29916382 138.51075745]
[183.06268311 146.39064026]
[195.82620239 154.27052307]
[208.58973694 162.15039062]
[224.10804749 155.51708984]
[240.36785889 159.37356567]
[251.04045105 172.01631165]
[252.09248352 188.36199951]
[265.02719116 195.95758057]
[277.96191406 203.55317688]
[290.89663696 211.14877319]
[303.83135986 218.74436951]
[317.14901733 211.09355164]
[332.50784302 211.14262390]
[345.77636719 218.87840271]
[353.38540649 232.21998596]
[353.28817749 247.57856750]
[345.51086426 260.82275391]
[332.14547729 268.38995361]
[316.78726196 268.24459839]
[303.56750488 260.42578125]
[296.04226685 247.03675842]
[296.23574829 231.67909241]
[283.30105591 224.08349609]
[270.36633301 216.48789978]
[257.43161011 208.89230347]
[244.49688721 201.29670715]
[232.76641846 207.76237488]
[219.26499939 207.56581116]
[207.54078674 200.65119934]
[200.72811890 188.74227905]
[200.70985413 174.91392517]
[187.94633484 167.03404236]
[175.18280029 159.15415955]
[162.41928101 151.27427673]
[149.65576172 143.39440918]
[136.89224243 135.51452637]
[124.12871552 127.63464355]
[111.36518860 119.75476837]
[100.78680420 119.84012604]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 77]
[3 76]
[4 75]
[5 74]
[6 73]
[7 72]
[8 70]
[9 69]
[11 67]
[12 66]
[20 57]
[21 56]
[22 55]
[23 54]
[24 53]
[25 52]
[29 51]
[30 50]
[31 49]
[78 97]
[79 96]
[80 95]
[84 91]
[85 90]
[98 140]
[99 139]
[100 138]
[101 137]
[102 136]
[103 135]
[104 134]
[105 133]
[109 128]
[110 127]
[111 126]
[112 125]
[113 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
