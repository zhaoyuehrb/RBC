%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:20:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGGAAACCCUUUCACUUCUCUGCUCCCGAGGUGUCCUCGGGCUCAUAUGUGGGAAGGCAGAGGAUCUCUGAGGAGUUCCCUGGGGACAACUGAGCAGCCUCUGGAGAGGGGCCAUUAAUAAAGCUCAACAUCAUUGGC\
) } def
/len { sequence length } bind def

/coor [
[440.99868774 223.38533020]
[427.00097656 217.99421692]
[413.00326538 212.60308838]
[398.94635010 207.36825562]
[384.83200073 202.29032898]
[370.23690796 205.26225281]
[359.87084961 193.31004333]
[345.75650024 188.23211670]
[331.64215088 183.15419006]
[317.47213745 178.23381042]
[303.24816895 173.47160339]
[289.02420044 168.70939636]
[274.80020142 163.94718933]
[262.99761963 174.92944336]
[247.18119812 178.50430298]
[231.62411499 173.60937500]
[220.57809448 161.48373413]
[217.11158752 145.35585022]
[202.78504944 140.91171265]
[188.45851135 136.46757507]
[174.13197327 132.02343750]
[159.80543518 127.57930756]
[145.47889709 123.13517761]
[131.15237427 118.69104004]
[116.82582855 114.24691010]
[102.49929047 109.80278015]
[87.65632629 107.63798523]
[72.65725708 107.80508423]
[57.65818787 107.97219086]
[42.65911865 108.13928986]
[27.66004753 108.30639648]
[12.66097832 108.47349548]
[-2.33809066 108.64060211]
[-18.10888290 114.86301422]
[-28.45391273 101.43108368]
[-18.41069984 87.77201843]
[-2.50519323 93.64153290]
[12.49387646 93.47442627]
[27.49294472 93.30732727]
[42.49201584 93.14022064]
[57.49108505 92.97312164]
[72.49015045 92.80601501]
[87.48921967 92.63891602]
[92.09268188 78.36277771]
[80.01663208 69.46508026]
[67.94057465 60.56738281]
[55.86452866 51.66968536]
[39.51575851 50.38525772]
[32.69888687 35.47008514]
[42.42652893 22.26762199]
[58.69171906 24.35943031]
[64.76222229 39.59363556]
[76.83827209 48.49133301]
[88.91432190 57.38902664]
[100.99037933 66.28672791]
[108.67386627 76.28916168]
[110.43888092 86.87853241]
[106.94342804 95.47624207]
[121.26996613 99.92037201]
[135.59649658 104.36450958]
[149.92303467 108.80863953]
[164.24957275 113.25277710]
[178.57611084 117.69690704]
[192.90264893 122.14104462]
[207.22918701 126.58517456]
[221.55572510 131.02931213]
[231.35372925 120.98489380]
[244.46713257 116.18145752]
[258.30282593 117.50782013]
[270.15118408 124.64665222]
[277.71664429 136.14796448]
[279.56243896 149.72320557]
[293.78640747 154.48542786]
[308.01037598 159.24763489]
[322.23434448 164.00984192]
[331.44848633 163.77319336]
[336.72009277 169.03984070]
[350.83444214 174.11776733]
[364.94876099 179.19569397]
[380.55343628 176.58697510]
[389.90994263 188.17597961]
[404.02429199 193.25390625]
[413.24142456 193.22259521]
[418.39437866 198.60539246]
[432.39208984 203.99650574]
[446.38980103 209.38761902]
[458.95266724 194.94282532]
[476.00473022 186.31063843]
[495.02163696 184.74270630]
[513.19793701 190.44683838]
[527.86108398 202.55975342]
[536.86444092 219.27772522]
[538.90124512 238.12503052]
[553.49261475 241.60234070]
[568.08398438 245.07963562]
[582.67535400 248.55694580]
[597.26672363 252.03424072]
[608.19805908 249.11204529]
[616.58990479 254.63296509]
[631.58154297 255.13418579]
[646.57318115 255.63540649]
[661.56475830 256.13662720]
[676.55639648 256.63784790]
[691.54803467 257.13906860]
[705.75354004 248.94548035]
[719.81488037 257.38418579]
[719.26690674 273.77416992]
[704.67333984 281.25482178]
[691.04681396 272.13070679]
[676.05517578 271.62948608]
[661.06353760 271.12826538]
[646.07189941 270.62704468]
[631.08032227 270.12579346]
[616.08868408 269.62457275]
[626.89678955 280.02578735]
[631.36920166 294.34350586]
[628.40307617 309.04733276]
[618.72985840 320.51156616]
[604.73474121 325.90939331]
[589.86865234 323.90975952]
[577.79718018 315.00582886]
[571.49700928 301.39303589]
[572.52160645 286.42807007]
[580.61828613 273.80096436]
[593.78942871 266.62561035]
[579.19805908 263.14831543]
[564.60668945 259.67102051]
[550.01531982 256.19372559]
[535.42388916 252.71641541]
[530.05603027 262.61233521]
[522.57855225 271.04174805]
[513.37725830 277.56314087]
[502.92834473 281.83346558]
[491.77368164 283.62634277]
[480.49298096 282.84408569]
[469.67355347 279.52288818]
[459.87963867 273.83120728]
[451.62310791 266.06134033]
[445.33663940 256.61425781]
[441.35110474 245.97900391]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 86]
[2 85]
[3 84]
[4 82]
[5 81]
[7 79]
[8 78]
[9 77]
[10 75]
[11 74]
[12 73]
[13 72]
[18 66]
[19 65]
[20 64]
[21 63]
[22 62]
[23 61]
[24 60]
[25 59]
[26 58]
[27 43]
[28 42]
[29 41]
[30 40]
[31 39]
[32 38]
[33 37]
[44 55]
[45 54]
[46 53]
[47 52]
[93 129]
[94 128]
[95 127]
[96 126]
[97 125]
[99 114]
[100 113]
[101 112]
[102 111]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
