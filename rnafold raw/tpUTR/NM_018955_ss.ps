%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 19:11:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUUCAGUCAUGGCAUUCGCAGUGCCCAGUGAUGGCAUUACUCUGCACUAUAGCCAUUUGCCCCAACUUAAGUUUAGAAAUUACAAGUUUCAGUAAUAGCUGAACCUGUUCAAAAUGUUAAUAAAGGUUUCGUUGCAUGGUAGCAUA\
) } def
/len { sequence length } bind def

/coor [
[66.25413513 126.68695831]
[74.73552704 114.31497192]
[88.40077972 108.13515472]
[73.40827942 107.66082764]
[58.41578293 107.18650818]
[44.37784576 114.48355865]
[31.90160370 106.34767151]
[16.90910530 105.87334442]
[1.91660619 105.39902496]
[-7.63114977 117.48813629]
[-22.29519844 121.58923340]
[-36.39553070 116.33142090]
[-44.59790802 103.92742920]
[-59.59040833 103.45310974]
[-74.58290863 102.97878265]
[-89.57540131 102.50446320]
[-99.73185730 115.98961639]
[-115.75865173 120.74092865]
[-131.31214905 115.08341980]
[-140.35777283 101.42194366]
[-155.35694885 101.26380920]
[-170.35360718 101.58005524]
[-185.33277893 102.37036133]
[-200.31195068 103.16065979]
[-215.29110718 103.95096588]
[-230.27027893 104.74127197]
[-240.81393433 116.20726013]
[-256.01620483 116.79535675]
[-266.88229370 106.67292786]
[-281.86145020 107.46322632]
[-296.84063721 108.25353241]
[-311.81979370 109.04383087]
[-326.79895020 109.83413696]
[-341.77813721 110.62444305]
[-357.27670288 117.49689484]
[-368.17102051 104.50650024]
[-358.70413208 90.44184875]
[-342.56842041 95.64527130]
[-327.58926392 94.85497284]
[-312.61010742 94.06466675]
[-297.63092041 93.27436829]
[-282.65176392 92.48406219]
[-267.67260742 91.69375610]
[-257.93197632 80.48411560]
[-242.75224304 79.46925354]
[-231.06057739 89.76210022]
[-216.08142090 88.97180176]
[-201.10224915 88.18149567]
[-186.12307739 87.39118958]
[-171.14392090 86.60089111]
[-168.49882507 84.17358398]
[-164.52157593 82.94225311]
[-159.80407715 83.53016663]
[-155.19882202 86.26464844]
[-140.19964600 86.42277527]
[-133.24168396 74.98478699]
[-121.43759155 68.44104004]
[-107.83352661 68.60303497]
[-96.00141144 75.53564453]
[-89.10108185 87.51196289]
[-74.10858154 87.98628998]
[-59.11608505 88.46060944]
[-44.12358475 88.93492889]
[-35.15354156 77.07422638]
[-20.74905205 72.71823120]
[-6.37356424 77.73806763]
[2.39092875 90.40652466]
[17.38342667 90.88085175]
[32.37592697 91.35517120]
[45.34149933 84.02419281]
[58.89010620 92.19400787]
[73.88260651 92.66833496]
[88.87509918 93.14265442]
[91.91104889 84.00615692]
[101.86401367 77.29891205]
[110.73188782 65.20094299]
[119.59976196 53.10297775]
[128.46763611 41.00501251]
[126.26264954 25.58503151]
[135.42826843 13.44229794]
[150.14245605 11.43520737]
[159.01033020 -0.66276008]
[167.87820435 -12.76072788]
[176.74607849 -24.85869598]
[185.61395264 -36.95666122]
[180.75311279 -51.69273758]
[185.51431274 -66.46130371]
[198.06677246 -75.58354950]
[213.58381653 -75.55178070]
[226.09883118 -66.37821960]
[230.79951477 -51.59027863]
[225.87838745 -36.87423325]
[213.22770691 -27.88869476]
[197.71191406 -28.08878899]
[188.84403992 -15.99082184]
[179.97616577 -3.89285421]
[171.10829163 8.20511341]
[162.24043274 20.30308151]
[164.75515747 34.93905640]
[155.93420410 47.33444214]
[140.56559753 49.87288284]
[131.69773865 61.97085190]
[122.82985687 74.06881714]
[113.96198273 86.16678619]
[117.25573730 100.80069733]
[130.45179749 107.93258667]
[143.64787292 115.06447601]
[156.91838074 122.05685425]
[170.26187134 128.90895081]
[183.60537720 135.76103210]
[201.93789673 134.40229797]
[210.91781616 149.44607544]
[226.71270752 148.53404236]
[234.76596069 161.06378174]
[248.25096130 167.63302612]
[261.73596191 174.20227051]
[275.22094727 180.77153015]
[291.01583862 179.85948181]
[299.06909180 192.38922119]
[312.55407715 198.95846558]
[328.86584473 197.26773071]
[338.26550293 210.70568848]
[331.08349609 225.44850159]
[314.70806885 226.33004761]
[305.98483276 212.44345093]
[292.49984741 205.87420654]
[277.66949463 207.25613403]
[268.65170288 194.25651550]
[255.16670227 187.68727112]
[241.68170166 181.11801147]
[228.19671631 174.54876709]
[213.36636353 175.93067932]
[204.34855652 162.93107605]
[192.77050781 166.57832336]
[181.46054077 161.16052246]
[176.75328064 149.10453796]
[163.40979004 142.25244141]
[150.06628418 135.40034485]
[142.62904358 135.14094543]
[136.51597595 128.26054382]
[123.31990814 121.12864685]
[110.12384796 113.99675751]
[118.82634735 126.21422577]
[119.93157959 141.17344666]
[113.11909485 154.53721619]
[100.36408234 162.43086243]
[85.36469269 162.56573486]
[72.46979523 154.90274048]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 73]
[4 72]
[5 71]
[7 69]
[8 68]
[9 67]
[13 63]
[14 62]
[15 61]
[16 60]
[20 55]
[21 54]
[22 50]
[23 49]
[24 48]
[25 47]
[26 46]
[29 43]
[30 42]
[31 41]
[32 40]
[33 39]
[34 38]
[75 104]
[76 103]
[77 102]
[78 101]
[81 98]
[82 97]
[83 96]
[84 95]
[85 94]
[105 142]
[106 141]
[107 140]
[108 138]
[109 137]
[110 136]
[112 133]
[114 131]
[115 130]
[116 129]
[117 128]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
