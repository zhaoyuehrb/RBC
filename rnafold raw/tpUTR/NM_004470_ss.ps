%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 19:59:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGACUGGGGAGGGGCAGGGGGAGAGGCCCCCAUCAGGGACCAGACUGUUCCAAAAAAAAAACAAAAAACAAAAACAAACAAAAAAACACUUAAAAGCCCAAGGA\
) } def
/len { sequence length } bind def

/coor [
[95.57583618 241.26786804]
[91.23474121 255.62596130]
[86.89364624 269.98403931]
[88.09729004 286.89520264]
[72.18022156 292.73330688]
[62.16400528 279.05441284]
[72.53554535 265.64294434]
[76.87664795 251.28485107]
[81.21774292 236.92675781]
[69.04069519 224.94180298]
[64.49620819 208.38041687]
[68.89588165 191.68899536]
[81.13758850 179.39492798]
[97.97992706 174.87847900]
[101.47090149 160.29037476]
[104.96187592 145.70225525]
[108.45285034 131.11413574]
[103.67896271 125.32968140]
[89.35729218 107.97629547]
[74.37183380 108.63670349]
[59.38637924 109.29710388]
[44.40092468 109.95750427]
[29.41547012 110.61790466]
[17.56485939 121.43190765]
[1.74469590 118.76695251]
[-5.90914440 104.66736603]
[0.47470927 89.94914246]
[15.99911118 85.90284729]
[28.75506783 95.63245392]
[43.74052429 94.97204590]
[58.72597885 94.31164551]
[73.71143341 93.65124512]
[88.69689178 92.99084473]
[92.47863007 86.51408386]
[79.52523041 78.95038605]
[87.08913422 65.99711609]
[100.04210663 73.56055450]
[103.82384491 67.08379364]
[97.03361511 53.70871353]
[90.24338531 40.33363342]
[83.45315552 26.95855141]
[76.66292572 13.58347130]
[61.56343079 8.91648579]
[54.26052094 -5.09932899]
[59.08688736 -20.14863968]
[73.17913055 -27.30295563]
[88.17656708 -22.31775093]
[95.18149567 -8.15065575]
[90.03800964 6.79324150]
[96.82823944 20.16832161]
[103.61846924 33.54340363]
[110.40869904 46.91848373]
[117.19892883 60.29356384]
[121.65050507 45.96933746]
[127.86054230 32.31520081]
[135.73129272 19.54605103]
[145.13890076 7.86285782]
[155.93528748 -2.55050254]
[167.95053101 -11.53013706]
[180.99554443 -18.93471909]
[194.86499023 -24.64771080]
[209.34060669 -28.57919693]
[224.19454956 -30.66730118]
[239.19305420 -30.87915802]
[254.10006714 -29.21143723]
[268.68093872 -25.69038200]
[282.70623779 -20.37141228]
[295.95516968 -13.33824062]
[308.21923828 -4.70155811]
[319.30545044 5.40270424]
[329.03930664 16.81551933]
[337.26757812 29.35726547]
[343.86080933 42.83055115]
[348.71517944 57.02333069]
[351.75433350 71.71221924]
[352.93045044 86.66603851]
[352.22494507 101.64944458]
[349.64901733 116.42660522]
[345.24313354 130.76495361]
[339.07666016 144.43882751]
[331.24667358 157.23300171]
[321.87637329 168.94613647]
[311.11325073 179.39387512]
[299.12670898 188.41178894]
[286.10537720 195.85792542]
[272.25421143 201.61512756]
[257.79119873 205.59274292]
[242.94400024 207.72821045]
[227.94624329 207.98789978]
[213.03399658 206.36772156]
[198.44195557 202.89318848]
[184.39979553 197.61895752]
[171.12847900 190.62808228]
[158.83692932 182.03054810]
[147.71855164 171.96168518]
[137.94836426 160.57997131]
[129.68013000 148.06452942]
[123.04096222 134.60511780]
[119.54999542 149.19322205]
[116.05902100 163.78134155]
[112.56804657 178.36946106]
[122.86917114 186.44328308]
[129.27944946 197.80009460]
[130.85696411 210.69790649]
[127.39795685 223.17411804]
[119.46229553 233.34407043]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 9]
[2 8]
[3 7]
[14 101]
[15 100]
[16 99]
[17 98]
[19 33]
[20 32]
[21 31]
[22 30]
[23 29]
[38 53]
[39 52]
[40 51]
[41 50]
[42 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
