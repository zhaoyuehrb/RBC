%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 23:28:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAUAAUUUCAAUUUGAUCAUAUUUUAAAAUAUGUUUUCACCACCAUAUAAGAUUUUGGUUCUACUUGCUAUAUGCCUCCUUUGUAAAAAUAAACACCGAGGCUUACUGUAGUAGAAACUUUAGUUUUGAUGAUGCACAAAAUAAACAGCAGUGGUUCUC\
) } def
/len { sequence length } bind def

/coor [
[135.39312744 187.95397949]
[139.02177429 202.50845337]
[138.47795105 217.49859619]
[133.80422974 231.75187683]
[125.36615753 244.15345764]
[113.82374573 253.73326111]
[100.07984161 259.74200439]
[85.20945740 261.70968628]
[70.37574005 259.48239136]
[56.73896408 253.23432922]
[45.36577225 243.45422363]
[37.14575958 230.90704346]
[32.72188187 216.57424927]
[32.44017410 201.57688904]
[36.32266617 187.08805847]
[44.06816864 174.23797607]
[30.88707733 181.39750671]
[21.20412445 199.04023743]
[1.93566096 197.82487488]
[-10.95605850 205.49322510]
[-23.84777832 213.16157532]
[-36.73949814 220.82992554]
[-49.63121796 228.49827576]
[-62.52293777 236.16661072]
[-70.06063843 250.73078918]
[-86.45264435 251.21464539]
[-94.83626556 237.12042236]
[-86.58715820 222.94706726]
[-70.19128418 223.27490234]
[-57.29956436 215.60655212]
[-44.40784454 207.93820190]
[-31.51612663 200.26985168]
[-18.62440681 192.60150146]
[-5.73268747 184.93315125]
[-4.09939241 174.78378296]
[3.01985908 167.06565857]
[13.43226814 164.51458740]
[23.72755241 168.21641541]
[36.90864563 161.05688477]
[48.45140457 151.47749329]
[57.91772079 139.84182739]
[67.38404083 128.20616150]
[76.85035706 116.57048798]
[86.31668091 104.93482208]
[93.47620392 91.75373077]
[98.08361053 77.47886658]
[102.69102478 63.20399857]
[102.35223389 54.02407837]
[107.53009796 48.69711304]
[112.41516113 34.51486206]
[117.30021667 20.33261490]
[122.18527985 6.15036488]
[127.07033539 -8.03188419]
[131.95539856 -22.21413422]
[136.84045410 -36.39638138]
[130.16557312 -50.47060394]
[135.32174683 -64.78382874]
[148.78050232 -71.06057739]
[153.66555786 -85.24282837]
[158.55062866 -99.42507935]
[163.43568420 -113.60732269]
[168.18214417 -127.83656311]
[172.78955078 -142.11141968]
[177.39695740 -156.38629150]
[182.00436401 -170.66116333]
[186.61177063 -184.93601990]
[186.27299500 -194.11593628]
[191.45085144 -199.44290161]
[196.33590698 -213.62515259]
[189.66102600 -227.69937134]
[194.81719971 -242.01260376]
[208.27595520 -248.28935242]
[213.16101074 -262.47158813]
[210.33984375 -278.03924561]
[221.80023193 -287.55285645]
[226.68528748 -301.73510742]
[231.57034302 -315.91735840]
[236.45541382 -330.09960938]
[241.34046936 -344.28186035]
[234.07160950 -355.65698242]
[234.68873596 -368.94699097]
[242.74114990 -379.29187012]
[255.10032654 -383.03836060]
[260.26116943 -397.12258911]
[265.42202759 -411.20684814]
[256.66140747 -424.01431274]
[257.13565063 -439.52413940]
[266.66232300 -451.77246094]
[281.57830811 -456.04959106]
[296.14804077 -450.71081543]
[304.76919556 -437.80908203]
[304.12673950 -422.30529785]
[294.46774292 -410.16104126]
[279.50625610 -406.04598999]
[274.34539795 -391.96176147]
[269.18457031 -377.87753296]
[276.90737915 -362.96340942]
[271.36831665 -346.75143433]
[255.52272034 -339.39678955]
[250.63764954 -325.21453857]
[245.75259399 -311.03228760]
[240.86753845 -296.85003662]
[235.98248291 -282.66778564]
[239.15306091 -268.11456299]
[227.34326172 -257.58654785]
[222.45820618 -243.40429688]
[229.19662476 -230.17065430]
[224.44451904 -215.71824646]
[210.51815796 -208.74009705]
[205.63310242 -194.55784607]
[200.88664246 -180.32861328]
[196.27923584 -166.05374146]
[191.67182922 -151.77888489]
[187.06442261 -137.50401306]
[182.45700073 -123.22914886]
[183.39996338 -115.86045837]
[177.61793518 -108.72226715]
[172.73286438 -94.54001617]
[167.84780884 -80.35776520]
[162.96275330 -66.17552185]
[169.70117188 -52.94187546]
[164.94905090 -38.48947144]
[151.02270508 -31.51132202]
[146.13764954 -17.32907295]
[141.25259399 -3.14682436]
[136.36752319 11.03542423]
[131.48246765 25.21767426]
[126.59741211 39.39992142]
[121.71234894 53.58217239]
[116.96588898 67.81140900]
[112.35848236 82.08627319]
[107.75106812 96.36113739]
[116.41754150 97.79251099]
[124.20696259 104.19537354]
[134.12005615 115.45284271]
[144.03314209 126.71031952]
[158.71627808 122.54279327]
[173.75207520 125.16721344]
[186.15516663 134.06250000]
[193.46290588 147.46249390]
[194.22433472 162.70660400]
[188.28826904 176.76811218]
[176.83332825 186.85508728]
[162.13389587 190.96476746]
[147.10855103 188.28114319]
[134.74058533 179.33708191]
[127.48567963 165.90841675]
[126.78428650 150.66142273]
[132.77568054 136.62341309]
[122.86258698 125.36593628]
[112.94949341 114.10846710]
[97.95234680 114.40113831]
[88.48603058 126.03681183]
[79.01971436 137.67248535]
[69.55339050 149.30815125]
[60.08707428 160.94381714]
[74.14073944 155.70030212]
[89.09685516 154.55372620]
[103.78556824 157.59373474]
[117.05795288 164.58258057]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 39]
[17 38]
[19 34]
[20 33]
[21 32]
[22 31]
[23 30]
[24 29]
[40 156]
[41 155]
[42 154]
[43 153]
[44 152]
[45 132]
[46 131]
[47 130]
[49 129]
[50 128]
[51 127]
[52 126]
[53 125]
[54 124]
[55 123]
[58 120]
[59 119]
[60 118]
[61 117]
[62 115]
[63 114]
[64 113]
[65 112]
[66 111]
[68 110]
[69 109]
[72 106]
[73 105]
[75 103]
[76 102]
[77 101]
[78 100]
[79 99]
[83 96]
[84 95]
[85 94]
[134 151]
[135 150]
[136 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
