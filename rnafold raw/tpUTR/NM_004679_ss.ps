%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 23:39:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGCAACUAAGUUUAGGCCCAGCUGCCAGACCUCAGAGAUCUCACCAGCAGGGUGCUUCCCAUGUUGAUGACAAUAAAAUGAAUGUGUUGCAAACCGA\
) } def
/len { sequence length } bind def

/coor [
[106.86038208 208.14762878]
[103.58823395 193.50886536]
[100.31608582 178.87011719]
[97.04393768 164.23136902]
[93.77178955 149.59262085]
[90.49964142 134.95387268]
[89.36615753 149.91098022]
[77.55881500 159.16229248]
[62.76485062 156.68469238]
[54.61593246 144.09123230]
[58.41745377 129.58094788]
[71.69397736 122.60085297]
[56.95966721 125.41157532]
[42.22535706 128.22229004]
[27.49104881 131.03302002]
[19.47879791 135.79344177]
[12.25020599 133.69296265]
[-2.56511950 136.03948975]
[-17.38044548 138.38600159]
[-26.46603775 151.31764221]
[-42.04873657 153.95487976]
[-54.88360596 144.73307800]
[-57.35594177 129.12336731]
[-47.99895096 116.38671112]
[-32.36397552 114.07955170]
[-19.72696114 123.57067108]
[-4.91163635 121.22415924]
[9.90368843 118.87763977]
[24.68032837 116.29870605]
[39.41463852 113.48798370]
[54.14894485 110.67726135]
[68.88325500 107.86654663]
[79.93505096 80.64704132]
[104.96654510 76.86845398]
[112.60216522 63.95732498]
[120.23778534 51.04619217]
[109.96504211 37.86420059]
[105.47876740 21.80317116]
[107.42486572 5.27780485]
[115.48428345 -9.23822784]
[128.42494202 -19.58257866]
[144.29005432 -24.22630882]
[160.69393921 -22.49984169]
[167.50379944 -35.86494064]
[174.31365967 -49.23003769]
[173.68481445 -65.03874207]
[186.35685730 -72.86616516]
[193.16671753 -86.23126221]
[199.97657776 -99.59635925]
[206.78643799 -112.96145630]
[213.59629822 -126.32655334]
[220.19537354 -139.79696655]
[226.58206177 -153.36936951]
[232.96875000 -166.94177246]
[228.90910339 -182.46269226]
[238.62771606 -195.22702026]
[254.66931152 -195.44305420]
[264.72814941 -182.94508362]
[261.08795166 -167.32048035]
[246.54116821 -160.55508423]
[240.15447998 -146.98268127]
[233.76777649 -133.41027832]
[233.76814270 -125.88269043]
[226.96139526 -119.51670074]
[220.15153503 -106.15159607]
[213.34167480 -92.78649902]
[206.53181458 -79.42140198]
[199.72195435 -66.05630493]
[200.83789062 -51.20356369]
[187.67875671 -42.42018127]
[180.86889648 -29.05508232]
[174.05903625 -15.68998432]
[183.41195679 -6.03033018]
[189.29792786 6.08413267]
[191.11758423 19.45252800]
[188.67536926 32.74470139]
[182.20053101 44.63356400]
[172.32568359 53.92759705]
[160.02496338 59.69026184]
[146.51799011 61.33435440]
[133.14892578 58.68181610]
[125.51329803 71.59294128]
[117.87767792 84.50407410]
[125.33717346 95.30789185]
[126.20684052 109.50475311]
[119.12974548 123.09200287]
[105.13838959 131.68171692]
[108.41053772 146.32046509]
[111.68268585 160.95922852]
[114.95483398 175.59797668]
[118.22698975 190.23672485]
[121.49913788 204.87547302]
[135.79295349 210.91423035]
[143.77854919 224.21873474]
[142.38531494 239.67312622]
[132.14895630 251.33489990]
[117.00559235 254.71984863]
[102.77812958 248.52638245]
[94.93732452 235.13603210]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 92]
[2 91]
[3 90]
[4 89]
[5 88]
[6 87]
[12 32]
[13 31]
[14 30]
[15 29]
[17 28]
[18 27]
[19 26]
[34 83]
[35 82]
[36 81]
[43 72]
[44 71]
[45 70]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[52 62]
[53 61]
[54 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
