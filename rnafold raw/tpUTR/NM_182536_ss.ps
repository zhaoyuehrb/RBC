%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 21:03:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUGAUUAGCCCUCUUGUUUUAUCUUUUCAAAGAAAUACAUCCUUGGUUUACACUCAAAAGUCAAAUUAAAUUCUUUCCCAAUGCCCCAACUAAUUUUGAGAUUCAGUCAGAAAAUAUAAAUGCUGUAUUUAUAGA\
) } def
/len { sequence length } bind def

/coor [
[114.72560120 216.23774719]
[116.49797058 201.17967224]
[124.66552734 188.33239746]
[116.82071686 175.54728699]
[108.97591400 162.76217651]
[101.13110352 149.97708130]
[93.28629303 137.19197083]
[79.34725189 131.65090942]
[64.86581421 135.56088257]
[50.38437271 139.47084045]
[35.90292740 143.38081360]
[31.84284592 159.36610413]
[20.35955429 171.07376099]
[4.63630247 175.39279175]
[-11.03538418 171.24194336]
[-22.42699623 159.83857727]
[-36.81497574 164.07955933]
[-51.20296097 168.32055664]
[-62.25247955 179.64392090]
[-76.64804840 175.82072449]
[-91.03603363 180.06170654]
[-98.46070099 185.53576660]
[-105.80271912 184.23091125]
[-120.28415680 188.14088440]
[-134.76559448 192.05085754]
[-149.24703979 195.96081543]
[-160.43116760 207.95445251]
[-176.34698486 204.00238037]
[-180.62165833 188.17016602]
[-168.85777283 176.74461365]
[-153.15701294 181.47937012]
[-138.67556763 177.56941223]
[-124.19412231 173.65943909]
[-109.71268463 169.74948120]
[-95.27702332 165.67373657]
[-80.88903809 161.43273926]
[-70.86864471 150.41271973]
[-55.44394684 153.93257141]
[-41.05596542 149.69158936]
[-26.66798210 145.45059204]
[-24.32766914 131.94796753]
[-16.34431648 120.72805023]
[-4.23864412 114.02694702]
[9.64032173 113.21048737]
[22.57100677 118.49620056]
[31.99296379 128.89936829]
[46.47440338 124.98940277]
[60.95584869 121.07943726]
[75.43728638 117.16947174]
[71.35441589 104.39387512]
[73.30485535 91.57649994]
[80.49156189 81.32729340]
[91.09298706 75.55559540]
[102.70855713 75.11837769]
[108.72570038 61.37814713]
[114.74283600 47.63791275]
[120.75997925 33.89767838]
[126.77712250 20.15744400]
[132.79426575 6.41721153]
[138.81140137 -7.32302237]
[126.29054260 -15.65363693]
[115.40662384 -26.03205299]
[106.49040985 -38.14287949]
[99.81284332 -51.61808777]
[95.57684326 -66.04817963]
[93.91115570 -80.99463654]
[94.86637878 -96.00325775]
[98.41349792 -110.61794281]
[104.44471741 -124.39456940]
[112.77675629 -136.91448975]
[123.15640259 -147.79722595]
[135.26824951 -156.71206665]
[148.74420166 -163.38810730]
[163.17477417 -167.62246704]
[178.12142944 -169.28646851]
[193.12992859 -168.32952881]
[207.74421692 -164.78076172]
[221.52015686 -158.74798584]
[234.03913879 -150.41452026]
[244.92070007 -140.03364563]
[253.83416748 -127.92079163]
[260.50866699 -114.44406891]
[264.74139404 -100.01301575]
[266.40371704 -85.06618500]
[265.44506836 -70.05777740]
[261.89462280 -55.44390106]
[255.86029053 -41.66863632]
[247.52542114 -29.15060997]
[237.14329529 -18.27022743]
[225.02943420 -9.35812950]
[211.55195618 -2.68514705]
[197.12043762 1.54593670]
[182.17341614 3.20654368]
[167.16511536 2.24620986]
[152.55163574 -1.30588138]
[146.53450012 12.43435192]
[140.51734924 26.17458534]
[134.50021362 39.91481781]
[128.48307800 53.65505219]
[122.46593475 67.39528656]
[116.44879150 81.13552094]
[123.86450958 89.63906097]
[126.98854065 100.93140411]
[124.84742737 112.89152527]
[117.49485779 123.10423279]
[106.07139587 129.34715271]
[113.91620636 142.13226318]
[121.76101685 154.91737366]
[129.60581970 167.70248413]
[137.45063782 180.48757935]
[152.60397339 179.02540588]
[166.83146667 184.26612854]
[177.32972717 195.12001038]
[182.05496216 209.39703369]
[180.12078857 224.24858093]
[171.96398926 236.73583984]
[179.80879211 249.52095032]
[187.65359497 262.30606079]
[195.49841309 275.09115601]
[203.34321594 287.87628174]
[211.18803406 300.66137695]
[219.03283691 313.44650269]
[226.87765503 326.23159790]
[240.31484985 336.56976318]
[234.10049438 352.34375000]
[217.22267151 350.73889160]
[214.09254456 334.07641602]
[206.24772644 321.29129028]
[198.40292358 308.50619507]
[190.55812073 295.72106934]
[182.71330261 282.93597412]
[174.86849976 270.15087891]
[167.02368164 257.36575317]
[159.17887878 244.58065796]
[144.35136414 246.19631958]
[130.23471069 241.19338989]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 110]
[4 109]
[5 108]
[6 107]
[7 106]
[8 49]
[9 48]
[10 47]
[11 46]
[16 40]
[17 39]
[18 38]
[20 36]
[21 35]
[23 34]
[24 33]
[25 32]
[26 31]
[54 101]
[55 100]
[56 99]
[57 98]
[58 97]
[59 96]
[60 95]
[116 134]
[117 133]
[118 132]
[119 131]
[120 130]
[121 129]
[122 128]
[123 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
