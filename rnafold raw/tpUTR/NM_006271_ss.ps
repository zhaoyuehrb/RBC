%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 04:56:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGACAGCCACAUUGGGCAGCGCCCUUCCUCUCCACCCUCCCAGACCUGCCUCUUCCCCCUGCUUCCACCUCACCCCACUUAUCCCUCUCCAUAACCCCACCCUUGCCCACCCCACCCCCACCCCCACCAAGGGCGCAAGAGUAGCGGUCCAAGCCUGCAACUCAUCUUUCAUUAAAGGCUUCUCUCUCACCAGC\
) } def
/len { sequence length } bind def

/coor [
[100.57626343 351.76348877]
[109.70102692 339.60589600]
[122.78627014 331.86996460]
[120.64078522 317.02416992]
[118.49530029 302.17840576]
[114.42238617 296.00085449]
[116.43592834 287.07897949]
[114.52745819 272.20089722]
[112.61898041 257.32281494]
[110.71051025 242.44470215]
[84.02086639 241.95025635]
[57.88924408 236.49870300]
[33.22819519 226.28038025]
[10.89891720 211.65217590]
[-8.31881237 193.12489319]
[-23.75388336 171.34553528]
[-37.12440491 178.14474487]
[-50.49493027 184.94393921]
[-63.86545181 191.74313354]
[-77.23597717 198.54232788]
[-90.60649872 205.34153748]
[-95.59193420 220.09901428]
[-109.24840546 226.80389404]
[-123.28668213 221.96011353]
[-120.49685669 236.80577087]
[-122.00391388 251.83592224]
[-127.68569183 265.83212280]
[-137.08158875 277.65982056]
[-149.42991638 286.36010742]
[-163.72966003 291.22778320]
[-178.82159424 291.86816406]
[-193.48229980 288.22940063]
[-206.52326965 280.60644531]
[-216.88735962 269.61724854]
[-223.73439026 256.15267944]
[-226.50929260 241.30421448]
[-224.98713684 226.27558899]
[-219.29130554 212.28509521]
[-209.88352966 200.46685791]
[-197.52647400 191.77896118]
[-183.22184753 186.92567444]
[-168.12927246 186.30043030]
[-153.47224426 189.95393372]
[-140.43891907 197.58998108]
[-130.08587646 208.58958435]
[-125.73045349 194.39219666]
[-112.26769257 187.30636597]
[-97.40570068 191.97100830]
[-84.03517914 185.17181396]
[-70.66464996 178.37261963]
[-57.29412842 171.57341003]
[-43.92360687 164.77421570]
[-30.55308151 157.97502136]
[-33.41712952 151.03997803]
[-35.91308212 143.96412659]
[-38.03405380 136.76696777]
[-39.77419281 129.46838379]
[-41.12869644 122.08847809]
[-42.09383011 114.64764404]
[-42.66692734 107.16639709]
[-42.84641266 99.66537476]
[-42.63178635 92.16527557]
[-42.02364349 84.68679810]
[-41.02365875 77.25056458]
[-39.63459396 69.87709808]
[-37.86028290 62.58673477]
[-35.70561600 55.39960098]
[-33.17654037 48.33551407]
[-30.28003120 41.41397095]
[-27.02408600 34.65406418]
[-23.41768074 28.07444382]
[-19.47077179 21.69326591]
[-15.19424343 15.52813530]
[-10.59989834 9.59606075]
[-5.70040941 3.91340804]
[-0.50929570 -1.50414371]
[4.95912075 -6.64164782]
[10.68975353 -11.48493004]
[16.66679001 -16.02062798]
[22.87374306 -20.23622704]
[29.29348373 -24.12009621]
[35.90830231 -27.66152191]
[42.69995117 -30.85073090]
[49.64968872 -33.67892838]
[56.73833847 -36.13830566]
[63.94635010 -38.22208023]
[71.25382996 -39.92450714]
[78.64061737 -41.24088287]
[86.08634186 -42.16757584]
[93.57044983 -42.70203400]
[101.07229614 -42.84278107]
[108.57118988 -42.58942795]
[116.04643250 -41.94267273]
[123.47740173 -40.90430069]
[130.84359741 -39.47717667]
[138.12469482 -37.66523743]
[145.30061340 -35.47348404]
[152.35153198 -32.90795898]
[159.25802612 -29.97574806]
[166.00103760 -26.68493652]
[172.56193542 -23.04460335]
[178.92265320 -19.06479073]
[187.85513306 -31.11513138]
[196.78762817 -43.16547012]
[205.72010803 -55.21580887]
[214.65260315 -67.26615143]
[223.58508301 -79.31649017]
[214.19386292 -91.12611389]
[208.18008423 -104.96435547]
[205.95378113 -119.88769531]
[207.66674805 -134.87863159]
[213.20219421 -148.91505432]
[222.18269348 -161.03994751]
[233.99594116 -170.42662048]
[247.83650208 -176.43504333]
[262.76071167 -178.65559387]
[277.75097656 -176.93682861]
[291.78524780 -171.39598083]
[303.90667725 -162.41079712]
[313.28878784 -150.59391785]
[319.29187012 -136.75103760]
[321.50665283 -121.82598877]
[319.78210449 -106.83638000]
[314.23583984 -92.80422974]
[305.24597168 -80.68627167]
[293.42547607 -71.30873871]
[279.58029175 -65.31098938]
[264.65438843 -63.10197449]
[249.66543579 -64.83230591]
[235.63542175 -70.38400269]
[226.70294189 -58.33366013]
[217.77044678 -46.28332138]
[208.83796692 -34.23298264]
[199.90547180 -22.18264389]
[190.97299194 -10.13230419]
[207.90962219 6.40126276]
[221.88368225 25.50450706]
[232.51152039 46.65296173]
[239.50137329 69.26601410]
[242.66131592 92.72284698]
[241.90463257 116.37947083]
[256.69482422 118.87942505]
[271.48504639 121.37938690]
[286.27523804 123.87934113]
[301.17193604 118.55024719]
[312.43167114 128.30050659]
[327.22186279 130.80047607]
[342.03155518 133.18241882]
[356.85974121 135.44621277]
[371.68792725 137.70999146]
[386.75976562 131.24690247]
[399.72906494 141.28329468]
[397.25411987 157.49461365]
[381.88095093 163.20402527]
[369.42413330 152.53819275]
[354.59594727 150.27439880]
[339.76776123 148.01060486]
[332.67285156 150.11135864]
[324.72192383 145.59068298]
[309.93170166 143.09071350]
[296.09292603 148.59863281]
[283.77529907 138.66955566]
[268.98507690 136.16958618]
[254.19487000 133.66963196]
[239.40466309 131.16967773]
[236.31408691 142.70457458]
[232.27084351 153.94100952]
[227.30320740 164.80049133]
[221.44589233 175.20709229]
[214.73982239 185.08808899]
[207.23187256 194.37443542]
[198.97451782 203.00123596]
[190.02546692 210.90818787]
[180.44725037 218.04003906]
[170.30680847 224.34693909]
[159.67501831 229.78482056]
[148.62619019 234.31568909]
[137.23751831 237.90785217]
[125.58860016 240.53623962]
[127.49707794 255.41433716]
[129.40554810 270.29241943]
[131.31402588 285.17053223]
[133.34106445 300.03292847]
[135.48655701 314.87869263]
[137.63203430 329.72445679]
[152.37210083 333.43914795]
[164.56561279 342.51586914]
[172.35314941 355.57046509]
[174.54716492 370.61224365]
[170.81307983 385.34741211]
[161.72033691 397.52896118]
[148.65548706 405.29931641]
[133.61085510 407.47354126]
[118.88061523 403.72009277]
[106.71102142 394.61132812]
[98.95786285 381.53628540]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 185]
[4 184]
[5 183]
[7 182]
[8 181]
[9 180]
[10 179]
[16 53]
[17 52]
[18 51]
[19 50]
[20 49]
[21 48]
[24 45]
[102 135]
[103 134]
[104 133]
[105 132]
[106 131]
[107 130]
[141 165]
[142 164]
[143 163]
[144 162]
[146 160]
[147 159]
[148 157]
[149 156]
[150 155]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
