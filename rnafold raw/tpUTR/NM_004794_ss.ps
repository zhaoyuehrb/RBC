%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:24:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCAAACGAUAUAAAUACAAGAUAAAUUAUCACUGGAGUUUUUUCUUUCCCUUUUUUCUGUGCCUGCAUAAUGCUGACACCUGCUUGUUUCCAUACAAAUUGAUAUCAAAAUAAAAUUUGUAUAGAUUA\
) } def
/len { sequence length } bind def

/coor [
[161.91212463 274.84277344]
[150.58320618 284.67413330]
[137.05982971 291.16400146]
[122.30252838 293.85137939]
[107.35948944 292.54537964]
[93.29209900 287.33877563]
[81.09954071 278.60140991]
[71.64784241 266.95388794]
[65.60832977 253.22346497]
[63.40999603 238.38542175]
[65.20897675 223.49369812]
[70.87749481 209.60600281]
[80.01291656 197.70877075]
[91.96638489 188.64706421]
[105.88883972 183.06448364]
[120.79141235 181.35758972]
[135.61557007 183.64758301]
[149.30624390 189.77052307]
[141.14169312 177.18719482]
[132.97714233 164.60386658]
[124.81258392 152.02055359]
[116.64802551 139.43722534]
[109.24198914 142.36259460]
[101.32375336 143.89093018]
[93.15795898 143.93316650]
[85.02454376 142.45057678]
[77.20915985 139.45735168]
[69.99314117 135.02130127]
[63.64340591 129.26275635]
[58.40265656 122.35146332]
[54.48020935 114.50177002]
[52.04382324 105.96595001]
[51.21283340 97.02621460]
[52.05282974 87.98530579]
[54.57218552 79.15630341]
[58.72050095 70.85175323]
[45.67058182 63.45583725]
[32.62066269 56.05991745]
[19.57074356 48.66400146]
[5.50238228 55.21081543]
[-9.72079849 52.20509338]
[-20.24517441 40.80258560]
[-22.02390862 25.38779640]
[-14.37304115 11.88802433]
[-0.23448618 5.49420738]
[14.95519257 8.66489887]
[25.35525322 20.18090248]
[26.96666336 35.61408234]
[40.01658249 43.00999832]
[53.06650162 50.40591812]
[66.11642456 57.80183411]
[73.03688049 54.91094971]
[65.13029480 42.16395569]
[52.82948303 33.57966232]
[51.22953033 18.66523552]
[61.42963028 7.66714668]
[76.42213440 8.14127541]
[85.90693665 19.76188850]
[83.36763000 34.54567719]
[86.87780762 49.12918091]
[93.79826355 46.23829651]
[97.70950317 31.75719833]
[101.62073517 17.27609825]
[97.74947357 1.93582761]
[108.53773499 -8.33367252]
[104.66647339 -23.67394447]
[115.45473480 -33.94344330]
[119.36597443 -48.42454529]
[123.27720642 -62.90564346]
[121.57006836 -79.77342224]
[137.30606079 -86.08331299]
[147.72552490 -72.70903778]
[137.75830078 -58.99441147]
[133.84707642 -44.51330948]
[129.93583679 -30.03221130]
[134.08685303 -15.72772503]
[123.01883698 -4.42243958]
[127.16985321 9.88204575]
[116.10183716 21.18733215]
[112.19059753 35.66843033]
[108.27936554 50.14953232]
[132.08073425 63.49028397]
[144.67387390 86.49607849]
[143.20277405 111.62200165]
[129.23135376 131.27267456]
[137.39590454 143.85598755]
[145.56045532 156.43931580]
[153.72502136 169.02262878]
[161.88957214 181.60595703]
[169.58670044 185.32226562]
[173.08178711 192.14648438]
[186.13169861 199.54240417]
[201.95274353 199.61532593]
[209.21043396 212.62205505]
[222.26036072 220.01797485]
[235.31027222 227.41389465]
[248.36019897 234.80981445]
[261.41012573 242.20573425]
[274.46002197 249.60165405]
[287.50994873 256.99755859]
[300.55987549 264.39349365]
[313.60980225 271.78939819]
[325.83316040 262.70596313]
[340.69577026 259.38586426]
[355.62255859 262.40432739]
[368.02734375 271.23837280]
[375.76098633 284.35748291]
[377.48355103 299.48867798]
[372.89657593 314.01037598]
[362.79479980 325.40658569]
[348.92840576 331.70291138]
[333.69985962 331.80841064]
[319.74758911 325.70483398]
[309.48889160 314.44967651]
[304.70114136 299.99291992]
[306.21386719 284.83932495]
[293.16394043 277.44342041]
[280.11404419 270.04748535]
[267.06411743 262.65158081]
[254.01419067 255.25566101]
[240.96427917 247.85974121]
[227.91435242 240.46382141]
[214.86444092 233.06790161]
[201.81451416 225.67198181]
[186.92689514 226.12806702]
[178.73577881 212.59233093]
[165.68586731 205.19641113]
[172.61897278 218.49798584]
[175.79243469 233.15844727]
[174.98086548 248.13647461]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 89]
[19 88]
[20 87]
[21 86]
[22 85]
[36 51]
[37 50]
[38 49]
[39 48]
[61 81]
[62 80]
[63 79]
[65 77]
[67 75]
[68 74]
[69 73]
[91 127]
[92 126]
[94 124]
[95 123]
[96 122]
[97 121]
[98 120]
[99 119]
[100 118]
[101 117]
[102 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
