%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 11:42:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUUGCUCUAUGGCCCUUCCUCAUCAGGGGACCGUUUCCCCCCUCUUCCUUCACAGUAUUUAAGAAAUAAAAGUCGGAUUUUUCUGGCUGCUUUCUCUCUA\
) } def
/len { sequence length } bind def

/coor [
[126.89133453 209.73365784]
[110.14939880 212.52381897]
[93.17839813 212.77449036]
[76.36135864 210.48002625]
[60.07779694 205.69218445]
[44.69522476 198.51904297]
[30.56079102 189.12248230]
[17.99349403 177.71456909]
[7.27695465 164.55274963]
[-1.34696984 149.93408203]
[-7.68365097 134.18847656]
[-11.59008026 117.67128754]
[-26.52852821 119.02877045]
[-41.46697617 120.38625336]
[-56.40542603 121.74373627]
[-71.32167053 123.32668304]
[-86.21230316 125.13473511]
[-101.10293579 126.94278717]
[-115.99356842 128.75083923]
[-130.88420105 130.55888367]
[-139.26646423 143.76008606]
[-154.18875122 148.43548584]
[-168.60522461 142.37748718]
[-175.70886230 128.44650269]
[-172.14553833 113.22031403]
[-159.59776306 103.88825989]
[-143.99018860 104.85665894]
[-132.69224548 115.66825104]
[-117.80162048 113.86020660]
[-102.91098022 112.05215454]
[-88.02034760 110.24410248]
[-73.12971497 108.43605042]
[-66.76311493 104.43863678]
[-57.76290894 106.80529022]
[-42.82445908 105.44780731]
[-27.88601112 104.09032440]
[-12.94756317 102.73284149]
[-12.48128700 89.38959503]
[-10.44419384 76.19452667]
[-6.86473274 63.33190155]
[-1.79289150 50.98135376]
[4.70050097 39.31535721]
[12.52476406 28.49682808]
[21.57062912 18.67685127]
[31.71177292 9.99256420]
[42.80656815 2.56524229]
[54.70008087 -3.50139022]
[67.22621155 -8.12261200]
[80.21002960 -11.23388672]
[93.47022247 -12.79176617]
[106.82160187 -12.77449322]
[120.07771301 -11.18230915]
[133.05343628 -8.03744984]
[145.56756592 -3.38383269]
[157.44534302 2.71355343]
[168.52088928 10.16955757]
[178.63952637 18.88005638]
[187.65995789 28.72340584]
[195.45619202 39.56214142]
[201.91938782 51.24489975]
[206.95925903 63.60853195]
[210.50541687 76.48037720]
[212.50836182 89.68067169]
[212.94010925 103.02507782]
[211.79464722 116.32723999]
[226.46054077 119.47545624]
[241.12644958 122.62367249]
[255.79235840 125.77188873]
[270.45825195 128.92010498]
[279.15158081 120.52170563]
[290.72274780 117.47122955]
[302.19235229 120.43196869]
[310.66641235 128.53489685]
[314.06655884 139.62924194]
[328.51562500 143.65722656]
[342.96469116 147.68519592]
[357.41375732 151.71318054]
[371.86282349 155.74114990]
[386.31188965 159.76913452]
[400.76095581 163.79711914]
[416.49981689 159.19061279]
[428.17010498 170.71174622]
[423.76641846 186.50856018]
[407.81887817 190.33065796]
[396.73297119 178.24617004]
[382.28390503 174.21820068]
[367.83483887 170.19021606]
[353.38577271 166.16224670]
[338.93670654 162.13426208]
[324.48764038 158.10627747]
[310.03860474 154.07830811]
[294.82888794 164.04217529]
[276.82025146 159.81742859]
[267.31002808 143.58601379]
[252.64413452 140.43778992]
[237.97822571 137.28958130]
[223.31233215 134.14135742]
[208.64642334 130.99314880]
[202.77755737 146.91903687]
[194.58914185 161.78602600]
[184.26602173 175.25862122]
[172.04113770 187.03273010]
[158.19038391 196.84265137]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 37]
[13 36]
[14 35]
[15 34]
[16 32]
[17 31]
[18 30]
[19 29]
[20 28]
[65 98]
[66 97]
[67 96]
[68 95]
[69 94]
[74 91]
[75 90]
[76 89]
[77 88]
[78 87]
[79 86]
[80 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
