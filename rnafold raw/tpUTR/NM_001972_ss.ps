%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 10:08:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGGGCUGCCCGGGUCACCUCAGCUGCCCACACCCACACUCUCCAGCAUCUGGCACAAUAAACAUUCUCUGUUUUGUAGAA\
) } def
/len { sequence length } bind def

/coor [
[78.36726379 150.02052307]
[66.79870605 143.21691895]
[57.24367523 133.79237366]
[50.28165054 122.31845093]
[35.88200760 126.51966858]
[21.48236084 130.72088623]
[7.08271790 134.92210388]
[-3.99804664 146.21490479]
[-18.38299942 142.35195923]
[-32.78264236 146.55317688]
[-40.41881943 160.12986755]
[-55.08195114 164.18537903]
[-67.97819519 156.82177734]
[-82.37783813 161.02299500]
[-96.77748108 165.22422791]
[-110.28920746 175.46481323]
[-123.87001038 165.31600952]
[-117.87736511 149.45648193]
[-100.97870636 150.82456970]
[-86.57905579 146.62335205]
[-72.17941284 142.42213440]
[-65.26619720 129.27896118]
[-50.72275925 124.81320190]
[-36.98386383 132.15353394]
[-22.58421898 127.95230865]
[-12.53341389 116.96001434]
[2.88149738 120.52246857]
[17.28114128 116.32125092]
[31.68078613 112.12002563]
[46.08042908 107.91880798]
[45.50356674 99.59194946]
[46.20505524 91.27466583]
[48.16843414 83.16205597]
[51.34764862 75.44442749]
[55.66812515 68.30280304]
[61.02851105 61.90471649]
[67.30307007 56.40024567]
[74.34461975 51.91851807]
[81.98797607 48.56465530]
[90.05384827 46.41733932]
[98.35303497 45.52693176]
[106.69084930 45.91432571]
[114.87171936 47.57043076]
[122.70373535 50.45640182]
[130.76988220 37.80976868]
[138.83601379 25.16313553]
[146.90216064 12.51650238]
[150.32182312 -4.08898640]
[167.22502136 -5.39982653]
[173.16389465 10.47990990]
[159.54879761 20.58264732]
[151.48265076 33.22927856]
[143.41650391 45.87591171]
[135.35037231 58.52254486]
[151.70167542 82.76732635]
[153.16625977 111.97399902]
[167.20692444 117.25221252]
[181.24760437 122.53042603]
[195.28826904 127.80863953]
[202.27137756 127.06216431]
[207.65400696 129.72171021]
[210.16590881 134.05378723]
[223.76718140 140.37876892]
[237.36845398 146.70375061]
[250.96974182 153.02873230]
[266.47204590 148.89862061]
[279.28039551 158.55915833]
[279.56927490 174.59960938]
[267.11712646 184.71510315]
[251.47615051 181.14590454]
[244.64476013 166.63000488]
[231.04348755 160.30502319]
[217.44221497 153.98004150]
[203.84094238 147.65507507]
[190.01005554 141.84931946]
[175.96939087 136.57110596]
[161.92871094 131.29287720]
[147.88804626 126.01467133]
[140.07820129 136.92919922]
[129.83776855 145.60411072]
[117.78778839 151.51332092]
[104.65905762 154.29844666]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 30]
[5 29]
[6 28]
[7 27]
[9 25]
[10 24]
[13 21]
[14 20]
[15 19]
[44 54]
[45 53]
[46 52]
[47 51]
[56 78]
[57 77]
[58 76]
[59 75]
[62 74]
[63 73]
[64 72]
[65 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
