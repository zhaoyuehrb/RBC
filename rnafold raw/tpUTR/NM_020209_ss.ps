%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:43:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGUGACCCUCGGCCCCCUUUUGAGUCCUCGGGCCCAGAAUCGUAUCCCAAAGCCCUCCCAUGGCCUAGAAAAUAAAUAAGUUAUUGUUU\
) } def
/len { sequence length } bind def

/coor [
[103.00289917 207.88314819]
[101.45214081 192.96351624]
[99.90138245 178.04389954]
[98.35062408 163.12426758]
[96.79986572 148.20465088]
[95.24910736 133.28503418]
[93.69834900 118.36540222]
[88.32798004 112.45001984]
[86.41823578 105.66274261]
[71.43833923 104.88632202]
[57.25617599 111.89893341]
[44.94645691 103.51322174]
[29.96656609 102.73680115]
[14.98667336 101.96038055]
[0.00678137 101.18395996]
[-14.97311115 100.40753937]
[-21.47777557 114.14645386]
[-32.74831390 124.34662628]
[-47.06604767 129.45259094]
[-62.24762726 128.68574524]
[-75.97797394 122.16300964]
[-86.16330719 110.87906647]
[-91.25043488 96.55462646]
[-90.46361542 81.37406921]
[-83.92282867 67.65231323]
[-72.62549591 57.48183441]
[-58.29437637 52.41355133]
[-43.11486816 53.22034073]
[-29.40172958 59.77917480]
[-19.24611855 71.08987427]
[-14.19669056 85.42765045]
[0.78320163 86.20407104]
[15.76309395 86.98049164]
[30.74298668 87.75691223]
[45.72287750 88.53333282]
[58.83358383 81.46518707]
[72.21475983 89.90642548]
[87.19465637 90.68284607]
[72.44907379 87.93186951]
[59.77999496 79.90102386]
[50.99986649 67.73922729]
[47.36478806 53.18635178]
[49.39479828 38.32434845]
[56.79947662 25.27939987]
[68.51950836 15.91772747]
[82.87820435 11.57862473]
[97.82139587 12.88284779]
[111.21128845 19.64381409]
[121.13231659 30.89429092]
[126.16516113 45.02477264]
[125.58981323 60.01373672]
[119.48858643 73.71683502]
[108.73284912 84.17467499]
[120.77613831 75.23268890]
[132.81942749 66.29070282]
[133.56796265 50.67104340]
[144.21939087 39.22198486]
[159.74446106 37.34942627]
[172.81268311 45.93752670]
[177.25366211 60.93125153]
[170.97048950 75.25102234]
[156.92988586 82.13547516]
[141.76141357 78.33399200]
[129.71812439 87.27597809]
[117.67483521 96.21796417]
[132.53083801 94.14449310]
[145.91279602 87.36785126]
[160.85041809 86.00115204]
[175.23994446 90.23686981]
[187.05488586 99.47847748]
[194.63128662 112.42444611]
[196.90214539 127.25155640]
[193.54765320 141.87165833]
[185.04022217 154.22575378]
[172.57798767 162.57397461]
[157.91606140 165.74061584]
[143.11929321 163.27972412]
[130.27160645 155.53784180]
[121.18234253 143.60531616]
[117.13173676 129.16436768]
[108.61797333 116.81464386]
[110.16873169 131.73426819]
[111.71949005 146.65388489]
[113.27024841 161.57351685]
[114.82100677 176.49313354]
[116.37176514 191.41276550]
[117.92252350 206.33238220]
[127.97930145 219.28588867]
[121.53990173 234.36787415]
[105.22863007 236.06327820]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 87]
[2 86]
[3 85]
[4 84]
[5 83]
[6 82]
[7 81]
[9 38]
[10 37]
[12 35]
[13 34]
[14 33]
[15 32]
[16 31]
[53 65]
[54 64]
[55 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
