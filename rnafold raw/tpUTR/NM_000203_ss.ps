%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 03:57:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUGUGCUGAGCCCCAGUGGGUUGCACCUCCACCGGCAGUCAGCGAGCUGGGGCUGCACUGUGCCCAUGCUGCCCUCCCAUCACCCCCUUUGCAAUAUAUUUUUAUAUUUUAUUAUUUUCUUUUAUAUCUUGGUACCAACGCCCCCUUUAAAGCGGCUUUGCA\
) } def
/len { sequence length } bind def

/coor [
[-74.79443359 174.03126526]
[-89.06027985 178.66651917]
[-103.28135681 183.43737793]
[-113.79190826 195.26272583]
[-128.34980774 192.11366272]
[-142.52482605 197.01966858]
[-156.69984436 201.92568970]
[-170.87484741 206.83171082]
[-175.53678894 211.62272644]
[-181.08757019 213.08531189]
[-185.68391418 211.64346313]
[-200.03541565 216.00627136]
[-214.38693237 220.36909485]
[-228.73844910 224.73190308]
[-243.08995056 229.09471130]
[-257.44146729 233.45751953]
[-271.79296875 237.82032776]
[-286.14450073 242.18313599]
[-300.49600220 246.54594421]
[-307.97909546 260.20761108]
[-322.59570312 264.42767334]
[-335.57391357 257.20950317]
[-349.92541504 261.57232666]
[-364.27694702 265.93511963]
[-378.62844849 270.29794312]
[-385.96887207 275.81213379]
[-393.29486084 274.60440063]
[-407.72683716 278.69317627]
[-415.46865845 292.20989990]
[-430.16299438 296.15090942]
[-443.00140381 288.68695068]
[-457.43338013 292.77575684]
[-471.02456665 302.91064453]
[-484.52578735 292.65621948]
[-478.40963745 276.84393311]
[-461.52215576 278.34378052]
[-447.09017944 274.25500488]
[-440.07467651 261.16613770]
[-425.49685669 256.81393433]
[-411.81561279 264.26119995]
[-397.38363647 260.17242432]
[-382.99124146 255.94642639]
[-368.63973999 251.58361816]
[-354.28823853 247.22080994]
[-339.93670654 242.85800171]
[-333.17166138 229.63795471]
[-318.67935181 225.00900269]
[-304.85882568 232.19444275]
[-290.50729370 227.83161926]
[-276.15579224 223.46881104]
[-261.80429077 219.10600281]
[-247.45275879 214.74319458]
[-233.10125732 210.38038635]
[-218.74974060 206.01757812]
[-204.39822388 201.65476990]
[-190.04672241 197.29196167]
[-175.78086853 192.65670776]
[-161.60585022 187.75068665]
[-147.43084717 182.84466553]
[-133.25582886 177.93864441]
[-123.75917053 166.46420288]
[-108.18737793 169.26235962]
[-102.87078857 164.07943726]
[-93.69554138 164.40068054]
[-79.42968750 159.76542664]
[-76.51622009 141.93055725]
[-64.93122101 127.95112610]
[-47.78849792 121.71863556]
[-29.76392746 125.02410889]
[-15.82008362 137.04447937]
[-1.84212351 131.60237122]
[12.13583660 126.16024780]
[26.11379814 120.71813202]
[40.09175873 115.27601624]
[38.31264114 107.02737427]
[37.66872025 98.57801056]
[38.18157196 90.08408356]
[39.85131073 81.70388031]
[42.65640640 73.59487915]
[46.55389404 65.91078949]
[51.48002243 58.79866028]
[57.35126495 52.39601898]
[64.06573486 46.82826614]
[71.50492859 42.20619583]
[79.53584290 38.62382507]
[88.01329803 36.15647125]
[96.78262329 34.85921097]
[105.68242645 34.76567459]
[114.54759216 35.88725281]
[123.21234131 38.21269989]
[131.51330566 41.70817184]
[139.29264832 46.31767654]
[146.40104675 51.96395111]
[152.70054626 58.54973984]
[158.06721497 65.95946503]
[168.41839600 55.10345840]
[178.76959229 44.24744797]
[189.12077332 33.39143372]
[199.47195435 22.53542519]
[209.82313538 11.67941475]
[213.16145325 -4.37635517]
[228.81794739 -9.25551891]
[240.68656921 2.06118846]
[236.55789185 17.93210793]
[220.67915344 22.03059959]
[210.32797241 32.88661194]
[199.97677612 43.74262238]
[189.62559509 54.59863281]
[179.27441406 65.45464325]
[168.92323303 76.31065369]
[169.84906006 83.75328827]
[184.13772583 79.18886566]
[198.42639160 74.62444305]
[212.71505737 70.06002045]
[227.00372314 65.49559784]
[241.29240417 60.93117523]
[251.86328125 50.28897476]
[265.99655151 45.26394653]
[280.91308594 46.84420013]
[293.67974854 54.71899033]
[301.78613281 67.33985138]
[303.63827515 82.22506714]
[298.87194824 96.44765472]
[288.42437744 107.21094513]
[274.34994507 112.39848328]
[259.41619873 110.99020386]
[246.55810547 103.26152802]
[231.58662415 102.33693695]
[216.61514282 101.41234589]
[201.64367676 100.48774719]
[186.67219543 99.56315613]
[171.70071411 98.63856506]
[172.62654114 106.08119965]
[185.32197571 114.07031250]
[198.01741028 122.05943298]
[213.37030029 118.30918121]
[226.83470154 126.58477020]
[230.42242432 141.97645569]
[222.00494385 155.35260010]
[206.57618713 158.77740479]
[193.28977966 150.21896362]
[190.02830505 134.75486755]
[177.33287048 126.76574707]
[164.63743591 118.77663422]
[157.95935059 133.13224792]
[148.17944336 145.41856384]
[135.89141846 154.98716736]
[121.81885529 161.35140991]
[106.77281952 164.21110535]
[91.60508728 163.46607971]
[77.15998840 159.21852112]
[64.22737885 151.76391602]
[53.49947739 141.57125854]
[45.53387451 129.25398254]
[31.55591202 134.69609070]
[17.57795334 140.13821411]
[3.59999204 145.58032227]
[-10.37796879 151.02244568]
[-10.67181492 163.11268616]
[-15.03120422 174.35624695]
[-22.91875267 183.43215942]
[-33.38407135 189.28273010]
[-45.17826080 191.23669434]
[-56.90290833 189.08621216]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 65]
[2 64]
[3 62]
[5 60]
[6 59]
[7 58]
[8 57]
[11 56]
[12 55]
[13 54]
[14 53]
[15 52]
[16 51]
[17 50]
[18 49]
[19 48]
[22 45]
[23 44]
[24 43]
[25 42]
[27 41]
[28 40]
[31 37]
[32 36]
[70 158]
[71 157]
[72 156]
[73 155]
[74 154]
[95 110]
[96 109]
[97 108]
[98 107]
[99 106]
[100 105]
[133 144]
[134 143]
[135 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
