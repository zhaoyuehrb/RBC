%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 00:01:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUCAGAUUAUAUCUUCAACACCACACCCCCCACCCCAUCGUGGGUGAGGGUAUCCCCUGUGUGUCCCAGGCCAAUAAAAUCUACCUGCCACUGCC\
) } def
/len { sequence length } bind def

/coor [
[85.52632904 117.55912781]
[81.33282471 113.01332855]
[78.51823425 107.50625610]
[77.29046631 101.44471741]
[77.74021149 95.27645111]
[64.91307068 87.50056458]
[52.08592987 79.72467041]
[37.83193970 85.56675720]
[23.04395485 81.93785095]
[13.34312153 70.43316650]
[12.28947639 55.59983063]
[-0.53766483 47.82394028]
[-13.36480618 40.04805374]
[-26.19194794 32.27216339]
[-39.01908875 24.49627686]
[-51.84622955 16.72038841]
[-64.67337036 8.94449997]
[-77.50051117 1.16861093]
[-90.32765198 -6.60727739]
[-85.97709656 7.74795246]
[-88.60315704 22.51629066]
[-97.63576508 34.49176788]
[-111.11407471 41.07469940]
[-126.11218262 40.83603668]
[-139.37422180 33.82759094]
[-148.02122498 21.57078171]
[-150.17605591 6.72636557]
[-145.37095642 -7.48317194]
[-134.64901733 -17.97316933]
[-120.33780670 -22.46641541]
[-105.54361725 -19.98731422]
[-114.89596558 -31.71478653]
[-124.24830627 -43.44225693]
[-133.60066223 -55.16973114]
[-142.95300293 -66.89720154]
[-158.68400574 -68.41744232]
[-168.66790771 -80.66886139]
[-166.98143005 -96.38291168]
[-154.62513733 -106.23672485]
[-138.92979431 -104.38420868]
[-129.20718384 -91.92443085]
[-131.22552490 -76.24954987]
[-121.87318420 -64.52207947]
[-112.52083588 -52.79460526]
[-103.16848755 -41.06713486]
[-93.81614685 -29.33966064]
[-82.55176544 -19.43441963]
[-69.72462463 -11.65853024]
[-56.89748383 -3.88264203]
[-44.07034302 3.89324665]
[-31.24320030 11.66913509]
[-18.41605949 19.44502449]
[-5.58891773 27.22091293]
[7.23822355 34.99679947]
[20.06536484 42.77268982]
[33.70394135 36.84586334]
[48.39099503 40.12525940]
[58.44838715 51.55776596]
[59.86181641 66.89752960]
[72.68895721 74.67342377]
[85.51609802 82.44931030]
[109.21102142 79.19213867]
[122.72992706 98.92276764]
[137.10993958 103.19068146]
[151.48995972 107.45859528]
[160.94700623 101.62245178]
[171.82936096 102.05458069]
[180.43560791 108.36012268]
[183.97682190 118.18868256]
[198.05384827 123.36916351]
[212.13087463 128.54963684]
[226.20790100 133.73011780]
[236.79545593 122.78371429]
[250.92239380 117.09605408]
[266.14114380 117.65254974]
[279.81494141 124.35678101]
[289.57476807 136.04721069]
[293.72961426 150.69837952]
[291.55966187 165.77191162]
[283.44088745 178.65620422]
[270.77987671 187.11898804]
[255.77023315 189.69403076]
[241.01248169 185.93519592]
[229.06350708 176.49371338]
[221.99349976 163.00538635]
[221.02742004 147.80714417]
[206.95039368 142.62666321]
[192.87336731 137.44618225]
[178.79634094 132.26571655]
[160.19152832 137.10585022]
[147.22204590 121.83861542]
[132.84202576 117.57070160]
[118.46201324 113.30278778]
[114.19815063 117.78265381]
[108.88549042 120.94894409]
[102.91647339 122.56777191]
[96.73202515 122.51955414]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 61]
[6 60]
[7 59]
[11 55]
[12 54]
[13 53]
[14 52]
[15 51]
[16 50]
[17 49]
[18 48]
[19 47]
[31 46]
[32 45]
[33 44]
[34 43]
[35 42]
[63 93]
[64 92]
[65 91]
[69 89]
[70 88]
[71 87]
[72 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
