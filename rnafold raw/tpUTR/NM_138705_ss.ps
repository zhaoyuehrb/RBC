%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 10:58:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCAGCUGCCGCAGCCGGGGGAGGCCUGCCCGGGAAGGCUGCUGCCCCUGCCCCCUGGCCCCCACUCCCCCGGCUCCGUGUAAAAUAAAUGUUCCAGCCC\
) } def
/len { sequence length } bind def

/coor [
[156.92776489 441.44308472]
[151.92434692 427.23345947]
[150.20884705 412.26666260]
[151.86729431 397.29345703]
[156.81651306 383.06484985]
[164.80824280 370.29458618]
[175.44161987 359.62316895]
[188.18328857 351.58590698]
[183.19796753 337.43859863]
[178.21264648 323.29129028]
[173.01005554 309.22241211]
[167.59143066 295.23532104]
[155.77899170 286.16253662]
[158.00862122 270.49923706]
[152.58999634 256.51214600]
[147.17137146 242.52505493]
[141.75274658 228.53797913]
[136.33412170 214.55088806]
[130.91549683 200.56381226]
[125.49686432 186.57672119]
[120.07823944 172.58964539]
[114.65961456 158.60255432]
[109.24098969 144.61547852]
[103.82236481 130.62838745]
[87.98519135 128.43154907]
[75.37197113 118.60562134]
[69.36724091 103.78720856]
[71.58226013 87.95256805]
[81.42266083 75.35063171]
[75.57587433 61.53705215]
[69.72908020 47.72346878]
[57.22464752 38.03070450]
[59.38906097 23.29419899]
[53.54227448 9.48061562]
[47.69548416 -4.33296728]
[42.44145203 -8.79821205]
[40.64037704 -14.42095184]
[41.94312668 -19.18151665]
[36.95780563 -33.32883453]
[31.97248268 -47.47615051]
[16.86056709 -50.21942902]
[5.15528679 -60.16337204]
[0.00530417 -74.63311005]
[2.79593849 -89.73635101]
[12.77652264 -101.41040039]
[27.26233101 -106.51500702]
[42.35675049 -103.67704010]
[53.99946213 -93.65991211]
[59.05863190 -79.15818024]
[56.17337036 -64.07272339]
[46.11979675 -52.46147156]
[51.10512161 -38.31415558]
[56.09044266 -24.16683960]
[61.50906754 -10.17975521]
[67.35585785 3.63382721]
[73.20264435 17.44741058]
[85.28887939 26.15213394]
[83.54266357 41.87667847]
[89.38945770 55.69026184]
[95.23624420 69.50384521]
[108.88420105 70.44023132]
[120.78700256 77.18313599]
[128.60655212 88.40802765]
[130.80683899 101.90995789]
[126.95562744 115.03672028]
[117.80944824 125.20976257]
[123.22807312 139.19685364]
[128.64669800 153.18392944]
[134.06532288 167.17102051]
[139.48394775 181.15809631]
[144.90257263 195.14518738]
[150.32119751 209.13226318]
[155.73982239 223.11935425]
[161.15844727 237.10643005]
[166.57707214 251.09352112]
[171.99569702 265.08059692]
[184.19570923 275.15383911]
[181.57852173 289.81671143]
[186.99714661 303.80380249]
[193.11883545 310.82189941]
[192.35997009 318.30596924]
[197.34529114 332.45327759]
[202.33061218 346.60058594]
[217.29614258 344.87420654]
[232.27056885 346.52175903]
[246.50276184 351.46063232]
[259.27883911 359.44308472]
[269.95797729 370.06869507]
[278.00448608 382.80453491]
[283.01480103 397.01174927]
[284.73754883 411.97769165]
[283.08636475 426.95172119]
[278.14404297 441.18270874]
[270.15850830 453.95684814]
[259.53030396 464.63342285]
[246.79251099 472.67684937]
[232.58409119 477.68371582]
[217.61772156 479.40283203]
[202.64410400 477.74801636]
[188.41430664 472.80224609]
[175.64208984 464.81362915]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 83]
[9 82]
[10 81]
[11 79]
[12 78]
[14 76]
[15 75]
[16 74]
[17 73]
[18 72]
[19 71]
[20 70]
[21 69]
[22 68]
[23 67]
[24 66]
[29 60]
[30 59]
[31 58]
[33 56]
[34 55]
[35 54]
[38 53]
[39 52]
[40 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
