%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 10:10:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAAAGAAGUCCCUGGGACUGUUUCAGACUUGGAAAGGUCACAGAAGGAAAAUAAUAUUAUAUAAAGUGACAACUAUGCAAAUCACA\
) } def
/len { sequence length } bind def

/coor [
[204.05982971 242.49293518]
[187.44473267 242.00521851]
[171.30369568 238.00994873]
[156.36891174 230.68579102]
[143.31837463 220.36247253]
[132.74514771 207.50595093]
[125.13039398 192.69732666]
[120.82145691 176.60667419]
[120.01604462 159.96264648]
[122.75315857 143.51951599]
[128.91120911 128.02293396]
[116.38427734 119.77211761]
[103.85735321 111.52129364]
[91.04705048 103.71769714]
[77.96932220 96.37106323]
[64.89159393 89.02442932]
[49.07039261 89.01119232]
[41.76368332 76.03192902]
[28.68595505 68.68528748]
[15.60822868 61.33865356]
[2.53050184 53.99201965]
[-13.29069901 53.97878265]
[-20.59741020 40.99951935]
[-33.67513657 33.65288544]
[-46.75286102 26.30624771]
[-59.83058929 18.95961189]
[-72.90831757 11.61297607]
[-89.29103088 12.34687042]
[-97.88872528 -1.61779094]
[-89.85681915 -15.91536236]
[-73.45785522 -15.83772755]
[-65.56168365 -1.46475089]
[-52.48395538 5.88188505]
[-39.40622711 13.22852135]
[-26.32850075 20.57515717]
[-13.25077343 27.92179298]
[1.63502109 27.40954971]
[9.87713814 40.91429138]
[22.95486450 48.26092911]
[36.03259277 55.60756302]
[49.11031723 62.95420074]
[63.99611282 62.44195557]
[72.23822784 75.94670105]
[85.31595612 83.29333496]
[98.39368439 90.63996887]
[103.87634277 90.36966705]
[109.06625366 93.31305695]
[112.10817719 98.99436188]
[124.63510895 107.24518585]
[137.16203308 115.49600983]
[146.58639526 105.71067047]
[157.55700684 97.70298004]
[169.74314880 91.71285248]
[182.77767944 87.91942596]
[196.26817322 86.43564606]
[209.80867004 87.30496979]
[222.99192810 90.50004578]
[235.42164612 95.92359924]
[246.72439575 103.41136932]
[256.56082153 112.73711395]
[264.63583374 123.61943054]
[270.70751953 135.73023987]
[274.59423828 148.70468140]
[276.18029785 162.15211487]
[275.41909790 175.66786194]
[272.33477783 188.84542847]
[267.02130127 201.28866577]
[259.63955688 212.62373352]
[270.52322388 222.94584656]
[281.40686035 233.26795959]
[292.29052734 243.59008789]
[306.54025269 238.12127686]
[321.75094604 239.38533020]
[334.90246582 247.13127136]
[343.38363647 259.82113647]
[345.51046753 274.93536377]
[340.86065674 289.47296143]
[330.35748291 300.54754639]
[316.08633423 305.96017456]
[300.88073730 304.63623047]
[287.75979614 296.83856201]
[279.32870483 284.11538696]
[277.26141357 268.99291992]
[281.96841431 254.47373962]
[271.08474731 244.15161133]
[260.20111084 233.82949829]
[249.31744385 223.50738525]
[235.71279907 233.02713013]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 50]
[12 49]
[13 48]
[14 45]
[15 44]
[16 43]
[18 41]
[19 40]
[20 39]
[21 38]
[23 36]
[24 35]
[25 34]
[26 33]
[27 32]
[68 87]
[69 86]
[70 85]
[71 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
