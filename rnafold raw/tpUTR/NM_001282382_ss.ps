%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 23:01:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUCUUAGUGCUUCAGAGUUUGUGUGUAUUUGUAUUAAUAAAGCAUUCUUUAACAGAUUCUU\
) } def
/len { sequence length } bind def

/coor [
[34.50988388 246.13801575]
[28.08367157 259.84869385]
[17.55200768 270.72814941]
[4.05729008 277.59628296]
[-10.93667507 279.70809937]
[-25.80345535 276.83450317]
[-38.93041229 269.28720093]
[-48.89363480 257.88488770]
[-54.61238480 243.86436462]
[-55.46633148 228.74652100]
[-51.36285400 214.17118835]
[-42.74705887 201.71940613]
[-30.55352592 192.74185181]
[-16.10491943 188.21234131]
[-0.96851444 188.62219238]
[13.21380329 193.92697144]
[22.72970390 182.33180237]
[32.24560165 170.73664856]
[41.76150131 159.14149475]
[51.27740097 147.54634094]
[60.79330063 135.95118713]
[70.30919647 124.35602570]
[79.82509613 112.76087189]
[89.34099579 101.16571045]
[97.05253601 88.29978180]
[102.79279327 74.44158936]
[108.53304291 60.58339691]
[114.27329254 46.72520447]
[114.72327423 37.21674728]
[120.65026855 32.33898163]
[127.06359100 18.77914429]
[133.47691345 5.21930408]
[139.89024353 -8.34053516]
[146.30357361 -21.90037537]
[144.42486572 -38.19155502]
[157.75354004 -47.74552917]
[172.57820129 -40.73398972]
[173.64849854 -24.36980629]
[159.86341858 -15.48704815]
[153.45008850 -1.92720878]
[147.03675842 11.63263035]
[140.62342834 25.19247055]
[134.21011353 38.75230789]
[128.13148499 52.46545410]
[122.39123535 66.32364655]
[116.65098572 80.18183899]
[110.91072845 94.04003143]
[125.72914886 91.71313477]
[138.11123657 100.17977142]
[141.31916809 114.83272552]
[133.60729980 127.69846344]
[119.17214203 131.77597046]
[105.86870575 124.84641266]
[100.93615723 110.68161011]
[91.42025757 122.27677155]
[81.90435791 133.87191772]
[72.38845825 145.46708679]
[62.87255859 157.06224060]
[53.35665894 168.65739441]
[43.84075928 180.25254822]
[34.32485962 191.84770203]
[24.80895996 203.44287109]
[32.77863312 216.31776428]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 62]
[17 61]
[18 60]
[19 59]
[20 58]
[21 57]
[22 56]
[23 55]
[24 54]
[25 47]
[26 46]
[27 45]
[28 44]
[30 43]
[31 42]
[32 41]
[33 40]
[34 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
