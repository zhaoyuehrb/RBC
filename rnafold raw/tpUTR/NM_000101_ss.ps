%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 12:22:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCGCCCCGGACCUGCCCUCCCGCCAGGUGCACCCACCUGCAAUAAAUGCAGCGAAGCCGGGA\
) } def
/len { sequence length } bind def

/coor [
[88.48101044 242.07884216]
[74.12222290 247.96141052]
[59.05604553 244.24792480]
[49.07573318 232.36630249]
[48.01892471 216.88525391]
[56.29198074 203.75756836]
[70.71374512 198.03111267]
[74.30348206 183.46697998]
[77.89321136 168.90284729]
[81.48294830 154.33872986]
[85.07268524 139.77459717]
[78.06891632 121.99375916]
[91.37122345 107.18552399]
[93.17927551 92.29489136]
[94.62698364 77.36491394]
[96.07469177 62.43494034]
[97.52239990 47.50496674]
[83.68350220 41.42693710]
[72.41609955 31.38263512]
[64.81524658 18.36512947]
[61.61447525 3.65560484]
[63.11493301 -11.30271053]
[69.15716553 -25.04615974]
[79.13790894 -36.23386765]
[92.07034302 -43.77856445]
[106.68159485 -46.95223999]
[108.12930298 -61.88221741]
[109.57701111 -76.81218719]
[111.02471924 -91.74216461]
[112.47242737 -106.67214203]
[113.92013550 -121.60211182]
[106.64072418 -136.29708862]
[115.95124054 -149.79695129]
[132.27383423 -148.21420288]
[138.81721497 -133.17703247]
[128.85011292 -120.15440369]
[127.40240479 -105.22443390]
[125.95469666 -90.29445648]
[124.50698853 -75.36447906]
[123.05928040 -60.43450928]
[121.61157227 -45.50453186]
[135.34086609 -39.58276749]
[146.58282471 -29.69396210]
[154.22817993 -16.79711342]
[157.51736450 -2.14882851]
[156.11598206 12.81909370]
[150.14874268 26.63962746]
[140.18847656 37.95429230]
[127.20120239 45.64669800]
[112.45237732 48.95267487]
[111.00466919 63.88265228]
[109.55695343 78.81262207]
[108.10924530 93.74259949]
[110.59250641 101.74842834]
[106.21382141 109.35285950]
[113.46987915 118.06204224]
[114.49926758 129.12586975]
[109.19272614 138.63255310]
[99.63681030 143.36433411]
[96.04707336 157.92846680]
[92.45734406 172.49258423]
[88.86760712 187.05671692]
[85.27787018 201.62084961]
[95.38648224 213.39350891]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 63]
[8 62]
[9 61]
[10 60]
[11 59]
[13 55]
[14 53]
[15 52]
[16 51]
[17 50]
[26 41]
[27 40]
[28 39]
[29 38]
[30 37]
[31 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
