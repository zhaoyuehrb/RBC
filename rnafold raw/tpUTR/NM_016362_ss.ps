%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 11:37:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGCCCACAAGCCUUACUCACCUCUCUCUAAGUUUAGAAGCGCUCAUCUGGCUUUUCGCUUGCUUCUGCAGCAACUCCCACGACUGUUGUACAAGCUCAGGAGGCGAAUAAAUGUUCAAACUGUA\
) } def
/len { sequence length } bind def

/coor [
[129.77871704 220.54252625]
[123.27045441 207.02799988]
[116.76219940 193.51345825]
[110.25394440 179.99893188]
[103.74568939 166.48440552]
[89.64588165 161.82273865]
[82.85306549 148.20979309]
[87.83823395 133.45222473]
[75.13737488 125.47174835]
[60.13737106 125.47174835]
[45.13737106 125.47174835]
[30.13737297 125.47174835]
[15.13737202 125.47174835]
[10.52425385 139.09574890]
[1.92895091 150.60209656]
[-9.79149818 158.86581421]
[-23.47533226 163.08406067]
[-37.77121735 162.85424805]
[-51.27169418 158.21235657]
[-62.65175629 149.62803650]
[-70.79886627 137.95722961]
[-74.92175293 124.35675812]
[-88.91053009 131.74760437]
[-101.44094849 123.69541168]
[-116.43628693 123.32144928]
[-125.20361328 126.26078796]
[-131.79953003 122.74659729]
[-146.78088379 121.99890900]
[-161.76223755 121.25122070]
[-176.74359131 120.50353241]
[-191.08193970 128.46241760]
[-205.00256348 119.79363251]
[-204.18513489 103.41487122]
[-189.47055054 96.17520142]
[-175.99589539 105.52217865]
[-161.01454163 106.26986694]
[-146.03318787 107.01755524]
[-131.05183411 107.76524353]
[-116.06232452 108.32611847]
[-101.06699371 108.70007324]
[-88.15077972 101.28247833]
[-74.54779053 109.36141968]
[-69.00883484 94.67732239]
[-58.77397537 82.74458313]
[-45.05812454 75.00769806]
[-29.49900818 72.41143036]
[-13.96161556 75.28547668]
[-0.31463939 83.30273438]
[9.79425716 95.51638794]
[15.13737202 110.47174835]
[30.13737297 110.47174835]
[45.13737106 110.47174835]
[60.13737106 110.47174835]
[75.13737488 110.47174835]
[74.66684723 95.34635162]
[82.24880219 83.06134796]
[94.71846771 77.29080200]
[107.61340332 79.25877380]
[117.25521851 67.76810455]
[126.89703369 56.27743530]
[136.53884888 44.78676987]
[146.18066406 33.29610443]
[146.79583740 28.74173164]
[148.69389343 25.03977776]
[151.42706299 22.49905968]
[154.49235535 21.24216652]
[157.40036011 21.20413589]
[168.13836670 10.73058414]
[178.87637329 0.25703222]
[189.61437988 -10.21652031]
[200.35237122 -20.69007301]
[211.09037781 -31.16362381]
[221.82838440 -41.63717651]
[222.78930664 -54.57134247]
[232.04096985 -63.07715225]
[244.20559692 -62.95694351]
[255.20137024 -73.15953827]
[259.51544189 -88.98107147]
[275.44104004 -92.89352417]
[286.59527588 -80.87209320]
[281.50366211 -65.28340149]
[265.40396118 -62.16375732]
[254.40818787 -51.96116638]
[250.20811462 -34.97055435]
[232.30194092 -30.89917374]
[221.56393433 -20.42562103]
[210.82592773 -9.95206928]
[200.08792114 0.52148271]
[189.34992981 10.99503517]
[178.61192322 21.46858788]
[167.87391663 31.94213867]
[157.67132568 42.93791580]
[148.02951050 54.42858505]
[138.38769531 65.91925049]
[128.74588013 77.40991974]
[119.10407257 88.90058136]
[123.31279755 99.65985870]
[121.56593323 111.70186615]
[113.72332764 121.79667664]
[101.35276794 126.94397736]
[115.99890137 132.24760437]
[122.40667725 146.04597473]
[117.26022339 159.97615051]
[123.76847839 173.49067688]
[130.27673340 187.00520325]
[136.78498840 200.51974487]
[143.29324341 214.03427124]
[158.23797607 211.76573181]
[173.18717957 214.00463867]
[186.81158447 220.55195618]
[197.89970398 230.82546997]
[205.46559143 243.91166687]
[208.83650208 258.64694214]
[207.71270752 273.72103882]
[202.19410706 287.79357910]
[192.77142334 299.61325073]
[180.28253174 308.12905884]
[165.83790588 312.58374023]
[150.72196960 312.58126831]
[136.27882385 308.12176514]
[123.79274750 299.60186768]
[114.37397003 287.77908325]
[108.86002350 273.70471191]
[107.74120331 258.63024902]
[111.11698151 243.89607239]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 107]
[2 106]
[3 105]
[4 104]
[5 103]
[8 100]
[9 54]
[10 53]
[11 52]
[12 51]
[13 50]
[22 42]
[24 40]
[25 39]
[27 38]
[28 37]
[29 36]
[30 35]
[58 96]
[59 95]
[60 94]
[61 93]
[62 92]
[67 91]
[68 90]
[69 89]
[70 88]
[71 87]
[72 86]
[73 85]
[76 83]
[77 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
