%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 04:50:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGGGCUUAUCUGGCAUCCACCAAAUGCCUUAGGAAGUUGGAGACCUUGGGAGCUCCAGGGAAAAAAAACCCAAAGACCUGUUGACCUUUUAUGAGAGUUGGUUUGUAAUUUGGGACCUGUCGUGGCUCCUUGAUUUGAAGUAAACAUUUUUGGCAGAAGGGC\
) } def
/len { sequence length } bind def

/coor [
[154.68481445 174.43395996]
[144.17904663 163.72746277]
[133.67329407 153.02096558]
[123.16752625 142.31448364]
[112.66176605 131.60798645]
[102.15600586 120.90149689]
[87.18017578 120.05031586]
[75.52894592 129.49748230]
[63.87771225 138.94464111]
[52.22647858 148.39178467]
[47.50442886 156.26370239]
[40.26419449 157.90496826]
[28.43626976 167.12994385]
[16.60834503 176.35491943]
[4.95711231 185.80207825]
[-6.51325417 195.46803284]
[-17.98361969 205.13398743]
[-29.45398712 214.79994202]
[-40.92435455 224.46589661]
[-40.71054077 240.10202026]
[-50.63745499 252.18467712]
[-66.01791382 255.00878906]
[-79.58972168 247.24092102]
[-84.94470215 232.54879761]
[-79.55438995 217.86961365]
[-65.96392059 210.13441467]
[-50.59030914 212.99552917]
[-39.11994171 203.32957458]
[-27.64957619 193.66362000]
[-16.17920876 183.99766541]
[-4.70884323 174.33171082]
[-3.41711903 169.69213867]
[0.82918292 165.83195496]
[7.38336754 164.52699280]
[19.21129227 155.30201721]
[31.03921700 146.07704163]
[42.77931976 136.74055481]
[54.43055344 127.29340363]
[66.08178711 117.84624481]
[77.73301697 108.39908600]
[77.09506226 100.92626953]
[64.78977203 109.50413513]
[51.20843506 103.13645172]
[49.93224716 88.19084167]
[62.23738098 79.61274719]
[75.81915283 85.98062897]
[75.18119812 78.50781250]
[62.09722519 71.17230225]
[49.01325226 63.83679199]
[35.92928314 56.50128174]
[22.84531212 49.16577148]
[9.76134014 41.83026505]
[-6.00893068 44.77612305]
[-18.04997063 34.17457199]
[-17.12492371 18.15821075]
[-3.94340706 9.01342106]
[11.38284779 13.75530434]
[17.09685135 28.74629211]
[30.18082047 36.08180237]
[43.26479340 43.41731262]
[56.34876251 50.75282288]
[69.43273163 58.08833313]
[82.51670837 65.42384338]
[89.65399933 63.11971664]
[81.68856812 50.40941238]
[72.59460449 38.48046112]
[77.07881927 24.16641808]
[91.35343170 19.55822372]
[103.36080933 28.54837799]
[102.95848846 43.54287338]
[103.92859650 58.51147079]
[111.06589508 56.20734406]
[117.39086914 42.60607147]
[123.71585083 29.00479698]
[130.04083252 15.40352249]
[136.36579895 1.80224788]
[142.69078064 -11.79902649]
[148.36540222 -25.68422318]
[153.37696838 -39.82226562]
[158.38851929 -53.96030807]
[163.40008545 -68.09835052]
[162.42881775 -72.43357849]
[162.87008667 -76.43988037]
[164.44052124 -79.70703125]
[166.75120544 -81.96195984]
[169.36257935 -83.09151459]
[175.42903137 -96.81004333]
[181.49548340 -110.52857971]
[187.43183899 -124.30390167]
[193.23759460 -138.13478088]
[199.04335022 -151.96565247]
[196.44412231 -168.15751648]
[209.33605957 -178.29310608]
[224.45703125 -171.94580078]
[226.25189209 -155.64517212]
[212.87423706 -146.15989685]
[207.06848145 -132.32902527]
[201.26272583 -118.49814606]
[201.57469177 -111.08077240]
[195.21400452 -104.46212769]
[189.14755249 -90.74359131]
[183.08110046 -77.02505493]
[177.53813171 -63.08678818]
[172.52656555 -48.94874573]
[167.51499939 -34.81070328]
[162.50344849 -20.67266083]
[177.02639771 -24.42548943]
[189.13108826 -15.56680012]
[189.94621277 -0.58896375]
[178.87437439 9.53103828]
[164.02992249 7.37644148]
[156.29205322 -5.47404957]
[149.96707153 8.12722492]
[143.64210510 21.72849846]
[137.31712341 35.32977295]
[130.99214172 48.93104935]
[124.66716766 62.53232193]
[130.33319092 95.27845001]
[112.86249542 110.39573669]
[123.36825562 121.10222626]
[133.87402344 131.80871582]
[144.37977600 142.51521301]
[154.88554382 153.22169495]
[165.39131165 163.92819214]
[176.31123352 163.40415955]
[185.51496887 168.88558960]
[190.06466675 178.34007263]
[188.66531372 188.51641846]
[198.75840759 199.61280823]
[206.88558960 203.88055420]
[208.93505859 211.01599121]
[218.81634521 222.30137634]
[228.69764709 233.58677673]
[238.57893372 244.87216187]
[254.20156860 240.40090942]
[270.15487671 243.16972351]
[283.26278687 252.57601929]
[290.93814087 266.70095825]
[291.69320679 282.70065308]
[285.42776489 297.37875366]
[295.52087402 308.47512817]
[305.61395264 319.57150269]
[315.70703125 330.66787720]
[325.80014038 341.76425171]
[341.57812500 346.23492432]
[345.33251953 362.19854736]
[333.20111084 373.23306274]
[317.66363525 367.98715210]
[314.70373535 351.85733032]
[304.61065674 340.76095581]
[294.51757812 329.66458130]
[284.42449951 318.56820679]
[274.33139038 307.47183228]
[261.22247314 312.08273315]
[247.30276489 311.33850098]
[234.68188477 305.31884766]
[225.28523254 294.90536499]
[220.56027222 281.65277100]
[221.25369263 267.55676270]
[227.29353333 254.75344849]
[217.41224670 243.46806335]
[207.53096008 232.18266296]
[197.64965820 220.89727783]
[187.66203308 209.70588684]
[177.56893921 198.60951233]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 124]
[2 123]
[3 122]
[4 121]
[5 120]
[6 119]
[7 40]
[8 39]
[9 38]
[10 37]
[12 36]
[13 35]
[14 34]
[15 31]
[16 30]
[17 29]
[18 28]
[19 27]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[52 58]
[72 117]
[73 116]
[74 115]
[75 114]
[76 113]
[77 112]
[78 106]
[79 105]
[80 104]
[81 103]
[86 102]
[87 101]
[88 100]
[89 98]
[90 97]
[91 96]
[128 165]
[129 164]
[131 163]
[132 162]
[133 161]
[134 160]
[140 153]
[141 152]
[142 151]
[143 150]
[144 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
