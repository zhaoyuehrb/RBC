%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 10:21:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCUCGGCUCCCCCCGCCCACCCCGCCGCCUCUAAUUUAUAGCUUGGUAAUAAAUUUCUUUUCUGCAUU\
) } def
/len { sequence length } bind def

/coor [
[40.40318680 197.20816040]
[29.26163101 203.37670898]
[16.88544655 206.31582642]
[4.18969202 205.81637573]
[-7.88915157 201.92317200]
[-18.46225548 194.93110657]
[-26.75384712 185.36271667]
[-40.44801712 191.48397827]
[-54.14218521 197.60523987]
[-58.25602722 212.69198608]
[-71.13439178 221.56227112]
[-86.69650269 220.02778625]
[-97.59441376 208.81307983]
[-98.68245697 193.21339417]
[-89.44689941 180.59442139]
[-74.24848175 176.91445923]
[-60.26343918 183.91105652]
[-46.56927109 177.78981018]
[-32.87510300 171.66854858]
[-34.18047714 154.21510315]
[-28.94907379 137.47932434]
[-17.89539909 123.82650757]
[-2.55858088 115.19538116]
[14.91192627 112.82281494]
[32.05756378 117.06664276]
[46.45666885 127.35188293]
[58.85914612 118.91514587]
[54.88410950 103.86125183]
[56.24329376 88.35082245]
[62.77599335 74.21772003]
[73.70982361 63.13294983]
[87.75203705 56.40710831]
[103.24237823 54.83541489]
[118.34935760 58.60369873]
[131.28681946 67.26641846]
[143.30397034 58.28933334]
[155.32112122 49.31224823]
[167.33827209 40.33516312]
[179.35543823 31.35807800]
[191.37258911 22.38099289]
[203.38973999 13.40390873]
[209.81509399 -1.05379987]
[224.64202881 -2.47203207]
[236.65917969 -11.44911671]
[245.73002625 -25.77238464]
[262.00460815 -21.02110100]
[261.94424438 -4.06726074]
[245.63626099 0.56803566]
[233.61911011 9.54512024]
[228.05329895 23.36072731]
[212.36682129 25.42106056]
[200.34967041 34.39814758]
[188.33251953 43.37522888]
[176.31536865 52.35231400]
[164.29821777 61.32939911]
[152.28105164 70.30648804]
[140.26390076 79.28356934]
[144.71545410 92.86693573]
[144.71096802 107.16112518]
[140.25090027 120.74169922]
[131.77969360 132.25529480]
[120.14154816 140.55453491]
[106.49623108 144.81240845]
[92.20354462 144.60456848]
[78.68780518 139.95175171]
[67.29588318 131.31762695]
[54.89340973 139.75436401]
[58.64521408 152.00186157]
[58.96215820 164.79240417]
[55.82882309 177.18197632]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 19]
[8 18]
[9 17]
[26 67]
[27 66]
[35 57]
[36 56]
[37 55]
[38 54]
[39 53]
[40 52]
[41 51]
[43 49]
[44 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
