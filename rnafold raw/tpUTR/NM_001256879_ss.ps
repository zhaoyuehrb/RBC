%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 22:19:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAAAAAAGUGGUUUUGACCAGAGAGGCCCAGAUGGAGGCUGUUCAUUCCCUGCAGUGUCGGCAUUGUAAAUAAAGCCUGAGCACUUGCUGAUGCGAGCCUUGA\
) } def
/len { sequence length } bind def

/coor [
[2.81587958 189.59953308]
[-0.12478489 198.44311523]
[-5.27013254 206.19053650]
[-12.25188637 212.30557251]
[-20.57510185 216.36814880]
[-29.65324402 218.10325623]
[-38.84952164 217.39949036]
[-47.52155304 214.31614685]
[-55.06623459 209.07841492]
[-60.96169281 202.06091309]
[-68.05364227 208.07669067]
[-75.51781464 207.22358704]
[-89.72771454 212.02763367]
[-103.93760681 216.83169556]
[-118.14749908 221.63574219]
[-132.35739136 226.43978882]
[-146.56729126 231.24383545]
[-152.08401489 245.87597656]
[-165.74069214 253.49366760]
[-181.08905029 250.50006104]
[-190.88208008 238.30865479]
[-190.49580383 222.67584229]
[-180.11260986 210.98297119]
[-164.63511658 208.75105286]
[-151.37133789 217.03393555]
[-137.16143799 212.22988892]
[-122.95155334 207.42584229]
[-108.74165344 202.62179565]
[-94.53176117 197.81774902]
[-80.32186127 193.01370239]
[-66.18471527 187.99960327]
[-62.64135742 166.92459106]
[-47.33899689 151.83001709]
[-25.97327614 148.53747559]
[-6.61649799 158.43733215]
[0.01528034 145.10058594]
[15.81500244 144.27636719]
[28.49894333 136.26901245]
[41.18288422 128.26167297]
[53.86682129 120.25431824]
[66.55076599 112.24696350]
[79.23470306 104.23961639]
[80.56748199 91.54132080]
[88.95312500 81.91303253]
[101.34812927 78.84924316]
[113.25384521 83.46193695]
[126.16950226 75.83396912]
[139.08515930 68.20600128]
[152.00080872 60.57803726]
[153.15388489 50.93057251]
[158.62042236 43.06708527]
[167.01429749 38.75275421]
[176.31192017 38.88087845]
[184.33966064 43.29092407]
[197.88163757 36.83994675]
[211.42359924 30.38896751]
[224.86848450 23.73802948]
[238.21334839 16.88858986]
[251.55819702 10.03915215]
[264.90304565 3.18971348]
[274.86276245 -14.21233368]
[294.05300903 -12.82418251]
[306.96865845 -20.45214844]
[319.88430786 -28.08011627]
[327.83218384 -41.76008606]
[342.72558594 -41.57014847]
[355.64123535 -49.19811249]
[368.55688477 -56.82608032]
[376.14013672 -71.36659241]
[392.53356934 -71.79914856]
[400.87304688 -57.67876434]
[392.57962036 -43.53128815]
[376.18487549 -43.91042709]
[363.26922607 -36.28245926]
[350.35354614 -28.65449333]
[343.32946777 -15.52012539]
[327.51226807 -15.16446209]
[314.59661865 -7.53649521]
[301.68096924 0.09147178]
[299.97515869 10.36567497]
[292.67984009 18.10600853]
[282.09243774 20.51515388]
[271.75250244 16.53457069]
[258.40765381 23.38400841]
[245.06277466 30.23344612]
[231.71792603 37.08288574]
[227.13085938 43.03271484]
[217.87457275 43.93093491]
[204.33261108 50.38191223]
[190.79064941 56.83288956]
[180.90562439 74.84683990]
[159.62876892 73.49369049]
[146.71311951 81.12165833]
[133.79747009 88.74962616]
[120.88181305 96.37759399]
[117.19457245 112.39025879]
[103.17153168 120.95503235]
[87.24205017 116.92355347]
[74.55811310 124.93090820]
[61.87417221 132.93826294]
[49.19023514 140.94560242]
[36.50629425 148.95295715]
[23.82235336 156.96031189]
[16.28333473 170.86979675]
[1.39085257 171.12127686]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 31]
[12 30]
[13 29]
[14 28]
[15 27]
[16 26]
[17 25]
[35 105]
[37 103]
[38 102]
[39 101]
[40 100]
[41 99]
[42 98]
[46 95]
[47 94]
[48 93]
[49 92]
[54 90]
[55 89]
[56 88]
[57 86]
[58 85]
[59 84]
[60 83]
[62 79]
[63 78]
[64 77]
[66 75]
[67 74]
[68 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
