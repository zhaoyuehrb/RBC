%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 11:52:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCACCACCCAGCUUCACCCCUCACCCCCAGCGGCUCACCAUGGGGAUGGCAGCAAUAAAAUAUUUUCCCACAA\
) } def
/len { sequence length } bind def

/coor [
[107.82117462 351.25155640]
[96.63005066 341.19802856]
[87.47698975 329.25915527]
[80.67375183 315.84161377]
[76.45204926 301.40237427]
[74.95566559 286.43322754]
[76.23558044 271.44400024]
[80.24819183 256.94525146]
[86.85682678 243.43081665]
[95.83640289 231.36093140]
[106.88108826 221.14674377]
[119.61469269 213.13612366]
[114.09281921 199.18948364]
[108.57095337 185.24284363]
[101.25842285 184.33889771]
[94.61482239 181.03210449]
[89.41134644 175.66705322]
[86.26496887 168.82937622]
[85.56542206 161.28199768]
[87.42725372 153.87994385]
[91.67282867 147.47354126]
[97.84864044 142.81071472]
[95.96864319 127.92899323]
[94.08864594 113.04727173]
[85.78900146 101.79526520]
[91.02963257 88.83272552]
[89.14963531 73.95100403]
[87.26963806 59.06928635]
[85.38964081 44.18756485]
[83.50964355 29.30584526]
[73.69757843 20.64113426]
[72.58213806 8.00487328]
[80.22175598 -1.61018062]
[78.96659088 -16.55757332]
[69.16815948 -29.70758438]
[75.90480042 -44.65916443]
[92.24642944 -46.03141022]
[101.38218689 -32.41267014]
[93.91398621 -17.81274033]
[95.16915131 -2.86534834]
[105.97660828 10.79854107]
[98.39136505 27.42584801]
[100.27136230 42.30756760]
[102.15135956 57.18928909]
[104.03135681 72.07100677]
[105.91135406 86.95272827]
[114.21099854 98.20473480]
[108.97036743 111.16727448]
[110.85036469 126.04899597]
[112.73036194 140.93070984]
[129.66137695 157.68707275]
[122.51760101 179.72096252]
[128.03947449 193.66761780]
[133.56134033 207.61425781]
[148.32737732 204.73699951]
[163.37069702 204.62222290]
[178.17892456 207.27383423]
[192.24769592 212.60151672]
[205.09783936 220.42382812]
[216.29167175 230.47433472]
[225.44795227 242.41072083]
[232.25480652 255.82643127]
[236.48040771 270.26455688]
[237.98081970 285.23330688]
[236.70494080 300.22283936]
[232.69624329 314.72268677]
[226.09124756 328.23892212]
[217.11492920 340.31121826]
[206.07299805 350.52838135]
[193.34155273 358.54241943]
[179.35421753 364.08038330]
[164.58740234 366.95367432]
[149.54405212 367.06439209]
[134.73654175 364.40881348]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 54]
[13 53]
[14 52]
[22 50]
[23 49]
[24 48]
[26 46]
[27 45]
[28 44]
[29 43]
[30 42]
[33 40]
[34 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
