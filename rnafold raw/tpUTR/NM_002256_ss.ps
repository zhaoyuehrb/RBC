%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 02:39:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGCAGGUGCGGGGCAGUGAACUUCAGACCCCAAAGGAGUCAGAGCAUGCGGGGCGGGGGCGGGGGGCGGGGACGUAGGGCUAAGGGAGGGGGCGCUGGAGCUUCCAACCCGAGGCAAUAAAAGAAAUGUUGCGUAACUCA\
) } def
/len { sequence length } bind def

/coor [
[58.25495529 156.43205261]
[43.46762848 153.91513062]
[36.02061462 140.89430237]
[41.35000992 126.87162018]
[26.70556831 130.11820984]
[12.06112862 133.36480713]
[6.15232658 145.51890564]
[-5.51935959 151.93557739]
[-18.55987740 150.45610046]
[-28.20628357 141.84742737]
[-42.91806412 144.77378845]
[-57.62984085 147.70014954]
[-72.34162140 150.62649536]
[-80.18128204 160.93087769]
[-92.54972076 163.03271484]
[-102.68202972 156.33857727]
[-117.45413971 158.94329834]
[-126.52631378 171.60559082]
[-141.54444885 174.03671265]
[-153.56008911 165.30975342]
[-168.33219910 167.91447449]
[-183.10432434 170.51919556]
[-191.08331299 175.12312317]
[-198.22683716 173.01594543]
[-213.05226135 175.29779053]
[-227.87768555 177.57963562]
[-242.70310974 179.86149597]
[-248.19490051 194.20498657]
[-260.13278198 203.86845398]
[-275.30551147 206.25247192]
[-289.63174438 200.71574402]
[-299.25772095 188.74763489]
[-301.59417725 173.56750488]
[-296.01257324 159.25871277]
[-284.01434326 149.67027283]
[-268.82696533 147.38142395]
[-254.53575134 153.00784302]
[-244.98497009 165.03607178]
[-230.15954590 162.75422668]
[-215.33412170 160.47236633]
[-200.50869751 158.19052124]
[-185.70904541 155.74708557]
[-170.93693542 153.14236450]
[-156.16481018 150.53764343]
[-147.85859680 138.22738647]
[-132.91467285 135.37539673]
[-120.05886841 144.17118835]
[-105.28675079 141.56646729]
[-92.51876831 129.57427979]
[-75.26797485 135.91471863]
[-60.55619812 132.98835754]
[-45.84441757 130.06201172]
[-31.13263893 127.13565826]
[-22.43221474 112.78321838]
[-5.72271347 109.05494690]
[8.81453419 118.72037506]
[23.45897484 115.47377777]
[38.10341263 112.22718048]
[52.54909134 108.18708038]
[66.75304413 103.36549377]
[80.95699310 98.54389954]
[87.45951080 85.59540558]
[101.18007660 80.93789673]
[114.22141266 87.25215149]
[124.80213928 75.48954773]
[139.34104919 78.72518158]
[149.92176819 66.96257782]
[164.46067810 70.19821167]
[178.66464233 65.37662506]
[192.86859131 60.55503082]
[207.07254028 55.73344040]
[208.01042175 39.71812820]
[214.99150085 25.31664658]
[226.92553711 14.71060181]
[241.97450256 9.49410534]
[257.83569336 10.43422413]
[272.09393311 17.35832596]
[282.58947754 29.18487167]
[296.68484497 24.05456924]
[303.42041016 10.00928497]
[317.78823853 5.00722361]
[331.13674927 11.51510525]
[345.23214722 6.38480330]
[359.32751465 1.25450134]
[366.06307983 -12.79078293]
[380.43090820 -17.79284477]
[393.77941895 -11.28496265]
[407.87481689 -16.41526413]
[421.97018433 -21.54556656]
[433.42886353 -35.91533279]
[450.56558228 -32.28675842]
[464.54568481 -37.72332764]
[478.52581787 -43.15990067]
[492.50592041 -48.59646988]
[506.48605347 -54.03303909]
[520.46618652 -59.46961212]
[526.60107422 -74.03458405]
[541.26940918 -79.91806793]
[555.76873779 -73.62950134]
[561.49676514 -58.89978027]
[555.05529785 -44.46778488]
[540.26580811 -38.89576340]
[525.90270996 -45.48949432]
[511.92260742 -40.05292130]
[497.94250488 -34.61635208]
[483.96237183 -29.17978096]
[469.98226929 -23.74321175]
[456.00213623 -18.30664062]
[450.81265259 -7.32737207]
[439.14834595 -2.70784497]
[427.10049438 -7.45017767]
[413.00509644 -2.31987524]
[398.90972900 2.81042695]
[392.86734009 16.37601852]
[378.64569092 21.77966881]
[364.45782471 15.34989071]
[350.36242676 20.48019218]
[336.26705933 25.61049461]
[330.22467041 39.17608643]
[316.00302124 44.57973862]
[301.81515503 38.14995956]
[287.71975708 43.28026199]
[287.63589478 57.35203552]
[282.73178101 70.57379913]
[273.58026123 81.34227753]
[261.27050781 88.34424591]
[247.27844238 90.71660614]
[233.28974915 88.15276337]
[220.99685669 80.94209290]
[211.89413452 69.93739319]
[197.69018555 74.75897980]
[183.48623657 79.58057404]
[169.28227234 84.40216827]
[159.71751404 95.81990051]
[144.16264343 92.92913818]
[134.59786987 104.34686279]
[119.04300690 101.45610046]
[112.54048920 114.40459442]
[98.81992340 119.06210327]
[85.77858734 112.74784851]
[71.57463837 117.56944275]
[57.37068176 122.39103699]
[69.20080566 131.61318970]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 58]
[5 57]
[6 56]
[10 53]
[11 52]
[12 51]
[13 50]
[16 48]
[17 47]
[20 44]
[21 43]
[22 42]
[24 41]
[25 40]
[26 39]
[27 38]
[59 142]
[60 141]
[61 140]
[64 137]
[66 135]
[68 133]
[69 132]
[70 131]
[71 130]
[78 122]
[79 121]
[82 118]
[83 117]
[84 116]
[87 113]
[88 112]
[89 111]
[91 108]
[92 107]
[93 106]
[94 105]
[95 104]
[96 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
