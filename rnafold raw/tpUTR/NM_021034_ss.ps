%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 15:58:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAGGAGGCAUCACUGAGGCCAGGAGCUCUGCCCAUGACCUGUAUCCCACGUACUCCAACUUCCAUUCCUCGCCCUGCCCCCGGAGCCGAGUCCUGUAUCAGCCCUUUAUCCUCACACGCUUUUCUACAAUGGCAUUCAAUAAAGUGCACGUGUUUCUGGUGCU\
) } def
/len { sequence length } bind def

/coor [
[439.70721436 414.24035645]
[433.04016113 403.23266602]
[431.03952026 390.47241211]
[434.03939819 377.86132812]
[422.21145630 368.63635254]
[410.38354492 359.41137695]
[398.55560303 350.18640137]
[385.92514038 358.17117310]
[371.29748535 361.35882568]
[356.43405151 359.34579468]
[343.13128662 352.35592651]
[333.00378418 341.21572876]
[327.28811646 327.25683594]
[326.69201660 312.15661621]
[331.30667114 297.73681641]
[319.47875977 288.51184082]
[307.65081787 279.28686523]
[295.82290649 270.06188965]
[283.35574341 273.41738892]
[271.05349731 268.89926147]
[263.50003052 257.95169067]
[263.64715576 244.45707703]
[251.99592590 235.00991821]
[240.34469604 225.56275940]
[228.69346619 216.11560059]
[217.04223633 206.66844177]
[209.83435059 204.89045715]
[205.26211548 196.93058777]
[193.79174805 187.26463318]
[182.32138062 177.59867859]
[167.60305786 175.31390381]
[162.03608704 160.50447083]
[150.56571960 150.83851624]
[139.00439453 141.28152466]
[127.35316467 131.83438110]
[116.72429657 139.65542603]
[103.89295959 143.93182373]
[90.03937531 144.05819702]
[76.50387573 139.82113647]
[64.65722656 131.43891907]
[55.76223755 119.55851746]
[50.84049225 105.20864105]
[50.55830383 89.71159363]
[36.15866089 85.51037598]
[21.75901604 81.30915070]
[7.35937214 77.10793304]
[-7.34268379 83.52892303]
[-21.46154594 75.91069794]
[-24.16642952 60.09731674]
[-13.38238144 48.21944427]
[2.61800027 49.38877106]
[11.56059265 62.70829010]
[25.96023750 66.90950775]
[40.35988235 71.11073303]
[54.75952530 75.31195068]
[60.11277008 70.05906677]
[49.49006653 59.46859360]
[38.86736298 48.87812042]
[28.24465752 38.28764343]
[17.62195396 27.69717026]
[6.99924946 17.10669518]
[-3.62345457 6.51622105]
[-16.50545120 -1.16845119]
[-13.73713875 -15.91078663]
[1.05508113 -18.39880180]
[8.49394512 -5.37399673]
[18.88149834 5.44722033]
[29.26905060 16.26843834]
[39.65660477 27.08965492]
[50.04415512 37.91087341]
[60.43170929 48.73209000]
[70.81925964 59.55330658]
[76.17250824 54.30042648]
[72.24453735 39.82385635]
[62.26148224 26.12075806]
[72.66547394 12.73444748]
[88.40875244 19.02614784]
[86.72110748 35.89588928]
[90.64907837 50.37245941]
[112.80335236 52.91469955]
[130.95191956 64.51242065]
[141.76855469 82.25074005]
[143.62312317 102.17926025]
[136.80032349 120.18314362]
[148.45155334 129.63029480]
[157.12945557 132.62344360]
[160.23167419 139.36814880]
[171.70204163 149.03410339]
[187.24079895 152.01025391]
[191.98733521 166.12831116]
[203.45770264 175.79426575]
[214.92807007 185.46022034]
[226.48939514 195.01721191]
[238.14062500 204.46437073]
[249.79185486 213.91152954]
[261.44308472 223.35868835]
[273.09432983 232.80583191]
[290.43438721 230.66024780]
[303.71401978 241.48908997]
[305.04788208 258.23397827]
[316.87579346 267.45895386]
[328.70373535 276.68392944]
[340.53164673 285.90890503]
[353.39331055 277.92117310]
[368.18399048 274.82162476]
[383.11465454 276.96542358]
[396.38595581 284.07473755]
[406.40530396 295.27450562]
[411.97775269 309.20010376]
[412.44869995 324.16363525]
[407.78057861 338.35848999]
[419.60852051 347.58346558]
[431.43643188 356.80844116]
[443.26437378 366.03341675]
[459.35287476 359.05682373]
[476.67395020 361.15200806]
[490.49365234 371.65609741]
[497.08071899 387.62033081]
[494.71365356 404.63757324]
[506.88217163 413.40835571]
[519.05072021 422.17913818]
[531.21923828 430.94992065]
[543.68438721 424.55038452]
[557.62451172 424.15744019]
[570.30926514 429.79077148]
[579.27893066 440.29550171]
[582.82110596 453.57818604]
[580.29766846 467.02410889]
[592.29803467 476.02359009]
[604.29846191 485.02307129]
[619.05780029 480.61090088]
[633.41729736 485.67630005]
[641.93988037 498.07913208]
[641.52984619 512.94415283]
[653.53021240 521.94366455]
[665.53063965 530.94317627]
[677.53100586 539.94262695]
[689.53137207 548.94213867]
[705.13934326 546.45855713]
[717.88269043 555.80639648]
[720.20111084 571.43975830]
[710.71905518 584.08355713]
[695.06207275 586.23657227]
[682.51922607 576.62133789]
[680.53192139 560.94250488]
[668.53149414 551.94305420]
[656.53112793 542.94354248]
[644.53076172 533.94403076]
[632.53039551 524.94458008]
[618.37512207 529.50158691]
[604.08166504 524.79394531]
[595.19720459 512.42785645]
[595.29895020 497.02346802]
[583.29858398 488.02398682]
[571.29821777 479.02447510]
[556.61956787 485.73233032]
[540.46685791 484.12576294]
[527.24517822 474.54806519]
[520.60821533 459.52926636]
[522.44848633 443.11843872]
[510.27993774 434.34765625]
[498.11138916 425.57687378]
[485.94287109 416.80609131]
[475.00085449 423.21749878]
[462.39828491 425.00582886]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 114]
[5 113]
[6 112]
[7 111]
[15 103]
[16 102]
[17 101]
[18 100]
[22 97]
[23 96]
[24 95]
[25 94]
[26 93]
[28 92]
[29 91]
[30 90]
[32 88]
[33 87]
[34 85]
[35 84]
[43 55]
[44 54]
[45 53]
[46 52]
[73 79]
[74 78]
[119 163]
[120 162]
[121 161]
[122 160]
[128 155]
[129 154]
[130 153]
[134 149]
[135 148]
[136 147]
[137 146]
[138 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
