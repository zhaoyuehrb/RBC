%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 22:19:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUUGACAUUUAAAUACCAGUUUUCCAAGUAAGGAGUUGAUGUAAGAGCCACCUUAAACGAUGUCAAAUACACAUUUUCUUUUUCUGUAGACUGGUAGAUUUAAUGUUUUUCAUUCAUUAAAAUAACUCAUUUUGAUGUACAA\
) } def
/len { sequence length } bind def

/coor [
[349.28158569 499.60281372]
[345.22262573 487.72280884]
[344.16064453 475.20239258]
[346.16424561 462.78649902]
[351.11941528 451.21517944]
[358.73611450 441.17950439]
[349.65850830 429.23809814]
[340.58087158 417.29672241]
[331.50326538 405.35531616]
[322.42565918 393.41390991]
[313.34805298 381.47253418]
[297.40811157 383.90771484]
[282.32049561 377.95761108]
[272.21762085 365.15066528]
[269.91741943 348.90695190]
[276.13796997 333.62506104]
[266.80377197 321.88311768]
[257.46957397 310.14120483]
[248.13540649 298.39926147]
[238.80120850 286.65734863]
[229.46702576 274.91540527]
[220.13284302 263.17346191]
[210.79866028 251.43153381]
[201.46446228 239.68960571]
[187.31347656 244.48905945]
[172.34622192 244.15679932]
[158.36958313 238.71362305]
[147.07746887 228.79850769]
[139.84547424 215.59364319]
[137.56341553 200.68348694]
[140.52577209 185.86471558]
[148.39395142 172.92959595]
[139.05976868 161.18766785]
[129.72557068 149.44573975]
[120.39138794 137.70379639]
[111.05720520 125.96186829]
[101.72301483 114.21994019]
[88.78728485 108.91349030]
[86.53504944 95.11425018]
[77.20086670 83.37231445]
[69.35040283 78.55570984]
[67.79496002 71.27338409]
[58.71734619 59.33198929]
[49.63973236 47.39059448]
[40.56212234 35.44919968]
[25.15870285 35.65149307]
[12.73494339 26.84788132]
[7.93409491 12.58548832]
[12.39865112 -1.59921229]
[-2.11246800 -7.90301943]
[-3.65507364 -22.71752739]
[-12.73268700 -34.65892410]
[-27.24380684 -40.96273041]
[-28.78641129 -55.77723694]
[-44.47789001 -57.66220856]
[-54.17472458 -70.14207458]
[-52.12395477 -85.81274414]
[-39.54227066 -95.37709045]
[-23.89415932 -93.16075897]
[-14.46336651 -80.47865295]
[-16.84501648 -64.85485077]
[-2.98318815 -59.40517044]
[-0.79129088 -43.73653412]
[8.28632259 -31.79513931]
[22.14814949 -26.34546089]
[24.34004784 -10.67682552]
[39.20211029 -11.18383980]
[51.66027832 -2.74238801]
[56.81929016 11.58374119]
[52.50351715 26.37158394]
[61.58113098 38.31298065]
[70.65874481 50.25437546]
[79.73635864 62.19577408]
[88.94279480 74.03813171]
[98.27698517 85.78005981]
[111.21271515 91.08650970]
[113.46495056 104.88574982]
[122.79913330 116.62768555]
[132.13331604 128.36961365]
[141.46751404 140.11154175]
[150.80169678 151.85346985]
[160.13587952 163.59541321]
[174.51228333 158.84730530]
[189.61738586 159.30346680]
[203.62866211 164.88952637]
[214.86221313 174.91337585]
[221.97506714 188.15077209]
[224.12573242 202.99493408]
[221.07377625 217.65148926]
[213.20640564 230.35542297]
[222.54058838 242.09735107]
[231.87477112 253.83927917]
[241.20895386 265.58120728]
[250.54315186 277.32315063]
[259.87731934 289.06509399]
[269.21151733 300.80700684]
[278.54571533 312.54895020]
[287.87988281 324.29086304]
[301.62979126 321.51074219]
[315.16760254 324.92550659]
[325.85189819 333.80987549]
[331.62356567 346.37707520]
[331.40252686 360.13821411]
[325.28942871 372.39489746]
[334.36706543 384.33630371]
[343.44467163 396.27770996]
[352.52227783 408.21908569]
[361.59988403 420.16049194]
[370.67752075 432.10189819]
[387.46719360 426.39114380]
[405.17532349 426.69909668]
[421.71234131 432.97354126]
[435.13220215 444.45907593]
[443.86148071 459.78814697]
[446.88378906 477.14376831]
[443.85809326 494.47494507]
[435.15719604 509.73901367]
[445.23434448 520.84985352]
[455.31149292 531.96075439]
[465.38864136 543.07159424]
[475.46578979 554.18243408]
[485.54293823 565.29327393]
[495.62008667 576.40417480]
[505.69723511 587.51501465]
[515.77435303 598.62585449]
[531.66381836 600.84063721]
[539.71484375 614.71728516]
[533.75134277 629.61077881]
[518.34808350 634.09613037]
[505.32104492 624.73260498]
[504.66351318 608.70300293]
[494.58636475 597.59216309]
[484.50921631 586.48132324]
[474.43206787 575.37042236]
[464.35491943 564.25958252]
[454.27777100 553.14874268]
[444.20062256 542.03790283]
[434.12350464 530.92700195]
[424.04635620 519.81616211]
[412.92678833 525.47430420]
[400.75711060 528.27362061]
[388.26062012 528.04217529]
[376.18145752 524.78833008]
[365.24014282 518.70068359]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 109]
[7 108]
[8 107]
[9 106]
[10 105]
[11 104]
[16 98]
[17 97]
[18 96]
[19 95]
[20 94]
[21 93]
[22 92]
[23 91]
[24 90]
[32 82]
[33 81]
[34 80]
[35 79]
[36 78]
[37 77]
[39 75]
[40 74]
[42 73]
[43 72]
[44 71]
[45 70]
[49 66]
[51 64]
[52 63]
[54 61]
[117 139]
[118 138]
[119 137]
[120 136]
[121 135]
[122 134]
[123 133]
[124 132]
[125 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
