%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:37:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUCGUGCCCUGCUGAGGGGCUGGCUGCCUUGAGUGGCCUGAUCGCCACAGCCCUUCUUGGAAGAAAGGCGUCCGUGUUUCAGGUUCCACGCGAGUCACCUCUUUCGUCUUAAUGUUCACCGUCCACAGCUUUGGAAUAAACCAUCCUGGGAAGUUGCUGCA\
) } def
/len { sequence length } bind def

/coor [
[122.46061707 138.86738586]
[117.10921478 141.50213623]
[111.45573425 143.40412903]
[105.59999084 144.53979492]
[99.64537048 144.88905334]
[93.69701385 144.44575500]
[87.85994720 143.21772766]
[82.23722076 141.22663879]
[74.08370209 153.81712341]
[65.93019104 166.40760803]
[57.77667618 178.99809265]
[49.62316513 191.58856201]
[51.55916977 207.51437378]
[40.21262741 218.85614014]
[24.28763390 216.91342163]
[16.00048065 203.17651367]
[21.70836449 188.18319702]
[37.03268433 183.43505859]
[45.18619537 170.84457397]
[53.33971024 158.25408936]
[61.49322128 145.66360474]
[69.64673615 133.07313538]
[55.27623367 103.86486816]
[64.42296600 72.62432861]
[54.23041153 61.61924744]
[46.06296539 57.42340851]
[43.95050812 50.30437851]
[33.97062302 39.10607910]
[19.01270866 33.95133972]
[16.32123375 19.30193138]
[6.34134865 8.10363197]
[-3.63853693 -3.09466600]
[-13.61842251 -14.29296398]
[-28.57633781 -19.44770241]
[-31.26781273 -34.09711456]
[-41.24769974 -45.29541016]
[-51.22758484 -56.49370956]
[-61.20746994 -67.69200897]
[-71.40002441 -78.69709015]
[-81.80151367 -89.50491333]
[-92.20300293 -100.31273651]
[-102.60449219 -111.12055969]
[-113.00597382 -121.92838287]
[-130.79608154 -126.59739685]
[-134.39250183 -143.75361633]
[-144.99909973 -154.36022949]
[-155.60569763 -164.96682739]
[-170.40609741 -161.10737610]
[-185.05442810 -165.14761353]
[-195.64329529 -175.90596008]
[-199.40031433 -190.42288208]
[-195.41342163 -204.77453613]
[-206.02001953 -215.38113403]
[-216.62661743 -225.98774719]
[-231.85591125 -230.27484131]
[-235.38435364 -244.74548340]
[-245.99095154 -255.35208130]
[-256.59756470 -265.95867920]
[-267.20416260 -276.56527710]
[-283.17593384 -280.28472900]
[-287.68112183 -296.05291748]
[-276.08517456 -307.64886475]
[-260.31701660 -303.14367676]
[-256.59756470 -287.17187500]
[-245.99095154 -276.56527710]
[-235.38435364 -265.95867920]
[-224.77775574 -255.35208130]
[-210.30711365 -251.82363892]
[-206.02001953 -236.59434509]
[-195.41342163 -225.98774719]
[-184.80680847 -215.38113403]
[-170.45515442 -219.36804199]
[-155.93823242 -215.61102295]
[-145.17988586 -205.02214050]
[-141.13964844 -190.37382507]
[-144.99909973 -175.57342529]
[-134.39250183 -164.96682739]
[-123.78589630 -154.36022949]
[-111.66443634 -154.03770447]
[-102.73937225 -145.24717712]
[-102.19815063 -132.32986450]
[-91.79666138 -121.52204895]
[-81.39517975 -110.71422577]
[-70.99369049 -99.90640259]
[-60.59220123 -89.09857941]
[-55.87514114 -88.11584473]
[-51.74166489 -84.13048553]
[-50.00917053 -77.67189026]
[-40.02928543 -66.47359467]
[-30.04940033 -55.27529907]
[-20.06951523 -44.07699966]
[-5.82542706 -39.72323608]
[-2.42012405 -24.27285004]
[7.55976152 -13.07455158]
[17.53964615 -1.87625325]
[27.51953316 9.32204533]
[41.76361847 13.67580605]
[45.16892242 29.12619400]
[55.14880753 40.32449341]
[65.23548889 51.42668915]
[75.42804718 62.43177032]
[82.77314758 58.54655457]
[90.70848846 56.08166122]
[98.96218872 55.12154770]
[107.25144196 55.69910812]
[115.29224396 57.79455185]
[122.80908203 61.33608627]
[129.54441833 66.20236206]
[135.26747131 72.22665405]
[139.78213501 79.20254517]
[142.93376160 86.89102936]
[144.61433411 95.02865601]
[144.76628113 103.33662415]
[143.38439941 111.53026581]
[140.51602173 119.32884216]
[152.78497314 127.95861816]
[165.05390930 136.58839417]
[183.40754700 137.78492737]
[190.20457458 153.94261169]
[202.63656616 162.33580017]
[218.40350342 163.64495850]
[224.62249756 177.17912292]
[240.38943481 178.48828125]
[246.60842896 192.02244568]
[259.04040527 200.41561890]
[271.47241211 208.80880737]
[280.38104248 211.03329468]
[284.06002808 217.48373413]
[296.32897949 226.11351013]
[308.59790039 234.74330139]
[321.54135132 230.91780090]
[334.13616943 235.19735718]
[341.84033203 245.80130005]
[342.01300049 258.71243286]
[354.11441040 267.57562256]
[366.21578979 276.43884277]
[381.79464722 273.77893066]
[394.64291382 282.98205566]
[397.13793945 298.58816528]
[387.79949951 311.33840942]
[372.16790771 313.66830444]
[359.51708984 304.19558716]
[357.35256958 288.54022217]
[345.25119019 279.67703247]
[333.14981079 270.81381226]
[316.67730713 274.09838867]
[302.63671875 264.27832031]
[299.96813965 247.01223755]
[287.69918823 238.38246155]
[275.43023682 229.75267029]
[263.07922363 221.24079895]
[250.64723206 212.84761047]
[238.21524048 204.45443726]
[223.33750916 203.74560547]
[216.22930908 189.61111450]
[201.35157776 188.90229797]
[194.24337769 174.76779175]
[181.81138611 166.37460327]
[169.85023499 168.36579895]
[159.41477966 161.43531799]
[156.42413330 148.85734558]
[144.15518188 140.22755432]
[131.88624573 131.59777832]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 22]
[9 21]
[10 20]
[11 19]
[12 18]
[24 101]
[25 100]
[27 99]
[28 98]
[30 96]
[31 95]
[32 94]
[33 93]
[35 91]
[36 90]
[37 89]
[38 88]
[39 85]
[40 84]
[41 83]
[42 82]
[43 81]
[45 78]
[46 77]
[47 76]
[52 71]
[53 70]
[54 69]
[56 67]
[57 66]
[58 65]
[59 64]
[115 163]
[116 162]
[117 161]
[119 158]
[120 157]
[122 155]
[124 153]
[125 152]
[126 151]
[128 150]
[129 149]
[130 148]
[134 145]
[135 144]
[136 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
