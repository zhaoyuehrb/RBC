%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 16:46:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGACACACUCUGCACCCCCCCACCCCACGACCUUGGCCCGAGCCCCUCCGUGAGGAACACAAUCUCAAUCGUUGCUGAAUCCUUUCAUAUCCUAAUAGGAAUUAACCUCCAAAUAAAACAUGACUGGUACGUGUGCUGAUUGCCUGCCUGUCUGCCGUAGCCA\
) } def
/len { sequence length } bind def

/coor [
[-39.45410156 171.13836670]
[-43.63083649 185.54512024]
[-47.80757523 199.95188904]
[-51.98431015 214.35865784]
[-44.14411545 228.08114624]
[-48.38407516 243.30607605]
[-62.18869781 251.00074768]
[-77.36794281 246.60005188]
[-84.91623688 232.71485901]
[-80.35530853 217.58297729]
[-66.39107513 210.18191528]
[-62.21434021 195.77514648]
[-58.03760147 181.36839294]
[-53.86086655 166.96162415]
[-58.28066254 160.90229797]
[-68.85306549 171.54298401]
[-79.42546844 182.18368530]
[-84.49768829 196.30007935]
[-97.63469696 203.54017639]
[-112.27824402 200.28956604]
[-121.11799622 188.17103577]
[-119.74095917 173.23437500]
[-108.83459473 162.93626404]
[-93.84304810 162.41787720]
[-80.48165131 155.60076904]
[-67.12025452 148.78364563]
[-71.54004669 142.72433472]
[-86.53408051 142.30111694]
[-101.53142548 142.01895142]
[-116.53076172 141.87786865]
[-131.53009033 141.73678589]
[-146.52943420 141.59568787]
[-153.01638794 154.01480103]
[-164.17375183 162.37995911]
[-177.78340149 165.09960938]
[-191.17034912 161.69747925]
[-201.72843933 152.89488220]
[-207.42773438 140.45864868]
[-222.42176819 140.03543091]
[-237.41578674 139.61222839]
[-251.57849121 147.87962341]
[-265.68350220 139.51420593]
[-265.22082520 123.12158966]
[-250.66639709 115.56509399]
[-236.99258423 124.61819458]
[-221.99855042 125.04140472]
[-207.00451660 125.46462250]
[-198.88844299 111.51452637]
[-184.76954651 103.50408173]
[-168.44392395 103.69557190]
[-154.35592651 112.13129425]
[-146.38835144 126.59635162]
[-131.38900757 126.73744202]
[-116.38967133 126.87853241]
[-101.39033508 127.01961517]
[-94.64325714 123.92481232]
[-86.11086273 127.30709076]
[-71.11683655 127.73030090]
[-70.85286713 118.23321533]
[-68.92188263 109.00591278]
[-65.41077423 100.33631134]
[-60.45529556 92.49015045]
[-54.23501205 85.70288849]
[-46.96686172 80.17265320]
[-38.89767456 76.05446625]
[-30.29582596 73.45603943]
[-21.44232941 72.43501282]
[-12.62166309 72.99794769]
[-4.11263514 75.10091400]
[3.82043076 78.65174103]
[10.93590355 83.51368713]
[17.02219391 89.51062012]
[21.90401840 96.43320465]
[25.44739914 104.04622650]
[40.03459167 100.55140686]
[54.62178802 97.05658722]
[69.20898438 93.56176758]
[83.79617310 90.06694794]
[93.30525208 78.46620178]
[93.86948395 63.47681427]
[94.43370819 48.48743057]
[94.99793243 33.49804306]
[86.86410522 19.25821114]
[95.36182404 5.23249149]
[111.74936676 5.84934521]
[119.16863251 20.47420502]
[109.98731232 34.06227112]
[109.42308807 49.05165482]
[108.85886383 64.04103851]
[108.29463959 79.03042603]
[115.47805786 81.18645477]
[129.84490967 85.49851227]
[137.02832031 87.65454102]
[144.81159973 74.83187866]
[152.59487915 62.00922012]
[160.37814331 49.18655777]
[163.42816162 32.50921631]
[180.29806519 30.82328033]
[186.58816528 46.56719971]
[173.20080566 56.96983337]
[165.41752625 69.79249573]
[157.63426208 82.61515808]
[149.85098267 95.43781281]
[151.66691589 102.71465302]
[164.64489746 95.19321442]
[177.62287903 87.67176819]
[190.60084534 80.15032196]
[199.38365173 67.99045563]
[212.61183167 60.91832352]
[227.60176086 60.36869431]
[241.31236267 66.45306396]
[250.96209717 77.93707275]
[254.59330750 92.49092102]
[251.46928406 107.16199493]
[242.22384644 118.97393036]
[228.73262024 125.53038025]
[213.73265076 125.50121307]
[200.26940918 118.89427948]
[185.27920532 118.35229492]
[170.28900146 117.81031799]
[155.29879761 117.26833344]
[157.11473083 124.54517365]
[170.01002502 132.20748901]
[179.02841187 133.91345215]
[183.07389832 140.13717651]
[195.82278442 148.04072571]
[208.57167053 155.94425964]
[224.37760925 156.63946533]
[231.11804199 169.92163086]
[243.86692810 177.82516479]
[256.61581421 185.72871399]
[269.36468506 193.63224792]
[285.17062378 194.32746887]
[291.91104126 207.60961914]
[304.65994263 215.51316833]
[317.40881348 223.41670227]
[332.20626831 218.36006165]
[346.77340698 224.04624939]
[354.23205566 237.79042053]
[351.06051636 253.10299683]
[338.75622559 262.75387573]
[323.12896729 262.18615723]
[311.55740356 251.66793823]
[309.50527954 236.16558838]
[296.75640869 228.26205444]
[284.00750732 220.35850525]
[269.11346436 220.22860718]
[261.46115112 206.38113403]
[248.71226501 198.47760010]
[235.96337891 190.57405090]
[223.21449280 182.67051697]
[208.32046509 182.54061890]
[200.66813660 168.69314575]
[187.91925049 160.78961182]
[175.17036438 152.88606262]
[162.34770203 145.10279846]
[149.45240784 137.44047546]
[109.49736786 144.86854553]
[85.61650085 125.98303986]
[87.29099274 104.65414429]
[72.70380402 108.14896393]
[58.11660767 111.64378357]
[43.52941132 115.13860321]
[28.94221878 118.63342285]
[26.09073830 142.84951782]
[11.13704395 163.16438293]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[4 11]
[27 58]
[28 57]
[29 55]
[30 54]
[31 53]
[32 52]
[38 47]
[39 46]
[40 45]
[74 164]
[75 163]
[76 162]
[77 161]
[78 160]
[79 90]
[80 89]
[81 88]
[82 87]
[93 103]
[94 102]
[95 101]
[96 100]
[122 157]
[123 156]
[125 155]
[126 154]
[127 153]
[129 151]
[130 150]
[131 149]
[132 148]
[134 146]
[135 145]
[136 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
