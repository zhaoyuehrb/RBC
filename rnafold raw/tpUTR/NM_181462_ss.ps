%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:28:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGUGGCUCCAGCCACCCCGGGACAUUGCUAAGAUGGGAGGGCUGUUCUUAAAUCACUCGUUCUUGAAGCUGCCACCUGGA\
) } def
/len { sequence length } bind def

/coor [
[5.93622398 266.18542480]
[-2.81118059 269.80026245]
[-12.08670521 268.84347534]
[-22.06659126 280.04177856]
[-32.04647827 291.24008179]
[-42.02636337 302.43838501]
[-52.00624847 313.63668823]
[-54.80219650 329.79571533]
[-70.28557587 335.19915771]
[-82.52841187 324.28839111]
[-78.93632507 308.28747559]
[-63.20454407 303.65679932]
[-53.22465897 292.45849609]
[-43.24477386 281.26019287]
[-33.26488876 270.06188965]
[-23.28500366 258.86361694]
[-21.32826996 238.46900940]
[-1.39250648 231.11326599]
[7.23727322 218.84432983]
[15.86705303 206.57537842]
[24.49683380 194.30644226]
[33.12661362 182.03750610]
[25.76751328 169.06410217]
[24.76686287 154.12060547]
[30.37658119 140.16738892]
[41.53370285 129.99198914]
[56.06137466 125.65220642]
[71.09345245 128.06013489]
[79.72322845 115.79119110]
[88.35301208 103.52224731]
[96.50652313 90.93177032]
[104.17180634 78.03822327]
[111.83708191 65.14467621]
[119.50236511 52.25113297]
[121.27365875 43.02217102]
[127.71627808 39.01855087]
[128.72317505 23.22941780]
[142.13572693 16.75233078]
[150.28924561 4.16184950]
[158.44276428 -8.42863178]
[149.28497314 -20.50798988]
[144.81382751 -34.99193192]
[145.56922913 -50.13145828]
[151.45994568 -64.09838867]
[161.77465820 -75.20615387]
[175.26782227 -82.11344147]
[190.31004333 -83.98615265]
[205.08493042 -80.59815216]
[217.80833435 -72.35855865]
[226.94384766 -60.26234818]
[231.38829041 -45.77018738]
[230.60499573 -30.63208199]
[224.68855286 -16.67602921]
[214.35337830 -5.58729076]
[200.84751892 1.29511440]
[185.80186462 3.14010215]
[171.03323364 -0.27511859]
[162.87973022 12.31536293]
[154.72621155 24.90584373]
[154.30250549 39.79442215]
[140.30676270 47.17206192]
[132.39590454 59.91641617]
[124.73062897 72.80995941]
[117.06534576 85.70350647]
[109.40007019 98.59704590]
[109.53997040 104.12124634]
[106.43488312 109.26450348]
[100.62194824 112.15203094]
[91.99217224 124.42096710]
[83.36238861 136.68991089]
[90.70967865 150.02328491]
[91.53592682 165.16276550]
[85.73075104 179.10264587]
[74.49500275 189.09860229]
[60.09284210 193.20799255]
[45.39555359 190.66728210]
[36.76577377 202.93621826]
[28.13599396 215.20516968]
[19.50621414 227.47410583]
[10.87643433 239.74304199]
[13.84474087 249.17221069]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 16]
[4 15]
[5 14]
[6 13]
[7 12]
[18 80]
[19 79]
[20 78]
[21 77]
[22 76]
[28 70]
[29 69]
[30 68]
[31 65]
[32 64]
[33 63]
[34 62]
[36 61]
[38 59]
[39 58]
[40 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
