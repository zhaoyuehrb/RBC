%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:48:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACACCUUAGUGUCUCGCUUCUACUACUACUACAGAAGAUGGGAAUAUUAGGAUCCUAUUGAAUGCCUUGGUG\
) } def
/len { sequence length } bind def

/coor [
[1.26238215 179.06971741]
[-7.65711546 191.12966919]
[-16.57661247 203.18963623]
[-25.49611092 215.24958801]
[-34.41560745 227.30953979]
[-35.72957230 243.65597534]
[-50.65703201 250.44587708]
[-63.84189987 240.69439697]
[-61.72071457 224.43301392]
[-46.47556686 218.39004517]
[-37.55606842 206.33009338]
[-28.63656998 194.27014160]
[-19.71707153 182.21017456]
[-10.79757500 170.15022278]
[-13.89066505 164.53314209]
[-15.41372204 158.27630615]
[-15.24695969 151.81175232]
[-13.38778877 145.58972168]
[-9.95197964 140.04725647]
[-5.16655874 135.57754517]
[0.64515567 132.50198364]
[7.08537769 131.04716492]
[13.70907402 131.32818604]
[20.05471230 133.33966064]
[25.67642593 136.95515442]
[38.44936371 129.09054565]
[51.22230148 121.22593689]
[63.99523544 113.36132812]
[76.76817322 105.49671936]
[77.94933319 90.85124207]
[87.48308563 79.67124176]
[101.75813293 76.19158173]
[115.36721802 81.73034668]
[128.14015198 73.86573792]
[129.44723511 58.51654053]
[139.42514038 47.01459885]
[154.08911133 43.63348389]
[167.76843262 49.46563339]
[180.54136658 41.60102463]
[193.31431580 33.73641586]
[206.08724976 25.87180710]
[218.86018372 18.00719833]
[231.63311768 10.14258862]
[244.40605164 2.27797890]
[244.60093689 -13.14815331]
[253.12391663 -26.00747681]
[267.25537109 -32.19662857]
[282.48599243 -29.74066925]
[293.95574951 -19.42329025]
[298.00466919 -4.53672791]
[293.34078979 10.16876888]
[281.45230103 20.00073051]
[266.13278198 21.82181358]
[252.27066040 15.05091572]
[239.49772644 22.91552544]
[226.72479248 30.78013420]
[213.95185852 38.64474487]
[201.17892456 46.50935364]
[188.40597534 54.37396240]
[175.63304138 62.23857117]
[174.68223572 77.07884979]
[165.06138611 88.65050507]
[150.29890442 92.38181305]
[136.00476074 86.63867188]
[123.23182678 94.50328064]
[122.05066681 109.14875793]
[112.51691437 120.32875824]
[98.24186707 123.80841827]
[84.63278198 118.26965332]
[71.85984802 126.13426208]
[59.08691025 133.99887085]
[46.31397247 141.86347961]
[33.54103470 149.72808838]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[4 11]
[5 10]
[25 73]
[26 72]
[27 71]
[28 70]
[29 69]
[33 65]
[34 64]
[38 60]
[39 59]
[40 58]
[41 57]
[42 56]
[43 55]
[44 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
