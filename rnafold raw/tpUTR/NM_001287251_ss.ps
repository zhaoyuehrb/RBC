%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 03:30:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGAAAAAAAGAAAAAAAUCAAAAAACAAAACAAAACCCACGCUCCAAAAACAAACUAACGAAGAAU\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.55316925 91.11545563]
[62.79785538 88.35768890]
[48.35993958 84.25022125]
[34.36260986 78.82810211]
[20.92528725 72.13758850]
[8.16261673 64.23576355]
[-3.81651378 55.19004059]
[-14.90989971 45.07759857]
[-25.02289391 33.98471832]
[-34.06921387 22.00604248]
[-41.97167969 9.24376488]
[-48.66286469 -4.19322348]
[-54.08568573 -18.19028282]
[-58.19387436 -32.62799072]
[-60.95238113 -47.38317108]
[-62.33766556 -62.32992935]
[-62.33791733 -77.34074402]
[-60.95312881 -92.28755188]
[-58.19511414 -107.04282379]
[-54.08740616 -121.48066711]
[-48.66505432 -135.47790527]
[-41.97431183 -148.91511536]
[-34.07227325 -161.67765808]
[-25.02635193 -173.65663147]
[-14.91372776 -184.74986267]
[-3.82067943 -194.86267090]
[8.15814972 -203.90878296]
[20.92055702 -211.81103516]
[34.35765839 -218.50199890]
[48.35480499 -223.92459106]
[62.79258347 -228.03253174]
[77.54780579 -230.79080200]
[92.49459076 -232.17582703]
[107.50540924 -232.17582703]
[122.45219421 -230.79080200]
[137.20741272 -228.03253174]
[151.64518738 -223.92459106]
[165.64234924 -218.50199890]
[179.07943726 -211.81103516]
[191.84185791 -203.90878296]
[203.82067871 -194.86267090]
[214.91372681 -184.74986267]
[225.02635193 -173.65663147]
[234.07228088 -161.67765808]
[241.97431946 -148.91511536]
[248.66505432 -135.47790527]
[254.08740234 -121.48066711]
[258.19512939 -107.04282379]
[260.95312500 -92.28755188]
[262.33792114 -77.34074402]
[262.33767700 -62.32992935]
[260.95239258 -47.38317108]
[258.19387817 -32.62799072]
[254.08569336 -18.19028282]
[248.66287231 -4.19322348]
[241.97167969 9.24376488]
[234.06921387 22.00604248]
[225.02288818 33.98471832]
[214.90989685 45.07759857]
[203.81651306 55.19004059]
[191.83738708 64.23576355]
[179.07470703 72.13758850]
[165.63739014 78.82810211]
[151.64006042 84.25022125]
[137.20214844 88.35768890]
[122.44683075 91.11545563]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
