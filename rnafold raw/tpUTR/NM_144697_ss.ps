%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 01:08:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAGGGCAUACAGCUGUCCACUGUGACUUCUAAUUUGUGUAAAUAUUUAUGUAUAUAUGUAUUUUUACUAUUAAUGUGUGCAUUUGUGUUGAGGGAAGAUAAAUCCUUUCUGAUUAAAGAAAUUUUUUUAUACCUAA\
) } def
/len { sequence length } bind def

/coor [
[135.40792847 134.58561707]
[123.21316528 125.85132599]
[111.01840973 117.11702728]
[93.68338776 122.32189941]
[76.52200317 111.26362610]
[68.49033356 123.93218231]
[60.45865250 136.60073853]
[52.42697906 149.26928711]
[44.39530182 161.93783569]
[48.09400940 177.30322266]
[39.77327347 190.73977661]
[24.36964226 194.27581787]
[11.02181339 185.81349182]
[7.64881849 170.37333679]
[16.25179482 157.11572266]
[31.72675133 153.90615845]
[39.75842667 141.23760986]
[47.79010391 128.56906128]
[55.82178116 115.90050507]
[63.85345459 103.23195648]
[50.73136902 110.49906158]
[40.63455963 121.59204865]
[28.00163651 129.67965698]
[13.70086002 134.20599365]
[-1.28487659 134.85998535]
[-15.92560196 131.59667969]
[-29.21505928 124.64036560]
[-40.23986435 114.46914673]
[-48.24227524 101.78208923]
[-52.67229462 87.45118713]
[-53.22544479 72.46138763]
[-49.86370468 57.84294891]
[-42.81813049 44.60059738]
[-32.57295990 33.64448166]
[-19.83234978 25.72761154]
[-5.47195816 21.39411736]
[9.52122211 20.94183922]
[24.11670876 24.40186119]
[37.31135559 31.53637886]
[48.19829178 41.85503387]
[56.02925491 54.64862442]
[60.26564026 69.03536224]
[68.89558411 81.30418396]
[67.20408630 66.39986420]
[65.51258850 51.49554062]
[63.82108688 36.59121704]
[62.12958908 21.68689537]
[50.04908371 11.85332489]
[48.54598236 -3.28587365]
[57.99523544 -14.74218941]
[56.30373764 -29.64651108]
[54.61223984 -44.55083466]
[52.92074203 -59.45515823]
[51.22924423 -74.35948181]
[49.53774643 -89.26380157]
[47.84624481 -104.16812134]
[46.15474701 -119.07244873]
[44.46324921 -133.97677612]
[42.77175140 -148.88108826]
[30.69124413 -158.71466064]
[29.18814278 -173.85386658]
[38.63739777 -185.31018066]
[36.94589996 -200.21450806]
[23.81067848 -208.69978333]
[19.25217438 -223.65818787]
[25.42277145 -238.02682495]
[39.40890503 -245.02125549]
[54.60675049 -241.33892822]
[63.84034729 -228.71852112]
[62.74987411 -213.11900330]
[51.85022354 -201.90600586]
[53.54172134 -187.00167847]
[65.31795502 -177.95425415]
[67.24568939 -162.86325073]
[57.67607498 -150.57258606]
[59.36757278 -135.66827393]
[61.05907059 -120.76394653]
[62.75056839 -105.85962677]
[64.44207001 -90.95529938]
[66.13356781 -76.05097961]
[67.82506561 -61.14665604]
[69.51656342 -46.24233246]
[71.20806122 -31.33801079]
[72.89955902 -16.43368721]
[84.67579651 -7.38626242]
[86.60353088 7.70474434]
[77.03391266 19.99539757]
[78.72541046 34.89971924]
[80.41690826 49.80404282]
[82.10840607 64.70836639]
[83.79990387 79.61268616]
[103.78419495 76.15274048]
[118.55599213 87.72029114]
[119.75270081 104.92227173]
[131.94746399 113.65657043]
[144.14221191 122.39086151]
[162.62432861 115.03828430]
[181.69477844 120.17017365]
[193.81524658 135.58195496]
[194.30017090 155.04072571]
[207.23368835 162.63838196]
[220.16719055 170.23602295]
[233.10069275 177.83367920]
[246.03421021 185.43133545]
[261.40039062 178.45886230]
[277.73916626 181.95385742]
[288.68890381 194.35411072]
[290.10614014 210.66976929]
[303.20803833 217.97320557]
[316.30996704 225.27662659]
[329.41186523 232.58004761]
[342.51379395 239.88346863]
[357.64575195 235.32292175]
[371.53076172 242.87156677]
[375.93109131 258.05093384]
[368.23605347 271.85534668]
[353.01101685 276.09490967]
[339.28872681 268.25436401]
[335.21035767 252.98538208]
[322.10845947 245.68194580]
[309.00653076 238.37852478]
[295.90463257 231.07510376]
[282.80273438 223.77168274]
[271.21752930 230.49987793]
[257.71218872 230.60443115]
[245.83482361 223.95036316]
[238.75912476 212.19239807]
[238.43655396 198.36483765]
[225.50305176 190.76719666]
[212.56953430 183.16954041]
[199.63603210 175.57188416]
[186.70251465 167.97422791]
[178.20964050 174.19557190]
[168.08120728 177.20564270]
[157.49221802 176.62825012]
[147.68017578 172.50491333]
[139.80055237 165.29310608]
[134.79067993 155.81558228]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 96]
[2 95]
[3 94]
[5 20]
[6 19]
[7 18]
[8 17]
[9 16]
[43 91]
[44 90]
[45 89]
[46 88]
[47 87]
[50 84]
[51 83]
[52 82]
[53 81]
[54 80]
[55 79]
[56 78]
[57 77]
[58 76]
[59 75]
[62 72]
[63 71]
[100 132]
[101 131]
[102 130]
[103 129]
[104 128]
[108 123]
[109 122]
[110 121]
[111 120]
[112 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
