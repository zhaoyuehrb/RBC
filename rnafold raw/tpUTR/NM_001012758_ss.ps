%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 08:58:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGUAAAAUCCCCUCCCUAGCCCAUCUCCAUGACACUCACAGAACAUUCACAACCUUUAUUAUGGGUGAGAGCUUCACUACAACUUUAGAAAUAA\
) } def
/len { sequence length } bind def

/coor [
[-7.98872423 189.12391663]
[-22.28429794 193.66667175]
[-36.57987213 198.20942688]
[-50.87544250 202.75216675]
[-65.17102051 207.29492188]
[-63.68872452 222.27813721]
[-65.35440063 237.24206543]
[-70.09522247 251.53256226]
[-77.70395660 264.52490234]
[-87.84796906 275.65112305]
[-100.08380890 284.42480469]
[-113.87658691 290.46246338]
[-128.62332153 293.50009155]
[-143.67938232 293.40493774]
[-158.38655090 290.18115234]
[-172.10189819 283.96963501]
[-184.22586060 275.04199219]
[-194.22843933 263.78842163]
[-201.67233276 250.70095825]
[-206.23214722 236.35168457]
[-207.70855713 221.36788940]
[-206.03698730 206.40461731]
[-201.29054260 192.11599731]
[-193.67669678 179.12664795]
[-183.52830505 168.00442505]
[-171.28901672 159.23553467]
[-157.49386597 153.20332336]
[-142.74592590 150.17147827]
[-127.68991852 150.27256775]
[-112.98402405 153.50213623]
[-99.27111053 159.71903992]
[-87.15065765 168.65145874]
[-77.15251923 179.90895081]
[-69.71376801 192.99935913]
[-55.41819382 188.45660400]
[-41.12262344 183.91384888]
[-26.82704926 179.37109375]
[-12.53147507 174.82835388]
[-10.93640232 150.79026794]
[1.33717299 130.00239563]
[21.69848633 116.94097900]
[45.80970764 114.44194031]
[68.51007080 123.08528900]
[78.67869568 112.05809021]
[88.84732056 101.03089905]
[98.83604431 89.84048462]
[102.00296021 74.33947754]
[116.17829895 69.76683044]
[125.98450470 58.41613770]
[135.79072571 47.06544495]
[145.59692383 35.71475220]
[155.40313721 24.36405945]
[157.09281921 17.64957809]
[161.36457825 13.54159832]
[166.23033142 12.62270069]
[176.75070190 1.93056691]
[174.06654358 -13.35259151]
[180.90846252 -27.27982140]
[194.64561462 -34.49581909]
[209.99575806 -32.22588348]
[221.05647278 -21.34285355]
[223.57467651 -6.03147602]
[216.58206177 7.82071209]
[202.76745605 14.88726234]
[187.44284058 12.45094109]
[176.92245483 23.14307594]
[166.75382996 34.17027283]
[156.94761658 45.52096176]
[147.14141846 56.87165451]
[137.33520508 68.22235107]
[127.52899170 79.57303619]
[125.06348419 94.26216888]
[110.18673706 99.64669800]
[107.65181732 107.47434235]
[99.87451172 111.19952393]
[89.70588684 122.22671509]
[79.53726196 133.25392151]
[84.28894043 140.20964050]
[87.86570740 147.83184814]
[90.17675781 155.92390442]
[91.16387939 164.27726746]
[90.80300903 172.67687988]
[89.10472107 180.90675354]
[86.11400604 188.75540161]
[81.90901947 196.02140808]
[76.59907532 202.51849365]
[70.32179260 208.08038330]
[63.23952103 212.56494141]
[55.53516388 215.85794067]
[47.40742874 217.87586975]
[39.06571579 218.56808472]
[30.72473335 217.91809082]
[22.59894562 215.94392395]
[14.89708138 212.69764709]
[7.81676149 208.26397705]
[1.53943110 202.75808716]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[4 35]
[5 34]
[43 77]
[44 76]
[45 75]
[46 73]
[48 71]
[49 70]
[50 69]
[51 68]
[52 67]
[55 66]
[56 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
