%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 03:48:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAAAUAUGUUUAAGAAGAUUAGUUACCAUUGAAAUUGGUUCUGUCAUAAAACAGCAUGAGUCUGGUUUUAAAUUAUCUUUGUAUUAUGUGUCACAUGGUUAUUUUUUAAAUGAGGAUUCACUGACUUGUUUUUAUAUUGAAAAAAGUUCCACGUAUUGUAGAAAACGUAAAUAAACUAAUAUAGACUAUUCA\
) } def
/len { sequence length } bind def

/coor [
[61.42552567 434.49725342]
[50.49281311 423.08447266]
[50.91579056 407.28582764]
[62.44351196 396.47439575]
[62.68640518 381.47637939]
[62.92930222 366.47833252]
[63.17219925 351.48031616]
[60.13271713 344.73181152]
[63.54242325 336.24188232]
[64.02815247 321.24975586]
[64.51387787 306.25762939]
[64.99961090 291.26550293]
[65.48533630 276.27337646]
[58.97151184 271.78720093]
[54.71813583 265.00775146]
[53.48438644 257.00500488]
[55.54576874 249.07728577]
[60.63699722 242.54069519]
[67.98368073 238.51066589]
[69.43882751 223.58142090]
[70.89397430 208.65217590]
[72.34912109 193.72291565]
[73.80426788 178.79367065]
[75.25941467 163.86441040]
[76.71456146 148.93516541]
[64.19214630 140.67750549]
[51.04286575 147.89529419]
[37.89358521 155.11308289]
[24.74430847 162.33087158]
[21.87468338 177.70289612]
[9.76270866 187.59400940]
[-5.87271166 187.33392334]
[-17.64900970 177.04544067]
[-20.00577927 161.58647156]
[-11.83022404 148.25627136]
[3.01740813 143.34895325]
[17.52651978 149.18159485]
[30.67579651 141.96380615]
[43.82507706 134.74601746]
[56.97435379 127.52822113]
[54.35177231 117.45862579]
[53.93919754 107.50000000]
[38.93919754 107.50000000]
[23.93919563 107.50000000]
[8.93919659 107.50000000]
[-2.05749416 118.85113525]
[-17.86089897 119.01823425]
[-29.09514046 107.90214539]
[-29.09514046 92.09785461]
[-17.86089897 80.98176575]
[-2.05749416 81.14886475]
[8.93919659 92.50000000]
[23.93919563 92.50000000]
[38.93919754 92.50000000]
[53.93919754 92.50000000]
[58.96596146 77.77264404]
[68.55546570 65.51683044]
[81.64140320 57.09534073]
[78.03353119 42.53569794]
[74.42565918 27.97605324]
[70.81777954 13.41640949]
[67.20990753 -1.14323485]
[63.60203171 -15.70287895]
[59.99415970 -30.26252365]
[45.76939011 -36.17540359]
[37.84647369 -49.17850876]
[39.08481979 -64.17619324]
[48.80065918 -75.43409729]
[45.19278336 -89.99374390]
[41.58491135 -104.55339050]
[37.97703552 -119.11302948]
[34.36916351 -133.67268372]
[30.76128769 -148.23231506]
[19.58565712 -148.99121094]
[8.99873447 -152.60221863]
[-0.28547710 -158.81333923]
[-7.64302111 -167.19747925]
[-12.58192158 -177.18183899]
[-14.77507210 -188.08708191]
[-14.08189487 -199.17344666]
[-10.55731964 -209.69107056]
[-4.44752264 -218.93055725]
[3.82724738 -226.27096558]
[13.70157051 -231.22145081]
[11.28310680 -246.02520752]
[8.86464310 -260.82894897]
[6.44617891 -275.63272095]
[4.02771521 -290.43646240]
[1.60925126 -305.24020386]
[-0.80921257 -320.04397583]
[-9.33020401 -334.70101929]
[2.39519525 -346.94647217]
[17.40801430 -339.06918335]
[13.99453831 -322.46243286]
[16.41300201 -307.65866089]
[18.83146477 -292.85491943]
[21.24992943 -278.05117798]
[23.66839409 -263.24743652]
[26.08685684 -248.44367981]
[28.50532150 -233.63992310]
[46.99039459 -229.19830322]
[61.72505569 -217.10766602]
[69.73120880 -199.75634766]
[69.36657715 -180.60142517]
[60.66139603 -163.47991943]
[45.32093048 -151.84019470]
[48.92880630 -137.28054810]
[52.53668213 -122.72090912]
[56.14455414 -108.16126251]
[59.75242996 -93.60161591]
[63.36030579 -79.04197693]
[77.20860291 -73.62325287]
[85.30650330 -60.93908691]
[84.37181854 -45.74106979]
[74.55380249 -33.87039948]
[78.16167450 -19.31075287]
[81.76955414 -4.75110912]
[85.37742615 9.80853558]
[88.98529816 24.36817932]
[92.59317780 38.92782211]
[96.20104980 53.48746872]
[114.60478210 55.67677689]
[130.70504761 64.85675049]
[141.96250916 79.57952118]
[156.32975769 75.26885223]
[170.69702148 70.95818329]
[185.06428528 66.64752197]
[199.43154907 62.33685303]
[210.42605591 50.96007156]
[224.83998108 54.71345901]
[239.20724487 50.40279007]
[253.57450867 46.09212494]
[267.94177246 41.78145981]
[275.21252441 27.74893761]
[290.30126953 23.04734612]
[304.25613403 30.46605492]
[308.79794312 45.60367584]
[301.23211670 59.47932816]
[286.04733276 63.86083221]
[272.25244141 56.14871979]
[257.88516235 60.45938492]
[243.51791382 64.77005005]
[229.15065002 69.08071899]
[219.18377686 80.14916992]
[203.74220276 76.70411682]
[189.37495422 81.01477814]
[175.00769043 85.32544708]
[160.64042664 89.63611603]
[146.27316284 93.94677734]
[146.65670776 100.99936676]
[145.97152710 108.02906799]
[144.23332214 114.87484741]
[157.49775696 121.87876129]
[170.76217651 128.88267517]
[184.02661133 135.88659668]
[199.84280396 135.48822021]
[207.48471069 148.27299500]
[220.74914551 155.27691650]
[237.10722351 154.11705017]
[246.06530762 167.85330200]
[238.40809631 182.35499573]
[222.01266479 182.70402527]
[213.74523926 168.54133606]
[200.48080444 161.53742981]
[185.61337280 162.43676758]
[177.02270508 149.15103149]
[163.75827026 142.14710999]
[150.49383545 135.14320374]
[137.22940063 128.13928223]
[132.04180908 134.93319702]
[125.60829163 140.76100159]
[118.11067200 145.39347839]
[109.77301025 148.63592529]
[100.85498047 150.33602905]
[91.64381409 150.39030457]
[90.18866730 165.31956482]
[88.73352051 180.24880981]
[87.27837372 195.17807007]
[85.82322693 210.10731506]
[84.36808014 225.03657532]
[82.91292572 239.96582031]
[93.67641449 259.61209106]
[80.47747040 276.75909424]
[79.99173737 291.75122070]
[79.50601196 306.74334717]
[79.02028656 321.73550415]
[78.53455353 336.72763062]
[78.17023468 351.72320557]
[77.92733765 366.72122192]
[77.68444061 381.71926880]
[77.44154358 396.71728516]
[88.61312103 407.89636230]
[88.52429199 423.70040894]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 191]
[5 190]
[6 189]
[7 188]
[9 187]
[10 186]
[11 185]
[12 184]
[13 183]
[19 181]
[20 180]
[21 179]
[22 178]
[23 177]
[24 176]
[25 175]
[26 40]
[27 39]
[28 38]
[29 37]
[42 55]
[43 54]
[44 53]
[45 52]
[58 121]
[59 120]
[60 119]
[61 118]
[62 117]
[63 116]
[64 115]
[68 111]
[69 110]
[70 109]
[71 108]
[72 107]
[73 106]
[84 100]
[85 99]
[86 98]
[87 97]
[88 96]
[89 95]
[90 94]
[124 149]
[125 148]
[126 147]
[127 146]
[128 145]
[130 143]
[131 142]
[132 141]
[133 140]
[152 169]
[153 168]
[154 167]
[155 166]
[157 164]
[158 163]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
