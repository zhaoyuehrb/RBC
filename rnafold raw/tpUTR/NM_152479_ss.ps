%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 07:20:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCAAUCCAGGGGGACCUCUCUAUCCCUCGCCCUCCCACCUCACCAUGUAACUUCCCCCGACUCAUGUGUUUGUUGGUAAAACACUUGUCACUGGUGAUCAUAA\
) } def
/len { sequence length } bind def

/coor [
[-43.23342133 194.86026001]
[-55.91736221 202.86761475]
[-68.60130310 210.87496948]
[-54.25661469 215.26016235]
[-45.87950897 227.70298767]
[-47.21315384 242.64358521]
[-57.66163254 253.40599060]
[-72.55622101 255.18119812]
[-85.24150848 247.17599487]
[-90.04930115 232.96736145]
[-84.83052063 218.90325928]
[-98.89181519 224.12628174]
[-112.95310974 229.34930420]
[-127.01440430 234.57232666]
[-141.07569885 239.79534912]
[-155.13699341 245.01838684]
[-159.18589783 259.99789429]
[-171.28736877 269.71044922]
[-186.78816223 270.42138672]
[-199.72787476 261.85733032]
[-205.13095093 247.31130981]
[-200.91978455 232.37660217]
[-188.71365356 222.79588318]
[-173.20606995 222.25314331]
[-160.36001587 230.95709229]
[-146.29872131 225.73405457]
[-132.23742676 220.51103210]
[-118.17613220 215.28800964]
[-104.11483765 210.06498718]
[-90.05354309 204.84196472]
[-76.60865021 198.19102478]
[-63.92471313 190.18367004]
[-51.24077225 182.17631531]
[-54.67470551 168.35939026]
[-53.64854431 154.13754272]
[-48.25032806 140.91679382]
[-39.00097656 130.00833130]
[-26.80406952 122.49850464]
[-12.85757732 119.14063263]
[1.46379757 120.27947235]
[14.74412537 125.81584167]
[25.66623688 135.21513367]
[38.58189011 127.58716583]
[51.49754333 119.95919800]
[64.41320038 112.33123016]
[77.32884979 104.70326996]
[90.24450684 97.07530212]
[95.12691498 90.48547363]
[103.65785980 89.41918945]
[116.79388428 82.17730713]
[102.19884491 78.71539307]
[91.15725708 68.56240082]
[86.48583984 54.30834961]
[89.37627411 39.58947372]
[99.09120941 28.16055870]
[113.15235138 22.93713379]
[127.97270203 25.25169754]
[139.77157593 34.51380157]
[145.53906250 48.36067963]
[143.80389404 63.25997925]
[135.00738525 75.41195679]
[149.68572998 72.32228088]
[164.36407471 69.23259735]
[168.88597107 58.03076935]
[178.20768738 50.53893661]
[189.88156128 48.57284927]
[200.91525269 52.51678085]
[208.53872681 61.25524902]
[223.37432861 59.04055023]
[238.20993042 56.82585144]
[253.04553223 54.61115265]
[267.88113403 52.39645386]
[282.71673584 50.18175507]
[290.73474121 36.75619888]
[305.52355957 31.67436600]
[320.10034180 37.33574295]
[327.58239746 51.06719589]
[324.43692017 66.38516235]
[312.14910889 76.05695343]
[296.52090454 75.51586151]
[284.93142700 65.01735687]
[270.09582520 67.23205566]
[255.26022339 69.44675446]
[240.42462158 71.66145325]
[225.58901978 73.87615204]
[210.75341797 76.09085083]
[200.92330933 91.39290619]
[182.75054932 94.86999512]
[167.45375061 83.91094971]
[152.77540588 87.00062561]
[138.09706116 90.09030151]
[124.03576660 95.31333160]
[110.89974213 102.55521393]
[97.87247467 109.99095154]
[84.95681763 117.61891937]
[72.04116821 125.24688721]
[59.12551117 132.87484741]
[46.20985794 140.50282288]
[33.29420471 148.13078308]
[36.29903412 163.70056152]
[33.82354355 179.33618164]
[26.18191338 193.16957092]
[14.30445480 203.55416870]
[-0.37560087 209.26107788]
[-16.09504509 209.62434387]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[2 32]
[3 31]
[11 30]
[12 29]
[13 28]
[14 27]
[15 26]
[16 25]
[42 99]
[43 98]
[44 97]
[45 96]
[46 95]
[47 94]
[49 93]
[50 92]
[61 91]
[62 90]
[63 89]
[68 86]
[69 85]
[70 84]
[71 83]
[72 82]
[73 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
