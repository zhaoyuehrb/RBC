%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 03:10:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUCUGCCUGUCCGGGCUGGGACAGAGACUCCCCAAGGACCCCAUUCUGCCUCCUUCUGGGGAAAUAAAUGAGUGUCUGUUUCAGCAGCUA\
) } def
/len { sequence length } bind def

/coor [
[100.55322266 305.54675293]
[88.07818604 313.87582397]
[73.25321960 316.16061401]
[58.84930038 311.97409058]
[47.55872345 302.09872437]
[41.49184418 288.38037109]
[41.78318024 273.38101196]
[31.54488182 284.34353638]
[30.65337181 300.36181641]
[17.49103165 309.53417969]
[2.15488148 304.82440186]
[-3.59049702 289.84539795]
[4.66225910 276.08779907]
[20.58234215 274.10525513]
[30.82063866 263.14270020]
[38.61439896 250.32641602]
[43.63759232 236.19250488]
[48.66078568 222.05859375]
[53.68397903 207.92468262]
[58.70717621 193.79077148]
[63.73036957 179.65684509]
[68.75356293 165.52293396]
[73.77675629 151.38902283]
[78.79994965 137.25511169]
[83.82314301 123.12120056]
[88.84633636 108.98728180]
[86.50310516 95.20320129]
[97.01974487 85.98952484]
[102.04293823 71.85560608]
[107.06613159 57.72169495]
[112.08933258 43.58778000]
[100.13623810 34.33678055]
[91.63927460 21.86103439]
[87.42018890 7.38942003]
[87.88006592 -7.65729284]
[92.96131134 -21.80591774]
[102.15444946 -33.67508698]
[114.54921722 -42.11012268]
[128.92468262 -46.29536057]
[143.86947632 -45.83300400]
[148.89268494 -59.96691895]
[153.91587830 -74.10083008]
[158.93907166 -88.23474884]
[163.96226501 -102.36865997]
[152.89849854 -112.83350372]
[147.05366516 -126.89614868]
[147.44044495 -142.12014771]
[153.99179077 -155.86785889]
[165.57266235 -165.75741577]
[180.17660522 -170.07537842]
[195.27339172 -168.07363892]
[208.24742126 -160.09901428]
[216.85084534 -147.53314209]
[219.59307861 -132.55316162]
[215.99902344 -117.75442505]
[206.69136047 -105.70090485]
[193.28269958 -98.48095703]
[178.09617615 -97.34546661]
[173.07298279 -83.21155548]
[168.04978943 -69.07763672]
[163.02659607 -54.94372559]
[158.00340271 -40.80981064]
[169.88803101 -31.73697853]
[178.39799500 -19.41826248]
[182.68951416 -5.05291986]
[182.33023071 9.95580673]
[177.34278870 24.13776398]
[168.20372009 36.09989548]
[155.79806519 44.66307449]
[141.33358765 48.97832108]
[126.22324371 48.61097336]
[121.20005035 62.74488831]
[116.17685699 76.87879944]
[111.15366364 91.01271820]
[113.49689484 104.79679871]
[102.98025513 114.01047516]
[97.95706177 128.14439392]
[92.93386841 142.27830505]
[87.91066742 156.41221619]
[82.88747406 170.54612732]
[77.86428070 184.68005371]
[72.84108734 198.81396484]
[67.81789398 212.94787598]
[62.79470062 227.08178711]
[57.77150726 241.21569824]
[52.74831009 255.34960938]
[65.92983246 248.19088745]
[80.90125275 247.26527405]
[94.86419678 252.74580383]
[105.20880890 263.60806274]
[110.00154114 277.82177734]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 15]
[8 14]
[16 86]
[17 85]
[18 84]
[19 83]
[20 82]
[21 81]
[22 80]
[23 79]
[24 78]
[25 77]
[26 76]
[28 74]
[29 73]
[30 72]
[31 71]
[40 62]
[41 61]
[42 60]
[43 59]
[44 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
