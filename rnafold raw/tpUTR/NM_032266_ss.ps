%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 08:41:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGAGGUCCGCCCCUAUUAUUCAUUGUCCUAAGUCUUCAUCGUGCUGCCCUUUCCAGGCUUCUUUCCUGCUCAGCCACUGCCUCCAAUUCCUGCGCCCCCAGCGUGGAAAGGCUUCCAUUUCUCUCUACCGGGGGGGAGGCGGGUGAGAAUGGGUCUGUAAUUUCUCUAAGAUGAAUAAAGGGGCAGUAAAUGA\
) } def
/len { sequence length } bind def

/coor [
[-37.29013443 682.78485107]
[-40.62794876 697.40875244]
[-43.96576309 712.03265381]
[-47.30357361 726.65655518]
[-40.01998901 740.95092773]
[-46.78544998 755.49768066]
[-62.41008377 759.13781738]
[-74.90800476 749.07891846]
[-74.69187164 733.03729248]
[-61.92749405 723.31878662]
[-58.58967972 708.69482422]
[-55.25186539 694.07092285]
[-51.91405106 679.44702148]
[-57.81254196 672.78173828]
[-60.00897598 664.01458740]
[-57.88605118 655.08776855]
[-51.79815292 648.03942871]
[-43.01924896 644.53857422]
[-38.98236465 630.09197998]
[-34.94548035 615.64538574]
[-30.90859604 601.19879150]
[-26.87171173 586.75225830]
[-30.89830780 572.41223145]
[-19.73249435 561.20355225]
[-15.69561005 546.75695801]
[-11.65872574 532.31036377]
[-7.62184048 517.86383057]
[-3.58495569 503.41723633]
[0.45192906 488.97064209]
[4.48881388 474.52407837]
[8.52569866 460.07748413]
[-1.65432382 450.96343994]
[-6.93724251 438.29055786]
[-6.23853445 424.51211548]
[0.36230919 412.32220459]
[11.62618256 404.12896729]
[25.38659477 401.57882690]
[29.65450859 387.19882202]
[33.92242050 372.81878662]
[38.19033432 358.43878174]
[42.45824814 344.05877686]
[46.72616196 329.67874146]
[44.07728958 319.42858887]
[51.09274673 309.81500244]
[53.24910355 294.97079468]
[55.40545654 280.12661743]
[48.03483200 264.20632935]
[59.54288483 249.83851624]
[61.46104050 234.96165466]
[63.37919617 220.08480835]
[65.29735565 205.20796204]
[59.25110626 191.59574890]
[68.68961334 178.89830017]
[70.60776520 164.02145386]
[72.52592468 149.14460754]
[74.32479095 134.25286865]
[76.00426483 119.34717560]
[69.71344757 105.73006439]
[57.27489853 97.34660339]
[44.83634949 88.96314240]
[32.39780045 80.57967377]
[12.25314331 80.10242462]
[4.50772572 62.39317703]
[-10.84260750 66.15386963]
[-24.31263161 57.88743210]
[-27.91082191 42.49819565]
[-19.50243187 29.11632347]
[-4.07601452 25.68103981]
[9.21621323 34.23043823]
[12.48820686 49.69231415]
[22.22048759 46.52898788]
[32.29707718 49.30955887]
[39.31919861 57.34703827]
[40.78126144 68.14112854]
[53.21981430 76.52458954]
[65.65836334 84.90805054]
[78.09691620 93.29151917]
[87.93723297 84.06123352]
[99.62252808 82.93384552]
[105.91334534 69.31673431]
[112.20415497 55.69962311]
[118.49496460 42.08251190]
[124.78577423 28.46540260]
[131.07658386 14.84829235]
[137.36740112 1.23118234]
[143.65820312 -12.38592815]
[130.48606873 -5.20995235]
[115.48841095 -5.47509527]
[102.57814789 -13.11217976]
[95.12357330 -26.12868309]
[95.06960297 -41.12858582]
[102.43030548 -54.19839859]
[115.28527832 -61.92819214]
[130.28063965 -62.30125427]
[143.50408936 -55.22025681]
[151.50559998 -42.53263855]
[152.19752502 -27.54836082]
[160.58099365 -39.98691177]
[168.96446228 -52.42546082]
[177.34793091 -64.86401367]
[185.73138428 -77.30256653]
[187.93696594 -86.17984772]
[194.35023499 -89.87181091]
[196.69781494 -98.71260834]
[203.16943359 -102.30130768]
[211.94726562 -114.46476746]
[220.72509766 -126.62821960]
[229.50292969 -138.79167175]
[238.28076172 -150.95513916]
[240.08230591 -166.67343140]
[253.80432129 -172.46615601]
[262.58215332 -184.62962341]
[271.35998535 -196.79307556]
[266.38989258 -211.49266052]
[271.04135132 -226.29615784]
[283.52575684 -235.51132202]
[299.04260254 -235.59474182]
[311.62536621 -226.51432800]
[316.43566895 -211.76168823]
[311.62393188 -197.00950623]
[299.04028320 -187.93031311]
[283.52343750 -188.01524353]
[274.74560547 -175.85179138]
[265.96777344 -163.68832397]
[264.79406738 -148.84004211]
[250.44421387 -142.17730713]
[241.66638184 -130.01383972]
[232.88854980 -117.85038757]
[224.11071777 -105.68693542]
[215.33288574 -93.52347565]
[206.65281677 -81.29006195]
[198.16993713 -68.91909790]
[189.78646851 -56.48054886]
[181.40301514 -44.04199982]
[173.01954651 -31.60344696]
[164.63607788 -19.16489792]
[157.27531433 -6.09511662]
[150.98451233 7.52199364]
[144.69369507 21.13910484]
[138.40289307 34.75621414]
[132.11207581 48.37332535]
[125.82126617 61.99043655]
[119.53044891 75.60754395]
[113.23963928 89.22465515]
[115.93876648 112.06276703]
[90.90994263 121.02664185]
[89.23047638 135.93232727]
[91.38109589 144.82308960]
[87.40277100 151.06275940]
[85.48461914 165.93962097]
[83.56645966 180.81646729]
[89.47550964 195.49276733]
[80.17420197 207.12611389]
[78.25605011 222.00297546]
[76.33789062 236.87982178]
[74.41973114 251.75666809]
[81.66981506 262.43417358]
[79.75796509 274.79248047]
[70.24965668 282.28295898]
[68.09329987 297.12716675]
[65.93694305 311.97137451]
[77.19540405 302.05938721]
[91.83364868 298.78500366]
[106.24220276 302.95559692]
[116.86818695 313.54275513]
[121.09146881 327.93594360]
[117.87066650 342.58609009]
[107.99996185 353.88073730]
[93.91326904 359.03488159]
[79.08409119 356.77761841]
[67.16898346 347.66552734]
[61.10618210 333.94665527]
[56.83826828 348.32669067]
[52.57035446 362.70669556]
[48.30244064 377.08670044]
[44.03452682 391.46673584]
[39.76661301 405.84674072]
[51.26226044 417.72305298]
[55.18115616 433.68380737]
[50.54644775 449.35372925]
[38.71281433 460.48629761]
[22.97227478 464.11437988]
[18.93539047 478.56094360]
[14.89850521 493.00753784]
[10.86161995 507.45410156]
[6.82473564 521.90069580]
[2.78785062 536.34729004]
[-1.24903417 550.79382324]
[-5.28591919 565.24041748]
[-1.54806626 580.61370850]
[-12.42513466 590.78912354]
[-16.46201897 605.23571777]
[-20.49890518 619.68231201]
[-24.53578949 634.12884521]
[-28.57267380 648.57543945]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[3 11]
[4 10]
[18 195]
[19 194]
[20 193]
[21 192]
[22 191]
[24 189]
[25 188]
[26 187]
[27 186]
[28 185]
[29 184]
[30 183]
[31 182]
[37 177]
[38 176]
[39 175]
[40 174]
[41 173]
[42 172]
[44 161]
[45 160]
[46 159]
[48 156]
[49 155]
[50 154]
[51 153]
[53 151]
[54 150]
[55 149]
[56 147]
[57 146]
[58 77]
[59 76]
[60 75]
[61 74]
[63 70]
[79 144]
[80 143]
[81 142]
[82 141]
[83 140]
[84 139]
[85 138]
[86 137]
[97 136]
[98 135]
[99 134]
[100 133]
[101 132]
[103 131]
[105 130]
[106 129]
[107 128]
[108 127]
[109 126]
[111 124]
[112 123]
[113 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
