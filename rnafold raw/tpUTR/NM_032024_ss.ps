%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 19:01:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCAACUUCUGUAUACCUUCACCCAUUUCAUGAAAAUAAAAUCAAAAGGGAAAUCAAAAAUAAAGAAAACGCUAAAGAAAAAACAA\
) } def
/len { sequence length } bind def

/coor [
[190.33819580 311.13461304]
[183.62393188 297.72122192]
[176.90968323 284.30783081]
[163.47000122 283.32168579]
[152.21488953 275.71450806]
[146.19296265 263.41586304]
[147.10032654 249.64291382]
[154.80435181 238.05903625]
[148.57313538 224.41456604]
[142.34190369 210.77008057]
[136.11068726 197.12559509]
[123.78548431 188.76266479]
[125.09078217 172.99539185]
[118.85955811 159.35090637]
[112.62833405 145.70643616]
[96.47061157 147.28738403]
[80.72659302 143.32537842]
[67.24177551 134.28485107]
[57.59681702 121.22551727]
[52.92228699 105.67816162]
[53.76612473 89.46522522]
[60.02941895 74.48715210]
[70.97799683 62.49965286]
[63.78926086 49.33446884]
[56.60052872 36.16928482]
[49.58193207 29.96459198]
[49.39972687 22.40340805]
[42.68547058 8.99002934]
[35.97121429 -4.42334938]
[30.37226295 -8.59771061]
[28.22621155 -14.17219162]
[29.29517365 -19.04183578]
[23.55492210 -32.90002823]
[17.81467056 -46.75822067]
[2.69546437 -50.24953079]
[-7.45865726 -61.98296356]
[-8.74322701 -77.44677734]
[-0.66430229 -90.69481659]
[13.67160606 -96.63294220]
[28.75204849 -92.97782898]
[38.77828598 -81.13493347]
[39.89502716 -65.65809631]
[31.67286301 -52.49847412]
[37.41311646 -38.64028168]
[43.15336609 -24.78208733]
[49.38459015 -11.13760757]
[56.09885025 2.27577162]
[62.81310654 15.68915081]
[69.76570892 28.98055077]
[76.95444489 42.14573669]
[84.14318085 55.31092072]
[97.56212616 52.64380264]
[111.18400574 53.91886902]
[123.87487030 59.02997208]
[134.57826233 67.55164337]
[142.40318298 78.77448273]
[146.69822693 91.76425171]
[147.10588074 105.43960571]
[143.59216309 118.66213226]
[136.44961548 130.33113098]
[126.27281189 139.47520447]
[132.50404358 153.11968994]
[138.73526001 166.76416016]
[151.50616455 176.10305786]
[149.75515747 190.89437866]
[155.98638916 204.53886414]
[162.21762085 218.18333435]
[168.44883728 231.82781982]
[184.97149658 234.89530945]
[196.35903931 247.02882385]
[198.33384705 263.38552856]
[190.32305908 277.59359741]
[197.03730774 291.00695801]
[203.75157166 304.42034912]
[218.91123962 303.30102539]
[233.34371948 308.07299805]
[244.84817505 318.00857544]
[251.67025757 331.59268188]
[252.76963806 346.75381470]
[247.97866821 361.18002319]
[238.02795410 372.67138672]
[224.43489075 379.47558594]
[209.27233887 380.55502319]
[194.85244751 375.74508667]
[183.37417603 365.77926636]
[176.58786011 352.17727661]
[175.52838135 337.01330566]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 74]
[2 73]
[3 72]
[8 68]
[9 67]
[10 66]
[11 65]
[13 63]
[14 62]
[15 61]
[23 51]
[24 50]
[25 49]
[27 48]
[28 47]
[29 46]
[32 45]
[33 44]
[34 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
