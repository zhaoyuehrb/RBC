%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 08:42:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCCACCCUAGGAGGGAGGGAAGGACACCGUCCUAGGGUAUAACCUGGCAAUAAACCGUGCCUCUCACUGUG\
) } def
/len { sequence length } bind def

/coor [
[231.85887146 227.61814880]
[224.40776062 218.70401001]
[218.71659851 208.57000732]
[214.98010254 197.55946350]
[213.32673645 186.04571533]
[213.81431580 174.41950989]
[216.42796326 163.07571411]
[202.85554504 156.68902588]
[189.28314209 150.30233765]
[175.71073914 143.91564941]
[162.13833618 137.52896118]
[148.56593323 131.14227295]
[134.99353027 124.75557709]
[121.42111969 118.36888885]
[107.84870911 111.98220062]
[93.90116119 112.96069336]
[85.76460266 101.59020233]
[72.19219208 95.20351410]
[59.61876678 98.84532928]
[48.35193634 93.01628113]
[44.32719040 81.41393280]
[29.32294846 86.37863159]
[15.24050045 79.20505524]
[10.43471527 64.14915466]
[17.75677872 50.14334106]
[32.86264420 45.49700546]
[46.79026413 52.96673584]
[51.27663422 68.12088013]
[68.60436249 66.31732178]
[78.57888031 81.63111115]
[92.15129089 88.01779938]
[106.09883881 87.03930664]
[114.23539734 98.40979767]
[127.80780792 104.79648590]
[141.38021851 111.18317413]
[154.95262146 117.56986237]
[168.52502441 123.95655060]
[182.09742737 130.34324646]
[195.66983032 136.72993469]
[209.24224854 143.11662292]
[222.81465149 149.50331116]
[235.64686584 134.77986145]
[252.34910583 124.68991852]
[271.31863403 120.18937683]
[290.73895264 121.69837189]
[308.75363159 129.06207275]
[323.64389038 141.56651306]
[333.99255371 158.00778198]
[338.81887817 176.80793762]
[353.81558228 177.12207031]
[368.81228638 177.43620300]
[383.80899048 177.75033569]
[393.08297729 165.30957031]
[407.90826416 160.72805786]
[422.58422852 165.76747131]
[431.46768188 178.49005127]
[431.14270020 194.00372314]
[421.73431396 206.34315491]
[406.86016846 210.76358032]
[392.23974609 205.56526184]
[383.49487305 192.74705505]
[368.49813843 192.43292236]
[353.50143433 192.11877441]
[338.50473022 191.80464172]
[335.85833740 203.06100464]
[331.18960571 213.64482117]
[324.65551758 223.19606018]
[316.47653198 231.38940430]
[306.92926025 237.94544983]
[296.33694458 242.64018250]
[285.05856323 245.31266785]
[273.47671509 245.87049866]
[261.98461914 244.29306030]
[250.97277832 240.63226318]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 41]
[8 40]
[9 39]
[10 38]
[11 37]
[12 36]
[13 35]
[14 34]
[15 33]
[17 31]
[18 30]
[21 28]
[49 64]
[50 63]
[51 62]
[52 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
