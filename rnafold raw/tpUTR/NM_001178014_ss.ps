%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 05:56:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAAUCAAAGGAAAAGAAACCAAGAACUGAAUUACUGUCUGCCCAUUCACAUCCCAUUCCUGCCUUUUGCAAUCAUGAAACCUGGGAAUCCAAAUAGUUGGAUAACUUAGAAUAACUAAGUUUAUUAAAUUCUAGAAAGAUCUC\
) } def
/len { sequence length } bind def

/coor [
[-108.30398560 123.26242065]
[-112.22241974 108.30613708]
[-127.21894073 108.62887573]
[-142.21546936 108.95161438]
[-157.21200562 109.27436066]
[-164.66273499 122.63227081]
[-177.71308899 130.41590881]
[-192.80694580 130.62088013]
[-205.88926697 123.29226685]
[-213.49557495 110.48564148]
[-228.49209595 110.80838013]
[-243.48863220 111.13112640]
[-258.48516846 111.45386505]
[-273.48168945 111.77661133]
[-284.37783813 122.90818024]
[-299.59103394 123.02185822]
[-310.13613892 112.56545258]
[-299.62283325 123.26453400]
[-298.26602173 138.20304871]
[-306.67968750 150.62118530]
[-321.05657959 154.89962769]
[-334.89102173 149.10235596]
[-341.92282104 135.85269165]
[-338.97000122 121.14619446]
[-327.36840820 111.63755798]
[-342.24356079 109.70633698]
[-354.68667603 119.07684326]
[-369.74468994 116.90641022]
[-378.60137939 104.98604584]
[-393.47653198 103.05482483]
[-408.35168457 101.12360382]
[-423.22683716 99.19238281]
[-438.10202026 97.26115417]
[-446.39660645 110.07374573]
[-459.43341064 118.01126862]
[-474.62396240 119.49771881]
[-488.95217896 114.23796844]
[-499.57318115 103.27634430]
[-504.37814331 88.78927612]
[-502.41305542 73.65319061]
[-494.06805420 60.87335968]
[-481.00009155 52.98723984]
[-465.80380249 51.56061554]
[-451.49639893 56.87675095]
[-440.91867065 67.88011932]
[-436.17077637 82.38599396]
[-421.29562378 84.31722260]
[-406.42047119 86.24844360]
[-391.54531860 88.17966461]
[-376.67013550 90.11088562]
[-365.06320190 80.84729004]
[-349.95016479 82.59392548]
[-340.31234741 94.83117676]
[-325.43716431 96.76239777]
[-310.45889282 97.56892395]
[-300.37338257 86.66852570]
[-285.16937256 86.12759399]
[-273.80441284 96.78008270]
[-258.80789185 96.45733643]
[-243.81137085 96.13459778]
[-228.81484985 95.81185913]
[-213.81831360 95.48911285]
[-206.77001953 82.36710358]
[-194.01509094 74.48244476]
[-178.92640686 74.03785706]
[-165.55326843 81.25283051]
[-157.53474426 94.27783203]
[-142.53820801 93.95509338]
[-127.54168701 93.63234711]
[-112.54515839 93.30960846]
[-109.58683777 79.12641144]
[-103.53005981 65.95642853]
[-94.67824554 54.46744537]
[-83.47660828 45.24284363]
[-70.48979950 38.75197220]
[-56.37342834 35.32627869]
[-41.84096909 35.14236832]
[-27.62770081 38.21291351]
[-14.45350933 44.38583755]
[-2.98641896 53.35184860]
[6.19127703 64.65993500]
[12.61258602 77.74003601]
[15.94957447 91.93180847]
[30.94957352 91.93180847]
[45.94957352 91.93180847]
[60.94957352 91.93180847]
[75.94957733 91.93180847]
[90.94957733 91.93180847]
[105.36652374 87.79035187]
[118.07963562 79.82940674]
[130.79275513 71.86845398]
[143.50585938 63.90750122]
[156.21897888 55.94655228]
[168.93208313 47.98559952]
[176.13499451 33.25297928]
[192.51167297 32.39465714]
[201.21517944 46.29360580]
[193.29211426 60.65177536]
[176.89303589 60.69871521]
[164.17993164 68.65966797]
[151.46681213 76.62061310]
[138.75369263 84.58156586]
[126.04058838 92.54251862]
[113.32746887 100.50347137]
[116.05571747 115.25327301]
[130.77531433 118.14004517]
[145.49490356 121.02681732]
[160.21450806 123.91358948]
[174.93409729 126.80036926]
[189.65370178 129.68713379]
[204.37329102 132.57391357]
[218.43705750 124.85443115]
[233.18486023 131.16960144]
[237.30348206 146.67497253]
[227.63345337 159.47615051]
[211.59278870 159.75315857]
[201.48652649 147.29351807]
[186.76692200 144.40673828]
[172.04733276 141.51995850]
[157.32772827 138.63319397]
[142.60813904 135.74641418]
[127.88853455 132.85964966]
[113.16893768 129.97286987]
[109.67072296 144.55924988]
[98.43605042 154.49816895]
[83.53195953 156.19169617]
[70.35382080 149.02673340]
[63.67219925 135.59706116]
[65.90589142 120.76431274]
[76.24628448 109.89802551]
[90.94957733 106.93180847]
[75.94957733 106.93180847]
[60.94957352 106.93180847]
[45.94957352 106.93180847]
[30.94957352 106.93180847]
[15.94957447 106.93180847]
[12.27324963 122.04802704]
[5.10462761 135.84497070]
[-5.13957119 147.52958679]
[-17.86597824 156.43138123]
[-32.33894730 162.04084778]
[-47.72307587 164.03865051]
[-63.13143921 162.31381226]
[-77.67669678 156.96981812]
[-90.52220917 148.31848145]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 70]
[3 69]
[4 68]
[5 67]
[10 62]
[11 61]
[12 60]
[13 59]
[14 58]
[17 55]
[25 54]
[26 53]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[83 136]
[84 135]
[85 134]
[86 133]
[87 132]
[88 131]
[89 104]
[90 103]
[91 102]
[92 101]
[93 100]
[94 99]
[105 123]
[106 122]
[107 121]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
