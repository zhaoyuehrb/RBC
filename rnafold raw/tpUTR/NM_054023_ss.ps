%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 12:32:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCAAGAUAAAGAGCGGAGGUGGAUGGGGAUGGAAGAUGAUGCUCCUAUCCUCCCUGCCUGAAACCUGUUCUACCAAUUAUAGAUCAAAUGCCCUAAAAUGUAGUGACCCGUGAAAAGGACAAAUAAAGCAAUGAAUACAUU\
) } def
/len { sequence length } bind def

/coor [
[28.60656929 234.14408875]
[22.74449158 220.33699036]
[19.26695251 205.74566650]
[18.27133751 190.77874756]
[19.78553009 175.85536194]
[23.76712418 161.39346313]
[30.10461807 147.79800415]
[38.62053299 135.44976807]
[49.07638550 124.69452667]
[61.17935944 115.83348846]
[74.59052277 109.11479950]
[88.93509674 104.72644806]
[74.53435516 100.52901459]
[60.13360596 96.33158112]
[45.73285675 92.13414764]
[31.33210945 87.93670654]
[16.93136024 83.73927307]
[2.53061295 79.54183960]
[-12.07754135 76.13569641]
[-26.84965897 73.53097534]
[-41.62177277 70.92624664]
[-56.39389038 68.32152557]
[-71.16600800 65.71680450]
[-85.93812561 63.11208344]
[-96.97944641 69.87445831]
[-109.26872253 67.35059357]
[-116.28589630 57.43927002]
[-130.99768066 54.51291656]
[-145.70945740 51.58656311]
[-160.42123413 48.66020584]
[-175.13301086 45.73385239]
[-189.84478760 42.80749512]
[-204.55656433 39.88114166]
[-219.26835632 36.95478821]
[-234.31283569 41.85113907]
[-245.28607178 31.77953911]
[-259.99786377 28.85318565]
[-272.99774170 37.84086609]
[-288.53009033 34.92165756]
[-297.37982178 21.82747078]
[-294.29656982 6.32685757]
[-281.10955811 -2.38394523]
[-265.64239502 0.86302805]
[-257.07150269 14.14140606]
[-242.35972595 17.06776047]
[-228.36752319 11.96209812]
[-216.34199524 22.24300766]
[-201.63021851 25.16936302]
[-186.91844177 28.09571838]
[-172.20666504 31.02207184]
[-157.49487305 33.94842911]
[-142.78309631 36.87478256]
[-128.07131958 39.80113602]
[-113.35954285 42.72749329]
[-97.11325073 36.17827988]
[-83.33339691 48.33996582]
[-68.56128693 50.94468689]
[-53.78916931 53.54941177]
[-39.01705170 56.15413284]
[-24.24493599 58.75885773]
[-9.47281933 61.36357880]
[-15.40884876 47.58810806]
[-8.53795147 34.25428772]
[6.12526464 31.09357834]
[17.87910080 40.41276932]
[18.14522171 55.41040802]
[6.72804832 65.14109039]
[21.12879562 69.33852386]
[35.52954483 73.53596497]
[49.93029022 77.73339844]
[64.33103943 81.93083191]
[78.73178864 86.12826538]
[93.13253784 90.32569885]
[98.81400299 88.28713226]
[104.71514893 89.31235504]
[118.16824341 82.67802429]
[123.45580292 66.04090881]
[138.82089233 58.48965836]
[154.58975220 64.23709869]
[167.89491272 57.31087112]
[181.20007324 50.38464355]
[194.50523376 43.45841217]
[203.17344666 30.22313309]
[218.03536987 31.20940208]
[226.70358276 17.97412300]
[241.56549072 18.96039200]
[254.87065125 12.03416252]
[268.17581177 5.10793304]
[272.81881714 -6.97855043]
[284.10498047 -12.45747185]
[295.70571899 -8.86607647]
[309.15881348 -15.50040722]
[322.61190796 -22.13473701]
[325.10687256 -37.44991302]
[336.15109253 -48.34969711]
[351.49777222 -50.64289856]
[365.24584961 -43.44773483]
[372.10885620 -29.53089333]
[369.44787598 -14.24368382]
[358.28610229 -3.46434999]
[342.91543579 -1.33776569]
[329.24621582 -8.68164635]
[315.79312134 -2.04731607]
[302.34005737 4.58701420]
[293.43789673 19.67296600]
[275.10205078 18.41309547]
[261.79687500 25.33932495]
[248.49172974 32.26555252]
[240.77517700 45.00542450]
[224.96159363 44.51456451]
[217.24505615 57.25443268]
[201.43145752 56.76357651]
[188.12629700 63.68980408]
[174.82113647 70.61603546]
[161.51597595 77.54225922]
[159.38125610 90.29393768]
[150.13720703 99.61013031]
[137.01829529 101.91145325]
[124.80257416 96.13111877]
[111.34947968 102.76544952]
[126.23735809 104.59605408]
[140.61149597 108.88371277]
[154.06936646 115.50834656]
[166.23408508 124.28443909]
[176.76496887 134.96621704]
[185.36711121 147.25454712]
[191.79963684 160.80529785]
[195.88237000 175.23898315]
[197.50099182 190.15138245]
[196.61018372 205.12490845]
[193.23487854 219.74021912]
[187.46960449 233.58802795]
[179.47579956 246.28051758]
[169.47735596 257.46224976]
[157.75427246 266.82006836]
[144.63482666 274.09194946]
[130.48643494 279.07421875]
[115.70530701 281.62734985]
[100.70539856 281.67987061]
[85.90676880 279.23025513]
[71.72384644 274.34716797]
[58.55381393 267.16729736]
[46.76549530 257.89178467]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 73]
[13 72]
[14 71]
[15 70]
[16 69]
[17 68]
[18 67]
[19 61]
[20 60]
[21 59]
[22 58]
[23 57]
[24 56]
[27 54]
[28 53]
[29 52]
[30 51]
[31 50]
[32 49]
[33 48]
[34 47]
[36 45]
[37 44]
[75 120]
[76 119]
[79 115]
[80 114]
[81 113]
[82 112]
[84 110]
[86 108]
[87 107]
[88 106]
[91 104]
[92 103]
[93 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
