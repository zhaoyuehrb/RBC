%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 23:32:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCCUGUGGAUUCACAUCAAAUACCAGUUCAGUUUUGUCAUUGUUCUAGUAAAUUAGUUCCAUUUGUAAAAGGGUUACUCUCAUACUCCUUAUGUACAGAAAUCACAUGAAAAAUAAAGGUUCCAUAAUGCAUAGUU\
) } def
/len { sequence length } bind def

/coor [
[90.12227631 376.55975342]
[85.83536530 362.02020264]
[86.78289795 346.89147949]
[92.85045624 333.00045776]
[103.30535889 322.02453613]
[116.88511658 315.28912354]
[115.19361877 300.38479614]
[113.50212097 285.48046875]
[111.81061554 270.57614136]
[110.11911774 255.67182922]
[108.42761993 240.76750183]
[99.30446625 228.99392700]
[105.43621063 214.40927124]
[103.74471283 199.50494385]
[85.46118927 198.50827026]
[67.66928864 194.18058777]
[50.97063828 186.66821289]
[35.92989731 176.22518921]
[23.05566216 163.20463562]
[12.78327084 148.04684448]
[5.46008015 131.26435852]
[1.33372164 113.42469025]
[0.54372603 95.13107300]
[-14.34053040 93.27125549]
[-29.22478676 91.41143799]
[-43.87780380 97.37798309]
[-55.54753876 88.12236023]
[-70.43179321 86.26255035]
[-82.82980347 95.69266510]
[-97.89806366 93.59451294]
[-106.81183624 81.71678925]
[-121.69609070 79.85697937]
[-136.58035278 77.99716187]
[-151.46459961 76.13734436]
[-163.78384399 86.03743744]
[-179.48602295 84.24381256]
[-189.25531006 71.82059479]
[-187.29577637 56.13825607]
[-174.76997375 46.50085068]
[-159.10922241 48.62608337]
[-149.60478210 61.25308990]
[-134.72053528 63.11290359]
[-119.83627319 64.97271729]
[-104.95201874 66.83253479]
[-93.38965607 57.51334763]
[-78.26840973 59.18743134]
[-68.57197571 71.37828827]
[-53.68772125 73.23810577]
[-40.09932709 67.13853455]
[-27.36497116 76.52718353]
[-12.48071384 78.38700104]
[2.40354204 80.24681854]
[6.69052029 65.23510742]
[13.27116489 51.07796097]
[21.98371506 38.12337875]
[32.61400223 26.68980789]
[44.90072632 17.05829239]
[58.54185867 9.46558952]
[73.20208740 4.09833813]
[88.52104187 1.08847189]
[104.12216187 0.50997710]
[119.62195587 2.37707376]
[134.63941956 6.64386654]
[148.80538940 13.20547199]
[157.12132263 0.72166824]
[165.43725586 -11.76213551]
[173.75317383 -24.24593925]
[182.06910706 -36.72974396]
[190.38504028 -49.21354675]
[190.68032837 -69.31414795]
[208.23616028 -77.29994965]
[215.97949219 -90.14677429]
[223.72280884 -102.99359894]
[231.46612549 -115.84042358]
[239.06378174 -128.77394104]
[246.51480103 -141.79248047]
[239.30290222 -155.43037415]
[240.63185120 -170.80038452]
[250.07756042 -182.99801636]
[264.62594604 -188.13102722]
[279.63467407 -184.56150818]
[290.31451416 -173.42846680]
[293.25756836 -158.28442383]
[287.52471924 -143.96179199]
[274.94528198 -135.03085327]
[259.53332520 -134.34146118]
[252.08232117 -121.32292175]
[251.48478699 -113.89257812]
[244.31295776 -108.09710693]
[236.56964111 -95.25027466]
[228.82630920 -82.40345001]
[221.08299255 -69.55662537]
[224.44346619 -59.79789734]
[221.77795410 -49.59869766]
[213.74330139 -42.43815994]
[202.86883545 -40.89761734]
[194.55291748 -28.41381454]
[186.23698425 -15.93001175]
[177.92105103 -3.44620800]
[169.60513306 9.03759575]
[161.28919983 21.52139854]
[170.28105164 29.46043205]
[178.25305176 38.42307281]
[185.08949280 48.27926636]
[190.69120789 58.88598251]
[194.97688293 70.08931732]
[197.88433838 81.72668457]
[199.37136841 93.62921906]
[199.41642761 105.62419891]
[198.01882935 117.53756714]
[195.19886780 129.19644165]
[190.99746704 140.43164062]
[185.47558594 151.08013916]
[178.71336365 160.98741150]
[170.80891418 170.00967407]
[161.87695312 178.01602173]
[152.04707336 184.89027405]
[141.46194458 190.53266907]
[130.27516174 194.86132812]
[118.64904022 197.81344604]
[120.34053802 212.71777344]
[129.58468628 225.55740356]
[123.33194733 239.07600403]
[125.02344513 253.98033142]
[126.71494293 268.88464355]
[128.40643311 283.78897095]
[130.09793091 298.69329834]
[131.78944397 313.59762573]
[146.53320312 317.11859131]
[159.18185425 325.47250366]
[168.20799255 337.65051270]
[172.52169800 352.18212891]
[171.60203552 367.31256104]
[165.56008911 381.21475220]
[155.12544250 392.20993042]
[141.55812073 398.97036743]
[126.49644470 400.67971802]
[111.75919342 397.13159180]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 128]
[7 127]
[8 126]
[9 125]
[10 124]
[11 123]
[13 121]
[14 120]
[23 52]
[24 51]
[25 50]
[27 48]
[28 47]
[31 44]
[32 43]
[33 42]
[34 41]
[64 101]
[65 100]
[66 99]
[67 98]
[68 97]
[69 96]
[71 92]
[72 91]
[73 90]
[74 89]
[75 87]
[76 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
