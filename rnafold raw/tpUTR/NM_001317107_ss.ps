%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 14:22:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUGUCUACGUCCUUAGGAUACGUGGUGCUCCAAAUUAAAGAAGCGCCUUGCAAAGAAUAAGUUACAUACCAUAU\
) } def
/len { sequence length } bind def

/coor [
[92.23814392 139.53028870]
[92.85938263 124.54315186]
[96.29337311 109.93785095]
[82.64889526 116.16907501]
[69.00440979 122.40030670]
[55.35993195 128.63153076]
[52.64827728 132.85569763]
[49.01068115 135.53613281]
[45.12113953 136.57341003]
[41.60566330 136.12515259]
[38.95325089 134.56098938]
[24.47764778 138.49252319]
[10.00204277 142.42404175]
[-4.47356081 146.35556030]
[-18.17420578 156.34199524]
[-31.56307220 145.94128418]
[-25.27524185 130.19647217]
[-8.40508652 131.87995911]
[6.07051754 127.94844055]
[20.54612160 124.01691437]
[35.02172470 120.08538818]
[49.12870789 114.98704529]
[62.77318573 108.75582123]
[76.41766357 102.52459717]
[90.06214905 96.29337311]
[97.65030670 83.35429382]
[96.42766571 68.40420532]
[95.20503235 53.45411301]
[93.98239136 38.50402451]
[92.75975037 23.55393600]
[91.53710938 8.60384750]
[82.70071411 -4.51974392]
[89.37487793 -17.83532906]
[76.05014038 -25.78711510]
[69.97510529 -40.06554794]
[73.48574829 -55.18027496]
[85.23216248 -65.31937408]
[100.69760895 -66.58415985]
[113.93530273 -58.48829269]
[119.85508728 -44.14480209]
[116.18067932 -29.06904793]
[104.32496643 -19.05796814]
[113.07391357 -7.00370646]
[106.48719788 7.38120842]
[107.70983887 22.33129692]
[108.93247986 37.28138733]
[110.15512085 52.23147583]
[111.37775421 67.18156433]
[112.60039520 82.13165283]
[123.66784668 72.00685120]
[136.44415283 64.14772797]
[150.47203064 58.83559036]
[165.24935913 56.26056671]
[180.24719238 56.51483154]
[194.92874146 59.58928680]
[208.76847839 65.37387848]
[221.27105713 73.66156769]
[231.98893738 84.15570831]
[240.53851318 96.48066711]
[246.61375427 110.19531250]
[249.99722290 124.80873871]
[250.56781006 139.79788208]
[248.30506897 154.62623596]
[243.29002380 168.76303101]
[235.70214844 181.70228577]
[225.81306458 192.98085022]
[213.97671509 202.19502258]
[200.61679077 209.01499939]
[186.21145630 213.19668579]
[171.27633667 214.59037781]
[156.34602356 213.14620972]
[141.95491028 208.91586304]
[128.61810303 202.05076599]
[116.81297302 192.79663086]
[106.96206665 181.48469543]
[99.41797638 168.51988220]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 25]
[4 24]
[5 23]
[6 22]
[11 21]
[12 20]
[13 19]
[14 18]
[26 49]
[27 48]
[28 47]
[29 46]
[30 45]
[31 44]
[33 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
