%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 22:30:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCUCAGAAGAAACCAACCCUGCCGACACCUUGACCUUGGACUUCUAGUCUCUAGAAUUAUGCGAAAAUAAAUUCCUGUUGUUUAA\
) } def
/len { sequence length } bind def

/coor [
[-14.20658588 229.43791199]
[-22.76142502 241.75921631]
[-20.16188622 257.11761475]
[-29.01323128 269.49130249]
[-43.67113113 271.87490845]
[-52.22596741 284.19622803]
[-53.05048370 300.57464600]
[-67.76820374 307.80795288]
[-81.23880768 298.45513916]
[-79.60488892 282.13757324]
[-64.54727936 275.64138794]
[-55.99243927 263.32006836]
[-58.88152313 248.75337219]
[-50.38122177 236.13595581]
[-35.08273697 233.20437622]
[-26.52789688 220.88307190]
[-34.51241302 210.00521851]
[-38.70307541 197.15449524]
[-38.66604996 183.61471558]
[-34.39063644 170.74333191]
[-26.29177094 159.83525085]
[-15.16980076 151.99264526]
[-2.13141799 148.01350403]
[11.52046490 148.31056213]
[24.41690826 152.86842346]
[33.82894135 141.18879700]
[43.24097824 129.50917053]
[52.65301132 117.82955170]
[62.06504822 106.14993286]
[62.60043335 91.15949249]
[54.04559326 78.83818054]
[38.52977753 78.64047241]
[26.11359024 69.33360291]
[21.57130623 54.49624252]
[26.64952850 39.83366013]
[39.39557648 30.98392105]
[54.90833282 31.34992790]
[67.22283173 40.79094696]
[71.60388947 55.67670822]
[66.36690521 70.28334045]
[74.92174530 82.60465240]
[84.21125793 72.96445465]
[97.02602386 68.04238892]
[111.05861664 69.03213501]
[118.24735260 55.86695099]
[125.43608856 42.70176697]
[132.62481689 29.53658295]
[139.81355286 16.37139702]
[147.00228882 3.20621228]
[149.28643799 -13.59316349]
[166.06159973 -16.04881668]
[173.06510925 -0.60902441]
[160.16748047 10.39494705]
[152.97874451 23.56013107]
[145.79000854 36.72531509]
[138.60127258 49.89050293]
[131.41253662 63.05568695]
[124.22380066 76.22087097]
[132.10688782 88.98241425]
[147.09733582 88.44702911]
[162.08776855 87.91164398]
[177.07821655 87.37625885]
[187.66275024 75.63985443]
[203.45011902 74.90880585]
[215.07395935 85.61683655]
[215.63806152 101.41105652]
[204.80773926 112.92103577]
[189.00843811 113.31810760]
[177.61360168 102.36669922]
[162.62315369 102.90208435]
[147.63272095 103.43746948]
[132.64227295 103.97285461]
[127.94379425 116.57427979]
[118.68019867 126.09948730]
[106.51451111 131.02539062]
[93.55704498 130.63810730]
[81.99960327 125.13347626]
[73.74467468 115.56196594]
[64.33263397 127.24159241]
[54.92060089 138.92121887]
[45.50856781 150.60083008]
[36.09653091 162.28045654]
[44.35695267 176.75985718]
[46.51378250 193.25325012]
[42.27283859 209.29997253]
[32.29239273 222.51644897]
[18.08112526 230.95024109]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[5 12]
[6 11]
[25 82]
[26 81]
[27 80]
[28 79]
[29 78]
[30 41]
[31 40]
[44 58]
[45 57]
[46 56]
[47 55]
[48 54]
[49 53]
[59 72]
[60 71]
[61 70]
[62 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
