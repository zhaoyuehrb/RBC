%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 00:13:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCCCGCACCCGCCGCACCCCGAGGCCGCCAAUUGUCCGCCCCGCCAGCGCUGCAAAUAAACCUUCUGAGUCAGCCC\
) } def
/len { sequence length } bind def

/coor [
[78.10134125 136.60928345]
[68.25794983 147.92774963]
[58.41456604 159.24621582]
[57.34431458 164.92689514]
[54.35707474 169.06216431]
[50.44925308 171.15921021]
[46.66194153 171.23487854]
[35.54141998 181.30136108]
[31.03294945 197.06860352]
[15.06040001 200.78472900]
[4.05495739 188.62692261]
[9.33807945 173.10208130]
[25.47494316 170.18083191]
[36.59546661 160.11436462]
[47.09609604 149.40283203]
[56.93948364 138.08436584]
[66.78286743 126.76589966]
[60.06408691 114.99712372]
[57.37547684 101.71489716]
[58.98836136 88.25961304]
[64.73998260 75.98912048]
[74.04990387 66.14171600]
[67.16044617 52.81747437]
[53.94915390 44.11274338]
[54.97646332 29.25360680]
[48.08700180 15.92936802]
[41.19754410 2.60512900]
[27.98625183 -6.09960318]
[29.01355934 -20.95873833]
[15.80226898 -29.66347122]
[16.82957649 -44.52260590]
[2.73859501 -52.91166306]
[3.22876596 -69.30348206]
[17.79584312 -76.83556366]
[31.45446777 -67.75955200]
[30.15381622 -51.41206360]
[42.87232590 -43.66037369]
[42.33779907 -27.84819794]
[55.05630875 -20.09650421]
[54.52178192 -4.28433037]
[61.41123962 9.03990841]
[68.30069733 22.36414719]
[81.01921082 30.11584091]
[80.48468781 45.92801666]
[87.37414551 59.25225449]
[101.63288116 57.37225342]
[115.70602417 60.33752441]
[127.99394226 67.81101990]
[137.09992981 78.94326782]
[141.98896790 92.46892548]
[142.10534668 106.85060120]
[156.25654602 111.82489014]
[170.40774536 116.79917908]
[184.55894470 121.77346802]
[198.80624390 126.46541595]
[208.18280029 114.53038788]
[221.23959351 106.79187775]
[236.21080017 104.29644012]
[251.07170105 107.38156891]
[263.81246948 115.63003540]
[272.71005249 127.92628479]
[276.56106567 142.60736084]
[274.84472656 157.68777466]
[267.79318237 171.12800598]
[256.36004639 181.11038208]
[242.09158325 186.28488159]
[226.91748047 185.95167542]
[212.88990784 180.15583801]
[201.90599060 169.68121338]
[195.45120239 155.94439697]
[194.39849854 140.80319214]
[186.87736511 141.87750244]
[179.58465576 135.92466736]
[165.43345642 130.95037842]
[151.28225708 125.97608948]
[137.13105774 121.00180054]
[126.06270599 133.77168274]
[110.90435028 141.24180603]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[7 14]
[8 13]
[22 45]
[23 44]
[25 42]
[26 41]
[27 40]
[29 38]
[31 36]
[51 76]
[52 75]
[53 74]
[54 73]
[55 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
