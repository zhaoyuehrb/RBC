%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 08:25:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCUGCCCUCCCACCUCCGCUGGGAGGAACCUGAACCUGGGAACCAUGAAGCUGGAAGCACUGCUGUGUCCGCUUUCAUGAACACAGCCUGGGACCAGGGCAUAUUAAAGGCUUUUGGCAGCAAAGUGUCAGUGUUGGC\
) } def
/len { sequence length } bind def

/coor [
[145.72798157 306.92489624]
[145.72520447 289.01663208]
[156.51608276 274.52935791]
[151.59571838 260.35931396]
[146.67533875 246.18928528]
[141.75497437 232.01924133]
[136.83459473 217.84921265]
[131.91423035 203.67916870]
[114.84538269 199.40490723]
[103.61315155 185.65817261]
[102.81262207 167.76780701]
[112.94743347 152.81420898]
[107.40071106 138.87742615]
[88.69654083 137.92698669]
[72.52373505 128.48295593]
[60.25244904 137.10940552]
[47.98116302 145.73585510]
[35.70987701 154.36230469]
[23.43859291 162.98873901]
[17.03019333 178.08392334]
[0.72243845 179.81283569]
[-8.70865250 166.39694214]
[-1.56118047 151.63734436]
[14.81214714 150.71745300]
[27.08343124 142.09101868]
[39.35471725 133.46456909]
[51.62600327 124.83811951]
[63.89728546 116.21167755]
[60.63993835 95.87570190]
[68.04200745 76.65666199]
[84.09889221 63.75942612]
[80.78435516 49.13021469]
[77.46981812 34.50100327]
[74.15528107 19.87178993]
[61.06995773 11.42122650]
[57.91694641 -3.46209216]
[66.05390930 -15.88487148]
[62.73937225 -30.51408386]
[59.42483521 -45.14329529]
[56.11029816 -59.77250671]
[52.79576492 -74.40171814]
[49.48122787 -89.03092957]
[30.77867126 -95.81601715]
[19.93728065 -112.32819366]
[21.12920761 -131.90296936]
[33.71027374 -146.76080322]
[29.10681725 -161.03694153]
[24.50335884 -175.31307983]
[19.89990234 -189.58921814]
[15.29644394 -203.86535645]
[10.69298553 -218.14149475]
[5.93077469 -232.36546326]
[1.01040173 -246.53550720]
[-4.80649567 -253.68533325]
[-3.85791302 -261.07638550]
[-8.46137047 -275.35253906]
[-13.19272614 -280.15618896]
[-14.52446651 -285.78594971]
[-12.93652630 -290.36822510]
[-16.89945793 -304.83526611]
[-20.86238861 -319.30227661]
[-24.82531929 -333.76931763]
[-36.85979843 -344.90948486]
[-32.96599579 -360.83966064]
[-17.14952469 -365.17224121]
[-5.68101263 -353.45025635]
[-10.35828209 -337.73226929]
[-6.39535093 -323.26522827]
[-2.43241978 -308.79818726]
[1.53051126 -294.33114624]
[5.81476927 -279.95599365]
[10.41822720 -265.67984009]
[15.18043804 -251.45587158]
[20.10081100 -237.28584290]
[25.30840874 -231.95588684]
[24.96912575 -222.74494934]
[29.57258415 -208.46881104]
[34.17604065 -194.19267273]
[38.77949905 -179.91653442]
[43.38295746 -165.64039612]
[47.98641586 -151.36425781]
[58.45856476 -150.36149597]
[68.01750183 -145.87718201]
[75.53747559 -138.41085815]
[80.12327576 -128.81483459]
[81.21675110 -118.19706726]
[78.66462708 -107.79310608]
[72.73939514 -98.82244110]
[64.11044312 -92.34546661]
[67.42497253 -77.71625519]
[70.73950958 -63.08704376]
[74.05404663 -48.45783234]
[77.36858368 -33.82862091]
[80.68312073 -19.19940758]
[93.37985992 -11.49691296]
[96.94966888 3.29197168]
[88.78449249 16.55725479]
[92.09902954 31.18646622]
[95.41356659 45.81567764]
[98.72810364 60.44488907]
[108.04119110 61.24998474]
[116.90564728 64.21699524]
[124.82691956 69.18038940]
[131.36305237 75.86324310]
[136.14941406 83.89272308]
[138.91894531 92.82085419]
[139.51713562 102.14951324]
[137.91061401 111.35824585]
[134.18901062 119.93329620]
[128.55995178 127.39623260]
[121.33749390 133.33070374]
[126.88421631 147.26748657]
[139.38926697 148.75138855]
[149.99804688 155.40057373]
[156.70663452 165.88594055]
[158.27922058 178.16094971]
[154.47534180 189.86096191]
[146.08425903 198.75878906]
[151.00463867 212.92883301]
[155.92500305 227.09886169]
[160.84538269 241.26890564]
[165.76574707 255.43893433]
[170.68612671 269.60897827]
[183.11265564 271.64846802]
[193.41470337 278.76364136]
[199.64955139 289.53744507]
[200.67376709 301.87033081]
[196.35246277 313.38928223]
[187.57333374 321.90447998]
[191.85758972 336.27963257]
[196.14184570 350.65478516]
[200.42611694 365.02993774]
[212.70579529 375.89923096]
[209.16786194 391.91220093]
[193.45184326 396.59606934]
[181.72502136 385.13250732]
[186.05094910 369.31420898]
[181.76669312 354.93905640]
[177.48243713 340.56390381]
[173.19818115 326.18872070]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 123]
[4 122]
[5 121]
[6 120]
[7 119]
[8 118]
[12 112]
[13 111]
[15 28]
[16 27]
[17 26]
[18 25]
[19 24]
[31 100]
[32 99]
[33 98]
[34 97]
[37 94]
[38 93]
[39 92]
[40 91]
[41 90]
[42 89]
[46 81]
[47 80]
[48 79]
[49 78]
[50 77]
[51 76]
[52 74]
[53 73]
[55 72]
[56 71]
[59 70]
[60 69]
[61 68]
[62 67]
[129 140]
[130 139]
[131 138]
[132 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
