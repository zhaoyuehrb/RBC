%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 10:21:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCACAACCUUGCGGCAUGCAAAUGAGAUGGCCGCUCCAGGCCUGGAAUGUUCCGUGGCUGGGCCCCACGGGAAGCCUGAUGUUCAGGGUUGGGGUGGGACGGGCAGCGGUGGGGCACACCCAUUCCACAUGCAAAGGGCAGAAGCAAACCCAGUAAAAUGUUAACUGACUUCCAGCCUCACCCGUGGGCGGUCA\
) } def
/len { sequence length } bind def

/coor [
[54.72189713 215.33638000]
[50.68500900 229.78295898]
[46.64812469 244.22953796]
[50.38597870 259.60284424]
[39.50891113 269.77825928]
[35.47202682 284.22482300]
[40.06882858 299.96652222]
[28.54050255 311.62969971]
[12.74640083 307.21627808]
[8.93414116 291.26638794]
[21.02544975 280.18792725]
[25.06233406 265.74136353]
[21.03573608 251.40135193]
[32.20154953 240.19264221]
[36.23843384 225.74606323]
[40.27531815 211.29949951]
[28.47847366 220.56417847]
[13.88336658 224.02580261]
[-0.81764084 221.04582214]
[-12.91265678 212.17391968]
[-20.17051315 199.04670715]
[-21.25235748 184.08576965]
[-15.95861721 170.05094910]
[-5.26583052 159.53123474]
[8.85350513 154.46720886]
[23.79479790 155.79302979]
[36.80182648 163.26411438]
[45.47518921 175.50228882]
[48.21500778 190.24690247]
[54.72326279 176.73237610]
[61.23152161 163.21784973]
[67.73977661 149.70330811]
[74.24803162 136.18878174]
[80.75628662 122.67424011]
[87.26454163 109.15971375]
[79.38610840 96.39530182]
[64.38803101 96.15487671]
[49.38996124 95.91445923]
[34.39188766 95.67404175]
[19.39381409 95.43362427]
[10.75064564 98.42802429]
[4.15779257 95.06723785]
[-10.83450031 94.58646393]
[-25.83016586 94.22586060]
[-40.82823944 93.98544312]
[-55.82631302 93.74502563]
[-70.82438660 93.50460815]
[-84.88526154 101.94403076]
[-99.09120178 93.75115204]
[-98.82836151 77.35411072]
[-84.36711884 69.62077332]
[-70.58396912 78.50653076]
[-55.58589554 78.74694824]
[-40.58782196 78.98736572]
[-25.58974838 79.22778320]
[-18.84297180 76.18778992]
[-10.35372639 79.59416962]
[4.63856649 80.07494354]
[19.63423157 80.43555450]
[34.63230515 80.67597198]
[49.63037872 80.91638947]
[64.62844849 81.15680695]
[79.62652588 81.39722443]
[89.93766022 81.48404694]
[97.61179352 85.63907623]
[101.34653473 92.07069397]
[113.36773682 83.09903717]
[125.38893890 74.12738037]
[137.41014099 65.15572357]
[149.43135071 56.18406296]
[161.45254517 47.21240616]
[173.47375488 38.24074554]
[176.57675171 23.56520844]
[169.21598816 10.49542809]
[155.70234680 2.26790857]
[156.19850159 -12.61843109]
[148.83773804 -25.68821144]
[141.47697449 -38.75799179]
[134.11621094 -51.82777405]
[126.75545502 -64.89755249]
[113.71462250 -75.73143768]
[120.51506042 -91.26174927]
[137.32098389 -89.02629089]
[139.82524109 -72.25831604]
[147.18600464 -59.18853378]
[154.54675293 -46.11875534]
[161.90751648 -33.04897308]
[169.26828003 -19.97919464]
[182.25543213 -12.68651295]
[182.28576660 3.13466430]
[189.64653015 16.20444489]
[203.76461792 21.27193832]
[217.75680542 15.86650372]
[231.74899292 10.46106911]
[241.83374023 -1.72944295]
[256.49414062 0.90157765]
[270.48629761 -4.50385714]
[284.47848511 -9.90929222]
[298.47067261 -15.31472683]
[312.46286011 -20.72016144]
[326.36660767 -26.34916687]
[340.17837524 -32.20029449]
[353.99011230 -38.05142593]
[365.86596680 -47.21460342]
[375.02914429 -59.09046936]
[384.19232178 -70.96633148]
[393.26004028 -82.91525269]
[395.31329346 -98.60265350]
[409.12637329 -104.17470551]
[418.09805298 -116.19590759]
[426.87588501 -128.35935974]
[435.45764160 -140.66195679]
[444.03936768 -152.96453857]
[452.62112427 -165.26712036]
[451.23403931 -181.25009155]
[462.96398926 -192.19487000]
[478.81274414 -189.70555115]
[486.62249756 -175.69172668]
[480.40228271 -160.90359497]
[464.92370605 -156.68536377]
[456.34194946 -144.38278198]
[447.76022339 -132.08020020]
[439.17846680 -119.77761841]
[439.12234497 -114.99075317]
[436.05017090 -110.19105530]
[430.11926270 -107.22425079]
[421.14758301 -95.20304871]
[419.73605347 -80.37548065]
[405.28125000 -73.94358826]
[403.79824829 -66.69367981]
[396.06820679 -61.80315399]
[386.90502930 -49.92728806]
[377.74185181 -38.05142593]
[381.31701660 -31.45838547]
[396.31167603 -31.05803108]
[388.46734619 -18.27230644]
[392.04251099 -11.67926693]
[406.99435425 -12.88012123]
[421.94622803 -14.08097458]
[428.46359253 -27.98850250]
[441.07073975 -36.76091766]
[456.37640381 -38.03848648]
[470.26345825 -31.47754669]
[478.99630737 -18.84295845]
[480.22589111 -3.53336358]
[473.62145996 10.33303452]
[460.95956421 19.02624321]
[445.64617920 20.20783424]
[431.80056763 13.55996609]
[423.14706421 0.87087995]
[408.19522095 2.07173347]
[393.24337769 3.27258706]
[406.94058228 9.38704014]
[409.13250732 24.22602272]
[405.67129517 38.82123184]
[397.04949951 51.09577560]
[384.49395752 59.30299759]
[369.79132080 62.27501678]
[355.03381348 59.58891296]
[342.32135010 51.62692261]
[333.46292114 39.52202988]
[329.71908569 24.99674797]
[331.62261963 10.11801720]
[338.90258789 -2.99693155]
[350.52548218 -12.48312855]
[359.84124756 -24.23968124]
[346.02951050 -18.38855171]
[332.21774292 -12.53742218]
[329.62347412 -8.51412296]
[324.46859741 -6.08459806]
[317.86831665 -6.72797537]
[303.87612915 -1.32254052]
[289.88394165 4.08289433]
[275.89175415 9.48832893]
[261.89956665 14.89376354]
[252.81562805 26.69764328]
[237.15443420 24.45325470]
[223.16224670 29.85869026]
[209.17005920 35.26412582]
[205.26457214 45.68275833]
[195.06057739 51.84442902]
[182.44541931 50.26195145]
[170.42420959 59.23360825]
[158.40299988 68.20526886]
[146.38180542 77.17692566]
[134.36059570 86.14858246]
[122.33939362 95.12023926]
[110.31819153 104.09189606]
[100.77907562 115.66796875]
[94.27082062 129.18249512]
[87.76256561 142.69703674]
[81.25431061 156.21156311]
[74.74605560 169.72610474]
[68.23779297 183.24063110]
[61.72954178 196.75515747]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[5 12]
[6 11]
[29 195]
[30 194]
[31 193]
[32 192]
[33 191]
[34 190]
[35 189]
[36 63]
[37 62]
[38 61]
[39 60]
[40 59]
[42 58]
[43 57]
[44 55]
[45 54]
[46 53]
[47 52]
[66 188]
[67 187]
[68 186]
[69 185]
[70 184]
[71 183]
[72 182]
[73 91]
[74 90]
[76 88]
[77 87]
[78 86]
[79 85]
[80 84]
[92 179]
[93 178]
[94 177]
[96 175]
[97 174]
[98 173]
[99 172]
[100 171]
[101 168]
[102 167]
[103 166]
[104 133]
[105 132]
[106 131]
[107 129]
[109 127]
[110 126]
[111 123]
[112 122]
[113 121]
[114 120]
[137 152]
[138 151]
[139 150]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
