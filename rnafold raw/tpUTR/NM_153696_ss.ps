%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 19:47:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGAUUCUUUAGAGACUCUGUAUUGAAUUUGUGUGGUAUGUCACUCAAAGAAUAAUAAUGGGUAUAUUGAUAAAUUUUAAAAUUGGUAUAUUUGAAAUAAAGUUGAAUAUUAUAUAUA\
) } def
/len { sequence length } bind def

/coor [
[242.55575562 212.55873108]
[246.55459595 198.60498047]
[233.76499939 190.76750183]
[220.97540283 182.93002319]
[208.18579102 175.09254456]
[195.39619446 167.25506592]
[182.60659790 159.41758728]
[168.22857666 163.13356018]
[155.14645386 155.36743164]
[151.34629822 140.26126099]
[138.55668640 132.42378235]
[125.76708984 124.58630371]
[112.97748566 116.74882507]
[97.08409119 120.98656464]
[82.94800568 112.57646942]
[79.08852386 96.58700562]
[66.09814453 89.08700562]
[53.10776520 81.58700562]
[40.11738205 74.08700562]
[25.02853775 77.95540619]
[11.96128368 70.16428375]
[8.36634541 55.75553894]
[-4.62403584 48.25553894]
[-17.61441612 40.75553894]
[-30.60479736 33.25553894]
[-43.59518051 25.75553894]
[-60.34027863 30.60859680]
[-75.15430450 22.07112694]
[-79.18831635 5.80184317]
[-92.37057495 -1.35553801]
[-105.55283356 -8.51291943]
[-118.73508453 -15.67030048]
[-134.55484009 -15.45550156]
[-142.04785156 -28.32810402]
[-155.23011780 -35.48548508]
[-168.41236877 -42.64286423]
[-183.49275208 -37.91445923]
[-197.46078491 -45.30834961]
[-202.02947998 -60.43787003]
[-194.48832703 -74.32695007]
[-179.31135559 -78.73544312]
[-165.50277710 -71.04786682]
[-161.25498962 -55.82512283]
[-148.07273865 -48.66773987]
[-134.89047241 -41.51036072]
[-120.01361084 -42.23710251]
[-111.57770538 -28.85255814]
[-98.39544678 -21.69517517]
[-85.21319580 -14.53779507]
[-72.03093719 -7.38041353]
[-60.23776245 -12.74670506]
[-47.32180023 -10.26595879]
[-38.08536911 -0.63054758]
[-36.09518051 12.76515770]
[-23.10479736 20.26515770]
[-10.11441708 27.76515770]
[2.87596440 35.26515961]
[15.86634541 42.76515961]
[30.14215660 38.67409134]
[43.42309189 46.09510422]
[47.61738205 61.09662628]
[60.60776520 68.59662628]
[73.59814453 76.09662628]
[86.58852386 83.59662628]
[98.42616272 78.87036896]
[110.83335876 81.79075623]
[119.32005310 91.30092621]
[120.81496429 103.95922089]
[133.60456848 111.79669952]
[146.39416504 119.63417816]
[159.18377686 127.47165680]
[174.36871338 123.99956512]
[187.22753906 132.13008118]
[190.44407654 146.62799072]
[203.23367310 154.46546936]
[216.02326965 162.30294800]
[228.81288147 170.14042664]
[241.60247803 177.97790527]
[254.39207458 185.81538391]
[265.96655273 175.25230408]
[280.02575684 168.36509705]
[295.43789673 165.69912720]
[310.96487427 167.46034241]
[325.36169434 173.49934387]
[337.47619629 183.32406616]
[346.34136963 196.13983154]
[351.25253296 210.91363525]
[351.82330322 226.45741272]
[348.01593018 241.52355957]
[361.00631714 249.02355957]
[373.99667358 256.52355957]
[386.98706055 264.02355957]
[399.97744751 271.52355957]
[412.96783447 279.02355957]
[425.95822144 286.52355957]
[438.94857788 294.02355957]
[453.58023071 288.50552368]
[468.31848145 293.73226929]
[476.20431519 307.23587036]
[473.51434326 322.64035034]
[461.51864624 332.67218018]
[445.88125610 332.59463501]
[433.98565674 322.44433594]
[431.44857788 307.01394653]
[418.45822144 299.51394653]
[405.46783447 292.01394653]
[392.47744751 284.51394653]
[379.48706055 277.01394653]
[366.49667358 269.51394653]
[353.50631714 262.01394653]
[340.51593018 254.51394653]
[330.29959106 264.65316772]
[317.78692627 271.79187012]
[303.83630371 275.43304443]
[289.40655518 275.31988525]
[275.49127197 271.45385742]
[263.05017090 264.09503174]
[252.94305420 253.74455261]
[245.87033081 241.11068726]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 79]
[3 78]
[4 77]
[5 76]
[6 75]
[7 74]
[10 71]
[11 70]
[12 69]
[13 68]
[16 64]
[17 63]
[18 62]
[19 61]
[22 58]
[23 57]
[24 56]
[25 55]
[26 54]
[29 50]
[30 49]
[31 48]
[32 47]
[34 45]
[35 44]
[36 43]
[89 111]
[90 110]
[91 109]
[92 108]
[93 107]
[94 106]
[95 105]
[96 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
