%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 02:33:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCUUGCACUCUCCCUGCCCCCCGGACGCCGCCCAGCUUGCUUGUGUAUAAGUUGUAUUUAAUGGUUCUGUAACAAUAA\
) } def
/len { sequence length } bind def

/coor [
[63.22311020 231.06480408]
[54.41900635 233.60791016]
[45.30284882 234.48449707]
[36.18708420 233.66670227]
[27.38374710 231.18466187]
[19.19378471 227.12544250]
[11.89676094 221.63003540]
[5.74131870 214.88836670]
[-7.43636513 222.05415344]
[-20.61404991 229.21995544]
[-23.54436684 244.58053589]
[-35.69531250 254.42372131]
[-51.32958603 254.10188293]
[-63.06515503 243.76696777]
[-65.36084747 228.29881287]
[-57.13270569 215.00100708]
[-42.26580811 210.15237427]
[-27.77984619 216.04226685]
[-14.60216236 208.87648010]
[-1.42447877 201.71067810]
[-4.07869720 178.97154236]
[3.82814288 157.43074036]
[20.64022255 141.73696899]
[42.77449417 135.29983521]
[65.48424530 139.54920959]
[73.63775635 126.95873260]
[81.79127502 114.36825562]
[89.94478607 101.77777100]
[91.39577484 93.62084198]
[98.65951538 88.86951447]
[107.28929138 76.60057068]
[115.91907501 64.33163452]
[124.54885101 52.06269455]
[118.76365662 31.30362701]
[129.46261597 12.90414333]
[149.84970093 7.79346323]
[155.98573303 -5.89409065]
[162.12176514 -19.58164597]
[168.25778198 -33.26919937]
[174.39381409 -46.95675278]
[180.52984619 -60.64430618]
[186.66587830 -74.33186340]
[178.82518005 -87.72227478]
[180.38610840 -103.16063690]
[190.74845886 -114.71059418]
[205.92768860 -117.93093872]
[220.08708191 -111.58338928]
[227.78204346 -98.10870361]
[226.05374146 -82.68818665]
[215.56669617 -71.25131989]
[200.35342407 -68.19583130]
[194.21740723 -54.50827789]
[188.08137512 -40.82072449]
[181.94534302 -27.13316917]
[175.80931091 -13.44561577]
[169.67327881 0.24193868]
[163.53724670 13.92949295]
[169.57763672 21.00827789]
[172.86351013 29.76191139]
[172.97418213 39.15564728]
[169.86625671 48.06804276]
[163.88238525 55.42484283]
[155.71369934 60.32845306]
[146.32019043 62.16740799]
[136.81779480 60.69247437]
[128.18801880 72.96141052]
[119.55823517 85.23035431]
[110.92845154 97.49929047]
[102.53526306 109.93128967]
[94.38175201 122.52176666]
[86.22824097 135.11224365]
[78.07472992 147.70272827]
[84.35900116 154.46047974]
[89.28723907 162.25561523]
[92.69244385 170.81999207]
[94.45999908 179.85948181]
[94.53144836 189.06405640]
[92.90651703 198.11842346]
[89.64295959 206.71284485]
[84.85457611 214.55369568]
[78.70720673 221.37353516]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 20]
[9 19]
[10 18]
[25 72]
[26 71]
[27 70]
[28 69]
[30 68]
[31 67]
[32 66]
[33 65]
[36 57]
[37 56]
[38 55]
[39 54]
[40 53]
[41 52]
[42 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
