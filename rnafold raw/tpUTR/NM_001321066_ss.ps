%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 15:25:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACCUGAAGGGUGACAUCCCAGGAGGGGCCUCUGAAAUUUCCCACACCCCAGCGCCUGUGCUGAGGACUCCCUCCAUGUGGCCCCAGGUGCCACCAAUAAAAAUCCUACAGAAAAUUC\
) } def
/len { sequence length } bind def

/coor [
[236.18588257 281.84387207]
[226.74607849 270.18667603]
[217.15449524 258.65405273]
[207.41278076 247.24797058]
[197.67105103 235.84187317]
[187.92933655 224.43579102]
[178.18760681 213.02969360]
[173.46400452 211.76948547]
[169.53059387 207.45358276]
[168.25360107 200.76220703]
[159.12217712 188.86190796]
[149.99075317 176.96160889]
[140.85932922 165.06130981]
[126.97304535 159.67425537]
[124.71044922 144.01567078]
[115.57902527 132.11537170]
[106.44760132 120.21507263]
[97.31618500 108.31477356]
[94.19344330 107.68173218]
[91.24837494 105.84062958]
[88.95084381 102.86198425]
[87.73492432 98.99708557]
[87.93078613 94.65893555]
[80.09330750 81.86933899]
[72.25582886 69.07973480]
[64.41835022 56.29013062]
[56.58087158 43.50053024]
[48.74339294 30.71092606]
[40.73917389 18.02500916]
[32.40562057 5.55296469]
[23.90952873 -6.80892801]
[15.41343498 -19.17082024]
[6.91734123 -31.53271294]
[6.72154999 -16.53399086]
[2.00385761 -2.29519320]
[-6.79489183 9.85313988]
[-18.85250092 18.77581024]
[-33.04225159 23.63904190]
[-48.03818130 23.98838997]
[-62.43900299 19.79121017]
[-74.89903259 11.43970680]
[-84.25395203 -0.28571570]
[-89.62958527 -14.28937817]
[-90.52361298 -29.26271248]
[-86.85248566 -43.80653763]
[-78.95925903 -56.56180954]
[-67.58151245 -66.33661652]
[-53.78243637 -72.21755219]
[-38.85147476 -73.65507507]
[-24.18385696 -70.51485443]
[-11.15019226 -63.09033203]
[-0.96795797 -52.07461929]
[-2.92585087 -66.94629669]
[-4.88374376 -81.81797028]
[-17.57312775 -91.23896027]
[-19.80154991 -106.88535309]
[-10.24692535 -119.47442627]
[5.42215633 -121.53730011]
[17.90950584 -111.85010529]
[19.80660057 -96.16009521]
[9.98792934 -83.77585602]
[11.94582176 -68.90419006]
[13.90371513 -54.03251266]
[19.27923393 -40.02880859]
[27.77532768 -27.66691399]
[36.27141953 -15.30502129]
[44.76751328 -2.94312882]
[51.22871780 0.83353841]
[53.31923294 9.85542297]
[59.67936325 13.79993153]
[61.53299713 22.87344742]
[69.37047577 35.66305161]
[77.20795441 48.45265198]
[85.04543304 61.24225616]
[92.88291168 74.03186035]
[100.72039032 86.82145691]
[109.21648407 99.18334961]
[118.34790039 111.08365631]
[127.47932434 122.98395538]
[136.61074829 134.88424683]
[151.15017700 141.12249756]
[152.75962830 155.92988586]
[161.89105225 167.83018494]
[171.02247620 179.73048401]
[180.15390015 191.63078308]
[189.59370422 203.28797913]
[199.33541870 214.69407654]
[209.07714844 226.10015869]
[218.81886292 237.50624084]
[228.56057739 248.91233826]
[236.61720276 253.47912598]
[238.40327454 260.74688721]
[247.84307861 272.40408325]
[261.30822754 265.65844727]
[275.90881348 261.96557617]
[290.96191406 261.49816895]
[305.76345825 264.27813721]
[319.62115479 270.17541504]
[331.88690186 278.91418457]
[341.98693848 290.08569336]
[349.44891357 303.16748047]
[353.92379761 317.54766846]
[355.20230103 332.55364990]
[353.22463989 347.48358154]
[348.08328247 361.63916016]
[340.01870728 374.35830688]
[329.40811157 385.04611206]
[316.74777222 393.20272827]
[302.62985229 398.44659424]
[287.71466064 400.53250122]
[272.69979858 399.36285400]
[258.28756714 394.99237061]
[245.15200806 387.62545776]
[233.90751648 377.60668945]
[225.08003235 365.40466309]
[219.08241272 351.59008789]
[216.19519043 336.80908203]
[216.55340576 321.75299072]
[220.14028931 307.12600708]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 93]
[2 92]
[3 90]
[4 89]
[5 88]
[6 87]
[7 86]
[10 85]
[11 84]
[12 83]
[13 82]
[15 80]
[16 79]
[17 78]
[18 77]
[23 76]
[24 75]
[25 74]
[26 73]
[27 72]
[28 71]
[29 69]
[30 67]
[31 66]
[32 65]
[33 64]
[52 63]
[53 62]
[54 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
