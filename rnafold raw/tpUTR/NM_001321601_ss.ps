%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 19:56:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAUCCCGGCAGAAGCAGCACCAGAGAACAUCUUUGCCAAGUGCUGCUCUGUCAUUGAGAGUCUGCAGUGAGACAGAGGGGCUGGGGGUGGGCCUUGCCCCUCACCGGAACCCGUGCAGUACGUGGGAAGGGUGCGU\
) } def
/len { sequence length } bind def

/coor [
[84.11501312 238.82196045]
[83.92491150 223.01881409]
[95.02463531 211.76840210]
[94.68564606 196.77223206]
[94.34664917 181.77606201]
[94.00765991 166.77989197]
[93.66867065 151.78372192]
[66.36594391 139.87969971]
[50.02656174 114.97649384]
[35.18813705 117.17221069]
[20.34971428 119.36792755]
[5.51129055 121.56364441]
[-9.32713318 123.75936127]
[-24.16555786 125.95507812]
[-32.27684021 130.34025574]
[-39.36374664 128.02880859]
[-54.24800491 129.88862610]
[-69.13226318 131.74844360]
[-84.01651764 133.60824585]
[-98.90077209 135.46806335]
[-113.78502655 137.32788086]
[-128.66928101 139.18769836]
[-143.45429993 141.71820068]
[-158.10986328 144.91419983]
[-172.76542664 148.11021423]
[-187.42098999 151.30622864]
[-202.07655334 154.50222778]
[-216.73211670 157.69824219]
[-230.91926575 166.98052979]
[-243.76620483 155.91741943]
[-236.69181824 140.50997925]
[-219.92811584 143.04267883]
[-205.27255249 139.84666443]
[-190.61698914 136.65066528]
[-175.96142578 133.45465088]
[-161.30586243 130.25863647]
[-146.65029907 127.06263733]
[-145.01828003 124.68520355]
[-142.30650330 122.83996582]
[-138.72375488 121.95679474]
[-134.63589478 122.37776184]
[-130.52909851 124.30344391]
[-115.64484406 122.44362640]
[-100.76058960 120.58381653]
[-85.87633514 118.72399902]
[-70.99207306 116.86418152]
[-56.10781860 115.00436401]
[-41.22356415 113.14454651]
[-26.36127472 111.11665344]
[-11.52285099 108.92093658]
[3.31557345 106.72521973]
[18.15399742 104.52950287]
[32.99242020 102.33378601]
[47.83084488 100.13806915]
[48.58579254 91.15583801]
[50.87563324 82.43763733]
[54.63200760 74.24373627]
[59.74277496 66.81874847]
[66.05535889 60.38433456]
[73.38130188 55.13258743]
[81.50191498 51.22028732]
[90.17475128 48.76422882]
[89.49694061 33.77954865]
[88.81912994 18.79487228]
[88.14131927 3.81019449]
[76.30486298 -6.66233444]
[75.42382812 -22.44204712]
[86.02091217 -34.16711807]
[101.80905914 -34.88127518]
[113.42144012 -24.16081429]
[113.96862793 -8.36600208]
[103.12599945 3.13238382]
[103.80381012 18.11706161]
[104.48162079 33.10173798]
[105.15943146 48.08641815]
[122.78707123 53.07038116]
[137.60510254 63.84068680]
[149.79986572 55.10639191]
[161.99461365 46.37209702]
[174.18937683 37.63780212]
[186.38412476 28.90350723]
[198.57888794 20.16921234]
[210.77365112 11.43491745]
[217.48764038 -2.89103341]
[232.34002686 -4.01165009]
[244.53479004 -12.74594498]
[256.72955322 -21.48023987]
[259.06005859 -37.11175156]
[271.81066895 -46.44970322]
[287.41668701 -43.95404816]
[296.61929321 -31.10541916]
[293.95880127 -15.52667618]
[281.01358032 -6.46041298]
[265.46383667 -9.28548241]
[253.26907349 -0.55118769]
[241.07432556 8.18310738]
[235.23257446 21.88432312]
[219.50793457 23.62967491]
[207.31318665 32.36396790]
[195.11842346 41.09826279]
[182.92367554 49.83255768]
[170.72891235 58.56685257]
[158.53414917 67.30114746]
[146.33940125 76.03544617]
[149.06599426 82.27522278]
[150.95664978 88.81698608]
[151.97914124 95.54927826]
[152.11604309 102.35739899]
[151.36505127 109.12535095]
[149.73892212 115.73783112]
[147.26538086 122.08219147]
[143.98657227 128.05032349]
[155.34298706 137.84992981]
[166.69938660 147.64952087]
[178.05578613 157.44911194]
[189.41218567 167.24871826]
[200.76858521 177.04830933]
[216.80950928 177.30967712]
[226.49203491 190.10139465]
[222.38854980 205.61077881]
[207.64689636 211.94035339]
[193.57562256 204.23458862]
[190.96899414 188.40472412]
[179.61259460 178.60511780]
[168.25617981 168.80552673]
[156.89978027 159.00592041]
[145.54338074 149.20632935]
[134.18698120 139.40672302]
[126.46397400 144.95884705]
[117.86127472 149.01647949]
[108.66483307 151.44473267]
[109.00382996 166.44090271]
[109.34281921 181.43707275]
[109.68180847 196.43324280]
[110.02080536 211.42941284]
[121.61756134 222.16676331]
[122.14176178 237.96235657]
[111.28240204 249.44494629]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 135]
[4 134]
[5 133]
[6 132]
[7 131]
[9 54]
[10 53]
[11 52]
[12 51]
[13 50]
[14 49]
[16 48]
[17 47]
[18 46]
[19 45]
[20 44]
[21 43]
[22 42]
[23 37]
[24 36]
[25 35]
[26 34]
[27 33]
[28 32]
[62 75]
[63 74]
[64 73]
[65 72]
[77 104]
[78 103]
[79 102]
[80 101]
[81 100]
[82 99]
[83 98]
[85 96]
[86 95]
[87 94]
[112 128]
[113 127]
[114 126]
[115 125]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
