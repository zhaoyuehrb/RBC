%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 22:51:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAGCGAUGAAGAGGAAGAAGAUGAUGAUUGAAGUAUGAAAUAUGAAAACAUUUUAUAUAUUUUAUUGUACAGUUAUAAAUAUGUAAACAUGAGUUAUUUUGAUUGAAAUGAAUCGAUUUGCUUUUGUGUAAUUUUAAUUGUAAUAAAACAAUUUAAAAGCAA\
) } def
/len { sequence length } bind def

/coor [
[76.58381653 178.13923645]
[65.68495941 166.69412231]
[66.15473175 150.89682007]
[77.71443176 140.11956787]
[78.00175476 125.12232971]
[70.55953979 138.14590454]
[63.11732864 151.16947937]
[61.07645035 166.02998352]
[54.42711639 179.47566223]
[43.85611725 190.11775208]
[30.45529938 196.85704041]
[15.60879993 198.99746704]
[0.85006803 196.31794739]
[-12.29650688 189.09524536]
[-22.47305298 178.07534790]
[-28.62846184 164.39649963]
[-30.12696075 149.47154236]
[-26.81377220 134.84202576]
[-19.03110695 122.01898956]
[-7.58281565 112.32689667]
[6.34864187 106.76682281]
[21.32432365 105.91303253]
[35.79583740 109.85300446]
[50.69350052 108.10380554]
[65.59116364 106.35461426]
[51.67862320 100.74735260]
[37.76608658 95.14009857]
[23.85354996 89.53284454]
[9.94101429 83.92558289]
[-3.97152281 78.31832886]
[-17.88405991 72.71107483]
[-29.99193954 82.05700684]
[-45.05272293 84.07432556]
[-59.00836182 78.32049561]
[-68.14904785 66.43336487]
[-70.09930420 51.66644287]
[-84.01184082 46.05918503]
[-97.92437744 40.45192719]
[-111.83691406 34.84467316]
[-125.74945068 29.23741722]
[-139.66198730 23.63016129]
[-153.57452393 18.02290535]
[-167.48706055 12.41564846]
[-181.39959717 6.80839252]
[-195.31213379 1.20113635]
[-209.27774048 -4.27260971]
[-223.29512024 -9.61234379]
[-237.31251526 -14.95207882]
[-253.40834045 -11.81253910]
[-263.96960449 -24.35811996]
[-258.13180542 -39.68300247]
[-241.90034485 -42.02226257]
[-231.97277832 -28.96946907]
[-217.95539856 -23.62973404]
[-203.93800354 -18.29000092]
[-196.53332520 -18.85017586]
[-189.70487976 -12.71140003]
[-175.79234314 -7.10414410]
[-161.87980652 -1.49688816]
[-147.96726990 4.11036777]
[-134.05473328 9.71762371]
[-120.14218903 15.32487965]
[-106.22965240 20.93213654]
[-92.31711578 26.53939247]
[-78.40457916 32.14664841]
[-64.49204254 37.75390244]
[-52.84697723 28.46638489]
[-38.01799393 26.23990059]
[-23.97276497 31.77143478]
[-14.52001572 43.66859055]
[-12.27680397 58.79853821]
[1.63573325 64.40579224]
[15.54827023 70.01304626]
[29.46080589 75.62030792]
[43.37334442 81.22756195]
[57.28588104 86.83481598]
[71.19841766 92.44207001]
[58.07230759 85.18223572]
[49.14602661 73.12729645]
[46.03152466 58.45420074]
[49.29123306 43.81267166]
[58.33649826 31.84675407]
[71.53388214 24.71730804]
[86.50014496 23.71179962]
[100.53260040 29.01181030]
[111.09721375 39.66024017]
[116.28616333 53.73414230]
[115.16232300 68.69230652]
[127.75279999 60.53879547]
[140.34327698 52.38528442]
[147.72093201 38.38953400]
[162.60949707 37.96582413]
[175.19998169 29.81231308]
[187.79046631 21.65879822]
[200.38095093 13.50528622]
[200.09786987 -0.30188349]
[206.63299561 -12.34463501]
[218.17938232 -19.51805878]
[231.65441895 -20.03330231]
[243.52250671 -13.86251831]
[256.26684570 -21.77336693]
[269.01119995 -29.68421364]
[281.75555420 -37.59506226]
[294.49990845 -45.50590897]
[307.24426270 -53.41675949]
[310.60083008 -68.86049652]
[323.93963623 -77.33701324]
[339.34704590 -73.81735229]
[347.68206787 -60.38965988]
[343.99969482 -45.02034760]
[330.48461914 -36.82775879]
[315.15509033 -40.67240906]
[302.41076660 -32.76155853]
[289.66641235 -24.85071182]
[276.92205811 -16.93986320]
[264.17770386 -9.02901554]
[251.43334961 -1.11816728]
[250.77536011 15.26303387]
[240.39215088 28.16392136]
[224.20921326 32.39224243]
[208.53445435 26.09576797]
[195.94398499 34.24927902]
[183.35350037 42.40279388]
[170.76301575 50.55630875]
[164.28593445 63.96886063]
[148.49679565 64.97576141]
[135.90631104 73.12928009]
[123.31583405 81.28279114]
[122.17096710 88.69489288]
[136.99513245 90.98487854]
[134.70489502 105.80901337]
[119.88122559 103.51910400]
[118.73635864 110.93120575]
[128.27999878 122.50354004]
[137.82362366 134.07588196]
[147.36726379 145.64822388]
[156.91090393 157.22055054]
[166.45454407 168.79289246]
[176.10858154 180.27328491]
[185.87213135 191.66070557]
[195.63568115 203.04811096]
[205.39923096 214.43551636]
[221.17434692 215.39526367]
[231.58769226 227.28382874]
[230.46121216 243.04792786]
[218.46321106 253.33499146]
[202.71191406 252.04190063]
[192.55227661 239.93582153]
[194.01182556 224.19906616]
[184.24827576 212.81166077]
[174.48472595 201.42425537]
[164.72117615 190.03684998]
[157.94845581 186.99160767]
[154.88220215 178.33653259]
[145.33856201 166.76419067]
[135.79492188 155.19184875]
[126.25128937 143.61952209]
[116.70765686 132.04718018]
[107.16401672 120.47483826]
[92.99900055 125.40965271]
[92.71167755 140.40689087]
[103.85009766 151.61900330]
[103.71444702 167.42269897]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 161]
[5 160]
[25 77]
[26 76]
[27 75]
[28 74]
[29 73]
[30 72]
[31 71]
[36 66]
[37 65]
[38 64]
[39 63]
[40 62]
[41 61]
[42 60]
[43 59]
[44 58]
[45 57]
[46 55]
[47 54]
[48 53]
[88 128]
[89 127]
[90 126]
[92 124]
[93 123]
[94 122]
[95 121]
[100 117]
[101 116]
[102 115]
[103 114]
[104 113]
[105 112]
[133 159]
[134 158]
[135 157]
[136 156]
[137 155]
[138 154]
[139 152]
[140 151]
[141 150]
[142 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
