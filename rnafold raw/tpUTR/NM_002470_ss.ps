%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 18:08:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAGCCCUUCUGGAGCAGGACAGAAGAUAUGCAAAAUGUAUAUUUUCUUGAUUCCUGACCAUUGAUACUUAAUGUCCAUGUGACUCUUUUUCACAUGCAAUAAACUUUGCUUUGUUUCAAUCUGGG\
) } def
/len { sequence length } bind def

/coor [
[110.77945709 215.94950867]
[116.82579803 200.11038208]
[116.82579803 185.11038208]
[116.82579803 170.11038208]
[116.82579803 155.11038208]
[98.65867615 151.36866760]
[84.58016205 142.43594360]
[77.18668365 155.48725891]
[77.86184692 171.87249756]
[63.86645126 180.42007446]
[49.59776688 172.33695984]
[49.73418808 155.93836975]
[64.13538361 148.09378052]
[71.52885437 135.04248047]
[61.69713593 123.90547943]
[56.01206207 110.18048859]
[55.08908844 95.35337067]
[40.63244629 91.35267639]
[26.17580605 87.35198212]
[11.71916580 83.35129547]
[-2.73747563 79.35060120]
[-17.28794479 75.70590210]
[-31.92347717 72.41938019]
[-46.59823608 69.31271362]
[-61.31001663 66.38635254]
[-76.02179718 63.45999908]
[-90.73357391 60.53364563]
[-105.44535065 57.60729218]
[-120.15713501 54.68093491]
[-134.86891174 51.75458145]
[-149.58068848 48.82822800]
[-164.29246521 45.90187073]
[-179.00425720 42.97551727]
[-193.71603394 40.04916000]
[-210.43040466 42.88926315]
[-217.78649902 27.61431313]
[-205.14488220 16.31715965]
[-190.78967285 25.33738327]
[-176.07789612 28.26373672]
[-161.36611938 31.19009209]
[-146.65434265 34.11644745]
[-131.94255066 37.04280090]
[-117.23078156 39.96915817]
[-102.51899719 42.89551163]
[-87.80722046 45.82186508]
[-73.09544373 48.74822235]
[-58.38366318 51.67457581]
[-43.67188263 54.60092926]
[-36.42147064 52.80125809]
[-28.63695717 57.78384781]
[-14.00142574 61.07036591]
[-9.47915173 59.25689316]
[-3.76447773 60.34100342]
[1.26321566 64.89395905]
[15.71985626 68.89465332]
[30.17649841 72.89534760]
[44.63314056 76.89603424]
[59.08977890 80.89672852]
[69.35156250 66.84499359]
[84.16503143 57.71720505]
[101.33019257 54.86894989]
[104.25654602 40.15716934]
[107.18289948 25.44539070]
[110.10925293 10.73361111]
[113.03560638 -3.97816801]
[115.96196747 -18.68994713]
[113.12186432 -35.40431595]
[128.39682007 -42.76042175]
[139.69396973 -30.11879730]
[130.67373657 -15.76359272]
[127.74739075 -1.05181313]
[124.82103729 13.65996647]
[121.89467621 28.37174606]
[118.96832275 43.08352280]
[116.04196930 57.79530334]
[129.15527344 61.53170013]
[141.31007385 69.43829346]
[151.16876221 81.22664642]
[157.49497986 96.18042755]
[171.35317993 90.44017029]
[185.21136475 84.69992065]
[199.06956482 78.95967102]
[212.92774963 73.21942139]
[226.78594971 67.47916412]
[231.31538391 52.51192856]
[244.43409729 44.00115204]
[259.94784546 45.96535873]
[270.53146362 57.47711563]
[271.18774414 73.10092163]
[261.60678101 85.45969391]
[246.31242371 88.71799469]
[232.52619934 81.33735657]
[218.66799927 87.07761383]
[204.80981445 92.81786346]
[190.95161438 98.55811310]
[177.09342957 104.29836273]
[163.23522949 110.03862000]
[163.05116272 125.03749084]
[176.76429749 131.11610413]
[190.47744751 137.19473267]
[204.19059753 143.27334595]
[218.84382629 137.35234070]
[233.35917664 143.60377502]
[239.12492371 158.31878662]
[232.72036743 172.76722717]
[217.94522095 178.37707520]
[203.56530762 171.82012939]
[198.11198425 156.98649597]
[184.39883423 150.90786743]
[170.68568420 144.82925415]
[156.97253418 138.75064087]
[150.68585205 142.84057617]
[159.80603027 154.74949646]
[168.92619324 166.65841675]
[182.59423828 172.83778381]
[186.88519287 187.21093750]
[178.84173584 199.87202454]
[164.00738525 202.09509277]
[152.60586548 192.34803772]
[152.49525452 177.34791565]
[145.30386353 164.18418884]
[138.11248779 151.02044678]
[131.82579041 155.11038208]
[131.82579041 170.11038208]
[131.82579041 185.11038208]
[131.82579041 200.11038208]
[137.87213135 215.94950867]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 126]
[3 125]
[4 124]
[5 123]
[7 14]
[8 13]
[17 58]
[18 57]
[19 56]
[20 55]
[21 54]
[22 51]
[23 50]
[24 48]
[25 47]
[26 46]
[27 45]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[33 39]
[34 38]
[61 75]
[62 74]
[63 73]
[64 72]
[65 71]
[66 70]
[79 97]
[80 96]
[81 95]
[82 94]
[83 93]
[84 92]
[98 111]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
