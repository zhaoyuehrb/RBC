%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 22:57:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCAGGAAAGCCCCCCUCACUGUCCCUGGUACCGCUGCCAACACCCAUUGACCUCCUCGUUUUUGCCCGCCUUCUCCAAGUAAAUUUUCCCUUUUAUUUA\
) } def
/len { sequence length } bind def

/coor [
[241.71006775 216.41276550]
[229.73980713 207.37324524]
[216.07658386 213.30468750]
[201.17982483 211.58930969]
[189.06173706 202.58830261]
[183.03646851 188.63864136]
[184.81414795 173.44696045]
[172.84388733 164.40744019]
[160.87362671 155.36791992]
[148.90336609 146.32839966]
[136.93312073 137.28887939]
[124.96286011 128.24937439]
[110.31462860 136.25988770]
[93.64335632 137.15863037]
[78.21884155 130.76933289]
[67.06632996 118.34514618]
[62.37321091 102.32286072]
[65.05995941 85.84498596]
[52.55592346 77.55950928]
[40.05188751 69.27403259]
[24.27421761 68.10113525]
[17.93854713 54.62120438]
[5.43451071 46.33572769]
[-9.20350075 53.84494781]
[-25.54029083 53.00338364]
[-39.17283249 44.13155746]
[-46.47396088 29.70162010]
[-45.55723572 13.64918804]
[-58.31049347 5.75270605]
[-71.06375122 -2.14377666]
[-83.81700897 -10.04025936]
[-96.57025909 -17.93674088]
[-112.96936798 -17.90065002]
[-120.96502686 -32.21852493]
[-112.33199310 -46.16135788]
[-95.95118713 -45.38596344]
[-88.67378235 -30.68999863]
[-75.92052460 -22.79351616]
[-63.16726685 -14.89703369]
[-50.41400909 -7.00055122]
[-37.66075134 0.89593124]
[-25.99328995 -6.37874889]
[-12.25976372 -7.88683987]
[0.83377546 -3.27320862]
[10.68223476 6.60532093]
[15.29975796 19.83845901]
[13.71998501 33.83169174]
[26.22402000 42.11716843]
[41.10731888 42.69743729]
[48.33736038 56.77000046]
[60.84139633 65.05547333]
[73.34543610 73.34095001]
[84.11397552 65.81221008]
[96.81234741 62.43658829]
[109.89795685 63.62416458]
[121.78115845 69.23066711]
[131.01840210 78.57501984]
[136.48753357 90.52207184]
[137.52416992 103.62049866]
[134.00238037 116.27910614]
[145.97264099 125.31862640]
[157.94288635 134.35815430]
[169.91314697 143.39767456]
[181.88340759 152.43719482]
[193.85366821 161.47669983]
[207.97892761 155.60949707]
[223.04496765 157.58723450]
[235.01863098 166.77949524]
[240.74522400 180.63813782]
[238.77932739 195.40299988]
[250.74958801 204.44250488]
[259.14431763 200.23229980]
[268.42111206 199.08666992]
[277.50186157 201.10897827]
[285.34115601 206.03613281]
[291.04672241 213.27241516]
[293.98092651 221.96136475]
[293.83187866 231.08708191]
[290.64636230 239.59301758]
[301.08837891 250.36169434]
[311.53039551 261.13037109]
[321.97238159 271.89904785]
[332.41439819 282.66772461]
[342.85641479 293.43640137]
[353.29843140 304.20507812]
[368.64041138 301.88073730]
[382.40304565 309.04800415]
[389.29431152 322.95089722]
[386.66436768 338.24346924]
[375.52447510 349.04544067]
[360.15814209 351.20318604]
[346.47406006 343.88708496]
[339.73403931 329.91024780]
[342.52975464 314.64709473]
[332.08773804 303.87841797]
[321.64572144 293.10974121]
[311.20370483 282.34106445]
[300.76171875 271.57238770]
[290.31970215 260.80371094]
[279.87768555 250.03503418]
[258.87292480 252.03479004]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[2 70]
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[18 52]
[19 51]
[20 50]
[22 48]
[23 47]
[28 41]
[29 40]
[30 39]
[31 38]
[32 37]
[79 100]
[80 99]
[81 98]
[82 97]
[83 96]
[84 95]
[85 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
