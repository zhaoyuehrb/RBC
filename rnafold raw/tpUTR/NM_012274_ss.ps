%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:25:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACUGGGUCCCAGAGCCUUGAAGGGAACCUCACAGGCUUAGCCAGGGCAAAAAUGUGUCACAGCUGAGGAAUAUCUGCUGUUGUCAUCAACAAGUGCUAUUAAAGGAUGUAAAUCCAUGAGUA\
) } def
/len { sequence length } bind def

/coor [
[51.71350098 141.70606995]
[58.52240753 128.34048462]
[70.91231537 119.88594818]
[81.20951080 108.97872162]
[66.94366455 113.61397552]
[52.67781830 118.24922943]
[38.41196823 122.88448334]
[27.67818260 134.50758362]
[13.18287086 131.08190918]
[10.24477386 134.62249756]
[6.66917467 136.75755310]
[3.00103807 137.46252441]
[-0.26681259 136.90069580]
[-2.75300241 135.38771057]
[-17.41202354 138.56782532]
[-32.07104492 141.74792480]
[-46.73006821 144.92803955]
[-61.38909149 148.10813904]
[-76.04811096 151.28823853]
[-90.66601562 154.65231323]
[-105.24049377 158.19979858]
[-119.81496429 161.74728394]
[-127.51509857 166.87124634]
[-134.80024719 165.19589233]
[-149.45927429 168.37599182]
[-163.65647888 177.64289856]
[-176.49140930 166.56585693]
[-169.40032959 151.16607666]
[-152.63937378 153.71696472]
[-137.98036194 150.53686523]
[-123.36244965 147.17280579]
[-108.78797913 143.62532043]
[-94.21350098 140.07783508]
[-88.39352417 135.38653564]
[-79.22821808 136.62922668]
[-64.56919861 133.44911194]
[-49.91017532 130.26901245]
[-35.25115204 127.08890533]
[-20.59213066 123.90879822]
[-5.93310881 120.72869110]
[8.54761600 116.81607056]
[18.26101303 105.52451324]
[33.77671432 108.61863708]
[48.04256058 103.98338318]
[62.30841064 99.34812927]
[76.57425690 94.71287537]
[99.79948425 75.98586273]
[107.35382843 63.02700806]
[114.90818024 50.06815720]
[122.46252441 37.10930634]
[114.11924744 22.89575195]
[114.04979706 6.50803518]
[122.17902374 -7.61364222]
[136.22308350 -15.69027424]
[152.33026123 -15.61517048]
[159.55656433 -28.75977135]
[166.61712646 -41.99414062]
[173.51081848 -55.31618500]
[172.98132324 -71.12853241]
[185.70230103 -78.87617493]
[192.59600830 -92.19821930]
[199.32174683 -105.60584259]
[205.87849426 -119.09692383]
[212.43522644 -132.58799744]
[218.99195862 -146.07908630]
[218.06526184 -161.87312317]
[230.58752441 -169.93800354]
[237.14425659 -183.42907715]
[231.74180603 -198.28132629]
[238.49945068 -212.56802368]
[253.40797424 -217.81314087]
[267.62243652 -210.90484619]
[272.70965576 -195.94169617]
[265.65142822 -181.80107117]
[250.63534546 -176.87234497]
[244.07859802 -163.38127136]
[245.47427368 -148.55220032]
[232.48303223 -139.52233887]
[225.92630005 -126.03126526]
[219.36956787 -112.54018402]
[212.81283569 -99.04911041]
[212.71774292 -91.57440186]
[205.91804504 -85.30452728]
[199.02435303 -71.98247528]
[200.04693604 -57.12301636]
[186.83287048 -48.42248917]
[179.93917847 -35.10044098]
[179.65628052 -27.63048172]
[172.70117188 -21.53346634]
[165.47486877 -8.38886547]
[173.32946777 2.85630155]
[175.55973816 16.45777130]
[171.67044067 29.74995041]
[162.37133789 40.10265732]
[149.44848633 45.44156265]
[135.42137146 44.66365433]
[127.86702728 57.62250519]
[120.31268311 70.58135986]
[112.75833130 83.54020691]
[124.13796997 73.76759338]
[139.13313293 74.14859772]
[150.00178528 84.48651123]
[151.13241577 99.44384003]
[141.94128418 111.29808044]
[127.17378998 113.92887115]
[114.45318604 105.97628021]
[123.86856079 117.65322113]
[133.28393555 129.33015442]
[142.69929504 141.00708008]
[158.18351746 146.40811157]
[160.98196411 162.56672668]
[148.21585083 172.86032104]
[133.01785278 166.69973755]
[131.02236938 150.42245483]
[121.60699463 138.74552917]
[112.19161987 127.06858826]
[102.77625275 115.39165497]
[105.44079590 130.15309143]
[111.19823456 144.00416565]
[109.59781647 158.91853333]
[101.03266907 171.23268127]
[87.60671997 177.92176819]
[72.61790466 177.34271240]
[59.74804688 169.63772583]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 46]
[5 45]
[6 44]
[7 43]
[9 41]
[14 40]
[15 39]
[16 38]
[17 37]
[18 36]
[19 35]
[20 33]
[21 32]
[22 31]
[24 30]
[25 29]
[47 99]
[48 98]
[49 97]
[50 96]
[55 90]
[56 89]
[57 87]
[58 86]
[60 84]
[61 83]
[62 81]
[63 80]
[64 79]
[65 78]
[67 76]
[68 75]
[106 117]
[107 116]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
