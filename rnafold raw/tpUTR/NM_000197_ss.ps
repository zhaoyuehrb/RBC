%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 18:14:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGGCGGUGAGGAGUCCAGCACAACCUUUUCCUCACCAGUCCCAUGCUGGCUGAAGAGGACCAGAGGAGCAGACCAGCACUUCAACCUAGUCCGCUGAAGAUGGAGGGGGCUGGGGUCACAGAGGCAUAGAAUACACAUUUUUUGCCACUUU\
) } def
/len { sequence length } bind def

/coor [
[72.09766388 165.87281799]
[62.91924286 161.17831421]
[54.51088715 155.21330261]
[47.04721451 148.10166931]
[34.94803238 156.96789551]
[22.84885025 165.83410645]
[10.84073257 174.82327271]
[-1.07507384 183.93444824]
[-12.99088001 193.04562378]
[-24.90668678 202.15679932]
[-36.82249451 211.26799011]
[-48.73830032 220.37916565]
[-60.65410614 229.49034119]
[-72.56990814 238.60151672]
[-84.48571777 247.71269226]
[-80.54258728 262.39331055]
[-82.52259064 277.46472168]
[-90.12378693 290.62869263]
[-102.18705750 299.87780762]
[-116.87284088 303.80163574]
[-131.94165039 301.80178833]
[-145.09561157 294.18328857]
[-154.32884216 282.10784912]
[-158.23333740 267.41693115]
[-156.21368408 252.35076904]
[-148.57788086 239.20683289]
[-136.49032593 229.98950195]
[-121.79426575 226.10433960]
[-106.73076630 228.14379883]
[-93.59689331 235.79689026]
[-81.68109131 226.68571472]
[-69.76528168 217.57453918]
[-57.84947586 208.46334839]
[-45.93367004 199.35217285]
[-34.01786423 190.24099731]
[-22.10205841 181.12982178]
[-10.18625164 172.01864624]
[1.72955465 162.90747070]
[5.15339470 156.30647278]
[13.98263359 153.73492432]
[26.08181572 144.86871338]
[38.18099594 136.00248718]
[29.51558876 112.23585510]
[29.66377640 86.93921661]
[38.60702896 63.27573395]
[55.22705841 44.20436859]
[47.11744690 31.58556747]
[39.00783539 18.96676445]
[30.89822197 6.34796143]
[22.78861046 -6.27084160]
[14.67899799 -18.88964462]
[6.44109821 -31.42507553]
[-1.92423201 -43.87582779]
[-10.28956223 -56.32658005]
[-24.99829483 -52.66201782]
[-40.07300949 -54.25222778]
[-53.69336319 -60.90517807]
[-64.21463013 -71.81749725]
[-70.36631775 -85.67147064]
[-71.40557861 -100.79415894]
[-67.20691681 -115.35942841]
[-58.27734756 -127.60845184]
[-45.69514847 -136.06210327]
[-30.97968864 -139.69953918]
[-15.90792847 -138.08155823]
[-2.29985857 -131.40351868]
[8.20128155 -120.47182465]
[14.32742786 -106.60654449]
[15.33881855 -91.48196411]
[11.11332321 -76.92445374]
[2.16119123 -64.69190979]
[10.52652073 -52.24115753]
[18.89185143 -39.79040527]
[25.27108002 -35.96924591]
[27.29780006 -26.99925613]
[35.40741348 -14.38045406]
[43.51702499 -1.76165080]
[51.62663651 10.85715199]
[59.73624802 23.47595596]
[67.84586334 36.09475708]
[80.79594421 31.08720779]
[94.46942902 28.67552185]
[108.35123444 28.95054245]
[121.91846466 31.90191269]
[134.66004944 37.41845703]
[146.09602356 45.29237366]
[155.79562378 55.22705841]
[168.41442871 47.11744690]
[181.03323364 39.00783539]
[193.65203857 30.89822197]
[206.27084351 22.78861046]
[218.88964844 14.67899799]
[231.50845337 6.56938553]
[244.12724304 -1.54022682]
[251.55358887 -15.51019478]
[266.44354248 -15.88204575]
[279.06234741 -23.99165916]
[279.81372070 -39.49053192]
[289.55783081 -51.56662369]
[304.54788208 -55.57643509]
[319.01986694 -49.97810364]
[327.40902710 -36.92431259]
[326.48956299 -21.43450165]
[316.61502075 -9.46482277]
[301.58236694 -5.61786318]
[287.17196655 -11.37285519]
[274.55316162 -3.26324296]
[268.02941895 10.12667084]
[252.23686218 11.07857609]
[239.61805725 19.18818855]
[226.99925232 27.29780006]
[214.38044739 35.40741348]
[201.76165771 43.51702499]
[189.14285278 51.62663651]
[176.52404785 59.73624802]
[163.90524292 67.84586334]
[167.65899658 76.76149750]
[170.17561340 86.10205841]
[171.40904236 95.69674683]
[171.33674622 105.37011719]
[169.96003723 114.94529724]
[167.30410767 124.24719238]
[163.41749573 133.10572815]
[158.37129211 141.35891724]
[152.25776672 148.85585022]
[162.08067322 160.19209290]
[171.90357971 171.52835083]
[181.72650146 182.86459351]
[196.61114502 188.22720337]
[199.09828186 202.91268921]
[208.92118835 214.24893188]
[218.74409485 225.58517456]
[228.56701660 236.92141724]
[238.38992310 248.25765991]
[254.05566406 253.10705566]
[257.42449951 269.15646362]
[245.03083801 279.89559937]
[229.62423706 274.27700806]
[227.05368042 258.08056641]
[217.23077393 246.74433899]
[207.40785217 235.40809631]
[197.58494568 224.07185364]
[187.76203918 212.73559570]
[173.57998657 208.18382263]
[170.39025879 192.68750000]
[160.56733704 181.35125732]
[150.74443054 170.01501465]
[140.92152405 158.67877197]
[132.06248474 163.95127869]
[122.53760529 167.89569092]
[112.54468536 170.43009949]
[102.29124451 171.50187683]
[91.99021912 171.08876038]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 42]
[5 41]
[6 40]
[7 38]
[8 37]
[9 36]
[10 35]
[11 34]
[12 33]
[13 32]
[14 31]
[15 30]
[46 80]
[47 79]
[48 78]
[49 77]
[50 76]
[51 75]
[52 73]
[53 72]
[54 71]
[87 116]
[88 115]
[89 114]
[90 113]
[91 112]
[92 111]
[93 110]
[94 109]
[96 107]
[97 106]
[125 148]
[126 147]
[127 146]
[128 145]
[130 143]
[131 142]
[132 141]
[133 140]
[134 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
