%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 10:27:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUGGAAGACACGUGGCGCCUGUGGACCGGAAGCACCAAAUGCUGGUGCUGCUUUUGUACAUACAUAUUUUUAAACCAUUAAAAUUCUUCCUGAAGAAAGCUGA\
) } def
/len { sequence length } bind def

/coor [
[103.35266876 123.11724091]
[94.21054840 121.93709564]
[86.49941254 117.39238739]
[73.81546783 125.39973450]
[61.13153076 133.40708923]
[48.44758987 141.41444397]
[47.31272507 156.77732849]
[37.46442413 168.39044189]
[22.83929062 171.93577576]
[9.09542179 166.25740051]
[-3.58851838 174.26473999]
[-16.27245903 182.27209473]
[-23.81147766 196.18157959]
[-38.70396042 196.43305969]
[-51.38789749 204.44041443]
[-61.55373001 218.00848389]
[-77.40572357 211.99594116]
[-76.01643372 195.09901428]
[-59.39524841 191.75648499]
[-46.71131134 183.74913025]
[-40.07953262 170.41238403]
[-24.27980995 169.58815002]
[-11.59586906 161.58081055]
[1.08807111 153.57345581]
[1.87239850 138.72344971]
[11.36288738 127.04463196]
[26.08259201 123.14801025]
[40.44023895 128.73049927]
[53.12417984 120.72314453]
[65.80812073 112.71579742]
[78.49205780 104.70844269]
[79.47722626 86.86642456]
[94.25577545 73.91130066]
[85.15377045 61.98848343]
[76.05177307 50.06566620]
[66.94976807 38.14284897]
[57.84776688 26.22003365]
[48.74576569 14.29721737]
[39.64376068 2.37440062]
[23.99837112 -1.17543209]
[17.14901924 -15.68287659]
[24.34994507 -30.01906395]
[40.07720947 -33.18649673]
[52.26620865 -22.75539207]
[51.56657791 -6.72760153]
[60.66857910 5.19521523]
[69.77058411 17.11803246]
[78.87258148 29.04084778]
[87.97458649 40.96366501]
[97.07659149 52.88648224]
[106.17858887 64.80929565]
[120.07893372 70.44670868]
[134.91453552 68.23200989]
[149.75013733 66.01731873]
[164.58573914 63.80261612]
[179.42134094 61.58791733]
[194.25694275 59.37321854]
[201.03521729 47.62284851]
[213.18838501 42.05075073]
[226.13085938 44.51028824]
[235.12178040 53.87004852]
[250.01649475 52.09595108]
[253.52865601 37.36876297]
[261.85192871 24.75547028]
[273.96563721 15.76778126]
[288.39620972 11.47495365]
[303.39648438 12.37660408]
[317.15719604 18.34464264]
[328.02517700 28.64105988]
[334.70199585 42.00912857]
[349.59671021 40.23503113]
[364.49142456 38.46093369]
[379.38613892 36.68683624]
[394.28085327 34.91273880]
[409.17556763 33.13864136]
[421.97695923 22.88893509]
[437.15371704 29.10166740]
[439.09332275 45.38571167]
[425.80044556 54.98943710]
[410.94967651 48.03335571]
[396.05496216 49.80745316]
[381.16024780 51.58155060]
[366.26553345 53.35564804]
[351.37081909 55.12974930]
[336.47610474 56.90384674]
[333.12603760 71.46620941]
[324.98059082 84.02729797]
[313.00668335 93.06056213]
[298.63784790 97.46035004]
[283.60266113 96.67716217]
[269.71679688 90.78626251]
[258.66369629 80.48087311]
[251.79058838 66.99066925]
[236.89587402 68.76476288]
[227.14958191 82.38073730]
[210.25027466 84.86072540]
[196.47164917 74.20882416]
[181.63604736 76.42352295]
[166.80044556 78.63822174]
[151.96484375 80.85292053]
[137.12924194 83.06761932]
[122.29363251 85.28231812]
[125.61519623 95.30066681]
[124.75688171 105.55203247]
[120.06520081 114.40561676]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 31]
[4 30]
[5 29]
[6 28]
[10 24]
[11 23]
[12 22]
[14 20]
[15 19]
[33 51]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
[39 45]
[52 102]
[53 101]
[54 100]
[55 99]
[56 98]
[57 97]
[61 94]
[62 93]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
