%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:59:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAUUUACGUUUUCCACUUUUCUCCUUUAAAAUCUAAUAAAAUAUUUAGCUUGUGUUUCUGGCA\
) } def
/len { sequence length } bind def

/coor [
[26.69049644 104.07724762]
[12.75877380 109.68469238]
[-1.73838437 113.60499573]
[-16.59745979 115.78311920]
[-31.60985756 116.18847656]
[-46.56482315 114.81539154]
[-61.25241470 111.68313599]
[-75.46643829 106.83567810]
[-89.00735474 100.34106445]
[-101.68506622 92.29048157]
[-113.32160187 82.79693604]
[-123.75360107 71.99370575]
[-132.83462524 60.03245926]
[-140.43716431 47.08110046]
[-146.45451355 33.32145691]
[-150.80220032 18.94668579]
[-153.41917419 4.15858841]
[-154.26870728 -10.83523178]
[-153.33886719 -25.82428741]
[-150.64271545 -40.59815216]
[-146.21809387 -54.94942856]
[-140.12712097 -68.67664337]
[-132.45530701 -81.58708954]
[-123.31035614 -93.49952698]
[-112.82063293 -104.24671936]
[-101.13341522 -113.67778778]
[-88.41275787 -121.66034698]
[-74.83724213 -128.08233643]
[-60.59745789 -132.85357666]
[-45.89329910 -135.90711975]
[-30.93119240 -137.20007324]
[-15.92118359 -136.71430969]
[-1.07398784 -134.45661926]
[13.40196228 -130.45872498]
[27.30344772 -124.77672577]
[40.43531418 -117.49040222]
[52.61320877 -108.70204926]
[63.66617203 -98.53502655]
[73.43904114 -87.13207245]
[81.79461670 -74.65325928]
[88.61560822 -61.27378082]
[93.80624390 -47.18145370]
[97.29367065 -32.57411957]
[99.02891541 -17.65683937]
[98.98763275 -2.63902712]
[97.17039490 12.26848793]
[93.60271454 26.85642815]
[88.33467865 40.92000198]
[81.44023895 54.26177979]
[73.01618195 66.69446564]
[84.35242462 76.51737213]
[95.68866730 86.34028625]
[109.38018799 89.17468262]
[114.13424683 102.32347107]
[130.17459106 102.61778259]
[139.83081055 115.42938232]
[135.69546509 130.93029785]
[120.94084930 137.22956848]
[106.88543701 129.49491882]
[104.31133270 113.65971375]
[90.61981201 110.82531738]
[85.86575317 97.67652893]
[74.52951050 87.85361481]
[63.19326782 78.03070831]
[52.08599854 88.13837433]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[50 64]
[51 63]
[52 62]
[54 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
