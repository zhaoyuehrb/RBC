%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 03:08:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCUGCCCCAUCCCCUCCUCACCCCACGAGCUUUCACAAUAAAUUCGCUCCGUGGCACUGGGGAACUUUGUGUGUGAGCGCGCGCACAUUUAGAGGGUGUGUUUCUCCAGGUCCUCUGGUGGGGAUGUGAGCCUUGGCCUUUUGACCCAGAGCAUCCUG\
) } def
/len { sequence length } bind def

/coor [
[137.08471680 331.16696167]
[148.00019836 310.87115479]
[142.29376221 296.99899292]
[136.58732605 283.12683105]
[120.44787598 272.53112793]
[123.29567719 252.60839844]
[117.05235291 238.96945190]
[104.71974182 230.61744690]
[106.01105499 214.84902954]
[99.63496399 201.27163696]
[93.12670135 187.75711060]
[86.61844635 174.24256897]
[80.11019135 160.72804260]
[73.60193634 147.21350098]
[67.09368134 133.69897461]
[60.58542252 120.18444061]
[48.00270844 112.01894379]
[33.00913620 111.57996368]
[18.01556015 111.14098358]
[3.02198410 110.70201111]
[-11.97159100 110.26303101]
[-26.96516609 109.82405090]
[-39.44246292 122.05070496]
[-56.56594467 121.50666809]
[-67.79109192 109.01391602]
[-82.79037476 108.86756897]
[-97.78965759 108.72122955]
[-112.78894806 108.57488251]
[-127.78823090 108.42853546]
[-142.78823853 108.42853546]
[-157.78752136 108.57488251]
[-172.78680420 108.72122955]
[-178.10383606 122.93718719]
[-188.20014954 134.26985168]
[-201.71028137 141.18653870]
[-216.80709839 142.75186157]
[-231.44889832 138.75410461]
[-243.65550232 129.73391724]
[-251.77603149 116.91123199]
[-254.71228027 102.02020264]
[-252.06713867 87.07471466]
[-244.19834900 74.09602356]
[-232.17007446 64.83938599]
[-217.60906982 60.55669785]
[-202.48457336 61.82715225]
[-188.84205627 68.47892761]
[-178.52655029 79.61242676]
[-172.93315125 93.72193909]
[-157.93386841 93.57559204]
[-142.93458557 93.42925262]
[-136.24290466 90.20306396]
[-127.64189148 93.42925262]
[-112.64260101 93.57559204]
[-97.64331818 93.72193909]
[-82.64402771 93.86828613]
[-67.64474487 94.01463318]
[-59.77443695 83.77530670]
[-47.25220490 79.89571381]
[-34.60078430 84.01240540]
[-26.52618599 94.83047485]
[-11.53261185 95.26945496]
[3.46096373 95.70843506]
[18.45453835 96.14741516]
[33.44811249 96.58639526]
[48.44168854 97.02537537]
[53.71905518 91.69626617]
[43.06101608 81.14134979]
[53.61610413 70.48348236]
[64.27378845 81.03804779]
[69.55115509 75.70893860]
[68.96591949 60.72035980]
[68.38067627 45.73178101]
[67.79543304 30.74320221]
[67.21018982 15.75462246]
[66.62495422 0.76604408]
[66.03971100 -14.22253418]
[65.45446777 -29.21111298]
[56.25410843 -42.78628922]
[63.65286255 -57.42153931]
[80.03952026 -58.06137085]
[88.55690002 -44.04758072]
[80.44304657 -29.79635429]
[81.02828979 -14.80777645]
[81.61353302 0.18080273]
[82.19876862 15.16938114]
[82.78401184 30.15796089]
[83.36925507 45.14653778]
[83.95449829 60.13511658]
[84.53973389 75.12369537]
[100.78527832 74.65513611]
[112.41403961 82.53801727]
[124.83503723 74.12856293]
[137.25602722 65.71911621]
[149.67703247 57.30966187]
[162.09802246 48.90021133]
[174.51902771 40.49076080]
[186.94001770 32.08131027]
[199.36100769 23.67186165]
[211.78201294 15.26241112]
[218.87170410 1.11862206]
[233.74848938 0.39032987]
[246.16949463 -8.01912022]
[248.91169739 -23.58369255]
[261.90429688 -32.58192062]
[277.43899536 -29.67531395]
[286.29934692 -16.58831215]
[283.22866821 -1.08520210]
[270.04873657 7.63629770]
[254.57894897 4.40187597]
[242.15794373 12.81132603]
[235.95668030 26.35361481]
[220.19146729 27.68340683]
[207.77046204 36.09285736]
[195.34947205 44.50230789]
[182.92846680 52.91175842]
[170.50747681 61.32120895]
[158.08648682 69.73065948]
[145.66548157 78.14010620]
[133.24449158 86.54956055]
[120.82349396 94.95900726]
[108.97221375 123.71662140]
[74.09996033 113.67618561]
[80.60821533 127.19071960]
[87.11647034 140.70524597]
[93.62472534 154.21978760]
[100.13298035 167.73431396]
[106.64123535 181.24885559]
[113.14949036 194.76338196]
[119.72576141 201.17730713]
[119.65000153 208.60569763]
[132.42916870 217.93325806]
[130.69129944 232.72613525]
[136.93463135 246.36508179]
[147.39056396 249.58526611]
[154.18630981 257.87646484]
[155.24636841 268.32296753]
[150.45948792 277.42041016]
[156.16590881 291.29257202]
[161.87234497 305.16470337]
[169.77639771 305.33435059]
[177.31271362 307.63217163]
[183.92127991 311.87216187]
[189.11523438 317.72445679]
[192.51663208 324.74118042]
[193.88401794 332.39059448]
[193.12940979 340.09735107]
[190.32392883 347.28585815]
[185.69126892 353.42321777]
[179.58998108 358.05874634]
[183.35433960 372.57870483]
[187.11869812 387.09866333]
[200.86628723 394.89480591]
[204.99400330 410.15054321]
[197.05296326 423.81491089]
[181.75444031 427.78112793]
[168.17477417 419.69607544]
[164.37054443 404.35647583]
[172.59872437 390.86303711]
[168.83436584 376.34304810]
[165.07002258 361.82308960]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 139]
[3 138]
[4 137]
[6 133]
[7 132]
[9 130]
[10 128]
[11 127]
[12 126]
[13 125]
[14 124]
[15 123]
[16 122]
[17 65]
[18 64]
[19 63]
[20 62]
[21 61]
[22 60]
[25 56]
[26 55]
[27 54]
[28 53]
[29 52]
[30 50]
[31 49]
[32 48]
[70 89]
[71 88]
[72 87]
[73 86]
[74 85]
[75 84]
[76 83]
[77 82]
[91 120]
[92 119]
[93 118]
[94 117]
[95 116]
[96 115]
[97 114]
[98 113]
[99 112]
[101 110]
[102 109]
[149 160]
[150 159]
[151 158]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
