%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:46:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUGAUACCCUAGUAGUCCCCAGCUCCCAAACACUGAAAGGAAAACGUGAAAACACUCAAGGCCUAGGGGGAGGACAGGUUGGUAAAACAUGAAAAGGUAAAUAAAAUUACUUGUUUGAAACCACUG\
) } def
/len { sequence length } bind def

/coor [
[96.68413544 132.33244324]
[99.65180206 117.62698364]
[93.00392914 131.07339478]
[86.35605621 144.51979065]
[79.70818329 157.96620178]
[73.06031036 171.41259766]
[78.36213684 186.30105591]
[71.50798798 200.54171753]
[56.56430817 205.68583679]
[42.39691925 198.68150330]
[37.41107941 183.68428040]
[44.56480026 169.59173584]
[59.61390686 164.76472473]
[66.26177979 151.31832886]
[72.90965271 137.87191772]
[79.55752563 124.42551422]
[86.20539856 110.97911072]
[83.50157166 96.22481537]
[72.51754761 86.00957489]
[61.53351593 75.79434204]
[50.54948425 65.57910156]
[41.07755661 67.19944763]
[32.07335663 64.26300812]
[25.57099152 57.56886673]
[22.97580147 48.74903107]
[24.76185417 39.87179184]
[14.54661560 28.88776207]
[4.33137798 17.90373230]
[-5.88385963 6.91970205]
[-16.09909821 -4.06432772]
[-15.98102283 10.93520737]
[-23.09256744 24.14224815]
[-35.68016815 32.30020905]
[-50.63998032 33.39750290]
[-64.28321838 27.16355705]
[-73.24573517 15.13553810]
[-75.31756592 0.27930903]
[-69.98782349 -13.74188614]
[-58.57073212 -23.47070694]
[-43.88150024 -26.50822449]
[-29.54324150 -22.10608482]
[-37.14764023 -35.03562927]
[-44.75203705 -47.96517563]
[-60.90670013 -46.47950745]
[-76.04651642 -52.14418411]
[-87.17816162 -63.78541565]
[-92.12420654 -79.05316162]
[-89.94893646 -94.89544678]
[-81.13491058 -108.16842651]
[-89.04951477 -120.91044617]
[-96.96411896 -133.65246582]
[-111.67041779 -140.90896606]
[-112.46909332 -157.28866577]
[-98.53854370 -165.94151306]
[-84.20932007 -157.96621704]
[-84.22209930 -141.56707764]
[-76.30749512 -128.82505798]
[-68.39289093 -116.08303070]
[-54.63525009 -118.24120331]
[-41.05572510 -114.96418762]
[-29.72631454 -106.71782684]
[-22.38874626 -94.72875977]
[-20.18672943 -80.80210114]
[-23.48780441 -67.04962158]
[-31.82249260 -55.56957245]
[-24.21809387 -42.64002609]
[-16.61369705 -29.71048355]
[-7.88395166 -25.06984520]
[-5.11506748 -14.27956581]
[5.10017014 -3.29553580]
[15.31540775 7.68849421]
[25.53064537 18.67252350]
[35.74588394 29.65655327]
[55.90928650 33.79228973]
[60.76472473 54.59506989]
[71.74875641 64.81031036]
[82.73278046 75.02554321]
[93.71681213 85.24078369]
[108.84714508 81.76105499]
[123.64620972 93.58133698]
[138.21034241 97.17106628]
[152.77447510 100.76080322]
[167.33859253 104.35054016]
[176.21820068 96.26522827]
[187.79142761 93.54503632]
[199.11122131 96.76230621]
[207.35317993 104.99250793]
[210.52033997 116.07593536]
[224.89402771 120.36511993]
[239.26771545 124.65430450]
[253.64140320 128.94349670]
[268.01507568 133.23268127]
[262.47515869 119.29319763]
[268.20889282 105.43231201]
[281.97735596 99.48001862]
[296.00271606 104.79875946]
[302.36209106 118.38398743]
[297.46307373 132.56141663]
[284.07217407 139.32232666]
[297.67529297 145.64334106]
[311.27841187 151.96435547]
[324.88150024 158.28536987]
[338.48461914 164.60638428]
[353.24063110 158.94635010]
[367.64273071 165.45439148]
[373.14645386 180.26940918]
[366.48651123 194.60191345]
[351.61413574 199.94868469]
[337.35284424 193.13757324]
[332.16360474 178.20950317]
[318.56048584 171.88848877]
[304.95736694 165.56747437]
[291.35427856 159.24645996]
[277.75115967 152.92543030]
[263.72589111 147.60636902]
[249.35221863 143.31718445]
[234.97853088 139.02799988]
[220.60484314 134.73880005]
[206.23115540 130.44961548]
[190.77798462 140.12481689]
[172.82757568 135.45179749]
[163.74885559 118.91466522]
[149.18473816 115.32492828]
[134.62060547 111.73519897]
[120.05648041 108.14546204]
[133.20843506 115.35836029]
[138.12847900 129.52850342]
[132.27636719 143.33984375]
[118.67356110 149.66151428]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 17]
[3 16]
[4 15]
[5 14]
[6 13]
[18 78]
[19 77]
[20 76]
[21 75]
[26 73]
[27 72]
[28 71]
[29 70]
[30 69]
[41 67]
[42 66]
[43 65]
[49 58]
[50 57]
[51 56]
[80 125]
[81 124]
[82 123]
[83 122]
[88 119]
[89 118]
[90 117]
[91 116]
[92 115]
[99 114]
[100 113]
[101 112]
[102 111]
[103 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
