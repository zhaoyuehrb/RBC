%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 20:50:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCUGUGUCUGUGACUUUCGAAGUUUUUUAAACCUCUGAAUUUGUACACAUUUAAAAUUUCAAGUGUACUUUAAAAUAAAAUACUUCUAAUGGAACAAAAACA\
) } def
/len { sequence length } bind def

/coor [
[87.46385193 325.04742432]
[72.30531311 330.30081177]
[58.82441330 321.60339355]
[57.36255264 305.62710571]
[69.04114532 294.62753296]
[70.83205414 279.73483276]
[72.62297058 264.84213257]
[61.59703827 254.86383057]
[58.52463531 240.13208008]
[64.78919220 226.25372314]
[78.17931366 218.63723755]
[79.97023010 203.74453735]
[81.76113892 188.85183716]
[72.38854218 177.33271790]
[73.99263000 162.20388794]
[86.13848114 152.45114136]
[79.97608948 138.89112854]
[89.30570984 126.11345673]
[91.09661865 111.22074890]
[85.77851868 98.28980255]
[94.01067352 86.98833466]
[95.80158997 72.09563446]
[97.59249878 57.20293045]
[99.38341522 42.31022644]
[101.17433167 27.41752052]
[95.14003754 12.79227352]
[104.34155273 1.07982945]
[106.13246918 -13.81287479]
[107.92337799 -28.70557785]
[109.71429443 -43.59828186]
[111.50520325 -58.49098587]
[101.64931488 -64.87323761]
[94.98313141 -74.47624969]
[92.47207642 -85.84022522]
[94.45353699 -97.25573730]
[100.59212494 -107.02088928]
[109.93568420 -113.69501495]
[121.06278992 -116.31120300]
[124.18146515 -130.98341370]
[127.30014038 -145.65563965]
[130.41882324 -160.32785034]
[128.68310547 -165.60369873]
[129.20777893 -170.49174500]
[131.43023682 -174.16152954]
[134.53123474 -176.14802551]
[138.95257568 -190.48161316]
[143.37390137 -204.81520081]
[147.79522705 -219.14880371]
[152.21655273 -233.48239136]
[156.63787842 -247.81597900]
[144.91030884 -257.48721313]
[137.78088379 -270.91253662]
[136.33679199 -286.04473877]
[140.79823303 -300.57620239]
[150.48487854 -312.29104614]
[163.91958618 -319.40280151]
[179.05364990 -320.82699585]
[193.57925415 -316.34643555]
[205.28134155 -306.64440918]
[212.37541199 -293.20034790]
[213.77969360 -278.06442261]
[209.28004456 -263.54470825]
[199.56260681 -251.85540771]
[186.10923767 -244.77902222]
[170.97146606 -243.39465332]
[166.55014038 -229.06106567]
[162.12881470 -214.72746277]
[157.70748901 -200.39387512]
[153.28616333 -186.06028748]
[148.86483765 -171.72669983]
[145.09103394 -157.20916748]
[141.97235107 -142.53695679]
[138.85368347 -127.86474609]
[135.73500061 -113.19252777]
[148.99433899 -100.26264191]
[151.99621582 -81.83867645]
[143.39282227 -65.10724640]
[126.39791107 -56.70007324]
[124.60699463 -41.80736923]
[122.81608582 -26.91466522]
[121.02516937 -12.02196121]
[119.23425293 2.87074280]
[125.39665222 16.43076515]
[116.06703186 29.20843506]
[114.27612305 44.10113907]
[112.48520660 58.99384308]
[110.69429016 73.88654327]
[108.90338135 88.77925110]
[114.22148132 101.71019745]
[105.98932648 113.01166534]
[104.19841003 127.90436554]
[110.23270416 142.52961731]
[101.03118896 154.24206543]
[110.51857758 166.59629822]
[108.49018860 181.67410278]
[96.65384674 190.64274597]
[94.86293030 205.53544617]
[93.07201385 220.42814636]
[104.27466583 231.00202942]
[107.07033539 245.96990967]
[100.59291840 259.55325317]
[87.51567078 266.63305664]
[85.72476196 281.52575684]
[83.93384552 296.41845703]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 104]
[6 103]
[7 102]
[11 98]
[12 97]
[13 96]
[16 93]
[18 91]
[19 90]
[21 88]
[22 87]
[23 86]
[24 85]
[25 84]
[27 82]
[28 81]
[29 80]
[30 79]
[31 78]
[38 74]
[39 73]
[40 72]
[41 71]
[45 70]
[46 69]
[47 68]
[48 67]
[49 66]
[50 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
