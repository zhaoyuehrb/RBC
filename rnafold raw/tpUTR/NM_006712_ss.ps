%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 21:08:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGUUGAUGUGGGGUUCAGGAUGGCCCCCCCAUGGGGGGUGGAUGAUUUGCACUUUGGUUCCCUGUGUUUUGAUUUCUCAUUAAAGUUCCUUUCCUUCCCCGU\
) } def
/len { sequence length } bind def

/coor [
[106.68118286 403.32742310]
[105.78411865 388.35424805]
[104.88705444 373.38110352]
[103.98999786 358.40795898]
[92.71119690 348.74749756]
[91.58815002 333.57537842]
[101.79740143 321.81063843]
[89.85632324 315.64004517]
[82.49971771 304.26101685]
[81.76255798 290.62216187]
[87.94757080 278.32211304]
[99.51674652 270.66006470]
[99.06801605 255.66677856]
[98.61928558 240.67349243]
[98.17054749 225.68020630]
[84.50273895 219.70890808]
[74.74279022 208.34877014]
[70.86717224 193.81808472]
[73.69634247 178.98515320]
[82.72177124 166.80203247]
[96.19635010 159.71702576]
[95.74761200 144.72373962]
[95.29888153 129.73045349]
[94.85015106 114.73717499]
[86.40035248 102.34358978]
[72.60743713 96.44821930]
[58.81451797 90.55284119]
[45.02160263 84.65746307]
[31.22868538 78.76209259]
[17.43576813 72.86671448]
[3.64285135 66.97133636]
[-13.29803371 66.30593872]
[-17.34834290 49.84291077]
[-2.64993238 41.39347076]
[9.53822708 53.17842102]
[23.33114433 59.07379913]
[37.12406158 64.96916962]
[50.91697693 70.86454773]
[64.70989227 76.75992584]
[78.50280762 82.65529633]
[92.29572296 88.55067444]
[106.41652679 83.49072266]
[113.32615662 70.17694092]
[120.23579407 56.86315155]
[121.45030975 47.63983536]
[127.55648804 43.25902176]
[134.86132812 30.15789986]
[142.16615295 17.05677605]
[149.47099304 3.95565391]
[148.10308838 -16.04611969]
[164.83538818 -25.54080963]
[171.34364319 -39.05534363]
[177.85189819 -52.56987381]
[184.36015320 -66.08441162]
[180.11703491 -76.32360077]
[182.25926208 -86.97216034]
[189.81712341 -94.46172333]
[200.04939270 -96.42342377]
[207.35421753 -109.52454376]
[209.78677368 -126.30307007]
[226.58299255 -128.61033630]
[233.44973755 -113.10923767]
[220.45533752 -102.21971130]
[213.15051270 -89.11859131]
[215.01791382 -69.97095490]
[197.87469482 -59.57615280]
[191.36643982 -46.06161880]
[184.85818481 -32.54708481]
[178.34991455 -19.03255272]
[182.63566589 -9.53625298]
[180.86174011 0.95508063]
[173.38731384 8.83631039]
[162.57211304 11.26048660]
[155.26727295 24.36160851]
[147.96244812 37.46273041]
[140.65760803 50.56385422]
[133.54959106 63.77278900]
[126.63994598 77.08657837]
[119.73030853 90.40036011]
[109.84343719 114.28844452]
[110.29216766 129.28172302]
[110.74090576 144.27500916]
[111.18963623 159.26829529]
[125.06380463 165.53477478]
[134.80168152 177.15634155]
[138.51286316 191.79353333]
[135.51316833 206.52998352]
[126.45008087 218.45347595]
[113.16383362 225.23147583]
[113.61257172 240.22476196]
[114.06130219 255.21804810]
[114.51003265 270.21133423]
[128.56643677 279.47708130]
[134.33050537 295.11929321]
[129.73930359 310.97317505]
[116.77055359 320.91357422]
[128.31141663 331.37524414]
[129.00785828 346.57290649]
[118.96315002 357.51089478]
[119.86020660 372.48403931]
[120.75727081 387.45721436]
[121.65433502 402.43035889]
[128.63710022 417.87954712]
[115.72469330 428.86618042]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 102]
[2 101]
[3 100]
[4 99]
[7 96]
[12 92]
[13 91]
[14 90]
[15 89]
[21 83]
[22 82]
[23 81]
[24 80]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[30 36]
[31 35]
[42 79]
[43 78]
[44 77]
[46 76]
[47 75]
[48 74]
[49 73]
[51 69]
[52 68]
[53 67]
[54 66]
[58 64]
[59 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
