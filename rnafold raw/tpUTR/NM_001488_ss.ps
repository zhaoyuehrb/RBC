%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 17:02:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCCAAGAGCUUGGGAUCAGAAGUCAGAAGUUUGGAAUGUGGUGGGUCAAAGGACAAUAUGGGUGGGCAUUCUGGAGAGUUGUUUUUCAGCUGAAUUCUCAUGGUGAAAACAGGGGAAAGGACAAAGGAAACCUUAA\
) } def
/len { sequence length } bind def

/coor [
[54.14181137 327.20367432]
[49.50655746 341.46954346]
[44.87130356 355.73538208]
[40.23604965 370.00122070]
[35.60079193 384.26708984]
[36.45664215 401.19940186]
[20.42295647 406.70913696]
[10.68997383 392.82730103]
[21.33494568 379.63183594]
[25.97019958 365.36596680]
[30.60545540 351.10012817]
[35.24071121 336.83428955]
[39.87596512 322.56842041]
[33.13417816 302.03298950]
[49.63943100 286.93936157]
[52.97724533 272.31546021]
[44.86006546 259.87973022]
[48.03675842 245.00146484]
[61.13551712 236.57173157]
[64.47332764 221.94781494]
[53.46198273 211.91706848]
[48.91967392 197.62638855]
[52.16174698 182.88342285]
[62.41529465 171.66906738]
[77.00050354 167.06268311]
[80.33831787 152.43876648]
[83.67613220 137.81483459]
[72.71115112 130.85043335]
[64.46042633 120.81753540]
[59.74460983 108.71402740]
[59.03274918 95.74379730]
[62.39565277 83.19689941]
[69.49883270 72.32131195]
[60.41198349 60.38694000]
[51.32513428 48.45257187]
[42.23828506 36.51820374]
[33.15143204 24.58383751]
[24.06458282 12.64946842]
[14.97773170 0.71510047]
[5.89088154 -11.21926785]
[-3.19596934 -23.15363693]
[-12.28281975 -35.08800507]
[-24.24767113 -34.36412048]
[-34.95023727 -39.48904800]
[-41.74819946 -49.06791306]
[-43.02645493 -60.62295914]
[-38.57955170 -71.23395538]
[-52.79861069 -78.17145538]
[-53.68651962 -93.03957367]
[-62.22878647 -105.36960602]
[-70.77104950 -117.69963074]
[-84.99011230 -124.63713074]
[-85.87802124 -139.50524902]
[-101.47112274 -142.08024597]
[-110.60826874 -154.97552490]
[-107.86855316 -170.54054260]
[-94.87738800 -179.54083252]
[-79.34221649 -176.63670349]
[-70.47977448 -163.55111694]
[-73.54798889 -148.04751587]
[-59.93992996 -141.99194336]
[-58.44102097 -126.24189758]
[-49.89875412 -113.91187286]
[-41.35648727 -101.58184052]
[-27.74842644 -95.52626801]
[-26.24951935 -79.77622223]
[-8.12659073 -77.66018677]
[2.95100212 -62.76461411]
[-0.34845176 -44.17485428]
[8.73839855 -32.24048615]
[17.82524872 -20.30611801]
[26.91209984 -8.37174988]
[35.99895096 3.56261802]
[45.08580017 15.49698639]
[54.17265320 27.43135452]
[63.25950241 39.36572266]
[72.34635162 51.30009079]
[81.43320465 63.23445892]
[102.30941772 58.87704468]
[122.56648254 65.54445648]
[132.93241882 54.70252991]
[143.29837036 43.86060715]
[153.66430664 33.01868439]
[164.03024292 22.17676353]
[165.10922241 6.17003441]
[178.37805176 -2.84760714]
[193.65800476 2.04140043]
[199.22763062 17.08662987]
[190.81437683 30.74666786]
[174.87216187 32.54270172]
[164.50622559 43.38462448]
[154.14028931 54.22654724]
[143.77435303 65.06847382]
[133.40841675 75.91039276]
[136.73210144 81.36714935]
[139.17187500 87.27228546]
[140.66902161 93.48370361]
[141.18748474 99.85192871]
[155.94642639 102.53028107]
[170.70536804 105.20863342]
[185.46430969 107.88699341]
[200.22326660 110.56534576]
[215.18321228 105.41650391]
[226.32440186 115.30200195]
[241.08334351 117.98035431]
[252.99598694 107.85005951]
[268.63348389 107.79879761]
[280.61230469 117.85077667]
[283.27636719 133.25976562]
[275.36782837 146.75009155]
[260.62084961 151.95205688]
[245.99848938 146.40943909]
[238.40498352 132.73930359]
[223.64604187 130.06094360]
[209.74176025 135.40136719]
[197.54490662 125.32428741]
[182.78596497 122.64593506]
[168.02702332 119.96758270]
[153.26808167 117.28923035]
[138.50912476 114.61087036]
[129.30650330 128.94061279]
[115.09350586 138.32254028]
[98.30004883 141.15264893]
[94.96223450 155.77658081]
[91.62442017 170.40049744]
[102.76660156 180.87899780]
[107.13900757 195.43162537]
[103.66327667 210.12126160]
[93.37030792 221.02589417]
[79.09725189 225.28562927]
[75.75943756 239.90954590]
[83.90348816 253.18780518]
[80.31014252 267.97097778]
[67.60116577 275.65325928]
[64.26335144 290.27719116]
[70.06584167 296.53167725]
[72.84438324 304.49798584]
[72.20476532 312.81579590]
[68.32973480 320.09658813]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[3 11]
[4 10]
[5 9]
[15 135]
[16 134]
[19 131]
[20 130]
[25 125]
[26 124]
[27 123]
[33 78]
[34 77]
[35 76]
[36 75]
[37 74]
[38 73]
[39 72]
[40 71]
[41 70]
[42 69]
[47 66]
[49 64]
[50 63]
[51 62]
[53 60]
[80 94]
[81 93]
[82 92]
[83 91]
[84 90]
[98 120]
[99 119]
[100 118]
[101 117]
[102 116]
[104 114]
[105 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
