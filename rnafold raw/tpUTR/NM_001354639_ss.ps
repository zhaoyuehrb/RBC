%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:56:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCAUGACUAGCCCUGGCCAGCCAAGGGGCUCCCAUGGGGUAACCGGGGUGACCACGCACCUGGGCAGAAGCCGUUGGGGCCGGUAAGAGGCGGCAGCCGUGAGGGUGGACCCAGCUUUUGAAGGAAAAUGGAAGAAAAGCAGCAUUAAGUG\
) } def
/len { sequence length } bind def

/coor [
[98.21959686 193.78329468]
[107.95281982 182.26309204]
[120.24568939 173.52603149]
[114.86064911 159.52598572]
[109.47560883 145.52593994]
[104.09056854 131.52589417]
[96.38428497 131.58387756]
[88.89048004 129.78578186]
[82.04953766 126.23728943]
[76.26348877 121.14691925]
[63.02566147 128.20100403]
[54.48534775 141.51916504]
[39.61462021 140.67611694]
[26.37679672 147.73019409]
[13.13897324 154.78427124]
[-0.02621141 161.97300720]
[-13.11738777 169.29565430]
[-26.20856476 176.61828613]
[-30.48121262 188.82991028]
[-41.58506393 194.64819336]
[-53.28293228 191.42330933]
[-66.52075195 198.47738647]
[-79.75857544 205.53146362]
[-92.99639893 212.58554077]
[-101.21015930 226.77941895]
[-117.60679626 226.49244690]
[-125.31885529 212.01985168]
[-116.41283417 198.24978638]
[-100.05048370 199.34771729]
[-86.81266022 192.29364014]
[-73.57482910 185.23956299]
[-60.33700943 178.18548584]
[-51.90407562 162.82475281]
[-33.53120804 163.52711487]
[-20.44003105 156.20446777]
[-7.34885454 148.88183594]
[-3.02044463 142.83528137]
[6.08489466 141.54644775]
[19.32271767 134.49237061]
[32.56054306 127.43828583]
[40.15399933 114.62467957]
[55.97158432 114.96318054]
[69.20940399 107.90909576]
[68.04479980 87.92433167]
[79.47082520 69.78260803]
[67.93656921 60.19298553]
[52.37839890 57.32002258]
[47.53827667 43.23377228]
[36.00402069 33.64414597]
[24.46976280 24.05452156]
[12.93550491 14.46489716]
[1.40124667 4.87527323]
[-14.31154156 6.57346201]
[-26.57040215 -3.40130043]
[-28.10237122 -19.13116455]
[-17.99855804 -31.28388023]
[-2.25337601 -32.64945984]
[9.79183769 -22.41772461]
[10.99087143 -6.65898466]
[22.52512932 2.93063951]
[34.05938721 12.52026367]
[45.59364319 22.10988808]
[57.12790298 31.69951248]
[71.86106873 33.88656235]
[77.52619171 48.65872955]
[89.06045532 58.24835205]
[104.01054382 57.02571106]
[113.83345032 45.68946838]
[123.65636444 34.35322571]
[133.47927856 23.01698112]
[143.30218506 11.68073845]
[153.12509155 0.34449467]
[162.94801331 -10.99174881]
[163.95069885 -16.23754501]
[166.62687683 -20.15171814]
[170.17263794 -22.31538582]
[173.73516846 -22.69710541]
[184.23303223 -33.41134262]
[194.73089600 -44.12557602]
[205.22875977 -54.83981323]
[209.36029053 -70.11203766]
[223.79418945 -73.78789520]
[234.29205322 -84.50212860]
[244.78991699 -95.21636963]
[248.92146301 -110.48859406]
[263.35534668 -114.16445160]
[258.74798584 -130.01438904]
[262.72250366 -145.93818665]
[274.10690308 -157.62977600]
[289.73873901 -161.97654724]
[305.34317017 -157.88766479]
[315.62030029 -168.81381226]
[325.89743042 -179.73995972]
[329.12649536 -195.81805420]
[344.74945068 -200.80357361]
[356.69473267 -189.56784058]
[352.67407227 -173.66920471]
[336.82357788 -169.46282959]
[326.54644775 -158.53668213]
[316.26931763 -147.61054993]
[321.06524658 -134.78892517]
[319.85031128 -121.08716583]
[312.80560303 -109.19539642]
[301.26242065 -101.47312164]
[287.45095825 -99.48119354]
[274.06958008 -103.66658783]
[270.68893433 -89.16071320]
[255.50415039 -84.71850586]
[245.00628662 -74.00426483]
[234.50842285 -63.29003143]
[231.12776184 -48.78415680]
[215.94299316 -44.34194565]
[205.44512939 -33.62771225]
[194.94726562 -22.91347694]
[184.44940186 -12.19924068]
[174.28425598 -1.16883790]
[164.46133423 10.16740608]
[154.63842773 21.50364876]
[144.81552124 32.83989334]
[134.99259949 44.17613602]
[125.16969299 55.51237869]
[115.34678650 66.84862518]
[123.05291748 72.42915344]
[128.93940735 79.70584106]
[132.66137695 88.12429047]
[134.03477478 97.06900024]
[133.04406738 105.90820312]
[129.83793640 114.03844452]
[124.71350098 120.92580414]
[118.09062195 126.14084625]
[123.47566223 140.14089966]
[128.86070251 154.14094543]
[134.24574280 168.14099121]
[149.22499084 166.38796997]
[164.16947937 168.41603088]
[178.13978577 174.09768677]
[190.25773621 183.07577515]
[199.76158142 194.78593445]
[206.05389404 208.49205017]
[208.73915100 223.33255005]
[207.64852905 238.37452698]
[202.85060120 252.67245483]
[194.64697266 265.32754517]
[183.55332947 275.54428101]
[170.26701355 282.68045044]
[155.62322998 286.28744507]
[140.54249573 286.13854980]
[125.97279358 282.24307251]
[112.82999420 274.84594727]
[101.94025421 264.41213989]
[93.98811340 251.59753418]
[89.47346497 237.20764160]
[88.68008423 222.14706421]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 133]
[4 132]
[5 131]
[6 130]
[10 43]
[11 42]
[13 40]
[14 39]
[15 38]
[16 36]
[17 35]
[18 34]
[21 32]
[22 31]
[23 30]
[24 29]
[45 66]
[46 65]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
[67 122]
[68 121]
[69 120]
[70 119]
[71 118]
[72 117]
[73 116]
[77 115]
[78 114]
[79 113]
[80 112]
[82 110]
[83 109]
[84 108]
[86 106]
[91 100]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
