%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 02:13:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGCAGCCGGGCCGUUUGGGCUCAAGACACACACACAGCGCAGUGAGCCGCUGUCAACAGACAGUUUAUUCUAUAUACAAACACAAUUUUGUACACUGCAAUUAAAUAGAAUGGAAUGAGCGCUCCUC\
) } def
/len { sequence length } bind def

/coor [
[90.51464081 155.87649536]
[86.60340118 170.35760498]
[82.69216919 184.83869934]
[87.42555237 200.53988647]
[75.99897766 212.30276489]
[60.16713333 208.02670288]
[56.21645737 192.11054993]
[68.21106720 180.92745972]
[72.12230682 166.44636536]
[76.03353882 151.96527100]
[63.35322189 143.95217896]
[51.95297623 153.70072937]
[40.55272675 163.44929504]
[29.15248108 173.19784546]
[17.75223541 182.94641113]
[15.07462215 198.76443481]
[0.96891779 206.40698242]
[-13.74418831 200.01135254]
[-17.77806091 184.48371887]
[-8.03825760 171.73554993]
[8.00367737 171.54615784]
[19.40392494 161.79760742]
[30.80417061 152.04904175]
[42.20441818 142.30049133]
[53.60466385 132.55192566]
[48.26189423 122.36095428]
[45.11212158 111.35997772]
[44.26125717 100.01235962]
[45.71893692 88.79071808]
[49.39917374 78.15719604]
[55.12500381 68.54446411]
[62.63680649 60.33808136]
[71.60399628 53.86109924]
[81.63954163 49.36133194]
[92.31660461 47.00196075]
[103.18670654 46.85574341]
[113.79857635 48.90301132]
[123.71683502 53.03356934]
[132.53991699 59.05231094]
[143.45967102 48.76837921]
[154.37940979 38.48445129]
[165.29914856 28.20052147]
[176.21888733 17.91659164]
[163.44732666 25.78341866]
[148.46223450 25.11478233]
[136.44206238 16.14174461]
[131.54063416 1.96513999]
[135.45176697 -12.51598644]
[146.82388306 -22.29735756]
[161.72706604 -23.99880219]
[175.01121521 -17.03234482]
[182.08573914 -3.80505848]
[177.82838440 -18.18820572]
[173.57102966 -32.57135391]
[169.31367493 -46.95449829]
[165.05632019 -61.33764648]
[160.79896545 -75.72079468]
[148.53964233 -86.61303711]
[152.10751343 -102.61935425]
[167.83227539 -107.27382660]
[179.53762817 -95.78832245]
[175.18211365 -79.97814941]
[179.43946838 -65.59500122]
[183.69682312 -51.21185684]
[187.95417786 -36.82870865]
[192.21153259 -22.44556046]
[196.46888733 -8.06241417]
[209.24436951 -0.20194481]
[224.00239563 -2.88535452]
[238.76042175 -5.56876421]
[253.51844788 -8.25217342]
[268.27648926 -10.93558311]
[283.03451538 -13.61899281]
[297.79254150 -16.30240250]
[312.55056763 -18.98581123]
[327.30859375 -21.66922188]
[334.67761230 -41.63089371]
[361.06231689 -48.35095596]
[373.74264526 -56.36404800]
[386.42294312 -64.37713623]
[399.10327148 -72.39022827]
[411.78359985 -80.40331268]
[424.46389771 -88.41640472]
[427.69616699 -103.88663483]
[440.96636963 -112.47016144]
[456.40158081 -109.07452393]
[464.84429932 -95.71430206]
[461.28567505 -80.31587219]
[447.83694458 -72.01484680]
[432.47698975 -75.73609161]
[419.79669189 -67.72299957]
[407.11636353 -59.70991135]
[394.43603516 -51.69681931]
[381.75573730 -43.68373108]
[369.07540894 -35.67064285]
[370.06179810 -28.23578835]
[372.03454590 -13.36607838]
[373.02090454 -5.93122387]
[387.35198975 -1.50171280]
[401.68304443 2.92779851]
[414.02291870 -6.48003864]
[429.53659058 -6.80428982]
[442.25878906 2.07972527]
[447.29751587 16.75592232]
[442.71530151 31.58100319]
[430.27410889 40.85442352]
[414.75784302 41.01036072]
[402.13278198 31.98885727]
[397.25354004 17.25886345]
[382.92248535 12.82935238]
[368.59140015 8.39984131]
[342.63705444 9.01597404]
[329.99200439 -6.91119623]
[315.23397827 -4.22778654]
[300.47595215 -1.54437709]
[285.71792603 1.13903260]
[270.95989990 3.82244205]
[256.20187378 6.50585175]
[241.44383240 9.18926144]
[226.68580627 11.87267113]
[211.92778015 14.55608082]
[186.50282288 28.83633423]
[175.58308411 39.12026596]
[164.66333008 49.40419388]
[153.74359131 59.68812180]
[142.82385254 69.97205353]
[151.75578308 88.43822479]
[152.96740723 109.19934082]
[146.05857849 129.11502075]
[131.87388611 145.08985901]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[3 8]
[11 25]
[12 24]
[13 23]
[14 22]
[15 21]
[39 126]
[40 125]
[41 124]
[42 123]
[43 122]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
[57 62]
[68 121]
[69 120]
[70 119]
[71 118]
[72 117]
[73 116]
[74 115]
[75 114]
[76 113]
[78 95]
[79 94]
[80 93]
[81 92]
[82 91]
[83 90]
[98 111]
[99 110]
[100 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
