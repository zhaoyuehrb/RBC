%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 18:43:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUCACUGUCCACCCCUUCGCUGUCCAGAAUUCCCCAGCUUGUUGGGAGUCUACGUCACGGCUUGUCUUGGGAACCAAUCCGUCUCUCUUUCUUUUCUUUGAAGUUCCCAAUAAAAUGAAAACAGGAAAUGUA\
) } def
/len { sequence length } bind def

/coor [
[81.06725311 279.15917969]
[80.04389954 263.83441162]
[86.83442688 250.05819702]
[99.61222076 241.53625488]
[98.56587219 226.57278442]
[94.92790222 220.06011963]
[97.67340851 211.24969482]
[96.97552490 196.26594543]
[96.27764893 181.28218079]
[95.57976532 166.29843140]
[84.98493195 164.72686768]
[74.78024292 161.47344971]
[65.23087311 156.62268066]
[56.58494568 150.30062866]
[49.06711960 142.67155457]
[42.87274170 133.93370056]
[38.16276169 124.31411743]
[35.05957031 114.06274414]
[33.64379883 103.44596863]
[33.95223236 92.73964691]
[35.97686005 82.22198486]
[22.06910324 76.60288239]
[8.16134548 70.98378754]
[-5.74641228 65.36468506]
[-19.65416908 59.74558640]
[-37.58487320 68.61701965]
[-56.02985382 61.68692017]
[-63.45203400 43.76018524]
[-77.71788025 39.12493134]
[-91.98372650 34.48967743]
[-101.20653534 34.80767441]
[-106.52537537 29.57702827]
[-120.67950439 24.61107635]
[-134.83363342 19.64512634]
[-148.98776245 14.67917442]
[-163.14189148 9.71322346]
[-175.24536133 19.27927780]
[-190.60147095 20.76037788]
[-204.31011963 13.68391037]
[-211.99693298 0.30794916]
[-211.20909119 -15.09928417]
[-202.19796753 -27.62139893]
[-187.83900452 -33.26263046]
[-172.71408081 -30.22288704]
[-161.64949036 -19.47213554]
[-158.17593384 -4.44090462]
[-144.02180481 0.52504689]
[-129.86767578 5.49099827]
[-115.71355438 10.45694923]
[-101.55942535 15.42290115]
[-87.34847260 20.22382927]
[-73.08262634 24.85908318]
[-58.81678009 29.49433899]
[-51.13999939 22.44544029]
[-41.13757706 19.24044037]
[-30.63241959 20.53498459]
[-21.56919861 26.15808105]
[-15.65438080 35.13116837]
[-14.03507137 45.83782959]
[-0.12731329 51.45692825]
[13.78044415 57.07602692]
[27.68820190 62.69512558]
[41.59595871 68.31422424]
[55.43265152 50.71743011]
[74.32769775 38.71416855]
[96.13652802 33.66679764]
[118.38386536 36.14818954]
[138.54464722 45.87670898]
[154.33064270 61.74817657]
[167.49201965 54.55248260]
[180.65339661 47.35678482]
[193.81478882 40.16108704]
[206.97616577 32.96539307]
[220.13754272 25.76969528]
[233.29891968 18.57399750]
[246.46031189 11.37830162]
[259.45068359 3.87830138]
[272.26303101 -3.92194057]
[285.07537842 -11.72218227]
[281.16018677 -26.31148911]
[281.51522827 -41.41283417]
[286.11175537 -55.80201721]
[294.57711792 -68.31257629]
[306.22509766 -77.93033600]
[320.11145020 -83.87562561]
[335.11041260 -85.66648102]
[350.00616455 -83.15773773]
[363.59109497 -76.55275726]
[374.76400757 -66.38698578]
[382.61911011 -53.48450851]
[386.51968384 -38.89127731]
[386.14944458 -23.79029655]
[381.53848267 -9.40573692]
[373.06051636 3.09631109]
[361.40289307 12.70236206]
[347.51058960 18.63369560]
[332.50982666 20.40948677]
[317.61660767 17.88577843]
[304.03829956 11.26715660]
[292.87561035 1.09016418]
[280.06326294 8.89040661]
[267.25091553 16.69064713]
[265.25878906 21.12308502]
[260.41210938 24.30694580]
[253.65600586 24.53968239]
[240.49461365 31.73537827]
[227.33323669 38.93107605]
[214.17185974 46.12677383]
[201.01048279 53.32246780]
[187.84909058 60.51816559]
[174.68771362 67.71385956]
[161.52633667 74.90956116]
[164.78962708 85.25809479]
[166.32508850 95.99977112]
[166.09178162 106.84812927]
[164.09590149 117.51386261]
[160.39070129 127.71252441]
[155.07496643 137.17213440]
[148.29048157 145.64044189]
[140.21817017 152.89158630]
[131.07330322 158.73219299]
[121.09976196 163.00651550]
[110.56352234 165.60055542]
[111.26140594 180.58430481]
[111.95928192 195.56806946]
[112.65716553 210.55181885]
[113.52933502 225.52644348]
[114.57568359 240.48989868]
[128.41514587 247.15058899]
[137.05686951 259.84768677]
[138.17626953 275.16574097]
[131.47224426 288.98425293]
[118.74812317 297.58612061]
[103.42664337 298.65750122]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 128]
[5 127]
[7 126]
[8 125]
[9 124]
[10 123]
[21 63]
[22 62]
[23 61]
[24 60]
[25 59]
[28 53]
[29 52]
[30 51]
[32 50]
[33 49]
[34 48]
[35 47]
[36 46]
[69 112]
[70 111]
[71 110]
[72 109]
[73 108]
[74 107]
[75 106]
[76 105]
[77 102]
[78 101]
[79 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
