%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 08:58:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCCACUGACCGCCGGGUUACACCUGCUCCUUCCUGGACGCUCACUCCCUUGCUCGCUAGAAUAAACUGCUUUGCGCUCUC\
) } def
/len { sequence length } bind def

/coor [
[96.58094025 117.26274872]
[87.67363739 129.33171082]
[78.76633453 141.40068054]
[84.98168945 155.44578552]
[83.32584381 170.71516418]
[74.24420166 183.10140991]
[60.17968369 189.27272034]
[44.91557693 187.56901550]
[32.55784607 178.44859314]
[26.43066025 164.36480713]
[28.18220139 149.10610962]
[37.34131241 136.77703857]
[51.44424057 130.69401550]
[66.69736481 132.49337769]
[75.60466766 120.42441559]
[84.51197052 108.35544586]
[84.79245758 93.35807037]
[76.34265137 80.96448517]
[67.89285278 68.57090759]
[55.45290756 71.68859100]
[42.68818665 70.74163818]
[30.89039612 65.84154510]
[21.24847412 57.49905014]
[14.72876930 46.57093048]
[11.97820568 34.17204666]
[13.26011467 21.56159210]
[18.42911148 10.01523113]
[26.94739151 0.69604641]
[19.93836212 -12.56568432]
[12.68257809 -25.69403648]
[5.18257856 -38.68441772]
[-2.31742167 -51.67479706]
[-17.37930679 -57.19921112]
[-22.31417656 -72.46442413]
[-13.33642006 -85.76026154]
[2.66699553 -86.88730621]
[13.41961956 -74.98097992]
[10.67295933 -59.17479706]
[18.17296028 -46.18441772]
[25.67296028 -33.19403458]
[31.89633560 -28.87085915]
[33.20009232 -19.57471466]
[40.20912170 -6.31298304]
[57.55334473 -7.72778034]
[73.88391113 -1.56923032]
[86.04625702 11.02001476]
[91.67092133 27.65060997]
[89.63510132 45.13992691]
[80.28643036 60.12110519]
[88.73623657 72.51468658]
[97.18603516 84.90827179]
[109.62730408 84.52559662]
[120.31427002 94.30407715]
[135.05276489 97.09275818]
[149.79125977 99.88143158]
[163.92556763 89.77696228]
[180.68827820 92.83962250]
[189.96467590 106.73316193]
[204.79714966 108.96879578]
[214.00222778 107.12906647]
[220.13824463 111.57535553]
[234.87675476 114.36402893]
[247.79203796 105.25519562]
[263.35098267 108.02905273]
[272.32278442 121.03991699]
[269.38458252 136.56867981]
[256.27957153 145.40240479]
[240.78274536 142.30018616]
[232.08807373 129.10252380]
[217.34957886 126.31385040]
[202.56150818 123.80126190]
[187.72904968 121.56562805]
[178.40866089 130.66743469]
[165.34127808 132.69317627]
[153.35215759 126.66440582]
[147.00259399 114.61992645]
[132.26409912 111.83125305]
[117.52559662 109.04257965]
[130.21345520 117.04370880]
[134.26063538 131.48741150]
[127.57756805 144.91635132]
[113.61473083 150.39715576]
[99.58117676 145.10006714]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[17 51]
[18 50]
[19 49]
[28 43]
[29 42]
[30 40]
[31 39]
[32 38]
[53 78]
[54 77]
[55 76]
[58 72]
[59 71]
[61 70]
[62 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
