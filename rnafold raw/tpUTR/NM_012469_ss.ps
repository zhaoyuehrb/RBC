%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 10:40:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGAGCGGUUGCCAUGGCCGGUCUCCGUGGGGCAGGGUUGGGCCGCAUGUGGAAGGGCUCUGAGCUGUGUCCUCCUUCAUUAAAAGUUUUUAUGUCUCGUGUCAGAA\
) } def
/len { sequence length } bind def

/coor [
[101.78397369 169.50756836]
[97.56215668 155.11395264]
[95.52845001 140.25245667]
[95.72810364 125.25379181]
[98.15818024 110.44546509]
[85.87090302 119.04911041]
[73.58361816 127.65275574]
[61.29634094 136.25640869]
[58.42547607 151.56639099]
[45.84186554 160.11668396]
[31.26381874 157.28540039]
[18.97653770 165.88905334]
[6.68925762 174.49269104]
[4.19204187 190.09844971]
[-8.65750980 199.29977417]
[-24.23598671 196.63771057]
[-33.30095291 183.69158936]
[-30.47432899 168.14213562]
[-17.43309593 159.21455383]
[-1.91438913 162.20541382]
[10.37289143 153.60176086]
[22.66017151 144.99812317]
[24.98562622 130.33088684]
[37.32411194 121.43052673]
[52.69269562 123.96912384]
[64.97997284 115.36547852]
[77.26725769 106.76183319]
[89.55453491 98.15818024]
[95.29478455 84.29998779]
[92.69006348 69.52787018]
[90.08534241 54.75575638]
[87.48062134 39.98364258]
[84.87590027 25.21152496]
[82.27117157 10.43940830]
[72.25504303 -1.80753994]
[77.66473389 -15.68502426]
[75.06001282 -30.45713997]
[72.45528412 -45.22925568]
[69.85056305 -60.00137329]
[66.81729889 -74.69148254]
[63.35806274 -89.28715515]
[59.89882278 -103.88282776]
[56.43958664 -118.47850037]
[52.98034668 -133.07417297]
[38.13727951 -136.80805969]
[26.73735428 -147.02081299]
[21.40019035 -161.36561584]
[23.35223007 -176.54612732]
[32.14490891 -189.07398987]
[45.75773239 -196.07038879]
[61.06257629 -195.92761230]
[74.54249573 -188.67845154]
[83.09990692 -175.98870850]
[84.76837921 -160.77441406]
[79.16450500 -146.53169250]
[67.57601929 -136.53341675]
[71.03525543 -121.93773651]
[74.49449921 -107.34206390]
[77.95373535 -92.74639130]
[81.41297150 -78.15071869]
[85.06749725 -74.85929108]
[86.59492493 -69.18101501]
[84.62268066 -62.60609436]
[87.22740173 -47.83398056]
[89.83212280 -33.06186295]
[92.43685150 -18.28974724]
[102.26667023 -7.09939861]
[97.04328918 7.83468580]
[99.64801025 22.60680199]
[102.25273895 37.37891769]
[104.85746002 52.15103531]
[107.46218109 66.92314911]
[110.06690216 81.69526672]
[118.81552887 69.51078796]
[129.27932739 58.76328278]
[141.22546387 49.69190598]
[154.38810730 42.49851608]
[168.47436523 37.34318161]
[183.17077637 34.34062195]
[198.15032959 33.55764389]
[213.07968140 35.01167297]
[227.62664795 38.67035675]
[241.46749878 44.45228195]
[254.29428101 52.22878265]
[265.82153320 61.82682037]
[275.79278564 73.03282166]
[283.98611450 85.59741974]
[290.21923828 99.24102783]
[294.35345459 113.66005707]
[296.29672241 128.53364563]
[296.00585938 143.53082275]
[293.48733521 158.31788635]
[288.79714966 172.56576538]
[282.03967285 185.95742798]
[273.36532593 198.19488525]
[262.96707153 209.00582886]
[251.07632446 218.14968872]
[237.95767212 225.42298889]
[223.90303040 230.66389465]
[209.22514343 233.75578308]
[194.25062561 234.62983704]
[179.31269836 233.26661682]
[164.74375916 229.69647217]
[150.86799622 223.99882507]
[137.99417114 216.30047607]
[126.40876007 206.77272034]
[116.36956024 195.62756348]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 28]
[6 27]
[7 26]
[8 25]
[11 22]
[12 21]
[13 20]
[29 73]
[30 72]
[31 71]
[32 70]
[33 69]
[34 68]
[36 66]
[37 65]
[38 64]
[39 63]
[40 60]
[41 59]
[42 58]
[43 57]
[44 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
