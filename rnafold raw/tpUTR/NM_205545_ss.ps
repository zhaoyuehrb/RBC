%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 11:49:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCCCGCCCACCCCCAUGGCCCUAUGCGGCCCAGCCCCGAAUGCCUUGAAGAAGUGCCCCCUGCACCAGGACUCCUGAGUCUCCUUUCUGGGCACAGACCUGCCCUGCUGCAUCUCUGACCUCGUCGAUGU\
) } def
/len { sequence length } bind def

/coor [
[93.39338684 237.51004028]
[96.98325348 222.94593811]
[104.29251099 209.84729004]
[114.80200195 199.14445496]
[127.76524353 191.59764099]
[142.26148987 187.74290466]
[157.26107788 187.85401917]
[171.69628906 191.92210388]
[161.72921753 180.71240234]
[151.76214600 169.50268555]
[141.79507446 158.29298401]
[131.82800293 147.08328247]
[110.61358643 155.83197021]
[87.66874695 155.47790527]
[66.73437500 146.07879639]
[51.22358322 129.16708374]
[43.66522217 107.50000000]
[28.66522026 107.50000000]
[14.86504841 115.23729706]
[2.13777685 107.50000000]
[-12.86222363 107.50000000]
[-27.86222267 107.50000000]
[-35.14767456 119.26313019]
[-47.21022415 125.81688690]
[-60.82666016 125.53248596]
[-72.41875458 118.59228516]
[-78.99357605 106.91352844]
[-93.98945618 106.56188965]
[-107.96721649 113.97355652]
[-120.50961304 105.94001770]
[-135.50549316 105.58838654]
[-150.50137329 105.23674774]
[-166.47789001 110.91011047]
[-176.35227966 97.12850189]
[-165.84275818 83.82487488]
[-150.14973450 90.24086761]
[-135.15385437 90.59250641]
[-120.15797424 90.94414520]
[-107.25281525 83.50733185]
[-93.63781738 91.56601715]
[-78.64193726 91.91765594]
[-69.14871216 78.57790375]
[-53.42805481 73.44162750]
[-37.57573700 78.70751190]
[-27.86222267 92.50000000]
[-12.86222363 92.50000000]
[2.13777685 92.50000000]
[14.86504841 84.76270294]
[28.66522026 92.50000000]
[43.66522217 92.50000000]
[45.38255692 81.98630524]
[49.06740189 71.85655212]
[54.63522339 62.47975922]
[61.93215561 54.20652390]
[70.73899841 47.35598373]
[80.77764130 42.20364761]
[77.29306030 27.61400223]
[73.80847931 13.02435875]
[70.32389832 -1.56528437]
[57.46251678 -11.15509129]
[57.08522034 -27.19370651]
[69.48143768 -37.37767792]
[85.14186096 -33.89473343]
[92.05313873 -19.41669083]
[84.91354370 -5.04986477]
[88.39812469 9.53977871]
[91.88270569 24.12942314]
[95.36728668 38.71906662]
[110.35079956 39.42214966]
[115.18626404 25.22291565]
[120.02172852 11.02367973]
[124.85719299 -3.17555547]
[124.23960114 -20.11824989]
[140.34921265 -25.40190887]
[149.88595581 -11.38453674]
[139.05642700 1.65990961]
[134.22096252 15.85914421]
[129.38549805 30.05838013]
[124.55003357 44.25761414]
[132.71018982 49.02268600]
[139.99099731 54.96313477]
[146.22634888 61.92230606]
[151.27731323 69.72061920]
[155.03520203 78.16016388]
[157.42388916 87.02973175]
[158.40129089 96.11008453]
[157.95996094 105.17936707]
[156.12696838 114.01853180]
[152.96275330 122.41664124]
[148.55934143 130.17587280]
[143.03770447 137.11621094]
[153.00477600 148.32591248]
[162.97184753 159.53561401]
[172.93891907 170.74533081]
[182.90599060 181.95503235]
[191.16654968 184.51641846]
[195.63970947 190.84657288]
[209.59667969 196.34226990]
[223.55366516 201.83798218]
[237.51065063 207.33367920]
[251.86117554 201.27563477]
[265.93725586 207.04786682]
[271.62423706 220.76625061]
[285.58120728 226.26194763]
[299.53820801 231.75764465]
[313.92907715 225.22477722]
[328.69479370 230.85935974]
[335.07516479 245.31848145]
[329.28479004 260.02383423]
[314.75900269 266.25097656]
[300.11569214 260.30545044]
[294.04248047 245.71463013]
[280.08551025 240.21893311]
[266.12854004 234.72322083]
[252.61503601 240.88121033]
[238.38238525 235.50662231]
[232.01493835 221.29064941]
[218.05796814 215.79495239]
[204.10098267 210.29925537]
[190.14399719 204.80355835]
[198.93676758 216.95622253]
[204.20732117 230.99977112]
[205.58128357 245.93672180]
[202.96110535 260.70608521]
[196.53286743 274.25888062]
[186.75315857 285.63241577]
[174.31661987 294.01885986]
[160.10659790 298.82254028]
[145.13241577 299.70227051]
[130.45767212 296.59555054]
[117.12467194 289.72305298]
[106.08045959 279.57290649]
[98.10948181 266.86605835]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 95]
[9 94]
[10 93]
[11 92]
[12 91]
[17 50]
[18 49]
[20 47]
[21 46]
[22 45]
[27 41]
[28 40]
[30 38]
[31 37]
[32 36]
[56 68]
[57 67]
[58 66]
[59 65]
[69 79]
[70 78]
[71 77]
[72 76]
[97 120]
[98 119]
[99 118]
[100 117]
[103 114]
[104 113]
[105 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
