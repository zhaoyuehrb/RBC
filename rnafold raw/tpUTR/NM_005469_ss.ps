%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:46:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGAGGUACCAGCUUCGCCUGGGGCUUCAAGAACCUCCCAUCUAUCCCCAUUCCUGAGACAGGAGUUACAGUCCCUUUUGGCCCUCACAUCCAAUAAAGAGACUGAUACCACUGGA\
) } def
/len { sequence length } bind def

/coor [
[96.64727020 255.83686829]
[96.24796295 240.84217834]
[95.84865570 225.84748840]
[95.44934845 210.85281372]
[87.37598419 198.33601379]
[94.74317169 184.33476257]
[94.34386444 169.34008789]
[93.94455719 154.34539795]
[93.54524994 139.35070801]
[84.78674316 136.86053467]
[76.82147980 132.44839478]
[70.06478119 126.34435272]
[57.14146805 133.95933533]
[44.21815872 141.57432556]
[31.29484749 149.18931580]
[18.37153625 156.80430603]
[5.44822407 164.41929626]
[-2.14961958 178.95217896]
[-18.54348755 179.36825562]
[-26.86877441 165.23950195]
[-18.56113815 151.10037231]
[-2.16676283 151.49598694]
[10.75654888 143.88099670]
[23.67985916 136.26600647]
[36.60317230 128.65101624]
[49.52648163 121.03603363]
[62.44979477 113.42104340]
[58.49902344 106.66538239]
[55.82449722 98.90552521]
[54.66120148 90.39377594]
[55.19243622 81.43443298]
[41.53291321 75.23624420]
[27.87339211 69.03806305]
[14.44747829 76.81781006]
[-0.98363191 75.18672180]
[-12.48636150 64.77198029]
[-15.63767719 49.57826996]
[-9.22583294 35.44787979]
[4.28368664 27.81423759]
[19.69619560 29.61263084]
[31.08526802 40.15153885]
[34.07157516 55.37854385]
[47.73109818 61.57672501]
[61.39061737 67.77490997]
[67.69510651 63.71247101]
[54.35422516 56.85529327]
[53.62218094 41.87316895]
[66.23101044 33.74805832]
[79.57202148 40.60498810]
[80.30408478 55.58759308]
[86.60858154 51.52515411]
[86.60858154 36.52515411]
[86.60858154 21.52515411]
[86.60858154 6.52515411]
[86.60858154 -8.47484589]
[86.60858154 -23.47484589]
[86.60858154 -38.47484589]
[80.56224060 -54.31398010]
[94.10858154 -64.50873566]
[107.65491486 -54.31398010]
[101.60858154 -38.47484589]
[101.60858154 -23.47484589]
[101.60858154 -8.47484589]
[101.60858154 6.52515411]
[101.60858154 21.52515411]
[101.60858154 36.52515411]
[101.60858154 51.52515411]
[120.81683350 59.39899826]
[133.86680603 73.90907288]
[138.95140076 91.46006775]
[153.94609070 91.06076050]
[168.94078064 90.66145325]
[183.93545532 90.26214600]
[198.93014526 89.86283875]
[212.51945496 81.76091003]
[225.44818115 89.15666199]
[240.44287109 88.75735474]
[255.43756104 88.35804749]
[270.43225098 87.95874023]
[285.41098022 87.16040802]
[300.36315918 85.96361542]
[315.31533813 84.76682281]
[322.50308228 71.11618805]
[335.94116211 63.53844070]
[351.34146118 64.45160675]
[363.78985596 73.56429291]
[369.31408691 87.96868134]
[366.15139771 103.06838226]
[355.31100464 114.04513550]
[340.25198364 117.39629364]
[325.77969360 112.05252838]
[316.51211548 99.71900177]
[301.55993652 100.91579437]
[286.60775757 102.11258698]
[282.81320190 105.20218658]
[277.00405884 105.85408020]
[270.83154297 102.95342255]
[255.83686829 103.35272980]
[240.84217834 103.75203705]
[225.84748840 104.15134430]
[213.33070374 112.22470856]
[199.32945251 104.85752106]
[184.33476257 105.25682831]
[169.34008789 105.65613556]
[154.34539795 106.05544281]
[139.35070801 106.45475006]
[128.93763733 127.43639374]
[108.53993225 138.95140076]
[108.93923950 153.94609070]
[109.33854675 168.94078064]
[109.73785400 183.93545532]
[117.83978271 197.52476501]
[110.44403076 210.45350647]
[110.84333801 225.44818115]
[111.24264526 240.44287109]
[111.64195251 255.43756104]
[114.34466553 274.62988281]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 116]
[2 115]
[3 114]
[4 113]
[6 111]
[7 110]
[8 109]
[9 108]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[31 44]
[32 43]
[33 42]
[51 67]
[52 66]
[53 65]
[54 64]
[55 63]
[56 62]
[57 61]
[70 106]
[71 105]
[72 104]
[73 103]
[74 102]
[76 100]
[77 99]
[78 98]
[79 97]
[80 94]
[81 93]
[82 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
