%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 05:49:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGUUUCUGAGAACUAUAGUAAUAUGGCUUGGAUAUCUGAUGUUUUCAAAUACAAAAAUGUACAAUUUAUCCUUUGAGAGAGAAUCAUGAAGAAAAGAAGGUCAAUAAAAAGGGCUAAAACCUUGGA\
) } def
/len { sequence length } bind def

/coor [
[249.62240601 198.14042664]
[236.81851196 190.32632446]
[224.01461792 182.51222229]
[209.12002563 182.48657227]
[201.37097168 168.69300842]
[188.56707764 160.87890625]
[175.76318359 153.06478882]
[162.95927429 145.25068665]
[150.15538025 137.43658447]
[135.26080322 137.41093445]
[127.51174164 123.61737061]
[114.70784760 115.80326080]
[101.90394592 107.98915863]
[98.64295197 122.84239197]
[87.03056335 135.24172974]
[74.04017639 142.74172974]
[61.04979706 150.24172974]
[48.05941772 157.74172974]
[35.06903458 165.24172974]
[27.34251976 179.70661926]
[10.94560528 179.97718811]
[2.74603105 165.77511597]
[11.17881680 151.71026611]
[27.56903648 152.25134277]
[40.55941772 144.75134277]
[53.54979706 137.25134277]
[66.54017639 129.75134277]
[79.53056335 122.25134277]
[81.25030518 114.95117950]
[70.32575989 104.67234802]
[84.68978882 100.35083771]
[86.40953827 93.05066681]
[78.13301849 80.54069519]
[69.85650635 68.03073120]
[61.57998657 55.52076340]
[53.30347061 43.01079559]
[36.14444733 39.87164307]
[26.70678139 25.60300255]
[30.38532829 9.24036980]
[21.80663490 -3.06434608]
[13.07875156 -15.26369190]
[4.20297098 -27.35585976]
[-4.67281008 -39.44802856]
[-13.54859066 -51.54019547]
[-22.42437172 -63.63236237]
[-31.30015373 -75.72452545]
[-40.17593384 -87.81669617]
[-55.69158554 -87.60646057]
[-68.34813690 -96.58372498]
[-73.27889252 -111.29654694]
[-68.58786774 -126.08755493]
[-56.07886124 -135.26930237]
[-40.56184387 -135.31121826]
[-28.00342178 -126.19718170]
[-23.23256493 -111.43172455]
[-28.08376694 -96.69247437]
[-19.20798492 -84.60031128]
[-10.33220482 -72.50814056]
[-1.45642364 -60.41597366]
[7.41935730 -48.32380676]
[16.29513931 -36.23163986]
[25.17091942 -24.13947296]
[31.73272705 -20.57206917]
[34.11135101 -11.64303875]
[42.69004440 0.66167760]
[55.62620163 1.14436305]
[66.05831146 9.13440418]
[70.01062012 21.87087631]
[65.81343842 34.73427963]
[74.08995056 47.24424744]
[82.36647034 59.75421524]
[90.64298248 72.26418304]
[98.91950226 84.77414703]
[109.71805573 95.18526459]
[122.52194977 102.99936676]
[135.32585144 110.81347656]
[151.13624573 111.39803314]
[157.96948242 124.63269043]
[170.77339172 132.44679260]
[183.57728577 140.26089478]
[196.38117981 148.07499695]
[209.18507385 155.88911438]
[224.99548340 156.47366333]
[231.82872009 169.70832825]
[244.63261414 177.52243042]
[257.43652344 185.33653259]
[262.43768311 180.03253174]
[268.10064697 175.44619751]
[274.32333374 171.65922546]
[280.99371338 168.73890686]
[287.99188232 166.73695374]
[295.19204712 165.68856812]
[302.46496582 165.61181641]
[309.68014526 166.50733948]
[316.70822144 168.35833740]
[323.42333984 171.13087463]
[329.70532227 174.77453613]
[335.44183350 179.22329712]
[340.53039551 184.39678955]
[344.88031006 190.20166016]
[348.41409302 196.53335571]
[351.06903076 203.27790833]
[352.79815674 210.31405640]
[353.57119751 217.51541138]
[353.37503052 224.75268555]
[352.21389771 231.89608765]
[350.10937500 238.81759644]
[347.09991455 245.39324951]
[343.24020386 251.50538635]
[338.60006714 257.04476929]
[333.26333618 261.91250610]
[340.92095947 274.81060791]
[348.57858276 287.70870972]
[356.23620605 300.60681152]
[371.69635010 302.95581055]
[381.99075317 314.72692871]
[382.25869751 330.36221313]
[372.37368774 342.47915649]
[357.00308228 345.35650635]
[343.40447998 337.63568115]
[337.99865723 322.96218872]
[343.33810425 308.26443481]
[335.68048096 295.36633301]
[328.02288818 282.46823120]
[320.36526489 269.57012939]
[295.28503418 273.68249512]
[271.05697632 265.84564209]
[253.06727600 247.75480652]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 86]
[2 85]
[3 84]
[5 82]
[6 81]
[7 80]
[8 79]
[9 78]
[11 76]
[12 75]
[13 74]
[15 28]
[16 27]
[17 26]
[18 25]
[19 24]
[32 73]
[33 72]
[34 71]
[35 70]
[36 69]
[39 65]
[40 64]
[41 62]
[42 61]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
[111 125]
[112 124]
[113 123]
[114 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
