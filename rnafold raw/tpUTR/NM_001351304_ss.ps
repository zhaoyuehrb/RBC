%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 06:47:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGCUCCAGGCAGACAAGGCUGACAAGCAAUCCAGGGACAAGAUACUCACCAGGAUGAGGAAGAGGACUUUGGGGGACGGGCUUCCCCUGUGAGCAGCAGAGCAGCAUAAUAAAUGAGGCCACUGUGCCAGGCUCCAGGUGGCCUCCCUGGCCUGUCUCCCCACU\
) } def
/len { sequence length } bind def

/coor [
[109.98467255 124.65267944]
[97.26361084 127.98558807]
[88.95958710 140.47731018]
[80.65555573 152.96903992]
[72.35153198 165.46075439]
[72.03478241 185.58776855]
[54.42402649 193.50973511]
[46.59865189 206.30674744]
[38.77328110 219.10375977]
[38.17480469 234.91365051]
[24.93413734 241.73522949]
[28.88130188 257.03866577]
[20.77935219 270.60827637]
[5.43503094 274.39343262]
[-8.04814816 266.14846802]
[-11.67085457 250.76498413]
[-3.28379965 237.36972046]
[12.13712502 233.90986633]
[12.17587948 219.01530457]
[25.97626686 211.27839661]
[33.80163956 198.48138428]
[41.62701416 185.68437195]
[38.33823013 175.95297241]
[41.02805710 165.81138611]
[49.03626633 158.69636536]
[59.85980988 157.15673828]
[68.16383362 144.66500854]
[76.46786499 132.17327881]
[84.77188873 119.68156433]
[78.06340027 106.26529694]
[63.08757019 105.41411591]
[48.11173630 104.56294250]
[33.13590622 103.71176147]
[18.91891670 110.65349579]
[6.65120745 102.20645142]
[-8.32462311 101.35527039]
[-23.30783653 100.64584351]
[-38.29709244 100.07821655]
[-47.78007889 112.36042786]
[-62.68070602 116.69065857]
[-77.26937866 111.40386200]
[-85.93645477 98.53290558]
[-85.34926605 83.02694702]
[-75.73359680 70.84833527]
[-60.78687286 66.68000031]
[-46.25641251 72.12474823]
[-37.72946930 85.08896637]
[-22.74021530 85.65658569]
[-15.90699863 82.75453186]
[-7.47344351 86.37944031]
[7.50238657 87.23062134]
[20.64820671 80.22800446]
[33.98708725 88.73593140]
[48.96291733 89.58710480]
[63.93874741 90.43828583]
[78.91458130 91.28946686]
[85.36797333 77.74864960]
[75.27488708 66.65227509]
[65.18180084 55.55589676]
[49.77344131 57.38952637]
[36.24650574 49.78678894]
[29.80236816 35.67109680]
[32.91893768 20.47022247]
[44.39782333 10.02920914]
[59.82516479 8.36284065]
[73.26882935 16.11186981]
[79.55945587 30.29663658]
[76.27817535 45.46281052]
[86.37126160 56.55918503]
[96.46434784 67.65556335]
[110.90310669 71.72033691]
[125.30274963 67.51911926]
[139.70239258 63.31789780]
[154.10203552 59.11667633]
[168.50167847 54.91545868]
[182.86093140 50.57817078]
[197.17848206 46.10520172]
[211.49604797 41.63223267]
[225.81361389 37.15926361]
[240.13116455 32.68629456]
[254.44873047 28.21332550]
[268.76629639 23.74035645]
[283.08386230 19.26738930]
[297.41217041 0.19618317]
[319.93457031 5.49905300]
[333.65310669 -0.56739908]
[347.31362915 -6.76339102]
[360.91488647 -13.08836842]
[374.51617432 -19.41334534]
[388.11746216 -25.73832130]
[394.61453247 -32.22312164]
[402.03649902 -32.05157471]
[415.75503540 -38.11802673]
[429.47357178 -44.18447876]
[443.19207764 -50.25093079]
[454.28228760 -67.04985046]
[473.39007568 -64.25888062]
[486.86920166 -70.84011841]
[500.34835815 -77.42135620]
[509.35458374 -90.42897797]
[524.18615723 -89.06024933]
[537.66534424 -95.64148712]
[542.88964844 -110.31608582]
[556.65319824 -116.79837799]
[570.61096191 -111.72731781]
[584.09014893 -118.30855560]
[583.95605469 -133.57107544]
[590.46527100 -147.37664795]
[602.32519531 -156.98414612]
[617.18115234 -160.48599243]
[632.08349609 -157.18690491]
[644.07324219 -147.74191284]
[650.76995850 -134.02633667]
[650.84387207 -118.76339722]
[644.28039551 -104.98357391]
[632.38269043 -95.42285156]
[617.51306152 -91.97953033]
[602.62384033 -95.33728027]
[590.67138672 -104.82940674]
[577.19219971 -98.24816895]
[572.60687256 -84.12336731]
[559.03088379 -77.25704193]
[544.24658203 -82.16233826]
[530.76739502 -75.58110046]
[522.72528076 -63.04421234]
[506.92959595 -63.94221115]
[493.45043945 -57.36097336]
[479.97131348 -50.77973938]
[477.51110840 -40.80658722]
[469.78973389 -33.70256424]
[459.21188354 -32.01019669]
[449.25854492 -36.53239441]
[435.54000854 -30.46594429]
[421.82147217 -24.39949226]
[408.10293579 -18.33304024]
[394.44241333 -12.13704777]
[380.84115601 -5.81207037]
[367.23986816 0.51290637]
[353.63861084 6.83788347]
[348.87844849 12.53486443]
[339.71957397 13.15113449]
[326.00103760 19.21758652]
[325.42999268 25.80805206]
[322.80764771 31.93757820]
[318.36697388 36.97949219]
[312.52850342 40.40742111]
[305.86062622 41.85015106]
[299.02438354 41.13157654]
[292.70779419 38.29152298]
[287.55682373 33.58494949]
[273.23925781 38.05791855]
[258.92169189 42.53088760]
[244.60414124 47.00385666]
[230.28657532 51.47682571]
[215.96900940 55.94979095]
[201.65145874 60.42276001]
[187.33389282 64.89572906]
[181.86293030 69.91402435]
[172.70289612 69.31510162]
[158.30325317 73.51631927]
[143.90361023 77.71754456]
[129.50396729 81.91876221]
[115.10432434 86.11997986]
[121.28880310 94.31635284]
[122.98065186 105.17262268]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 29]
[3 28]
[4 27]
[5 26]
[7 22]
[8 21]
[9 20]
[11 18]
[30 56]
[31 55]
[32 54]
[33 53]
[35 51]
[36 50]
[37 48]
[38 47]
[57 70]
[58 69]
[59 68]
[71 163]
[72 162]
[73 161]
[74 160]
[75 159]
[76 157]
[77 156]
[78 155]
[79 154]
[80 153]
[81 152]
[82 151]
[83 150]
[85 142]
[86 141]
[87 139]
[88 138]
[89 137]
[90 136]
[92 135]
[93 134]
[94 133]
[95 132]
[97 128]
[98 127]
[99 126]
[101 124]
[102 123]
[105 120]
[106 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
