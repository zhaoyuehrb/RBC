%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 17:17:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUGUUUCAGUUCCUCCAUUUAACAGAUAUGAAGAGCAUUUUAAGAGGUGCAGCCUCUGGAAGUGGAUCAAACUAGAACUCAUAUGCCAUACUAGAUAUGUUUGUCAAUAAACUUAUGACGUGAA\
) } def
/len { sequence length } bind def

/coor [
[73.96465302 116.04119873]
[71.20228577 110.28840637]
[69.69403839 104.08756256]
[69.50558472 97.70871735]
[70.64512634 91.42964935]
[57.71702957 83.82279205]
[44.78893280 76.21593475]
[31.86083412 68.60907745]
[16.04306602 68.27925110]
[8.99754143 55.15637589]
[-3.93055654 47.54951477]
[-16.85865402 39.94265747]
[-29.78675270 32.33580017]
[-46.57981110 37.04843903]
[-61.32317352 28.37492180]
[-65.20558929 12.06141853]
[-78.31787872 4.77665663]
[-91.43017578 -2.50810480]
[-104.54247284 -9.79286671]
[-117.65476227 -17.07762718]
[-130.76705933 -24.36239052]
[-143.87934875 -31.64715195]
[-156.54467773 -28.85982132]
[-167.34515381 -35.28302765]
[-170.71887207 -46.96968079]
[-183.64697266 -54.57653809]
[-196.57507324 -62.18339539]
[-209.50315857 -69.79025269]
[-219.98941040 -66.42703247]
[-230.36633301 -69.38921356]
[-237.21058655 -77.44477081]
[-238.40634155 -87.72503662]
[-249.47949219 -83.05783844]
[-261.30471802 -84.35332489]
[-270.90808105 -91.16773987]
[-275.93185425 -101.68429565]
[-275.21289062 -113.19618225]
[-287.32629395 -122.04295349]
[-299.43969727 -130.88972473]
[-311.55310059 -139.73649597]
[-323.66650391 -148.58326721]
[-335.77990723 -157.43003845]
[-352.13394165 -158.64561462]
[-359.01354980 -173.53195190]
[-349.34158325 -186.77525330]
[-333.06774902 -184.75195312]
[-326.93313599 -169.54344177]
[-314.81973267 -160.69667053]
[-302.70632935 -151.84989929]
[-290.59292603 -143.00312805]
[-278.47952271 -134.15635681]
[-266.36611938 -125.30958557]
[-248.57327271 -129.26637268]
[-233.21508789 -118.87393188]
[-230.16944885 -100.26113129]
[-210.90101624 -100.67401123]
[-201.89630127 -82.71835327]
[-188.96821594 -75.11149597]
[-176.04011536 -67.50463867]
[-163.11201477 -59.89777756]
[-145.62966919 -60.74729919]
[-136.59458923 -44.75944519]
[-123.48229218 -37.47468185]
[-110.37000275 -30.18992233]
[-97.25770569 -22.90516090]
[-84.14541626 -15.62039852]
[-71.03311920 -8.33563709]
[-57.92082596 -1.05087543]
[-46.08543396 -6.30096388]
[-33.20171356 -3.70408726]
[-24.05643272 6.00509930]
[-22.17989349 19.40770340]
[-9.25179672 27.01456070]
[3.67630148 34.62141800]
[16.60439873 42.22827530]
[31.49746323 42.01400757]
[39.46769333 55.68097687]
[52.39579010 63.28783417]
[65.32389069 70.89469147]
[78.25198364 78.50154877]
[105.26883698 69.87693787]
[127.75416565 87.15999603]
[142.49674988 84.39302063]
[157.23933411 81.62605286]
[171.98193359 78.85908508]
[186.72451782 76.09211731]
[191.74281311 61.57618332]
[203.35725403 51.52629471]
[218.44361877 48.64582062]
[232.94375610 53.70959091]
[242.95718384 65.35547638]
[245.79035950 80.45079803]
[240.68115234 94.93498993]
[229.00393677 104.91186523]
[213.89981079 107.69770813]
[199.43171692 102.54313660]
[189.49148560 90.83470154]
[174.74890137 93.60166931]
[160.00630188 96.36863708]
[145.26371765 99.13561249]
[130.52113342 101.90258026]
[129.94448853 106.20379639]
[128.76480103 110.38008118]
[127.00581360 114.34732056]
[124.70296478 118.02562714]
[134.28146362 129.56912231]
[143.85997009 141.11260986]
[153.43847656 152.65611267]
[168.73942566 150.68524170]
[182.66712952 157.32020569]
[190.77729797 170.44380188]
[190.48200989 185.86833191]
[181.87547302 198.67190552]
[167.70404053 204.76892090]
[152.48973083 202.21386719]
[141.08738708 191.82203674]
[137.13545227 176.90943909]
[141.89497375 162.23461914]
[132.31646729 150.69111633]
[122.73796844 139.14762878]
[113.15946960 127.60412598]
[107.14382935 129.73423767]
[100.81709290 130.56945801]
[94.45476532 130.07341003]
[88.33393097 128.26768494]
[82.72113800 125.23094177]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 80]
[6 79]
[7 78]
[8 77]
[10 75]
[11 74]
[12 73]
[13 72]
[16 68]
[17 67]
[18 66]
[19 65]
[20 64]
[21 63]
[22 62]
[25 60]
[26 59]
[27 58]
[28 57]
[32 55]
[37 52]
[38 51]
[39 50]
[40 49]
[41 48]
[42 47]
[82 101]
[83 100]
[84 99]
[85 98]
[86 97]
[105 121]
[106 120]
[107 119]
[108 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
