%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 12:44:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCAGACAACCCCUUGGCUCCAGCUGUCAGGACCAGACUGAGAUGUGCAGCUGCCCCUACAUCCGUGGCCAGACGGACGCUCCCUGUACCCCCUCCCUCCUCACUUGGAUAAAAAGCAGAUUUGCCUUA\
) } def
/len { sequence length } bind def

/coor [
[89.78174591 132.69853210]
[82.28174591 145.68891907]
[74.78174591 158.67929077]
[67.28174591 171.66967773]
[67.08235931 187.48962402]
[54.01802444 194.64311218]
[46.51802444 207.63349915]
[52.03605652 222.26515198]
[46.80931473 237.00337219]
[33.30570602 244.88922119]
[17.90122604 242.19924927]
[7.86939621 230.20356750]
[7.94693995 214.56617737]
[18.09724426 202.67057800]
[33.52764511 200.13349915]
[41.02764511 187.14311218]
[40.69058228 172.25231934]
[54.29136658 164.16967773]
[61.79136658 151.17929077]
[69.29136658 138.18891907]
[76.79136658 125.19853210]
[62.26177979 107.87820435]
[60.78913879 82.72996521]
[46.39674377 78.50397491]
[32.00434875 74.27798462]
[17.61195374 70.05200195]
[3.21955872 65.82601166]
[-11.17283630 61.60002136]
[-25.56523132 57.37403488]
[-40.22243500 54.18555450]
[-55.06975555 52.05083084]
[-69.91707611 49.91610718]
[-81.44979095 60.47690964]
[-97.07486725 61.10221100]
[-109.41461945 51.49677277]
[-112.64260101 36.19598389]
[-105.23464966 22.42440796]
[-90.68857574 16.68456459]
[-75.87258911 21.68663216]
[-67.78235626 35.06878662]
[-52.93503189 37.20351028]
[-38.08771133 39.33823395]
[-45.63493729 26.37523270]
[-42.01825333 11.81777382]
[-29.28189278 3.89406943]
[-14.62473965 7.08277941]
[-6.33135748 19.58157158]
[-9.08935738 34.32584000]
[-21.33924294 42.98163986]
[-6.94684744 47.20762634]
[7.44554710 51.43361664]
[21.83794212 55.65960312]
[36.23033524 59.88559341]
[50.62273026 64.11157990]
[65.01512909 68.33757019]
[71.55448151 64.66512299]
[60.95001221 54.05638885]
[49.85810471 43.95839310]
[51.55541992 29.05472946]
[64.63388062 21.70939445]
[78.24366760 28.01603317]
[81.09387207 42.74377441]
[84.63318634 57.32023621]
[91.17254639 53.64779282]
[95.05483246 39.15890503]
[98.93711853 24.67001915]
[102.81939697 10.18113232]
[106.70168304 -4.30775547]
[98.58348083 -17.86763382]
[102.51230621 -33.17579651]
[116.15725708 -41.15018463]
[131.42301941 -37.05973434]
[139.25270081 -23.33123779]
[135.00108337 -8.10956573]
[121.19057465 -0.42546985]
[117.30828857 14.06341743]
[113.42600250 28.55230522]
[109.54371643 43.04119110]
[105.66143036 57.53007889]
[129.22377014 74.85620117]
[134.25282288 100.59210205]
[148.83000183 104.12848663]
[161.51948547 93.01546478]
[178.16441345 91.63328552]
[192.23136902 100.32703400]
[198.31599426 115.52536011]
[212.97319031 118.71383667]
[227.63038635 121.90231323]
[242.28759766 125.09079742]
[250.99632263 112.66365051]
[263.76498413 104.53937531]
[278.63116455 101.92971039]
[293.32409668 105.20165253]
[305.61157227 113.82621002]
[313.63903809 126.46365356]
[316.20956421 141.17153931]
[330.86676025 144.36001587]
[345.52395630 147.54849243]
[355.79577637 136.12983704]
[370.40570068 131.39216614]
[385.42376709 134.60987854]
[396.81015015 144.91741943]
[401.50201416 159.54212952]
[398.23724365 174.55001831]
[387.89404297 185.90405273]
[373.25473022 190.55004883]
[358.25714111 187.23825073]
[346.93557739 176.85952759]
[342.33547974 162.20570374]
[327.67828369 159.01721191]
[313.02108765 155.82873535]
[304.57299805 168.13966370]
[292.02114868 176.30035400]
[277.26129150 179.04112244]
[262.53692627 175.91372681]
[250.09828186 167.36425781]
[241.85842896 154.66986084]
[239.09912109 139.74800110]
[224.44190979 136.55952454]
[209.78471375 133.37104797]
[195.12750244 130.18255615]
[185.98634338 139.98654175]
[173.08374023 144.00201416]
[159.78146362 141.07006836]
[149.60148621 131.85676575]
[145.29360962 118.70565796]
[130.71644592 115.16927338]
[126.32198334 121.92623901]
[120.47041321 127.46942139]
[113.48564911 131.49197388]
[105.75435638 133.77120972]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 21]
[2 20]
[3 19]
[4 18]
[6 16]
[7 15]
[23 55]
[24 54]
[25 53]
[26 52]
[27 51]
[28 50]
[29 49]
[30 42]
[31 41]
[32 40]
[64 79]
[65 78]
[66 77]
[67 76]
[68 75]
[81 127]
[82 126]
[86 121]
[87 120]
[88 119]
[89 118]
[96 111]
[97 110]
[98 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
