%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 20:24:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGCCCAGGGGGGCUGGCGAGGAGCUGCCGCCGGAUCCCGGGGACCCUCCUACUGAUGCCCGUGGUCACCACAAUAAAGAGCCCUCCACCCUCCCCACUG\
) } def
/len { sequence length } bind def

/coor [
[119.84423828 323.47140503]
[118.01872253 308.58291626]
[116.19319916 293.69442749]
[101.78443909 289.78073120]
[89.93972015 280.62387085]
[82.48303986 267.59457397]
[80.57770538 252.66281128]
[84.54495239 238.10003662]
[93.81027222 226.13354492]
[106.98641205 218.60592651]
[105.16088867 203.71742249]
[103.33537292 188.82891846]
[101.50985718 173.94041443]
[99.68434143 159.05191040]
[97.85882568 144.16340637]
[96.03330231 129.27490234]
[94.20778656 114.38640594]
[88.20441437 100.64015198]
[78.52371216 89.18222809]
[68.84301758 77.72430420]
[59.16231537 66.26638031]
[48.63689804 55.57920837]
[37.32793427 45.72489929]
[26.01897240 35.87059402]
[14.71000862 26.01628685]
[3.40104556 16.16198158]
[-11.64185047 19.48123741]
[-25.59174538 13.37764740]
[-33.18296051 0.38390020]
[-31.68522835 -14.41119385]
[-42.99419022 -24.26549911]
[-51.67685318 -27.62370110]
[-54.49185944 -34.59690094]
[-65.49504089 -44.79150391]
[-76.49822998 -54.98610687]
[-87.50141144 -65.18070984]
[-103.22947693 -71.51035309]
[-101.50115204 -88.37597656]
[-84.81620026 -91.38407135]
[-77.30680847 -76.18389130]
[-66.30362701 -65.98928833]
[-55.30044174 -55.79468536]
[-44.29725647 -45.60008240]
[-33.13988495 -35.57446289]
[-21.83092308 -25.72015572]
[-7.37989473 -29.22811890]
[6.53030825 -23.48614693]
[14.48517036 -10.50255871]
[13.25535202 4.85301828]
[24.56431580 14.70732498]
[35.87327957 24.56163025]
[47.18223953 34.41593933]
[58.49120331 44.27024460]
[60.97371292 43.98580933]
[63.71856689 44.61557007]
[66.40124512 46.25922775]
[68.66863251 48.90598297]
[70.17523193 52.42805862]
[70.62023926 56.58567810]
[80.30094147 68.04360199]
[89.98163605 79.50152588]
[99.66233826 90.95944977]
[104.02644348 84.02401733]
[112.10731506 79.38865662]
[125.24750519 72.15433502]
[138.38769531 64.92000580]
[151.52787781 57.68568802]
[162.48709106 44.74999237]
[177.95106506 51.69994736]
[175.55355835 68.48352051]
[158.76220703 70.82587433]
[145.62200928 78.06019592]
[132.48182678 85.29451752]
[119.34163666 92.52884674]
[133.82939148 88.64232635]
[147.66474915 94.43740082]
[155.05783081 107.48892212]
[152.91476440 122.33504486]
[142.13238525 132.76289368]
[127.22293091 134.40859985]
[114.42578125 126.58345795]
[109.09629059 112.56089020]
[110.92180634 127.44939423]
[112.74732208 142.33789062]
[114.57283783 157.22639465]
[116.39836121 172.11489868]
[118.22387695 187.00340271]
[120.04939270 201.89190674]
[121.87490845 216.78039551]
[136.47935486 220.90177917]
[148.36123657 230.27534485]
[155.72923279 243.44828796]
[157.48774719 258.39804077]
[153.39973450 272.84286499]
[144.11811829 284.59008789]
[131.08171082 291.86889648]
[132.90722656 306.75738525]
[134.73274231 321.64590454]
[146.43685913 332.61828613]
[145.01213074 348.59796143]
[131.55148315 357.32666016]
[116.38077545 352.10852051]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 98]
[2 97]
[3 96]
[10 89]
[11 88]
[12 87]
[13 86]
[14 85]
[15 84]
[16 83]
[17 82]
[18 62]
[19 61]
[20 60]
[21 59]
[22 53]
[23 52]
[24 51]
[25 50]
[26 49]
[30 45]
[31 44]
[33 43]
[34 42]
[35 41]
[36 40]
[64 74]
[65 73]
[66 72]
[67 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
