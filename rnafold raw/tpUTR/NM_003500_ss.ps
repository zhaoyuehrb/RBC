%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 13:51:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAACCAACAGUAUUCAAGAAGCAACCAGCACCAUCAUGUGAUAAUGGUACUAUGGCAUAUAUGCAACAUUAAAAUUUUAAAUUAGA\
) } def
/len { sequence length } bind def

/coor [
[124.58107758 387.43371582]
[114.47089386 376.30020142]
[106.44777679 363.58010864]
[100.75554657 349.65997314]
[97.56718445 334.96286011]
[96.97957611 319.93536377]
[99.01058197 305.03414917]
[103.59848022 290.71206665]
[110.60385132 277.40432739]
[119.81380463 265.51535034]
[130.94847107 255.40641785]
[143.66947937 247.38473511]
[137.99041748 233.50135803]
[132.31137085 219.61796570]
[126.63232422 205.73458862]
[114.49221039 205.75968933]
[103.05476379 201.58564758]
[93.73083496 193.70155334]
[87.67941284 183.05566406]
[85.66364288 170.94148254]
[87.95461273 158.84054565]
[94.29520416 148.24125671]
[103.92869568 140.45578003]
[99.74891663 126.04989624]
[86.87065887 122.50067902]
[77.44462585 113.03514862]
[73.94928741 100.14217377]
[77.30369568 87.21181488]
[86.62585449 77.64396667]
[82.95707703 63.09954834]
[72.07946014 51.61094284]
[76.46886444 37.37779999]
[72.80009460 22.83338165]
[69.13131714 8.28896332]
[65.46254730 -6.25545454]
[61.79377365 -20.79987335]
[47.13720703 -25.61532593]
[37.42849350 -37.60467529]
[35.76565552 -52.94216156]
[42.67929459 -66.73365021]
[55.96329117 -74.57833099]
[71.37877655 -73.97298431]
[84.00671387 -65.11078644]
[89.81758881 -50.81962204]
[86.95716095 -35.65975571]
[76.33818817 -24.46864700]
[80.00696564 -9.92422771]
[83.67573547 4.62019014]
[87.34451294 19.16460800]
[91.01328278 33.70902634]
[101.62848663 44.15731812]
[97.50149536 59.43077469]
[101.17027283 73.97519684]
[116.28936005 79.66979980]
[125.14349365 93.18348694]
[124.32733917 109.31883240]
[114.15479279 121.87010956]
[118.33457947 136.27600098]
[136.17153931 139.88951111]
[149.78314209 151.84506226]
[155.61404419 168.91029358]
[152.19580078 186.53302002]
[140.51571655 200.05552673]
[146.19476318 213.93891907]
[151.87380981 227.82231140]
[157.55285645 241.70568848]
[172.24890137 238.51232910]
[187.27619934 237.91960144]
[202.17810059 239.94554138]
[216.50175476 244.52856445]
[229.81187439 251.52940369]
[241.70397949 260.73532104]
[251.81669617 271.86654663]
[259.84271240 284.58480835]
[265.53808594 298.50363159]
[268.72979736 313.20004272]
[269.32080078 328.22741699]
[267.29318237 343.12908936]
[262.70852661 357.45220947]
[255.70617676 370.76153564]
[246.49891663 382.65261841]
[235.36654663 392.76406860]
[222.64735413 400.78860474]
[208.72789001 406.48242188]
[194.03112793 409.67245483]
[179.00369263 410.26177979]
[164.10224915 408.23245239]
[149.77963257 403.64617920]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 66]
[13 65]
[14 64]
[15 63]
[23 58]
[24 57]
[29 53]
[30 52]
[32 50]
[33 49]
[34 48]
[35 47]
[36 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
