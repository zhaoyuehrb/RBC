%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 13:42:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUUUUGUGGGAGGGAACCCAGACCUCUCCUCCCAACCAUGAGAUCCCAAGGAUGGAGAACAACUUACCCAGUAGCUAGAAUGUUAAUGGCAGAAGAGAAAACAAUAAAUCAUAUUGACUCAA\
) } def
/len { sequence length } bind def

/coor [
[102.58588409 258.60244751]
[101.83222198 243.62138367]
[101.07855988 228.64031982]
[100.32489014 213.65927124]
[99.57122803 198.67822266]
[89.24950409 184.54489136]
[97.63110352 168.20724487]
[96.50120544 153.24986267]
[95.37129974 138.29248047]
[94.24139404 123.33509827]
[81.00702667 116.27453613]
[67.95426941 123.66545105]
[54.90151596 131.05635071]
[41.84875870 138.44726562]
[28.79600334 145.83818054]
[15.74324799 153.22909546]
[14.98279953 168.63769531]
[5.99396610 181.17581177]
[-8.35494995 186.84257507]
[-23.48526192 183.82972717]
[-34.56893921 173.09867859]
[-38.06922531 158.07363892]
[-32.86919022 143.54907227]
[-20.62814331 134.15969849]
[-5.25216055 132.90164185]
[8.35233784 140.17633057]
[21.40509415 132.78541565]
[34.45785141 125.39450836]
[47.51060486 118.00360107]
[60.56336212 110.61269379]
[73.61611938 103.22177887]
[75.30896759 88.31761169]
[64.24626923 78.18762207]
[53.05715179 68.19744110]
[41.74338150 58.34865570]
[30.42960930 48.49987030]
[14.94060898 45.27474213]
[10.42124844 31.08232689]
[-0.89252275 21.23354149]
[-16.38152313 18.00841331]
[-20.90088463 3.81599879]
[-32.21465302 -6.03278732]
[-47.96191788 -4.69144583]
[-59.99137115 -14.94170666]
[-61.16614914 -30.70227242]
[-50.78927612 -42.62268066]
[-35.01716995 -43.63076019]
[-23.20714188 -33.12844086]
[-22.36586761 -17.34655762]
[-11.05209827 -7.49777174]
[3.62766576 -4.97709608]
[8.95626354 9.91977024]
[20.27003479 19.76855659]
[34.94979858 22.28923225]
[40.27839661 37.18610001]
[51.59216690 47.03488541]
[62.90593719 56.88367081]
[70.09708405 58.92518234]
[74.37625885 67.12492371]
[85.43895721 77.25491333]
[92.64641571 76.71930695]
[99.07385254 78.19746399]
[104.21608734 81.23793793]
[107.74980927 85.27747345]
[109.55365753 89.70430756]
[121.57716370 80.73573303]
[133.60066223 71.76715851]
[135.76466370 54.46223831]
[149.47146606 44.23235703]
[166.01336670 46.97161865]
[177.80767822 37.70372391]
[189.60200500 28.43583107]
[195.67236328 13.82551193]
[210.46023560 12.04559422]
[222.25456238 2.77769995]
[234.04888916 -6.49019432]
[245.84321594 -15.75808811]
[247.47637939 -31.47776794]
[259.79916382 -41.37343597]
[275.50070190 -39.57416916]
[285.26553345 -27.14743996]
[283.30035400 -11.46580696]
[270.77108765 -1.83290362]
[255.11111450 -3.96376181]
[243.31678772 5.30413246]
[231.52246094 14.57202625]
[219.72813416 23.83992004]
[214.50138855 37.78733826]
[198.86990356 40.23015594]
[187.07557678 49.49805069]
[175.28125000 58.76594543]
[175.53758240 71.71349335]
[168.15078735 82.58712006]
[155.65396118 87.25636292]
[142.56924438 83.79066467]
[130.54573059 92.75923920]
[118.52223206 101.72781372]
[133.37361145 99.62152100]
[147.15902710 93.70861053]
[162.15885925 93.63890839]
[175.99862671 99.42344666]
[186.48744202 110.14653015]
[191.96493530 124.11067200]
[191.56398010 139.10531616]
[185.34806824 152.75677490]
[174.30117798 162.90399170]
[160.17205811 167.94065857]
[145.19738770 167.06945801]
[131.74766541 160.42828369]
[121.95202637 149.06846619]
[117.36131287 134.78982544]
[109.19878387 122.20519257]
[110.32868195 137.16258240]
[111.45858765 152.11996460]
[112.58848572 167.07734680]
[121.88518524 176.12301636]
[122.46054077 188.67874146]
[114.55228424 197.92454529]
[115.30594635 212.90560913]
[116.05960846 227.88665771]
[116.81327820 242.86772156]
[117.56694031 257.84875488]
[124.40146637 273.36410522]
[111.38446808 284.22659302]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 122]
[2 121]
[3 120]
[4 119]
[5 118]
[7 115]
[8 114]
[9 113]
[10 112]
[11 31]
[12 30]
[13 29]
[14 28]
[15 27]
[16 26]
[32 60]
[33 59]
[34 57]
[35 56]
[36 55]
[38 53]
[39 52]
[41 50]
[42 49]
[65 97]
[66 96]
[67 95]
[70 91]
[71 90]
[72 89]
[74 87]
[75 86]
[76 85]
[77 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
