%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 06:07:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCACCCUGGGGAUGCUCAGCACCUUGAUUGACACCCGCUCGCCUGGCCAGAGCGGGCUGCGUGCACAUGCUGGGCAGAGAGGAAUAUUUAAGAAAUAAAGCUUGGACCCAGAUUUUUCCACAA\
) } def
/len { sequence length } bind def

/coor [
[102.04798126 287.73492432]
[93.69073486 275.40585327]
[100.73609924 261.23992920]
[99.99429321 246.25828552]
[84.46459961 239.03306580]
[74.62982178 224.90206909]
[73.23476410 207.65361023]
[80.74699402 191.96649170]
[95.20576477 182.14088440]
[93.72396851 167.21426392]
[92.24217224 152.28762817]
[90.76037598 137.36100769]
[89.27857971 122.43437195]
[83.49060059 112.50357819]
[83.68744659 102.82381439]
[88.17330933 96.27174377]
[77.50131989 85.73094177]
[66.82932281 75.19013214]
[56.15733337 64.64933014]
[45.48534012 54.10852432]
[34.81334686 43.56771851]
[24.14135551 33.02691269]
[13.46936321 22.48610878]
[2.79737043 11.94530201]
[-10.63761997 13.57386208]
[-22.36989212 7.22892237]
[-28.18855476 -4.55569506]
[-26.15422058 -17.34246063]
[-36.56222534 -28.14400673]
[-52.13233566 -28.60163307]
[-62.53366089 -39.70420456]
[-62.00143433 -54.54510117]
[-72.40943909 -65.34664917]
[-80.71154785 -69.41358948]
[-82.93718719 -76.54644775]
[-93.07483673 -87.60212708]
[-103.34844971 -98.53157806]
[-113.75646210 -109.33312225]
[-124.16446686 -120.13466644]
[-134.57247925 -130.93621826]
[-144.98048401 -141.73776245]
[-155.38848877 -152.53930664]
[-165.79649353 -163.34085083]
[-180.90921021 -160.24096680]
[-195.29051208 -165.82502747]
[-204.35137939 -178.31118774]
[-205.20051575 -193.71516418]
[-197.56697083 -207.12159729]
[-183.88658142 -214.25254822]
[-168.52470398 -212.83255005]
[-156.38327026 -203.31472778]
[-151.33654785 -188.73617554]
[-154.99494934 -173.74885559]
[-144.58694458 -162.94731140]
[-134.17893982 -152.14576721]
[-123.77092743 -141.34422302]
[-113.36292267 -130.54267883]
[-102.95491028 -119.74112701]
[-92.54690552 -108.93958282]
[-85.56523132 -106.27736664]
[-82.01915741 -97.73978424]
[-71.88150787 -86.68410492]
[-61.60789490 -75.75465393]
[-51.19988632 -64.95310974]
[-36.34945679 -64.93441772]
[-25.64038658 -54.12838364]
[-25.76067924 -38.55201340]
[-15.35267353 -27.75046730]
[1.41074157 -28.18803215]
[13.57982159 -16.16679955]
[13.33817577 1.27331007]
[24.01016808 11.81411552]
[34.68215942 22.35492134]
[45.35415268 32.89572525]
[56.02614594 43.43653107]
[66.69813538 53.97733688]
[77.37013245 64.51814270]
[88.04212189 75.05895233]
[98.71411133 85.59975433]
[92.27719116 72.05110168]
[93.15103149 57.07657623]
[101.12017059 44.36859131]
[114.21957397 37.06068039]
[129.21919250 36.95481873]
[142.42044067 44.07711411]
[150.56814575 56.67135239]
[151.65325928 71.63205719]
[145.40820312 85.27021027]
[133.37289429 94.22293091]
[118.51619720 96.28279877]
[133.18583679 99.41357422]
[147.85546875 102.54434204]
[162.52511597 105.67511749]
[177.19474792 108.80588531]
[191.86437988 111.93666077]
[203.31391907 101.46346283]
[218.73652649 99.75379181]
[232.20188904 107.46504974]
[238.53231812 121.63210297]
[235.29360962 136.80741882]
[223.73114014 147.15580750]
[208.29090881 148.69807434]
[194.90997314 140.84118652]
[188.73361206 126.60630035]
[174.06398010 123.47552490]
[159.39433289 120.34475708]
[144.72470093 117.21398163]
[130.05506897 114.08320618]
[115.38542938 110.95243835]
[104.20520782 120.95257568]
[105.68700409 135.87921143]
[107.16880035 150.80583191]
[108.65059662 165.73246765]
[110.13239288 180.65908813]
[122.45995331 184.88815308]
[132.21194458 193.46310425]
[137.94158936 205.06416321]
[138.81704712 217.92623901]
[134.74205017 230.10755920]
[126.36495972 239.78277588]
[114.97593689 245.51647949]
[115.71774292 260.49810791]
[124.12805176 273.89877319]
[117.02962494 286.99310303]
[123.85187531 302.51385498]
[110.82627869 313.36602783]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 124]
[3 122]
[4 121]
[9 114]
[10 113]
[11 112]
[12 111]
[13 110]
[16 79]
[17 78]
[18 77]
[19 76]
[20 75]
[21 74]
[22 73]
[23 72]
[24 71]
[28 68]
[29 67]
[32 64]
[33 63]
[35 62]
[36 61]
[37 59]
[38 58]
[39 57]
[40 56]
[41 55]
[42 54]
[43 53]
[90 109]
[91 108]
[92 107]
[93 106]
[94 105]
[95 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
