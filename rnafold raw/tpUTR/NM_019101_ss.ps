%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 04:40:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGUAACUUCAUCUAAGUCCCCAGAUGGGUACAAUGGGAGCUGAGUUGUUGGAGGGAGAAGCUGGAGACUUCCAGCUCCAGCUCCCACUCAAGAUAAUAAAGAUAAUUUUUCAAUCCUCA\
) } def
/len { sequence length } bind def

/coor [
[90.67595673 140.87539673]
[92.69107819 126.01137543]
[97.09581757 111.66849518]
[84.87039185 120.35980988]
[72.64496613 129.05111694]
[60.41954041 137.74244690]
[55.15910721 145.35842896]
[47.76556778 146.49536133]
[35.32041168 154.86901855]
[29.86562538 162.34704590]
[22.44526482 163.29322815]
[9.78863049 171.34367371]
[-2.86800241 179.39411926]
[-15.52463627 187.44456482]
[-28.18126869 195.49499512]
[-29.00519753 210.99018860]
[-38.80573654 223.02052307]
[-53.81437683 226.96011353]
[-68.25999451 221.29408264]
[-76.58795166 208.20115662]
[-75.59597778 192.71582031]
[-65.66550446 180.79251099]
[-50.61501312 177.01597595]
[-36.23171234 182.83836365]
[-23.57507896 174.78791809]
[-10.91844559 166.73748779]
[1.73818803 158.68704224]
[14.39482117 150.63659668]
[26.94675636 142.42385864]
[39.39191055 134.05021667]
[51.72822571 125.51701355]
[63.95364761 116.82569885]
[76.17907715 108.13438416]
[88.40450287 99.44306946]
[89.79949188 94.78984833]
[92.94500732 91.17382812]
[93.71718597 76.19371796]
[94.48937225 61.21360779]
[95.26155090 46.23349762]
[96.03372955 31.25338554]
[96.80591583 16.27327347]
[97.57809448 1.29316199]
[98.35027313 -13.68694973]
[99.12245941 -28.66706085]
[96.41528320 -37.51842499]
[100.11228943 -44.02143860]
[92.29724884 -54.37963486]
[93.64194489 -66.88072205]
[102.87146759 -74.81446075]
[104.41378021 -89.73495483]
[105.95610046 -104.65545654]
[107.49841309 -119.57595062]
[109.04072571 -134.49644470]
[110.58303833 -149.41694641]
[112.12535858 -164.33744812]
[113.66767120 -179.25794983]
[100.44500732 -186.81314087]
[91.44371033 -199.09713745]
[88.22331238 -213.98165894]
[91.34176636 -228.88786316]
[100.25878143 -241.23316956]
[113.42942810 -248.87869263]
[128.57182312 -250.49977112]
[143.06243896 -245.81555176]
[154.39070129 -235.63761902]
[160.59391785 -221.72935486]
[160.59733582 -206.50042725]
[154.40037537 -192.58937073]
[143.07669067 -182.40635681]
[128.58816528 -177.71562195]
[127.04585266 -162.79513550]
[125.50354004 -147.87463379]
[123.96122742 -132.95413208]
[122.41890717 -118.03363800]
[120.87659454 -103.11313629]
[119.33428192 -88.19264221]
[117.79196167 -73.27214050]
[125.83644867 -57.73273849]
[115.06755829 -42.86380768]
[114.10256958 -27.89488029]
[113.33038330 -12.91476822]
[112.55820465 2.06534314]
[111.78602600 17.04545403]
[111.01383972 32.02556610]
[110.24166107 47.00567627]
[109.46948242 61.98579025]
[108.69729614 76.96589661]
[107.92511749 91.94601440]
[117.66043854 80.53446198]
[129.12042236 70.85618591]
[142.00051880 63.16835403]
[155.95852661 57.67524719]
[170.62351990 54.52282333]
[185.60585022 53.79484940]
[200.50738525 55.51066971]
[214.93218994 59.62469482]
[228.49694824 66.02760315]
[240.84123230 74.54925537]
[251.63703918 84.96322632]
[260.59747314 96.99278259]
[267.48449707 110.31829071]
[272.11505127 124.58567047]
[274.36611938 139.41580200]
[274.17788696 154.41461182]
[271.55535889 169.18357849]
[266.56820679 183.33024597]
[259.34896851 196.47872925]
[250.08943176 208.27963257]
[239.03569031 218.41938782]
[226.48144531 226.62857056]
[212.76026917 232.68904114]
[198.23675537 236.43977356]
[183.29685974 237.78109741]
[168.33752441 236.67735291]
[153.75624084 233.15789795]
[139.94049072 227.31623840]
[127.25737762 219.30758667]
[116.04389191 209.34475708]
[106.59801483 197.69248962]
[99.17073822 184.66040039]
[93.95941162 170.59475708]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 34]
[4 33]
[5 32]
[6 31]
[8 30]
[9 29]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[36 88]
[37 87]
[38 86]
[39 85]
[40 84]
[41 83]
[42 82]
[43 81]
[44 80]
[46 79]
[49 77]
[50 76]
[51 75]
[52 74]
[53 73]
[54 72]
[55 71]
[56 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
