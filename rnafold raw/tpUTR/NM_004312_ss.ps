%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 18:32:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACCUCGCUCUGGUGCCCGUCUGUGUGGGAGCCCCCACUGUAACACUCUAAUAAAUCAGUUUGUUCAGAUGUG\
) } def
/len { sequence length } bind def

/coor [
[40.21987534 215.99061584]
[29.95166969 226.92514038]
[19.68346214 237.85968018]
[9.41525555 248.79420471]
[-0.85295093 259.72872925]
[1.17813563 275.23385620]
[-7.27599573 288.38912964]
[-22.22356224 292.98309326]
[-36.60678101 286.84655762]
[-43.63433456 272.87701416]
[-39.98802948 257.67050171]
[-27.38953590 248.40702820]
[-11.78748035 249.46052551]
[-1.51927376 238.52600098]
[8.74893284 227.59147644]
[19.01713943 216.65693665]
[29.28534508 205.72241211]
[31.97642517 186.75604248]
[50.93759155 180.53163147]
[60.25481033 168.77622986]
[69.57202148 157.02082825]
[78.88924408 145.26542664]
[88.20645905 133.51002502]
[97.52367401 121.75461578]
[81.60838318 107.19384766]
[86.67150116 88.50315094]
[80.57044983 74.79996490]
[74.46939850 61.09678650]
[68.36835480 47.39360428]
[62.26730347 33.69042206]
[48.68929291 24.49423981]
[50.13414001 8.15886593]
[65.11550903 1.48873198]
[78.22184753 11.34549999]
[75.97048187 27.58937263]
[82.07153320 41.29255295]
[88.17258453 54.99573517]
[94.27363586 68.69892120]
[100.37467957 82.40209961]
[109.13683319 83.71254730]
[116.63026428 89.34930420]
[120.75572968 98.34258270]
[120.07821655 108.73274994]
[134.91729736 106.54150391]
[149.75637817 104.35025787]
[164.59547424 102.15901184]
[174.01765442 89.75497437]
[189.09780884 87.74412537]
[200.86509705 96.80317688]
[215.70417786 94.61193085]
[222.77357483 80.79877472]
[236.62719727 73.80901337]
[251.93804932 76.33036041]
[262.81881714 87.39331055]
[265.08560181 102.74391937]
[257.86679077 116.47957611]
[243.93814087 123.31864166]
[228.65553284 120.63134766]
[217.89543152 109.45101929]
[203.05635071 111.64226532]
[194.40963745 123.71578979]
[179.39192200 126.14941406]
[166.78671265 116.99810028]
[151.94763184 119.18933868]
[137.10853577 121.38058472]
[122.26945496 123.57183075]
[109.27907562 131.07183838]
[99.96186066 142.82723999]
[90.64464569 154.58264160]
[81.32743073 166.33804321]
[72.01020813 178.09344482]
[62.69299316 189.84884644]
[64.59749603 200.93405151]
[60.02129364 210.96371460]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 14]
[5 13]
[19 72]
[20 71]
[21 70]
[22 69]
[23 68]
[24 67]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[43 66]
[44 65]
[45 64]
[46 63]
[49 60]
[50 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
