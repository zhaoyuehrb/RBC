%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 14:24:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCAGAUGGGCCCCACAGCCACGGGGUCCCUUCCCUGGGUCAGGCCACUAGGCGGGGCGUGCAUGUUGCCCUUUCAGAACGUUCUCUUCAGUUUUAUCUUUCAGUUUUACCAUUGUUAGCAAAAAAGUUAUCUGGUUCUCAAAGCAAUAAAGGUGUCCAU\
) } def
/len { sequence length } bind def

/coor [
[80.38697052 128.81500244]
[69.47636414 139.10862732]
[58.56576157 149.40225220]
[47.65515518 159.69587708]
[36.74454880 169.98950195]
[25.83394623 180.28312683]
[26.03772163 199.18861389]
[12.62332916 212.05668640]
[-5.62210608 211.10055542]
[-16.12536621 221.80949402]
[-26.62862587 232.51844788]
[-37.02755737 243.32872009]
[-47.32118225 254.23933411]
[-57.61480713 265.14993286]
[-67.90843201 276.06054688]
[-64.90406799 291.28399658]
[-71.45214844 305.35177612]
[-85.03479004 312.85452271]
[-100.42920685 310.90728760]
[-111.71591949 300.25881958]
[-114.55495453 285.00369263]
[-107.85466003 271.00778198]
[-94.19142151 263.65280151]
[-78.81903839 265.76690674]
[-68.52541351 254.85630798]
[-58.23178864 243.94570923]
[-47.93816376 233.03509521]
[-45.62400055 225.97700500]
[-37.33757401 222.01518250]
[-26.83431244 211.30622864]
[-16.33105278 200.59729004]
[-18.91710091 189.42633057]
[-15.73501587 178.28527832]
[-7.46944141 169.99501038]
[3.89298201 166.71296692]
[15.54032135 169.37252808]
[26.45092583 159.07890320]
[37.36153030 148.78527832]
[48.27213669 138.49165344]
[59.18273926 128.19802856]
[70.09334564 117.90440369]
[62.22201538 109.96459961]
[56.72850418 98.97607422]
[54.69798279 85.72739410]
[56.93854904 71.36943817]
[42.84315872 66.23913574]
[28.74777031 61.10882950]
[12.70051479 64.48782349]
[1.95350552 52.10098648]
[7.56234455 36.69082642]
[23.75713921 34.11000061]
[33.87807465 47.01343918]
[47.97346115 52.14374161]
[62.06885147 57.27404404]
[70.90914917 45.15591049]
[61.72013855 33.30002213]
[52.53113174 21.44413185]
[43.34212112 9.58824062]
[34.15311432 -2.26764894]
[24.96410561 -14.12353897]
[9.33231354 -14.54905605]
[-2.33445859 -24.96157074]
[-4.52751732 -40.44461060]
[3.78863335 -53.68755722]
[18.68736076 -58.43749619]
[33.13394165 -52.45165634]
[40.30714035 -38.55635834]
[36.81999588 -23.31254768]
[46.00900650 -11.45665741]
[55.19801331 0.39923283]
[64.38702393 12.25512314]
[73.57602692 24.11101341]
[82.76503754 35.96690369]
[90.07929993 34.30812454]
[86.76199341 19.67954254]
[101.39062500 16.36247444]
[104.70783234 30.99057198]
[112.02209473 29.33179474]
[115.19765472 14.67178726]
[118.37320709 0.01177917]
[121.54876709 -14.64822865]
[110.12107086 -24.90996552]
[105.37051392 -39.51571274]
[108.57498169 -54.53659439]
[118.87248993 -65.93207550]
[133.49305725 -70.63681793]
[148.50381470 -67.38528442]
[159.86695862 -57.05210876]
[164.52586365 -42.41687012]
[161.22729492 -27.41637039]
[150.85855103 -16.08567047]
[136.20877075 -11.47267056]
[133.03321838 3.18733716]
[129.85766602 17.84734535]
[126.68209839 32.50735474]
[135.04586792 44.95915985]
[149.81797791 47.56388092]
[164.59010315 50.16860580]
[179.36221313 52.77332687]
[194.13432312 55.37805176]
[208.90644836 57.98277283]
[223.67855835 60.58749390]
[237.79501343 50.29566574]
[254.65982056 53.31375885]
[263.95736694 67.30120087]
[278.77719116 69.61898041]
[293.59704590 71.93676758]
[308.41690063 74.25454712]
[323.23675537 76.57232666]
[338.13531494 78.31372070]
[353.09020996 79.47611237]
[368.04510498 80.63849640]
[383.00000000 81.80088043]
[390.39617920 72.41843414]
[401.30081177 67.83959961]
[412.93914795 69.10321808]
[422.41046143 75.77726746]
[427.41085815 86.09590912]
[442.30941772 87.83730316]
[457.20800781 89.57869720]
[472.10656738 91.32009125]
[484.34667969 81.32234192]
[500.06265259 82.99104309]
[509.93041992 95.33618164]
[508.09564209 111.03360748]
[495.64688110 120.77031708]
[479.96972656 118.76968384]
[470.36517334 106.21866608]
[455.46661377 104.47727203]
[440.56802368 102.73587799]
[425.66946411 100.99448395]
[412.06811523 113.19341278]
[393.54809570 111.59907532]
[381.83761597 96.75577545]
[366.88272095 95.59339142]
[351.92782593 94.43100739]
[336.97293091 93.26861572]
[334.73840332 95.03772736]
[331.65148926 96.00572205]
[328.02221680 95.83697510]
[324.27838135 94.31733704]
[320.91897583 91.39217377]
[306.09912109 89.07439423]
[291.27926636 86.75661469]
[276.45941162 84.43883514]
[261.63955688 82.12104797]
[252.36956787 91.11176300]
[239.41825867 93.13677979]
[227.49693298 87.23194885]
[221.07383728 75.35961151]
[206.30172729 72.75489044]
[191.52960205 70.15016937]
[176.75749207 67.54544067]
[161.98536682 64.94071960]
[147.21325684 62.33599854]
[132.44114685 59.73127747]
[144.27943420 78.31788635]
[146.88758850 99.15351105]
[140.63475037 118.10945892]
[127.56467438 131.79454041]
[110.84782410 138.16007996]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 41]
[2 40]
[3 39]
[4 38]
[5 37]
[6 36]
[9 31]
[10 30]
[11 29]
[12 27]
[13 26]
[14 25]
[15 24]
[45 54]
[46 53]
[47 52]
[55 73]
[56 72]
[57 71]
[58 70]
[59 69]
[60 68]
[78 95]
[79 94]
[80 93]
[81 92]
[96 156]
[97 155]
[98 154]
[99 153]
[100 152]
[101 151]
[102 150]
[105 146]
[106 145]
[107 144]
[108 143]
[109 142]
[110 137]
[111 136]
[112 135]
[113 134]
[118 131]
[119 130]
[120 129]
[121 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
