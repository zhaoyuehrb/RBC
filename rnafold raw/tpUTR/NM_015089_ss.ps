%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 09:59:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGCAGAUGCAGGAAACACCUAGAGCAGCCCCAGAGUCACGGGGCUGAGGGGGCGGGAGCUGCCCCUGUCAUAGGGAGGGGGAUUCCCAGCGUCUGUAGUGCUUCCUGUUUGCUGAAUAAAGGUCUCUUUCUCACACACA\
) } def
/len { sequence length } bind def

/coor [
[240.35197449 266.27221680]
[230.16090393 255.26576233]
[219.96981812 244.25932312]
[209.77873230 233.25288391]
[199.58764648 222.24642944]
[189.39657593 211.23999023]
[179.20549011 200.23353577]
[167.08654785 199.43869019]
[158.50593567 190.28468323]
[158.49382019 177.33599854]
[148.54696655 166.10833740]
[138.60012817 154.88066101]
[128.65328979 143.65299988]
[118.70645142 132.42533875]
[108.75961304 121.19768524]
[100.69197083 123.95574951]
[91.80339813 123.61306000]
[83.29235840 119.95341492]
[76.39810944 113.22414398]
[72.22227478 104.13375092]
[71.55877686 93.78155518]
[56.60309982 92.62931061]
[41.64741898 91.47706604]
[34.23421860 100.88874054]
[23.29556084 105.47254181]
[11.62662506 104.18382263]
[2.14826131 97.46267700]
[-2.82411098 87.09416199]
[-17.71474457 85.28610992]
[-32.60537720 83.47805786]
[-47.49600983 81.67001343]
[-62.38664246 79.86196136]
[-77.27727509 78.05390930]
[-92.16790771 76.24585724]
[-102.63627625 87.69980621]
[-117.84454346 90.78010559]
[-131.94482422 84.30232239]
[-139.51527405 70.75728607]
[-137.64489746 55.35334778]
[-127.05288696 44.01363373]
[-111.81210327 41.09849548]
[-97.78292084 47.72886276]
[-90.35985565 61.35522842]
[-75.46922302 63.16327667]
[-60.57859421 64.97132874]
[-45.68796158 66.77938080]
[-30.79732704 68.58742523]
[-15.90669346 70.39547729]
[-1.01606071 72.20352936]
[12.61165142 60.06508255]
[31.10733032 61.69207001]
[42.79966736 76.52138519]
[57.75534439 77.67363739]
[72.71102142 78.82588196]
[84.26031494 69.25436401]
[85.90469360 54.34477234]
[87.38520050 39.41801453]
[88.70165253 24.47589493]
[90.01810455 9.53377438]
[91.33456421 -5.40834570]
[92.65101624 -20.35046577]
[90.27423859 -29.25231743]
[94.16404724 -35.60514450]
[87.98622131 -50.17034531]
[97.07212067 -61.97270966]
[98.71649933 -76.88230133]
[100.36087799 -91.79190063]
[102.00524902 -106.70149231]
[103.64962769 -121.61109161]
[97.47180939 -136.17628479]
[106.55770111 -147.97865295]
[108.20207977 -162.88824463]
[103.92855072 -179.29475403]
[118.51084900 -187.94303894]
[130.85794067 -176.32470703]
[123.11167908 -161.24386597]
[121.46730042 -146.33427429]
[127.76274109 -132.83551025]
[118.55922699 -119.96671295]
[116.91484833 -105.05711365]
[115.27046967 -90.14752197]
[113.62609100 -75.23793030]
[111.98171997 -60.32833099]
[118.27715302 -46.82956314]
[109.07363892 -33.96076965]
[107.59313965 -19.03400993]
[106.27667999 -4.09189081]
[104.96022797 10.85022926]
[103.64377594 25.79234886]
[102.32731628 40.73447037]
[104.89340973 47.72762299]
[100.81428528 55.98914719]
[99.16990662 70.89874268]
[122.27719116 86.54597473]
[119.98727417 111.25084686]
[129.93411255 122.47850800]
[139.88095093 133.70616150]
[149.82778931 144.93382263]
[159.77462769 156.16148376]
[169.72148132 167.38914490]
[187.29405212 172.77124023]
[190.21192932 190.04246521]
[200.40301514 201.04890442]
[210.59410095 212.05534363]
[220.78518677 223.06179810]
[230.97625732 234.06823730]
[241.16734314 245.07469177]
[251.35842896 256.08114624]
[261.66979980 266.97497559]
[272.10018921 277.75488281]
[282.53060913 288.53482056]
[297.68719482 293.07223511]
[300.97674561 307.59906006]
[311.40713501 318.37896729]
[319.69116211 322.41220093]
[321.94503784 329.51214600]
[332.13610840 340.51858521]
[342.32720947 351.52502441]
[355.21145630 352.81512451]
[363.47387695 362.25735474]
[363.06869507 374.39556885]
[373.01553345 385.62322998]
[382.96237183 396.85089111]
[392.90921021 408.07855225]
[408.62728882 412.75555420]
[412.17221069 428.76699829]
[399.89724731 439.64163208]
[384.42987061 434.19259644]
[381.68154907 418.02539062]
[371.73471069 406.79772949]
[361.78787231 395.57006836]
[351.84103394 384.34240723]
[334.94213867 379.73410034]
[331.32077026 361.71609497]
[321.12966919 350.70965576]
[310.93859863 339.70321655]
[300.62722778 328.80938721]
[290.19680786 318.02944946]
[275.78628540 314.26306152]
[271.75067139 298.96520996]
[261.32028198 288.18530273]
[250.88987732 277.40536499]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 108]
[2 107]
[3 106]
[4 105]
[5 104]
[6 103]
[7 102]
[10 100]
[11 99]
[12 98]
[13 97]
[14 96]
[15 95]
[21 54]
[22 53]
[23 52]
[28 49]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
[34 43]
[55 93]
[56 92]
[57 90]
[58 89]
[59 88]
[60 87]
[61 86]
[63 85]
[65 83]
[66 82]
[67 81]
[68 80]
[69 79]
[71 77]
[72 76]
[109 142]
[110 141]
[111 140]
[113 138]
[114 137]
[116 136]
[117 135]
[118 134]
[121 132]
[122 131]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
