%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 09:15:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCUUAGCCCGGAUGCCCACCCCUGCUGCCGCCACUGGCUGUGCCUCCCCCGCCACCUGUGUGUUCUUUUGAUACAUUUAUCUUCUGUUUUUCUCAAAUAAAGUUCAAAGCAACCACCUGUCACUGG\
) } def
/len { sequence length } bind def

/coor [
[23.92900085 153.42797852]
[7.30726337 145.93983459]
[-6.35097885 152.14082336]
[-11.64778328 163.97521973]
[-23.23435783 168.83235168]
[-34.63249207 164.59222412]
[-48.43768311 170.45880127]
[-62.24287796 176.32536316]
[-76.04807281 182.19194031]
[-89.85326385 188.05850220]
[-103.27591705 194.75419617]
[-116.26630402 202.25419617]
[-129.25668335 209.75419617]
[-133.45097351 224.75572205]
[-146.73190308 232.17672729]
[-161.00772095 228.08566284]
[-173.99809265 235.58566284]
[-175.48608398 251.03123474]
[-185.79376221 262.63000488]
[-200.95761108 265.92202759]
[-215.14682007 259.64141846]
[-222.90536499 246.20324707]
[-221.24990845 230.77473450]
[-210.81701660 219.28845215]
[-195.61834717 216.16113281]
[-181.49809265 222.59529114]
[-168.50772095 215.09529114]
[-164.91278076 200.68653870]
[-151.84552002 192.89541626]
[-136.75668335 196.76380920]
[-123.76630402 189.26380920]
[-110.77591705 181.76380920]
[-124.10543060 174.88456726]
[-127.28215027 160.22480774]
[-117.99604034 148.44482422]
[-102.99975586 148.11077881]
[-93.19830322 159.46557617]
[-95.71983337 174.25331116]
[-81.91464233 168.38674927]
[-68.10945129 162.52017212]
[-54.30425644 156.65359497]
[-40.49906158 150.78703308]
[-30.77933121 136.22874451]
[-12.55198097 138.48258972]
[1.10626161 132.28158569]
[2.73994565 120.86846924]
[9.79063511 111.59432983]
[20.57189178 106.87104797]
[32.40938950 107.99819183]
[42.30411530 114.80792236]
[56.24806976 109.27925873]
[65.22750854 97.39569855]
[80.90790558 99.50184631]
[86.75210571 86.24320221]
[100.22151947 80.90269470]
[113.56343842 86.55419922]
[127.50739288 81.02554321]
[133.84123230 66.79457855]
[148.06114197 61.38636780]
[161.58915710 67.51241302]
[175.53311157 61.98374939]
[189.47706604 56.45508957]
[196.38758850 50.32074738]
[203.82849121 50.96613312]
[217.90293884 45.77865982]
[231.97740173 40.59119034]
[242.25024414 28.55877304]
[256.86801147 31.41716576]
[270.94244385 26.22969437]
[285.01690674 21.04222107]
[299.09136963 15.85475063]
[313.16580200 10.66727829]
[327.24026489 5.47980738]
[334.29809570 -0.48443952]
[341.72109985 0.34194973]
[355.91769409 -4.50125647]
[363.11868286 -10.29186821]
[370.51934814 -9.28496742]
[384.82968140 -13.78103542]
[399.13998413 -18.27710342]
[413.45031738 -22.77317238]
[427.76065063 -27.26923943]
[428.41238403 -42.41357803]
[434.20739746 -56.42050171]
[444.44583130 -67.59860992]
[457.89138794 -74.59807587]
[472.92047119 -76.57369995]
[487.71820068 -73.28690338]
[500.49768066 -65.13459015]
[509.71575928 -53.10118866]
[514.25927734 -38.63978577]
[513.57965088 -23.49667358]
[507.75885010 -9.50045395]
[497.49981689 1.65876257]
[484.04138184 8.63344479]
[469.00869751 10.58136749]
[454.21704102 7.26730728]
[441.45260620 -0.90854490]
[432.25671387 -12.95891571]
[417.94638062 -8.46284771]
[403.63604736 -3.96677971]
[389.32574463 0.52928865]
[375.01541138 5.02535677]
[360.76089478 9.69534016]
[346.56430054 14.53854656]
[332.42773438 19.55425644]
[318.35327148 24.74172783]
[304.27883911 29.92919922]
[290.20437622 35.11667252]
[276.12991333 40.30414200]
[262.05548096 45.49161530]
[252.78932190 57.15298843]
[237.16487122 54.66563797]
[223.09042358 59.85311127]
[209.01596069 65.04058075]
[195.00572205 70.39904785]
[181.06176758 75.92770386]
[167.11781311 81.45636749]
[161.46325684 95.18814087]
[147.40086365 100.99362183]
[133.03605652 94.96949768]
[119.09209442 100.49815369]
[113.24789429 113.75679779]
[99.77848053 119.09730530]
[86.43656158 113.44580078]
[76.45976257 125.72480011]
[61.77672958 123.22321320]
[47.83277512 128.75187683]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 45]
[3 44]
[6 42]
[7 41]
[8 40]
[9 39]
[10 38]
[11 32]
[12 31]
[13 30]
[16 27]
[17 26]
[50 128]
[51 127]
[53 125]
[56 122]
[57 121]
[60 118]
[61 117]
[62 116]
[64 115]
[65 114]
[66 113]
[68 111]
[69 110]
[70 109]
[71 108]
[72 107]
[73 106]
[75 105]
[76 104]
[78 103]
[79 102]
[80 101]
[81 100]
[82 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
