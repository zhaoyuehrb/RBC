%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 13:51:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUAACAGUUGUAUAUCUGUAUAUAUAACUAUUAAAAGGGAUAUUUAUUCCAUUCUGAGAACCCUGGGUAUUUUUUAUUCACAAAUCCAUUAUAAAAUCUAGCAGGAUUUUAAAAAUAGUUUUUUGUUUUUAAUGUGCUUUAAAAUAAUAAACCUUCUGGAGCA\
) } def
/len { sequence length } bind def

/coor [
[89.80827332 259.55746460]
[95.85461426 243.71833801]
[95.85461426 228.71833801]
[95.85461426 213.71833801]
[78.05381775 211.09501648]
[60.97489929 205.71699524]
[45.03906250 197.74583435]
[30.63470650 187.40669250]
[20.54162025 198.50306702]
[10.44853115 209.59944153]
[0.35544363 220.69581604]
[-9.73764420 231.79220581]
[-19.83073235 242.88858032]
[-29.92382050 253.98495483]
[-40.01690674 265.08132935]
[-50.10999680 276.17770386]
[-60.20308304 287.27407837]
[-63.16297913 303.40390015]
[-78.70043182 308.64981079]
[-90.83184052 297.61529541]
[-87.07745361 281.65167236]
[-71.29946136 277.18099976]
[-61.20637131 266.08462524]
[-51.11328506 254.98823547]
[-41.02019501 243.89186096]
[-30.92710876 232.79548645]
[-20.83402061 221.69911194]
[-10.74093342 210.60273743]
[-0.64784527 199.50636292]
[9.44524288 188.40998840]
[19.53833008 177.31359863]
[11.79647923 168.34919739]
[5.04846096 158.61466980]
[-0.62969208 148.21969604]
[-5.17400074 137.28140259]
[-8.53326225 125.92304993]
[-10.66962719 114.27260590]
[-11.55902195 102.46134949]
[-11.19142723 90.62235260]
[-26.01983643 88.35999298]
[-40.84824371 86.09762573]
[-55.67665482 83.83526611]
[-70.50506592 81.57289886]
[-85.57627869 88.03744507]
[-98.54654694 78.00228882]
[-96.07315063 61.79074097]
[-80.70052338 56.07984543]
[-68.24269867 66.74449158]
[-53.41428757 69.00685120]
[-38.58588028 71.26921844]
[-23.75747108 73.53158569]
[-8.92906284 75.79394531]
[-2.61518264 56.16396713]
[7.20286942 38.03092575]
[20.18981934 22.01404762]
[35.90218353 8.66028500]
[53.80340195 -1.57434630]
[48.52518463 -15.61501694]
[42.55032349 -22.58393860]
[43.28269577 -29.97165680]
[38.27113342 -44.10969925]
[23.25005913 -46.99321365]
[11.76493263 -56.94251633]
[6.83465719 -71.20991516]
[9.68867874 -85.93100739]
[19.46220016 -97.17128754]
[14.45063782 -111.30933380]
[9.43907547 -125.44737244]
[4.42751265 -139.58541870]
[-0.58404970 -153.72344971]
[-5.59561205 -167.86149597]
[-19.40111923 -176.03385925]
[-21.47650909 -191.94210815]
[-10.22971821 -203.38279724]
[5.71167564 -201.57960510]
[14.11880112 -187.91578674]
[8.54242992 -172.87306213]
[13.55399227 -158.73501587]
[18.56555557 -144.59698486]
[23.57711792 -130.45893860]
[28.58868027 -116.32089233]
[33.60024261 -102.18285370]
[48.27106094 -99.60744476]
[59.75941467 -89.97034454]
[64.91558838 -75.78302002]
[62.26070786 -60.82145691]
[52.40917587 -49.12126160]
[57.42073822 -34.98321915]
[62.56585693 -20.89323235]
[67.84407043 -6.85256147]
[82.91641998 -10.27068901]
[98.31648254 -11.57347107]
[113.74884033 -10.73591614]
[128.91744995 -7.77409172]
[143.53132629 -2.74481440]
[157.31013489 4.25543737]
[169.98956299 13.09237671]
[181.32635498 23.59648323]
[191.10305786 35.56625366]
[199.13209534 48.77207184]
[205.25947571 62.96060181]
[209.36763000 77.85967255]
[224.23620605 75.87832642]
[239.10476685 73.89698029]
[253.97332764 71.91563416]
[266.63055420 62.42327118]
[280.26834106 68.41163635]
[284.47061157 65.16844940]
[289.04064941 64.00846100]
[293.11227417 64.71743011]
[296.03405762 66.76464844]
[310.99111938 65.63021088]
[325.94815063 64.49578094]
[340.90518188 63.36135101]
[355.86224365 62.22692108]
[370.81927490 61.09249115]
[385.77630615 59.95805740]
[400.73333740 58.82362747]
[415.69039917 57.68919754]
[430.64743042 56.55476379]
[443.87612915 46.86283493]
[458.77282715 53.71998215]
[460.01309204 70.07216644]
[446.32101440 79.09765625]
[431.78186035 71.51180267]
[416.82482910 72.64624023]
[401.86779785 73.78067017]
[386.91073608 74.91510010]
[371.95370483 76.04953003]
[356.99667358 77.18395996]
[342.03961182 78.31838989]
[327.08258057 79.45282745]
[312.12554932 80.58725739]
[297.16848755 81.72168732]
[282.24969482 83.28020477]
[270.65594482 92.63084412]
[255.95468140 86.78420258]
[241.08610535 88.76554871]
[226.21754456 90.74689484]
[211.34898376 92.72823334]
[211.70591736 102.91183472]
[211.13212585 113.09992981]
[209.62977600 123.20751190]
[207.20877075 133.15000916]
[203.88671875 142.84399414]
[199.68884277 152.20785522]
[194.64768982 161.16255188]
[188.80296326 169.63218689]
[182.20118713 177.54473877]
[174.89535522 184.83262634]
[166.94442749 191.43328857]
[158.41299438 197.28971863]
[149.37060547 202.35099792]
[139.89129639 206.57264709]
[144.63441467 220.80300903]
[157.25639343 231.27284241]
[154.23388672 247.39105225]
[138.67617798 252.57658386]
[126.58770752 241.49502563]
[130.40406799 225.54611206]
[125.66094971 211.31576538]
[110.85461426 213.71833801]
[110.85461426 228.71833801]
[110.85461426 243.71833801]
[116.90095520 259.55746460]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 164]
[3 163]
[4 162]
[8 31]
[9 30]
[10 29]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[39 52]
[40 51]
[41 50]
[42 49]
[43 48]
[57 90]
[58 89]
[60 88]
[61 87]
[66 82]
[67 81]
[68 80]
[69 79]
[70 78]
[71 77]
[102 140]
[103 139]
[104 138]
[105 137]
[107 135]
[111 134]
[112 133]
[113 132]
[114 131]
[115 130]
[116 129]
[117 128]
[118 127]
[119 126]
[120 125]
[154 161]
[155 160]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
