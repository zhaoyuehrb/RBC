%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:46:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUUAUUUGAUCAUGUGGCCUCUCUGUUGCUAAUCUCUCCUGGAAACAUCUGCCACAUUUAGUGUGUGUAUGUGUAUUCAUUCUUUUGUUUUUAAUAACUAAAGUUUUUUCCCCUCAUUAUUAAAAUGAAUUUACCAGUAAGAA\
) } def
/len { sequence length } bind def

/coor [
[44.84656525 228.08497620]
[49.48946381 242.34832764]
[47.10295486 257.15725708]
[38.21429825 269.23999023]
[24.78730583 275.92697144]
[9.78846073 275.74084473]
[-3.46847534 268.72277832]
[-12.05458832 256.42321777]
[-14.07291126 241.55963135]
[-9.07831192 227.41706848]
[-21.61719513 235.64971924]
[-34.15607834 243.88237000]
[-35.36611557 257.34042358]
[-43.99835205 267.48117065]
[-56.71258545 270.72802734]
[-68.78574371 266.10720825]
[-81.49886322 274.06817627]
[-94.21197510 282.02911377]
[-106.92508698 289.99005127]
[-119.63819885 297.95101929]
[-122.93395996 313.40783691]
[-136.23930359 321.93679810]
[-151.66043091 318.47781372]
[-160.04823303 305.08303833]
[-156.42640686 289.69934082]
[-142.94369507 281.45361328]
[-127.59915161 285.23791504]
[-114.88603973 277.27694702]
[-102.17292786 269.31600952]
[-89.45980835 261.35504150]
[-76.74669647 253.39410400]
[-73.71012878 236.88595581]
[-59.41167068 227.46714783]
[-42.38872147 231.34347534]
[-29.84983826 223.11083984]
[-17.31095695 214.87818909]
[-5.83182430 205.22265625]
[4.42696714 194.27928162]
[14.68575859 183.33592224]
[17.71278572 166.08135986]
[35.32220840 160.81304932]
[45.34316635 149.65148926]
[55.36412430 138.48992920]
[65.38507843 127.32836914]
[56.35311508 106.32314301]
[59.05279160 83.61833954]
[72.75847626 65.31668854]
[65.63420868 52.11650848]
[58.50994492 38.91632462]
[51.38567734 25.71614265]
[38.02235031 17.24666214]
[38.78643799 2.37166834]
[31.66217232 -10.82851505]
[24.53790665 -24.02869797]
[17.27203751 -37.15147018]
[9.86540318 -50.19530869]
[2.45877004 -63.23915100]
[-4.94786310 -76.28298950]
[-12.35449600 -89.32683563]
[-25.43330574 -100.11483765]
[-18.68747330 -115.66893768]
[-1.87379909 -113.49253845]
[0.68934441 -96.73346710]
[8.09597778 -83.68962860]
[15.50261116 -70.64578247]
[22.90924454 -57.60194397]
[30.31587791 -44.55810165]
[36.39782333 -40.26353455]
[37.73809052 -31.15296364]
[44.86235428 -17.95278168]
[51.98662186 -4.75259781]
[64.84037018 2.77271771]
[64.58586121 18.59187698]
[71.71012878 31.79206085]
[78.83438873 44.99224472]
[85.95865631 58.19242477]
[92.80071259 55.50763702]
[100.14646912 53.96064377]
[107.80380249 53.64415741]
[115.56385040 54.61800003]
[123.20668793 56.90613937]
[130.50755310 60.49470520]
[137.24340820 65.33110809]
[143.19963074 71.32429504]
[155.18132019 62.29993057]
[167.16300964 53.27556992]
[179.14469910 44.25120926]
[185.51304626 29.76829720]
[200.33427429 28.29166031]
[212.31596375 19.26729965]
[224.29765320 10.24293900]
[226.25247192 -5.43999004]
[238.77537537 -15.08116913]
[254.43676758 -12.96065807]
[263.94500732 -0.33651799]
[261.65902710 15.30157185]
[248.93505859 24.67581177]
[233.32202148 22.22462845]
[221.34033203 31.24899101]
[209.35864258 40.27334976]
[203.84730530 54.11077881]
[188.16906738 56.23289871]
[176.18737793 65.25726318]
[164.20567322 74.28162384]
[152.22398376 83.30598450]
[152.46601868 90.80207825]
[167.30744934 88.62678528]
[182.14888000 86.45149231]
[196.04840088 80.81202698]
[208.62365723 88.98899078]
[209.10758972 103.98118591]
[197.08584595 112.95211792]
[182.85177612 108.22099304]
[167.90092468 107.00762939]
[152.95008850 105.79426575]
[153.19212341 113.29035950]
[165.73100281 121.52300262]
[178.26988220 129.75564575]
[190.80876160 137.98829651]
[203.34765625 146.22093201]
[219.28533936 144.38526917]
[230.55541992 155.80300903]
[228.51243591 171.71545410]
[214.72361755 179.91592407]
[199.76654053 174.11373901]
[195.11500549 158.75981140]
[182.57612610 150.52717590]
[170.03724670 142.29452515]
[157.49835205 134.06188965]
[144.95947266 125.82923889]
[135.59315491 135.90795898]
[124.16553497 142.93443298]
[111.60498047 146.55194092]
[98.87822723 146.67179871]
[86.91633606 143.46749878]
[76.54663849 137.34933472]
[66.52568054 148.51089478]
[56.50472260 159.67245483]
[46.48376465 170.83399963]
[46.38660431 183.77911377]
[37.74970627 192.87568665]
[25.62912178 193.59471130]
[15.37033081 204.53807068]
[5.11153936 215.48144531]
[19.90205002 212.98329163]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 36]
[11 35]
[12 34]
[16 31]
[17 30]
[18 29]
[19 28]
[20 27]
[37 144]
[38 143]
[39 142]
[41 139]
[42 138]
[43 137]
[44 136]
[47 76]
[48 75]
[49 74]
[50 73]
[52 71]
[53 70]
[54 69]
[55 67]
[56 66]
[57 65]
[58 64]
[59 63]
[84 105]
[85 104]
[86 103]
[87 102]
[89 100]
[90 99]
[91 98]
[116 130]
[117 129]
[118 128]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
