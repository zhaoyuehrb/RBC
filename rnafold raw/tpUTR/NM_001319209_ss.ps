%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 21:48:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCACCUUCUGUCUCCUACGACUCCAUGAGCAGCGCCAGCCCAGCUCUCCCCUCUGCACCCUUGGCUCUGGCCAAAGCUUGCUCCCUGCUCCCACACAGGCUCAAUAAAGCAAGUCAAAGCCACA\
) } def
/len { sequence length } bind def

/coor [
[218.54229736 133.87248230]
[213.26651001 123.07601929]
[198.40513611 121.04151154]
[183.54374695 119.00700378]
[168.68235779 116.97249603]
[160.66093445 136.40855408]
[147.28153992 152.62876892]
[129.72593689 164.20046997]
[109.54473114 170.10156250]
[88.52047729 169.81083679]
[68.51017761 163.35394287]
[51.28125763 151.30122375]
[39.85711670 161.02177429]
[28.43297195 170.74230957]
[27.41373634 186.51370239]
[15.48599243 196.88214111]
[-0.27373859 195.69621277]
[-10.51548958 183.65951538]
[-9.16301060 167.91320801]
[2.98129606 157.79928589]
[18.71242905 159.31817627]
[30.13657188 149.59762573]
[41.56071472 139.87709045]
[36.63839340 131.47441101]
[32.91656113 122.47541046]
[30.46573067 113.05057526]
[29.33234215 103.37847137]
[29.53786659 93.64235687]
[31.07840919 84.02670288]
[16.90707779 79.11005402]
[2.73574781 74.19341278]
[-11.43558311 69.27677155]
[-30.94616699 74.05461121]
[-43.11834717 59.11203384]
[-57.51548386 54.90223312]
[-73.31117249 59.30997086]
[-84.83529663 47.64263535]
[-80.23281860 31.90258408]
[-64.23837280 28.28182983]
[-53.30567932 40.50509644]
[-38.90854263 44.71489716]
[-30.30410004 38.96360779]
[-19.73359489 38.95595932]
[-10.75294113 44.93952560]
[-6.51893950 55.10543823]
[7.65239143 60.02208328]
[21.82372284 64.93872833]
[35.99505234 69.85536957]
[42.04623032 59.42053986]
[49.78209305 50.16533661]
[58.97776413 42.35879898]
[69.36592865 36.22785950]
[80.64461517 31.95074654]
[92.48594666 29.65178680]
[104.54570770 29.39781570]
[116.47333527 31.19621086]
[127.92208099 34.99469757]
[138.55915833 40.68285370]
[148.07533264 48.09532928]
[156.19398499 57.01664734]
[162.67910767 67.18746948]
[167.34217834 78.31213379]
[170.04763794 90.06725311]
[170.71687317 102.11111450]
[185.57824707 104.14562225]
[200.43963623 106.18013000]
[215.30102539 108.21463776]
[229.83219910 96.19143677]
[248.23719788 98.45692444]
[259.04354858 113.13562775]
[273.98736572 114.43270111]
[288.93115234 115.72976685]
[303.87496948 117.02683258]
[312.72335815 104.55072021]
[326.53729248 98.22047424]
[341.56515503 99.64512634]
[353.78048706 108.34236908]
[359.96072388 121.89486694]
[374.90454102 123.19194031]
[389.84835815 124.48900604]
[404.79217529 125.78607178]
[419.73599243 127.08314514]
[434.67980957 128.38020325]
[449.62362671 129.67727661]
[470.35772705 116.70682526]
[490.20883179 129.79298401]
[505.15264893 128.49591064]
[520.09649658 127.19884491]
[535.04028320 125.90177155]
[542.92559814 112.53760529]
[557.17364502 106.39154816]
[572.30566406 109.82688904]
[582.50311279 121.52266693]
[583.84490967 136.98161316]
[575.81506348 150.25946045]
[561.50122070 156.25059509]
[546.40734863 152.65130615]
[536.33734131 140.84559631]
[521.39355469 142.14265442]
[506.44973755 143.43972778]
[491.50592041 144.73678589]
[489.09368896 150.59382629]
[485.07070923 155.53924561]
[479.75991821 159.13893127]
[473.59835815 161.06828308]
[467.10150146 161.14131165]
[460.81985474 159.32838440]
[455.29251099 155.76063538]
[451.00085449 150.72085571]
[448.32653809 144.62109375]
[433.38272095 143.32402039]
[418.43890381 142.02696228]
[403.49508667 140.72988892]
[388.55126953 139.43281555]
[373.60748291 138.13575745]
[358.66366577 136.83868408]
[350.24081421 149.12368774]
[336.70968628 155.58624268]
[321.66110229 154.40036011]
[309.14440918 145.78471375]
[302.57791138 131.97065735]
[287.63409424 130.67358398]
[272.69027710 129.37651062]
[257.74645996 128.07945251]
[250.72024536 137.22673035]
[240.02102661 141.84867859]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 67]
[3 66]
[4 65]
[5 64]
[12 23]
[13 22]
[14 21]
[29 48]
[30 47]
[31 46]
[32 45]
[34 41]
[35 40]
[70 124]
[71 123]
[72 122]
[73 121]
[78 116]
[79 115]
[80 114]
[81 113]
[82 112]
[83 111]
[84 110]
[86 101]
[87 100]
[88 99]
[89 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
