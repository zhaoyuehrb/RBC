%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 14:48:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCUCUUGGCUGUGACAGUUUCUCAGAUUUUUCUUGUUUUUAAUGACCUUUCUGUCAUUUUUUAAAGUGCUUUUUAAAGGUUUUGUUUAUGAUGACAUUCAGCACUUGGAAUUGUGAAGUCAUAUUUAUAUUAAUAAAUAACUUGAUUUGUGAUCA\
) } def
/len { sequence length } bind def

/coor [
[191.48526001 258.52185059]
[188.45198059 243.83174133]
[181.34703064 246.23376465]
[176.96617126 260.57977295]
[172.58532715 274.92581177]
[176.80476379 290.77282715]
[165.00109863 302.15728760]
[149.31694031 297.36779785]
[145.88679504 281.33139038]
[158.23930359 270.54495239]
[162.62016296 256.19894409]
[167.00100708 241.85292053]
[158.80221558 231.95719910]
[155.04450989 220.50193787]
[155.71492004 209.25929260]
[160.15692139 199.77653503]
[167.23048401 193.16358948]
[160.11872864 179.95666504]
[153.00697327 166.74974060]
[145.89521790 153.54281616]
[138.78346252 140.33587646]
[131.67170715 127.12895966]
[124.55994415 113.92203522]
[117.44818115 100.71510315]
[120.70071411 116.93193817]
[108.58359528 134.98641968]
[82.18936157 141.65675354]
[67.97946930 146.46080017]
[53.76957321 151.26484680]
[43.35390854 163.93157959]
[27.22290421 160.97816467]
[21.97075081 145.44281006]
[33.00041580 133.30697632]
[48.96552277 137.05496216]
[63.17541885 132.25091553]
[77.38531494 127.44686127]
[78.05128479 119.97648621]
[63.11053467 118.64454651]
[48.48944473 121.99472046]
[40.78509521 109.12448120]
[50.64466095 97.82010651]
[64.44247437 103.70380402]
[79.38322449 105.03573608]
[80.04919434 97.56536865]
[66.91316986 90.32347870]
[53.77714157 83.08159637]
[40.64112091 75.83971405]
[27.50509453 68.59783173]
[14.36907101 61.35594940]
[-0.74135643 65.98741913]
[-14.66162205 58.50399017]
[-19.13307953 43.34543991]
[-11.50289154 29.50507355]
[3.70208573 25.19413185]
[17.46100998 32.97022247]
[21.61095428 48.21992493]
[34.74697876 55.46180725]
[47.88300323 62.70369339]
[61.01902771 69.94557190]
[74.15505219 77.18745422]
[87.29107666 84.42934418]
[94.29557800 81.74849701]
[84.86731720 70.08197784]
[93.04936218 57.51002121]
[107.53439331 61.40668869]
[108.30458832 76.38681793]
[115.30909729 73.70597839]
[120.25328827 59.54423523]
[125.19747925 45.38249207]
[130.14167786 31.22074890]
[135.08587646 17.05900764]
[140.03005981 2.89726496]
[144.97425842 -11.26447773]
[138.53196716 -16.27351761]
[133.36727905 -22.57454491]
[129.73213196 -29.85094643]
[127.80171967 -37.73878098]
[127.66621399 -45.84496689]
[129.32643127 -53.76689148]
[132.69419861 -61.11240005]
[137.59690857 -67.51918793]
[143.78646851 -72.67271423]
[150.95173645 -76.32158661]
[158.73425293 -78.28987885]
[166.74612427 -78.48554230]
[174.58940125 -76.90476227]
[181.96069336 -89.96860504]
[189.33200073 -103.03244781]
[196.70329285 -116.09628296]
[192.22132874 -131.25172424]
[199.84191895 -145.09738159]
[215.04389954 -149.41886902]
[228.80821228 -141.65232849]
[232.96873474 -126.40550232]
[225.05709839 -112.72407532]
[209.76713562 -108.72498322]
[202.39584351 -95.66114807]
[195.02453613 -82.59730530]
[187.65322876 -69.53346252]
[199.16058350 -50.17262268]
[196.88758850 -27.64314651]
[181.58164978 -10.79132080]
[159.13600159 -6.32028341]
[154.19180298 7.84145880]
[149.24761963 22.00320053]
[144.30342102 36.16494370]
[139.35922241 50.32668686]
[134.41502380 64.48842621]
[129.47084045 78.65016937]
[130.65510559 93.60334778]
[137.76686096 106.81027222]
[144.87863159 120.01719666]
[151.99038696 133.22412109]
[159.10214233 146.43104553]
[166.21389771 159.63798523]
[173.32565308 172.84490967]
[180.43742371 186.05183411]
[208.82940674 191.29045105]
[218.51150513 224.43836975]
[230.69880676 233.18305969]
[242.88612366 241.92774963]
[255.07342529 250.67243958]
[267.26071167 259.41714478]
[279.44802856 268.16183472]
[291.88909912 276.54153442]
[304.57305908 284.54888916]
[317.25698853 292.55624390]
[329.94091797 300.56359863]
[342.62487793 308.57092285]
[355.30880737 316.57827759]
[367.99276733 324.58563232]
[384.39154053 324.69250488]
[392.26208496 339.07952881]
[383.50784302 352.94656372]
[367.13442993 352.02841187]
[359.98541260 337.26956177]
[347.30145264 329.26223755]
[334.61752319 321.25488281]
[321.93359375 313.24752808]
[309.24963379 305.24017334]
[296.56570435 297.23281860]
[283.88177490 289.22546387]
[280.33334351 289.67092896]
[276.39291382 288.38586426]
[272.89187622 285.20535278]
[270.70333862 280.34912109]
[258.51602173 271.60443115]
[246.32873535 262.85974121]
[234.14141846 254.11505127]
[221.95411682 245.37036133]
[209.76681519 236.62567139]
[202.66186523 239.02769470]
[209.16481018 252.54478455]
[215.66773987 266.06188965]
[224.93229675 277.85882568]
[220.64982605 292.23452759]
[206.43991089 297.03848267]
[194.31289673 288.21038818]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 12]
[4 11]
[5 10]
[17 117]
[18 116]
[19 115]
[20 114]
[21 113]
[22 112]
[23 111]
[24 110]
[27 36]
[28 35]
[29 34]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[67 109]
[68 108]
[69 107]
[70 106]
[71 105]
[72 104]
[73 103]
[86 99]
[87 98]
[88 97]
[89 96]
[119 151]
[120 150]
[121 149]
[122 148]
[123 147]
[124 146]
[125 142]
[126 141]
[127 140]
[128 139]
[129 138]
[130 137]
[131 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
