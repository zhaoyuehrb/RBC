%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 23:39:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACCAAGGACGCCUGGCUUACAGUGCGCAGCCAGAAGGAGAUGUGGCAAUGUGAUUCCUUUUGUAAUCUGAUUAUAAUUGAACAUUGAUUUUAAAAAAGCAUGUAAAAUAGCUGCAAUUUCC\
) } def
/len { sequence length } bind def

/coor [
[-22.81647110 226.35998535]
[-26.90349579 237.06379700]
[-34.08227158 245.95910645]
[-43.63668823 252.18498230]
[-54.62179184 255.14546204]
[-65.95721436 254.56658936]
[-76.53345490 250.52165222]
[-85.32043457 243.42233276]
[-98.24701691 251.03176880]
[-107.24032593 268.98818970]
[-126.50523376 268.59536743]
[-139.02981567 276.84976196]
[-151.55439758 285.10415649]
[-163.97340393 293.51654053]
[-176.28485107 302.08557129]
[-188.59629822 310.65457153]
[-192.83055115 326.12878418]
[-207.62509155 332.33370972]
[-221.63082886 324.50946045]
[-224.10375977 308.65814209]
[-213.14686584 296.93951416]
[-197.16532898 298.34313965]
[-184.85388184 289.77410889]
[-172.54241943 281.20507812]
[-168.80734253 274.72784424]
[-159.80877686 272.57958984]
[-147.28421021 264.32519531]
[-134.75962830 256.07080078]
[-133.57620239 245.78106689]
[-126.73436737 237.71290588]
[-116.35140228 234.74220276]
[-105.85645294 238.10519409]
[-92.92987061 230.49575806]
[-94.20182800 211.78364563]
[-85.88583374 194.88342285]
[-70.15098572 184.38520813]
[-51.19324493 183.18511963]
[-34.11668015 191.68675232]
[-22.02625656 182.80859375]
[-9.93583298 173.93043518]
[2.15459085 165.05229187]
[14.24501514 156.17413330]
[26.33543968 147.29597473]
[38.31243134 138.26538086]
[50.17406464 129.08378601]
[62.03570175 119.90219879]
[73.89733887 110.72060394]
[85.75897217 101.53901672]
[91.23223114 88.67297363]
[105.05943298 86.59934998]
[116.92107391 77.41775513]
[116.58422089 62.01669693]
[125.27895355 49.51649857]
[139.49885559 44.59123230]
[153.72203064 48.93169785]
[165.58366394 39.75011063]
[167.43794250 22.41034317]
[180.95826721 11.93691921]
[197.54577637 14.37785816]
[209.17100525 4.89872742]
[220.79624939 -4.58040285]
[232.42147827 -14.05953407]
[244.04672241 -23.53866386]
[245.16285706 -42.36071777]
[259.36334229 -54.27860641]
[277.46533203 -52.18532562]
[288.59555054 -62.24109650]
[299.72573853 -72.29686737]
[310.85595703 -82.35264587]
[321.72784424 -92.68714905]
[332.33444214 -103.29374695]
[336.62155151 -118.52304077]
[351.09219360 -122.05148315]
[361.69879150 -132.65808105]
[372.30538940 -143.26469421]
[376.02484131 -159.23646545]
[391.79299927 -163.74165344]
[403.38894653 -152.14570618]
[398.88375854 -136.37753296]
[382.91198730 -132.65808105]
[372.30538940 -122.05148315]
[361.69879150 -111.44488525]
[358.17034912 -96.97424316]
[342.94104004 -92.68714905]
[332.33444214 -82.08054352]
[331.44790649 -77.28143311]
[327.46463013 -73.02763367]
[320.91171265 -71.22244263]
[309.78152466 -61.16666794]
[298.65130615 -51.11089325]
[287.52111816 -41.05512238]
[289.43075562 -29.67228508]
[285.51876831 -18.68544960]
[276.66369629 -10.91181660]
[265.02691650 -8.40497494]
[253.52584839 -11.91342926]
[241.90061951 -2.43429875]
[230.27537537 7.04483175]
[218.65014648 16.52396202]
[207.02490234 26.00309372]
[207.51448059 38.94519806]
[200.32347107 49.95082855]
[187.91104126 54.84359360]
[174.76525879 51.61174393]
[162.90361023 60.79333496]
[163.54045105 75.65039825]
[155.20816040 88.18183899]
[140.92764282 93.46581268]
[126.10266113 89.27939606]
[114.24102783 98.46098328]
[108.76776886 111.32702637]
[94.94056702 113.40065002]
[83.07892609 122.58224487]
[71.21729279 131.76383972]
[59.35565567 140.94541931]
[47.49401855 150.12701416]
[42.55074692 157.94706726]
[35.21359634 159.38639832]
[23.12317085 168.26455688]
[11.03274632 177.14271545]
[-1.05767739 186.02085876]
[-13.14810181 194.89901733]
[-25.23852539 203.77717590]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 33]
[9 32]
[11 28]
[12 27]
[13 26]
[14 24]
[15 23]
[16 22]
[38 123]
[39 122]
[40 121]
[41 120]
[42 119]
[43 118]
[44 116]
[45 115]
[46 114]
[47 113]
[48 112]
[50 110]
[51 109]
[55 105]
[56 104]
[59 100]
[60 99]
[61 98]
[62 97]
[63 96]
[66 91]
[67 90]
[68 89]
[69 88]
[70 85]
[71 84]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
