%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 10:40:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUGAAUAUAUCUGGAUGGGGGGUUUUGUAAAUAAUGAAGUUGUAAUAAAAAUAAAAUGACCAAAAGCACCUUUAA\
) } def
/len { sequence length } bind def

/coor [
[72.55075836 214.03251648]
[68.12300873 228.49800110]
[59.44022751 240.88607788]
[47.35306549 249.98309326]
[33.04570007 254.89782715]
[17.91982079 255.14875793]
[3.45730758 250.71130371]
[-8.92495060 242.02023315]
[-18.01386452 229.92697144]
[-22.91899681 215.61631775]
[-23.15979385 200.49028015]
[-18.71266174 186.03073120]
[-10.01328564 173.65431213]
[2.08605695 164.57350159]
[16.39999580 159.67794800]
[31.52619743 159.44729614]
[45.98274994 163.90411377]
[54.60031891 151.62658691]
[63.21788406 139.34907532]
[71.83544922 127.07154846]
[80.45301819 114.79402924]
[89.07058716 102.51650238]
[97.43591309 90.06575012]
[105.54552460 77.44694519]
[113.65513611 64.82814789]
[121.76474762 52.20934296]
[129.87435913 39.59053802]
[119.19570160 28.98181534]
[110.95944977 16.38947678]
[105.52359009 2.36527610]
[103.12345886 -12.47690296]
[103.86155701 -27.48790932]
[107.70320129 -42.01171875]
[114.47811890 -55.41411209]
[123.88800049 -67.11035919]
[135.51963806 -76.59072876]
[148.86308289 -83.44271088]
[163.33395386 -87.36897278]
[178.29908752 -88.20023346]
[193.10421753 -85.90259552]
[207.10255432 -80.57888031]
[215.21217346 -93.19768524]
[211.60824585 -108.58557892]
[220.01164246 -121.97058868]
[235.43678284 -125.41162109]
[248.73219299 -116.86717987]
[252.00994873 -101.40652466]
[243.32542419 -88.20218658]
[227.83097839 -85.08807373]
[219.72135925 -72.46926880]
[230.37910461 -61.94747162]
[238.61938477 -49.43473053]
[244.07998657 -35.47664642]
[246.51994324 -20.68245316]
[245.83023071 -5.69841909]
[242.03854370 8.82038116]
[235.30827332 22.23870659]
[225.93142700 33.96894455]
[214.31597900 43.49683762]
[200.96810913 50.40403366]
[186.47013855 54.38645935]
[171.45513916 55.26768875]
[156.57926941 53.00677872]
[142.49316406 47.70015335]
[134.38356018 60.31895447]
[126.27394104 72.93775940]
[118.16432953 85.55655670]
[110.05471802 98.17536163]
[108.62557983 106.36057281]
[101.34810638 111.13407135]
[92.73053741 123.41159058]
[84.11297607 135.68911743]
[75.49540710 147.96664429]
[66.87783813 160.24415588]
[58.26027298 172.52168274]
[67.36538696 184.60273743]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 75]
[18 74]
[19 73]
[20 72]
[21 71]
[22 70]
[23 68]
[24 67]
[25 66]
[26 65]
[27 64]
[41 50]
[42 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
