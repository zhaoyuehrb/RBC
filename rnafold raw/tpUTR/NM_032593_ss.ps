%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 07:37:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUGCCAACUGAUUAAAGGACACCAGACUCUGGAUGCUUGGAUGGAAAGGGAAAAAUGGACCCUGUGAUGCUAAUAAAACUGUUCUCCCUUAA\
) } def
/len { sequence length } bind def

/coor [
[166.05766296 132.08952332]
[159.25691223 131.93582153]
[152.76678467 129.76496887]
[147.17549133 125.74810028]
[142.99723816 120.22477722]
[140.62507629 113.67435455]
[125.79086304 111.45040131]
[110.95664978 109.22644806]
[97.87628174 114.16563416]
[86.81939697 105.60777283]
[71.98517609 103.38381958]
[78.86578369 116.71263123]
[74.59696960 131.09237671]
[61.55815506 138.50785828]
[47.01712036 134.82569885]
[39.07897568 122.09833527]
[42.16841125 107.41993713]
[54.56373215 98.97210693]
[40.45894241 93.86771393]
[26.35415077 88.76331329]
[17.01579666 88.76491547]
[11.87212276 83.24992371]
[-2.05618739 77.68196869]
[-16.07465363 72.34506226]
[-30.17944527 67.24066162]
[-44.28423691 62.13626480]
[-58.38902664 57.03186798]
[-75.34040070 57.32740784]
[-80.31699371 41.12031937]
[-66.12094116 31.85163689]
[-53.28462982 42.92707443]
[-39.17984009 48.03147507]
[-25.07504845 53.13587189]
[-10.97025681 58.24026871]
[-3.46124721 57.54222488]
[3.51177144 63.75365829]
[17.44008255 69.32161713]
[31.45854950 74.65852356]
[45.56333923 79.76292419]
[59.66812897 84.86731720]
[74.20913696 88.54959869]
[89.04335022 90.77355194]
[102.12371826 85.83436584]
[113.18060303 94.39222717]
[128.01481628 96.61618042]
[142.84904480 98.84013367]
[164.16101074 86.79457092]
[183.75704956 100.34474182]
[198.70582581 99.10605621]
[213.65458679 97.86736298]
[228.60334778 96.62866974]
[243.55212402 95.38998413]
[258.50088501 94.15129089]
[261.81298828 91.47525024]
[265.43560791 90.03833008]
[268.96862793 89.79428864]
[272.06307983 90.57937622]
[274.45312500 92.13715363]
[275.97827148 94.15129089]
[290.92703247 95.38998413]
[305.87579346 96.62866974]
[320.82458496 97.86736298]
[328.90002441 90.21283722]
[339.65576172 88.41670227]
[349.37591553 92.84801483]
[354.84188843 101.76684570]
[369.67611694 103.99079895]
[378.22155762 91.34413910]
[391.41226196 83.66503906]
[406.62915039 82.47820282]
[420.85095215 88.01925659]
[431.25387573 99.18804169]
[435.77246094 113.76697540]
[433.50949097 128.86140442]
[424.91430664 141.47431946]
[411.69348145 149.10140991]
[396.47201538 150.22831726]
[382.27215576 144.63130188]
[371.91329956 133.42163086]
[367.45217896 118.82501984]
[352.61795044 116.60106659]
[335.38922119 125.11421204]
[319.58587646 112.81613159]
[304.63711548 111.57743835]
[289.68835449 110.33875275]
[274.73959351 109.10005951]
[259.73959351 109.10005951]
[244.79081726 110.33875275]
[229.84204102 111.57743835]
[214.89328003 112.81613159]
[199.94450378 114.05481720]
[184.99574280 115.29351044]
[182.45588684 121.42668915]
[178.18975830 126.56611633]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 46]
[7 45]
[8 44]
[10 42]
[11 41]
[18 40]
[19 39]
[20 38]
[22 37]
[23 36]
[24 34]
[25 33]
[26 32]
[27 31]
[48 92]
[49 91]
[50 90]
[51 89]
[52 88]
[53 87]
[59 86]
[60 85]
[61 84]
[62 83]
[66 81]
[67 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
