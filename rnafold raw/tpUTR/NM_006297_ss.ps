%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:52:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAUGUGCUAUACACACACACACACACACACACACACACACACACACACGAUGCAUUUAAUAAAGAUGAGUUGGUUCUC\
) } def
/len { sequence length } bind def

/coor [
[68.19992828 167.03224182]
[49.31826782 154.18420410]
[38.01673126 164.04701233]
[32.70662689 178.95048523]
[18.03000259 181.48937988]
[6.72846413 191.35220337]
[-4.57307434 201.21502686]
[-15.87461281 211.07785034]
[-18.39286232 226.92202759]
[-32.42092133 234.70617676]
[-47.19766235 228.45898438]
[-51.38763428 212.97273254]
[-41.77664948 200.12716675]
[-25.73743439 199.77630615]
[-14.43589497 189.91348267]
[-3.13435650 180.05065918]
[8.16718197 170.18783569]
[12.66892529 155.98982239]
[28.15390968 152.74548340]
[39.45544815 142.88265991]
[34.14620209 134.17370605]
[30.08156395 124.81889343]
[27.33835411 114.99501038]
[25.96841621 104.88773346]
[25.99764442 94.68807220]
[27.42548370 84.58880615]
[30.22494888 74.78080750]
[34.34313202 65.44944000]
[39.70220184 56.77106476]
[46.20087433 48.90969467]
[53.71632767 42.01390839]
[62.10651779 36.21403503]
[71.21288300 31.61968803]
[80.86331177 28.31769943]
[90.87541199 26.37047386]
[101.05996704 25.81481552]
[111.22448730 26.66122246]
[121.17686462 28.89370155]
[130.72901917 32.47005844]
[139.70039368 37.32270432]
[147.92146301 43.35992050]
[155.23683167 50.46760941]
[161.50825500 58.51144028]
[166.61718750 67.33938599]
[170.46708679 76.78459930]
[172.98519897 86.66857910]
[174.12391663 96.80451965]
[189.09852600 97.67668915]
[198.11264038 95.00137329]
[204.63342285 98.88415527]
[219.56295776 100.33631897]
[234.49250793 101.78848267]
[249.42204285 103.24064636]
[263.90646362 96.87569427]
[275.82489014 105.80879211]
[290.75442505 107.26095581]
[305.68395996 108.71311188]
[320.61349487 110.16527557]
[335.54306030 111.61743927]
[348.79580688 102.57621765]
[364.08444214 107.43804169]
[369.68081665 122.47334290]
[361.29187012 136.14831543]
[345.35287476 137.97270203]
[334.09088135 126.54698181]
[319.16134644 125.09481812]
[304.23181152 123.64265442]
[289.30227661 122.19049072]
[274.37271118 120.73833466]
[260.95617676 127.20714569]
[247.96987915 118.17018890]
[233.04034424 116.71802521]
[218.11079407 115.26586151]
[203.18125916 113.81369781]
[188.22636414 112.65131378]
[173.25173950 111.77913666]
[166.19853210 133.50105286]
[152.87261963 152.04853821]
[134.53674316 165.66413879]
[112.92829895 173.05767822]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 20]
[3 19]
[5 17]
[6 16]
[7 15]
[8 14]
[47 76]
[48 75]
[50 74]
[51 73]
[52 72]
[53 71]
[55 69]
[56 68]
[57 67]
[58 66]
[59 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
