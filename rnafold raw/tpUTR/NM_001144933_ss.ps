%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 20:22:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUUCUACAUUUUCUAAACAGCUCAUCACAAACUACUUUUUCAUAGUUAUCAAAAUUAUUGUUUCUUGCUUUUGUCUAAGUACAUUCUUAGAAGCUGGAAAUUUUGACAUCUUUUGGAUUCUGACCAGUAAAAAAGUUUAAGUCAUAA\
) } def
/len { sequence length } bind def

/coor [
[15.56029510 427.46411133]
[11.82355022 442.02377319]
[5.85506725 455.81954956]
[-2.19817472 468.51174927]
[-12.13785744 479.78778076]
[-23.71920776 489.36999512]
[-36.65702438 497.02243042]
[-50.63270187 502.55657959]
[-65.30207062 505.83621216]
[-80.30390167 506.78054810]
[-95.26873779 505.36633301]
[-109.82807159 501.62838745]
[-123.62336731 495.65875244]
[-136.31489563 487.60446167]
[-147.59011841 477.66384888]
[-157.17138672 466.08169556]
[-164.82272339 453.14324951]
[-170.35572815 439.16711426]
[-173.63415527 424.49749756]
[-174.57723999 409.49557495]
[-173.16178894 394.53085327]
[-169.42263794 379.97183228]
[-163.45188904 366.17703247]
[-155.39654541 353.48617554]
[-145.45500183 342.21176147]
[-133.87207031 332.63146973]
[-120.93299103 324.98117065]
[-106.95640564 319.44931030]
[-92.28649139 316.17211914]
[-77.28450775 315.23025513]
[-62.31990433 316.64694214]
[-47.76118469 320.38729858]
[-33.96687698 326.35919189]
[-25.92947388 313.69427490]
[-17.89207268 301.02935791]
[-10.25645161 288.11822510]
[-3.03014612 274.97363281]
[4.19615889 261.82904053]
[11.42246437 248.68443298]
[18.64876938 235.53982544]
[25.87507439 222.39523315]
[33.10137939 209.25062561]
[32.45254135 194.37016296]
[45.88107300 186.00445557]
[53.10737991 172.85984802]
[51.76603699 155.39050293]
[67.52675629 145.92723083]
[74.47619629 132.63417053]
[81.42563629 119.34112549]
[88.37507629 106.04807281]
[94.76177216 92.47566223]
[100.57450104 78.64771271]
[106.38723755 64.81977081]
[112.19996643 50.99182129]
[118.01270294 37.16387558]
[123.82543945 23.33592606]
[129.05401611 9.27669716]
[133.68927002 -4.98915052]
[138.32452393 -19.25499916]
[131.40351868 -33.20983124]
[136.30754089 -47.61139679]
[149.65400696 -54.12352753]
[154.28926086 -68.38937378]
[158.92451477 -82.65522003]
[163.55976868 -96.92106628]
[168.19502258 -111.18692017]
[172.83027649 -125.45276642]
[169.73614502 -140.96846008]
[181.02770996 -150.68186951]
[185.66296387 -164.94770813]
[190.29821777 -179.21356201]
[189.19590759 -183.56993103]
[189.54342651 -187.62881470]
[191.05955505 -190.96066284]
[193.35000610 -193.27592468]
[195.96469116 -194.45027161]
[201.77743530 -208.27821350]
[207.59016418 -222.10615540]
[213.40289307 -235.93411255]
[219.21563721 -249.76205444]
[225.02836609 -263.58999634]
[218.82556152 -278.12619019]
[224.79559326 -292.75952148]
[239.39654541 -298.80828857]
[253.96592712 -292.68389893]
[259.85998535 -278.01980591]
[253.58189392 -263.51596069]
[238.85630798 -257.77728271]
[233.04357910 -243.94932556]
[227.23085022 -230.12136841]
[221.41810608 -216.29342651]
[215.60537720 -202.46548462]
[209.79264832 -188.63752747]
[204.56405640 -174.57830811]
[199.92880249 -160.31245422]
[195.29354858 -146.04661560]
[198.71922302 -131.55130005]
[187.09611511 -120.81751251]
[182.46086121 -106.55165863]
[177.82560730 -92.28581238]
[173.19035339 -78.01996613]
[168.55509949 -63.75411987]
[163.91984558 -49.48826981]
[170.88961792 -36.37500000]
[166.39202881 -21.84137154]
[152.59037781 -14.61974335]
[147.95512390 -0.35389578]
[143.31987000 13.91195202]
[144.53184509 16.50940895]
[144.75285339 19.75868225]
[143.72344971 23.27154160]
[141.33436584 26.57118034]
[137.65338135 29.14866066]
[131.84065247 42.97660828]
[126.02791595 56.80455399]
[120.21518707 70.63249969]
[114.40245056 84.46044922]
[108.58971405 98.28839874]
[109.54484558 101.26031494]
[109.40917969 104.65296936]
[108.02227783 108.05151367]
[105.38355255 110.98693848]
[101.66813660 112.99751282]
[94.71868896 126.29056549]
[87.76924896 139.58361816]
[80.81980896 152.87666321]
[83.92684174 165.43954468]
[77.81275177 176.38766479]
[66.25197601 180.08615112]
[59.02567291 193.23075867]
[59.15763855 209.05140686]
[46.24597931 216.47692871]
[39.01967621 229.62153625]
[31.79336929 242.76612854]
[24.56706429 255.91073608]
[17.34075928 269.05532837]
[10.11445427 282.19992065]
[2.88814878 295.34454346]
[3.00911665 300.69595337]
[1.20689094 305.09234619]
[-1.81595707 307.95251465]
[-5.22715378 309.06677246]
[-13.26455593 321.73168945]
[-21.30195808 334.39660645]
[-10.02509212 344.33535767]
[-0.44192302 355.91592407]
[7.21155643 368.85308838]
[12.74687195 382.82830811]
[16.02770996 397.49740601]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[33 144]
[34 143]
[35 142]
[36 138]
[37 137]
[38 136]
[39 135]
[40 134]
[41 133]
[42 132]
[44 130]
[45 129]
[47 126]
[48 125]
[49 124]
[50 123]
[51 118]
[52 117]
[53 116]
[54 115]
[55 114]
[56 113]
[57 108]
[58 107]
[59 106]
[62 103]
[63 102]
[64 101]
[65 100]
[66 99]
[67 98]
[69 96]
[70 95]
[71 94]
[76 93]
[77 92]
[78 91]
[79 90]
[80 89]
[81 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
