%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 15:02:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUCAAGCAAGACAAAUGAAGACUGAAACCAAGAACGUUAUUCUUAAUCUGGAAAUUUGACUGAUAAUAUUCUCUUAAUAAAGUUUUAAGUUUUCUGCAAAGAA\
) } def
/len { sequence length } bind def

/coor [
[81.27931976 310.68402100]
[67.41608429 304.44869995]
[56.99792099 293.37936401]
[51.61351776 279.16400146]
[52.08395767 263.97033691]
[58.33750534 250.11532593]
[69.42053986 239.71173096]
[83.64297485 234.34603882]
[84.08747864 219.35263062]
[84.53197479 204.35920715]
[81.53610229 197.46961975]
[85.21836090 188.92991638]
[86.10697174 173.95626831]
[83.31657410 166.98092651]
[87.25027466 158.55409241]
[88.58221436 143.61334229]
[89.91415405 128.67259216]
[91.24608612 113.73184967]
[83.75988007 98.79449463]
[93.36949158 85.12616730]
[94.25810242 70.15251160]
[95.14670563 55.17885208]
[96.03531647 40.20519638]
[96.92392731 25.23154068]
[97.81253815 10.25788403]
[83.22024536 4.05210829]
[71.63488770 -6.73587179]
[64.43037415 -20.80185699]
[62.45262527 -36.45441818]
[65.92024994 -51.81828308]
[74.40058136 -65.05901337]
[86.86354065 -74.60202789]
[101.80675507 -79.31983185]
[102.25125885 -94.31324768]
[102.69575500 -109.30665588]
[103.14025879 -124.30007172]
[95.81529999 -138.32347107]
[103.92635345 -150.81587219]
[104.37084961 -165.80928040]
[104.81535339 -180.80268860]
[105.25984955 -195.79609680]
[105.70435333 -210.78952026]
[106.14884949 -225.78292847]
[97.02194214 -241.68962097]
[106.62812805 -256.29324341]
[106.62812805 -271.29324341]
[106.62812805 -286.29324341]
[106.62812805 -301.29324341]
[93.59450531 -309.54721069]
[87.11308289 -323.54702759]
[89.25205994 -338.82537842]
[99.32890320 -350.50701904]
[114.12812805 -354.86437988]
[128.92735291 -350.50701904]
[139.00419617 -338.82537842]
[141.14318848 -323.54702759]
[134.66175842 -309.54721069]
[121.62812805 -301.29324341]
[121.62812805 -286.29324341]
[121.62812805 -271.29324341]
[121.62812805 -256.29324341]
[130.00572205 -247.42814636]
[130.03245544 -234.82789612]
[121.14226532 -225.33842468]
[120.69776154 -210.34501648]
[120.25326538 -195.35160828]
[119.80876160 -180.35818481]
[119.36426544 -165.36477661]
[118.91976166 -150.37136841]
[126.27651215 -137.42039490]
[118.13366699 -123.85556793]
[117.68917084 -108.86215973]
[117.24466705 -93.86874390]
[116.80017090 -78.87533569]
[130.17837524 -74.00466919]
[141.40078735 -65.20858002]
[149.35046387 -53.34553528]
[153.23088074 -39.58009338]
[152.64581299 -25.26857185]
[147.63967896 -11.82540989]
[138.69453430 -0.58338785]
[126.68362427 7.33851624]
[112.78619385 11.14649391]
[111.89758301 26.12014961]
[111.00897217 41.09380722]
[110.12036896 56.06746292]
[109.23175812 71.04111481]
[108.34314728 86.01477051]
[115.58177948 95.26683807]
[114.71217346 106.98188019]
[106.18683624 115.06378937]
[104.85489655 130.00453186]
[103.52295685 144.94528198]
[102.19102478 159.88603210]
[101.08062744 174.84487915]
[100.19201660 189.81852722]
[99.52539062 204.80371094]
[99.08088684 219.79711914]
[98.63639069 234.79054260]
[112.51597595 240.98936462]
[122.96323395 252.03125000]
[128.38500977 266.23239136]
[127.95455170 281.42724609]
[121.73747253 295.29867554]
[110.68185425 305.73138428]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 99]
[9 98]
[10 97]
[12 96]
[13 95]
[15 94]
[16 93]
[17 92]
[18 91]
[20 88]
[21 87]
[22 86]
[23 85]
[24 84]
[25 83]
[33 74]
[34 73]
[35 72]
[36 71]
[38 69]
[39 68]
[40 67]
[41 66]
[42 65]
[43 64]
[45 61]
[46 60]
[47 59]
[48 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
