%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 01:52:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCACUGGGAUGCCAAGUACCUGCUCACCAUUGGUCAUGAAUGAAUGAACAAAAUGUUUUCAAGCCAGCAACUCGAGAUUGGGCUCAUUUUUAUCUAAAAGCAAGUGAUGUAAUUUAGUUAGAGUUUUUAAAACUUCCCCAUUAAAGUUUCUCCAAUUUC\
) } def
/len { sequence length } bind def

/coor [
[105.44702911 141.11378479]
[78.14337921 135.24630737]
[68.06326294 146.35446167]
[57.98314285 157.46261597]
[47.90302277 168.57078552]
[44.35901260 183.98994446]
[30.07637215 188.21551514]
[19.99625397 199.32368469]
[9.91613674 210.43183899]
[-0.05580118 221.63722229]
[-9.91862202 232.93875122]
[-13.22639656 241.50727844]
[-20.08393860 244.36143494]
[-30.16405678 255.46958923]
[-26.05881500 270.34072876]
[-30.66701889 285.06375122]
[-42.51820755 294.94064331]
[-57.83071136 296.81970215]
[-71.71836090 290.10131836]
[-79.74966431 276.92932129]
[-79.36185455 261.50683594]
[-70.67868805 248.75511169]
[-56.47092819 242.74319458]
[-41.27221680 245.38946533]
[-31.19209862 234.28131104]
[-21.22015953 223.07594299]
[-11.35733986 211.77439880]
[-9.31859779 204.63188171]
[-1.19202340 200.35173035]
[8.88809490 189.24356079]
[18.96821213 178.13540649]
[21.79122734 163.51077271]
[36.79486465 158.49066162]
[46.87498093 147.38250732]
[56.95510101 136.27433777]
[67.03521729 125.16618347]
[63.91874695 120.44888306]
[61.47282028 115.35154724]
[59.74289703 109.96891785]
[58.76112747 104.40102386]
[58.54575348 98.75133514]
[59.10078049 93.12485504]
[60.41589737 87.62614441]
[47.14447021 80.63549042]
[33.87304306 73.64483643]
[27.18312263 73.51799011]
[22.31805992 70.46227264]
[20.23031998 66.11710358]
[7.23993969 58.61710358]
[-5.75044107 51.11710358]
[-18.74082184 43.61710358]
[-31.73120308 36.11710358]
[-48.47146606 33.43381882]
[-50.52721024 16.60496902]
[-34.92512512 9.97087193]
[-24.23120308 23.12672234]
[-11.24082184 30.62672234]
[1.74955881 38.12672043]
[14.73993969 45.62672043]
[27.73031998 53.12672043]
[40.86369324 60.37340927]
[54.13512039 67.36406708]
[67.40654755 74.35471344]
[72.13644409 69.28134918]
[77.64571381 65.06721497]
[83.78026581 61.83019638]
[90.36849976 59.66083908]
[97.22614288 58.61981964]
[104.16136932 58.73625565]
[110.98020172 60.00688934]
[117.49190521 62.39618683]
[123.51433563 65.83730316]
[128.87904358 70.23400116]
[133.43595886 75.46328735]
[137.05763245 81.37889862]
[139.64276123 87.81536865]
[154.54133606 86.07397461]
[169.43991089 84.33258057]
[184.33848572 82.59118652]
[199.23706055 80.84979248]
[214.13563538 79.10839844]
[229.03421021 77.36700439]
[243.93278503 75.62561035]
[258.83135986 73.88421631]
[244.69398499 68.87078857]
[233.96359253 58.38943481]
[228.61962891 44.37365723]
[229.64788818 29.40894127]
[236.85868835 16.25583076]
[248.92185974 7.34067535]
[263.61209106 4.30805492]
[278.21951294 7.71739626]
[290.04946899 16.93977737]
[296.91967773 30.27394867]
[297.56280518 45.26015472]
[291.86022949 59.13389206]
[280.86651611 69.33432007]
[295.23635864 65.03227234]
[309.60620117 60.73022461]
[323.97604370 56.42817688]
[338.34588623 52.12612915]
[352.71572876 47.82408142]
[367.08557129 43.52203369]
[372.08694458 30.98429680]
[383.24215698 23.73541069]
[396.34100342 24.24317932]
[406.59207153 32.09692001]
[421.04263306 28.07432938]
[435.49319458 24.05174065]
[449.94375610 20.02915192]
[455.23745728 5.44298506]
[468.11251831 -3.21799159]
[483.61819458 -2.62345648]
[495.79226685 6.99797964]
[499.95352173 21.94667816]
[494.50189209 36.47455978]
[481.53363037 44.99535751]
[466.03530884 44.23265076]
[453.96633911 34.47971344]
[439.51577759 38.50230408]
[425.06521606 42.52489090]
[410.61465454 46.54748154]
[403.00384521 61.51972580]
[386.60345459 66.47529602]
[371.38763428 57.89187622]
[357.01779175 62.19392395]
[342.64794922 66.49597168]
[328.27810669 70.79801941]
[313.90826416 75.10006714]
[299.53842163 79.40211487]
[285.16857910 83.70416260]
[281.56799316 98.26560974]
[292.27691650 108.76887512]
[302.98587036 119.27213287]
[313.69482422 129.77539062]
[324.40374756 140.27865601]
[335.11270142 150.78190613]
[350.39154053 148.07331848]
[364.32971191 154.89295959]
[371.56765747 168.61854553]
[369.32229614 183.97229004]
[358.45697021 195.05039978]
[343.14962769 197.59309387]
[329.28628540 190.62265015]
[322.19763184 176.81935120]
[324.60943604 161.49085999]
[313.90051270 150.98759460]
[303.19155884 140.48434448]
[292.48260498 129.98107910]
[281.77365112 119.47782135]
[271.06472778 108.97455597]
[262.53991699 99.29473114]
[260.57275391 88.78279114]
[245.67417908 90.52418518]
[230.77560425 92.26557922]
[215.87702942 94.00697327]
[200.97845459 95.74836731]
[186.07987976 97.48976135]
[171.18130493 99.23115540]
[156.28273010 100.97254944]
[141.38415527 102.71394348]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 36]
[3 35]
[4 34]
[5 33]
[7 31]
[8 30]
[9 29]
[10 27]
[11 26]
[13 25]
[14 24]
[43 63]
[44 62]
[45 61]
[48 60]
[49 59]
[50 58]
[51 57]
[52 56]
[76 161]
[77 160]
[78 159]
[79 158]
[80 157]
[81 156]
[82 155]
[83 154]
[84 153]
[97 131]
[98 130]
[99 129]
[100 128]
[101 127]
[102 126]
[103 125]
[107 122]
[108 121]
[109 120]
[110 119]
[132 151]
[133 150]
[134 149]
[135 148]
[136 147]
[137 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
