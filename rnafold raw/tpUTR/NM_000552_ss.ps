%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:39:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUGCUGCAGCUGCAUGGGUGCCUGCUGCUGCCUGCCUUGGCCUGAUGGCCAGGCCAGAGUGCUGCCAGUCCUCUGCAUGUUCUGCUCUUGUGCCCUUCUGAGCCCACAAUAAAGGCUGAGCUCUUAUCUUGCAAAAGGC\
) } def
/len { sequence length } bind def

/coor [
[78.22629547 128.51068115]
[66.83098602 138.26501465]
[55.43568420 148.01934814]
[49.75625992 165.49726868]
[32.43889236 168.12258911]
[21.26216125 178.12661743]
[16.13972092 193.09562683]
[1.49615347 195.81872559]
[-9.68057823 205.82275391]
[-20.85730934 215.82678223]
[-32.03404236 225.83082581]
[-43.21077347 235.83485413]
[-48.50215912 253.43412781]
[-65.75720978 256.44192505]
[-76.70989227 266.69076538]
[-87.66258240 276.93957520]
[-91.90992737 292.77917480]
[-107.81889343 296.75869751]
[-119.02371216 284.78439331]
[-113.99781036 269.17437744]
[-97.91141510 265.98690796]
[-86.95873260 255.73806763]
[-76.00604248 245.48922729]
[-75.27458954 233.36523438]
[-66.16436768 224.73658752]
[-53.21480560 224.65812683]
[-42.03807449 214.65408325]
[-30.86134148 204.65005493]
[-19.68461037 194.64602661]
[-8.50787926 184.64198303]
[-4.18487310 170.38853455]
[11.25812817 166.94989014]
[22.43486023 156.94586182]
[23.43434334 144.84101868]
[32.73322678 136.41601562]
[45.68135071 136.62403870]
[57.07665634 126.86970520]
[68.47196198 117.11537170]
[61.68806839 97.70751190]
[66.64913940 76.34731293]
[53.39110184 69.33129883]
[40.13306427 62.31528473]
[26.87502861 55.29927063]
[13.61699104 48.28325653]
[-2.74213982 49.42819595]
[-11.68769169 35.68377304]
[-4.01724815 21.18907356]
[12.37849617 20.85499954]
[20.63300514 35.02521896]
[33.89104080 42.04123306]
[47.14907837 49.05724716]
[60.40711594 56.07326126]
[73.66515350 63.08927536]
[87.14868164 56.51702118]
[89.78971100 41.75135422]
[92.43073273 26.98568535]
[94.90826416 12.19170570]
[97.22200012 -2.62877440]
[99.37165070 -17.47394180]
[101.35696411 -32.34197998]
[103.34226990 -47.21001816]
[105.32757568 -62.07805634]
[106.81847382 -77.00377655]
[107.81331635 -91.97074890]
[108.64253998 -106.94781494]
[109.30604553 -121.93313599]
[109.96954346 -136.91845703]
[107.20642090 -145.70988464]
[110.81710815 -152.22685242]
[111.81195831 -167.19383240]
[104.09079742 -181.66157532]
[112.98815918 -195.43724060]
[129.35119629 -194.34960938]
[136.34701538 -179.51753235]
[126.77893066 -166.19898987]
[125.78408051 -151.23200989]
[124.95485687 -136.25494385]
[124.29135895 -121.26963043]
[123.62786102 -106.28431702]
[126.49704742 -99.40856934]
[122.78028870 -90.97590637]
[121.78544617 -76.00893402]
[123.89173889 -73.08837128]
[124.64340210 -68.97827148]
[123.48615265 -64.34781647]
[120.19561768 -60.09274673]
[118.21030426 -45.22470856]
[116.22499847 -30.35667229]
[114.23969269 -15.48863411]
[116.48996735 -8.38621521]
[112.04248047 -0.31504044]
[109.72874451 14.50543976]
[111.82135010 21.65590096]
[107.19640350 29.62671280]
[104.55537415 44.39238358]
[101.91434479 59.15805054]
[117.97777557 61.99258804]
[132.07833862 71.06108856]
[141.83596802 85.24771118]
[145.44747925 102.54655457]
[160.15110779 105.51358032]
[175.20907593 100.65885925]
[186.15443420 110.76076508]
[200.85806274 113.72779083]
[215.56169128 116.69482422]
[230.26531982 119.66184998]
[240.93428040 108.51838684]
[255.93952942 104.93421936]
[270.49291992 110.05302429]
[279.95053101 122.24142456]
[281.29449463 137.61013794]
[274.09591675 151.25506592]
[260.65185547 158.82215881]
[245.25227356 157.89678955]
[232.81109619 148.77424622]
[227.29829407 134.36547852]
[212.59466553 131.39845276]
[197.89102173 128.43142700]
[183.18739319 125.46439362]
[169.18113708 130.53134155]
[157.18408203 120.21721649]
[142.48045349 117.25018311]
[137.54055786 122.89353943]
[149.02174377 132.54664612]
[160.10928345 142.64944458]
[150.22898865 153.93571472]
[138.74853516 144.28279114]
[127.66077423 134.18025208]
[122.72087860 139.82360840]
[127.60788727 154.00518799]
[132.49488831 168.18675232]
[137.38189697 182.36833191]
[150.10928345 192.70979309]
[147.25018311 208.85778809]
[131.74580383 214.20063782]
[119.54570770 203.24208069]
[123.20032501 187.25534058]
[118.31331635 173.07376099]
[113.42630768 158.89219666]
[108.53929901 144.71061707]
[96.13068390 142.12657166]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[5 33]
[6 32]
[8 30]
[9 29]
[10 28]
[11 27]
[12 26]
[14 23]
[15 22]
[16 21]
[40 53]
[41 52]
[42 51]
[43 50]
[44 49]
[54 96]
[55 95]
[56 94]
[57 92]
[58 91]
[59 89]
[60 88]
[61 87]
[62 86]
[63 82]
[64 81]
[65 79]
[66 78]
[67 77]
[69 76]
[70 75]
[100 122]
[101 121]
[103 119]
[104 118]
[105 117]
[106 116]
[129 140]
[130 139]
[131 138]
[132 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
