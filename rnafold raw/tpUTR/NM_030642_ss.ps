%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 09:31:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGAGUUGGUCACCCUGUCACCACUGAACCUUGAUUUAACAGAGGCAAAAUGCAAGUCUUCCCUGAAGAAUACUGGGGGUAGGGAAACUUCUAGUGGCAAUGAUAAAACCAGCAGCAAUGAUAAUAGAAGGCAA\
) } def
/len { sequence length } bind def

/coor [
[155.19895935 439.17147827]
[156.97457886 424.21618652]
[161.92405701 409.99237061]
[169.81590271 397.16534424]
[180.28100586 386.33502197]
[192.82987976 378.00796509]
[187.41125488 364.02090454]
[181.99263000 350.03381348]
[176.57400513 336.04672241]
[171.15538025 322.05963135]
[165.73675537 308.07257080]
[155.42605591 306.57507324]
[146.62489319 300.84860229]
[140.99200439 291.89111328]
[139.62286377 281.31671143]
[142.83726501 271.06494141]
[150.10798645 263.04489136]
[145.67089844 248.71618652]
[141.23379517 234.38746643]
[136.79670715 220.05874634]
[132.35961914 205.73002625]
[127.42880249 191.56361389]
[122.01017761 177.57653809]
[116.59155273 163.58944702]
[111.17292786 149.60237122]
[105.75430298 135.61528015]
[100.33567810 121.62820435]
[86.45592499 120.55039978]
[74.47666168 110.48649597]
[70.08659363 93.67392731]
[55.34199524 90.91767883]
[40.59739685 88.16143799]
[25.85280228 85.40519714]
[15.34444618 96.70024109]
[0.39205024 100.49884796]
[-14.23313046 95.58889008]
[-23.86425400 83.53712463]
[-25.42806244 68.18922424]
[-18.42555237 54.44264984]
[-5.09119892 46.68387604]
[10.32005596 47.38870621]
[22.89053535 56.33222961]
[28.60904503 70.66059875]
[43.35364151 73.41683960]
[58.09823608 76.17308807]
[72.84283447 78.92932892]
[61.22464752 69.44155884]
[48.31985855 61.79522705]
[43.04260254 47.75419235]
[47.71654892 33.50097275]
[60.28367233 25.31150818]
[75.21045685 26.79175568]
[85.92437744 37.28993988]
[87.70750427 52.18534851]
[91.69403076 66.64590454]
[95.12828827 52.04433441]
[98.56254578 37.44276428]
[101.99680328 22.84119225]
[100.91384888 13.67860413]
[105.68269348 7.94391060]
[109.45330048 -6.57444048]
[113.22390747 -21.09279251]
[116.99452209 -35.61114120]
[120.76512909 -50.12949371]
[124.53573608 -64.64784241]
[128.30633545 -79.16619873]
[116.15467834 -88.29885864]
[108.42722321 -101.38911438]
[106.30236816 -116.44081116]
[110.10412598 -131.15866089]
[119.25276184 -143.29829407]
[132.35317993 -151.00852966]
[147.40765381 -153.11358643]
[162.12048340 -149.29246521]
[174.24807739 -140.12786865]
[181.94107056 -127.01731873]
[184.02632141 -111.96009064]
[180.18585205 -97.25228882]
[171.00531006 -85.13676453]
[157.88465881 -77.46102905]
[142.82469177 -75.39559174]
[139.05407715 -60.87723923]
[135.28347778 -46.35888672]
[131.51286316 -31.84053612]
[127.74226379 -17.32218361]
[123.97165680 -2.80383301]
[120.20104980 11.71451759]
[116.59837341 26.27544975]
[113.16411591 40.87702179]
[109.72985840 55.47859192]
[106.29560089 70.08016205]
[125.23799896 93.33626556]
[114.32276154 116.20957947]
[119.74138641 130.19665527]
[125.16001129 144.18374634]
[130.57862854 158.17082214]
[135.99725342 172.15791321]
[141.41587830 186.14498901]
[145.63066101 189.52182007]
[147.84524536 193.76986694]
[148.06857300 197.95608521]
[146.68833923 201.29293823]
[151.12542725 215.62165833]
[155.56251526 229.95037842]
[159.99961853 244.27909851]
[164.43670654 258.60781860]
[182.64595032 266.89685059]
[188.93099976 285.57327271]
[179.72384644 302.65393066]
[185.14247131 316.64102173]
[190.56109619 330.62811279]
[195.97972107 344.61517334]
[201.39834595 358.60226440]
[206.81697083 372.58935547]
[221.70059204 370.28900146]
[236.73072815 371.24240112]
[251.20439148 375.40499878]
[264.44461060 382.58206177]
[275.83215332 392.43795776]
[284.83435059 404.51165771]
[291.03018188 418.23846436]
[294.12985229 432.97637939]
[293.98840332 448.03607178]
[290.61239624 462.71316528]
[284.15979004 476.32116699]
[274.93237305 488.22363281]
[263.36172485 497.86386108]
[249.98899841 504.79095459]
[235.43969727 508.68090820]
[220.39430237 509.35180664]
[205.55651855 506.77224731]
[191.62031555 501.06289673]
[179.23754883 492.49078369]
[168.98736572 481.45684814]
[161.34918213 468.47717285]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 114]
[7 113]
[8 112]
[9 111]
[10 110]
[11 109]
[17 106]
[18 105]
[19 104]
[20 103]
[21 102]
[22 98]
[23 97]
[24 96]
[25 95]
[26 94]
[27 93]
[30 46]
[31 45]
[32 44]
[33 43]
[55 91]
[56 90]
[57 89]
[58 88]
[60 87]
[61 86]
[62 85]
[63 84]
[64 83]
[65 82]
[66 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
