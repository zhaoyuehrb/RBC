%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 23:15:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCUCUGCUCAGGCCAGAAGUCCAGCUGCUGCCAGGCAUGUCCCCCAGGGCCACUGGGCACUAUGAGUCCCCCACCUCUCCCACUACUGGCCCCUCGGCUGCUC\
) } def
/len { sequence length } bind def

/coor [
[-57.58858871 368.25772095]
[-64.83046722 381.39373779]
[-72.07234955 394.52978516]
[-79.31423950 407.66580200]
[-86.55612183 420.80181885]
[-81.92464447 435.91226196]
[-89.40808105 449.83251953]
[-104.56662750 454.30398560]
[-118.40699768 446.67379761]
[-122.71794128 431.46881104]
[-114.94184875 417.70986938]
[-99.69214630 413.55993652]
[-92.45026398 400.42391968]
[-85.20837402 387.28790283]
[-77.96649170 374.15185547]
[-70.72460938 361.01583862]
[-78.30908966 351.66534424]
[-82.24156189 340.24887085]
[-82.02315521 328.14105225]
[-77.65634155 316.80853271]
[-69.64751434 307.63217163]
[-58.94842911 301.73895264]
[-46.84307861 299.86349487]
[-34.79366302 302.25659180]
[-26.41396141 289.81552124]
[-18.03425980 277.37442017]
[-9.65455723 264.93334961]
[-1.27485609 252.49226379]
[7.10484552 240.05117798]
[2.44964170 222.46955872]
[12.15042973 206.71412659]
[30.56145668 202.82481384]
[38.18942261 189.90914917]
[45.81739044 176.99349976]
[53.44535828 164.07785034]
[61.07332230 151.16218567]
[49.33867645 139.57633972]
[40.93744659 125.38642883]
[36.42242050 109.52614594]
[36.09067917 93.03905487]
[39.96405029 77.00998688]
[47.78767014 62.49361801]
[59.04676437 50.44509506]
[73.00050354 41.65719223]
[88.73075867 36.70813370]
[87.84214783 21.73447800]
[86.95353699 6.76082277]
[86.06493378 -8.21283340]
[85.17632294 -23.18648911]
[74.18304443 -34.87098694]
[76.60669708 -50.72991180]
[90.58804321 -58.59765244]
[105.40180969 -52.43875504]
[109.68412781 -36.97779465]
[100.14997864 -24.07509804]
[101.03858948 -9.10144234]
[101.92719269 5.87221336]
[102.81580353 20.84586906]
[103.70441437 35.81952667]
[112.63568115 36.96670914]
[121.31903839 39.35055923]
[129.58413696 42.92430496]
[137.26881409 47.61783218]
[144.22230530 53.33905792]
[150.30819702 59.97573853]
[155.40707397 67.39765930]
[169.13426208 61.35080719]
[182.86143494 55.30395889]
[186.01583862 40.11088562]
[197.52067566 29.69848251]
[212.95211792 28.07052422]
[226.37646484 35.85299683]
[232.63175964 50.05337906]
[229.31272888 65.21133423]
[217.69560242 75.49832153]
[202.24740601 76.95878601]
[188.90829468 69.03114319]
[175.18110657 75.07799530]
[161.45391846 81.12484741]
[164.22486877 97.16774750]
[162.87687683 113.39229584]
[157.49639893 128.75794983]
[148.42849731 142.27926636]
[136.25473022 153.08908081]
[121.75582123 160.49414062]
[105.86164856 164.01950073]
[89.59154510 163.43910217]
[73.98897552 158.79016113]
[66.36100769 171.70581055]
[58.73304367 184.62145996]
[51.10507584 197.53712463]
[43.47711182 210.45277405]
[48.68999100 221.35021973]
[47.92571259 233.28495789]
[41.49668884 243.22540283]
[31.13917542 248.70434570]
[19.54593086 248.43087769]
[11.16622925 260.87194824]
[2.78652763 273.31304932]
[-5.59317398 285.75411987]
[-13.97287560 298.19522095]
[-22.35257721 310.63629150]
[-13.69172096 326.72756958]
[-14.24270058 344.90988159]
[-23.77423668 360.30545044]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[5 12]
[24 102]
[25 101]
[26 100]
[27 99]
[28 98]
[29 97]
[32 92]
[33 91]
[34 90]
[35 89]
[36 88]
[45 59]
[46 58]
[47 57]
[48 56]
[49 55]
[66 79]
[67 78]
[68 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
