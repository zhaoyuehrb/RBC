%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 08:12:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAAAUAUUUGGAGAUGGAUUUACCUGGAAGUGGUAAGAGUAGAUGAUAGUGGGCCUUUCACAAAGGAAGAAACUUGGGACGAUAAAGAGAACUGUAAACUUAAUUUUGUAGUUAGAGAAGAUGAACCCAAACAAUUAAACUAUGUUGAACAAUAA\
) } def
/len { sequence length } bind def

/coor [
[91.82662201 363.99371338]
[76.69522858 363.09002686]
[62.78667068 357.06277466]
[51.78047943 346.63973999]
[45.00571060 333.07955933]
[43.28044510 318.01971436]
[46.81301498 303.27871704]
[55.17685318 290.63665771]
[67.36197662 281.62008667]
[81.89698029 277.31781006]
[82.79120636 262.34448242]
[75.82640839 249.17858887]
[84.37264252 235.86422729]
[85.26686859 220.89089966]
[78.30207062 207.72500610]
[86.84830475 194.41064453]
[87.74253082 179.43731689]
[88.63675690 164.46400452]
[89.53099060 149.49067688]
[70.18769836 143.56692505]
[53.96987152 130.09523010]
[43.80139160 110.65739441]
[29.85914230 116.19035339]
[15.91689110 121.72331238]
[1.97463965 127.25627136]
[-11.96761131 132.78923035]
[-16.71973991 147.68725586]
[-29.96390915 156.00146484]
[-45.44662476 153.80613708]
[-55.85742569 142.13783264]
[-56.28064728 126.50597382]
[-46.51645660 114.29145050]
[-31.17520905 111.26158142]
[-17.50057030 118.84697723]
[-3.55831909 113.31401825]
[10.38393211 107.78105927]
[24.32618332 102.24810028]
[38.26843262 96.71514130]
[40.47231293 89.54625702]
[25.58419228 87.71761322]
[10.69607449 85.88896942]
[-4.19204330 84.06032562]
[-19.08016205 82.23168182]
[-33.40154266 86.69240570]
[-47.96874237 83.11515808]
[-58.59485626 72.52810669]
[-62.22573090 57.97417831]
[-57.81778336 43.63646698]
[-46.63793945 33.63591003]
[-31.89951134 30.84686852]
[-17.83861542 36.07096863]
[-8.49692917 47.80599213]
[4.84731960 54.65661621]
[18.19156837 61.50723648]
[31.53581619 68.35785675]
[44.88006592 75.20848083]
[47.08394241 68.03959656]
[38.65762711 55.63003540]
[30.23130989 43.22047424]
[21.80499268 30.81091499]
[13.37867641 18.40135574]
[-2.04560471 13.98874855]
[-8.07930660 -0.87644541]
[-0.09389002 -14.79092216]
[15.78491783 -17.08068657]
[27.37625313 -5.98922634]
[25.78823662 9.97503853]
[34.21455383 22.38459969]
[42.64086914 34.79415894]
[51.06718826 47.20372009]
[59.49350357 59.61328125]
[75.17181396 49.94165802]
[92.71253967 45.93446732]
[110.18215942 47.75131226]
[125.74351501 54.92466354]
[137.84895325 66.43834686]
[150.42358398 58.26042557]
[162.99822998 50.08250427]
[175.57287598 41.90458298]
[188.14750671 33.72666168]
[189.07479858 18.34984970]
[198.76535034 6.60478973]
[213.34127808 2.86225200]
[227.16058350 8.35450172]
[239.73521423 0.17658053]
[236.69200134 -15.58497620]
[239.91143799 -31.27222061]
[248.87344360 -44.49743652]
[262.18615723 -53.25918961]
[277.80203247 -56.24518585]
[293.33279419 -53.02874756]
[306.41467285 -44.12951279]
[318.82424927 -52.55583191]
[331.23379517 -60.98214722]
[343.64337158 -69.40846252]
[356.05291748 -77.83477783]
[368.46246338 -86.26109314]
[380.87203979 -94.68741608]
[393.28158569 -103.11373138]
[405.69116211 -111.54004669]
[408.41220093 -127.10832977]
[421.39257812 -136.12419128]
[436.93121338 -133.23869324]
[445.80935669 -120.16374969]
[442.75973511 -104.65647888]
[429.59164429 -95.91708374]
[414.11746216 -99.13048553]
[401.70791626 -90.70417023]
[389.29833984 -82.27785492]
[376.88879395 -73.85153198]
[364.47924805 -65.42521667]
[352.06967163 -56.99890137]
[339.66012573 -48.57258606]
[327.25054932 -40.14627075]
[314.84100342 -31.71995354]
[318.20513916 -18.06702805]
[316.69488525 -4.05698919]
[310.47195435 8.61901760]
[300.26815796 18.42384529]
[287.29943848 24.16073608]
[273.12094116 25.11938667]
[259.44055176 21.16381454]
[247.91314697 12.75122166]
[235.33850098 20.92914391]
[234.75480652 35.78839111]
[225.42289734 47.59431076]
[210.75717163 51.68937683]
[196.32543945 46.30130005]
[183.75079346 54.47922516]
[171.17614746 62.65714645]
[158.60151672 70.83506775]
[146.02687073 79.01298523]
[149.17340088 88.12969208]
[150.53251648 97.67787170]
[150.05482483 107.31045532]
[147.75767517 116.67730713]
[143.72456360 125.43795776]
[138.10211182 133.27395630]
[131.09468079 139.90048218]
[122.95697784 145.07666016]
[113.98480988 148.61431885]
[104.50431061 150.38490295]
[103.61008453 165.35823059]
[102.71585846 180.33154297]
[101.82162476 195.30487061]
[108.72246552 209.54176331]
[100.24018860 221.78514099]
[99.34596252 236.75845337]
[106.24680328 250.99534607]
[97.76452637 263.23870850]
[96.87030029 278.21203613]
[110.78993988 284.21365356]
[121.81532288 294.61639404]
[128.61506653 308.16406250]
[130.36808777 323.22070312]
[126.86268616 337.96817017]
[118.52216339 350.62564087]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 151]
[11 150]
[13 148]
[14 147]
[16 145]
[17 144]
[18 143]
[19 142]
[22 38]
[23 37]
[24 36]
[25 35]
[26 34]
[57 71]
[58 70]
[59 69]
[60 68]
[61 67]
[76 132]
[77 131]
[78 130]
[79 129]
[80 128]
[84 124]
[85 123]
[92 115]
[93 114]
[94 113]
[95 112]
[96 111]
[97 110]
[98 109]
[99 108]
[100 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
