%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 13:22:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAGACGCCGGCAUCCUCGGGGGCCUGGGGAAGUUGUGUGUUGUGCAGUCAGUAAAAUCCUCCCACUGCCUCCGG\
) } def
/len { sequence length } bind def

/coor [
[86.97324371 177.17326355]
[95.06180573 162.90766907]
[94.44997406 147.92015076]
[93.83815002 132.93263245]
[93.22631836 117.94512177]
[84.60874939 105.66759491]
[70.72146606 99.99810028]
[56.83417511 94.32859802]
[42.94688797 88.65909576]
[28.94684029 83.27405548]
[14.83985901 78.17571259]
[0.73287755 73.07737732]
[-13.37410450 67.97903442]
[-28.98251534 70.56517029]
[-38.32225037 58.96264267]
[-52.42922974 53.86430359]
[-66.53620911 48.76596451]
[-80.64319611 43.66762161]
[-94.75017548 38.56928253]
[-108.85715485 33.47094345]
[-122.96414185 28.37260437]
[-139.00369263 31.78796577]
[-149.77874756 19.42551804]
[-144.20486450 4.00268555]
[-128.01596069 1.38515830]
[-117.86579895 14.26562309]
[-103.75881958 19.36396217]
[-89.65184021 24.46230125]
[-75.54485321 29.56064224]
[-61.43787384 34.65898132]
[-47.33089066 39.75732040]
[-33.22391129 44.85565948]
[-18.62452507 41.90486145]
[-8.27576447 53.87205505]
[5.83121729 58.97039413]
[19.93819809 64.06873322]
[34.04518127 69.16707611]
[41.61820602 68.45794678]
[48.61639023 74.77180481]
[62.50367737 80.44130707]
[76.39096832 86.11080933]
[90.27825165 91.78031158]
[94.76859283 86.21585846]
[102.39562225 83.41606903]
[111.35337067 85.05464935]
[119.01767731 91.62217712]
[134.01455688 91.92815399]
[149.01144409 92.23413086]
[164.00831604 92.54010773]
[179.00518799 92.84609222]
[195.89515686 82.20005798]
[212.22102356 92.23616791]
[227.19294739 91.31874084]
[236.34703064 78.64054108]
[251.52142334 74.86276245]
[265.55123901 81.76914215]
[271.81204224 96.09870911]
[267.34765625 111.08547974]
[254.26602173 119.65315247]
[238.74391174 117.75634003]
[228.11036682 106.29065704]
[213.13844299 107.20808411]
[206.83985901 115.68811035]
[196.65060425 119.22735596]
[186.02044678 116.36199188]
[178.69921875 107.84296417]
[163.70233154 107.53698730]
[148.70545959 107.23101044]
[133.70857239 106.92503357]
[118.71170044 106.61905670]
[108.21383667 117.33329010]
[108.82566833 132.32080078]
[109.43749237 147.30831909]
[110.04932404 162.29583740]
[119.27375031 175.85467529]
[111.90097046 190.50302124]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 74]
[3 73]
[4 72]
[5 71]
[6 42]
[7 41]
[8 40]
[9 39]
[10 37]
[11 36]
[12 35]
[13 34]
[15 32]
[16 31]
[17 30]
[18 29]
[19 28]
[20 27]
[21 26]
[46 70]
[47 69]
[48 68]
[49 67]
[50 66]
[52 62]
[53 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
