%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:48:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGAAGACAGCCCUGGCCACUAAAGGAGGGGGGAUCGUGCUGGCCAAGGUUAUCGGAAAUCUGGAGAUGCAGAUACUGUGUUUCCUUGCUCUUCGUCCAUAUCAAUAAAAUUAAGUUUCUCGUCUUAAAAAGAA\
) } def
/len { sequence length } bind def

/coor [
[76.72192383 226.06486511]
[73.76169586 211.12643433]
[77.13973236 196.27688599]
[86.27077484 184.08903503]
[99.57280731 176.67445374]
[98.18878174 161.73844910]
[96.80475616 146.80242920]
[95.42073059 131.86642456]
[94.03670502 116.93041229]
[82.27843475 107.61681366]
[67.42227173 109.68915558]
[52.56612015 111.76150513]
[37.70996094 113.83384705]
[25.11108398 123.40353394]
[11.43690491 117.49878693]
[-3.41925168 119.57112885]
[-18.27540779 121.64347839]
[-33.13156509 123.71582031]
[-47.98772049 125.78816986]
[-62.84387589 127.86051178]
[-68.08090210 138.65220642]
[-77.80257416 145.47140503]
[-89.49299622 146.69621277]
[-100.19533539 142.13450623]
[-107.25964355 133.04292297]
[-120.28704071 142.02053833]
[-133.67391968 135.49057007]
[-148.60993958 136.87458801]
[-157.36407471 149.83218384]
[-172.41323853 154.08149719]
[-186.65167236 147.61611938]
[-193.35643005 133.48883057]
[-189.36172485 118.37009430]
[-176.55372620 109.39851379]
[-160.97999573 110.81018829]
[-149.99395752 121.93858337]
[-135.05795288 120.55455780]
[-123.09887695 111.67593384]
[-108.64366913 118.10691071]
[-97.90541077 103.36195374]
[-79.49636841 101.01815796]
[-64.91622162 113.00435638]
[-50.06006622 110.93200684]
[-35.20391083 108.85966492]
[-20.34775352 106.78731537]
[-5.49159670 104.71497345]
[9.36455917 102.64263153]
[20.90082550 93.22116852]
[35.63761520 98.97769165]
[50.49377441 96.90534973]
[65.34992981 94.83300018]
[80.20608521 92.76065826]
[86.10215759 88.43722534]
[92.32973480 87.01451111]
[97.71514130 88.13362885]
[102.80924225 74.02511597]
[107.90335083 59.91660309]
[112.99745941 45.80809402]
[101.53539276 34.31982803]
[96.22911835 19.04489326]
[98.08709717 3.04003096]
[106.68943787 -10.51511192]
[120.28139496 -18.94966698]
[136.13114929 -20.62775421]
[140.89802551 -34.85016251]
[145.66490173 -49.07257462]
[150.43176270 -63.29498291]
[155.19863892 -77.51739502]
[159.96551514 -91.73979950]
[164.73237610 -105.96221161]
[169.49925232 -120.18462372]
[174.26612854 -134.40702820]
[179.03298950 -148.62944031]
[178.33363342 -165.56895447]
[194.41754150 -170.93031311]
[204.02185059 -156.95913696]
[193.25540161 -143.86256409]
[188.48854065 -129.64016724]
[183.72166443 -115.41774750]
[178.95478821 -101.19534302]
[174.18791199 -86.97293091]
[169.42105103 -72.75051880]
[164.65417480 -58.52811050]
[159.88729858 -44.30570221]
[155.12043762 -30.08329201]
[150.35356140 -15.86088276]
[160.78599548 -6.64530230]
[166.92247009 5.89731073]
[167.80108643 19.87644577]
[163.25527954 33.17089081]
[153.94406128 43.75060654]
[141.25682068 49.98670959]
[127.10597229 50.90220261]
[122.01186371 65.01071167]
[116.91775513 79.11922455]
[111.82364655 93.22772980]
[117.70655060 79.42948914]
[126.46413422 67.25144196]
[137.67256165 57.28293991]
[150.78941345 50.00640106]
[165.17991638 45.77397156]
[180.14764404 44.79047775]
[194.96823120 47.10351562]
[208.92445374 52.60114670]
[221.34089661 61.01731491]
[231.61668396 71.94472504]
[239.25451660 84.85455322]
[243.88475037 99.12202454]
[245.28334045 114.05667877]
[243.38258362 128.93576050]
[238.27445984 143.03919983]
[230.20617676 155.68447876]
[219.56820679 166.25962830]
[206.87536621 174.25285339]
[192.74191284 179.27734375]
[177.85183716 181.08995056]
[162.92573547 179.60292053]
[148.68592834 174.88824463]
[135.82157898 167.17408752]
[124.95522308 156.83375549]
[116.61274719 144.36767578]
[111.19787598 130.37913513]
[108.97271729 115.54638672]
[110.35674286 130.48239136]
[111.74076843 145.41841125]
[113.12479401 160.35441589]
[114.50881958 175.29043579]
[128.94677734 180.13452148]
[140.16186523 190.43702698]
[146.21098328 204.41300964]
[146.04608154 219.64103699]
[139.69575500 233.48275757]
[128.26020813 243.54000854]
[113.72073364 248.07031250]
[98.59638214 246.28875732]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 127]
[6 126]
[7 125]
[8 124]
[9 123]
[10 52]
[11 51]
[12 50]
[13 49]
[15 47]
[16 46]
[17 45]
[18 44]
[19 43]
[20 42]
[25 39]
[27 37]
[28 36]
[55 96]
[56 95]
[57 94]
[58 93]
[64 86]
[65 85]
[66 84]
[67 83]
[68 82]
[69 81]
[70 80]
[71 79]
[72 78]
[73 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
