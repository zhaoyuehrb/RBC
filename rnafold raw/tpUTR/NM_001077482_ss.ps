%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 12:08:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCAUGCUCACUUCCUUCCCCAGCUCACCUGGAACACCCUGGAUACACUGGAGUGGGAAAAUGCUGGGACCAAAGAUUGGGCCGGGUUCAAAGGGAGCCCAGUGGUUGCAAUGAAAGACUAAAGCAAUAA\
) } def
/len { sequence length } bind def

/coor [
[160.77871704 116.85675049]
[145.98638916 114.36930084]
[131.16552734 112.05805206]
[116.31820679 109.92332458]
[104.65615082 118.52232361]
[90.31410980 116.46025085]
[81.54707336 104.92399597]
[66.69975281 102.78926849]
[57.81267929 113.39727020]
[44.93768692 118.16708374]
[31.49858093 115.94505310]
[21.01262283 107.42179871]
[16.17002869 94.92267609]
[1.37771380 92.43522644]
[-13.41460133 89.94777679]
[-28.20691681 87.46031952]
[-42.99923325 84.97286987]
[-57.89140701 90.31455994]
[-69.15938568 80.57382965]
[-84.05156708 85.91551971]
[-95.31954193 76.17478180]
[-110.11185455 73.68733215]
[-124.90417480 71.19988251]
[-139.69648743 68.71243286]
[-150.05072021 81.54420471]
[-165.36531067 87.39667511]
[-181.45359802 84.77062225]
[-193.96784973 74.47102356]
[-199.57412720 59.36362839]
[-214.42144775 57.22890472]
[-229.18229675 62.92348099]
[-240.67889404 53.45365524]
[-255.52621460 51.31893158]
[-269.17932129 59.74340820]
[-284.22912598 54.18615341]
[-289.13067627 38.91021347]
[-280.12396240 25.63398743]
[-264.11810303 24.54185677]
[-253.39149475 36.47161102]
[-238.54415894 38.60633469]
[-224.84530640 32.75906754]
[-212.28672791 42.38158417]
[-197.43940735 44.51630402]
[-189.68598938 33.21052551]
[-177.75009155 26.33340836]
[-163.94810486 25.28577042]
[-150.98724365 30.33062744]
[-141.43469238 40.53029251]
[-137.20903015 53.92011642]
[-122.41672516 56.40756607]
[-107.62440491 58.89501572]
[-92.83209229 61.38246536]
[-78.99796295 55.86285782]
[-66.67193604 65.78150940]
[-52.83780670 60.26190186]
[-40.51178360 70.18055725]
[-25.71946716 72.66800690]
[-10.92715168 75.15545654]
[3.86516380 77.64290619]
[18.65747833 80.13035583]
[29.95489502 68.28214264]
[46.24534225 65.43930817]
[61.18425369 72.90876770]
[68.83447266 87.94194794]
[83.68179321 90.07667542]
[95.34384918 81.47767639]
[109.68589020 83.53974915]
[118.45292664 95.07600403]
[133.30024719 97.21073151]
[142.33967590 95.32408142]
[148.47384644 99.57698822]
[163.26615906 102.06443787]
[176.31405640 81.79096985]
[197.38145447 70.18443298]
[221.37730408 69.98845673]
[242.53187561 81.19657135]
[255.78407288 101.06668854]
[270.51300049 98.22792053]
[285.24194336 95.38915253]
[299.97085571 92.55038452]
[314.66497803 89.53654480]
[329.32217407 86.34806061]
[343.97937012 83.15958405]
[358.63659668 79.97110748]
[373.17065430 76.26150513]
[387.56304932 72.03552246]
[401.95544434 67.80953217]
[416.34783936 63.58354187]
[430.74023438 59.35755539]
[445.13262939 55.13156509]
[454.05227661 41.79668045]
[470.05062866 40.59982681]
[480.85510254 52.45912933]
[478.17742920 68.27714539]
[464.07168579 75.91964722]
[449.35861206 69.52396393]
[434.96621704 73.74994659]
[420.57382202 77.97593689]
[406.18142700 82.20192719]
[391.78903198 86.42791748]
[377.39663696 90.65390015]
[375.37829590 93.65702057]
[371.75778198 95.79014587]
[366.98037720 96.28931427]
[361.82507324 94.62831116]
[347.16787720 97.81678772]
[332.51065063 101.00526428]
[317.85345459 104.19374847]
[311.92858887 108.73371124]
[302.80963135 107.27931213]
[288.08071899 110.11808014]
[273.35177612 112.95684814]
[258.62283325 115.79561615]
[258.30917358 123.54557037]
[256.76736450 131.15174866]
[254.03511047 138.42065430]
[250.18049622 145.16716003]
[245.30014038 151.21916199]
[239.51687622 156.42202759]
[232.97663879 160.64250183]
[225.84477234 163.77217102]
[218.30184937 165.73020935]
[210.53907776 166.46546936]
[202.75352478 165.95782471]
[195.14302063 164.21871948]
[187.90122986 161.29090881]
[181.21264648 157.24742126]
[175.24789429 152.18969727]
[170.15943909 146.24511719]
[166.07762146 139.56373596]
[163.10739136 132.31448364]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[3 69]
[4 68]
[7 65]
[8 64]
[13 60]
[14 59]
[15 58]
[16 57]
[17 56]
[19 54]
[21 52]
[22 51]
[23 50]
[24 49]
[29 43]
[30 42]
[32 40]
[33 39]
[77 113]
[78 112]
[79 111]
[80 110]
[81 108]
[82 107]
[83 106]
[84 105]
[85 101]
[86 100]
[87 99]
[88 98]
[89 97]
[90 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
