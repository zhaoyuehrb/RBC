%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 07:46:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCACCCCUUUCCCUCAGGACCUGAGUCUACCCUCAGGACCUGGGGUUGGUUGGACUCUGCCCUUCCAAAUAAACCUUGCUAAGUCCAACUCUGUGCAACCUACAUGGAGGUGGGGGCAGCCGAUGCCUGGUCCAGGCUGUGAGGGACACGUAUGGAGCAGAUAAAGAAUUCACUCAAGCAGU\
) } def
/len { sequence length } bind def

/coor [
[-109.69214630 385.00415039]
[-102.19424438 372.01602173]
[-114.92391205 379.95046997]
[-127.65357208 387.88494873]
[-140.38323975 395.81939697]
[-153.11289978 403.75387573]
[-160.73158264 417.61987305]
[-175.62525940 417.78591919]
[-188.35493469 425.72039795]
[-188.74020386 437.62872314]
[-194.77326965 447.76351929]
[-204.85058594 453.65780640]
[-216.40161133 453.94247437]
[-226.54412842 448.66253662]
[-239.53451538 456.16253662]
[-252.52490234 463.66253662]
[-258.40826416 470.67916870]
[-265.79861450 471.17736816]
[-278.91381836 478.45690918]
[-292.02902222 485.73645020]
[-305.14422607 493.01596069]
[-313.45541382 506.47830200]
[-328.33840942 505.88977051]
[-341.45361328 513.16931152]
[-354.56878662 520.44885254]
[-367.68399048 527.72839355]
[-380.79919434 535.00787354]
[-393.91439819 542.28741455]
[-398.02059937 557.54895020]
[-411.75714111 565.36450195]
[-426.97442627 561.09716797]
[-434.64428711 547.27874756]
[-430.21630859 532.10742188]
[-416.31756592 524.58410645]
[-401.19393921 529.17224121]
[-388.07873535 521.89270020]
[-374.96353149 514.61315918]
[-361.84832764 507.33364868]
[-348.73312378 500.05410767]
[-335.61791992 492.77459717]
[-328.24481201 479.83294678]
[-312.42373657 479.90075684]
[-299.30856323 472.62124634]
[-286.19335938 465.34170532]
[-273.07815552 458.06216431]
[-260.02490234 450.67214966]
[-247.03451538 443.17214966]
[-234.04412842 435.67214966]
[-230.39677429 417.74914551]
[-214.54701233 407.99789429]
[-196.28938293 412.99072266]
[-183.55972290 405.05627441]
[-176.85154724 391.75778198]
[-161.04736328 391.02420044]
[-148.31770325 383.08975220]
[-135.58802795 375.15527344]
[-122.85836792 367.22082520]
[-110.12870789 359.28634644]
[-99.16992950 349.04403687]
[-90.39419556 336.87905884]
[-81.61845398 324.71411133]
[-72.84272003 312.54913330]
[-64.06698608 300.38415527]
[-64.27692413 296.84381104]
[-62.76871490 293.02673340]
[-59.43160248 289.74792480]
[-54.52579880 287.84051514]
[-45.14518356 276.13565063]
[-35.76456451 264.43078613]
[-26.38394928 252.72590637]
[-24.46224594 237.95579529]
[-9.79436207 232.02589417]
[-0.41374558 220.32101440]
[-5.86263943 203.54086304]
[-0.11305460 186.69540405]
[14.71745205 176.57135010]
[32.81359100 177.36639404]
[41.79353333 165.35137939]
[50.77347565 153.33636475]
[59.75341797 141.32135010]
[68.73336029 129.30632019]
[77.71330261 117.29131317]
[69.44714355 109.33711243]
[64.39167023 97.62270355]
[64.16046143 83.56678772]
[69.71434784 69.23973846]
[81.11460876 57.06259537]
[97.41233826 49.41917419]
[101.90278625 35.10708618]
[106.39323425 20.79499817]
[103.14203644 5.31144905]
[114.33457184 -4.51587820]
[118.82501984 -18.82796669]
[123.31546783 -33.14005661]
[127.80590820 -47.45214462]
[132.29635620 -61.76423264]
[136.78680420 -76.07632446]
[141.27725220 -90.38841248]
[132.70472717 -103.46686554]
[134.59579468 -118.98968506]
[146.05754089 -129.62747192]
[161.67808533 -130.35737610]
[174.08187866 -120.83477783]
[177.41223145 -105.55593872]
[170.09664917 -91.73507690]
[155.58934021 -85.89796448]
[151.09889221 -71.58587646]
[146.60844421 -57.27378845]
[142.11799622 -42.96169662]
[137.62754822 -28.64960861]
[133.13710022 -14.33752060]
[128.64666748 -0.02543148]
[132.21903992 14.43442059]
[120.70532227 25.28544426]
[116.21487427 39.59753418]
[111.72442627 53.90962219]
[123.96307373 62.58230972]
[135.97808838 53.60236740]
[141.94444275 38.32706833]
[158.19496155 36.12425232]
[168.01252747 49.25998688]
[161.29765320 64.22135162]
[144.95803833 65.61738586]
[132.94302368 74.59732819]
[135.95878601 81.46428680]
[150.86848450 83.10774994]
[141.99032593 95.19820404]
[145.00608826 102.06517029]
[159.74794006 99.29427338]
[174.48979187 96.52338409]
[189.23164368 93.75249481]
[203.97349548 90.98160553]
[218.42312622 82.11341858]
[230.94477844 93.54339600]
[223.42784119 108.73983765]
[206.74438477 105.72345734]
[192.00253296 108.49434662]
[177.26068115 111.26523590]
[162.51882935 114.03612518]
[147.77697754 116.80702209]
[116.43301392 135.83963013]
[89.72832489 126.27125549]
[80.74838257 138.28627014]
[71.76843262 150.30128479]
[62.78849411 162.31629944]
[53.80854797 174.33131409]
[44.82860565 186.34634399]
[50.08033752 197.71788025]
[49.99061203 210.17095947]
[44.63803864 221.33532715]
[35.09708405 229.11215210]
[23.22298241 232.06863403]
[11.29112625 229.70162964]
[1.91050935 241.40650940]
[-0.68215883 257.01382446]
[-14.67907715 262.10653687]
[-24.05969429 273.81140137]
[-33.44031143 285.51626587]
[-42.82092667 297.22113037]
[-51.90201950 309.15988159]
[-60.67775345 321.32485962]
[-69.45349121 333.48983765]
[-78.22922516 345.65481567]
[-87.00495911 357.81976318]
[-73.53742218 351.21481323]
[-58.86225510 348.11004639]
[-43.87365341 348.69467163]
[-29.48489761 352.93304443]
[-16.57273102 360.56689453]
[-5.92391443 371.13113403]
[1.81269467 383.98199463]
[6.16568899 398.33648682]
[6.86983109 413.31994629]
[3.88221598 428.01940918]
[-2.61511397 441.53921509]
[-12.22626305 453.05554199]
[-24.36560440 461.86666870]
[-38.29346085 467.43579102]
[-53.16117859 469.42346191]
[-68.06283569 467.70867920]
[-82.09044647 462.39584351]
[-94.38927460 453.80871582]
[-104.20993042 442.47052002]
[-110.95401764 429.07211304]
[-114.21060181 414.42987061]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 58]
[3 57]
[4 56]
[5 55]
[6 54]
[8 52]
[9 51]
[14 48]
[15 47]
[16 46]
[18 45]
[19 44]
[20 43]
[21 42]
[23 40]
[24 39]
[25 38]
[26 37]
[27 36]
[28 35]
[59 164]
[60 163]
[61 162]
[62 161]
[63 160]
[67 159]
[68 158]
[69 157]
[70 156]
[72 154]
[73 153]
[77 147]
[78 146]
[79 145]
[80 144]
[81 143]
[82 142]
[88 116]
[89 115]
[90 114]
[92 112]
[93 111]
[94 110]
[95 109]
[96 108]
[97 107]
[98 106]
[117 124]
[118 123]
[128 140]
[129 139]
[130 138]
[131 137]
[132 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
