%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:40:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCUGUCUGCCUCUGUUCCCUUUGUGUGUGUUCAGGGAGCUCUCCUGGCUCUGCCACCUCAUUUGUCUUUAUUUUUUUCUCUUUUAAGAUGUAAGAUGCUAAUUAAUAAAAGCUGAAUCAUUUCAUACCA\
) } def
/len { sequence length } bind def

/coor [
[58.76162720 211.36711121]
[44.22825623 207.65480042]
[32.11204910 198.81187439]
[24.14513969 186.10249329]
[21.46648598 171.34359741]
[24.45902634 156.64514160]
[32.69494629 144.10841370]
[44.99683380 135.52566528]
[59.60747528 132.12384033]
[71.61378479 123.13226318]
[56.76646423 125.26698303]
[41.91914368 127.40170288]
[33.82842255 144.63169861]
[17.17348862 153.53817749]
[-1.35569870 150.74446106]
[-14.43565273 137.53395081]
[-29.09285545 140.72242737]
[-43.75005722 143.91090393]
[-58.40726089 147.09939575]
[-73.06446838 150.28787231]
[-87.72166443 153.47634888]
[-102.37886810 156.66482544]
[-105.87670898 171.52174377]
[-115.48099518 183.38430786]
[-129.28480530 189.89718628]
[-144.54736328 189.76727295]
[-158.23829651 183.02033997]
[-167.63925171 170.99598694]
[-170.88365173 156.08168030]
[-167.32734680 141.23866272]
[-157.67640686 129.41401672]
[-143.84707642 122.95552826]
[-128.58512878 123.14555359]
[-114.92087555 129.94635010]
[-105.56735229 142.00762939]
[-90.91014862 138.81915283]
[-76.25294495 135.63066101]
[-61.59574127 132.44218445]
[-46.93853760 129.25370789]
[-32.28133392 126.06523132]
[-17.62413216 122.87674713]
[-15.09537315 111.84395599]
[-8.56446648 102.53609467]
[1.03683174 96.34888458]
[12.31295300 94.22798920]
[23.60731888 96.52459717]
[33.24570847 102.93801880]
[39.78442001 112.55438232]
[54.63174057 110.41966248]
[69.47906494 108.28493500]
[54.49024963 108.86413574]
[40.09250259 104.65641022]
[27.77448082 96.09683990]
[18.80980110 84.07042694]
[14.12537193 69.82065582]
[14.20553780 54.82086945]
[19.04201126 40.62197495]
[28.13472366 28.69207382]
[40.54353333 20.26465225]
[54.98543167 16.21106529]
[69.96720123 16.95043564]
[83.93979645 22.40631485]
[95.45851898 32.01459122]
[103.33238983 44.78181839]
[106.74729919 59.38792801]
[105.34968567 74.32451630]
[115.70087433 63.46850586]
[126.05205536 52.61249542]
[136.40324402 41.75648499]
[146.75442505 30.90047455]
[156.97569275 19.92205620]
[167.06559753 8.82278633]
[177.15550232 -2.27648425]
[187.24540710 -13.37575436]
[197.33531189 -24.47502518]
[207.42523193 -35.57429504]
[202.67228699 -50.17926407]
[205.87429810 -65.20067596]
[216.16995239 -76.59783173]
[230.78974915 -81.30496979]
[245.80104065 -78.05588531]
[257.16586304 -67.72456360]
[261.82714844 -53.09008789]
[258.53103638 -38.08905029]
[248.16413879 -26.75665474]
[233.51512146 -22.14126396]
[218.52449036 -25.48439026]
[208.43458557 -14.38511944]
[198.34468079 -3.28584909]
[188.25477600 7.81342125]
[178.16487122 18.91269112]
[168.07496643 30.01196289]
[165.88215637 37.14685822]
[157.61044312 41.25165939]
[147.25924683 52.10766983]
[136.90806580 62.96368027]
[126.55688477 73.81969452]
[116.20569611 84.67570496]
[119.56836700 99.29392242]
[133.62261963 104.53588867]
[147.67686462 109.77784729]
[159.46916199 99.93725586]
[174.60461426 97.32701111]
[189.01188660 102.64926147]
[198.81546021 114.47234344]
[201.37825012 129.61592102]
[196.01086426 144.00642395]
[184.15711975 153.77290344]
[169.00558472 156.28820801]
[154.63197327 150.87574768]
[144.90269470 138.99143982]
[142.43489075 123.83209991]
[128.38064575 118.59013367]
[114.32640839 113.34816742]
[104.77605438 124.91497040]
[112.58306885 137.72319031]
[120.39008331 150.53140259]
[128.19709778 163.33963013]
[142.84176636 170.71972656]
[143.50248718 187.10556030]
[129.49955750 195.64077759]
[115.23799896 187.54508972]
[115.38888550 171.14663696]
[107.58186340 158.33842468]
[99.77484894 145.53019714]
[91.96783447 132.72198486]
[92.67855072 147.70513916]
[99.35739136 161.13618469]
[100.57211304 176.08691406]
[96.14905548 190.41998291]
[86.72053528 202.08630371]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 50]
[11 49]
[12 48]
[16 41]
[17 40]
[18 39]
[19 38]
[20 37]
[21 36]
[22 35]
[66 98]
[67 97]
[68 96]
[69 95]
[70 94]
[71 92]
[72 91]
[73 90]
[74 89]
[75 88]
[76 87]
[99 114]
[100 113]
[101 112]
[115 126]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
