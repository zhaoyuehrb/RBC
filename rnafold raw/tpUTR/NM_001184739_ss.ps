%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 00:15:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUGGCUGAGGGAGGGGGCUAAGAGAGGAGCAAAGCAGGAGGUCUUGGGCUAAAAAUCUUUUUUACCAAAAAUAAAUCUAAGUCUGAUUUAGUUUCAUCAA\
) } def
/len { sequence length } bind def

/coor [
[228.14007568 244.01522827]
[227.81831360 234.76312256]
[229.40846252 225.63417053]
[232.84600830 217.01959229]
[220.95732117 207.87306213]
[209.06863403 198.72651672]
[201.72331238 197.11534119]
[196.96250916 189.11528015]
[185.35829163 179.61044312]
[173.75407410 170.10559082]
[162.14984131 160.60075378]
[150.54562378 151.09590149]
[138.94140625 141.59106445]
[127.33718109 132.08622742]
[115.73296356 122.58137512]
[104.12873840 113.07653809]
[91.83417511 104.48329926]
[78.92071533 96.85161591]
[63.10360718 96.49140167]
[56.08330917 83.35501862]
[43.16984940 75.72333527]
[30.25639153 68.09165192]
[17.34293365 60.45996857]
[4.42947483 52.82828522]
[-8.48398399 45.19660187]
[-21.86769676 54.30658340]
[-37.82125092 56.70040131]
[-53.17876434 51.95375061]
[-64.91459656 41.05429459]
[-70.73947144 26.19664383]
[-69.54688263 10.34059715]
[-82.68707275 3.10627532]
[-99.47843170 0.76391947]
[-101.87592316 -16.01965523]
[-86.41194916 -22.96961021]
[-75.45275116 -10.03391457]
[-62.31255722 -2.79959202]
[-51.34215546 -11.43547153]
[-37.85776901 -15.21926498]
[-23.90963364 -13.54100990]
[-11.63179398 -6.62386799]
[-2.91561747 4.50489330]
[0.88155574 18.16634369]
[-0.85230088 32.28314209]
[12.06115818 39.91482544]
[24.97461700 47.54650879]
[37.88807678 55.17819214]
[50.80153275 62.80987549]
[63.71499252 70.44155884]
[78.60844421 70.25590515]
[86.55239868 83.93816376]
[99.46585846 91.56983948]
[102.09855652 90.91452026]
[105.04516602 91.13243103]
[108.00630951 92.34072876]
[110.64485168 94.55288696]
[112.62159729 97.66802979]
[113.63358307 101.47231293]
[125.23780060 110.97715759]
[136.84202576 120.48200226]
[148.44624329 129.98684692]
[160.05046082 139.49168396]
[171.65469360 148.99652100]
[183.25891113 158.50137329]
[194.86312866 168.00621033]
[206.46736145 177.51106262]
[218.21517944 186.83782959]
[230.10386658 195.98437500]
[241.99253845 205.13090515]
[261.51962280 194.67245483]
[283.60787964 194.84803772]
[302.85708618 205.55491638]
[314.58969116 224.12284851]
[315.98751831 245.97987366]
[330.07418823 251.13404846]
[344.16088867 256.28823853]
[358.24755859 261.44241333]
[372.33422852 266.59658813]
[386.42089844 271.75076294]
[399.88555908 263.79861450]
[415.30310059 266.41281128]
[425.39379883 278.35900879]
[425.39312744 293.99661255]
[415.30145264 305.94195557]
[399.88369751 308.55490112]
[386.41970825 300.60162354]
[381.26672363 285.83743286]
[367.18005371 280.68325806]
[353.09338379 275.52908325]
[339.00668335 270.37490845]
[324.92001343 265.22073364]
[310.83334351 260.06652832]
[305.51361084 267.51516724]
[298.76879883 273.71585083]
[290.88507080 278.40063477]
[282.19790649 281.36599731]
[273.07785034 282.48168945]
[263.91467285 281.69641113]
[255.10076904 279.04019165]
[247.01428223 274.62322998]
[240.00289917 268.63140869]
[234.36898804 261.31832886]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 69]
[5 68]
[6 67]
[8 66]
[9 65]
[10 64]
[11 63]
[12 62]
[13 61]
[14 60]
[15 59]
[16 58]
[17 52]
[18 51]
[20 49]
[21 48]
[22 47]
[23 46]
[24 45]
[25 44]
[31 37]
[32 36]
[74 92]
[75 91]
[76 90]
[77 89]
[78 88]
[79 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
