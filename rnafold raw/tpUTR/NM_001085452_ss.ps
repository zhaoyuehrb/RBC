%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 14:16:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGGUCAGUCACAAAUUCUUUUUUAGCCUUCCCUGGAGAAAAAGAAGUCCCCAAGAAAAAAUUCACUCUAUGUAGAGAAAAAAUAUUUUCUCUCAUGUUAGUACAUGCAGAACAUUUAAUAUACCACAAUAUAUAUGGUUUUUUAUUCAUAA\
) } def
/len { sequence length } bind def

/coor [
[147.19006348 259.53759766]
[148.36669922 241.26724243]
[158.65490723 226.02117920]
[151.60083008 212.78335571]
[144.54675293 199.54553223]
[137.49267578 186.30770874]
[124.29286194 190.90972900]
[110.55693817 193.50546265]
[96.58803558 194.03764343]
[82.69443512 192.49453735]
[69.18273926 188.91017151]
[56.35115051 183.36366272]
[44.48284149 175.97740173]
[33.83973312 166.91442871]
[24.65670204 156.37471008]
[17.13641167 144.59088135]
[11.44482517 131.82298279]
[-3.03077865 135.75450134]
[-17.50638199 139.68603516]
[-31.98198700 143.61755371]
[-46.45759201 147.54908752]
[-60.93319321 151.48060608]
[-75.40879822 155.41213989]
[-89.88439941 159.34365845]
[-104.36000824 163.27519226]
[-111.46489716 174.08718872]
[-123.64782715 177.04087830]
[-134.21534729 171.07701111]
[-148.76812744 174.71243286]
[-156.68588257 188.39031982]
[-171.97763062 192.38258362]
[-185.57104492 184.32066345]
[-189.40139771 168.98756409]
[-181.19621277 155.48013306]
[-165.82347107 151.81210327]
[-152.40356445 160.15965271]
[-137.85076904 156.52421570]
[-125.94640350 143.66528320]
[-108.29153442 148.79957581]
[-93.81592560 144.86805725]
[-79.34032440 140.93652344]
[-64.86472321 137.00500488]
[-50.38911438 133.07348633]
[-35.91351318 129.14195251]
[-21.43790817 125.21042633]
[-6.96230412 121.27890778]
[7.51329994 117.34738159]
[6.15760040 106.95163727]
[5.96672058 96.46961212]
[6.94302988 86.03141022]
[9.07440948 75.76658630]
[12.33440495 65.80256653]
[16.68255043 56.26301575]
[22.06487274 47.26635361]
[28.41456795 38.92425156]
[35.65281677 31.34025002]
[26.30047035 19.61277771]
[16.94812202 7.88530588]
[1.49321783 2.40096831]
[-1.21817279 -13.77247906]
[11.60319710 -23.99718094]
[26.76780128 -17.75483894]
[28.67559433 -1.46704125]
[38.02794266 10.26043129]
[47.38028717 21.98790359]
[55.48585892 16.81731606]
[64.09860229 12.48872375]
[73.13106537 9.05176926]
[82.49095154 6.54701710]
[92.08206940 5.00547743]
[101.80529785 4.44823408]
[111.55962372 4.88617229]
[121.24320221 6.31981230]
[130.75439453 8.73925114]
[139.99285889 12.12421322]
[144.51155090 -2.17898297]
[149.03024292 -16.48217964]
[153.54893494 -30.78537560]
[158.06762695 -45.08856964]
[162.58631897 -59.39176559]
[167.10502625 -73.69496155]
[171.62371826 -87.99816132]
[167.55696106 -103.88505554]
[179.46961975 -115.15539551]
[195.10696411 -110.21521759]
[198.38264465 -94.14655304]
[185.92691040 -83.47946930]
[181.40821838 -69.17626953]
[176.88952637 -54.87307358]
[172.37083435 -40.56987762]
[167.85214233 -26.26668167]
[163.33345032 -11.96348572]
[158.81474304 2.33971000]
[154.29605103 16.64290619]
[166.21186829 25.75408363]
[178.83067322 17.64447212]
[191.44946289 9.53485966]
[204.06826782 1.42524695]
[216.68707275 -6.68436527]
[223.71656799 -21.50051117]
[240.08204651 -22.55098152]
[248.94808960 -8.75514126]
[241.19409180 5.69503164]
[224.79669189 5.93443775]
[212.17788696 14.04405022]
[199.55908203 22.15366173]
[186.94027710 30.26327515]
[174.32147217 38.37288666]
[180.28942871 46.65526199]
[185.34062195 55.50790024]
[189.42147827 64.82995605]
[192.48941040 74.51564026]
[194.51332092 84.45544434]
[195.47389221 94.53736115]
[195.36376953 104.64814758]
[194.18762207 114.67458344]
[191.96202087 124.50478363]
[188.71520996 134.02940369]
[184.48681641 143.14285278]
[179.32727051 151.74452209]
[173.29733276 159.73980713]
[166.46725464 167.04122925]
[158.91604614 173.56935120]
[150.73049927 179.25363159]
[157.78457642 192.49145508]
[164.83865356 205.72927856]
[171.89273071 218.96710205]
[183.95776367 217.83110046]
[195.65904236 220.84683228]
[205.61459351 227.63377380]
[212.65695190 237.36746216]
[215.96992493 248.87962341]
[215.18324280 260.79833984]
[210.41374207 271.71148682]
[202.24871826 280.33419800]
[208.47994995 293.97866821]
[214.71116638 307.62313843]
[220.94239807 321.26763916]
[227.17361450 334.91210938]
[242.40780640 337.86154175]
[252.97424316 349.22509766]
[254.80993652 364.63320923]
[247.20901489 378.16116333]
[233.09419250 384.60717773]
[217.89289856 381.49264526]
[207.45034790 370.01516724]
[205.78190613 354.58804321]
[213.52914429 341.14334106]
[207.29791260 327.49884033]
[201.06668091 313.85437012]
[194.83546448 300.20989990]
[188.60423279 286.56539917]
[170.56953430 285.71383667]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 127]
[4 126]
[5 125]
[6 124]
[17 47]
[18 46]
[19 45]
[20 44]
[21 43]
[22 42]
[23 41]
[24 40]
[25 39]
[28 37]
[29 36]
[56 65]
[57 64]
[58 63]
[75 94]
[76 93]
[77 92]
[78 91]
[79 90]
[80 89]
[81 88]
[82 87]
[95 108]
[96 107]
[97 106]
[98 105]
[99 104]
[135 152]
[136 151]
[137 150]
[138 149]
[139 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
