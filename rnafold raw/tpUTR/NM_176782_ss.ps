%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 04:40:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACCCAGGGGUGGUGGGCCAGCGGACCUCAGGGCGGAGGCUUCCCACGGGGAGGCAGGAAGAAAUAAAGGUCUUUGGCUUUCUCCAGGCA\
) } def
/len { sequence length } bind def

/coor [
[70.24414825 361.83978271]
[55.95936584 355.47744751]
[49.15270615 341.39898682]
[53.03806686 326.25177002]
[65.78089905 317.18786621]
[66.80453491 302.22283936]
[59.95380783 288.99722290]
[68.61483002 275.75723267]
[69.63846588 260.79220581]
[70.66210175 245.82717896]
[71.68573761 230.86215210]
[64.57204437 224.95700073]
[61.03676224 216.26333618]
[62.03972244 206.79161072]
[67.47434235 198.80003357]
[76.16194153 194.25628662]
[78.71059418 179.47439575]
[81.25924683 164.69248962]
[83.80790710 149.91059875]
[86.35655975 135.12870789]
[88.90522003 120.34681702]
[91.45387268 105.56492615]
[89.58712769 97.53421783]
[94.35015869 90.32551575]
[97.40200043 75.63925171]
[100.45384216 60.95299149]
[103.50568390 46.26673126]
[106.55751801 31.58047104]
[109.60935974 16.89420891]
[96.67700958 7.18569469]
[89.25434113 -7.11607933]
[88.76262665 -23.16404915]
[95.24893951 -37.78786087]
[107.38676453 -48.12019348]
[122.74693298 -52.15892410]
[109.98881531 -62.51808548]
[104.17118073 -77.78844452]
[106.77265167 -93.82667542]
[117.00088501 -106.33096313]
[132.03065491 -111.99480438]
[134.07315063 -126.85508728]
[136.11564636 -141.71537781]
[138.15814209 -156.57566833]
[140.20065308 -171.43595886]
[142.24314880 -186.29624939]
[144.28564453 -201.15653992]
[140.45237732 -217.67144775]
[155.26074219 -225.92669678]
[167.29272461 -213.98233032]
[159.14593506 -199.11402893]
[157.10343933 -184.25375366]
[155.06092834 -169.39346313]
[153.01843262 -154.53317261]
[150.97593689 -139.67288208]
[148.93344116 -124.81259155]
[146.89093018 -109.95230103]
[158.28800964 -102.22636414]
[165.23866272 -90.26351166]
[166.31678772 -76.40328217]
[161.25131226 -63.38540649]
[150.99133301 -53.80826187]
[137.52882385 -49.61027145]
[149.28814697 -42.04582596]
[157.26918030 -30.51212883]
[160.22236633 -16.75617409]
[157.66282654 -2.87724328]
[149.94956970 8.99347019]
[138.23559570 17.02010918]
[124.29562378 19.94604874]
[121.24378204 34.63231277]
[118.19194031 49.31857300]
[115.14009857 64.00483704]
[112.08826447 78.69109344]
[109.03642273 93.37735748]
[106.23576355 108.11357880]
[103.68711090 122.89547729]
[101.13845062 137.67736816]
[98.58979797 152.45925903]
[96.04114532 167.24114990]
[93.49248505 182.02304077]
[90.94383240 196.80493164]
[99.81776428 216.15060425]
[86.65077209 231.88578796]
[85.62713623 246.85081482]
[84.60350037 261.81585693]
[83.57986450 276.78088379]
[90.35736847 291.07690430]
[81.76956177 303.24649048]
[80.74592590 318.21151733]
[92.13587189 328.92614746]
[93.92250061 344.46133423]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 89]
[6 88]
[8 86]
[9 85]
[10 84]
[11 83]
[16 81]
[17 80]
[18 79]
[19 78]
[20 77]
[21 76]
[22 75]
[24 74]
[25 73]
[26 72]
[27 71]
[28 70]
[29 69]
[35 62]
[40 56]
[41 55]
[42 54]
[43 53]
[44 52]
[45 51]
[46 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
