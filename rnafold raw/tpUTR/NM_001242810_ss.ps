%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 23:52:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUCAGUUUUUAAAUUAACCAUCAACUUAAAAUGAAUGGUAAAAGAUCAAAAUGCAUAUGGUAAAAUGAUUGCUUUCAGAUAACAAGAUACCAAUCUUAUAUUGUAUUUUGACUGCUCUAAAAUGAUUAAACAGUUUUCACUUACAUUUUUAA\
) } def
/len { sequence length } bind def

/coor [
[170.77943420 368.95474243]
[156.50633240 364.34188843]
[142.77745056 358.29888916]
[129.73567200 350.88861084]
[117.51672363 342.18820190]
[106.24776459 332.28817749]
[96.04606628 321.29156494]
[87.01779938 309.31283569]
[79.25691223 296.47659302]
[72.84418488 282.91647339]
[67.84633636 268.77359009]
[64.31539154 254.19508362]
[62.28808594 239.33271790]
[61.78553009 224.34114075]
[62.81294250 209.37637329]
[65.35963440 194.59413147]
[69.39910889 180.14828491]
[74.88932037 166.18914795]
[81.77806091 152.85353088]
[67.71178436 158.06311035]
[53.64550018 163.27268982]
[39.57921982 168.48226929]
[25.51293564 173.69183350]
[11.50017071 179.04370117]
[-2.45764017 184.53729248]
[-6.21652126 199.59220886]
[-18.12818146 209.53665161]
[-33.61234283 210.54678345]
[-46.71503067 202.23419189]
[-52.39799118 187.79522705]
[-48.47601318 172.78198242]
[-36.45718002 162.96733093]
[-20.96297073 162.12522888]
[-7.95122957 170.57948303]
[6.00658083 165.08589172]
[11.10887718 159.67791748]
[20.30335808 159.62556458]
[34.36964035 154.41598511]
[48.43592072 149.20640564]
[62.50220490 143.99682617]
[76.56848907 138.78724670]
[63.85578537 130.82563782]
[65.38351440 115.90363312]
[79.44579315 110.68327332]
[90.34087372 120.99478912]
[91.85839844 106.07174683]
[89.46569824 98.32088470]
[93.56089020 90.86272430]
[95.38054657 75.97350311]
[97.20021057 61.08428574]
[99.01986694 46.19506454]
[100.83952332 31.30584526]
[102.65917969 16.41662598]
[104.47883606 1.52740741]
[106.29849243 -13.36181164]
[108.11815643 -28.25102997]
[109.93781281 -43.14025116]
[100.88220978 -50.95063400]
[96.78926849 -62.05884552]
[98.57569122 -73.63989258]
[105.67845154 -82.80826569]
[116.22480011 -87.33686066]
[118.64636230 -102.14010620]
[121.06791687 -116.94335175]
[123.48947144 -131.74659729]
[121.59430695 -136.73669434]
[121.82028198 -141.47050476]
[123.70317841 -145.17092896]
[126.53440857 -147.36447144]
[129.85104370 -161.99320984]
[133.16767883 -176.62194824]
[136.48432922 -191.25068665]
[139.80096436 -205.87940979]
[129.74804688 -217.55181885]
[128.51028442 -232.72816467]
[136.35348511 -245.57138062]
[150.09089661 -251.26535034]
[153.40753174 -265.89407349]
[142.52153015 -276.82562256]
[139.29602051 -291.91201782]
[144.76025391 -306.33929443]
[157.17060852 -315.50369263]
[172.56698608 -316.48095703]
[186.03645325 -308.95922852]
[193.28097534 -295.33862305]
[191.98883057 -279.96545410]
[182.57234192 -267.74526978]
[168.03627014 -262.57745361]
[164.71963501 -247.94871521]
[174.65817261 -236.88691711]
[176.19552612 -221.91691589]
[168.53366089 -208.75831604]
[154.42970276 -202.56277466]
[151.11306763 -187.93403625]
[147.79641724 -173.30531311]
[144.47978210 -158.67657471]
[141.16314697 -144.04783630]
[138.29272461 -129.32504272]
[135.87115479 -114.52179718]
[133.44960022 -99.71855164]
[131.02804565 -84.91530609]
[142.59216309 -70.77933502]
[140.16903687 -52.35675049]
[124.82703400 -41.32059097]
[123.00737000 -26.43137360]
[121.18771362 -11.54215431]
[119.36805725 3.34706497]
[117.54840088 18.23628426]
[115.72874451 33.12550354]
[113.90908813 48.01472092]
[112.08942413 62.90394211]
[110.26976776 77.79315948]
[108.45011139 92.68238068]
[106.78143311 107.58927155]
[105.26390839 122.51231384]
[116.43951416 112.50701904]
[128.57630920 103.69237518]
[141.54800415 96.16009521]
[155.21960449 89.98858643]
[169.44882202 85.24206543]
[184.08757019 81.96993256]
[198.98352051 80.20623016]
[213.98165894 79.96932983]
[228.92587280 81.26168060]
[243.66067505 84.06983948]
[258.03271484 88.36458588]
[271.89239502 94.10121918]
[285.09552002 101.22003937]
[297.50466919 109.64696503]
[308.99069214 119.29430389]
[319.43408203 130.06164551]
[328.72613525 141.83695984]
[336.77014160 154.49766541]
[343.48242188 167.91203308]
[348.79312134 181.94046021]
[352.64694214 196.43693542]
[355.00378418 211.25062561]
[355.83914185 226.22735596]
[355.14428711 241.21124268]
[352.92651367 256.04638672]
[349.20883179 270.57836914]
[344.02996826 284.65600586]
[337.44378662 298.13275146]
[329.51889038 310.86834717]
[320.33767700 322.73028564]
[309.99575806 333.59512329]
[298.60073853 343.34976196]
[286.27117920 351.89273071]
[273.13540649 359.13507080]
[259.33013916 365.00146484]
[244.99902344 369.43081665]
[230.29121399 372.37707520]
[215.35977173 373.80953979]
[200.36007690 373.71331787]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 41]
[20 40]
[21 39]
[22 38]
[23 37]
[24 35]
[25 34]
[45 115]
[46 114]
[48 113]
[49 112]
[50 111]
[51 110]
[52 109]
[53 108]
[54 107]
[55 106]
[56 105]
[57 104]
[62 101]
[63 100]
[64 99]
[65 98]
[69 97]
[70 96]
[71 95]
[72 94]
[73 93]
[77 89]
[78 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
