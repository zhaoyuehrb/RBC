%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 14:48:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUGCACCCUCACGGCCACCCGACUACUUUGCCUCCUUGGAUUUCCUCCAGGGAGAAUGUGACCUAAUUUAUGACAAAUACGUAGAGCUCAGGUAUCACUUCUAGUUUUACUUUAAAAAAUAAAAAAAUAGAGACAGAGUCUCACCAUGUUUCC\
) } def
/len { sequence length } bind def

/coor [
[149.01203918 139.15852356]
[136.99816895 148.13999939]
[122.04167938 149.28164673]
[108.80379486 142.22769165]
[101.40991974 129.17558289]
[91.01905060 139.99362183]
[80.62818909 150.81166077]
[87.16840363 165.47015381]
[87.59355164 181.47740173]
[81.86824036 196.39059448]
[70.89340973 207.94517517]
[56.36471176 214.39868164]
[40.51057816 214.79353333]
[25.75040817 209.09893799]
[15.57949448 220.12402344]
[5.40857935 231.14910889]
[2.33526158 247.25769043]
[-13.23871708 252.39414978]
[-25.29218292 241.27453613]
[-21.42556381 225.33773804]
[-5.61650562 220.97819519]
[4.55440950 209.95310974]
[14.72532463 198.92802429]
[8.34714890 186.39491272]
[6.63575792 172.40660095]
[9.81781197 158.64720154]
[17.52957153 146.78041077]
[28.85834312 138.24818420]
[42.45046997 134.09565735]
[56.67306137 134.84309387]
[69.81015015 140.42079163]
[80.20101929 129.60275269]
[90.59188080 118.78472137]
[86.41861725 104.37694550]
[71.85449219 100.78721619]
[57.29036331 97.19747925]
[42.72623825 93.60774231]
[28.16210938 90.01800537]
[13.59798241 86.42827606]
[-0.96614456 82.83853912]
[-15.53027153 79.24880219]
[-30.09439850 75.65907288]
[-44.51235580 82.69483948]
[-58.94016647 75.67929840]
[-62.31005096 59.99416733]
[-52.03691864 47.67173386]
[-36.00144196 48.16471481]
[-26.50466347 61.09494019]
[-11.94053650 64.68467712]
[2.62359047 68.27441406]
[17.18771744 71.86414337]
[31.75184441 75.45388031]
[46.31597137 79.04361725]
[60.88010025 82.63335419]
[75.44422913 86.22308350]
[90.00835419 89.81282043]
[104.88002777 87.85492706]
[118.01879883 80.61803436]
[131.15757751 73.38114929]
[144.29635620 66.14425659]
[157.43511963 58.90736389]
[170.57389832 51.67047119]
[156.22007751 56.02566147]
[141.22186279 56.25678253]
[126.74065399 52.34593582]
[113.89783478 44.59596634]
[103.68790436 33.60700226]
[96.90148163 20.22999001]
[94.06408691 5.50079632]
[95.39542389 -9.44000435]
[100.79241943 -23.43544960]
[109.83713531 -35.40178299]
[121.82918549 -44.41237259]
[135.83995056 -49.76947784]
[150.78446960 -51.05825424]
[165.50552368 -48.17891312]
[178.86315918 -41.35441208]
[189.82299805 -31.11322021]
[197.53634644 -18.24837875]
[201.40592957 -3.75609255]
[201.13208008 11.24140739]
[196.73602295 25.58276939]
[188.56137085 38.15377045]
[199.16796875 27.54717064]
[209.77456665 16.94056892]
[220.38116455 6.33396673]
[230.98777771 -4.27263498]
[241.59437561 -14.87923717]
[252.20097351 -25.48583794]
[262.80758667 -36.09244156]
[266.69317627 -44.42409897]
[273.73617554 -46.80314255]
[284.55419922 -57.19400787]
[295.37225342 -67.58486938]
[294.14285278 -83.17405701]
[303.26367188 -95.87621307]
[318.42810059 -99.69377899]
[332.47598267 -92.82420349]
[338.77435303 -78.51110840]
[334.34927368 -63.51268387]
[321.29016113 -54.91073227]
[305.76312256 -56.76683426]
[294.94506836 -46.37596893]
[284.12704468 -35.98510361]
[273.41418457 -25.48583794]
[262.80758667 -14.87923717]
[252.20097351 -4.27263498]
[241.59437561 6.33396673]
[230.98777771 16.94056892]
[220.38116455 27.54717064]
[209.77456665 38.15377045]
[199.16796875 48.76037216]
[213.56120300 44.53728104]
[227.95445251 40.31418610]
[242.34770203 36.09109497]
[253.60964966 26.18308830]
[267.62570190 20.83984566]
[282.62533569 20.73633194]
[296.71380615 25.88561821]
[308.11141968 35.63724899]
[315.37844849 48.75938416]
[317.59689331 63.59442902]
[314.48651123 78.26840210]
[306.44024658 90.92768097]
[294.47445679 99.97313690]
[280.10070801 104.26213837]
[265.13470459 103.25289154]
[251.46694946 97.07288361]
[240.82440186 86.50340271]
[226.71240234 81.41896820]
[212.60040283 76.33454132]
[198.48840332 71.25010681]
[208.43524170 82.47776794]
[218.38208008 93.70542908]
[228.32891846 104.93309021]
[238.27575684 116.16075134]
[253.30479431 124.00704956]
[249.92558289 140.62081909]
[233.02563477 141.97282410]
[227.04809570 126.10758972]
[217.10125732 114.87992859]
[207.15441895 103.65226746]
[197.20758057 92.42460632]
[187.26074219 81.19694519]
[182.28097534 76.14422607]
[179.12898254 70.51254272]
[177.81079102 64.80924988]
[164.67201233 72.04614258]
[151.53324890 79.28302765]
[138.39447021 86.51992035]
[125.25569153 93.75681305]
[112.11692047 100.99370575]
[126.31126404 96.14390564]
[140.89358521 99.65898132]
[151.31927490 110.44345856]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 33]
[6 32]
[7 31]
[14 23]
[15 22]
[16 21]
[34 56]
[35 55]
[36 54]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[57 152]
[58 151]
[59 150]
[60 149]
[61 148]
[62 147]
[83 112]
[84 111]
[85 110]
[86 109]
[87 108]
[88 107]
[89 106]
[90 105]
[92 104]
[93 103]
[94 102]
[132 144]
[133 143]
[134 142]
[135 141]
[136 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
