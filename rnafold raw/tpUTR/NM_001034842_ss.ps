%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 22:58:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUACGACGCAUAGCUGAAGACUGUCAAAUUCCCCUAAUGGUGUAUAACCAGGCAUUUAUAUAUUUUGAUCAGUAUGCUGCAAUAUUAGAAGACACUGUUAGAAAUG\
) } def
/len { sequence length } bind def

/coor [
[-26.06888962 282.28512573]
[-39.66179276 284.85501099]
[-53.44059372 283.77792358]
[-66.44481659 279.13571167]
[-77.76974487 271.25845337]
[-89.33866119 280.80624390]
[-100.90757751 290.35400391]
[-112.47650146 299.90179443]
[-108.35772705 314.56317139]
[-110.56478119 329.63128662]
[-118.71527863 342.49557495]
[-131.39707947 350.92715454]
[-146.41300964 353.46524048]
[-161.16145325 349.67004395]
[-173.08715820 340.19918823]
[-180.12391663 326.69348145]
[-181.05258179 311.49291992]
[-175.71224976 297.23104858]
[-165.02815247 286.37884521]
[-150.85139465 280.81652832]
[-135.63818359 281.50781250]
[-122.02427673 288.33288574]
[-110.45536041 278.78509521]
[-98.88644409 269.23730469]
[-87.31752014 259.68954468]
[-93.52499390 244.76399231]
[-94.87404633 228.63696289]
[-91.22427368 212.85163879]
[-82.91416168 198.92192078]
[-70.72969055 188.18731689]
[-55.83004379 181.68408203]
[-39.63729477 180.04518127]
[-23.70071030 183.43876648]
[-9.54850197 191.55091858]
[1.44014132 181.34063721]
[12.42878437 171.13037109]
[23.41742706 160.92008972]
[34.40607071 150.70982361]
[45.39471436 140.49954224]
[56.38335800 130.28926086]
[67.37200165 120.07898712]
[78.36064148 109.86871338]
[89.34928894 99.65843964]
[99.39714813 88.52109528]
[108.42633057 76.54303741]
[117.45550537 64.56497955]
[111.57610321 50.44478607]
[113.54082489 35.37704849]
[122.72274780 23.39544868]
[136.57644653 17.65689087]
[151.34298706 19.61003304]
[160.37216187 7.63197327]
[169.40135193 -4.34608698]
[178.43052673 -16.32414627]
[187.45970154 -28.30220604]
[178.76974487 -40.68524933]
[174.33360291 -55.14816284]
[174.58590698 -70.27401733]
[179.50192261 -84.58094025]
[188.60002136 -96.66728210]
[200.98889160 -105.34894562]
[215.45477295 -109.77539062]
[230.58045959 -109.51295471]
[244.88407898 -104.58735657]
[256.96432495 -95.48115540]
[265.63766479 -83.08647919]
[270.05441284 -68.61763000]
[269.78186035 -53.49212646]
[264.84667969 -39.19180298]
[255.73237610 -27.11766815]
[243.33189392 -18.45261574]
[228.86009216 -14.04556179]
[213.73477173 -14.32826519]
[199.43775940 -19.27302742]
[190.40858459 -7.29496765]
[181.37940979 4.68309259]
[172.35021973 16.66115189]
[163.32104492 28.63921165]
[169.26428223 42.29730606]
[167.56176758 57.19554138]
[158.57122803 69.32141113]
[144.62677002 75.35871124]
[129.43356323 73.59415436]
[120.40438843 85.57221222]
[111.37521362 97.55027771]
[126.37515259 97.59098053]
[137.14306641 108.03377533]
[137.64349365 123.02542114]
[127.59592438 134.16304016]
[112.63208771 135.20393372]
[101.13927460 125.56467438]
[99.55956268 110.64707947]
[88.57091522 120.85736084]
[77.58227539 131.06762695]
[66.59363556 141.27790833]
[55.60498810 151.48818970]
[44.61634445 161.69845581]
[33.62770462 171.90873718]
[22.63905907 182.11900330]
[11.65041637 192.32928467]
[0.66177350 202.53956604]
[6.96923399 214.95274353]
[9.80458164 228.57164001]
[8.97665787 242.44499207]
[4.54993248 255.60560608]
[-3.16046762 267.13775635]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 25]
[6 24]
[7 23]
[8 22]
[34 101]
[35 100]
[36 99]
[37 98]
[38 97]
[39 96]
[40 95]
[41 94]
[42 93]
[43 92]
[44 85]
[45 84]
[46 83]
[51 78]
[52 77]
[53 76]
[54 75]
[55 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
