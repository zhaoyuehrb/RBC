%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 00:17:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAUCCUAGAACCAAGCUUCAGAGCCUAGCCACCUCCCACCCCACUCCAGCCCUGUCCCCUGAAAAACUGAUCAAAAAUAAACUAGUUUCCAGUGGA\
) } def
/len { sequence length } bind def

/coor [
[141.46528625 158.20747375]
[120.56011963 168.44531250]
[97.47377014 171.42196655]
[74.65542603 166.82164001]
[54.52582169 155.13238525]
[39.22046280 137.59425354]
[25.70593071 144.10250854]
[12.19139767 150.61076355]
[-1.32313561 157.11901855]
[11.89924240 164.20201111]
[16.52185249 178.47195435]
[9.96407509 191.96253967]
[-4.11314487 197.14248657]
[-17.85106087 191.12005615]
[-23.58034515 177.25732422]
[-18.10359955 163.29438782]
[-32.61302185 167.09921265]
[-47.12244415 170.90402222]
[-58.39328003 182.81622314]
[-74.28001404 178.74880981]
[-78.43972778 162.88598633]
[-66.59327698 151.54608154]
[-50.92726517 156.39460754]
[-36.41783905 152.58978271]
[-21.90841866 148.78495789]
[-7.83139181 143.60449219]
[5.68314123 137.09623718]
[19.19767380 130.58798218]
[32.71220779 124.07971954]
[30.12356758 114.99213409]
[28.75645638 105.64246368]
[28.63477325 96.19416046]
[29.76064682 86.81238556]
[32.11439133 77.66114807]
[35.65486526 68.90042114]
[40.32017517 60.68335724]
[46.02876282 53.15359497]
[52.68083954 46.44276810]
[60.16011429 40.66819000]
[68.33583832 35.93080902]
[77.06509399 32.31344223]
[86.19528198 29.87932014]
[95.56679535 28.67099571]
[105.01580811 28.70959663]
[114.37713623 29.99444389]
[123.48712921 32.50307846]
[132.18653870 36.19164276]
[140.32328796 40.99566269]
[147.75514221 46.83115005]
[154.35217285 53.59609985]
[159.99905396 61.17224884]
[164.59706116 69.42715454]
[168.06584167 78.21651459]
[170.34475708 87.38668060]
[171.39393616 96.77733612]
[171.19506836 106.22433472]
[185.91845703 109.09171295]
[200.64184570 111.95909119]
[215.66658020 107.00249481]
[226.68009949 117.03004456]
[241.40348816 119.89742279]
[256.12686157 122.76480103]
[267.35745239 116.17637634]
[279.65579224 118.99452209]
[286.44750977 129.14582825]
[301.07144165 132.48364258]
[315.69534302 135.82145691]
[330.31927490 139.15927124]
[344.94317627 142.49708557]
[359.56710815 145.83489990]
[368.66793823 133.62446594]
[381.95156860 126.17698669]
[397.11654663 124.78278351]
[411.53540039 129.68341064]
[422.71002197 140.02980042]
[428.70431519 154.02937317]
[428.47976685 169.25663757]
[422.07522583 183.07336426]
[410.60037231 193.08572388]
[396.04324341 197.55900574]
[380.92599487 195.71820068]
[367.86776733 187.88223267]
[359.13095093 175.40873718]
[356.22927856 160.45881653]
[341.60537720 157.12100220]
[326.98144531 153.78318787]
[312.35754395 150.44537354]
[297.73361206 147.10755920]
[283.10971069 143.76974487]
[266.74972534 149.89306641]
[253.25949097 137.48818970]
[238.53610229 134.62080383]
[223.81271362 131.75343323]
[209.84109497 136.91511536]
[197.77445984 126.68247986]
[183.05107117 123.81510162]
[168.32768250 120.94772339]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 29]
[7 28]
[8 27]
[9 26]
[16 25]
[17 24]
[18 23]
[56 97]
[57 96]
[58 95]
[60 93]
[61 92]
[62 91]
[65 89]
[66 88]
[67 87]
[68 86]
[69 85]
[70 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
