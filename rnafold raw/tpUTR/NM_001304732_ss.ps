%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 22:58:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGCUGACUUCCUUUCCAUGUACAUUUCAAACUGAAUUACAGUGAAUAAAAAUUUGUAUUUUAACUUGU\
) } def
/len { sequence length } bind def

/coor [
[57.78818512 169.01020813]
[51.80245590 182.81808472]
[43.23770905 195.19270325]
[32.42314911 205.65844727]
[19.77445984 213.81300354]
[5.77782440 219.34295654]
[-9.02876568 222.03575134]
[-24.07618332 221.78787231]
[-38.78604507 218.60885620]
[-52.59294891 212.62089539]
[-64.96618652 204.05413818]
[-75.43016815 193.23788452]
[-83.58267975 180.58787537]
[-89.11037445 166.59034729]
[-91.80076599 151.78332520]
[-91.55045319 136.73594666]
[-88.36905670 122.02660370]
[-82.37886047 108.22066498]
[-73.81010437 95.84881592]
[-62.99216080 85.38658905]
[-50.34083176 77.23612213]
[-36.34240723 71.71069336]
[-21.53494644 69.02269745]
[-6.48761034 69.27544403]
[8.22122383 72.45922089]
[22.02618599 78.45165253]
[34.39664841 87.02240753]
[44.85712814 97.84204865]
[53.00555038 110.49469757]
[66.95707703 104.98516846]
[80.90860748 99.47564697]
[86.77098846 86.22503662]
[100.24771881 80.90301514]
[113.58187103 86.57282257]
[127.53340149 81.06330109]
[141.48492432 75.55377197]
[155.43646240 70.04425049]
[165.43009949 57.77894974]
[180.10968018 60.30067825]
[194.06120300 54.79115295]
[208.01274109 49.28163147]
[221.96426392 43.77210617]
[235.91580200 38.26258469]
[237.49021912 23.03826714]
[245.96903992 10.29589558]
[259.40390015 2.96357155]
[274.70758057 2.72620940]
[288.36337280 9.63835335]
[297.23330688 22.11164284]
[299.27911377 37.27980804]
[294.03070068 51.65731430]
[282.69409180 61.94031906]
[267.87438965 65.76586151]
[252.97703552 62.25485611]
[241.42532349 52.21411133]
[227.47378540 57.72363663]
[213.52226257 63.23315811]
[199.57073975 68.74268341]
[185.61920166 74.25220490]
[176.62347412 86.12343597]
[160.94598389 83.99578094]
[146.99444580 89.50530243]
[133.04292297 95.01483154]
[119.09139252 100.52435303]
[113.22901154 113.77496338]
[99.75228119 119.09698486]
[86.41812897 113.42717743]
[72.46659851 118.93669891]
[58.51507187 124.44622803]
[61.21026230 139.25238037]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[29 69]
[30 68]
[31 67]
[34 64]
[35 63]
[36 62]
[37 61]
[39 59]
[40 58]
[41 57]
[42 56]
[43 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
