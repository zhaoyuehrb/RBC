%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 13:04:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACGCCGACCACAGGGCCUUGAAUCCUUUUUUGUUUUCAACAGUCUUGCUGAAUUAAGCAGAAAGGGCCUUGAAUCCUGGCCUGGAAUUUGGGCAGAUAUAGCAUUAAUAAAACUGUGCAUCUCAAACUUUUAUCACAUACUCUAAUA\
) } def
/len { sequence length } bind def

/coor [
[139.01242065 117.75995636]
[124.48368073 114.02960968]
[109.95493317 110.29926300]
[96.43778229 113.87393188]
[86.31472015 104.22948456]
[71.78597260 100.49913788]
[57.25722885 96.76879120]
[42.72848129 93.03844452]
[31.31160164 104.95522308]
[15.53859901 109.48120117]
[-0.27828509 105.47707367]
[-11.86400890 94.12233734]
[-16.13617134 78.56991577]
[-30.73985481 75.14465332]
[-45.34354019 71.71939087]
[-59.94722366 68.29412842]
[-74.55090332 64.86886597]
[-89.15458679 61.44360352]
[-103.75827026 58.01833725]
[-118.36195374 54.59307480]
[-110.07612610 67.09687805]
[-110.56072235 82.08904266]
[-119.63674164 94.03164673]
[-133.95161438 98.51322937]
[-148.21757507 93.87833405]
[-157.16496277 81.83905029]
[-157.48869324 66.84254456]
[-149.06918335 54.42835617]
[-135.01527405 49.18208313]
[-148.84321594 43.36935043]
[-162.67117310 37.55661774]
[-176.49911499 31.74388313]
[-190.32705688 25.93114853]
[-204.15501404 20.11841583]
[-217.98295593 14.30568123]
[-231.81091309 8.49294758]
[-245.63885498 2.68021393]
[-257.88385010 11.84576416]
[-272.97286987 13.63975525]
[-286.84173584 7.67982626]
[-295.80532837 -4.34140348]
[-297.53662109 -19.13559914]
[-311.36456299 -24.94833183]
[-325.19250488 -30.76106644]
[-339.02047729 -36.57379913]
[-355.96502686 -37.13781357]
[-360.11376953 -53.57630920]
[-345.46618652 -62.11355591]
[-333.20773315 -50.40174866]
[-319.37979126 -44.58901215]
[-305.55184937 -38.77627945]
[-291.72387695 -32.96354675]
[-279.94250488 -42.07754135]
[-265.08218384 -44.08411407]
[-251.12043762 -38.34512711]
[-241.84495544 -26.30924797]
[-239.82612610 -11.14773369]
[-225.99816895 -5.33499956]
[-212.17022705 0.47773433]
[-198.34228516 6.29046822]
[-184.51432800 12.10320187]
[-170.68638611 17.91593552]
[-156.85842896 23.72867012]
[-143.03048706 29.54140282]
[-129.20254517 35.35413742]
[-114.93669128 39.98939133]
[-100.33300781 43.41465378]
[-85.72932434 46.83991623]
[-71.12564087 50.26518250]
[-56.52196121 53.69044495]
[-41.91827393 57.11570740]
[-27.31459236 60.54096985]
[-12.71090889 63.96623230]
[-4.01117659 53.39286423]
[8.46128273 47.58432007]
[22.28548431 47.73123169]
[34.75067139 53.86203384]
[43.38786316 64.82619476]
[46.45882797 78.50969696]
[60.98757553 82.24004364]
[75.51631927 85.97039032]
[90.04506683 89.70073700]
[103.56221771 86.12606812]
[113.68527985 95.77051544]
[128.21401978 99.50086212]
[142.74276733 103.23120880]
[148.64088440 100.85550690]
[154.43843079 101.26255035]
[158.99114990 103.91221619]
[173.78109741 101.41069031]
[188.57104492 98.90915680]
[203.36097717 96.40762329]
[218.15092468 93.90609741]
[232.94085693 91.40456390]
[242.10121155 78.80591583]
[257.13595581 76.47969818]
[269.09036255 85.29032898]
[277.09231567 80.74617004]
[284.21597290 82.89466858]
[299.05505371 80.70342255]
[313.89416504 78.51217651]
[328.73324585 76.32093048]
[343.57232666 74.12968445]
[348.56881714 59.66270828]
[359.72409058 49.18327713]
[374.47473145 45.09948730]
[389.43115234 48.34976959]
[401.15646362 58.18722534]
[406.95629883 72.35128784]
[405.49786377 87.58715057]
[397.11633301 100.39373016]
[383.73770142 107.82817078]
[368.43627930 108.18208313]
[354.72824097 101.37414551]
[345.76358032 88.96877289]
[330.92449951 91.16001892]
[316.08538818 93.35126495]
[301.24630737 95.54251099]
[286.40722656 97.73375702]
[271.59191895 100.08026886]
[263.19995117 112.33223724]
[248.23648071 115.07983398]
[235.44239807 106.19450378]
[220.65245056 108.69603729]
[205.86250305 111.19756317]
[191.07257080 113.69909668]
[176.28262329 116.20063019]
[161.49269104 118.70215607]
[175.51489258 124.02924347]
[187.72770691 132.73826599]
[197.33262634 144.25979614]
[203.70162964 157.84049988]
[206.41828918 172.59245300]
[205.30497742 187.55107117]
[200.43449402 201.73834229]
[192.12528992 214.22660828]
[180.92065430 224.19937134]
[167.55317688 231.00456238]
[152.89688110 234.19723511]
[137.91006470 233.56861877]
[123.57260132 229.15985107]
[110.82195282 221.25915527]
[100.49179077 210.38314819]
[93.25754547 197.24290466]
[89.59221649 182.69761658]
[89.73546600 167.69830322]
[93.67792511 153.22567749]
[101.16181183 140.22599792]
[111.69781494 129.54927063]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 86]
[2 85]
[3 84]
[5 82]
[6 81]
[7 80]
[8 79]
[13 73]
[14 72]
[15 71]
[16 70]
[17 69]
[18 68]
[19 67]
[20 66]
[29 65]
[30 64]
[31 63]
[32 62]
[33 61]
[34 60]
[35 59]
[36 58]
[37 57]
[42 52]
[43 51]
[44 50]
[45 49]
[89 128]
[90 127]
[91 126]
[92 125]
[93 124]
[94 123]
[97 120]
[99 119]
[100 118]
[101 117]
[102 116]
[103 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
