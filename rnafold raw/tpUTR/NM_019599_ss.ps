%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:00:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAGAAGUUGGAUCAGUUCAAAGAACCCAUGAUUCAAUGAUUUACCCAUGCCUGCCACACUUCCCUCAGCCAGACAAAGCAGCCUGUUCAUAAAUAUACAACAUGUCCCCUUCAGGCCUGUUUAUCCAGCCUGAG\
) } def
/len { sequence length } bind def

/coor [
[22.31888199 118.57457733]
[17.21619606 117.65544891]
[4.16886759 125.05593872]
[-8.87846184 132.45642090]
[-10.96362591 145.81623840]
[-20.24773407 155.37652588]
[-33.15706635 157.78073120]
[-44.90583420 152.36676025]
[-58.11942291 159.46614075]
[-71.33300781 166.56552124]
[-84.54660034 173.66488647]
[-97.76018524 180.76426697]
[-110.97377014 187.86363220]
[-124.18735504 194.96301270]
[-137.40093994 202.06237793]
[-150.61453247 209.16175842]
[-163.57615662 216.71134949]
[-176.27047729 224.70222473]
[-188.96479797 232.69311523]
[-201.65911865 240.68399048]
[-211.84255981 254.23884583]
[-227.68673706 248.20574951]
[-226.27551270 231.31062317]
[-209.65000916 227.98966980]
[-196.95568848 219.99879456]
[-184.26135254 212.00790405]
[-171.56703186 204.01702881]
[-170.44297791 200.58724976]
[-167.55068970 197.55593872]
[-163.10795593 195.77186584]
[-157.71391296 195.94816589]
[-144.50032043 188.84880066]
[-131.28672791 181.74942017]
[-118.07314301 174.65005493]
[-104.85955811 167.55067444]
[-91.64597321 160.45129395]
[-78.43238068 153.35192871]
[-65.21879578 146.25254822]
[-52.00521088 139.15318298]
[-47.88554764 122.88871765]
[-33.00569153 114.43280792]
[-16.27894783 119.40909576]
[-3.23161864 112.00860596]
[9.81571102 104.60812378]
[-5.17414188 104.05646515]
[-19.48592758 99.56505585]
[-32.10310364 91.45291138]
[-42.12948990 80.29622650]
[-48.85292816 66.88745117]
[-51.79586029 52.17897415]
[-50.74925232 37.21553421]
[-45.78744888 23.05994987]
[-37.26287460 10.71767998]
[-25.78102112 1.06537271]
[-12.15742588 -5.21138096]
[2.64024758 -7.66675282]
[17.56094170 -6.12634182]
[31.54486275 -0.69956023]
[43.59875488 8.22813511]
[52.86644363 20.02262306]
[58.68965912 33.84615707]
[60.65478897 48.71687698]
[58.62225723 63.57853317]
[52.73642349 77.37552643]
[43.41535187 89.12786865]
[31.32332802 97.99961090]
[46.27504349 96.79701233]
[61.22675705 95.59440613]
[76.17846680 94.39179993]
[91.13018036 93.18920135]
[106.06712341 91.81524658]
[116.01880646 79.83184814]
[131.17202759 78.47742462]
[142.53503418 88.03867340]
[157.45524597 86.49355316]
[166.22605896 76.95839691]
[178.74464417 76.02231598]
[188.20909119 83.64362335]
[203.16081238 82.44102478]
[218.11251831 81.23841858]
[233.06423950 80.03581238]
[248.01594543 78.83321381]
[262.96765137 77.63060760]
[277.90460205 76.25666046]
[292.82482910 74.71154022]
[307.74502563 73.16641998]
[322.66522217 71.62129974]
[326.34814453 57.81629181]
[334.51681519 46.13042068]
[346.16760254 37.96379089]
[359.88104248 34.28628540]
[373.99505615 35.52240753]
[386.80621338 41.50239563]
[396.77536011 51.48518372]
[402.71258545 64.25019836]
[417.66430664 63.04759216]
[432.61599731 61.84498978]
[447.56771851 60.64238739]
[459.01898193 49.40636063]
[474.92526245 51.49670792]
[483.08465576 65.30989838]
[477.23794556 80.24962616]
[461.87023926 84.85541534]
[448.77032471 75.59410095]
[433.81860352 76.79669952]
[418.86688232 77.99930573]
[403.91519165 79.20191193]
[399.29800415 94.31903839]
[389.22253418 106.54798126]
[375.20016479 114.00810242]
[359.35202026 115.53759766]
[344.08828735 110.87432098]
[331.74154663 100.70016479]
[324.21035767 86.54151154]
[309.29013062 88.08662415]
[294.36993408 89.63174438]
[279.44973755 91.17686462]
[273.06445312 95.02862549]
[264.17025757 92.58232117]
[249.21855164 93.78492737]
[234.26684570 94.98752594]
[219.31512451 96.19013214]
[204.36341858 97.39273834]
[189.41169739 98.59533691]
[175.57917786 109.33369446]
[159.00036621 101.41376495]
[144.08015442 102.95888519]
[134.91757202 114.64574432]
[119.80837250 116.42525482]
[107.61224365 106.73545837]
[100.48543549 110.66262054]
[92.33278656 108.14091492]
[77.38107300 109.34351349]
[62.42935944 110.54611969]
[47.47764587 111.74872589]
[32.52593231 112.95132446]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 44]
[3 43]
[4 42]
[8 39]
[9 38]
[10 37]
[11 36]
[12 35]
[13 34]
[14 33]
[15 32]
[16 31]
[17 27]
[18 26]
[19 25]
[20 24]
[66 136]
[67 135]
[68 134]
[69 133]
[70 132]
[71 130]
[74 127]
[75 126]
[78 124]
[79 123]
[80 122]
[81 121]
[82 120]
[83 119]
[84 117]
[85 116]
[86 115]
[87 114]
[95 107]
[96 106]
[97 105]
[98 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
