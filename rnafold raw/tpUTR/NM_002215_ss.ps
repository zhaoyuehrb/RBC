%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 21:12:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCUCUGGCCAGCACGCCUGUCCUCCCCCGGGGCCAAGGCAGAGGAGGAGGACGACAUCCUGACCUGCUGCUGAGGCUGUACCUCCUUGACUAAGCUGGUUCCUUGUGUCAAAGCACCUCAUGCCUUCCAUUAAAGAGAGGCCGUGUCCACCCUGA\
) } def
/len { sequence length } bind def

/coor [
[135.79081726 236.42568970]
[131.66899109 222.00311279]
[127.54718018 207.58055115]
[123.28218079 193.19966125]
[118.87442780 178.86189270]
[114.46667480 164.52412415]
[110.05892181 150.18634033]
[95.16554260 148.40107727]
[87.49401093 161.29089355]
[79.82247925 174.18072510]
[83.95265961 189.43579102]
[76.01382446 203.10145569]
[60.71593857 207.07012939]
[47.13497162 198.98724365]
[43.32826614 183.64825439]
[51.55427551 170.15350342]
[66.93264771 166.50918579]
[74.60418701 153.61936951]
[82.27571869 140.72953796]
[65.46318054 116.38729858]
[69.16165161 91.32288361]
[54.20906830 92.51463318]
[39.25648499 93.70639038]
[24.30390167 94.89813995]
[9.35131931 96.08989716]
[-5.60126305 97.28164673]
[-20.55384636 98.47339630]
[-33.69566345 107.28266907]
[-46.99743271 100.58100891]
[-61.95001602 101.77275848]
[-70.09777069 114.84640503]
[-84.21636963 120.54891205]
[-98.81293488 116.88772583]
[-108.34069061 105.47019958]
[-123.29327393 106.66194916]
[-136.48472595 116.40451050]
[-151.40759277 109.60451508]
[-152.71051025 93.25720215]
[-139.05314636 84.17929840]
[-124.48502350 91.70936584]
[-109.53244019 90.51761627]
[-101.93348694 77.73504639]
[-88.10112762 71.80802155]
[-73.25749969 75.20217133]
[-63.14176559 86.82017517]
[-48.18918610 85.62842560]
[-36.11687469 76.90440369]
[-21.74559784 83.52081299]
[-6.79301548 82.32906342]
[8.15956688 81.13731384]
[23.11215019 79.94555664]
[38.06473160 78.75380707]
[53.01731491 77.56204987]
[67.96989441 76.37030029]
[78.98979187 66.19376373]
[81.36576843 51.38313675]
[83.74173737 36.57250595]
[86.11770630 21.76187515]
[88.49367523 6.95124578]
[76.40611267 -4.84306479]
[73.73669434 -21.35108948]
[81.33879852 -36.05923080]
[96.05200195 -43.28269958]
[98.13303375 -58.13764191]
[100.21407318 -72.99258423]
[102.29510498 -87.84752655]
[96.54720306 -102.58768463]
[105.97540283 -114.11843872]
[108.05643463 -128.97337341]
[110.13746643 -143.82832336]
[94.35892487 -157.16693115]
[89.77134705 -177.17123413]
[98.04932404 -195.80101013]
[115.73019409 -205.66978455]
[116.32654572 -220.65792847]
[116.92288971 -235.64607239]
[117.51924133 -250.63421631]
[107.73520660 -263.34848022]
[111.71511841 -278.89001465]
[126.40591431 -285.33673096]
[140.53808594 -277.74322510]
[143.27062988 -261.93460083]
[132.50738525 -250.03787231]
[131.91102600 -235.04972839]
[131.31468201 -220.06158447]
[130.71833801 -205.07344055]
[139.66691589 -201.06257629]
[146.99977112 -194.50700378]
[152.01425171 -186.01078796]
[154.22254944 -176.36506653]
[153.39912415 -166.47434998]
[149.60360718 -157.27174377]
[143.17689514 -149.63092041]
[134.71054077 -144.28312683]
[124.99240875 -141.74728394]
[122.91137695 -126.89234161]
[120.83034515 -112.03739929]
[126.72709656 -98.35977173]
[117.15004730 -85.76649475]
[115.06901550 -70.91155243]
[112.98797607 -56.05661011]
[110.90694427 -41.20166779]
[121.35309601 -32.83953094]
[126.33028412 -20.30205536]
[124.43362427 -6.83727360]
[116.05418396 4.00906706]
[103.30430603 9.32721615]
[100.92833710 24.13784599]
[98.55236816 38.94847488]
[96.17639923 53.75910568]
[93.80042267 68.56974030]
[109.95987701 66.30975342]
[126.60145569 72.54644012]
[139.23883057 87.04158020]
[143.82858276 107.21809387]
[158.80191040 108.11231995]
[173.77522278 109.00654602]
[186.68150330 99.47723389]
[202.14085388 103.76535797]
[208.29418945 118.58142853]
[200.42120361 132.55982971]
[184.56137085 134.97752380]
[172.88099670 123.97986603]
[157.90768433 123.08563995]
[142.93435669 122.19141388]
[138.29994202 128.08821106]
[151.01155090 136.05155945]
[163.72315979 144.01490784]
[178.04039001 148.48892212]
[182.48640442 162.81488037]
[173.21783447 174.60867310]
[158.24691772 173.67515564]
[150.51522827 160.82057190]
[139.77317810 150.35118103]
[129.03111267 139.88179016]
[124.39669037 145.77859497]
[128.80444336 160.11636353]
[133.21220398 174.45413208]
[137.61994934 188.79190063]
[143.16206360 196.12315369]
[141.96975708 203.45872498]
[146.09156799 217.88130188]
[150.21339417 232.30387878]
[165.33067322 233.65740967]
[178.93643188 240.38404846]
[189.19061279 251.57405090]
[194.70640564 265.71408081]
[194.73783875 280.89181519]
[189.28068542 295.05456543]
[179.07296753 306.28698730]
[165.49517822 313.06991577]
[150.38363647 314.48608398]
[135.78202820 310.34393311]
[123.66510773 301.20364380]
[115.67159271 288.30139160]
[112.88253784 273.38208008]
[115.67514038 258.46343994]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 143]
[2 142]
[3 141]
[4 139]
[5 138]
[6 137]
[7 136]
[8 19]
[9 18]
[10 17]
[21 54]
[22 53]
[23 52]
[24 51]
[25 50]
[26 49]
[27 48]
[29 46]
[30 45]
[34 41]
[35 40]
[55 111]
[56 110]
[57 109]
[58 108]
[59 107]
[63 102]
[64 101]
[65 100]
[66 99]
[68 97]
[69 96]
[70 95]
[74 86]
[75 85]
[76 84]
[77 83]
[115 125]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
