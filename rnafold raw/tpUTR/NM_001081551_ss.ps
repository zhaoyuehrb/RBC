%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 11:51:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACCCUGAAACAUGACGAGAGUGUUGUAAAGUGUGGAAAUGCCUUCUUAAAGUUUAUAAAAGUAAAAUCAAAUUACAUUUUUUUUUCAA\
) } def
/len { sequence length } bind def

/coor [
[61.87344742 307.64331055]
[57.08870697 322.04714966]
[47.42078781 333.74740601]
[34.17719650 341.16168213]
[19.14901352 343.28729248]
[4.36868334 339.83676147]
[-8.16487789 331.27670288]
[-16.75660896 318.76486206]
[-20.24454880 303.99331665]
[-18.15698242 288.95977783]
[-10.77623463 275.69747925]
[0.89950770 265.99996948]
[15.29119682 261.17880249]
[30.45247459 261.88598633]
[36.49038315 248.15484619]
[42.52828979 234.42373657]
[38.81888580 215.57797241]
[54.79793167 203.52743530]
[59.87413025 189.41247559]
[64.95032501 175.29751587]
[70.02651978 161.18254089]
[75.10271454 147.06758118]
[80.17891693 132.95262146]
[85.25511169 118.83764648]
[90.33130646 104.72268677]
[91.36617279 89.75842285]
[88.28127289 75.07907104]
[85.19637299 60.39971924]
[82.11148071 45.72036743]
[79.02658081 31.04101562]
[75.94168091 16.36166191]
[65.53163147 4.44774103]
[70.48604584 -9.59871864]
[55.72016144 -18.78457260]
[52.13129425 -35.45780182]
[61.43763733 -49.34872818]
[57.84790421 -63.91285706]
[54.25816727 -78.47698212]
[50.66843414 -93.04111481]
[37.73820877 -102.53788757]
[37.24522400 -118.57336426]
[49.56765747 -128.84649658]
[65.25279236 -125.47661591]
[72.26833344 -111.04880524]
[65.23255920 -96.63084412]
[68.82229614 -82.06671906]
[72.41203308 -67.50259399]
[76.00177002 -52.93846512]
[87.95523071 -47.80463409]
[94.81404114 -36.52040863]
[93.83905029 -23.15482903]
[85.16540527 -12.68361759]
[95.35479736 -1.81966233]
[90.62103271 13.27676296]
[93.70593262 27.95611572]
[96.79083252 42.63546753]
[99.87573242 57.31482315]
[102.96062469 71.99417114]
[106.04552460 86.67353058]
[113.26028442 73.52259064]
[124.43379974 63.51495743]
[138.29713440 57.78714371]
[153.27592468 56.98963165]
[167.66908264 61.21298218]
[179.84208679 69.97757721]
[188.41249084 82.28807068]
[192.40699768 96.74642181]
[191.37199402 111.71067047]
[185.42498779 125.48140717]
[175.24137878 136.49476624]
[161.97766113 143.50001526]
[147.14010620 145.70161438]
[132.41374207 142.84951782]
[119.47097778 135.26765442]
[109.78164673 123.81703186]
[104.44627380 109.79888153]
[99.37007141 123.91384888]
[94.29387665 138.02880859]
[89.21768188 152.14378357]
[84.14148712 166.25874329]
[79.06529236 180.37370300]
[73.98908997 194.48867798]
[68.91289520 208.60363770]
[74.21705627 218.40745544]
[73.14734650 229.27937317]
[66.31764221 237.51895142]
[56.25941086 240.46163940]
[50.22150421 254.19276428]
[44.18359375 267.92388916]
[54.95291901 278.61901855]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 89]
[15 88]
[16 87]
[18 83]
[19 82]
[20 81]
[21 80]
[22 79]
[23 78]
[24 77]
[25 76]
[26 59]
[27 58]
[28 57]
[29 56]
[30 55]
[31 54]
[33 52]
[36 48]
[37 47]
[38 46]
[39 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
