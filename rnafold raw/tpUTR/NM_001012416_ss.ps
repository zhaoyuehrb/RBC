%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 17:58:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCUGACUUUGGACCUCAGGUGAGUCCAGCAUAUCCACACCACCCAAGAAGUGACCAGUGCUGCAUUUCAGUUCUGGCUGUCCCACAGCUCCAGGAGUUGUGUCCCCUGAAUUUUGCA\
) } def
/len { sequence length } bind def

/coor [
[75.73065948 235.88082886]
[68.97290039 249.27235413]
[67.87322235 258.46530151]
[61.86192703 262.92037964]
[54.75879669 276.13195801]
[47.65566635 289.34353638]
[52.44602585 304.40432739]
[45.10962296 318.40264893]
[29.99900818 323.03350830]
[16.07904434 315.54949951]
[11.60820007 300.39077759]
[19.23894691 286.55072021]
[34.44409943 282.24038696]
[41.54722595 269.02883911]
[48.65035629 255.81726074]
[55.58138275 242.51458740]
[62.33913803 229.12307739]
[67.48976898 215.03509521]
[70.96304321 200.44276428]
[74.43630981 185.85041809]
[77.90958405 171.25808716]
[81.38285828 156.66574097]
[76.80285645 142.49278259]
[87.52532196 130.85923767]
[90.99859619 116.26689911]
[86.59797668 130.60687256]
[76.58794403 141.77821350]
[62.81502914 147.72018433]
[47.81993484 147.33663940]
[34.36879730 140.69834900]
[24.94295120 129.02986145]
[21.28117943 114.48368073]
[24.05896950 99.74313354]
[32.76390076 87.52739716]
[45.79018021 80.08992004]
[60.73484421 78.80268097]
[74.84105682 83.90315247]
[85.50498199 94.44786835]
[75.53573608 83.24009705]
[65.56649780 72.03232574]
[50.02699280 70.95452118]
[40.07642365 59.44622803]
[41.19971085 44.63832855]
[25.40973091 43.96591949]
[14.78168201 32.26890564]
[15.62099457 16.48691940]
[27.42971992 5.98313284]
[43.20195007 6.98925543]
[53.58030319 18.90837288]
[52.40748215 34.66908646]
[67.24536896 35.27962112]
[77.51525879 46.50387955]
[76.77426910 62.06307983]
[86.74351501 73.27085114]
[96.71275330 84.47862244]
[95.11140442 74.69795227]
[93.85869598 64.85828400]
[99.55393982 50.98153305]
[105.24918365 37.10478592]
[110.94443512 23.22803497]
[109.02621460 7.52354383]
[121.01644897 -1.31294560]
[126.71170044 -15.18969536]
[132.40693665 -29.06644440]
[138.10218811 -42.94319534]
[133.26623535 -58.24002838]
[142.32986450 -71.47747803]
[158.34024048 -72.50090790]
[169.01557922 -60.52522659]
[166.16665649 -44.73715591]
[151.97894287 -37.24794769]
[146.28369141 -23.37119865]
[140.58843994 -9.49444962]
[134.89320374 4.38229990]
[137.21878052 19.09423256]
[124.82118225 28.92328072]
[119.12593842 42.80002975]
[113.43069458 56.67678070]
[107.73544312 70.55352783]
[111.20095825 77.20486450]
[119.25598145 64.55113983]
[134.24192810 65.20024872]
[141.17266846 78.50305939]
[133.11737061 91.15660858]
[118.13198853 90.50752258]
[121.59749603 97.15885925]
[136.23370361 100.44240570]
[150.86990356 103.72595978]
[165.50608826 107.00950623]
[180.14228821 110.29305267]
[194.77848816 113.57660675]
[209.41468811 116.86015320]
[224.05088806 120.14370728]
[240.82943726 117.71125031]
[247.81158447 133.16070557]
[234.89875793 144.14683533]
[220.76733398 134.77990723]
[206.13113403 131.49635315]
[191.49493408 128.21279907]
[176.85874939 124.92925262]
[162.22254944 121.64570618]
[147.58634949 118.36215210]
[132.95014954 115.07860565]
[118.31394958 111.79505157]
[105.59093475 119.74017334]
[102.11766052 134.33251953]
[106.44923401 149.54922485]
[95.97519684 160.13900757]
[92.50192261 174.73135376]
[89.02864838 189.32369995]
[85.55538177 203.91603088]
[82.08210754 218.50837708]
[94.51467896 210.11604309]
[109.50556183 209.59324646]
[122.49256134 217.09910583]
[129.52333069 230.34931946]
[128.45816040 245.31146240]
[119.62123108 257.43203735]
[105.70189667 263.02239990]
[90.93625641 260.38122559]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[4 15]
[5 14]
[6 13]
[18 112]
[19 111]
[20 110]
[21 109]
[22 108]
[24 106]
[25 105]
[38 55]
[39 54]
[40 53]
[43 50]
[57 79]
[58 78]
[59 77]
[60 76]
[62 74]
[63 73]
[64 72]
[65 71]
[86 104]
[87 103]
[88 102]
[89 101]
[90 100]
[91 99]
[92 98]
[93 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
