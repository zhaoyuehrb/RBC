%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 22:48:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGGCGCUGGGGGCUGGACCUGCUGACAUAGUGGAUGGACAGAUGGACCAAAAGAUGGGUGGUUGAAUGAUUUCCCACUCAGGGCUGGGGCCAAGAGGAAAAACAGGGAAAAAAAGAAAAAAAAAAGAAAAAGGAAAAGGAA\
) } def
/len { sequence length } bind def

/coor [
[126.54387665 175.51075745]
[120.50267792 189.24041748]
[114.46147156 202.97009277]
[108.42027283 216.69976807]
[109.94433594 232.44740295]
[97.73643494 240.98063660]
[103.69738007 255.61767578]
[97.48554993 270.14999390]
[82.78631592 275.95587158]
[68.32047272 269.59075928]
[62.67034149 254.83094788]
[69.18804932 240.43321228]
[84.00675964 234.93943787]
[82.05059052 220.17385864]
[94.69060516 210.65856934]
[100.73180389 196.92889404]
[106.77300262 183.19921875]
[112.81420135 169.46955872]
[111.65411377 164.00140381]
[113.18466187 158.15310669]
[108.05435944 144.05770874]
[102.92405701 129.96232605]
[97.79375458 115.86693573]
[85.05572510 107.94591522]
[70.14488220 109.57891846]
[55.23403549 111.21192169]
[40.68827438 122.44631958]
[24.90510941 114.84857178]
[10.03343678 116.80646515]
[-4.83823586 118.76435852]
[-15.70606232 130.56562805]
[-31.69776917 129.28311157]
[-40.54588699 115.90064240]
[-35.46289825 100.68411255]
[-20.34803581 95.30634308]
[-6.79612875 103.89268494]
[8.07554436 101.93479156]
[22.94721794 99.97690582]
[30.59760094 90.54574585]
[43.02563095 88.83104706]
[53.60103226 96.30107880]
[68.51187897 94.66807556]
[83.42272186 93.03507233]
[87.68322754 90.99266052]
[91.86908722 90.45740509]
[90.23608398 75.54655457]
[88.60308075 60.63571167]
[79.40938568 47.75989914]
[85.71511841 34.26593781]
[84.08211517 19.35509300]
[69.53213501 15.04536915]
[57.77235413 5.51906157]
[50.57517242 -7.74797487]
[49.00996017 -22.71920395]
[53.28425598 -37.11000824]
[62.71687317 -48.73632050]
[75.84624481 -55.84608841]
[74.21324158 -70.75693512]
[72.58023834 -85.66777802]
[70.94724274 -100.57862091]
[69.31423950 -115.48947144]
[67.68123627 -130.40031433]
[66.04823303 -145.31115723]
[62.38615036 -150.96260071]
[62.21269608 -156.73867798]
[64.68385315 -160.90603638]
[63.70280838 -175.87391663]
[62.72175980 -190.84179688]
[53.16594696 -204.16915894]
[60.17544174 -218.99478149]
[76.53947449 -220.06733704]
[85.42414093 -206.28347778]
[77.68964386 -191.82284546]
[78.67069244 -176.85496521]
[79.65174103 -161.88708496]
[80.95907593 -146.94416809]
[82.59207916 -132.03330994]
[84.22508240 -117.12247467]
[85.85808563 -102.21162415]
[87.49108887 -87.30078125]
[89.12409210 -72.38993835]
[90.75709534 -57.47909164]
[105.11408234 -53.37957001]
[116.83950806 -44.07043839]
[124.12722778 -30.94588280]
[125.83947754 -15.99075699]
[121.68441772 -1.48044753]
[112.26525879 10.36533165]
[98.99296570 17.72208977]
[100.62596893 32.63293457]
[109.70285797 44.44222641]
[103.51392365 59.00270844]
[105.14692688 73.91355133]
[106.77993011 88.82440186]
[112.66891479 75.02874756]
[124.46781158 65.76667786]
[139.26725769 63.32201385]
[153.41801453 68.29756927]
[163.43078613 79.46646881]
[166.83663940 94.07469177]
[162.79574585 108.52014923]
[152.30451965 119.24088287]
[137.94987488 123.59338379]
[123.27137756 120.50440216]
[111.88914490 110.73663330]
[117.01944733 124.83202362]
[122.14974976 138.92741394]
[127.28005219 153.02279663]
[130.80015564 138.44168091]
[136.64244080 124.62619019]
[144.65164185 111.94342804]
[154.61495972 100.73038483]
[166.26765442 91.28502655]
[179.30007935 83.85832214]
[193.36593628 78.64762115]
[208.09149170 75.79137421]
[223.08544922 75.36547852]
[237.94938660 77.38125610]
[252.28834534 81.78514099]
[265.72131348 88.46011353]
[277.89135742 97.22880554]
[288.47509766 107.85822296]
[297.19131470 120.06591797]
[303.80834961 133.52751160]
[308.15045166 147.88529968]
[310.10220337 162.75778198]
[309.61175537 177.74977112]
[306.69210815 192.46287537]
[301.42086792 206.50617981]
[293.93811035 219.50650024]
[284.44265747 231.11839294]
[273.18682861 241.03334045]
[260.46969604 248.98785400]
[246.62916565 254.77058411]
[232.03302002 258.22784424]
[217.06912231 259.26782227]
[202.13505554 257.86285400]
[187.62768555 254.05024719]
[173.93246460 247.93135071]
[161.41331482 239.66873169]
[150.40287781 229.48194885]
[141.19374084 217.64169312]
[134.03060913 204.46255493]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[3 16]
[4 15]
[6 13]
[20 108]
[21 107]
[22 106]
[23 105]
[24 43]
[25 42]
[26 41]
[28 38]
[29 37]
[30 36]
[45 94]
[46 93]
[47 92]
[49 90]
[50 89]
[57 82]
[58 81]
[59 80]
[60 79]
[61 78]
[62 77]
[63 76]
[66 75]
[67 74]
[68 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
