%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 10:11:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGCACCCCAGCCCUGCCCUUGCUUCCUUCAAUAAACAUCACAGGACCUGGGACUGCACAGGACCUGGGGCUGCUG\
) } def
/len { sequence length } bind def

/coor [
[89.24988556 293.02923584]
[72.96440887 291.10171509]
[66.74043274 275.92956543]
[76.98065186 263.12060547]
[78.74371338 248.22456360]
[80.50677490 233.32853699]
[82.26983643 218.43251038]
[84.03289795 203.53648376]
[85.50315094 188.60871887]
[86.68003845 173.65495300]
[87.85692596 158.70118713]
[89.03381348 143.74743652]
[90.21070099 128.79367065]
[91.38758087 113.83991241]
[83.72744751 99.04035950]
[93.07398987 85.24373627]
[93.66288757 70.25530243]
[94.25178528 55.26686859]
[94.84068298 40.27843094]
[92.31727600 35.98801804]
[91.56279755 31.56905556]
[92.36750793 27.65456772]
[94.31915283 24.72383118]
[96.88039398 23.04494667]
[99.80675507 8.33316803]
[102.73310852 -6.37861061]
[96.34772491 -23.51711273]
[108.12554169 -36.37108612]
[110.47205353 -51.18640900]
[112.81857300 -66.00173187]
[115.16509247 -80.81706238]
[101.43954468 -87.10291290]
[89.91962433 -96.85965729]
[81.46018219 -109.36327362]
[76.68898010 -123.68592072]
[75.96005249 -138.76475525]
[79.32750702 -153.48083496]
[86.54144287 -166.74211121]
[97.06655121 -177.56452942]
[110.12178802 -185.14498901]
[124.73837280 -188.92095947]
[139.83166504 -188.61225891]
[154.28161621 -184.24177551]
[167.01597595 -176.13383484]
[177.08976746 -164.89010620]
[183.75541687 -151.34492493]
[186.51832581 -136.50346375]
[185.17344666 -121.46705627]
[179.82057190 -107.35147858]
[170.85694885 -95.20421600]
[158.94770813 -85.92668152]
[144.97662354 -80.20731354]
[129.98040771 -78.47054291]
[127.63389587 -63.65522003]
[125.28738403 -48.83989334]
[122.94086456 -34.02456665]
[129.84999084 -23.89339066]
[127.83208466 -11.38791561]
[117.44488525 -3.45225596]
[114.51853180 11.25952339]
[111.59217834 25.97130203]
[109.82911682 40.86732864]
[109.24021912 55.85576630]
[108.65132141 70.84420013]
[108.06242371 85.83263397]
[115.51449585 94.99827576]
[114.81906891 106.79058838]
[106.34134674 115.01679993]
[105.16445923 129.97056580]
[103.98757172 144.92431641]
[102.81068420 159.87808228]
[101.63379669 174.83183289]
[100.45690918 189.78559875]
[102.94903564 198.85772705]
[98.92892456 205.29954529]
[97.16586304 220.19557190]
[95.40280151 235.09159851]
[93.63973999 249.98762512]
[91.87667847 264.88363647]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 79]
[5 78]
[6 77]
[7 76]
[8 75]
[9 73]
[10 72]
[11 71]
[12 70]
[13 69]
[14 68]
[16 65]
[17 64]
[18 63]
[19 62]
[24 61]
[25 60]
[26 59]
[28 56]
[29 55]
[30 54]
[31 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
