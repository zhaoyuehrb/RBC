%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 13:30:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCGGUAGGCGUGGGGCCAGGACAGCCAGCCAGCCCAGCGCCCGCUCACCCAGGAGCCCUGGAUCCCGGCGCGGGAAAGUCACAGAGCUGCCUGGGCUUGUACCUGGCCACAUAAAGCCCCAGUUUAAAGCA\
) } def
/len { sequence length } bind def

/coor [
[156.44308472 664.24438477]
[153.99241638 649.44592285]
[151.54176331 634.64746094]
[141.82907104 623.35528564]
[147.20777893 608.47644043]
[144.75711060 593.67797852]
[141.38787842 590.17364502]
[140.24478149 584.48608398]
[142.55543518 578.12982178]
[140.80110168 563.23278809]
[139.04678345 548.33569336]
[136.76976013 533.50952148]
[133.97285461 518.77258301]
[131.17594910 504.03564453]
[121.20121765 492.97427368]
[126.22964478 477.97344971]
[123.43274689 463.23651123]
[120.63584137 448.49957275]
[117.83894348 433.76263428]
[115.04203796 419.02569580]
[112.24514008 404.28875732]
[109.44824219 389.55181885]
[106.47878265 374.84866333]
[103.33718109 360.18133545]
[100.19557190 345.51403809]
[91.53923035 357.76425171]
[77.08521271 361.77438354]
[63.35462952 355.73526001]
[56.54220581 342.37145996]
[59.72145462 327.71224976]
[71.45800781 318.37130737]
[86.45678711 318.56292725]
[97.95054626 328.20004272]
[97.24746704 313.21652222]
[96.54438019 298.23300171]
[95.84130096 283.24948120]
[95.13821411 268.26599121]
[94.43512726 253.28247070]
[93.73204803 238.29895020]
[90.24359894 231.70335388]
[93.19228363 222.95678711]
[92.84064484 207.96090698]
[84.27877045 199.33306885]
[83.91717529 186.78115845]
[92.50000000 177.07156372]
[92.50000000 162.07156372]
[92.50000000 147.07156372]
[92.50000000 132.07156372]
[72.87799835 118.68774414]
[67.36032104 95.58569336]
[78.81633759 74.77922821]
[72.03783417 61.39820099]
[65.25933075 48.01717377]
[58.48082733 34.63614655]
[51.70232010 21.25512123]
[39.15086365 9.85787392]
[46.62811279 -5.35814047]
[63.31938553 -2.38531661]
[65.08335114 14.47661591]
[71.86185455 27.85764313]
[78.64035797 41.23867035]
[85.41886139 54.61969757]
[92.19736481 68.00072479]
[95.38209534 67.38850403]
[98.61159515 67.09244537]
[101.40849304 52.35550690]
[104.20539856 37.61856842]
[107.00229645 22.88162994]
[109.79920197 8.14469242]
[106.81226349 -8.54406261]
[122.02194977 -16.03417587]
[133.42980957 -3.49236012]
[124.53614044 10.94159317]
[121.73923492 25.67853165]
[118.94233704 40.41547012]
[116.14543152 55.15240860]
[113.34853363 69.88934326]
[121.07855225 74.69131470]
[127.19951630 81.42525482]
[131.24417114 89.57711029]
[132.90376282 98.52462006]
[132.05162048 107.58474731]
[128.75277710 116.06588745]
[123.25905609 123.32061768]
[115.98983002 128.79513550]
[107.50000000 132.07156372]
[107.50000000 147.07156372]
[107.50000000 162.07156372]
[107.50000000 177.07156372]
[117.08623505 192.74288940]
[107.83652496 207.60926819]
[108.18816376 222.60514832]
[108.71556091 237.59587097]
[109.41864014 252.57939148]
[110.12172699 267.56289673]
[110.82481384 282.54641724]
[111.52789307 297.52993774]
[112.23097992 312.51342773]
[112.93406677 327.49694824]
[114.86289978 342.37243652]
[118.00450134 357.03973389]
[121.14610291 371.70706177]
[126.04599762 379.52935791]
[124.18518066 386.75491333]
[126.98207855 401.49185181]
[129.77897644 416.22879028]
[132.57588196 430.96572876]
[135.37278748 445.70266724]
[138.16967773 460.43960571]
[140.96658325 475.17654419]
[151.14137268 487.29199219]
[145.91288757 501.23876953]
[148.70979309 515.97570801]
[151.50669861 530.71264648]
[155.04583740 534.80224609]
[156.45468140 539.38763428]
[155.91186523 543.54943848]
[153.94383240 546.58135986]
[155.69816589 561.47845459]
[157.45249939 576.37548828]
[159.55557251 591.22729492]
[162.00622559 606.02575684]
[171.89421082 618.37640381]
[166.34020996 632.19677734]
[168.79087830 646.99523926]
[171.24153137 661.79370117]
[185.17633057 668.62023926]
[192.40751648 682.34936523]
[190.15455627 697.70202637]
[179.28376770 708.77478027]
[163.97518921 711.30987549]
[150.11528015 704.33264160]
[143.03344727 690.52581787]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 126]
[2 125]
[3 124]
[5 122]
[6 121]
[9 120]
[10 119]
[11 118]
[12 114]
[13 113]
[14 112]
[16 110]
[17 109]
[18 108]
[19 107]
[20 106]
[21 105]
[22 104]
[23 102]
[24 101]
[25 100]
[33 99]
[34 98]
[35 97]
[36 96]
[37 95]
[38 94]
[39 93]
[41 92]
[42 91]
[45 89]
[46 88]
[47 87]
[48 86]
[51 63]
[52 62]
[53 61]
[54 60]
[55 59]
[65 77]
[66 76]
[67 75]
[68 74]
[69 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
