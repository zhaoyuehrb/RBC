%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 22:52:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGAGGCCCACGGGGCCCGCGCCUGCCUCCCUUCCCCGCCACCGGGCCCUCUGCCAUUAAAGCCUCCGUGCUUCGCUC\
) } def
/len { sequence length } bind def

/coor [
[128.54260254 256.79776001]
[131.12802124 241.86149597]
[138.66870117 228.71182251]
[150.25407410 218.93661499]
[145.06231689 204.86373901]
[139.87055969 190.79087830]
[134.67880249 176.71800232]
[129.48706055 162.64514160]
[108.74668121 150.87411499]
[109.92218781 126.41648102]
[101.10540771 114.28122711]
[88.41168213 108.41940308]
[86.75933838 94.53555298]
[77.94255829 82.40029907]
[69.12577820 70.26503754]
[60.30899811 58.12978745]
[51.49222183 45.99452972]
[42.67544174 33.85927582]
[33.85866165 21.72402191]
[25.04188347 9.58876705]
[6.34884787 2.54216552]
[4.52254152 -16.54529953]
[-5.21917963 -27.95138931]
[-19.53216934 -22.90136528]
[-34.70279694 -23.36671638]
[-48.67935562 -29.28450775]
[-59.57162857 -39.85440826]
[-65.90653229 -53.64691925]
[-66.82732391 -68.79672241]
[-62.20946121 -83.25493622]
[-52.67748642 -95.06619263]
[-39.52051163 -102.63312531]
[-24.51791573 -104.93237305]
[-9.69867229 -101.65296936]
[2.93303585 -93.23843384]
[11.66887379 -80.82676697]
[15.32739162 -66.09653473]
[13.41380501 -51.03988647]
[6.18691015 -37.69311142]
[15.92863083 -26.28702164]
[26.47132683 -26.36177635]
[35.41909409 -20.37496948]
[39.53979874 -10.18801117]
[37.17713928 0.77198780]
[45.99391937 12.90724277]
[54.81069565 25.04249763]
[63.62747574 37.17775345]
[72.44425201 49.31300735]
[81.26103210 61.44826126]
[90.07781219 73.58351898]
[98.89459229 85.71877289]
[111.58831787 91.58059692]
[113.24066162 105.46444702]
[122.05744171 117.59970093]
[129.19160461 116.63426208]
[136.24440002 117.85641479]
[142.56445312 121.12805176]
[147.57562256 126.12294769]
[150.82962036 132.35913086]
[152.04597473 139.24536133]
[151.13607788 146.13711548]
[148.20918274 152.39692688]
[143.55992126 157.45338440]
[148.75167847 171.52624512]
[153.94343567 185.59912109]
[159.13519287 199.67199707]
[164.32695007 213.74485779]
[179.48503113 213.65388489]
[193.75904846 218.75569153]
[205.42532349 228.43421936]
[213.07510376 241.52072144]
[215.78465271 256.43493652]
[213.22677612 271.37594604]
[205.71034241 284.53948975]
[194.14299011 294.33602905]
[179.92155457 299.58258057]
[164.76332092 299.64562988]
[150.49874878 294.51751709]
[138.85032654 284.81753540]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 67]
[5 66]
[6 65]
[7 64]
[8 63]
[10 54]
[11 53]
[13 51]
[14 50]
[15 49]
[16 48]
[17 47]
[18 46]
[19 45]
[20 44]
[22 40]
[23 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
