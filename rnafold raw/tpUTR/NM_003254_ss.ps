%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 14:58:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCUGCCCGGAGUGGAAGCUGAAGCCUGCACAGUGUCCACCCUGUUCCCACUCCCAUCUUUCUUCCGGACAAUGAAAUAAAGAGUUACCACCCAGCAGA\
) } def
/len { sequence length } bind def

/coor [
[82.45649719 297.35882568]
[68.49829865 289.45010376]
[66.12120056 273.58413696]
[77.14871216 261.93194580]
[78.08125305 246.96095276]
[79.01380157 231.98997498]
[79.94634247 217.01898193]
[72.13188171 207.64070129]
[72.89880371 195.05355835]
[82.38092804 186.14030457]
[83.77861786 171.20555115]
[81.22274780 164.12791443]
[85.45909119 155.83056641]
[87.32057190 140.94651794]
[89.18205261 126.06246948]
[91.04353333 111.17842102]
[85.78678131 98.22241974]
[94.07241821 86.96009827]
[95.93389893 72.07604980]
[97.79537964 57.19199753]
[99.65686035 42.30794907]
[85.99196625 35.84820938]
[75.00764465 25.49508858]
[67.77098083 12.27166080]
[64.97965240 -2.52102447]
[66.89464569 -17.43193817]
[73.31595612 -31.00241280]
[83.60333252 -41.90882874]
[96.74015808 -49.09172440]
[111.43386078 -51.85869598]
[113.29534149 -66.74274445]
[106.00044250 -75.10876465]
[104.64367676 -85.90181732]
[109.44152832 -95.41680145]
[118.53968811 -100.52558899]
[121.32290649 -115.26512146]
[124.10611725 -130.00465393]
[126.88933563 -144.74417114]
[129.67254639 -159.48370361]
[115.77966309 -165.28726196]
[103.39721680 -173.85281372]
[93.06652069 -184.80592346]
[85.23918915 -197.66773987]
[80.25740814 -211.87603760]
[78.33894348 -226.80966187]
[79.56767273 -241.81579590]
[83.88988495 -256.23840332]
[91.11662292 -269.44705200]
[100.93196869 -280.86425781]
[112.90682983 -289.99093628]
[126.51773071 -296.42810059]
[141.16964722 -299.89434814]
[156.22207642 -300.23815918]
[171.01698303 -297.44448853]
[184.90757751 -291.63546753]
[197.28666687 -283.06503296]
[207.61303711 -272.10787964]
[215.43531799 -259.24298096]
[220.41151428 -245.03273010]
[222.32409668 -230.09834290]
[221.08946228 -215.09269714]
[216.76158142 -200.67176819]
[209.52964783 -187.46598816]
[199.70980835 -176.05264282]
[187.73135376 -166.93066406]
[174.11791992 -160.49885559]
[159.46464539 -157.03837585]
[144.41207886 -156.70048523]
[141.62886047 -141.96096802]
[138.84564209 -127.22143555]
[136.06243896 -112.48190308]
[133.27922058 -97.74237823]
[141.11961365 -80.18273926]
[128.17938232 -64.88126373]
[126.31790924 -49.99721527]
[139.87757874 -43.69672012]
[150.84078979 -33.49974442]
[158.12527466 -20.39569092]
[161.00668335 -5.66176796]
[159.19046021 9.26149940]
[152.84196472 22.91110802]
[142.57154846 33.94500351]
[129.37580872 41.27403259]
[114.54090881 44.16942978]
[112.67942810 59.05347824]
[110.81794739 73.93753052]
[108.95646667 88.82157898]
[114.21321869 101.77758026]
[105.92758179 113.03990173]
[104.06610107 127.92395020]
[102.20462036 142.80799866]
[100.34313965 157.69204712]
[98.71335602 172.60324097]
[97.31566620 187.53799438]
[105.41466522 203.98344421]
[94.91732788 217.95153809]
[93.98478699 232.92251587]
[93.05223846 247.89349365]
[92.11969757 262.86447144]
[101.61594391 275.79510498]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 99]
[5 98]
[6 97]
[7 96]
[10 94]
[11 93]
[13 92]
[14 91]
[15 90]
[16 89]
[18 87]
[19 86]
[20 85]
[21 84]
[30 75]
[31 74]
[35 72]
[36 71]
[37 70]
[38 69]
[39 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
