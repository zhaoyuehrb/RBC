%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 14:37:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGAACACUUGUCUUACUUCAAGAUGCAGGAAGCAGUGGACCUGGUCACAUUGGGUCUUUUUAAUUGAUACUGUACAAUCUUGUUGUCACUAUGUUUAUAAAGAGAAAUUAUUUAACAGUA\
) } def
/len { sequence length } bind def

/coor [
[170.55953979 298.80487061]
[178.89140320 286.25384521]
[189.80758667 275.87191772]
[182.14230347 262.97836304]
[174.47702026 250.08483887]
[166.81175232 237.19128418]
[159.14646912 224.29774475]
[151.48118591 211.40420532]
[138.60665894 209.98355103]
[128.77870178 201.24969482]
[125.76712036 188.25071716]
[130.90104675 175.72331238]
[123.56755066 162.63821411]
[113.38677979 160.71789551]
[105.83002472 153.31112671]
[103.61506653 142.73826599]
[107.72820282 132.51094055]
[101.07241058 119.06845856]
[87.37836456 114.33354950]
[80.94907379 101.34853363]
[85.48510742 87.58733368]
[78.82931519 74.14485168]
[72.17351532 60.70236969]
[65.51771545 47.25988770]
[58.86191940 33.81740189]
[52.20612335 20.37491989]
[45.04032516 7.19723606]
[37.37504578 -5.69630814]
[29.70976448 -18.58985138]
[22.04448318 -31.48339653]
[8.19738770 -31.73711967]
[-3.60701656 -38.77028275]
[-10.31483269 -50.63792801]
[-10.25313950 -64.16131592]
[-3.54592800 -75.77910614]
[-10.87942505 -88.86420441]
[-18.21292114 -101.94930267]
[-25.54641724 -115.03440094]
[-33.69993210 -127.62488556]
[-42.64022827 -139.66943359]
[-51.58052444 -151.71397400]
[-60.52082062 -163.75851440]
[-69.46112061 -175.80307007]
[-78.40141296 -187.84761047]
[-87.34171295 -199.89215088]
[-96.28201294 -211.93670654]
[-105.22230530 -223.98124695]
[-119.51776886 -233.09585571]
[-114.71674347 -249.35581970]
[-97.76316833 -249.24362183]
[-93.17776489 -232.92155457]
[-84.23746490 -220.87699890]
[-75.29716492 -208.83245850]
[-66.35687256 -196.78790283]
[-57.41657257 -184.74336243]
[-48.47627640 -172.69882202]
[-39.53598022 -160.65426636]
[-30.59568214 -148.60972595]
[-21.65538597 -136.56518555]
[-16.28003311 -150.56895447]
[-2.06101322 -155.34591675]
[10.67902660 -147.42813110]
[12.69114017 -132.56370544]
[2.51458192 -121.54382324]
[-12.46131802 -122.36789703]
[-5.12782192 -109.28279877]
[2.20567489 -96.19770050]
[9.53917122 -83.11260223]
[25.84386063 -81.74094391]
[38.27027893 -70.84368896]
[41.82961273 -54.53437805]
[34.93802643 -39.14867783]
[42.60330963 -26.25513268]
[50.26858902 -13.36158848]
[57.93386841 -0.46804413]
[61.36397171 0.73990095]
[64.34510040 3.73679805]
[66.01131439 8.27594948]
[65.64860535 13.71912193]
[72.30440521 27.16160583]
[78.96019745 40.60408783]
[85.61599731 54.04657364]
[92.27179718 67.48905945]
[98.92758942 80.93154144]
[112.62163544 85.66645050]
[119.05092621 98.65146637]
[114.51489258 112.41266632]
[121.17068481 125.85514832]
[138.43041992 136.11935425]
[136.65264893 155.30471802]
[143.98614502 168.38981628]
[160.86250305 172.77807617]
[169.23030090 187.69233704]
[164.37472534 203.73892212]
[172.04000854 216.63246155]
[179.70529175 229.52600098]
[187.37057495 242.41955566]
[195.03584290 255.31309509]
[202.70112610 268.20663452]
[217.03666687 263.57629395]
[232.04318237 262.25250244]
[246.96794128 264.30169678]
[261.06234741 269.62106323]
[273.61938477 277.94381714]
[284.00927734 288.85244751]
[291.71078491 301.79980469]
[296.33767700 316.13647461]
[297.65780640 331.14331055]
[295.60501099 346.06756592]
[290.28222656 360.16067505]
[281.95642090 372.71572876]
[271.04528809 383.10293579]
[258.09603882 390.80133057]
[243.75827026 395.42474365]
[228.75111389 396.74124146]
[213.82734680 394.68481445]
[199.73553467 389.35861206]
[187.18251038 381.02978516]
[176.79792786 370.11611938]
[169.10267639 357.16503906]
[164.48275757 342.82614136]
[163.16987610 327.81866455]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 99]
[4 98]
[5 97]
[6 96]
[7 95]
[8 94]
[12 91]
[13 90]
[17 88]
[18 87]
[21 84]
[22 83]
[23 82]
[24 81]
[25 80]
[26 79]
[27 75]
[28 74]
[29 73]
[30 72]
[35 68]
[36 67]
[37 66]
[38 65]
[39 59]
[40 58]
[41 57]
[42 56]
[43 55]
[44 54]
[45 53]
[46 52]
[47 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
