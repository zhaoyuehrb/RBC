%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:50:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCAUUAACAAGUUUUUCUCCUAAAACUGUGUUUCUUGUCCUUGCUUUAUAAUGCAUAUGUGCUUAGAAAUAAACAGGUUUCACGUGGACUC\
) } def
/len { sequence length } bind def

/coor [
[24.01214218 169.79750061]
[14.85040092 175.19294739]
[4.60052633 177.95336914]
[-5.99701118 177.88890076]
[-16.17915916 175.01339722]
[-25.21523094 169.54280090]
[-32.45932770 161.87893677]
[-37.39652252 152.57998657]
[-52.18757629 155.07492065]
[-66.97863007 157.56985474]
[-81.76968384 160.06480408]
[-96.51698303 162.80654907]
[-111.21640778 165.79434204]
[-125.91583252 168.78213501]
[-140.61526489 171.76991272]
[-155.31468201 174.75770569]
[-170.01411438 177.74549866]
[-178.52946472 191.05957031]
[-193.98291016 194.37112427]
[-207.20620728 185.71548462]
[-210.35420227 170.22789001]
[-201.55923462 157.09684753]
[-186.03923035 154.11277771]
[-173.00190735 163.04606628]
[-158.30247498 160.05828857]
[-143.60305786 157.07049561]
[-128.90362549 154.08270264]
[-114.20420074 151.09490967]
[-99.50477600 148.10711670]
[-93.45558167 143.59889221]
[-84.26462555 145.27374268]
[-69.47357178 142.77880859]
[-54.68251801 140.28385925]
[-39.89146423 137.78892517]
[-34.50229645 118.64662933]
[-20.37595749 104.54748535]
[-1.08463144 99.15645599]
[18.44434357 103.92373657]
[33.18699265 117.69551849]
[47.18470001 112.30440521]
[61.18241119 106.91328430]
[75.18012238 101.52217102]
[82.89849091 76.81720734]
[111.56463623 69.36025238]
[115.04193878 54.76887131]
[118.51924133 40.17749023]
[108.32012939 28.48314476]
[106.97618103 13.02437973]
[115.00416565 -0.25459296]
[129.31715393 -6.24773693]
[144.41152954 -2.65056610]
[154.48318481 9.15373325]
[155.65934753 24.62616920]
[147.48779297 37.81727219]
[133.11062622 43.65479279]
[129.63331604 58.24617386]
[126.15602112 72.83755493]
[136.20312500 61.69952011]
[142.21557617 47.95724106]
[154.58374023 39.47026825]
[169.56893921 38.80405807]
[182.64143372 46.15999222]
[189.84967041 59.31451035]
[189.01473999 74.29125214]
[180.38900757 86.56304169]
[166.57987976 92.42034912]
[151.76344299 90.09348297]
[136.96910095 92.56892395]
[151.13914490 97.48930359]
[165.30917358 102.40967560]
[179.47921753 107.33004761]
[193.64924622 112.25041962]
[207.76094055 105.13453674]
[222.74473572 110.16059875]
[229.71102905 124.34673309]
[224.52682495 139.27655029]
[210.26783752 146.09246826]
[195.39366150 140.75071716]
[188.72888184 126.42045593]
[174.55883789 121.50008392]
[160.38880920 116.57971191]
[146.21876526 111.65933990]
[132.04873657 106.73896027]
[124.63942719 119.09587097]
[113.12368011 126.52759552]
[100.20589447 128.01898193]
[88.62410736 123.87107086]
[80.57123566 115.51987457]
[66.57352448 120.91099548]
[52.57581711 126.30210876]
[38.57810974 131.69322205]
[38.98519516 142.38726807]
[36.53787231 152.78765869]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 34]
[9 33]
[10 32]
[11 31]
[12 29]
[13 28]
[14 27]
[15 26]
[16 25]
[17 24]
[39 91]
[40 90]
[41 89]
[42 88]
[44 57]
[45 56]
[46 55]
[68 83]
[69 82]
[70 81]
[71 80]
[72 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
