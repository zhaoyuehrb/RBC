%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 13:27:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUGCGAAUCUAGAGGAGGGGGCAGGCUGAGGGUCGUGGGAAAGGGGAGUAGGUGGGGGAACACUGAGAAAGAGGCAGGGACCUAAAGGGACUACCUCUGUGCCUUGCCACAUUAAAUUGAUAACAUGGAAAUGAGAUGCAACCCAACAA\
) } def
/len { sequence length } bind def

/coor [
[24.80183220 209.65470886]
[23.40526581 225.41415405]
[9.83682632 231.55799866]
[1.37483215 243.94325256]
[-7.08716249 256.32852173]
[-15.54915714 268.71377563]
[-9.64134693 284.53067017]
[-14.25683403 300.59933472]
[-27.39476013 310.66830444]
[-43.77928162 310.94259644]
[-51.98350525 323.50012207]
[-60.18772888 336.05761719]
[-63.78911972 352.62463379]
[-80.70566559 353.75018311]
[-86.47019958 337.80633545]
[-72.74522400 327.85339355]
[-64.54100037 315.29589844]
[-56.33678055 302.73840332]
[-62.23303986 290.72140503]
[-61.39881134 277.25317383]
[-53.94581985 265.87420654]
[-41.73977661 259.62899780]
[-27.93441582 260.25177002]
[-19.47242165 247.86651611]
[-11.01042747 235.48126221]
[-2.54843259 223.09600830]
[-1.75712335 208.22242737]
[12.41657352 201.19271851]
[5.09969044 184.06443787]
[9.54741764 165.82432556]
[24.15734100 153.79740906]
[43.20965195 152.92343140]
[50.88792801 140.03762817]
[58.56620407 127.15180969]
[66.24447632 114.26600647]
[75.39573669 91.02398682]
[92.85563660 85.98097229]
[91.92615509 71.00979614]
[90.99667358 56.03862381]
[90.06719208 41.06744766]
[80.91030121 31.92523956]
[80.47743225 19.39497185]
[88.45439148 10.24878120]
[87.83451080 -4.73840523]
[87.21463776 -19.72559166]
[86.59476471 -34.71277618]
[78.29378510 -48.18141937]
[85.49851990 -61.21755981]
[84.72380066 -76.19754028]
[83.79431915 -91.16871643]
[80.11940002 -99.60189819]
[83.00358582 -106.45830536]
[82.38371277 -121.44548798]
[81.76383972 -136.43267822]
[81.14396667 -151.41986084]
[80.52408600 -166.40704346]
[79.90421295 -181.39424133]
[78.20274353 -196.29742432]
[75.42857361 -211.03865051]
[72.65441132 -225.77989197]
[59.88879013 -234.70606995]
[57.28538513 -249.69529724]
[65.87380219 -261.81036377]
[61.18397903 -269.72421265]
[63.19793320 -276.88473511]
[60.72901535 -291.68014526]
[58.26009750 -306.47555542]
[44.04566956 -312.47167969]
[35.34835434 -325.21374512]
[34.94342804 -340.63580322]
[42.96010208 -353.81671143]
[56.84028625 -360.55050659]
[72.15486145 -358.68847656]
[84.01701355 -348.82473755]
[88.64155579 -334.10681152]
[84.55282593 -319.23114014]
[73.05551910 -308.94448853]
[75.52443695 -294.14904785]
[77.99335480 -279.35363770]
[80.61503601 -264.58453369]
[93.01985168 -256.42019653]
[96.04324341 -241.51000977]
[87.39564514 -228.55406189]
[90.16981506 -213.81282043]
[92.94397736 -199.07159424]
[101.72080994 -211.23576355]
[116.21961212 -215.08087158]
[129.87094116 -208.86466980]
[136.48937988 -195.40374756]
[133.07608032 -180.79727173]
[121.17761993 -171.66343689]
[106.18521881 -172.14082336]
[94.89140320 -182.01411438]
[95.51127625 -167.02691650]
[96.13114929 -152.03973389]
[96.75102234 -137.05255127]
[97.37090302 -122.06536102]
[97.99077606 -107.07817841]
[98.76549530 -92.09819794]
[99.69497681 -77.12702179]
[103.27107239 -70.60472870]
[100.48570251 -61.83743668]
[108.74234772 -49.44078064]
[101.58194733 -35.33265305]
[102.20182800 -20.34546661]
[102.82170105 -5.35827971]
[103.44157410 9.62890720]
[113.63024902 23.88419914]
[105.03836823 40.13796616]
[105.96784973 55.10914230]
[106.89733124 70.08031464]
[107.82680511 85.05149078]
[108.33067322 70.05995941]
[114.70090485 56.47981644]
[125.90676117 46.50842285]
[140.13507080 41.75920105]
[155.08361816 43.00060654]
[168.33363342 50.03176880]
[177.74116516 61.71500778]
[181.78405762 76.15990448]
[179.80812073 91.02919006]
[172.13308716 103.91693115]
[160.00080872 112.73780823]
[145.37437439 116.06455231]
[130.62040710 113.35887909]
[118.12437439 105.05673981]
[129.76855469 114.51260376]
[141.41271973 123.96846008]
[157.68298340 126.02045441]
[163.79075623 141.23976135]
[153.45288086 153.97004700]
[137.30409241 151.11550903]
[131.95686340 135.61262512]
[120.31269073 126.15676880]
[108.66851807 116.70091248]
[101.28395844 118.01175690]
[112.54216766 127.92400360]
[111.81198883 142.90621948]
[99.64324951 151.67672729]
[85.19906616 147.63128662]
[79.35597229 133.81614685]
[86.51484680 120.63343811]
[79.13028717 121.94428253]
[71.45201111 134.83009338]
[63.77373505 147.71589661]
[56.09545898 160.60169983]
[62.43060303 170.28416443]
[64.65481567 181.58668518]
[62.48030853 192.84638977]
[56.26358414 202.42149353]
[46.94763184 208.93064880]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[3 26]
[4 25]
[5 24]
[6 23]
[10 18]
[11 17]
[12 16]
[32 146]
[33 145]
[34 144]
[35 143]
[37 112]
[38 111]
[39 110]
[40 109]
[43 107]
[44 106]
[45 105]
[46 104]
[48 102]
[49 100]
[50 99]
[52 98]
[53 97]
[54 96]
[55 95]
[56 94]
[57 93]
[58 85]
[59 84]
[60 83]
[63 80]
[65 79]
[66 78]
[67 77]
[126 135]
[127 134]
[128 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
