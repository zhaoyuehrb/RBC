%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 09:15:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGCGGGGCGGGGGCCGUGGGGGGCCUGGAGGAGGGCAGGGGCCGCGGGAGGCCGGGAGGAGGGUGGGGACCUUGCAGCCCCCAUCCUCUCCGUGCGCUUGGAGCCUCUUUUUGCAAAUAAAGUUGGUGCAGCUUCGCGGAGAGGA\
) } def
/len { sequence length } bind def

/coor [
[208.74626160 197.07722473]
[198.49731445 208.02981567]
[183.49838257 207.85021973]
[173.51460266 196.65539551]
[175.04574585 181.73416138]
[167.45401001 194.67114258]
[167.14270020 210.48928833]
[154.02807617 217.55017090]
[146.43634033 230.48715210]
[138.84461975 243.42414856]
[139.26971436 259.81777954]
[125.14554596 268.15084839]
[111.00183868 259.85098267]
[111.38843536 243.45639038]
[125.90763092 235.83241272]
[133.49935913 222.89543152]
[141.09107971 209.95843506]
[140.85939026 195.06562805]
[154.51702881 187.07942200]
[162.10874939 174.14242554]
[159.26051331 159.41532898]
[147.39259338 150.24186707]
[135.52467346 141.06840515]
[123.65674591 131.89492798]
[111.78882599 122.72146606]
[99.92090607 113.54800415]
[85.40491486 109.76833344]
[70.57019806 111.98897552]
[55.73548126 114.20960999]
[48.69347382 128.03675842]
[34.85372543 135.05393982]
[19.53790092 132.56292725]
[8.63524723 121.52156830]
[6.33805799 106.17547607]
[13.52964878 92.42554474]
[27.44470596 85.55889893]
[42.73260880 88.21591187]
[53.51484299 99.37490082]
[68.34955597 97.15425873]
[83.18427277 94.93361664]
[84.45177460 87.54149628]
[88.25429535 65.36514282]
[75.00675964 58.32931519]
[61.75922775 51.29349136]
[48.51169205 44.25766754]
[33.47544861 49.12458801]
[19.43999672 41.85948944]
[14.73232079 26.77263069]
[22.14540100 12.81477356]
[37.28118896 8.26686764]
[51.15989304 15.82710552]
[55.54751968 31.01013184]
[68.79505157 38.04595566]
[82.04258728 45.08178329]
[95.29012299 52.11760712]
[101.22408295 47.53087616]
[92.05081177 35.66280365]
[103.91903687 26.48973083]
[113.09200287 38.35741043]
[119.02596283 33.77067566]
[108.30553436 22.13525772]
[112.88802338 7.96310043]
[109.41731262 -6.62984848]
[105.94659424 -21.22279739]
[102.47588348 -35.81574631]
[99.00517273 -50.40869522]
[87.35487366 -61.95003891]
[91.78594208 -77.73920441]
[107.74006653 -81.53365326]
[118.80502319 -69.42997742]
[113.59812164 -53.87940598]
[117.06883240 -39.28645706]
[120.53954315 -24.69351006]
[124.01026154 -10.10056019]
[127.48097229 4.49238873]
[137.95315552 15.08402157]
[133.61891174 30.29996490]
[138.63215637 80.40777588]
[109.09436798 101.68008423]
[120.96228790 110.85354614]
[132.83021545 120.02701569]
[144.69813538 129.20048523]
[156.56605530 138.37394714]
[168.43397522 147.54740906]
[185.81565857 145.20968628]
[199.21118164 158.31069946]
[213.80413818 161.78140259]
[228.39707947 165.25212097]
[242.99003601 168.72283936]
[257.58297729 172.19354248]
[272.17593384 175.66426086]
[286.76889038 179.13496399]
[301.36181641 182.60568237]
[315.95477295 186.07638550]
[330.54772949 189.54710388]
[345.14068604 193.01782227]
[362.61874390 187.32411194]
[374.92929077 199.78930664]
[389.59262085 202.94949341]
[404.25595093 206.10968018]
[413.37554932 204.85603333]
[419.19543457 209.49569702]
[434.41137695 205.16145325]
[445.00302124 215.63363647]
[460.21896362 211.29939270]
[470.81057739 221.77157593]
[484.16238403 213.74865723]
[498.91226196 217.47633362]
[506.47860718 230.25468445]
[521.07153320 233.72538757]
[535.66448975 237.19610596]
[550.25744629 240.66682434]
[561.94720459 230.46241760]
[577.40533447 229.11149597]
[590.68792725 237.13346863]
[596.68756104 251.44375610]
[593.09722900 266.53976440]
[581.29748535 276.61672974]
[565.82556152 277.79989624]
[552.63073730 269.63430786]
[546.78674316 255.25976562]
[532.19378662 251.78904724]
[517.60083008 248.31834412]
[503.00790405 244.84762573]
[490.49887085 252.85134888]
[475.65008545 249.53942871]
[467.33987427 236.36453247]
[453.16772461 240.94702148]
[441.53228760 230.22659302]
[427.36013794 234.80908203]
[415.72473145 224.08865356]
[401.09576416 220.77301025]
[386.43243408 217.61282349]
[371.76910400 214.45263672]
[361.39547729 220.75862122]
[349.11837769 218.19625854]
[341.66995239 207.61076355]
[327.07702637 204.14006042]
[312.48406982 200.66934204]
[297.89111328 197.19862366]
[283.29815674 193.72792053]
[268.70523071 190.25720215]
[254.11227417 186.78649902]
[239.51931763 183.31578064]
[224.92637634 179.84506226]
[210.33341980 176.37435913]
[195.74047852 172.90364075]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 20]
[6 19]
[8 17]
[9 16]
[10 15]
[21 84]
[22 83]
[23 82]
[24 81]
[25 80]
[26 79]
[27 40]
[28 39]
[29 38]
[42 55]
[43 54]
[44 53]
[45 52]
[60 77]
[62 75]
[63 74]
[64 73]
[65 72]
[66 71]
[86 147]
[87 146]
[88 145]
[89 144]
[90 143]
[91 142]
[92 141]
[93 140]
[94 139]
[95 138]
[96 137]
[98 134]
[99 133]
[100 132]
[102 131]
[104 129]
[106 127]
[109 124]
[110 123]
[111 122]
[112 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
