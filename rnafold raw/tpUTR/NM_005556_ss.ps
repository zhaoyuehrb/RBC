%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:59:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGCCUCCCACCACUCCACUCCUCCAGCCACCACCCACAAUCACAAGAAGAUUCCCACCCCUGCCUCCCAUGCCUGGUCCCAAGACAGUGAGACAGUCUGGAAAGUGAUGUCAGAAUAGCUUCCAAUAAAGCAGCCUCAUUCUGAGGCCUGAGUGAUCCACGUG\
) } def
/len { sequence length } bind def

/coor [
[69.91408539 301.74618530]
[54.84991455 300.88998413]
[40.52094269 296.16311646]
[27.90415192 287.88793945]
[17.85977173 276.62857056]
[11.07264423 263.15277100]
[8.00552845 248.37931824]
[8.86754513 233.31547546]
[13.59992027 218.98832703]
[21.87999344 206.37474060]
[33.14321518 196.33470154]
[46.62163925 189.55278015]
[61.39628601 186.49136353]
[62.24746323 171.51553345]
[63.09864426 156.53970337]
[63.94982147 141.56387329]
[64.80100250 126.58804321]
[59.65588379 112.49805450]
[49.35461426 101.59467316]
[39.05334473 90.69128418]
[28.75207329 79.78789520]
[15.87670135 78.63387299]
[7.52032709 69.30323029]
[7.77186584 57.18166733]
[-2.32122207 46.08528900]
[-12.41430950 34.98891449]
[-22.50739861 23.89253807]
[-32.60048676 12.79616070]
[-25.87144661 26.20213127]
[-25.86555099 41.20212936]
[-32.58405304 54.61338425]
[-44.60138321 63.59022903]
[-59.36764908 66.22791290]
[-73.74967194 61.96675873]
[-84.69580078 51.71092224]
[-89.88343811 37.63653183]
[-88.21184540 22.72996521]
[-80.03569794 10.15416718]
[-67.08986664 2.57753348]
[-52.12144470 1.60767794]
[-66.79758453 -1.49248326]
[-81.47371674 -4.59264421]
[-96.14985657 -7.69280577]
[-108.34788513 2.09198117]
[-123.98043823 1.69513845]
[-135.66629028 -8.69595718]
[-137.88774109 -24.17494774]
[-129.59590149 -37.43312836]
[-114.70590973 -42.21038818]
[-100.24837494 -36.25105667]
[-93.04969788 -22.36894226]
[-78.37355804 -19.26878166]
[-63.69742203 -16.16862106]
[-49.02128220 -13.06845951]
[-43.52109528 -18.16727638]
[-54.91432190 -27.92403984]
[-67.22283173 -36.49729156]
[-63.83184814 -51.10897446]
[-49.00551987 -53.38495255]
[-41.38788605 -40.46339798]
[-32.52072144 -28.36491203]
[-27.02053452 -33.46372986]
[-29.00188065 -48.33229828]
[-30.98322487 -63.20086288]
[-40.47558975 -75.85810089]
[-34.48722458 -89.49586487]
[-36.46857071 -104.36443329]
[-38.44991302 -119.23300171]
[-50.03938293 -126.14749908]
[-55.43857956 -138.30288696]
[-52.87514114 -151.15542603]
[-43.50844574 -160.04104614]
[-45.20806122 -174.94444275]
[-54.45919800 -187.77905273]
[-48.21382523 -201.30105591]
[-49.91343689 -216.20445251]
[-63.05327988 -224.68257141]
[-67.61992645 -239.63850403]
[-61.45715714 -254.01049805]
[-47.47483444 -261.01254272]
[-32.27498627 -257.33850098]
[-23.03451920 -244.72311401]
[-24.11649513 -229.12301636]
[-35.01004028 -217.90406799]
[-33.31042480 -203.00067139]
[-24.18085480 -191.23205566]
[-30.30466080 -176.64405823]
[-28.60504532 -161.74066162]
[-15.01528454 -151.86703491]
[-12.70470619 -134.88842773]
[-23.58134842 -121.21434784]
[-21.60000229 -106.34577942]
[-19.61865807 -91.47721100]
[-10.26801300 -79.88347626]
[-16.11465836 -65.18220520]
[-14.13331318 -50.31364059]
[-12.15196896 -35.44507599]
[-9.86611366 -11.47523785]
[-21.50410843 2.70307255]
[-11.41102123 13.79944897]
[-1.31793308 24.89582634]
[8.77515507 35.99220276]
[18.86824226 47.08858109]
[35.83591461 51.49380493]
[39.65546036 69.48662567]
[49.95672989 80.39001465]
[60.25799942 91.29340363]
[70.55927277 102.19678497]
[66.74641418 87.68947601]
[60.10910416 74.23785400]
[58.60009003 59.31394958]
[62.41030121 44.80594254]
[71.05766296 32.54938889]
[83.44811249 24.09499359]
[98.01399994 20.51241112]
[112.91244507 22.25490952]
[126.25849152 29.10202980]
[136.36358643 40.18746948]
[141.94886780 54.10684967]
[128.27894592 60.28207779]
[143.23599243 61.41651154]
[158.19302368 62.55094147]
[173.15007019 63.68537140]
[184.97373962 53.19841003]
[200.74452209 54.22698593]
[211.10589600 66.16086578]
[209.91062927 81.91989899]
[197.86787415 92.15451813]
[182.12236023 90.79270935]
[172.01564026 78.64241028]
[157.05859375 77.50798035]
[142.10156250 76.37355042]
[127.14451599 75.23912048]
[124.43909454 82.23416901]
[116.32283783 103.21931458]
[128.15077209 112.44429016]
[139.97868347 121.66926575]
[151.80661011 130.89424133]
[163.63453674 140.11921692]
[175.46246338 149.34419250]
[191.67056274 154.31753540]
[191.37843323 171.26896667]
[175.00860596 175.68087769]
[166.23748779 161.17211914]
[154.40956116 151.94714355]
[142.58163452 142.72216797]
[130.75370789 133.49719238]
[118.92578888 124.27221680]
[107.09786224 115.04724121]
[100.26760864 118.14523315]
[86.60708618 124.34122467]
[79.77683258 127.43922424]
[78.92565155 142.41505432]
[78.07447052 157.39088440]
[77.22329712 172.36671448]
[76.37211609 187.34254456]
[90.70473480 192.05831909]
[103.32791138 200.32377625]
[113.38098145 211.57536316]
[120.17851257 225.04592896]
[123.25703430 239.81701660]
[122.40665436 254.88151550]
[117.68534088 269.21231079]
[109.41501617 281.83230591]
[98.15954590 291.88101196]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 156]
[14 155]
[15 154]
[16 153]
[17 152]
[18 108]
[19 107]
[20 106]
[21 105]
[24 103]
[25 102]
[26 101]
[27 100]
[28 99]
[40 54]
[41 53]
[42 52]
[43 51]
[62 97]
[63 96]
[64 95]
[66 93]
[67 92]
[68 91]
[72 88]
[73 87]
[75 85]
[76 84]
[120 133]
[121 132]
[122 131]
[123 130]
[135 149]
[136 148]
[137 147]
[138 146]
[139 145]
[140 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
