%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:21:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGUGGAAGAAGGCUGCUAUGACUCUUUGGAUGGGAGUCUGGCAAGAGGAAAUUGGAAGAUAAAAUAAAUAAUAAGUGAAAUAAUCUGGUUA\
) } def
/len { sequence length } bind def

/coor [
[141.43463135 140.32722473]
[133.52171326 147.11061096]
[124.51956940 152.36320496]
[114.72070312 155.91435242]
[104.44351196 157.64868164]
[94.02194214 157.50981140]
[83.79460907 155.50225830]
[74.09384918 151.69125366]
[65.23486328 146.20065308]
[57.50550079 139.20883179]
[51.15692520 130.94299316]
[46.39541626 121.67172241]
[43.37569427 111.69626617]
[42.19587326 101.34075928]
[42.89429474 90.94168854]
[45.44826126 80.83694458]
[32.06047821 74.07179260]
[18.67269707 67.30664062]
[5.28491449 60.54149246]
[-8.10286808 53.77634048]
[-17.37739372 52.65293884]
[-21.81931114 46.55488968]
[-34.97356033 39.34616470]
[-48.12781143 32.13743973]
[-61.28205872 24.92871284]
[-74.43630981 17.71998596]
[-87.59055328 10.51126003]
[-100.74480438 3.30253339]
[-116.48587036 6.40065765]
[-128.62879944 -4.08403778]
[-127.85857391 -20.10859108]
[-114.76605225 -29.38033676]
[-99.39468384 -24.78678513]
[-93.53607941 -9.85171509]
[-80.38182831 -2.64298916]
[-67.22758484 4.56573725]
[-54.07333374 11.77446365]
[-40.91908264 18.98319054]
[-27.76483345 26.19191551]
[-14.61058521 33.40064240]
[-1.33771646 40.38855743]
[12.05006599 47.15370941]
[25.43784904 53.91886139]
[38.82563019 60.68401337]
[52.21341324 67.44916534]
[66.70162201 52.73126984]
[85.43813324 44.04406357]
[106.03249359 42.49588013]
[125.85720825 48.28424454]
[142.38298035 60.67065811]
[153.50141907 78.07482147]
[157.79397583 98.27626801]
[172.71864319 99.77770996]
[187.64331055 101.27914429]
[202.56797791 102.78057861]
[217.49264526 104.28201294]
[232.41731262 105.78344727]
[247.34197998 107.28488159]
[252.02967834 92.97266388]
[259.68487549 80.00300598]
[269.94952393 68.98251343]
[282.34350586 60.42664719]
[296.28717041 54.73557281]
[311.12832642 52.17547607]
[326.17282104 52.86609268]
[340.71701050 56.77512360]
[354.08065796 63.71973801]
[365.63867188 73.37512207]
[374.85046387 85.28968048]
[381.28521729 98.90613556]
[384.64196777 113.58763885]
[384.76367188 128.64749146]
[381.64468384 143.38133240]
[375.43087769 157.10002136]
[366.41284180 169.16191101]
[355.01242065 179.00285339]
[341.76278687 186.16256714]
[327.28369141 190.30618286]
[312.25228882 191.23988342]
[297.37170410 188.92001343]
[283.33786011 183.45506287]
[270.80718994 175.10064697]
[260.36575317 164.24751282]
[252.50193787 151.40327454]
[247.58351135 137.16870117]
[245.84054565 122.20954895]
[230.91587830 120.70811462]
[215.99121094 119.20668030]
[201.06654358 117.70524597]
[186.14187622 116.20381165]
[171.21720886 114.70237732]
[156.29254150 113.20093536]
[153.00807190 123.09239197]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 45]
[17 44]
[18 43]
[19 42]
[20 41]
[22 40]
[23 39]
[24 38]
[25 37]
[26 36]
[27 35]
[28 34]
[52 92]
[53 91]
[54 90]
[55 89]
[56 88]
[57 87]
[58 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
