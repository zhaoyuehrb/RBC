%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 14:57:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUACAAGUGCUCACAGACUAGAACUUAACGGAACAAGUCUAGGACAGAAGUUAAGAUCUGAUUAUUUACUUUGUUUAUUGUCUAUAUGCCUUUUAAAAAAAUAAACUUGUUAUGCAAAAUAAAACAUUUGGGUAAGUUGUUUUAGUAUCAU\
) } def
/len { sequence length } bind def

/coor [
[99.57263947 336.77517700]
[84.46240234 339.21221924]
[69.95408630 334.33703613]
[59.38160706 323.26989746]
[55.17444229 308.55398560]
[58.29936218 293.57089233]
[68.03829193 281.76361084]
[82.15328217 275.84536743]
[83.38389587 260.89593506]
[84.61450958 245.94650269]
[85.84512329 230.99707031]
[87.07573700 216.04763794]
[77.51802063 199.28018188]
[89.09046173 182.82397461]
[89.70628357 167.83662415]
[90.32211304 152.84927368]
[90.93793488 137.86192322]
[76.22093201 130.82534790]
[65.67884064 118.37672424]
[51.33878326 122.77703094]
[36.99872208 127.17733002]
[22.65865898 131.57762146]
[8.31859779 135.97793579]
[0.97821742 141.52000427]
[-6.36123848 140.31809998]
[-20.78862381 144.42304993]
[-35.21600723 148.52798462]
[-40.42643738 163.14410400]
[-53.25188828 171.87838745]
[-68.76071167 171.37229919]
[-80.98944092 161.82044983]
[-85.23589325 146.89573669]
[-79.86721039 132.33699036]
[-66.94776154 123.74237061]
[-51.44534683 124.41666412]
[-39.32095337 134.10060120]
[-24.89356804 129.99566650]
[-10.46618366 125.89071655]
[3.91829753 121.63787079]
[18.25835800 117.23756409]
[32.59841919 112.83726501]
[46.93848038 108.43696594]
[61.27854156 104.03666687]
[59.26898956 91.86135864]
[61.22684860 78.90325165]
[67.41165161 66.48616028]
[55.25832367 57.69431686]
[43.10498810 48.90247345]
[30.95165634 40.11063004]
[16.24634933 45.06377029]
[1.44821906 40.39526367]
[-7.75255251 27.90024757]
[-7.81808090 12.38331032]
[1.27683127 -0.18896887]
[16.03500366 -4.98229218]
[30.78162003 -0.15352885]
[39.84630203 12.44056225]
[39.74349976 27.95729828]
[51.89683151 36.74914169]
[64.05016327 45.54098129]
[76.20349884 54.33282471]
[83.57579803 52.95470428]
[77.12527466 39.41251755]
[70.67475891 25.87033081]
[61.40728760 14.07567215]
[61.67751312 -0.92189401]
[71.36386108 -12.37504578]
[86.10849762 -15.13107491]
[99.27789307 -7.95005989]
[104.94721222 5.93730116]
[100.56624603 20.28264427]
[99.44332123 35.24055099]
[98.32039642 50.19845963]
[105.69268799 48.82033920]
[113.84935760 36.23189926]
[122.00601959 23.64346123]
[130.16268921 11.05502129]
[138.31935120 -1.53341770]
[146.47601318 -14.12185669]
[154.63269043 -26.71029663]
[144.77290344 -38.15413666]
[138.53787231 -51.91280746]
[136.43304443 -66.87096405]
[138.62902832 -81.81600189]
[144.94783020 -95.53640747]
[154.87719727 -106.91992188]
[167.61219788 -115.04373932]
[182.12046814 -119.24929047]
[197.22589111 -119.19565582]
[211.70393372 -114.88718414]
[224.38093567 -106.67314148]
[234.22920227 -95.21939850]
[240.45040894 -81.45446777]
[242.54022217 -66.49420929]
[240.32920837 -51.55138016]
[233.99664307 -37.83732986]
[224.05584717 -26.46379662]
[211.31268311 -18.35277939]
[196.80018616 -14.16180515]
[181.69483948 -14.23061466]
[167.22113037 -18.55363083]
[159.06445312 -5.96519136]
[150.90779114 6.62324810]
[142.75112915 19.21168709]
[134.59446716 31.80012703]
[126.43779755 44.38856506]
[118.28112793 56.97700500]
[130.05094910 66.78425598]
[137.55815125 79.39587402]
[140.30834961 93.15777588]
[138.39952087 106.41273499]
[152.44149780 111.68747711]
[166.48347473 116.96221924]
[180.52543640 122.23696136]
[196.16503906 119.84664917]
[205.35862732 131.56532288]
[219.40060425 136.84007263]
[233.44258118 142.11480713]
[247.48455811 147.38954163]
[260.36254883 138.73295593]
[275.86804199 139.33274841]
[288.03881836 148.95832825]
[292.19497681 163.90844727]
[286.73843384 178.43446350]
[273.76727295 186.95085144]
[258.26919556 186.18287659]
[246.20356750 176.42584229]
[242.20980835 161.43151855]
[228.16783142 156.15678406]
[214.12585449 150.88203430]
[200.08389282 145.60729980]
[185.44866943 148.37489319]
[175.25070190 136.27894592]
[161.20872498 131.00419617]
[147.16674805 125.72945404]
[133.12477112 120.45471191]
[121.50428772 132.45321655]
[105.92529297 138.47775269]
[105.30946350 153.46510315]
[104.69364166 168.45245361]
[104.07781219 183.43980408]
[111.94821167 191.05953979]
[114.24417114 201.54536438]
[110.43731689 211.34587097]
[102.02516937 217.27824402]
[100.79455566 232.22767639]
[99.56394196 247.17710876]
[98.33332825 262.12655640]
[97.10272217 277.07598877]
[110.05990601 285.22274780]
[117.73690796 298.46368408]
[118.36959839 313.75610352]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 149]
[9 148]
[10 147]
[11 146]
[12 145]
[14 141]
[15 140]
[16 139]
[17 138]
[19 43]
[20 42]
[21 41]
[22 40]
[23 39]
[25 38]
[26 37]
[27 36]
[46 61]
[47 60]
[48 59]
[49 58]
[74 107]
[75 106]
[76 105]
[77 104]
[78 103]
[79 102]
[80 101]
[111 136]
[112 135]
[113 134]
[114 133]
[116 131]
[117 130]
[118 129]
[119 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
