%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 00:37:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGACUCCACCUGGCACCUAUGCCACCAAUGGCCCCUGAACGGGUAUCUAGGCCCACCCUUAAUAAAGAUGAGCUGCUCAUUCCCA\
) } def
/len { sequence length } bind def

/coor [
[49.42174530 116.74641418]
[34.66007996 119.40970612]
[19.89841080 122.07300568]
[5.13674259 124.73630524]
[-0.70996118 134.24551392]
[-10.67773533 138.75502014]
[-21.24145317 136.94332886]
[-28.81575584 129.67794800]
[-43.72980881 131.28138733]
[-58.64386368 132.88481140]
[-69.73289490 148.02081299]
[-88.02390289 150.43991089]
[-102.17768860 139.09848022]
[-116.93935394 141.76177979]
[-131.70101929 144.42507935]
[-146.46269226 147.08837891]
[-161.22436523 149.75167847]
[-173.38865662 160.74993896]
[-188.91038513 155.45765686]
[-191.82209778 139.31906128]
[-179.12849426 128.93617249]
[-163.88764954 134.99000549]
[-149.12599182 132.32670593]
[-134.36431885 129.66340637]
[-119.60265350 127.00011444]
[-104.84098053 124.33681488]
[-100.38568115 113.54731750]
[-91.11473083 106.25623322]
[-79.33927155 104.43255615]
[-68.06996918 108.66296387]
[-60.24729156 117.97074890]
[-45.33323669 116.36732483]
[-30.41918182 114.76390076]
[-15.93990517 102.15583038]
[2.47344470 109.97463989]
[17.23511314 107.31134033]
[31.99678040 104.64804077]
[46.75844955 101.98474121]
[49.67694855 82.50164032]
[59.47588730 65.41101074]
[74.81549835 53.04957199]
[93.59846497 47.10744476]
[113.25669098 48.39707184]
[118.99694061 34.53887939]
[124.73719025 20.68068695]
[130.47744751 6.82249355]
[124.19860840 -7.68101645]
[130.09193420 -22.34540176]
[144.66102600 -28.47054482]
[159.26228333 -22.42250633]
[165.23304749 -7.78947878]
[159.03097534 6.74702072]
[144.33563232 12.56274509]
[138.59538269 26.42093849]
[132.85513306 40.27913284]
[127.11488342 54.13732529]
[132.57138062 57.83713150]
[137.52917480 62.18249512]
[141.91235352 67.10688782]
[145.65380859 72.53490448]
[148.69625854 78.38343811]
[150.99313354 84.56294250]
[152.50923157 90.97880554]
[153.22137451 97.53279114]
[153.11863708 104.12455750]
[152.20260620 110.65316772]
[150.48728943 117.01866913]
[147.99897766 123.12359619]
[144.77574158 128.87448120]
[156.11198425 138.69738770]
[167.44822693 148.52029419]
[178.78446960 158.34320068]
[190.12071228 168.16612244]
[201.45695496 177.98902893]
[217.38688660 183.79193115]
[216.22059631 200.70571899]
[199.64495850 204.26721191]
[191.63404846 189.32527161]
[180.29780579 179.50236511]
[168.96156311 169.67945862]
[157.62532043 159.85653687]
[146.28906250 150.03363037]
[134.95281982 140.21072388]
[120.14691162 149.32244873]
[103.19586945 153.18260193]
[85.90454102 151.38015747]
[70.11402130 144.10704041]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[4 35]
[8 33]
[9 32]
[10 31]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[43 56]
[44 55]
[45 54]
[46 53]
[69 83]
[70 82]
[71 81]
[72 80]
[73 79]
[74 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
