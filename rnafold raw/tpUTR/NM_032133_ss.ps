%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 02:31:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUCGGGCCCAAGCAACCUUCUGGAAAACGGGUUAAUAAAUAAAUCAAUAAAGAACCUUCAAGUUUCUACUA\
) } def
/len { sequence length } bind def

/coor [
[74.88062286 171.09477234]
[59.71789551 163.74011230]
[46.56733704 153.20150757]
[36.08584595 140.00538635]
[28.79699326 124.81092072]
[25.06486702 108.37709808]
[25.07589722 91.52481842]
[10.41256905 88.36463165]
[-4.25075960 85.20444489]
[-18.91408920 82.04425049]
[-33.57741547 78.88406372]
[-41.93398285 90.47729492]
[-54.07137680 97.93864441]
[-68.10227203 100.14737701]
[-81.86004639 96.79647064]
[-93.23333740 88.43481445]
[-100.49006653 76.37757111]
[-102.54118347 62.49946594]
[-117.05718231 58.71979523]
[-132.71476746 63.59545135]
[-144.58085632 52.27608490]
[-140.44862366 36.40608978]
[-124.56896973 32.31115723]
[-113.27751160 44.20380020]
[-98.76151276 47.98347092]
[-88.77931976 35.68494034]
[-74.41144562 28.88136292]
[-58.45673370 28.95308876]
[-44.04701996 35.93577194]
[-34.03232193 48.50359344]
[-30.41722870 64.22073364]
[-15.75389957 67.38092804]
[-1.09057081 70.54111481]
[13.57275772 73.70130157]
[28.23608589 76.86149597]
[33.45322418 64.54614258]
[40.76417923 53.34630203]
[49.93893051 43.61437225]
[60.68879318 35.65655518]
[72.67554474 29.72323418]
[85.52202606 26.00109291]
[98.82404327 24.60724831]
[112.16306305 25.58555412]
[125.11937714 28.90522766]
[137.28533936 34.46182251]
[148.27816772 42.08050156]
[157.75196838 51.52155685]
[165.40867615 62.48793411]
[171.00735474 74.63458252]
[174.37188721 87.57933044]
[175.39637756 100.91487885]
[174.04859924 114.22164154]
[170.37095642 127.08094025]
[183.76484680 133.83399963]
[197.15873718 140.58705139]
[210.55262756 147.34010315]
[226.35852051 146.64416504]
[234.23966980 159.28286743]
[247.63356018 166.03591919]
[264.49880981 167.76782227]
[267.50335693 184.45341492]
[252.30158997 191.95957947]
[240.88049316 179.42980957]
[227.48661804 172.67675781]
[212.63873291 173.85572815]
[203.79957581 160.73399353]
[190.40568542 153.98094177]
[177.01179504 147.22789001]
[163.61790466 140.47482300]
[153.03955078 153.59342957]
[139.81176758 164.03492737]
[124.59531403 171.27777100]
[108.15026855 174.96014404]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 35]
[8 34]
[9 33]
[10 32]
[11 31]
[18 25]
[19 24]
[53 69]
[54 68]
[55 67]
[56 66]
[58 64]
[59 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
