%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 11:19:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGAUUAUCACCAUGACAUUCAACCUUCCAGAAUCCUGCAGACCCUCAAUAGGGUGCCCUGCCCUCCUGUCCAUGCCUGGGCCUUCCAGGACUAGCAGAGUGGUGUAGGACAUUCAGGGAUGGGCCAGGGCAUCCUUGUACGUGGCCCCUCC\
) } def
/len { sequence length } bind def

/coor [
[117.23849487 334.38989258]
[102.15755463 335.41781616]
[87.44401550 331.95327759]
[74.40619659 324.30432129]
[64.20340729 313.15109253]
[57.74287415 299.48532104]
[55.59906769 284.52218628]
[57.96261215 269.59219360]
[64.62334442 256.02285767]
[74.98899078 245.02084351]
[88.13784790 237.56436157]
[102.90072632 234.31648254]
[104.12336731 219.36639404]
[105.34600830 204.41630554]
[106.56864166 189.46621704]
[107.79128265 174.51612854]
[108.86137390 159.55435181]
[109.77879333 144.58242798]
[110.69622040 129.61051941]
[105.12946320 124.58445740]
[97.14643097 137.28372192]
[89.16339111 149.98297119]
[82.38701630 163.36508179]
[67.63973236 166.10690308]
[56.50640488 156.05459595]
[57.73291779 141.10482788]
[70.35516357 133.00158691]
[82.17556000 123.76696777]
[93.99595642 114.53234863]
[88.42919922 109.50629425]
[73.62850952 111.94343567]
[58.82782364 114.38057709]
[46.49667740 125.19144440]
[31.05774498 119.66230774]
[28.39327621 103.48106384]
[41.24424744 93.29359436]
[56.39068222 99.57989502]
[71.19136810 97.14274597]
[85.99205780 94.70560455]
[71.00093842 94.18955994]
[57.60898972 87.43265533]
[48.28663254 75.68132782]
[44.75355530 61.10335541]
[47.66150665 46.38792419]
[56.47405243 34.24959946]
[69.56555176 26.92752838]
[84.52101135 25.77241707]
[98.58159637 30.99734879]
[109.15355682 41.63847733]
[114.28668213 55.73284149]
[113.03406525 70.68045044]
[105.62882233 83.72164154]
[115.45172882 72.38539886]
[125.27464294 61.04915619]
[135.09754944 49.71291351]
[144.92047119 38.37666702]
[154.74337769 27.04042435]
[164.56628418 15.70418072]
[174.38919067 4.36793709]
[184.21211243 -6.96830654]
[194.03501892 -18.30455017]
[203.85792542 -29.64079285]
[213.56469727 -41.07664108]
[223.15432739 -52.61089706]
[232.74395752 -64.14515686]
[242.21542358 -75.77662659]
[251.56777954 -87.50409698]
[260.92013550 -99.23156738]
[270.27246094 -110.95904541]
[265.62124634 -123.97042847]
[268.00317383 -137.47122192]
[276.68765259 -147.93844604]
[289.31390381 -152.69480896]
[302.53182983 -150.59304810]
[312.12145996 -162.12730408]
[321.71105957 -173.66156006]
[331.18255615 -185.29302979]
[340.53488159 -197.02049255]
[349.88723755 -208.74797058]
[359.23959351 -220.47544861]
[361.79458618 -236.08898926]
[375.77917480 -241.21543884]
[385.13153076 -252.94290161]
[394.48388672 -264.67037964]
[403.71612549 -276.49264526]
[412.82730103 -288.40844727]
[421.93847656 -300.32424927]
[421.01516724 -313.22875977]
[428.89901733 -322.97518921]
[440.91625977 -324.65640259]
[438.89788818 -340.33126831]
[448.62051392 -352.79104614]
[464.31585693 -354.64358521]
[476.67214966 -344.78976440]
[478.35861206 -329.07571411]
[468.37472534 -316.82427979]
[452.64370728 -315.30404663]
[450.99771118 -297.85821533]
[433.85427856 -291.21307373]
[424.74310303 -279.29727173]
[415.63192749 -267.38146973]
[414.05792236 -260.11383057]
[406.21133423 -255.31803894]
[396.85900879 -243.59056091]
[387.50665283 -231.86308289]
[385.62060547 -217.08837891]
[370.96707153 -211.12309265]
[361.61471558 -199.39562988]
[352.26235962 -187.66815186]
[342.91003418 -175.94067383]
[341.18807983 -168.70668030]
[333.24533081 -164.07192993]
[323.65570068 -152.53767395]
[314.06607056 -141.00341797]
[318.62188721 -125.26122284]
[312.85955811 -109.74253845]
[298.85595703 -100.60739136]
[281.99993896 -101.60669708]
[272.64758301 -89.87921906]
[263.29525757 -78.15174866]
[253.94290161 -66.42427826]
[252.22096252 -59.19027710]
[244.27821350 -54.55553055]
[234.68858337 -43.02127457]
[225.09896851 -31.48701477]
[223.22982788 -24.28964615]
[215.19416809 -19.81788254]
[205.37126160 -8.48163891]
[195.54835510 2.85460472]
[185.72544861 14.19084835]
[175.90252686 25.52709198]
[166.07962036 36.86333466]
[156.25671387 48.19957733]
[146.43379211 59.53582382]
[136.61088562 70.87206268]
[126.78797913 82.20831299]
[116.96506500 93.54455566]
[125.66813660 130.52793884]
[124.75071716 145.49986267]
[123.83329010 160.47177124]
[126.44341278 169.28968811]
[122.74137115 175.73876953]
[121.51873016 190.68885803]
[120.29609680 205.63894653]
[119.07345581 220.58903503]
[117.85081482 235.53912354]
[131.88983154 241.14247131]
[143.65248108 250.63623047]
[152.09281921 263.17623901]
[156.46035767 277.64746094]
[156.36672974 292.76309204]
[151.82025146 307.17910767]
[143.22520447 319.61358643]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 146]
[13 145]
[14 144]
[15 143]
[16 142]
[17 140]
[18 139]
[19 138]
[30 39]
[31 38]
[32 37]
[52 137]
[53 136]
[54 135]
[55 134]
[56 133]
[57 132]
[58 131]
[59 130]
[60 129]
[61 128]
[62 127]
[63 125]
[64 124]
[65 123]
[66 121]
[67 120]
[68 119]
[69 118]
[74 114]
[75 113]
[76 112]
[77 110]
[78 109]
[79 108]
[80 107]
[82 105]
[83 104]
[84 103]
[85 101]
[86 100]
[87 99]
[90 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
