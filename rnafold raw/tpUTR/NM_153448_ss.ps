%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 03:24:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAAGGUAUUCAUAACAGUUUUUCCAAAGUUCUUUCCUGCCAGAUAGAAAUUGUGCACAGCACAGCAUCAAGUAAUUCGUUAGAUGCUUGUUAAAUGAAGUGGGUAGGUGAACAAAGUUAACGAAUGCCCUGUUAUUUUUGUAGGCCACAUAAUUGUAGUAUUUUCAAUAAAGAUGUGACUUAAUAGUA\
) } def
/len { sequence length } bind def

/coor [
[431.64071655 489.19833374]
[425.00009155 475.71359253]
[421.52520752 461.08215332]
[421.39346313 446.03710938]
[424.61465454 431.33294678]
[431.03042603 417.70782471]
[419.23730469 408.43838501]
[407.44421387 399.16894531]
[395.65109253 389.89950562]
[383.85800171 380.63003540]
[372.06488037 371.36059570]
[360.27178955 362.09115601]
[342.79818726 360.54629517]
[336.07546997 343.41165161]
[324.13150024 334.33740234]
[312.18753052 325.26318359]
[300.24356079 316.18896484]
[293.79937744 320.65338135]
[286.52182007 323.60357666]
[278.76184082 324.89105225]
[270.89501953 324.44757080]
[263.30340576 322.28890991]
[256.35693359 318.51422119]
[250.39541626 313.30151367]
[245.71197510 306.89938354]
[242.53852844 299.61505127]
[241.03436279 291.79965210]
[241.27818298 283.83129883]
[243.26394653 276.09680176]
[246.90092468 268.97290039]
[236.42596436 258.23626709]
[225.95101929 247.49963379]
[215.47605896 236.76300049]
[205.26768494 237.55523682]
[196.12092590 232.48332214]
[191.18231201 223.01530457]
[192.30180359 212.17451477]
[182.18563843 201.09916687]
[172.06948853 190.02381897]
[161.95333862 178.94845581]
[151.83717346 167.87310791]
[141.72102356 156.79776001]
[128.80937195 164.61878967]
[114.47444916 169.53524780]
[99.36347961 171.29866028]
[84.16439819 169.80352783]
[69.57451630 165.09329224]
[56.26854706 157.35945129]
[44.86737823 146.93391418]
[35.90913773 134.27482605]
[29.82381248 119.94643402]
[26.91265297 104.59400177]
[27.33335304 88.91471100]
[31.09172058 73.62603760]
[17.10725975 68.20064545]
[3.12279916 62.77525330]
[-10.86166096 57.34986496]
[-27.81535912 57.25794983]
[-32.42028809 40.94136429]
[-18.01613426 31.99951744]
[-5.43627024 43.36540222]
[8.54819012 48.79079437]
[22.53264999 54.21618271]
[36.51711273 59.64157486]
[45.78655624 47.84846878]
[37.21100235 35.54156494]
[28.63544846 23.23466110]
[20.05989456 10.92775822]
[11.48433971 -1.37914479]
[2.90878558 -13.68604851]
[-5.76769018 -25.92201042]
[-14.54450130 -38.08620453]
[-30.06135178 -38.00258255]
[-42.64422607 -47.08282852]
[-47.45475388 -61.83540344]
[-42.64318848 -76.58763885]
[-30.05967522 -85.66699982]
[-14.54283237 -85.58229065]
[-2.05920053 -76.36607361]
[2.59100747 -61.56218719]
[-2.38030791 -46.86301422]
[6.39650297 -34.69882202]
[12.87088966 -31.10798836]
[15.21568871 -22.26160240]
[23.79124260 -9.95469952]
[32.36679840 2.35220432]
[40.94235229 14.65910721]
[49.51790619 26.96601105]
[58.09346008 39.27291489]
[70.62463379 32.55726242]
[84.17182159 28.38645554]
[98.22559357 26.90023804]
[112.26071930 28.13771057]
[125.75584412 32.03649521]
[138.21279907 38.43565750]
[149.17503357 47.08228683]
[158.24433899 57.64146423]
[165.09526062 69.70919800]
[169.48681641 82.82790375]
[171.27093506 96.50370026]
[170.39735413 110.22503662]
[166.91493225 123.48183441]
[160.96920776 135.78442383]
[152.79637146 146.68161011]
[162.91252136 157.75695801]
[173.02868652 168.83230591]
[183.14483643 179.90765381]
[193.26098633 190.98301697]
[203.37715149 202.05836487]
[222.84194946 207.25794983]
[226.21269226 226.28804016]
[236.68765259 237.02467346]
[247.16259766 247.76130676]
[257.63757324 258.49795532]
[279.92230225 253.15174866]
[300.84573364 262.19323730]
[312.10134888 281.87136841]
[309.31777954 304.24499512]
[321.26174927 313.31921387]
[333.20571899 322.39343262]
[345.14968872 331.46768188]
[358.02273560 330.50070190]
[367.78677368 338.31860352]
[369.54122925 350.29803467]
[381.33432007 359.56750488]
[393.12744141 368.83694458]
[404.92053223 378.10638428]
[416.71365356 387.37582397]
[428.50674438 396.64526367]
[440.29986572 405.91473389]
[452.02362061 396.46173096]
[465.55056763 389.85794067]
[480.20089722 386.43167114]
[495.23907471 386.35162354]
[509.91091919 389.61862183]
[523.48132324 396.06564331]
[535.27099609 405.36645508]
[544.69073486 417.05209351]
[551.27056885 430.53445435]
[554.68334961 445.13595581]
[554.76116943 460.12356567]
[551.50323486 474.74563599]
[545.07617188 488.26947021]
[556.86926270 497.53890991]
[568.66241455 506.80834961]
[580.45550537 516.07781982]
[596.08666992 518.52270508]
[601.31158447 532.47076416]
[613.10467529 541.74023438]
[624.89776611 551.00970459]
[636.69085693 560.27911377]
[648.48400879 569.54858398]
[663.96936035 567.86303711]
[675.79718018 577.43157959]
[677.30865479 592.20489502]
[689.10174561 601.47436523]
[700.89483643 610.74383545]
[712.68798828 620.01324463]
[728.31915283 622.45812988]
[733.54400635 636.40625000]
[749.20428467 634.27746582]
[761.73229980 643.91198730]
[763.69543457 659.59387207]
[753.92895508 672.01934814]
[738.22717285 673.81652832]
[725.90570068 663.91925049]
[724.27459717 648.19934082]
[709.48693848 646.41748047]
[703.41851807 631.80633545]
[691.62542725 622.53692627]
[679.83233643 613.26745605]
[668.03918457 603.99804688]
[653.32696533 606.01947021]
[641.23504639 596.78692627]
[639.21453857 581.34167480]
[627.42144775 572.07220459]
[615.62829590 562.80279541]
[603.83520508 553.53332520]
[592.04211426 544.26391602]
[577.25445557 542.48205566]
[571.18603516 527.87091064]
[559.39294434 518.60144043]
[547.59985352 509.33203125]
[535.80670166 500.06256104]
[524.18402100 509.50265503]
[510.74554443 516.12274170]
[496.16378784 519.58782959]
[481.16934204 519.72113037]
[466.51416016 516.51263428]
[452.93395996 510.12023926]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 130]
[7 129]
[8 128]
[9 127]
[10 126]
[11 125]
[12 124]
[14 121]
[15 120]
[16 119]
[17 118]
[30 114]
[31 113]
[32 112]
[33 111]
[37 109]
[38 108]
[39 107]
[40 106]
[41 105]
[42 104]
[54 64]
[55 63]
[56 62]
[57 61]
[65 89]
[66 88]
[67 87]
[68 86]
[69 85]
[70 84]
[71 82]
[72 81]
[143 184]
[144 183]
[145 182]
[146 181]
[148 179]
[149 178]
[150 177]
[151 176]
[152 175]
[155 172]
[156 171]
[157 170]
[158 169]
[160 167]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
