%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 22:47:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUCCCCCAGGAGGGACUCCAGUGGAAGUAAGCAAGGAUGAUCCUGGUGAAGUAAUGCAGCUGUGAAGCUCACCUGACCAGCUGUACAGUUCCUGUUGUUGGUUUCACAUAAAGUAAUUGCACAUUAUUUUGUCAUA\
) } def
/len { sequence length } bind def

/coor [
[79.86383820 149.63345337]
[84.07380676 135.23597717]
[83.69329071 120.24080658]
[76.27407837 121.33866882]
[69.41894531 134.68060303]
[62.56381607 148.02253723]
[55.70869064 161.36447144]
[60.77951813 176.33317566]
[53.70584869 190.46607971]
[38.68436432 195.37835693]
[24.62704468 188.15567017]
[19.87384796 173.08308411]
[27.24476242 159.10292053]
[42.36675644 154.50933838]
[49.22188187 141.16740417]
[56.07701111 127.82546997]
[62.93214035 114.48353577]
[66.31573486 106.26655579]
[71.27285004 99.86730194]
[77.23868561 95.54759216]
[83.61303711 93.42197418]
[89.79533386 93.45505524]
[95.21920013 95.46665192]
[92.85594177 80.65398407]
[90.49268341 65.84132385]
[88.12942505 51.02865601]
[85.76616669 36.21599197]
[83.40290833 21.40332985]
[73.58802032 8.99452496]
[79.22349548 -4.79281139]
[76.86023712 -19.60547447]
[74.49698639 -34.41814041]
[59.34323120 -41.84096527]
[51.64823914 -56.67195511]
[54.25272369 -73.00839996]
[65.94152832 -84.47928619]
[63.24411774 -99.23475647]
[60.54670715 -113.99023438]
[57.84929276 -128.74569702]
[54.81910324 -143.43644714]
[51.45768738 -158.05496216]
[47.93128586 -172.63455200]
[44.24035645 -187.17335510]
[31.09241676 -200.00987244]
[36.41082764 -216.69578552]
[32.39227295 -231.14746094]
[28.37371635 -245.59915161]
[24.35515785 -260.05084229]
[20.33660126 -274.50253296]
[9.47064114 -281.55349731]
[6.45281267 -293.73654175]
[12.37994862 -304.34191895]
[8.68901825 -318.88073730]
[-1.05414569 -323.95004272]
[-6.25014544 -333.37503052]
[-5.37204695 -343.88015747]
[1.04254866 -351.96585083]
[-1.98764062 -366.65661621]
[-6.82388926 -374.50729370]
[-4.91635323 -381.71343994]
[-7.61376524 -396.46890259]
[-10.31117821 -411.22436523]
[-13.00859070 -425.97985840]
[-24.03494072 -438.11868286]
[-18.77854729 -453.65258789]
[-2.64673662 -456.60162354]
[7.76546764 -443.93203735]
[1.74688196 -428.67724609]
[4.44429445 -413.92178345]
[7.14170694 -399.16632080]
[9.83911896 -384.41082764]
[12.70310307 -369.68679810]
[15.73329258 -354.99606323]
[29.63407898 -341.62634277]
[23.22782898 -322.57165527]
[26.91876030 -308.03286743]
[39.82308578 -296.19293213]
[34.78828812 -278.52108765]
[38.80684280 -264.06939697]
[42.82540131 -249.61770630]
[46.84395599 -235.16601562]
[50.86251450 -220.71434021]
[61.27475357 -214.45410156]
[64.70729828 -202.38134766]
[58.77916718 -190.86428833]
[62.47009659 -176.32548523]
[67.20470428 -170.56784058]
[66.07619476 -161.41638184]
[69.43761444 -146.79786682]
[73.00934601 -143.51264954]
[74.50255585 -137.91894531]
[72.60476685 -131.44311523]
[75.30217743 -116.68764496]
[77.99958801 -101.93217468]
[80.69700623 -87.17669678]
[93.25744629 -82.51613617]
[101.92792511 -72.16104889]
[104.34756470 -58.76351929]
[99.77471924 -45.82504654]
[89.30964661 -36.78139877]
[91.67290497 -21.96873283]
[94.03616333 -7.15606880]
[103.68202209 4.19323540]
[98.21557617 19.04007149]
[100.57883453 33.85273743]
[102.94209290 48.66540146]
[105.30535126 63.47806549]
[107.66860962 78.29072571]
[110.03186798 93.10339355]
[116.73578644 106.52194214]
[127.16107941 117.30680084]
[137.58638000 128.09165955]
[148.01167297 138.87652588]
[158.43696594 149.66139221]
[168.86225891 160.44625854]
[179.28755188 171.23110962]
[189.71284485 182.01597595]
[200.13813782 192.80084229]
[210.56343079 203.58569336]
[226.51524353 205.29420471]
[235.00335693 218.90785217]
[229.51640320 233.98342896]
[214.26350403 238.95623779]
[200.94538879 230.01156616]
[199.77856445 214.01098633]
[189.35327148 203.22613525]
[178.92797852 192.44126892]
[168.50268555 181.65640259]
[158.07739258 170.87155151]
[147.65209961 160.08668518]
[137.22680664 149.30181885]
[126.80151367 138.51695251]
[116.37621307 127.73209381]
[105.95092010 116.94723511]
[98.53170776 118.04508972]
[102.51023102 132.50785828]
[110.70938110 145.06866455]
[104.55490112 158.74792480]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 17]
[5 16]
[6 15]
[7 14]
[23 109]
[24 108]
[25 107]
[26 106]
[27 105]
[28 104]
[30 102]
[31 101]
[32 100]
[36 95]
[37 94]
[38 93]
[39 92]
[40 89]
[41 88]
[42 86]
[43 85]
[45 82]
[46 81]
[47 80]
[48 79]
[49 78]
[52 76]
[53 75]
[57 73]
[58 72]
[60 71]
[61 70]
[62 69]
[63 68]
[110 134]
[111 133]
[112 132]
[113 131]
[114 130]
[115 129]
[116 128]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
