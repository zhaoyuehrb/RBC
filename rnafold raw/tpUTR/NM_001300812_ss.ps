%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 18:59:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCCGGCGGCUCCCCAAGGUGCCUGGGCUGGUGGCGAGGGGCCCGGCCACGCUUGUUCUUCCCCCUGCGGGCUCUGUAAGCGCUGAGUG\
) } def
/len { sequence length } bind def

/coor [
[157.54965210 147.46980286]
[165.02705383 134.46638489]
[177.83627319 126.66329956]
[163.26277161 123.11183167]
[148.68927002 119.56036377]
[134.11575317 116.00890350]
[119.54225159 112.45743561]
[104.96874237 108.90596771]
[96.82936859 110.22032166]
[89.96250916 104.97645569]
[84.49477386 106.40220642]
[79.57681274 105.52793121]
[76.03484344 102.99929810]
[74.28903198 99.70571899]
[60.33485794 94.20291138]
[46.38068008 88.70009613]
[32.42650223 83.19728088]
[18.07288551 89.24801636]
[3.99975562 83.46859741]
[-1.68023813 69.74732971]
[-17.35670280 71.88252258]
[-26.35814857 60.01562500]
[-40.31232452 54.51280975]
[-54.26650238 49.00999832]
[-68.22068024 43.50718307]
[-82.61487579 50.03272247]
[-97.37773895 44.39061737]
[-103.75073242 29.92823410]
[-97.95285797 15.22584438]
[-83.42390442 9.00611687]
[-68.78363800 14.95910549]
[-62.71786499 29.55300713]
[-48.76368713 35.05582047]
[-34.80950928 40.55863571]
[-20.85533524 46.06144714]
[-6.17696667 43.53265762]
[3.82257509 55.79315186]
[17.33921432 49.64205170]
[31.56912422 55.02390289]
[37.92931747 69.24310303]
[51.88349533 74.74591827]
[65.83766937 80.24873352]
[79.79184723 85.75154877]
[94.00946045 90.53269958]
[108.52021027 94.33245850]
[123.09371948 97.88392639]
[137.66722107 101.43539429]
[152.24072266 104.98686218]
[166.81423950 108.53833008]
[181.38774109 112.08979034]
[191.23056030 109.31998444]
[199.23069763 113.61674500]
[214.19572449 112.59310913]
[229.16076660 111.56947327]
[244.12579346 110.54583740]
[259.09082031 109.52220154]
[274.05584717 108.49856567]
[279.78543091 94.39418793]
[291.02484131 84.21761322]
[305.50885010 79.94759369]
[320.34954834 82.37968445]
[332.61196899 90.97864532]
[339.89471436 103.99506378]
[354.85974121 102.97142792]
[369.82479858 101.94779205]
[381.40963745 90.84957123]
[397.28979492 93.13007355]
[405.28332520 107.03988647]
[399.25830078 121.90859985]
[383.83657837 126.33020020]
[370.84841919 116.91282654]
[355.88339233 117.93646240]
[340.91836548 118.96009827]
[335.47583008 132.84693909]
[324.49850464 143.03555298]
[310.12722778 147.46580505]
[295.19665527 145.20779419]
[282.67623901 136.65643311]
[275.07949829 123.46360016]
[260.11447144 124.48723602]
[245.14942932 125.51087189]
[230.18440247 126.53450775]
[215.21936035 127.55814362]
[200.25433350 128.58177185]
[211.55216980 138.44883728]
[216.71086121 152.53385925]
[214.45837402 167.36376953]
[205.35012817 179.28181458]
[191.63201904 185.34924316]
[176.68667603 184.06996155]
[164.19929504 175.75939941]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 50]
[4 49]
[5 48]
[6 47]
[7 46]
[8 45]
[10 44]
[14 43]
[15 42]
[16 41]
[17 40]
[20 37]
[22 35]
[23 34]
[24 33]
[25 32]
[52 84]
[53 83]
[54 82]
[55 81]
[56 80]
[57 79]
[63 73]
[64 72]
[65 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
