%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 00:48:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUGCUGAUUUUUGGAGUAGAAUUGAGUUCUGCUGAAGGAUACUGGAUCAGUGCUUUCGGGGGCUCUGUUG\
) } def
/len { sequence length } bind def

/coor [
[65.12723541 157.18238831]
[57.05968094 160.56747437]
[48.41133499 160.29536438]
[40.74516296 156.49534607]
[27.86370468 164.18092346]
[14.98224640 171.86648560]
[2.10078669 179.55206299]
[1.69063127 194.97396851]
[-7.01100636 207.71308899]
[-21.22746468 213.70440674]
[-36.42232513 211.03611755]
[-47.74695969 200.55964661]
[-51.58772278 185.61802673]
[-46.71903992 170.97906494]
[-34.69448471 161.31398010]
[-19.35105705 159.70689392]
[-5.58478451 166.67060852]
[7.29667473 158.98503113]
[20.17813492 151.29946899]
[33.05959320 143.61389160]
[40.95831680 123.61386871]
[63.10759735 121.82512665]
[74.48218536 112.04663849]
[85.85677338 102.26815796]
[90.66223145 89.13806915]
[104.36473846 86.35725403]
[115.73932648 76.57877350]
[127.11391449 66.80028534]
[138.48851013 57.02180099]
[149.86308289 47.24331665]
[161.23767090 37.46483231]
[163.97369385 30.89409828]
[168.97554016 27.44143295]
[174.03643799 27.38626289]
[186.20951843 18.62178993]
[198.38261414 9.85731792]
[210.55569458 1.09284508]
[222.72877502 -7.67162752]
[234.90187073 -16.43610001]
[247.07495117 -25.20057297]
[252.41606140 -32.99725342]
[259.96563721 -34.06689453]
[272.50451660 -42.29954147]
[285.04339600 -50.53218460]
[297.58227539 -58.76482773]
[310.12115479 -66.99747467]
[320.04299927 -80.74495697]
[335.99987793 -75.01654816]
[334.91262817 -58.09749603]
[318.35379028 -54.45859146]
[305.81491089 -46.22594452]
[293.27603149 -37.99330139]
[280.73715210 -29.76065826]
[268.19827271 -21.52801323]
[255.83943176 -13.02748680]
[243.66633606 -4.26301432]
[231.49325562 4.50145864]
[219.32017517 13.26593113]
[207.14707947 22.03040314]
[194.97399902 30.79487610]
[182.80090332 39.55934906]
[171.01615906 48.83942032]
[159.64157104 58.61790466]
[148.26698303 68.39639282]
[136.89239502 78.17487335]
[125.51781464 87.95336151]
[114.14322662 97.73184204]
[109.33776855 110.86193085]
[95.63526154 113.64274597]
[84.26067352 123.42122650]
[72.88608551 133.19970703]
[73.90203857 142.18037415]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 20]
[5 19]
[6 18]
[7 17]
[22 71]
[23 70]
[24 69]
[26 67]
[27 66]
[28 65]
[29 64]
[30 63]
[31 62]
[34 61]
[35 60]
[36 59]
[37 58]
[38 57]
[39 56]
[40 55]
[42 54]
[43 53]
[44 52]
[45 51]
[46 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
