%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 19:50:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCACAGAGCCUGGGACAACAAAAACGGACAAGGCCAGAAACAGCUUCAUAUGGACACUGGGACUUAGCCCCAAGCCUGGGUGUCCUCUGAGGCCAGCCUCUCCACCUUCUGAGCCUGCGCCCACACUAUUGAAAACACUAAUGAAAGUACUCCUCUGAA\
) } def
/len { sequence length } bind def

/coor [
[234.98106384 304.27600098]
[244.93498230 293.01458740]
[235.34246826 281.48272705]
[225.74995422 269.95086670]
[216.15745544 258.41900635]
[202.06999207 253.58241272]
[199.19313049 238.02494812]
[189.60061646 226.49310303]
[180.00810242 214.96124268]
[173.28071594 211.81488037]
[170.34443665 203.11344910]
[160.97595215 191.39886475]
[154.31045532 188.12342834]
[151.54241943 179.36703491]
[137.65180969 173.99113464]
[135.37663269 158.33438110]
[126.23566437 146.44140625]
[117.09468842 134.54844666]
[107.61918640 137.78585815]
[97.62952423 138.47341919]
[87.79982758 136.56472778]
[78.79342651 132.18858337]
[71.21807861 125.64028931]
[65.58498383 117.36174774]
[62.27427673 107.91159821]
[61.50936890 97.92756653]
[63.34188080 88.08338165]
[67.64814758 79.04335022]
[74.13757324 71.41751862]
[66.42990112 58.54926682]
[58.72223663 45.68101501]
[46.39643860 41.77641678]
[40.24937820 30.86016846]
[43.11294174 19.07656670]
[35.65470886 6.06216049]
[28.19647598 -6.95224524]
[20.73824501 -19.96665192]
[12.34902954 -19.23469162]
[4.15289021 -21.01473808]
[-3.11798143 -25.12722778]
[-8.82015324 -31.18515968]
[-12.45588017 -38.63044357]
[-13.71651745 -46.78527832]
[-12.50863075 -54.91384506]
[-8.96061516 -62.28870392]
[-3.40936947 -68.25588989]
[-9.31613636 -82.04393005]
[-15.22290230 -95.83197021]
[-21.12966919 -109.62001038]
[-27.03643608 -123.40805817]
[-32.94320297 -137.19609070]
[-45.96726227 -140.74031067]
[-54.43651199 -150.99877930]
[-55.42111206 -164.06967163]
[-48.78440857 -175.14668274]
[-54.42435074 -189.04600525]
[-60.06428909 -202.94532776]
[-65.70423126 -216.84465027]
[-71.34416962 -230.74395752]
[-76.98411560 -244.64328003]
[-82.62405396 -258.54260254]
[-94.98241425 -268.42092896]
[-92.59826660 -283.12350464]
[-98.23821259 -297.02282715]
[-110.59656525 -306.90115356]
[-108.21242523 -321.60369873]
[-113.85236359 -335.50302124]
[-119.49230957 -349.40234375]
[-134.14523315 -355.32412720]
[-140.24208069 -369.90509033]
[-134.16571045 -384.49456787]
[-119.52111053 -390.43692017]
[-104.99668121 -384.20663452]
[-99.20949554 -369.50003052]
[-105.59298706 -355.04229736]
[-99.95304871 -341.14297485]
[-94.31310272 -327.24365234]
[-82.35815430 -318.35949707]
[-84.33889008 -302.66275024]
[-78.69895172 -288.76342773]
[-66.74399567 -279.87927246]
[-68.72473907 -264.18255615]
[-63.08479309 -250.28321838]
[-57.44485474 -236.38391113]
[-51.80491257 -222.48458862]
[-46.16497040 -208.58526611]
[-40.52502823 -194.68594360]
[-34.88508987 -180.78663635]
[-19.14400101 -174.92741394]
[-12.35609341 -159.19604492]
[-19.15515900 -143.10285950]
[-13.24839306 -129.31481934]
[-7.34162664 -115.52677917]
[-1.43486023 -101.73873901]
[4.47190619 -87.95069885]
[10.37867260 -74.16265106]
[31.46777153 -68.23917389]
[41.53891373 -48.48059464]
[33.75265121 -27.42488480]
[41.21088409 -14.41047859]
[48.66911697 -1.39607227]
[56.12734985 11.61833382]
[71.74244690 19.58197594]
[71.59048462 37.97335052]
[79.29815674 50.84159851]
[87.00582123 63.70985031]
[107.01551819 62.09741211]
[125.12245178 70.76498413]
[136.41563416 87.36174011]
[137.83209229 107.38626099]
[128.98765564 125.40747070]
[138.12863159 137.30043030]
[147.26960754 149.19340515]
[161.81402588 155.41996765]
[163.43537903 170.22605896]
[172.69053650 182.03038025]
[182.05902100 193.74496460]
[191.53996277 205.36872864]
[201.13247681 216.90058899]
[210.72499084 228.43244934]
[225.49856567 234.09387207]
[227.68930054 248.82649231]
[237.28181458 260.35833740]
[246.87432861 271.89019775]
[256.46682739 283.42205811]
[269.35241699 275.68499756]
[283.26809692 270.00567627]
[297.88763428 266.51724243]
[312.86837769 265.30148315]
[327.85910034 266.38687134]
[342.50845337 269.74795532]
[356.47302246 275.30599976]
[369.42541504 282.93066406]
[381.06207275 292.44323730]
[391.11016846 303.62069702]
[399.33416748 316.20111084]
[405.54129028 329.88949585]
[409.58605957 344.36499023]
[411.37362671 359.28829956]
[410.86209106 374.30957031]
[408.06347656 389.07669067]
[403.04333496 403.24353027]
[395.91940308 416.47793579]
[386.85864258 428.46972656]
[376.07342529 438.93777466]
[363.81661987 447.63668823]
[350.37551880 454.36257935]
[336.06521606 458.95773315]
[321.22116089 461.31448364]
[306.19131470 461.37756348]
[291.32800293 459.14550781]
[276.97961426 454.67062378]
[263.48254395 448.05780029]
[251.15315247 439.46209717]
[240.28045654 429.08493042]
[231.11933899 417.16964722]
[223.88455200 403.99548340]
[218.74568176 389.87130737]
[215.82319641 375.12820435]
[215.18559265 360.11172485]
[216.84783936 345.17395020]
[220.77093506 330.66500854]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 125]
[3 124]
[4 123]
[5 122]
[7 120]
[8 119]
[9 118]
[11 117]
[12 116]
[14 115]
[16 113]
[17 112]
[18 111]
[29 106]
[30 105]
[31 104]
[34 102]
[35 101]
[36 100]
[37 99]
[46 96]
[47 95]
[48 94]
[49 93]
[50 92]
[51 91]
[55 88]
[56 87]
[57 86]
[58 85]
[59 84]
[60 83]
[61 82]
[63 80]
[64 79]
[66 77]
[67 76]
[68 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
