%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 02:33:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCUCCAGGAUUUGAGGGGCUUAAGACACCCCCAACCAAAAAAAACAAAAACAAAAAAAACCCCCAAAGUAUCUAAUUAAAAACAAGGUGUGAAUGGUA\
) } def
/len { sequence length } bind def

/coor [
[100.24541473 112.12036896]
[91.20589447 124.09062958]
[82.16637421 136.06088257]
[73.12685394 148.03114319]
[64.08734131 160.00140381]
[70.14782715 174.11402893]
[68.32411957 189.36425781]
[59.10678101 201.64987183]
[44.97523499 207.66609192]
[29.73079109 205.79458618]
[17.47413063 196.53878784]
[11.50223351 182.38845825]
[13.42150879 167.14994812]
[22.71568298 154.92236328]
[36.88466644 148.99485779]
[52.11708069 150.96188354]
[61.15660095 138.99162292]
[70.19612122 127.02136230]
[79.23564148 115.05110931]
[88.27515411 103.08084869]
[96.94176483 90.83789825]
[105.22724152 78.33386230]
[113.51271057 65.82982635]
[106.78706360 52.09254074]
[107.83357239 36.93333435]
[116.27129364 24.41649246]
[129.75111389 17.84760857]
[144.60899353 18.90083694]
[152.89447021 6.39680147]
[161.17993164 -6.10723448]
[169.46540833 -18.61127090]
[177.75088501 -31.11530495]
[166.20401001 -40.71305847]
[155.76254272 -51.50300980]
[146.54890442 -63.35864258]
[138.67111206 -76.14096832]
[132.22154236 -89.70010376]
[127.27581787 -103.87709045]
[123.89190674 -118.50570679]
[122.10948944 -133.41444397]
[121.94946289 -148.42848206]
[123.41371155 -163.37182617]
[126.48506165 -178.06922913]
[131.12750244 -192.34841919]
[137.28660583 -206.04194641]
[144.89016724 -218.98927307]
[153.84901428 -231.03858948]
[164.05813599 -242.04862976]
[175.39782715 -251.89031982]
[187.73513794 -260.44824219]
[200.92539978 -267.62210083]
[214.81398010 -273.32772827]
[229.23805237 -277.49829102]
[244.02848816 -280.08483887]
[259.01187134 -281.05709839]
[274.01254272 -280.40362549]
[288.85464478 -278.13208008]
[303.36410522 -274.26913452]
[317.37084961 -268.86004639]
[330.71066284 -261.96826172]
[343.22711182 -253.67456055]
[354.77346802 -244.07618713]
[365.21435547 -233.28567505]
[374.42736816 -221.42953491]
[382.30447388 -208.64678955]
[388.75329590 -195.08731079]
[393.69827271 -180.91004944]
[397.08139038 -166.28125000]
[398.86300659 -151.37243652]
[399.02221680 -136.35836792]
[397.55718994 -121.41511536]
[394.48504639 -106.71786499]
[389.84182739 -92.43893433]
[383.68197632 -78.74574280]
[376.07772827 -65.79882812]
[367.11822510 -53.74998856]
[356.90850830 -42.74048996]
[345.56829834 -32.89941788]
[333.23052979 -24.34214973]
[320.03988647 -17.16901588]
[306.15100098 -11.46411800]
[291.72668457 -7.29434204]
[276.93612671 -4.70857763]
[261.95266724 -3.73714113]
[246.95204163 -4.39142227]
[232.11007690 -6.66374969]
[217.60081482 -10.52748203]
[203.59436035 -15.93731785]
[190.25492859 -22.82983208]
[181.96945190 -10.32579517]
[173.68397522 2.17824030]
[165.39849854 14.68227577]
[157.11302185 27.18631172]
[163.87432861 40.45847321]
[163.07925415 55.43257904]
[154.84133911 68.08180237]
[141.28904724 74.95438385]
[126.01674652 74.11529541]
[117.73127747 86.61933136]
[109.44580078 99.12336731]
[109.30995178 104.55657196]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[3 18]
[4 17]
[5 16]
[21 100]
[22 99]
[23 98]
[28 93]
[29 92]
[30 91]
[31 90]
[32 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
