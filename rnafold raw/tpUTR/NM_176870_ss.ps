%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 17:14:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUGGGAACAGCUCUUCUCCCAGAUGUUAAUAGAACAAGCUGCACAACCUGGAUUUUUUUUCAAUACGAUACUGAGCCAUUUGCUGCAUUUCUUUUUAUAUUAAAUAUGUGAGUGACAAUAAAACAAUUUUGACUUGAAUCUUA\
) } def
/len { sequence length } bind def

/coor [
[93.55620575 144.78858948]
[93.07123566 160.60235596]
[79.87988281 167.51882935]
[72.14657593 180.37167358]
[64.41326904 193.22453308]
[56.67995834 206.07739258]
[48.94665146 218.93025208]
[56.45480347 232.32887268]
[56.24169540 247.68629456]
[48.36464691 260.87142944]
[34.94255066 268.33755493]
[19.58588219 268.07629395]
[6.42550421 260.15795898]
[-0.99850428 246.71252441]
[-0.68912321 231.35675049]
[7.27042532 218.22125244]
[20.73906326 210.83943176]
[36.09379196 211.19694519]
[43.82710266 198.34408569]
[51.56040955 185.49122620]
[59.29371643 172.63836670]
[67.02702332 159.78550720]
[66.95885468 144.89106750]
[80.70335388 137.05528259]
[64.06709290 114.43459320]
[66.21802521 88.55226898]
[83.36177063 71.94920349]
[78.88132477 57.63397980]
[74.40088654 43.31875610]
[69.92044067 29.00353241]
[65.43999481 14.68830967]
[60.95955658 0.37308544]
[46.05656052 -3.06900072]
[34.95073700 -13.43999672]
[30.55635452 -27.88145638]
[33.95777512 -42.48578262]
[44.14397430 -53.35348511]
[39.66352844 -67.66870880]
[35.18308640 -81.98393250]
[19.73824883 -94.86232758]
[24.59053802 -113.53503418]
[19.49418449 -127.64273071]
[14.39782906 -141.75042725]
[9.30147457 -155.85812378]
[4.05259180 -169.90979004]
[-1.34820271 -183.90376282]
[-6.74899721 -197.89775085]
[-18.24211502 -203.85769653]
[-22.43004799 -215.68270874]
[-17.57040215 -226.81077576]
[-22.66675758 -240.91848755]
[-27.76311111 -255.02618408]
[-33.66467667 -262.09732056]
[-32.81343842 -269.49508667]
[-37.60296249 -283.70989990]
[-42.39248657 -297.92468262]
[-57.36655426 -301.04309082]
[-68.69445038 -311.17105103]
[-73.40067291 -325.51391602]
[-70.31644440 -340.18850708]
[-60.36807632 -351.27435303]
[-65.15760040 -365.48913574]
[-78.83341980 -373.87670898]
[-80.65940857 -389.81552124]
[-69.23481750 -401.07864380]
[-53.32361984 -399.02603149]
[-45.13152313 -385.23220825]
[-50.94280243 -370.27865601]
[-46.15328217 -356.06387329]
[-31.52459717 -353.25900269]
[-20.18858337 -343.44317627]
[-15.25523949 -329.17681885]
[-18.14411736 -314.25866699]
[-28.17768860 -302.71420288]
[-23.38816452 -288.49942017]
[-18.59864235 -274.28460693]
[-13.65541267 -260.12252808]
[-8.55905819 -246.01483154]
[-3.46270323 -231.90713501]
[10.53923512 -221.38076782]
[7.24498081 -203.29853821]
[12.64577579 -189.30456543]
[18.04656982 -175.31059265]
[23.42914009 -170.16474915]
[23.40917397 -160.95448303]
[28.50552750 -146.84678650]
[33.60188293 -132.73908997]
[38.69823837 -118.63138580]
[48.38227081 -115.09756470]
[54.62088013 -106.61565399]
[55.13096619 -95.87808990]
[49.49831009 -86.46437073]
[53.97875214 -72.14914703]
[58.45919800 -57.83392715]
[73.02368164 -54.71280289]
[84.14437866 -44.65367508]
[88.76749420 -30.28380585]
[85.55609894 -15.43174362]
[75.27478027 -4.10735750]
[79.75521851 10.20786667]
[84.23566437 24.52309036]
[88.71611023 38.83831406]
[93.19654846 53.15353775]
[97.67699432 67.46875763]
[108.83226776 67.24665833]
[119.83783722 70.88315582]
[129.35276794 78.23503113]
[136.12269592 88.69306183]
[139.14097595 101.22663879]
[137.78881836 114.48374939]
[131.93539429 126.93669891]
[143.97442627 135.88441467]
[156.01345825 144.83213806]
[168.05247498 153.77986145]
[183.74394226 155.80189514]
[189.34346008 169.60386658]
[205.03492737 171.62590027]
[210.63444519 185.42788696]
[222.67347717 194.37561035]
[234.71250916 203.32333374]
[250.30960083 200.77256775]
[263.09310913 210.06541443]
[265.47885132 225.68861389]
[256.05133057 238.37316895]
[240.40380859 240.59356689]
[227.81964111 231.03250122]
[225.76478577 215.36236572]
[213.72575378 206.41464233]
[201.68672180 197.46691895]
[186.85638428 196.08488464]
[180.39575195 181.64289856]
[165.56539917 180.26087952]
[159.10476685 165.81889343]
[147.06573486 156.87117004]
[135.02670288 147.92344666]
[122.98766327 138.97572327]
[115.62979889 140.42893982]
[121.90528107 154.05313110]
[131.69155884 165.42102051]
[129.83840942 180.30610657]
[117.56353760 188.92744446]
[102.93272400 185.61999512]
[95.55982208 172.55705261]
[100.28944397 158.32237244]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 24]
[3 22]
[4 21]
[5 20]
[6 19]
[7 18]
[27 104]
[28 103]
[29 102]
[30 101]
[31 100]
[32 99]
[37 94]
[38 93]
[39 92]
[41 88]
[42 87]
[43 86]
[44 85]
[45 83]
[46 82]
[47 81]
[50 79]
[51 78]
[52 77]
[54 76]
[55 75]
[56 74]
[61 69]
[62 68]
[111 136]
[112 135]
[113 134]
[114 133]
[116 131]
[118 129]
[119 128]
[120 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
