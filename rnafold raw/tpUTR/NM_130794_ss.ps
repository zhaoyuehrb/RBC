%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 21:21:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUCCUGGAGUGUACAACUGCGGCCACUGCAUGUGAGAGAAUCCUGCAAUGGGCAAUAAUCCUUAAUAUAGGCAAUAAAUGUUUGUCAACAUAUUCUCUUA\
) } def
/len { sequence length } bind def

/coor [
[89.94218445 117.93295288]
[78.33796692 127.43779755]
[66.73374176 136.94264221]
[60.96051407 151.67289734]
[46.21171951 153.75192261]
[34.60749817 163.25675964]
[29.84670258 171.25682068]
[22.50137329 172.86799622]
[16.28161430 187.41534424]
[1.47627723 189.04360962]
[-10.41240883 198.19015503]
[-22.30109406 207.33668518]
[-25.79237747 222.99525452]
[-40.27410126 229.89881897]
[-54.63712311 222.75157166]
[-57.86336517 207.03627014]
[-47.47792816 194.80833435]
[-31.44763184 195.44801331]
[-19.55894661 186.30146790]
[-7.67026043 177.15493774]
[-2.30085897 163.26181030]
[13.35483551 160.97930908]
[25.10265541 151.65254211]
[36.70687866 142.14768982]
[41.65009308 128.09729004]
[57.22890091 125.33841705]
[68.83312225 115.83357239]
[80.43733978 106.32872772]
[79.46585846 98.95145416]
[81.18375397 91.71150208]
[85.36602020 85.55710602]
[91.46492004 81.29431152]
[98.68166351 79.48141479]
[106.07107544 80.35585785]
[112.66534424 83.80310822]
[125.57880402 76.17142487]
[138.49226379 68.53974152]
[151.40571594 60.90805817]
[164.31918335 53.27637482]
[177.23263550 45.64469147]
[190.14610291 38.01300812]
[203.05955505 30.38132668]
[215.97302246 22.74964333]
[213.90484619 7.71640110]
[217.73953247 -6.92389488]
[226.86257935 -18.94818497]
[239.85899353 -26.54298019]
[254.73260498 -28.57783699]
[269.21267700 -24.77353096]
[281.10061646 -15.73989677]
[294.01406860 -23.37158012]
[306.92752075 -31.00326157]
[319.84097290 -38.63494492]
[332.75442505 -46.26662827]
[345.66790771 -53.89831161]
[358.58135986 -61.52999496]
[356.76910400 -78.45631409]
[362.43869019 -94.44954681]
[374.42990112 -106.37802887]
[390.34945679 -111.92774963]
[407.04891968 -110.05116272]
[421.24710083 -101.16452789]
[433.67129517 -109.56926727]
[446.09545898 -117.97401428]
[448.84356689 -133.53753662]
[461.83956909 -142.53085327]
[477.37316895 -139.61836243]
[486.22857666 -126.52799988]
[483.15200806 -111.02605438]
[469.96875000 -102.30954742]
[454.50021362 -105.54982758]
[442.07601929 -97.14508820]
[429.65185547 -88.74034119]
[432.60324097 -75.90480804]
[430.96054077 -62.80469513]
[424.90179443 -51.03799820]
[415.14514160 -42.04772568]
[402.86361694 -36.94493866]
[389.54437256 -36.37146378]
[376.80828857 -40.41926575]
[366.21304321 -48.61653519]
[353.29959106 -40.98485184]
[340.38610840 -33.35316849]
[327.47265625 -25.72148705]
[314.55920410 -18.08980370]
[301.64575195 -10.45812035]
[288.73229980 -2.82643771]
[290.91247559 11.94434834]
[287.26150513 26.46385193]
[278.30557251 38.51193237]
[265.38442993 46.23407364]
[250.45106506 48.42681122]
[235.77656555 44.72519684]
[223.60470581 35.66310120]
[210.69123840 43.29478455]
[197.77778625 50.92646790]
[184.86431885 58.55815125]
[171.95086670 66.18983459]
[159.03739929 73.82151794]
[146.12394714 81.45320129]
[133.21049500 89.08488464]
[120.29702759 96.71656799]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[3 26]
[5 24]
[6 23]
[8 22]
[10 20]
[11 19]
[12 18]
[35 102]
[36 101]
[37 100]
[38 99]
[39 98]
[40 97]
[41 96]
[42 95]
[43 94]
[50 87]
[51 86]
[52 85]
[53 84]
[54 83]
[55 82]
[56 81]
[62 73]
[63 72]
[64 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
