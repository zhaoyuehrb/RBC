%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 21:47:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAGAAAACAAAAUAGAACCCUGAGCACUGGAGGAAGAGCGCCUGUGCUGUGGUCUUAUCCUAUGUGGAAUCCCCCAAAGUCUCUGGUUUAAUUCUUUGCAAUUAUAAUAACCUGGCUGUGAGGUUCAGUUAUUAUUAAUAAAGAAAUUAUUAGACAU\
) } def
/len { sequence length } bind def

/coor [
[166.80628967 119.34830475]
[158.05944824 102.95381165]
[143.10568237 104.13069916]
[128.15193176 105.30758667]
[121.74953461 118.64562988]
[109.54618835 127.01058960]
[94.79673004 128.17140198]
[81.43505859 121.81844330]
[73.02495575 109.64617157]
[58.07119751 110.82305908]
[43.11743546 111.99994659]
[31.42400551 126.85402679]
[12.90792179 128.47058105]
[-0.70849866 116.29139709]
[-15.60452557 118.05445862]
[-30.50055313 119.81752014]
[-45.39657974 121.58058167]
[-58.19167328 130.88627625]
[-71.74015045 124.69854736]
[-86.63617706 126.46160889]
[-101.53220367 128.22467041]
[-108.61913300 139.71495056]
[-120.85793304 144.93399048]
[-133.67472839 142.17573547]
[-142.41911316 132.67092896]
[-157.34687805 134.14118958]
[-172.27464294 135.61145020]
[-187.20242310 137.08171082]
[-202.13018799 138.55195618]
[-215.10552979 147.60466003]
[-228.52989197 141.15211487]
[-243.45767212 142.62236023]
[-256.43301392 151.67506409]
[-269.85736084 145.22250366]
[-279.68850708 157.59684753]
[-295.39944458 159.31214905]
[-307.66915894 149.35073853]
[-309.21823120 133.62254333]
[-299.12765503 121.45883942]
[-283.38397217 120.07611847]
[-271.32763672 130.29473877]
[-259.42004395 121.34720612]
[-244.92793274 127.69459534]
[-230.00015259 126.22433472]
[-218.09255981 117.27680206]
[-203.60044861 123.62419128]
[-188.67268372 122.15393829]
[-173.74490356 120.68367767]
[-158.81713867 119.21342468]
[-143.88935852 117.74316406]
[-133.81190491 104.30825043]
[-116.80409241 102.25329590]
[-103.29526520 113.32864380]
[-88.39923859 111.56558228]
[-73.50321198 109.80252075]
[-61.77357864 100.62291718]
[-47.15964127 106.68455505]
[-32.26361465 104.92149353]
[-17.36758614 103.15843201]
[-2.47155952 101.39537048]
[2.51552582 91.06687164]
[11.98060131 84.37860870]
[23.62052536 83.10060883]
[34.53307343 87.66864014]
[41.94055176 97.04618835]
[56.89431000 95.86930084]
[71.84806824 94.69241333]
[78.25046539 81.35437012]
[90.45381165 72.98941040]
[105.20326996 71.82860565]
[118.56494141 78.18155670]
[126.97504425 90.35382843]
[141.92880249 89.17694092]
[156.88256836 88.00005341]
[159.82534790 76.50662231]
[165.87684631 66.32428741]
[174.53750610 58.27223969]
[185.09841919 52.99468613]
[196.69931030 50.90935516]
[208.39859009 52.17443085]
[219.24981689 56.67660904]
[228.37823486 64.04116058]
[235.05131531 73.66307831]
[238.73748779 84.75681305]
[253.73748779 84.75681305]
[268.73748779 84.75681305]
[283.73748779 84.75681305]
[298.73748779 84.75681305]
[313.73748779 84.75681305]
[321.00701904 73.01144409]
[333.04190063 66.45570374]
[346.63565063 66.71408081]
[358.22634888 73.61156464]
[364.83016968 85.24758911]
[379.82727051 85.54209900]
[394.82437134 85.83660126]
[409.82147217 86.13110352]
[424.81860352 86.42561340]
[439.81570435 86.72011566]
[454.81280518 87.01462555]
[461.01254272 76.09153748]
[471.22109985 68.89968872]
[483.45108032 66.76365662]
[495.35351562 70.03101349]
[504.66897583 78.01749420]
[509.65658569 89.14920044]
[524.63055420 90.03225708]
[539.60455322 90.91532135]
[554.57855225 91.79838562]
[569.55255127 92.68144989]
[584.52648926 93.56450653]
[599.50048828 94.44757080]
[614.47448730 95.33063507]
[626.22967529 85.11038971]
[641.40283203 86.21925354]
[651.07385254 97.48900604]
[666.04779053 98.37207031]
[681.02178955 99.25513458]
[695.99578857 100.13819885]
[710.40545654 92.30922699]
[724.24719238 101.10347748]
[723.28173828 117.47418213]
[708.50231934 124.58055878]
[695.11273193 115.11218262]
[680.13873291 114.22911835]
[665.16473389 113.34605408]
[650.19079590 112.46299744]
[639.26220703 122.51792908]
[624.06384277 121.83569336]
[613.59143066 110.30461884]
[598.61743164 109.42155457]
[583.64343262 108.53849030]
[568.66943359 107.65543365]
[553.69549561 106.77236938]
[538.72149658 105.88930511]
[523.74749756 105.00624847]
[508.77352905 104.12318420]
[498.26174927 118.26280212]
[481.22802734 123.34423065]
[464.39355469 117.16689301]
[454.51831055 102.01173401]
[439.52120972 101.71722412]
[424.52407837 101.42272186]
[409.52697754 101.12821198]
[394.52987671 100.83370972]
[379.53277588 100.53920746]
[364.53564453 100.24469757]
[355.07495117 113.63101196]
[339.34793091 118.81019592]
[323.46945190 113.56071472]
[313.73748779 99.75681305]
[298.73748779 99.75681305]
[283.73748779 99.75681305]
[268.73748779 99.75681305]
[253.73748779 99.75681305]
[238.73748779 99.75681305]
[231.55540466 116.62042236]
[217.71795654 128.71765137]
[199.94859314 133.60919189]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 74]
[3 73]
[4 72]
[9 67]
[10 66]
[11 65]
[14 60]
[15 59]
[16 58]
[17 57]
[19 55]
[20 54]
[21 53]
[25 50]
[26 49]
[27 48]
[28 47]
[29 46]
[31 44]
[32 43]
[34 41]
[84 156]
[85 155]
[86 154]
[87 153]
[88 152]
[89 151]
[94 147]
[95 146]
[96 145]
[97 144]
[98 143]
[99 142]
[100 141]
[106 137]
[107 136]
[108 135]
[109 134]
[110 133]
[111 132]
[112 131]
[113 130]
[116 127]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
