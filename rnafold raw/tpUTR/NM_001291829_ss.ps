%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 13:07:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUAUUCUAAGGAUUUCUACUUUGGUCUUCAAGAAAGCUGUGCCCCAGAACACCAGAGAUUUCAACUUAGUCAAUAAAACCUUGAAAUAAAGAUGGGCUUAAUCUAAUGUACUGCA\
) } def
/len { sequence length } bind def

/coor [
[76.10388947 143.51745605]
[69.58913422 147.52427673]
[62.14194107 148.93388367]
[54.74910355 147.60942078]
[48.37252426 143.77307129]
[35.18546677 150.92160034]
[21.99840736 158.07012939]
[8.81134987 165.21865845]
[-0.37494603 181.10763550]
[-17.83912086 180.10372925]
[-30.82950211 187.60372925]
[-43.81988144 195.10372925]
[-56.81026459 202.60372925]
[-69.80064392 210.10372925]
[-82.79102325 217.60372925]
[-84.27901459 233.04930115]
[-94.58668518 244.64807129]
[-109.75053406 247.94007874]
[-123.93975067 241.65948486]
[-131.69828796 228.22131348]
[-130.04283142 212.79278564]
[-119.60993958 201.30651855]
[-104.41127014 198.17919922]
[-90.29102325 204.61334229]
[-77.30064392 197.11334229]
[-64.31026459 189.61334229]
[-51.31988144 182.11334229]
[-38.32950211 174.61334229]
[-25.33912086 167.11334229]
[-21.86111641 155.44226074]
[-10.98832798 149.11288452]
[1.66281903 152.03160095]
[14.84987736 144.88307190]
[28.03693581 137.73454285]
[41.22399521 130.58601379]
[50.45281219 110.13245392]
[73.61025238 109.99308014]
[85.72179413 101.14375305]
[91.54950714 88.43433380]
[105.42887878 86.74471283]
[117.54041290 77.89537811]
[129.65194702 69.04605103]
[141.76348877 60.19671631]
[141.85359192 44.79223251]
[150.89141846 32.53780365]
[165.24235535 28.00851822]
[179.33976746 32.74149323]
[191.45129395 23.89216232]
[203.56283569 15.04283142]
[202.60266113 -3.93109059]
[213.05958557 -19.61547089]
[230.66587830 -25.92614746]
[248.42295837 -20.54142380]
[259.78314209 -30.33663368]
[271.14334106 -40.13184357]
[269.04898071 -58.03206253]
[277.95336914 -73.52185059]
[294.19055176 -80.59585571]
[311.29458618 -76.63918304]
[322.11260986 -87.03004456]
[332.93063354 -97.42091370]
[343.74868774 -107.81177521]
[354.56671143 -118.20264435]
[365.38476562 -128.59350586]
[376.20278931 -138.98437500]
[370.05184937 -152.83866882]
[369.01336670 -167.96141052]
[373.21279907 -182.52645874]
[382.14300537 -194.77500916]
[394.72567749 -203.22799683]
[409.44131470 -206.86466980]
[424.51300049 -205.24588013]
[438.12069702 -198.56712341]
[448.62127686 -187.63487244]
[454.74667358 -173.76927185]
[455.75729370 -158.64463806]
[451.53100586 -144.08735657]
[442.57824707 -131.85528564]
[429.98004150 -123.42550659]
[415.25772095 -119.81595612]
[400.18905640 -121.46250916]
[386.59365845 -128.16633606]
[375.77563477 -117.77547455]
[364.95758057 -107.38460541]
[354.13955688 -96.99374390]
[343.32150269 -86.60287476]
[332.50347900 -76.21201324]
[321.68542480 -65.82114410]
[325.12994385 -54.02772141]
[323.17068481 -41.82518387]
[316.12500000 -31.58308220]
[305.30398560 -25.31731415]
[292.76885986 -24.29346466]
[280.93853760 -28.77165604]
[269.57833862 -18.97644615]
[258.21817017 -9.18123627]
[261.26989746 1.77632582]
[259.94396973 13.12549496]
[254.39848328 23.17513657]
[245.42329407 30.41286469]
[234.32759094 33.73260880]
[222.74906921 32.60350418]
[212.41217041 27.15436935]
[200.30062866 36.00370026]
[188.18910217 44.85303116]
[188.41394043 59.72204208]
[179.73754883 72.01774597]
[165.31608582 76.90391541]
[150.61282349 72.30825043]
[138.50128174 81.15758514]
[126.38974762 90.00691986]
[114.27820587 98.85624695]
[108.45049286 111.56566620]
[94.57112122 113.25528717]
[82.45958710 122.10462189]
[83.03714752 129.93830872]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 35]
[6 34]
[7 33]
[8 32]
[10 29]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[37 115]
[38 114]
[40 112]
[41 111]
[42 110]
[43 109]
[47 105]
[48 104]
[49 103]
[53 96]
[54 95]
[55 94]
[59 88]
[60 87]
[61 86]
[62 85]
[63 84]
[64 83]
[65 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
