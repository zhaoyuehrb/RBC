%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:59:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUGACACCCGGCCCCUGGGACCUGACAGGUCCACUCGUCCACCCACCCGGCCCCAAAUCCCCCGGCCUGAACCCCCGGCCUUAAACACCCUCCCCCCACAACCCAGGCCCCAAAGUCUUGGGCCUUCAUUAAUUCUGUCAAUAAAAUGUUUCAAGGAAGCCA\
) } def
/len { sequence length } bind def

/coor [
[94.26104736 236.48710632]
[91.71301270 221.64872742]
[94.40039825 206.80628967]
[102.01784515 193.75459290]
[113.66265106 184.07865906]
[108.65108490 169.94061279]
[103.63952637 155.80258179]
[98.62796021 141.66453552]
[93.61640167 127.52648926]
[88.14756012 126.16796112]
[82.97119141 123.71683502]
[78.30654907 120.23687744]
[74.35884094 115.83596802]
[59.95919418 120.03718567]
[45.55955124 124.23840332]
[31.15990639 128.43962097]
[23.05286217 143.91726685]
[6.59028244 148.67074585]
[-7.93593836 140.23516846]
[-22.25349998 144.70814514]
[-36.57106018 149.18110657]
[-50.88862228 153.65408325]
[-54.27045441 165.10623169]
[-62.68928146 173.40423584]
[-73.95770264 176.55541992]
[-85.22587585 173.88360596]
[-93.70210266 166.17028809]
[-108.17867279 170.09826660]
[-122.65524292 174.02622986]
[-137.09399414 178.09100342]
[-151.49363708 182.29222107]
[-160.43623352 195.61174011]
[-176.43661499 196.78106689]
[-187.22065735 184.90319824]
[-184.51577759 169.08981323]
[-170.39691162 161.47158813]
[-155.69485474 167.89257812]
[-141.29521179 163.69136047]
[-135.73027039 158.77749634]
[-126.58320618 159.54965210]
[-112.10663605 155.62168884]
[-97.63006592 151.69372559]
[-89.54051971 135.30758667]
[-71.75106049 129.90275574]
[-55.36159134 139.33651733]
[-41.04402924 134.86354065]
[-26.72646713 130.39057922]
[-12.40890694 125.91761017]
[-8.07056141 113.75750732]
[2.64723802 106.21511078]
[15.94776726 106.23704529]
[26.95868492 114.03997803]
[41.35832977 109.83876038]
[55.75797272 105.63754272]
[70.15761566 101.43631744]
[73.70091248 94.82609558]
[59.04986572 91.60945892]
[44.44740677 95.03993225]
[30.77913857 88.86106110]
[23.70750999 75.63260651]
[26.16213417 60.83480835]
[37.12611389 50.59805298]
[52.05733109 49.16319656]
[64.77011871 57.12466049]
[69.99790192 71.18526459]
[80.78750610 81.60565186]
[84.33080292 74.99542999]
[79.85783386 60.67786789]
[75.38486481 46.36030579]
[70.91189575 32.04274750]
[59.41143036 21.17767143]
[63.00146866 6.72219276]
[49.51510620 -1.96673810]
[48.04319382 -17.94212723]
[59.71486282 -28.94902229]
[75.57659912 -26.54387665]
[83.46064758 -12.57171059]
[77.31903076 2.24922395]
[88.49955750 12.09020996]
[85.22946167 27.56977654]
[89.70243073 41.88733673]
[94.17539978 56.20489883]
[98.64836884 70.52246094]
[101.58717346 55.81316376]
[104.52597809 41.10386658]
[107.46478271 26.39456749]
[110.40358734 11.68527126]
[106.16513824 -2.70345998]
[106.30858612 -17.70277405]
[110.82144928 -32.00781250]
[119.31113434 -44.37410736]
[131.03907776 -53.72586441]
[144.98501587 -59.24952316]
[159.93572998 -60.46456146]
[174.59057617 -57.26527405]
[187.67466736 -49.92998505]
[198.04975891 -39.09682083]
[204.81327820 -25.70820999]
[207.37681580 -10.92889214]
[205.51737976 3.95541167]
[199.39671326 17.64984512]
[189.54730225 28.96306801]
[176.82597351 36.91088867]
[162.33773804 40.80208206]
[151.32188416 50.98299408]
[140.30603027 61.16390228]
[129.29017639 71.34481812]
[118.27432251 81.52572632]
[132.82263184 77.87242126]
[147.37094116 74.21910858]
[161.91925049 70.56580353]
[176.46755981 66.91249847]
[191.01586914 63.25918961]
[195.84690857 48.60774994]
[207.84657288 38.91179276]
[223.18582153 37.26525879]
[236.96995544 44.19355774]
[244.80049133 57.48588943]
[244.17877197 72.90071869]
[235.30314636 85.51923370]
[221.00581360 91.31490326]
[205.84899902 88.43836212]
[194.66918945 77.80749512]
[180.12086487 81.46080780]
[165.57255554 85.11411285]
[151.02424622 88.76741791]
[136.47593689 92.42073059]
[121.92762756 96.07403564]
[118.38433075 102.68425751]
[132.90316772 106.45301056]
[147.73368835 104.20456696]
[160.22010803 112.51656342]
[163.86848450 127.06610870]
[156.78138733 140.28628540]
[142.64465332 145.30154419]
[128.81051636 139.50355530]
[122.47393799 125.90933228]
[111.29773712 115.90470123]
[107.75444031 122.51493073]
[112.76600647 136.65296936]
[117.77756500 150.79101562]
[122.78913116 164.92906189]
[127.80068970 179.06709290]
[142.93978882 179.24885559]
[157.07672119 184.58918762]
[168.51206970 194.42549133]
[175.87825012 207.55596924]
[178.30305481 222.38639832]
[175.51284790 237.12374878]
[167.86337280 249.99288940]
[156.29446411 259.45043945]
[161.30603027 273.58850098]
[166.31759644 287.72653198]
[171.32916260 301.86459351]
[176.34071350 316.00262451]
[187.33152771 328.91146851]
[177.96972656 343.04629517]
[161.79570007 337.96325684]
[162.20268250 321.01419067]
[157.19111633 306.87612915]
[152.17955017 292.73809814]
[147.16798401 278.60006714]
[142.15643311 264.46200562]
[127.21381378 264.40206909]
[113.16697693 259.22372437]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 143]
[6 142]
[7 141]
[8 140]
[9 139]
[13 55]
[14 54]
[15 53]
[16 52]
[19 48]
[20 47]
[21 46]
[22 45]
[27 42]
[28 41]
[29 40]
[30 38]
[31 37]
[67 83]
[68 82]
[69 81]
[70 80]
[72 78]
[108 128]
[109 127]
[110 126]
[111 125]
[112 124]
[113 123]
[151 163]
[152 162]
[153 161]
[154 160]
[155 159]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
