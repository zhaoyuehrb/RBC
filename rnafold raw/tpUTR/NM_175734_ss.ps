%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 12:08:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGCAGGCGGAUGUGGGGUGUGGGGCAGGGCAUGGAGGGAGAGGAAUAAAGAGAAACAGAGUCCAGGAA\
) } def
/len { sequence length } bind def

/coor [
[79.79290771 116.04351044]
[65.84137726 121.55303192]
[59.86791992 133.21961975]
[47.88213348 137.42384338]
[36.66907501 132.37667847]
[22.48749924 137.26368713]
[11.96110058 149.07493591]
[-2.59256911 145.90634155]
[-16.77414703 150.79335022]
[-20.33140755 165.80499268]
[-31.45571518 176.49392700]
[-46.59734726 179.44935608]
[-60.92466354 173.72819519]
[-69.86586761 161.15606689]
[-70.56785583 145.74468994]
[-62.80662155 132.41177368]
[-49.05875397 125.41178894]
[-33.71114349 126.97843170]
[-21.66115570 136.61177063]
[-7.47957754 131.72476196]
[2.03245854 120.26307678]
[17.60049057 123.08211517]
[31.78206825 118.19510651]
[42.35744858 104.36513519]
[60.33185196 107.60150146]
[74.28337860 102.09197998]
[80.43991852 83.17370605]
[98.22589111 74.25949860]
[117.06665802 80.64929199]
[129.83018494 72.76940918]
[142.59370422 64.88953400]
[155.35722351 57.00965500]
[163.52162170 40.67270279]
[180.93048096 40.47715759]
[193.33296204 32.04041672]
[188.35446167 17.79692459]
[187.23307800 2.75016856]
[190.04522705 -12.07393932]
[196.59919739 -25.66466713]
[206.44812012 -37.09537506]
[218.92048645 -45.58670044]
[233.16589355 -50.55968857]
[248.21308899 -51.67527390]
[263.03610229 -48.85739517]
[276.62429810 -42.29817581]
[288.05120850 -32.44483948]
[296.53771973 -19.96919823]
[301.50521851 -5.72186565]
[302.61499023 9.32575226]
[299.79138184 24.14768410]
[293.22692871 37.73334885]
[283.36917114 49.15644836]
[270.89025879 57.63813782]
[256.64099121 62.60012436]
[241.59295654 63.70409012]
[226.77210999 60.87476349]
[213.18898010 54.30505371]
[201.76969910 44.44289398]
[189.36721802 52.87963486]
[186.70001221 64.88348389]
[176.15866089 71.96971130]
[163.23710632 69.77317810]
[150.47358704 77.65305328]
[137.71006775 85.53293610]
[124.94654083 93.41281128]
[125.57827759 103.38711548]
[122.37220764 112.85321808]
[115.80937958 120.39079285]
[106.87448120 124.86890411]
[96.90811920 125.61564636]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 26]
[2 25]
[5 23]
[6 22]
[8 20]
[9 19]
[29 65]
[30 64]
[31 63]
[32 62]
[34 59]
[35 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
