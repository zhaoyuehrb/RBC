%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 05:47:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCAGCCACAGGGCUAAGCAUGCAUGUUAACAGGGUAUAUUUAUUCUAUGUUCGAAUUUGUCUUUUGAUCGCUUUUAUUCAUUUUUCCUUUCUUUGUCUUUUCCCAAACUGAUAAUGUUAUAAAUAUUUAUGUUGCUUGUUUUUAUGAAAGAAAAAAUAUUGUCAUAUUUGACUACAAAUUUAAUAAAAAAUUAAUGGUUAUUGUUAA\
) } def
/len { sequence length } bind def

/coor [
[-84.35753632 604.18176270]
[-97.13323212 619.18267822]
[-116.23473358 623.39141846]
[-121.29468536 637.51226807]
[-126.14282990 651.70715332]
[-130.77809143 665.97302246]
[-135.41334534 680.23883057]
[-140.04859924 694.50469971]
[-136.11161804 710.42425537]
[-148.11584473 721.59698486]
[-163.71235657 716.52941895]
[-166.85681152 700.43450928]
[-154.31443787 689.86944580]
[-149.67918396 675.60357666]
[-145.04393005 661.33776855]
[-140.40867615 647.07189941]
[-141.74060059 642.48474121]
[-140.20451355 637.01226807]
[-135.41548157 632.45227051]
[-130.35552979 618.33148193]
[-137.91961670 611.27636719]
[-142.72299194 602.07257080]
[-144.19572449 591.75714111]
[-142.14482117 581.50189209]
[-136.77905273 572.48052979]
[-128.68798828 565.73400879]
[-118.77735901 562.05072021]
[-108.16763306 561.87408447]
[-102.27225494 548.08117676]
[-96.37688446 534.28826904]
[-90.48150635 520.49536133]
[-84.58612823 506.70245361]
[-78.69075775 492.90951538]
[-72.79537964 479.11660767]
[-81.83871460 467.28091431]
[-83.75632477 452.40884399]
[-77.93389893 438.48168945]
[-65.84272766 429.27838135]
[-50.66940689 427.35031128]
[-44.77402878 413.55740356]
[-38.87865448 399.76449585]
[-32.98328018 385.97155762]
[-35.09580612 371.22753906]
[-22.55732918 361.57885742]
[-16.66195297 347.78591919]
[-10.76657772 333.99301147]
[-18.55190659 321.32308960]
[-17.36984444 306.32086182]
[-7.46477985 294.75613403]
[7.52393723 291.20022583]
[13.41931248 277.40731812]
[19.31468773 263.61437988]
[25.21006393 249.82147217]
[24.94836044 242.43487549]
[31.29817963 235.86737061]
[37.39922714 222.16418457]
[43.50027847 208.46099854]
[49.60132599 194.75782776]
[55.70237732 181.05464172]
[61.80342865 167.35145569]
[67.90447998 153.64826965]
[74.00552368 139.94509888]
[68.55949402 135.81643677]
[63.75996399 130.95129395]
[59.70563889 125.44970703]
[56.47988510 119.42479706]
[54.14903259 113.00045776]
[52.76100922 106.30878448]
[52.34435654 99.48738861]
[52.90764236 92.67653656]
[54.43928909 86.01626587]
[56.90779495 79.64355469]
[60.26240158 73.68942261]
[64.43413544 68.27631378]
[69.33719635 63.51554108]
[74.87078094 59.50499344]
[80.92109680 56.32714081]
[87.36373138 54.04732895]
[94.06620789 52.71244049]
[100.89069366 52.34992218]
[107.69686890 52.96723175]
[114.34476471 54.55167007]
[121.05446625 41.13600922]
[127.76416016 27.72034645]
[134.47386169 14.30468559]
[141.18356323 0.88902432]
[147.89324951 -12.52663708]
[147.14617920 -28.33019447]
[159.75932312 -36.25218201]
[166.46902466 -49.66784286]
[173.17872620 -63.08350754]
[179.88841248 -76.49916840]
[186.59811401 -89.91482544]
[175.50465393 -98.68612671]
[166.35057068 -109.45912933]
[159.49002075 -121.81394958]
[155.18777466 -135.26956177]
[153.60908508 -149.30255127]
[154.81326294 -163.36743164]
[158.75149536 -176.91790771]
[165.26884460 -189.42805481]
[174.11026001 -200.41275024]
[184.93064880 -209.44642639]
[197.30828857 -216.17967224]
[210.76130676 -220.35263062]
[224.76637268 -221.80513000]
[238.77912903 -220.48271179]
[252.25532532 -216.43881226]
[259.36334229 -229.64773560]
[266.47137451 -242.85667419]
[259.58325195 -254.79637146]
[259.49511719 -268.47198486]
[266.12301636 -280.31057739]
[277.64236450 -287.27197266]
[290.98873901 -287.62921143]
[298.29357910 -300.73034668]
[305.59838867 -313.83148193]
[312.90322876 -326.93258667]
[320.20806885 -340.03372192]
[327.51290894 -353.13482666]
[329.94546509 -369.91336060]
[346.74166870 -372.22064209]
[353.60842896 -356.71954346]
[340.61401367 -345.83001709]
[333.30917358 -332.72888184]
[326.00436401 -319.62774658]
[318.69952393 -306.52664185]
[311.39468384 -293.42550659]
[304.08984375 -280.32440186]
[311.46386719 -265.65844727]
[308.61492920 -249.32342529]
[296.47061157 -237.79066467]
[279.68032837 -235.74864197]
[272.57229614 -222.53970337]
[265.46426392 -209.33078003]
[277.53564453 -198.98277283]
[287.02099609 -186.21395874]
[293.44726562 -171.65609741]
[296.49291992 -156.03025818]
[296.00387573 -140.11114502]
[292.00146484 -124.68867493]
[284.68136597 -110.52878571]
[274.40411377 -98.33538055]
[261.67733765 -88.71534729]
[247.13066101 -82.14837646]
[231.48460388 -78.96298981]
[215.51484680 -79.32015228]
[200.01377869 -83.20513153]
[193.30407715 -69.78946686]
[186.59439087 -56.37380981]
[179.88468933 -42.95814896]
[173.17498779 -29.54248619]
[174.40197754 -14.69850540]
[161.30891418 -5.81693983]
[154.59921265 7.59872150]
[147.88952637 21.01438332]
[141.17982483 34.43004227]
[134.47012329 47.84570312]
[127.76042938 61.26136780]
[137.38571167 70.44274139]
[144.09852600 81.92671967]
[147.37591553 94.81867218]
[146.96255493 108.11426544]
[161.15747070 112.96240997]
[175.35238647 117.81055450]
[189.54728699 122.65869904]
[205.52395630 118.96031189]
[216.51588440 131.13034058]
[211.21553040 146.64929199]
[195.07542419 149.55261230]
[184.69914246 136.85360718]
[170.50424194 132.00546265]
[156.30932617 127.15731812]
[142.11441040 122.30917358]
[119.05821228 143.68188477]
[87.70870972 146.04614258]
[81.60765839 159.74932861]
[75.50660706 173.45251465]
[69.40555573 187.15568542]
[63.30450821 200.85887146]
[57.20346069 214.56205750]
[51.10240936 228.26522827]
[45.00136185 241.96841431]
[39.00297928 255.71684265]
[33.10760498 269.50976562]
[27.21222878 283.30267334]
[21.31685448 297.09561157]
[29.10479736 310.38671875]
[27.59088707 325.53802490]
[17.56423569 336.75988770]
[3.02633834 339.88839722]
[-2.86903715 353.68130493]
[-8.76441288 367.47421265]
[-7.07356310 383.20480347]
[-19.19036293 391.86694336]
[-25.08573723 405.65985107]
[-30.98111343 419.45278931]
[-36.87648773 433.24569702]
[-27.78437614 445.54531860]
[-26.08070946 460.64480591]
[-32.12352371 474.47775269]
[-44.19817352 483.36926270]
[-59.00246429 485.01199341]
[-64.89784241 498.80490112]
[-70.79321289 512.59783936]
[-76.68859100 526.39074707]
[-82.58396912 540.18365479]
[-88.47933960 553.97656250]
[-94.37471771 567.76947021]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 20]
[4 19]
[5 16]
[6 15]
[7 14]
[8 13]
[28 209]
[29 208]
[30 207]
[31 206]
[32 205]
[33 204]
[34 203]
[39 198]
[40 197]
[41 196]
[42 195]
[44 193]
[45 192]
[46 191]
[50 187]
[51 186]
[52 185]
[53 184]
[55 183]
[56 182]
[57 181]
[58 180]
[59 179]
[60 178]
[61 177]
[62 176]
[82 159]
[83 158]
[84 157]
[85 156]
[86 155]
[87 154]
[89 152]
[90 151]
[91 150]
[92 149]
[93 148]
[108 135]
[109 134]
[110 133]
[115 129]
[116 128]
[117 127]
[118 126]
[119 125]
[120 124]
[163 174]
[164 173]
[165 172]
[166 171]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
