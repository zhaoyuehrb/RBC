%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:56:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGAAAAGCAAGGGACAUCCCGUCCCUGGGAGGUUGAGUGGAAUCUGCAGUCCAGUGCCUGGAACUAAAUCCUCGACUGC\
) } def
/len { sequence length } bind def

/coor [
[8.95784855 186.55117798]
[2.26550746 193.87559509]
[-5.88339520 199.51715088]
[-15.07576370 203.19538879]
[-24.84683990 204.72926331]
[-34.70370102 204.04602051]
[-44.15012360 201.18460083]
[-52.71156693 196.29354858]
[-59.95901871 189.62318420]
[-65.53047180 181.51289368]
[-69.14902496 172.37380981]
[-84.07856750 173.82597351]
[-99.00811005 175.27813721]
[-113.93765259 176.73030090]
[-128.86720276 178.18246460]
[-143.79673767 179.63462830]
[-155.05873108 191.06034851]
[-170.99771118 189.23596191]
[-179.38665771 175.56098938]
[-173.79029846 160.52569580]
[-158.50166321 155.66386414]
[-145.24890137 164.70509338]
[-130.31936646 163.25292969]
[-115.38981628 161.80076599]
[-100.46027374 160.34860229]
[-85.53073120 158.89643860]
[-70.60118866 157.44427490]
[-64.02165985 137.21623230]
[-48.64973450 122.42417908]
[-28.06464958 116.59319305]
[-7.09770823 121.15237427]
[9.30160618 135.08512878]
[22.83411789 128.61433411]
[36.36663055 122.14354706]
[49.89913940 115.67276001]
[63.43165207 109.20196533]
[76.96416473 102.73117828]
[90.49667358 96.26038361]
[96.00112152 90.06217957]
[104.68170929 89.81249237]
[118.45495605 83.87129974]
[117.27557373 70.76797485]
[119.91749573 57.89829636]
[126.14640045 46.35142517]
[135.42486572 37.10149002]
[146.95869446 30.92539024]
[159.76493835 28.33756065]
[172.75559998 29.54713631]
[184.83010864 34.44108582]
[194.96858215 42.59468842]
[202.31788635 53.30837250]
[216.68772888 49.00632477]
[231.05757141 44.70427704]
[245.42741394 40.40222931]
[259.79727173 36.10017776]
[273.23687744 25.76513481]
[286.88848877 35.81849670]
[281.00714111 51.71963882]
[264.09930420 50.47002029]
[249.72946167 54.77207184]
[235.35961914 59.07411957]
[220.98977661 63.37616730]
[206.61993408 67.67821503]
[205.51142883 84.68514252]
[198.09387207 100.06727600]
[185.42587280 111.57034302]
[169.33758545 117.49791718]
[152.16627502 116.96154022]
[136.41676331 110.01383972]
[124.39614868 97.64453888]
[110.62290955 103.58573914]
[96.96746826 109.79290009]
[83.43495178 116.26368713]
[69.90244293 122.73448181]
[56.36993027 129.20527649]
[42.83742142 135.67605591]
[29.30490875 142.14685059]
[15.77239704 148.61764526]
[17.35302353 158.45376587]
[16.70079994 168.38447571]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 27]
[12 26]
[13 25]
[14 24]
[15 23]
[16 22]
[32 78]
[33 77]
[34 76]
[35 75]
[36 74]
[37 73]
[38 72]
[40 71]
[41 70]
[51 63]
[52 62]
[53 61]
[54 60]
[55 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
