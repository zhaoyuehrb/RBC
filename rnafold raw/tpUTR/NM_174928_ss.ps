%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 03:02:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUACAGACGGUGACAUAACACAGGAAGGAACCCUGUCACAUUCCUCUUUUUGUAUUUUCGUAGUAGAUUUAAAAGUUAUAAUCUCUUCCCCUCCCCCCAAACUGGAGCUGUCCCUGGCCUGGUUUUCAAAAUAAAGUGUGCGAUCUUCA\
) } def
/len { sequence length } bind def

/coor [
[-6.63902473 176.60905457]
[-13.55509472 169.61274719]
[-27.38304138 175.42547607]
[-41.21099091 181.23820496]
[-55.03893661 187.05094910]
[-68.86688232 192.86367798]
[-82.69483185 198.67640686]
[-92.41837311 211.15692139]
[-107.14950562 208.95620728]
[-120.97745514 214.76893616]
[-119.32360840 229.77377319]
[-121.96219635 244.62167358]
[-128.67097473 258.11083984]
[-138.89857483 269.15185547]
[-151.80987549 276.85577393]
[-166.35412598 280.60556030]
[-181.35047913 280.10565186]
[-195.58389282 275.40502930]
[-207.90353394 266.89282227]
[-217.31584167 255.26586914]
[-231.14378357 261.07861328]
[-244.97174072 266.89132690]
[-258.79968262 272.70407104]
[-272.62762451 278.51681519]
[-277.07864380 293.50756836]
[-290.15261841 302.08691406]
[-305.67642212 300.20394897]
[-316.32019043 288.74777222]
[-317.05825806 273.12762451]
[-307.54214478 260.71884155]
[-292.26504517 257.38052368]
[-278.44036865 264.68887329]
[-264.61242676 258.87612915]
[-250.78446960 253.06340027]
[-236.95652771 247.25065613]
[-223.12857056 241.43792725]
[-224.85026550 226.57814026]
[-222.31240845 211.82041931]
[-215.71226501 198.36218262]
[-205.57705688 187.29791260]
[-192.72184753 179.53004456]
[-178.18405151 175.69541931]
[-163.13964844 176.11308289]
[-148.80813599 180.75772095]
[-136.35359192 189.26104736]
[-126.79018402 200.94099426]
[-112.96223450 195.12826538]
[-104.22776031 183.06350708]
[-88.50756836 184.84846497]
[-74.67961884 179.03573608]
[-60.85166931 173.22299194]
[-47.02372360 167.41026306]
[-33.19577408 161.59753418]
[-19.36782837 155.78479004]
[-16.34291649 135.77742004]
[-1.83693469 121.47396851]
[18.48265839 118.69345093]
[36.53777313 128.70706177]
[49.68237305 121.48075104]
[62.82697678 114.25444794]
[75.97157288 107.02814484]
[89.11617279 99.80184174]
[82.45806885 93.80085754]
[79.22286224 83.83550262]
[81.11215973 71.67613983]
[80.79801941 56.67943192]
[80.48388672 41.68272018]
[80.16974640 26.68601036]
[79.85561371 11.68930054]
[66.35803986 4.36051178]
[58.34688568 -8.74356937]
[57.97710037 -24.09800911]
[65.34815979 -37.57254028]
[78.47728729 -45.54258347]
[93.83281708 -45.86423874]
[107.28417969 -38.45097733]
[115.21302795 -25.29693031]
[115.48654175 -9.94047451]
[108.03115845 3.48758435]
[94.85232544 11.37516403]
[95.16645813 26.37187386]
[95.48059845 41.36858368]
[95.79473114 56.36529541]
[96.10887146 71.36200714]
[101.52207184 76.55307770]
[108.43619537 63.24162292]
[115.35031891 49.93016815]
[116.84400177 35.00472260]
[126.02444458 23.14219666]
[140.09802246 17.95237160]
[154.78215027 21.01451492]
[165.60839844 31.39681435]
[169.28236389 45.93992233]
[164.68603516 60.21836090]
[153.21807861 69.88717651]
[138.36897278 72.00425720]
[125.35871887 79.46974182]
[112.34847260 86.93522644]
[117.76167297 92.12629700]
[132.75839233 91.81216431]
[147.75509644 91.49803162]
[162.75180054 91.18389130]
[177.74851990 90.86975861]
[192.74522400 90.55561829]
[207.74194336 90.24148560]
[216.32185364 86.91501617]
[223.05525208 90.08111572]
[238.05525208 90.08111572]
[253.05525208 90.08111572]
[264.05194092 78.72998047]
[279.85534668 78.56288147]
[291.08959961 89.67897034]
[291.08959961 105.48326111]
[279.85534668 116.59934998]
[264.05194092 116.43225861]
[253.05525208 105.08111572]
[238.05525208 105.08111572]
[223.05525208 105.08111572]
[208.05607605 105.23818970]
[193.05935669 105.55233002]
[178.06265259 105.86646271]
[163.06594849 106.18060303]
[148.06922913 106.49473572]
[133.07252502 106.80887604]
[118.07581329 107.12300873]
[132.61993408 110.79293060]
[144.54135132 119.89678192]
[151.91107178 132.96151733]
[153.53665161 147.87316895]
[149.15505981 162.21896362]
[139.47526550 173.67764282]
[126.06350708 180.39515686]
[111.08989716 181.28454590]
[96.97724915 176.20190430]
[86.00907135 165.96965027]
[79.96008301 152.24340820]
[79.80904388 137.24415588]
[85.58039856 123.39889526]
[96.34248352 112.94644165]
[83.19788361 120.17274475]
[70.05328369 127.39904785]
[56.90867996 134.62535095]
[43.76408005 141.85165405]
[44.85197830 151.86790466]
[42.85054779 161.71199036]
[37.96676636 170.45640564]
[30.67830658 177.28288269]
[21.68686104 181.55892944]
[11.85061836 182.89636230]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 54]
[3 53]
[4 52]
[5 51]
[6 50]
[7 49]
[9 47]
[10 46]
[20 36]
[21 35]
[22 34]
[23 33]
[24 32]
[58 143]
[59 142]
[60 141]
[61 140]
[62 139]
[65 84]
[66 83]
[67 82]
[68 81]
[69 80]
[99 125]
[100 124]
[101 123]
[102 122]
[103 121]
[104 120]
[105 119]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
