%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 21:44:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGGUUAUAAAAAACAAAACCACAAAUAUCUUGUACUGUAUUAAUUGUCCUUGUUUACUUCAGACAGGAUCCAUUGCUAAUCAUGGAGUAUAAAUGAUUAUUUAUGUUUUAUAAAACUGGCUUCUGUCUCAAAUGAUUUCUACUGCA\
) } def
/len { sequence length } bind def

/coor [
[-217.49501038 443.01229858]
[-225.08673096 455.94927979]
[-232.54072571 468.96612549]
[-239.85615540 482.06134033]
[-247.17158508 495.15652466]
[-254.48699951 508.25173950]
[-246.07115173 521.03582764]
[-244.57186890 536.26770020]
[-250.33367920 550.44726562]
[-262.03256226 560.31616211]
[-276.98019409 563.60650635]
[-291.74172974 559.56231689]
[-302.92507935 549.11285400]
[-307.96038818 534.65930176]
[-305.69055176 519.52307129]
[-296.63720703 507.18225098]
[-282.88070679 500.47274780]
[-267.58221436 500.93630981]
[-260.26678467 487.84112549]
[-252.95137024 474.74591064]
[-245.63594055 461.65069580]
[-245.11605835 454.22592163]
[-238.02372742 448.35754395]
[-230.43199158 435.42056274]
[-233.85752869 429.67523193]
[-235.31343079 423.09344482]
[-234.62011719 416.33612061]
[-231.81549072 410.09246826]
[-227.15446472 405.00946045]
[-221.08602905 401.62506104]
[-214.21015930 400.31115723]
[-207.21853638 401.23318481]
[-198.04507446 389.36526489]
[-188.87161255 377.49734497]
[-179.69815063 365.62942505]
[-179.41915894 360.79840088]
[-176.05610657 356.10922241]
[-169.87481689 353.46343994]
[-160.20593262 341.99554443]
[-150.53704834 330.52764893]
[-152.05215454 315.75469971]
[-142.40988159 303.98690796]
[-126.90438843 302.49789429]
[-117.23549652 291.02999878]
[-107.56660461 279.56210327]
[-97.89772034 268.09420776]
[-88.22882843 256.62631226]
[-78.55994415 245.15841675]
[-78.07617188 240.34361267]
[-74.51712799 235.80137634]
[-68.22912598 233.42033386]
[-58.08224106 222.37312317]
[-47.93535233 211.32592773]
[-62.89760590 212.38941956]
[-75.71333313 204.59474182]
[-81.65071106 190.81985474]
[-78.51751709 176.15072632]
[-67.47059631 166.00354004]
[-52.58871460 164.12481689]
[-39.36657333 171.20825195]
[-32.68607330 184.63847351]
[-35.01441574 199.45800781]
[-23.14649391 190.28454590]
[-11.27857399 181.11106873]
[0.58934593 171.93760681]
[12.45726585 162.76414490]
[24.32518578 153.59068298]
[36.19310760 144.41720581]
[48.06102753 135.24374390]
[53.39891815 121.33849335]
[69.04940033 119.02050781]
[80.91732025 109.84703827]
[92.78524017 100.67357635]
[85.71559143 97.11181641]
[80.69783020 89.65245819]
[79.31790161 79.34727478]
[82.68274689 67.80659485]
[91.24212646 56.99998856]
[100.16162109 44.94003296]
[109.08112335 32.88007736]
[118.00061798 20.82011986]
[126.92011261 8.76016235]
[135.83961487 -3.29979491]
[144.75910950 -15.35975170]
[139.18820190 -29.74615097]
[142.30191040 -44.85602570]
[153.10665894 -55.86787415]
[168.15470886 -59.26785278]
[182.64427185 -53.97104263]
[191.95176697 -41.66763687]
[193.10723877 -26.28360367]
[185.74195862 -12.72793579]
[172.20616150 -5.32619619]
[156.81906128 -6.44025421]
[147.89956665 5.61970282]
[138.98007202 17.67965889]
[130.06057739 29.73961639]
[121.14107513 41.79957199]
[112.22158051 53.85953140]
[103.30208588 65.91948700]
[106.60734558 72.65189362]
[117.37038422 62.20407486]
[130.63279724 69.21180725]
[128.06634521 83.99061584]
[113.21786499 86.11669922]
[116.52312469 92.84909821]
[131.51974487 93.16748047]
[146.51637268 93.48586273]
[161.51298523 93.80423737]
[175.61755371 85.43802643]
[189.78071594 93.70463562]
[189.43263245 110.10009003]
[174.93138123 117.75814819]
[161.19461060 108.80086517]
[146.19798279 108.48248291]
[131.20137024 108.16410065]
[116.20475006 107.84571838]
[101.95870972 112.54149628]
[90.09078217 121.71496582]
[78.22286224 130.88842773]
[72.03610229 145.44982910]
[57.23449326 147.11166382]
[45.36657333 156.28512573]
[33.49865341 165.45860291]
[21.63073158 174.63206482]
[9.76281166 183.80552673]
[-2.10510898 192.97898865]
[-13.97302914 202.15246582]
[-25.84095001 211.32592773]
[-36.88815308 221.47280884]
[-47.03503799 232.52001953]
[-57.18192673 243.56721497]
[-67.09204865 254.82730103]
[-76.76093292 266.29519653]
[-86.42982483 277.76309204]
[-96.09871674 289.23098755]
[-105.76760101 300.69888306]
[-115.43649292 312.16677856]
[-114.28364563 327.70089722]
[-124.25263977 339.19323730]
[-139.06915283 340.19656372]
[-148.73803711 351.66445923]
[-158.40692139 363.13232422]
[-167.83023071 374.80288696]
[-177.00369263 386.67080688]
[-186.17715454 398.53872681]
[-195.35061646 410.40664673]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 24]
[2 23]
[3 21]
[4 20]
[5 19]
[6 18]
[32 147]
[33 146]
[34 145]
[35 144]
[38 143]
[39 142]
[40 141]
[43 138]
[44 137]
[45 136]
[46 135]
[47 134]
[48 133]
[51 132]
[52 131]
[53 130]
[62 129]
[63 128]
[64 127]
[65 126]
[66 125]
[67 124]
[68 123]
[69 122]
[71 120]
[72 119]
[73 118]
[78 100]
[79 99]
[80 98]
[81 97]
[82 96]
[83 95]
[84 94]
[106 117]
[107 116]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
