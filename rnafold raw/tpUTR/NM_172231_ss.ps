%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 15:05:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUUCUGGAAAUACAUACUUUCUGAAUGACCAACCGUCCCUGGACUGUGGAAUGUUCCGGCCUGCAUUUCUGCCCACCCCUUCCGUUGUCACGAGUGCCGUGCCGUGUAAUAAAGUCCCAGUGCUCAUCCACCA\
) } def
/len { sequence length } bind def

/coor [
[87.31113434 145.62736511]
[77.99044800 142.32905579]
[69.49227905 137.13485718]
[59.64558029 148.45045471]
[49.79888535 159.76603699]
[39.95219040 171.08163452]
[36.72992706 186.57122803]
[22.53834534 191.09321594]
[12.69165039 202.40879822]
[2.84495521 213.72439575]
[-7.00174046 225.03997803]
[-3.38782120 240.13035583]
[-9.36507797 254.44999695]
[-22.63513374 262.49270630]
[-38.09537888 261.16589355]
[-49.80103683 250.97978210]
[-53.25104141 235.85108948]
[-47.11879730 221.59713745]
[-33.76227570 213.69885254]
[-18.31733131 215.19328308]
[-8.47063541 203.87770081]
[1.37605989 192.56210327]
[11.22275543 181.24652100]
[13.74071884 166.56628418]
[28.63659859 161.23493958]
[38.48329544 149.91934204]
[48.32999039 138.60375977]
[58.17668533 127.28816223]
[51.95978928 113.63715363]
[36.95978928 113.63715363]
[21.95979118 113.63715363]
[9.64456558 123.91892242]
[-6.04292870 120.56003571]
[-13.06858826 106.13715363]
[-6.04292870 91.71426392]
[9.64456558 88.35537720]
[21.95979118 98.63715363]
[36.95978928 98.63715363]
[51.95978928 98.63715363]
[60.19873810 75.31747437]
[78.57798767 59.73686600]
[101.67634583 55.65053940]
[123.08834076 63.54067612]
[126.66751862 48.12963867]
[140.95976257 43.93665695]
[151.06520081 32.85152435]
[161.17062378 21.76639175]
[171.27606201 10.68125725]
[174.78852844 2.14964485]
[181.74522400 -0.53976953]
[192.10400391 -11.38853168]
[202.46279907 -22.23729324]
[206.24053955 -41.97819138]
[224.91050720 -46.80392456]
[234.75720215 -58.11951447]
[244.60389709 -69.43510437]
[254.45059204 -80.75069427]
[264.16595459 -92.17926025]
[273.61471558 -103.82917786]
[282.92831421 -115.58744812]
[292.24191284 -127.34571838]
[301.55551147 -139.10398865]
[310.73266602 -150.96903992]
[312.87463379 -166.64459229]
[326.71902466 -172.13839722]
[335.75854492 -184.10865784]
[344.79806519 -196.07891846]
[353.83758545 -208.04917908]
[362.87710571 -220.01943970]
[371.91662598 -231.98970032]
[374.05859375 -247.66523743]
[387.90298462 -253.15905762]
[396.94250488 -265.12930298]
[399.08447266 -280.80484009]
[412.92886353 -286.29867554]
[415.07083130 -301.97421265]
[428.91522217 -307.46801758]
[437.95474243 -319.43829346]
[434.27658081 -334.63714600]
[441.27487183 -348.62133789]
[455.64520264 -354.78799438]
[470.60235596 -350.22537231]
[479.08401489 -337.08782959]
[477.08541870 -321.57849121]
[465.55023193 -311.02038574]
[449.92498779 -310.39877319]
[440.88546753 -298.42849731]
[439.39007568 -283.60916138]
[424.89910889 -277.25915527]
[423.40371704 -262.43978882]
[408.91275024 -256.08978271]
[399.87326050 -244.11953735]
[398.37783813 -229.30018616]
[383.88690186 -222.95018005]
[374.84738159 -210.97991943]
[365.80786133 -199.00965881]
[356.76834106 -187.03939819]
[347.72882080 -175.06913757]
[338.68930054 -163.09887695]
[337.19390869 -148.27954102]
[322.70294189 -141.92951965]
[321.16860962 -134.63058472]
[313.31378174 -129.79039001]
[304.00018311 -118.03211975]
[294.68658447 -106.27384949]
[285.37298584 -94.51557922]
[283.67047119 -87.25403595]
[275.70596313 -82.59655762]
[273.83615112 -75.37627411]
[265.76617432 -70.90399933]
[255.91949463 -59.58840942]
[246.07279968 -48.27281952]
[236.22610474 -36.95722961]
[237.84989929 -26.75791550]
[233.45573425 -17.16825676]
[224.29513550 -11.50624084]
[213.31155396 -11.87851238]
[202.95277405 -1.02974987]
[192.59399414 9.81901264]
[182.36120605 20.78669167]
[172.25576782 31.87182617]
[162.15032959 42.95695877]
[152.04489136 54.04209137]
[149.18852234 68.66024780]
[134.17347717 73.64611053]
[139.19932556 81.12871552]
[142.59420776 89.55726624]
[144.18309021 98.57773590]
[143.86746216 107.80444336]
[141.63093567 116.83654022]
[137.54122925 125.27540588]
[131.74847412 132.74229431]
[124.47985077 138.89520264]
[116.03086090 143.44461060]
[106.75327301 146.16691589]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 28]
[4 27]
[5 26]
[6 25]
[8 23]
[9 22]
[10 21]
[11 20]
[29 39]
[30 38]
[31 37]
[43 125]
[45 123]
[46 122]
[47 121]
[48 120]
[50 119]
[51 118]
[52 117]
[54 113]
[55 112]
[56 111]
[57 110]
[58 108]
[59 106]
[60 105]
[61 104]
[62 103]
[63 101]
[65 99]
[66 98]
[67 97]
[68 96]
[69 95]
[70 94]
[72 92]
[73 91]
[75 89]
[77 87]
[78 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
