%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 09:55:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGGCAUCUGCUGGGCUUGCCCGGGCGGCCGCGUGCAGAACCCCGCCUGGUCUUGUGCCCGAGACGGGCGGAGGCUGGAACUUGAGACCUCAAUAAAGGAAGUAGAGCCGC\
) } def
/len { sequence length } bind def

/coor [
[81.97800446 283.80633545]
[84.70332336 264.61721802]
[77.32280731 251.67977905]
[85.44073486 238.10002136]
[85.85771179 223.10581970]
[86.27468109 208.11161804]
[83.27268982 201.24136353]
[86.91742706 192.70800781]
[87.75104523 177.73118591]
[88.58466339 162.75436401]
[89.41828918 147.77754211]
[90.25190735 132.80073547]
[91.08553314 117.82391357]
[81.00731659 106.71401978]
[66.02036285 106.08866882]
[51.03340149 105.46331024]
[35.00536728 114.39477539]
[20.52422523 104.58943176]
[5.52567387 104.38092804]
[-9.47287655 104.17241669]
[-24.47142792 103.96391296]
[-39.47142792 103.96391296]
[-54.46562958 104.38088226]
[-69.45259094 105.00624084]
[-84.43954468 105.63159943]
[-97.99005127 114.86826324]
[-112.64505005 107.50870514]
[-113.32873535 91.12381744]
[-99.33779907 82.56896210]
[-85.06490326 90.64463806]
[-70.07794952 90.01928711]
[-55.09098816 89.39392853]
[-48.44580841 85.92205811]
[-39.67993164 88.96536255]
[-32.94081116 85.67955780]
[-24.26292229 88.96536255]
[-9.26437092 89.17386627]
[5.73417997 89.38237762]
[20.73273087 89.59088135]
[29.70180702 81.34317780]
[42.28856277 81.47937775]
[51.65876007 90.47634888]
[66.64572144 91.10170746]
[81.63267517 91.72706604]
[92.88158417 81.80426025]
[94.13121033 66.85639954]
[95.38083649 51.90854645]
[96.63046265 36.96068954]
[97.88008881 22.01283073]
[99.12971497 7.06497335]
[96.70253754 -1.89109015]
[100.62751770 -8.27910900]
[102.29218292 -23.18645287]
[103.95684814 -38.09379578]
[105.62152100 -53.00114059]
[107.28618622 -67.90848541]
[100.22122955 -82.70775604]
[109.72708130 -96.07079315]
[126.02492523 -94.25085449]
[132.34893799 -79.12013245]
[122.19352722 -66.24381256]
[120.52886200 -51.33647156]
[118.86419678 -36.42913055]
[117.19953156 -21.52178574]
[115.53485870 -6.61444235]
[114.07757568 8.31459999]
[112.82794952 23.26245689]
[111.57832336 38.21031570]
[110.32869720 53.15817261]
[109.07907104 68.10602570]
[107.82944489 83.05388641]
[118.79816437 93.28555298]
[133.62315369 91.00083923]
[148.44813538 88.71613312]
[163.27311707 86.43141937]
[178.06489563 83.94084930]
[192.82064819 81.24491119]
[199.41493225 67.19874573]
[213.02217102 59.74068451]
[228.41011047 61.73851395]
[239.66174316 72.42402649]
[242.45062256 87.68842316]
[235.70434570 101.66223145]
[222.01699829 108.97224426]
[206.65164185 106.80760193]
[195.51658630 96.00065613]
[180.76083374 98.69659424]
[174.66082764 103.05574036]
[165.55783081 101.25640106]
[150.73284912 103.54111481]
[135.90786743 105.82582092]
[121.08287811 108.11053467]
[135.18836975 113.21298981]
[149.67041016 117.12075043]
[159.15020752 128.74543762]
[160.06449890 143.71755981]
[152.06959534 156.40934753]
[138.17065430 162.05021667]
[123.59201813 158.51986694]
[113.81352997 147.14527893]
[112.51104736 132.20059204]
[106.06234741 118.65753174]
[105.22872925 133.63435364]
[104.39510345 148.61117554]
[103.56148529 163.58798218]
[102.72785950 178.56480408]
[101.89424133 193.54162598]
[101.26888275 208.52857971]
[100.85191345 223.52278137]
[100.43494415 238.51698303]
[107.78562927 252.52691650]
[99.69752502 265.03417969]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 112]
[4 110]
[5 109]
[6 108]
[8 107]
[9 106]
[10 105]
[11 104]
[12 103]
[13 102]
[14 44]
[15 43]
[16 42]
[18 39]
[19 38]
[20 37]
[21 36]
[22 34]
[23 32]
[24 31]
[25 30]
[45 71]
[46 70]
[47 69]
[48 68]
[49 67]
[50 66]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
[72 92]
[73 91]
[74 90]
[75 89]
[76 87]
[77 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
