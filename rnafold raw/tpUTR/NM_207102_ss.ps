%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 14:30:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUGGAAACUAACAAAAUUGACCUUGCAUCAUCUUCUGCAAUGUAGUAAAGAAAUUCUAUUUGCAA\
) } def
/len { sequence length } bind def

/coor [
[100.04170227 167.83047485]
[90.55860138 179.45245361]
[78.52754211 188.41090393]
[64.67501831 194.16482544]
[49.83752060 196.36679077]
[34.91100693 194.88383484]
[20.79681206 189.80549622]
[8.34722042 181.43844604]
[-1.68600059 170.28790283]
[-8.69699574 157.02720642]
[-12.26240730 142.45710754]
[-12.16693783 127.45741272]
[-8.41635227 112.93387604]
[-1.23712957 99.76350403]
[8.93721390 88.74158478]
[21.49230194 80.53367615]
[35.66999435 75.63540649]
[50.61417770 74.34256744]
[65.42244720 76.73322296]
[79.20059967 82.66301727]
[91.11336517 91.77064514]
[89.70874786 76.83655548]
[80.71317291 63.82155609]
[87.22467804 50.42567444]
[85.82005310 35.49158478]
[84.41542816 20.55749702]
[83.01081085 5.62340641]
[81.60618591 -9.31068325]
[68.18559265 -17.09960175]
[61.93711472 -31.30298615]
[65.26342010 -46.45934677]
[76.88548279 -56.74075699]
[92.33437347 -58.19379807]
[105.66968536 -50.25975037]
[111.76371765 -35.98941803]
[108.27318573 -20.87003136]
[96.54027557 -10.71530533]
[97.94490051 4.21878386]
[99.34951782 19.15287399]
[100.75414276 34.08696365]
[102.15876770 49.02105331]
[111.05387115 60.96786880]
[104.64283752 75.43193817]
[106.04745483 90.36602783]
[108.83536530 93.16077423]
[110.45777893 96.68210602]
[123.99403381 103.14506531]
[137.53028870 109.60801697]
[151.06654358 116.07097626]
[164.60279846 122.53393555]
[177.66703796 114.32849884]
[193.09332275 114.51156616]
[205.95916748 123.02471161]
[212.15911865 137.15142822]
[209.71482849 152.38392639]
[199.40621948 163.86157227]
[184.52276611 167.92189026]
[169.81370544 163.26925659]
[159.97264099 151.38829041]
[158.13984680 136.07019043]
[144.60359192 129.60722351]
[131.06733704 123.14427185]
[117.53107452 116.68132019]
[103.99481964 110.21836090]
[108.44231415 124.54385376]
[109.26194000 139.52145386]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[21 44]
[22 43]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[46 64]
[47 63]
[48 62]
[49 61]
[50 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
