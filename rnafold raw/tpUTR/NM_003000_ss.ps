%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 12:15:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGUUUCCAUGCUAAACAUGAUUUAUAACCAGCUCAGAGCUGAACAUAAUUUAUAUCUAAUUUGAGUUCCUUUAAAGAUCUUGGUUUUCCAUGAAUACAGCAUGUAUAAUAAAAAUUUUAAGAAAUAAAUGUUAUUCUACUUUAUUAACAA\
) } def
/len { sequence length } bind def

/coor [
[230.27886963 182.65068054]
[217.23712158 175.24035645]
[204.19538879 167.83001709]
[191.15364075 160.41969299]
[177.68798828 166.72953796]
[162.91412354 163.86647034]
[152.53770447 152.72271729]
[150.69137573 137.42901611]
[137.64964294 130.01869202]
[124.60789490 122.60836792]
[111.56614685 115.19804382]
[97.56902313 118.94324493]
[84.97111511 111.78511047]
[81.02352142 97.84370422]
[67.98178101 90.43338013]
[54.94003677 83.02304840]
[41.89829254 75.61272430]
[25.15443802 80.57313538]
[10.28034782 72.08376312]
[6.19992256 55.79785919]
[-6.99218369 48.65864563]
[-20.18428993 41.51943588]
[-33.37639618 34.38022614]
[-46.56850052 27.24101448]
[-62.38793945 27.47761154]
[-69.89869690 14.61534691]
[-83.09079742 7.47613573]
[-96.28290558 0.33692491]
[-112.92066956 5.64232254]
[-127.96703339 -2.53783464]
[-132.38316345 -18.73593521]
[-145.72000122 -25.60098076]
[-159.05683899 -32.46602631]
[-172.39366150 -39.33107376]
[-185.73049927 -46.19611740]
[-199.06733704 -53.06116486]
[-212.40417480 -59.92621231]
[-225.74099731 -66.79125977]
[-239.55421448 -59.97207642]
[-254.55876160 -62.56381607]
[-265.03616333 -73.36604309]
[-267.11877441 -88.09019470]
[-280.45562744 -94.95523834]
[-292.60635376 -85.71820831]
[-307.56326294 -82.67633820]
[-322.35671997 -86.43360901]
[-334.04940796 -96.24399567]
[-340.31976318 -110.15964508]
[-339.92279053 -125.41760254]
[-332.93731689 -138.98837280]
[-320.75030518 -148.17749023]
[-305.78152466 -151.16043091]
[-291.00299072 -147.34494019]
[-279.34902954 -137.48858643]
[-273.13351440 -123.54834747]
[-273.59057617 -108.29207611]
[-260.25375366 -101.42703247]
[-247.06034851 -108.28794861]
[-232.18078613 -106.03785706]
[-221.35272217 -95.33242798]
[-218.87596130 -80.12808990]
[-205.53912354 -73.26304626]
[-192.20228577 -66.39800262]
[-178.86544800 -59.53295135]
[-165.52862549 -52.66790771]
[-152.19178772 -45.80286026]
[-138.85494995 -38.93781662]
[-125.51811981 -32.07276917]
[-113.88111877 -37.69011688]
[-100.94376373 -35.52766800]
[-91.48908234 -26.15678596]
[-89.14369202 -12.85518169]
[-75.95159149 -5.71597052]
[-62.75948334 1.42324042]
[-47.88363266 0.67599982]
[-39.42929077 14.04890823]
[-26.23718452 21.18811989]
[-13.04507923 28.32732964]
[0.14702734 35.46654129]
[13.33913326 42.60575104]
[25.08974266 37.23010635]
[37.97964478 39.65946960]
[47.23863983 49.22374725]
[49.30862045 62.57098007]
[62.35036469 69.98130798]
[75.39210510 77.39163208]
[88.43385315 84.80195618]
[102.43097687 81.05675507]
[115.02888489 88.21488953]
[118.97647858 102.15629578]
[132.01821899 109.56661987]
[145.05996704 116.97695160]
[158.10169983 124.38727570]
[172.18492126 118.14475250]
[187.06954956 121.35433960]
[197.09159851 132.58032227]
[198.56396484 147.37796021]
[211.60571289 154.78828430]
[224.64744568 162.19860840]
[237.68919373 169.60893250]
[257.50875854 158.18275452]
[280.12265015 160.72721863]
[296.73028564 176.10792542]
[300.95413208 198.22322083]
[315.14138794 203.09371948]
[329.32864380 207.96421814]
[344.89337158 205.12704468]
[354.41876221 216.57765198]
[368.60601807 221.44815063]
[382.79327393 226.31864929]
[396.98052979 231.18913269]
[411.16778564 236.05963135]
[423.11828613 231.09832764]
[434.86038208 235.49354553]
[440.25772095 246.36338806]
[454.34127808 251.52604675]
[468.42486572 256.68869019]
[482.50842285 261.85134888]
[495.31701660 253.09239197]
[510.82678223 253.56860352]
[523.07391357 263.09686279]
[527.34912109 278.01339722]
[522.00848389 292.58242798]
[509.10562134 301.20193481]
[493.60192871 300.55749512]
[481.45889282 290.89694214]
[477.34576416 275.93493652]
[463.26220703 270.77227783]
[449.17861938 265.60961914]
[435.09506226 260.44696045]
[418.02584839 264.40478516]
[406.29730225 250.24688721]
[392.11004639 245.37638855]
[377.92279053 240.50590515]
[363.73550415 235.63540649]
[349.54824829 230.76492310]
[334.99829102 233.95045471]
[324.45812988 222.15147400]
[310.27087402 217.28097534]
[296.08361816 212.41049194]
[291.24389648 218.83761597]
[285.08721924 224.03767395]
[277.91738892 227.74629211]
[270.09002686 229.77290344]
[261.99475098 230.01052856]
[254.03587341 228.44137573]
[246.61225891 225.13806152]
[240.09725952 220.26023865]
[234.81997681 214.04693604]
[231.04859924 206.80477905]
[228.97682190 198.89294434]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 100]
[2 99]
[3 98]
[4 97]
[8 93]
[9 92]
[10 91]
[11 90]
[14 87]
[15 86]
[16 85]
[17 84]
[20 80]
[21 79]
[22 78]
[23 77]
[24 76]
[26 74]
[27 73]
[28 72]
[31 68]
[32 67]
[33 66]
[34 65]
[35 64]
[36 63]
[37 62]
[38 61]
[42 57]
[43 56]
[104 140]
[105 139]
[106 138]
[108 136]
[109 135]
[110 134]
[111 133]
[112 132]
[115 130]
[116 129]
[117 128]
[118 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
