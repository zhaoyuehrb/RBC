%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 05:47:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUGAGGACGUGCUUGCCGGGACAGCAGGCAGUGGCCACCUGGUACACCACACUGGAGCCGGAAGGCAAGGACGGGGGACUGGCCUCUGAUUGUCCAUUUGUAUAAAUAAAACAUUUUUUAAUUAA\
) } def
/len { sequence length } bind def

/coor [
[173.87042236 252.32196045]
[165.53686523 239.84991455]
[157.20330811 227.37786865]
[142.33795166 226.97886658]
[130.41697693 217.79440308]
[126.13998413 203.18067932]
[131.34829712 188.68310547]
[123.01474762 176.21105957]
[114.68119049 163.73901367]
[106.34764099 151.26698303]
[98.01408386 138.79493713]
[83.46361542 135.15022278]
[70.23479462 142.22117615]
[57.00597763 149.29212952]
[43.77716064 156.36308289]
[30.54833984 163.43403625]
[17.31952095 170.50498962]
[4.09070253 177.57594299]
[1.05011868 192.91506958]
[-11.17122269 202.67071533]
[-26.80277824 202.23658752]
[-38.46380615 191.81762695]
[-40.64832306 176.33338928]
[-32.32487106 163.09503174]
[-17.42352486 158.35330200]
[-2.98024869 164.34712219]
[10.24857044 157.27616882]
[23.47738838 150.20521545]
[36.70620728 143.13426208]
[49.93502808 136.06330872]
[63.16384506 128.99235535]
[76.39266205 121.92140961]
[68.19266510 110.68032837]
[65.28656006 96.50020599]
[68.65097046 81.84566498]
[78.13018799 69.45991516]
[69.79663086 56.98786926]
[61.46308136 44.51582718]
[46.21935654 41.31166077]
[37.94561768 28.54451942]
[41.09424210 14.03170490]
[32.76068878 1.55966115]
[24.42713547 -10.91238308]
[16.09358215 -23.38442802]
[7.76002789 -35.85647202]
[-3.14271426 -37.38757706]
[-11.19781494 -44.56489182]
[-13.85960388 -54.79208755]
[-10.46998024 -64.56812286]
[-18.18152046 -77.43405151]
[-25.89306259 -90.29998016]
[-39.22212219 -100.77722168]
[-32.84418869 -116.48576355]
[-15.98395634 -114.70564270]
[-13.02713299 -98.01152802]
[-5.31559229 -85.14559174]
[2.39594913 -72.27966309]
[19.92982674 -64.27625275]
[20.23207283 -44.19002533]
[28.56562614 -31.71798134]
[36.89917755 -19.24593735]
[45.23273087 -6.77389240]
[53.56628799 5.69815159]
[68.17930603 8.34301567]
[76.80838013 20.87272835]
[73.93512726 36.18227005]
[82.26867676 48.65431595]
[90.60223389 61.12636185]
[98.02105713 62.22683716]
[95.52922821 47.43526077]
[108.82685089 40.49456406]
[119.53701782 50.99657822]
[112.85870361 64.42779541]
[120.27752686 65.52827454]
[131.87268066 56.01237488]
[143.46783447 46.49647522]
[155.06300354 36.98057556]
[166.65815735 27.46467781]
[178.25331116 17.94877815]
[181.25042725 2.18816686]
[195.50787354 -5.16742277]
[210.08856201 1.52458823]
[213.80743408 17.13066101]
[203.81169128 29.67915344]
[187.76921082 29.54393578]
[176.17405701 39.05983353]
[164.57890320 48.57573318]
[152.98373413 58.09163284]
[141.38858032 67.60752869]
[129.79342651 77.12342834]
[135.77079773 99.16062927]
[127.90740967 119.41786957]
[110.48612976 130.46138000]
[118.81967926 142.93342590]
[127.15323639 155.40547180]
[135.48678589 167.87751770]
[143.82034302 180.34954834]
[159.20748901 181.08567810]
[171.07206726 190.62953186]
[174.99545288 205.15782166]
[169.67535400 219.04431152]
[178.00891113 231.51635742]
[186.34245300 243.98840332]
[200.46287537 238.72433472]
[215.41673279 236.85914612]
[230.39758301 238.49343872]
[244.59753418 243.53907776]
[257.25076294 251.72393799]
[267.67495728 262.60662842]
[275.30792236 275.60028076]
[279.73800659 290.00411987]
[280.72631836 305.04141235]
[278.21957397 319.90118408]
[272.35293579 333.78207397]
[263.44277954 345.93551636]
[251.96965027 355.70608521]
[238.55224609 362.56683350]
[223.91416931 366.14782715]
[208.84483337 366.25592041]
[194.15690613 362.88525391]
[180.64247131 356.21765137]
[169.03036499 346.61267090]
[159.94682312 334.58828735]
[153.88168335 320.79296875]
[151.16204834 305.97067261]
[151.93457031 290.92074585]
[156.15760803 276.45483398]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 103]
[2 102]
[3 101]
[7 97]
[8 96]
[9 95]
[10 94]
[11 93]
[12 32]
[13 31]
[14 30]
[15 29]
[16 28]
[17 27]
[18 26]
[36 68]
[37 67]
[38 66]
[41 63]
[42 62]
[43 61]
[44 60]
[45 59]
[49 57]
[50 56]
[51 55]
[74 90]
[75 89]
[76 88]
[77 87]
[78 86]
[79 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
