%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 06:36:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCGACAAGAAACCUUCUGCCCUAGUCAAAAUGCCUUCUGUCGCCAGGGACACAAACCCAGCU\
) } def
/len { sequence length } bind def

/coor [
[112.00789642 119.90102386]
[100.54315948 110.22838593]
[92.54384613 107.72424316]
[88.77289581 99.80084229]
[77.78886414 89.58560181]
[66.80483246 79.37036896]
[55.82080460 69.15512848]
[44.83677673 58.93989182]
[36.09053421 55.20439529]
[33.58404541 47.95586014]
[23.10637474 37.22187805]
[12.62870312 26.48789215]
[-2.94404149 26.13101006]
[-13.41697979 15.09596443]
[-12.98077679 0.25193152]
[-26.53379059 6.97286701]
[-41.50065231 9.17473888]
[-56.41506195 6.64183044]
[-69.81584930 -0.37771004]
[-80.39015961 -11.19617939]
[-87.10201263 -24.75369453]
[-89.29385376 -39.72202682]
[-86.75095367 -54.63473511]
[-79.72243500 -68.03082275]
[-68.89688110 -78.59787750]
[-55.33486938 -85.30064392]
[-40.36507034 -87.48245239]
[-25.45407104 -84.92955780]
[-12.06269741 -77.89206696]
[-1.50290132 -67.05943298]
[5.19077635 -53.49293518]
[7.36255741 -38.52167892]
[4.79967308 -23.61239433]
[-2.24679184 -10.22573853]
[12.60344696 -10.30312729]
[23.38220406 0.43340072]
[23.36268806 16.01022148]
[33.84035873 26.74420738]
[44.31802750 37.47819138]
[55.05201340 47.95586014]
[66.03604126 58.17110062]
[77.02007294 68.38633728]
[88.00410461 78.60157776]
[98.98813629 88.81681061]
[110.21579742 98.76365662]
[121.68052673 108.43628693]
[143.81044006 109.88151550]
[152.17248535 129.65348816]
[165.28199768 136.94323730]
[178.39152527 144.23298645]
[192.93238831 138.47994995]
[207.75289917 143.46858215]
[215.85527039 156.84339905]
[213.41380310 172.28921509]
[201.58129883 182.51300049]
[185.94468689 182.68737793]
[173.88710022 172.73002625]
[171.10177612 157.34251404]
[157.99224854 150.05274963]
[144.88273621 142.76300049]
[137.22021484 146.85229492]
[128.45243835 147.35519409]
[120.19255829 144.09791565]
[113.99433899 137.60597229]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 46]
[2 45]
[4 44]
[5 43]
[6 42]
[7 41]
[8 40]
[10 39]
[11 38]
[12 37]
[15 34]
[48 60]
[49 59]
[50 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
