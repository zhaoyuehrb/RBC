%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 23:58:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUGCCCAGCCCCGCUCAGGCCUAGGAGGCCCCCCGUGUGGACACAGAUCCCACUGGAAGAUCCCCUCUCCUGCCCAAGCACUUCACAGCUGGACCCUGCUUCACCCUCACCCCCUCCUGGCAAUCAAUACAGCUUCAUUAUCUGAGUUGCAUAA\
) } def
/len { sequence length } bind def

/coor [
[156.92086792 527.27502441]
[153.06274414 541.77032471]
[149.20463562 556.26568604]
[145.34651184 570.76104736]
[150.13742065 586.44476318]
[138.75404358 598.24945068]
[122.90663147 594.03143311]
[118.89762878 578.12988281]
[130.85116577 566.90289307]
[134.70928955 552.40753174]
[138.56741333 537.91223145]
[142.42552185 523.41687012]
[129.46893311 505.76043701]
[133.68394470 483.99316406]
[152.75592041 472.16333008]
[154.85011292 457.31024170]
[156.94432068 442.45715332]
[159.03852844 427.60406494]
[161.13272095 412.75097656]
[163.22692871 397.89788818]
[162.32701111 382.92489624]
[158.46888733 368.42956543]
[154.61076355 353.93423462]
[149.82446289 348.24746704]
[150.82357788 339.11019897]
[147.25625610 324.54055786]
[143.68894958 309.97091675]
[140.12162781 295.40130615]
[136.55432129 280.83166504]
[132.98701477 266.26202393]
[118.07212067 265.20986938]
[104.19390106 259.59155273]
[92.71622467 249.94567871]
[84.77121735 237.20724487]
[81.14764404 222.61709595]
[82.21257782 207.60107422]
[87.87429047 193.63063049]
[97.58996582 182.07864380]
[110.41774750 174.08456421]
[106.85044098 159.51492310]
[103.28312683 144.94529724]
[99.71581268 130.37565613]
[96.14849854 115.80602264]
[86.54861450 109.15011597]
[83.88415527 97.77648926]
[89.52889252 87.54928589]
[86.25381470 72.91118622]
[82.97873688 58.27309036]
[68.89244080 52.03752136]
[61.26795959 38.85720444]
[62.84782791 23.89164352]
[72.81774902 12.85811520]
[69.54267120 -1.77998090]
[66.26759338 -16.41807747]
[62.84622574 -31.02267456]
[59.27891159 -45.59230804]
[55.71159744 -60.16194534]
[51.99869537 -74.69515991]
[48.14057541 -89.19049835]
[44.28245544 -103.68584442]
[40.42433548 -118.18118286]
[34.88050079 -104.24325562]
[23.57521439 -94.38472748]
[9.01251602 -90.78919983]
[-5.58206224 -94.25305176]
[-16.97592735 -104.00907135]
[-22.64542198 -117.89636230]
[-21.33479500 -132.83898926]
[-13.33433723 -145.52728271]
[-0.41609490 -153.15086365]
[14.55863571 -154.02117920]
[28.27306175 -147.94543457]
[37.68898773 -136.27055359]
[37.08884430 -151.25854492]
[36.48870087 -166.24653625]
[27.27484703 -179.81256104]
[34.65904617 -194.45515442]
[51.04505920 -195.11128235]
[59.57636642 -181.10595703]
[51.47668839 -166.84667969]
[52.07683182 -151.85868835]
[52.67697525 -136.87069702]
[54.91967773 -122.03930664]
[58.77779770 -107.54396057]
[62.63591766 -93.04862213]
[66.49403381 -78.55328369]
[71.28034973 -72.86653137]
[70.28123474 -63.72925949]
[73.84854889 -49.15962219]
[77.41586304 -34.58998871]
[82.08743286 -28.80860901]
[80.90568542 -19.69315529]
[84.18076324 -5.05505896]
[87.45584106 9.58303738]
[101.17704010 15.31599808]
[108.98371887 28.18144417]
[107.70286560 43.35420990]
[97.61683655 54.99801254]
[100.89191437 69.63610840]
[104.16699219 84.27420807]
[115.83966827 96.28929901]
[110.71813202 112.23870850]
[114.28544617 126.80834198]
[117.85276031 141.37797546]
[121.42007446 155.94761658]
[124.98738861 170.51725769]
[140.05735779 171.68069458]
[154.01097107 177.43734741]
[165.48652649 187.21180725]
[173.36833191 200.03726196]
[176.89521790 214.65107727]
[175.73402405 229.61912537]
[170.01101685 243.47651672]
[160.29829407 254.87095642]
[147.55664062 262.69470215]
[151.12396240 277.26434326]
[154.69126892 291.83398438]
[158.25857544 306.40362549]
[161.82589722 320.97326660]
[165.39320374 335.54287720]
[169.10610962 350.07611084]
[172.96423340 364.57144165]
[176.82235718 379.06677246]
[180.92176819 364.63781738]
[188.85510254 351.90747070]
[200.00234985 341.87057495]
[213.49232483 335.31158447]
[228.27078247 332.74307251]
[243.18275452 334.36578369]
[257.06283569 340.05291748]
[268.82629395 349.35995483]
[277.55377197 361.55957031]
[282.56323242 375.69836426]
[283.46316528 390.67135620]
[280.18319702 405.30834961]
[272.97973633 418.46548462]
[262.41571045 429.11450195]
[249.31669617 436.42312622]
[234.70643616 439.82019043]
[219.72673035 439.04025269]
[205.54826355 434.14422607]
[193.27911377 425.51473999]
[183.87812805 413.82620239]
[178.08001709 399.99209595]
[175.98580933 414.84518433]
[173.89161682 429.69827271]
[171.79740906 444.55136108]
[169.70321655 459.40444946]
[167.60900879 474.25753784]
[174.70477295 478.83923340]
[180.09848022 485.29507446]
[183.31912231 493.02993774]
[184.09481812 501.33850098]
[182.37565613 509.46954346]
[178.33636475 516.69384766]
[172.35882568 522.36975098]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[4 9]
[15 149]
[16 148]
[17 147]
[18 146]
[19 145]
[20 144]
[21 123]
[22 122]
[23 121]
[25 120]
[26 119]
[27 118]
[28 117]
[29 116]
[30 115]
[39 106]
[40 105]
[41 104]
[42 103]
[43 102]
[46 100]
[47 99]
[48 98]
[52 94]
[53 93]
[54 92]
[55 90]
[56 89]
[57 88]
[58 86]
[59 85]
[60 84]
[61 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
