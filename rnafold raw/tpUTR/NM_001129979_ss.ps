%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 23:08:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAGCAGGACCCGCCCGUUCCCGACCUUCCCUCGAGACCCGCCAAGAAAUAAAGGCGAUGAUUUCCGACCAU\
) } def
/len { sequence length } bind def

/coor [
[76.20898438 169.04287720]
[74.00942993 154.20501709]
[75.98386383 139.33554077]
[81.97940063 125.58586121]
[91.52815247 114.02400970]
[78.75521851 121.88861847]
[71.06069183 135.71267700]
[56.16632462 135.79714966]
[43.39338684 143.66175842]
[38.29742050 158.87394714]
[23.17797661 164.23883057]
[9.63339806 155.64093018]
[8.05392742 139.67581177]
[19.65119934 128.59056091]
[35.52877808 130.88882446]
[48.30171585 123.02420807]
[55.08263397 109.76267242]
[70.89060974 109.11567688]
[83.66354370 101.25106812]
[86.19855499 86.46683502]
[76.77525330 74.79629517]
[62.08581543 68.91999817]
[60.11018753 54.15699387]
[50.68688583 42.48645782]
[41.26358414 30.81592178]
[25.62641907 30.70180130]
[13.75459194 20.52370071]
[11.25361824 5.08740854]
[19.30438042 -8.31853104]
[34.10555649 -13.36424351]
[48.66848373 -7.66729641]
[56.11698914 6.08238506]
[52.93412399 21.39262199]
[62.35742188 33.06315994]
[71.78072357 44.73369598]
[85.79614258 49.77524185]
[88.44579315 65.37299347]
[97.86909485 77.04353333]
[100.93951416 80.96407318]
[102.86235809 85.21142578]
[103.61820984 89.54120636]
[116.71342468 82.22578430]
[129.80863953 74.91035461]
[142.90385437 67.59493256]
[143.04095459 52.23665237]
[150.85266113 39.01269913]
[164.23764038 31.48025322]
[179.59541321 31.66550255]
[192.79481506 39.51861572]
[200.28527832 52.92714691]
[200.05187988 68.28426361]
[192.15744019 81.45898438]
[178.72549438 88.90737152]
[163.36918640 88.62584686]
[150.21926880 80.69014740]
[137.12405396 88.00556946]
[124.02884674 95.32099152]
[110.93363953 102.63641357]
[125.68904877 99.93867493]
[140.61656189 101.41149139]
[154.56025696 106.94081116]
[166.44038391 116.09848022]
[175.33695984 128.17533875]
[180.56111145 142.23622131]
[181.70826721 157.19229126]
[178.68959045 171.88540649]
[171.73886108 185.17779541]
[161.39431763 196.04013062]
[148.45698547 203.63127136]
[133.92869568 207.36338806]
[118.93445587 206.94749451]
[104.63538361 202.41577148]
[92.13873291 194.11915588]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 19]
[6 18]
[8 16]
[9 15]
[20 38]
[21 37]
[23 35]
[24 34]
[25 33]
[41 58]
[42 57]
[43 56]
[44 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
