%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 03:22:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUUUUAUUGUUUGUUGGAAUCGAUAUGUACAAAGUGUAAAUAAAUGUUUCUUUUCAUUAUCCUUGCUUGAGCCCAUCAA\
) } def
/len { sequence length } bind def

/coor [
[74.43006897 222.96261597]
[72.24968719 238.03463745]
[64.12197876 250.91329956]
[51.45510864 259.36730957]
[36.44369507 261.93197632]
[21.68855858 258.16290283]
[9.74611282 248.71315002]
[2.68545842 235.21992493]
[1.72989762 220.02101135]
[7.04498625 205.74972534]
[17.70985413 194.87864685]
[31.87674713 189.29124451]
[47.09116745 189.95558167]
[53.74696350 176.51309204]
[60.40275955 163.07061768]
[59.11620331 148.23167419]
[72.17351532 139.29762268]
[78.82931519 125.85514832]
[85.48510742 112.41266632]
[80.94907379 98.65146637]
[87.37836456 85.66645050]
[101.07241058 80.93154144]
[107.72820282 67.48905945]
[114.38400269 54.04657364]
[121.03980255 40.60408783]
[106.92410278 45.67824936]
[91.98368073 44.34263229]
[78.99183655 36.84516525]
[70.36016846 24.57755661]
[67.69091797 9.81696510]
[71.47955322 -4.69669151]
[81.02282715 -16.26932907]
[94.54927063 -22.75279427]
[109.54805756 -22.94359589]
[123.23505402 -16.80632019]
[133.06962585 -5.48019075]
[137.22624207 8.93239212]
[134.93254089 23.75815582]
[146.86193848 14.66477489]
[158.79132080 5.57139349]
[170.72071838 -3.52198768]
[170.05450439 -20.29988289]
[179.34931946 -34.08570862]
[194.84315491 -39.64793777]
[210.46823120 -35.01504898]
[222.04057312 -44.55868530]
[233.61289978 -54.10232544]
[245.18524170 -63.64596176]
[244.10028076 -79.12506104]
[252.34944153 -92.26777649]
[266.76077271 -98.02046204]
[281.79278564 -94.17109680]
[291.66540527 -82.19984436]
[292.58239746 -66.70988464]
[284.19116211 -53.65743256]
[269.71826172 -48.06141663]
[254.72888184 -52.07362366]
[243.15653992 -42.52998734]
[231.58419800 -32.98635101]
[220.01187134 -23.44271278]
[222.05505371 -10.10689926]
[217.14166260 2.57507968]
[206.47731018 11.19047260]
[192.83045959 13.36299706]
[179.81410217 8.40740490]
[167.88470459 17.50078583]
[155.95530701 26.59416771]
[144.02592468 35.68754959]
[134.48228455 47.25988770]
[127.82648468 60.70236969]
[121.17068481 74.14485168]
[114.51489258 87.58733368]
[119.05092621 101.34853363]
[112.62163544 114.33354950]
[98.92758942 119.06845856]
[92.27179718 132.51094055]
[85.61599731 145.95343018]
[86.42649078 161.75386047]
[73.84524536 169.72640991]
[67.18944550 183.16889954]
[60.53364944 196.61137390]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 81]
[14 80]
[15 79]
[17 77]
[18 76]
[19 75]
[22 72]
[23 71]
[24 70]
[25 69]
[38 68]
[39 67]
[40 66]
[41 65]
[45 60]
[46 59]
[47 58]
[48 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
