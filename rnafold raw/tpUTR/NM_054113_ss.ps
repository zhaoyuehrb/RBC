%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 23:39:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGCACCACAGAGGAGCCGAGCUAUAGGAGGGCGGGGUGACCCCUCACCCGCUGUGGACUCUGGUUUCUGAGAAUAAACACAAGUCACUGAGUCACA\
) } def
/len { sequence length } bind def

/coor [
[150.38737488 372.07498169]
[141.65890503 359.84094238]
[134.85139465 346.44262695]
[130.11692810 332.17929077]
[127.56128693 317.36962891]
[127.24155426 302.34445190]
[129.16488647 287.43948364]
[133.28829956 272.98767090]
[139.51968384 259.31185913]
[147.71981812 246.71760559]
[157.70552063 235.48625183]
[169.25370789 225.86871338]
[161.47782898 213.04156494]
[153.70193481 200.21443176]
[145.92604065 187.38728333]
[138.15016174 174.56013489]
[130.37426758 161.73300171]
[122.59838104 148.90585327]
[114.61789703 136.20500183]
[106.43487549 123.63367462]
[98.25185394 111.06235504]
[89.86839294 98.62380219]
[81.28663635 86.32122040]
[72.70488739 74.01863098]
[64.12313843 61.71604919]
[55.54138947 49.41346741]
[46.95964050 37.11088181]
[34.30871582 34.03076553]
[27.43472862 23.45059395]
[29.61799812 11.43353844]
[21.43497467 -1.13778341]
[13.25195122 -13.70910454]
[-0.76106411 -21.05389786]
[-1.21969581 -35.94144058]
[-9.40271950 -48.51276016]
[-17.58574295 -61.08408356]
[-25.76876640 -73.65540314]
[-41.10417938 -78.36758423]
[-46.84721756 -93.34747314]
[-38.59230804 -107.10378265]
[-22.67191696 -109.08385468]
[-11.29880142 -97.76873779]
[-13.19744492 -81.83843231]
[-5.01442146 -69.26710510]
[3.16860223 -56.69578552]
[11.35162544 -44.12446213]
[24.77933693 -37.67885590]
[25.82327271 -21.89212799]
[34.00629425 -9.32080650]
[42.18931961 3.25051475]
[58.20137405 10.23317814]
[59.26222610 28.52913284]
[67.84397125 40.83171844]
[76.42572784 53.13430023]
[85.00747681 65.43688202]
[93.58922577 77.73947144]
[102.17097473 90.04205322]
[109.12918091 94.42713165]
[110.82317352 102.87932587]
[119.00619507 115.45065308]
[127.18922424 128.02197266]
[134.63542175 133.63858032]
[135.42552185 141.12997437]
[143.20141602 153.95710754]
[150.97729492 166.78425598]
[158.75318909 179.61138916]
[166.52908325 192.43853760]
[174.30496216 205.26567078]
[182.08085632 218.09281921]
[195.94923401 212.30268860]
[210.52572632 208.64430237]
[225.48466492 207.19938660]
[240.49186707 208.00022888]
[255.21208191 211.02893066]
[269.31643677 216.21783447]
[282.48983765 223.45101929]
[294.43801880 232.56687927]
[304.89398193 243.36178589]
[313.62420654 255.59457397]
[320.43362427 268.99194336]
[325.17013550 283.25460815]
[327.72787476 298.06390381]
[328.04974365 313.08901978]
[326.12854004 327.99426270]
[322.00720215 342.44668579]
[315.77774048 356.12335205]
[307.57940674 368.71878052]
[297.59530640 379.95156860]
[286.04849243 389.57073975]
[273.19692993 397.36145020]
[259.32769775 403.14959717]
[244.75070190 406.80590820]
[229.79156494 408.24868774]
[214.78446960 407.44570923]
[200.06468201 404.41491699]
[185.96107483 399.22399902]
[172.78869629 391.98895264]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 69]
[13 68]
[14 67]
[15 66]
[16 65]
[17 64]
[18 63]
[19 61]
[20 60]
[21 59]
[22 57]
[23 56]
[24 55]
[25 54]
[26 53]
[27 52]
[30 50]
[31 49]
[32 48]
[34 46]
[35 45]
[36 44]
[37 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
