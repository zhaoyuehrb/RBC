%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 10:07:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCGCCUGGCAGACUCGCCAUCCCCCAACGACACAGGGCAGGACAGCAGAGGACGUGCUGGGAUUAAACACAUUCCCCCUCUA\
) } def
/len { sequence length } bind def

/coor [
[100.57875061 122.92695618]
[93.64569855 136.22856140]
[86.71263885 149.53016663]
[79.77957916 162.83177185]
[81.02668762 179.18344116]
[67.33840942 188.21467590]
[52.79608154 180.63491821]
[52.35959244 164.24157715]
[66.47797394 155.89871216]
[73.41103363 142.59710693]
[80.34409332 129.29550171]
[87.27714539 115.99390411]
[75.03799438 124.66587067]
[60.38050079 121.47871399]
[52.84750366 108.50743866]
[57.34339142 94.19705963]
[70.94109344 87.86441040]
[84.78746033 93.63207245]
[75.09854126 82.18109894]
[59.59046173 80.71918488]
[49.92763901 68.96824646]
[51.41691971 54.19266891]
[41.72800064 42.74169540]
[32.03907776 31.29072189]
[21.93364334 20.20558739]
[11.42549801 9.50143623]
[0.91735262 -1.20271635]
[-14.16584015 2.03778291]
[-28.59852028 -3.41210890]
[-37.77526855 -15.81335163]
[-38.76782227 -31.20875168]
[-31.25945854 -44.68569565]
[-17.64606857 -51.94374084]
[-2.27163768 -50.66686630]
[9.95791054 -41.26251984]
[15.14017200 -26.73159790]
[11.62150478 -11.71086216]
[22.12965012 -1.00670969]
[32.63779449 9.69744301]
[37.55091095 10.61744118]
[41.85056686 14.78961754]
[43.49005127 21.60180092]
[53.17897415 33.05277634]
[62.86789322 44.50374985]
[77.68613434 45.48117447]
[87.67520142 56.95606995]
[86.54951477 72.49217224]
[96.23843384 83.94314575]
[109.27477264 91.36298370]
[124.06777954 93.84629822]
[138.86079407 96.32960510]
[153.65380859 98.81291199]
[168.44682312 101.29621887]
[161.18972778 88.16859436]
[163.76542664 73.39138794]
[175.03598022 63.49317551]
[190.02204895 62.84698868]
[202.10279846 71.73830414]
[205.94094849 86.23895264]
[199.84078979 99.94253540]
[186.49792480 106.79473877]
[200.16325378 112.98007965]
[213.82859802 119.16542816]
[227.49394226 125.35076904]
[239.92797852 116.33467102]
[255.20588684 114.75949097]
[269.21798706 121.04893494]
[278.19503784 133.51118469]
[279.72235107 148.79394531]
[273.38900757 162.78623962]
[260.89868164 171.72421265]
[245.61120605 173.20359802]
[231.63882446 166.82643127]
[222.74005127 154.30815125]
[221.30859375 139.01611328]
[207.64324951 132.83076477]
[193.97792053 126.64542389]
[180.31257629 120.46007538]
[165.96350098 116.08923340]
[151.17050171 113.60591888]
[136.37748718 111.12261200]
[121.58447266 108.63930511]
[106.79146576 106.15599823]
[107.36154175 111.61998749]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[4 9]
[18 48]
[19 47]
[22 44]
[23 43]
[24 42]
[25 39]
[26 38]
[27 37]
[49 83]
[50 82]
[51 81]
[52 80]
[53 79]
[61 78]
[62 77]
[63 76]
[64 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
