%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 12:55:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUUUUCACCUACAAAAUUUCACCUGCAAACCUUAAACCUGCAAAAUUUUCCUUUAAUAAAAUUUGCUUGUUUUAAAAACAUUGUAUCUA\
) } def
/len { sequence length } bind def

/coor [
[-4.08815575 347.03439331]
[-11.57339001 360.09030151]
[-21.46211433 371.43487549]
[-33.37423325 380.63204956]
[-46.85187149 387.32827759]
[-61.37699509 391.26617432]
[-76.39128876 392.29440308]
[-91.31764221 390.37341309]
[-105.58232880 385.57708740]
[-118.63705444 378.08975220]
[-129.98002625 368.19918823]
[-139.17526245 356.28558350]
[-145.86929321 342.80685425]
[-149.80485535 328.28109741]
[-150.83065796 313.26663208]
[-148.90725708 298.34057617]
[-144.10861206 284.07666016]
[-136.61915588 271.02316284]
[-126.72675323 259.68179321]
[-114.81166077 250.48849487]
[-101.33184814 243.79663086]
[-86.80545807 239.86341858]
[-71.79083252 238.84005737]
[-56.86510086 240.76586914]
[-42.60196304 245.56681824]
[-29.54966354 253.05839539]
[-19.69160843 241.75270081]
[-9.83355331 230.44700623]
[0.02450227 219.14131165]
[9.88255787 207.83561707]
[2.32723093 192.11090088]
[2.25160265 174.61381531]
[9.71461868 158.73092651]
[23.31183434 147.55538940]
[40.43950272 143.28454590]
[57.79309845 146.78808594]
[66.44330597 134.53353882]
[75.09350586 122.27899170]
[83.74371338 110.02443695]
[81.38528442 95.72814178]
[89.74111176 83.89064026]
[104.00173950 81.32535553]
[112.65194702 69.07080841]
[121.30214691 56.81625748]
[129.95234680 44.56171036]
[138.60255432 32.30716324]
[141.07313538 23.28895950]
[147.76319885 19.78874397]
[156.82673645 7.83666706]
[165.89028931 -4.11540937]
[174.95382690 -16.06748581]
[170.33340454 -30.88070107]
[175.33428955 -45.56984329]
[188.03350830 -54.48663712]
[203.54798889 -54.20239639]
[215.91206360 -44.82641602]
[220.37152100 -29.96395111]
[215.21159363 -15.32992172]
[202.41638184 -6.55141354]
[186.90591431 -7.00394011]
[177.84236145 4.94813633]
[168.77882385 16.90021324]
[159.71527100 28.85228920]
[150.85710144 40.95736694]
[142.20690918 53.21191406]
[133.55670166 65.46646118]
[124.90649414 77.72100830]
[116.25628662 89.97556305]
[118.61471558 104.27185822]
[110.25888824 116.10935974]
[95.99826050 118.67464447]
[87.34805298 130.92919922]
[78.69785309 143.18374634]
[70.04764557 155.43829346]
[77.29542542 165.94976807]
[80.88028717 178.17831421]
[80.45658112 190.88961792]
[76.08245087 202.80570984]
[68.21242523 212.73344421]
[57.65023041 219.68394470]
[45.46675491 222.97111511]
[32.89144135 222.27932739]
[21.18825340 217.69366455]
[11.33019733 228.99935913]
[1.47214246 240.30505371]
[-8.38591290 251.61076355]
[-18.24396706 262.91644287]
[-9.04488373 274.82708740]
[-2.34647846 288.30364990]
[1.59377897 302.82812500]
[2.62443566 317.84225464]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[26 87]
[27 86]
[28 85]
[29 84]
[30 83]
[36 74]
[37 73]
[38 72]
[39 71]
[42 68]
[43 67]
[44 66]
[45 65]
[46 64]
[48 63]
[49 62]
[50 61]
[51 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
