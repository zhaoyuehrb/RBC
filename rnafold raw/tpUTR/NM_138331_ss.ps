%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 16:07:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCUGGUGCCCACGUUCCACCUCACACUCUGCAGACUGUAUGCUGCUGCUUUUCCUCCCUCCAGUUCGUUAUUAAUCCUUGCUCCCCACUGCAAAUG\
) } def
/len { sequence length } bind def

/coor [
[90.56347656 218.69839478]
[73.02021027 215.97607422]
[56.07668304 210.67564392]
[40.10955429 202.91497803]
[25.47375488 192.86654663]
[12.49463654 180.75375366]
[0.85243976 190.21203613]
[-10.78975677 199.67033386]
[-22.43195343 209.12861633]
[-20.61985588 224.44918823]
[-27.39888191 238.30734253]
[-40.60586929 246.28099060]
[-56.02651596 245.82577515]
[-68.74015045 237.08694458]
[-74.68989563 222.85304260]
[-71.97721100 207.66604614]
[-61.46770859 196.37207031]
[-46.51492691 192.57498169]
[-31.89024353 197.48641968]
[-20.24804688 188.02813721]
[-8.60585022 178.56983948]
[3.03634667 169.11155701]
[-6.67004204 152.91369629]
[-13.69368744 135.38507080]
[-17.85794449 116.96649933]
[-19.05808449 98.12122345]
[-17.26392174 79.32320404]
[-12.52058125 61.04520416]
[-4.94735670 43.74691391]
[5.26528597 27.86338425]
[17.86049843 13.79408550]
[32.52151489 1.89285779]
[24.81635475 -10.97689342]
[17.11119270 -23.84664536]
[9.40603256 -36.71639633]
[2.17858744 -42.60608292]
[1.66804290 -50.11898804]
[-13.75197124 -51.85184479]
[-25.18574142 -62.34224701]
[-28.23675156 -77.55641937]
[-21.73182487 -91.64419556]
[-8.17223740 -99.18854523]
[7.22807074 -97.28851318]
[18.54736710 -86.67469788]
[21.43315315 -71.42832184]
[14.77578354 -57.41193771]
[22.27578354 -44.42155838]
[29.98094368 -31.55180550]
[37.68610382 -18.68205452]
[45.39126587 -5.81230307]
[55.58298111 -10.47843933]
[66.16830444 -14.16555309]
[77.05342865 -16.84096909]
[88.14190674 -18.48098183]
[99.33545685 -19.07105255]
[110.53490448 -18.60595703]
[121.64099121 -17.08981514]
[132.55529785 -14.53606224]
[143.18112183 -10.96732903]
[153.42428589 -6.41524076]
[163.19401550 -0.92013615]
[172.40374756 5.46928930]
[180.97184753 12.69641399]
[188.82241821 20.69719315]
[195.88586426 29.40072823]
[202.09960938 38.72989273]
[207.40858459 48.60200882]
[211.76573181 58.92959595]
[215.13246155 69.62113953]
[217.47891235 80.58188629]
[218.78430176 91.71471405]
[219.03707886 102.92095947]
[218.23498535 114.10132599]
[216.38511658 125.15672302]
[213.50390625 135.98919678]
[209.61683655 146.50274658]
[204.75840759 156.60420227]
[198.97161865 166.20404053]
[192.30778503 175.21720886]
[184.82595825 183.56382751]
[194.82749939 194.74279785]
[204.82902527 205.92176819]
[214.83056641 217.10073853]
[230.25347900 215.39382935]
[243.71745300 223.10749817]
[250.04534912 237.27568054]
[246.80393982 252.45042419]
[235.23960876 262.79672241]
[219.79908752 264.33621216]
[206.41957092 256.47695923]
[200.24575806 242.24095154]
[203.65159607 227.10226440]
[193.65007019 215.92329407]
[183.64852905 204.74433899]
[173.64698792 193.56536865]
[158.91706848 203.47529602]
[142.87744141 211.08502197]
[125.88468170 216.22538757]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 22]
[7 21]
[8 20]
[9 19]
[32 50]
[33 49]
[34 48]
[35 47]
[37 46]
[80 95]
[81 94]
[82 93]
[83 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
