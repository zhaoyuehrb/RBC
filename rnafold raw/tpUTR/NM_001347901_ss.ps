%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 11:03:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAUAGCCCCGGGAGGGCUGGCCAGGCCACUCCCUGCCCGCUUUUGUAAUUUAUUUAUUUAUAAACUCUCUGCUGCUGAGCUUGGGGCCUGGAGCCCCAGGAAUGAGCAGGCAGGGGAGACUGAGAUGGAAAUAAAGAGACUGUCGCAGCA\
) } def
/len { sequence length } bind def

/coor [
[115.48152161 198.76243591]
[106.29179382 210.61776733]
[92.93800354 217.44976807]
[77.94687653 217.96572876]
[64.15496063 212.06800842]
[54.17188644 200.87255859]
[49.88659668 186.49771118]
[52.10992813 171.66339111]
[60.42119598 159.17649841]
[73.24498749 151.40065002]
[81.31079102 138.75379944]
[68.16915894 145.98550415]
[55.02752686 153.21719360]
[41.88589478 160.44889832]
[28.81920052 167.81513977]
[15.82881927 175.31513977]
[2.83843803 182.81513977]
[-10.15194321 190.31513977]
[-18.94960976 206.45922852]
[-36.46154404 205.84545898]
[-49.29519653 213.61059570]
[-62.12885284 221.37573242]
[-74.96250153 229.14086914]
[-85.38405609 242.51350403]
[-101.11906433 236.20115662]
[-99.40927887 219.33363342]
[-82.72763824 216.30720520]
[-69.89398956 208.54206848]
[-57.06033325 200.77694702]
[-44.22667694 193.01181030]
[-41.01224136 181.31011963]
[-30.33091736 174.74652100]
[-17.65194321 177.32476807]
[-4.66156197 169.82476807]
[8.32881927 162.32476807]
[21.31920052 154.82476807]
[25.56558228 148.71899414]
[34.65419388 147.30726624]
[47.79582214 140.07556152]
[60.93745422 132.84387207]
[74.07908630 125.61215973]
[68.10514832 112.54428864]
[67.90838623 99.03791809]
[72.84489441 87.39264679]
[61.25584793 77.86930847]
[49.66679764 68.34597015]
[38.07775116 58.82263565]
[26.48870087 49.29929733]
[14.89965248 39.77595901]
[3.31060457 30.25262070]
[-11.34135151 35.08208847]
[-26.27263451 31.20132637]
[-36.71873093 19.84867668]
[-39.34632111 4.64672613]
[-33.31695938 -9.55363750]
[-20.55458832 -18.22113037]
[-5.13163519 -18.58998680]
[8.03049183 -10.54250526]
[14.73180580 3.35339141]
[12.83394241 18.66357231]
[24.42299080 28.18691063]
[36.01203918 37.71024704]
[47.60108566 47.23358536]
[59.19013596 56.75692368]
[70.77918243 66.28025818]
[82.36823273 75.80359650]
[96.93166351 70.21862030]
[112.32790375 72.71689606]
[121.73175812 61.03068542]
[131.13562012 49.34447479]
[140.53947449 37.65826797]
[149.94332886 25.97205925]
[159.34718323 14.28584957]
[168.75103760 2.59964132]
[178.03442383 -9.18249607]
[187.19636536 -21.05931854]
[196.35830688 -32.93614197]
[205.52023315 -44.81296539]
[207.82301331 -60.46569061]
[221.72308350 -65.81708527]
[223.71990967 -84.09394073]
[240.14939880 -90.18626404]
[249.06555176 -102.24869537]
[257.98168945 -114.31112671]
[266.89785767 -126.37355804]
[275.81399536 -138.43598938]
[284.73016357 -150.49841309]
[293.64630127 -162.56085205]
[302.56246948 -174.62327576]
[301.61453247 -190.63830566]
[313.64044189 -201.25703430]
[329.41488647 -198.33369446]
[336.83709717 -184.11082458]
[330.21337891 -169.49897766]
[314.62487793 -165.70713806]
[305.70874023 -153.64469910]
[296.79257202 -141.58227539]
[287.87643433 -129.51983643]
[278.96029663 -117.45740509]
[270.04412842 -105.39497375]
[261.12799072 -93.33254242]
[252.21183777 -81.27011108]
[253.68920898 -69.22521210]
[246.30670166 -59.09259796]
[233.59991455 -56.65515137]
[231.95245361 -41.85193634]
[217.39706421 -35.65103149]
[208.23512268 -23.77420807]
[199.07319641 -11.89738369]
[189.91125488 -0.02056033]
[188.30604553 7.24136019]
[180.43725586 12.00349808]
[171.03340149 23.68970680]
[161.62953186 35.37591553]
[152.22567749 47.06212616]
[142.82182312 58.74833298]
[133.41796875 70.43453979]
[124.01411438 82.12075043]
[130.97979736 93.95382690]
[132.12040710 108.35607910]
[126.58837891 122.47504425]
[114.91835022 133.24633789]
[124.56016541 144.73701477]
[134.20198059 156.22767639]
[148.99967957 161.82579041]
[151.25349426 176.54887390]
[160.89530945 188.03955078]
[170.53712463 199.53021240]
[180.17893982 211.02087402]
[189.82075500 222.51155090]
[204.76075745 219.18670654]
[219.53158569 223.19688416]
[230.73898315 233.62054443]
[235.80757141 248.06242371]
[233.57264709 263.20388794]
[224.54776001 275.56552124]
[210.80677795 282.30673218]
[195.50726318 281.87841797]
[182.16493225 274.37899780]
[173.84577942 261.53182983]
[172.46145630 246.28904724]
[178.33007812 232.15336609]
[168.68826294 220.66268921]
[159.04644775 209.17202759]
[149.40463257 197.68136597]
[139.76283264 186.19068909]
[125.65477753 181.41447449]
[122.71131134 165.86949158]
[113.06949615 154.37882996]
[103.42768097 142.88815308]
[106.38025665 157.59469604]
[115.53037262 169.48063660]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 41]
[12 40]
[13 39]
[14 38]
[15 36]
[16 35]
[17 34]
[18 33]
[20 30]
[21 29]
[22 28]
[23 27]
[44 66]
[45 65]
[46 64]
[47 63]
[48 62]
[49 61]
[50 60]
[68 118]
[69 117]
[70 116]
[71 115]
[72 114]
[73 113]
[74 112]
[75 110]
[76 109]
[77 108]
[78 107]
[80 105]
[82 102]
[83 101]
[84 100]
[85 99]
[86 98]
[87 97]
[88 96]
[89 95]
[122 150]
[123 149]
[124 148]
[126 146]
[127 145]
[128 144]
[129 143]
[130 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
