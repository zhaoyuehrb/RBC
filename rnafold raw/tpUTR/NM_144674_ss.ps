%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 02:59:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACCGCCCUGGCGCCUCAUUCCGCGCUGGCGUAAAAUUGGAAAAGGCUGAGAAACAAAGUAAAACAGUAUUUUGUUUG\
) } def
/len { sequence length } bind def

/coor [
[100.71243286 163.68124390]
[79.64385223 160.34431458]
[60.85902405 150.23736572]
[46.46541214 134.49429321]
[38.07783508 114.88131714]
[23.18180656 116.64437866]
[8.28578091 118.40744019]
[-6.61024618 120.17050171]
[-12.49114513 124.05638123]
[-18.51431084 124.15682220]
[-22.73817062 121.43979645]
[-37.72660446 122.02869415]
[-52.71504211 122.61759186]
[-67.70347595 123.20648956]
[-82.69190979 123.79538727]
[-91.20043945 136.77169800]
[-105.72315979 142.23706055]
[-120.67578888 138.08995056]
[-130.30873108 125.92499542]
[-130.91792297 110.41988373]
[-122.26913452 97.53664398]
[-107.68798065 92.22914124]
[-92.78121948 96.53821564]
[-83.28080750 108.80695343]
[-68.29237366 108.21805573]
[-53.30393982 107.62915802]
[-38.31550217 107.04026031]
[-23.32706833 106.45136261]
[-8.37330723 105.27447510]
[6.52271938 103.51141357]
[21.41874695 101.74835205]
[36.31477356 99.98529053]
[37.17730331 89.55409241]
[39.73677444 79.40505219]
[43.92404938 69.81231689]
[49.62602997 61.03499603]
[56.68869019 53.31018448]
[64.92125702 46.84653854]
[74.10136414 41.81865692]
[83.98102570 38.36234283]
[94.29339600 36.57096100]
[104.75990295 36.49290085]
[115.09783936 38.13026810]
[125.02795410 41.43883896]
[134.28202820 46.32923889]
[142.61009216 52.66937256]
[149.78718567 60.28798294]
[155.61944580 68.97927856]
[159.94934082 78.50849152]
[162.65989685 88.61822510]
[163.67791748 99.03540039]
[162.97590637 109.47863007]
[160.57279968 119.66583252]
[174.19494629 125.94572449]
[187.81709290 132.22561646]
[201.43923950 138.50552368]
[215.06138611 144.78541565]
[228.68353271 151.06530762]
[242.30567932 157.34521484]
[255.92782593 163.62510681]
[269.54998779 169.90499878]
[283.17211914 176.18489075]
[297.91094971 170.48030090]
[312.33267212 176.94480896]
[317.88110352 191.74313354]
[311.26449585 206.09568787]
[296.40832520 211.48736572]
[282.12652588 204.71937561]
[276.89221191 189.80703735]
[263.27008057 183.52714539]
[249.64793396 177.24725342]
[236.02578735 170.96736145]
[222.40364075 164.68745422]
[208.78149414 158.40756226]
[195.15934753 152.12767029]
[181.53720093 145.84777832]
[167.91503906 139.56787109]
[154.29289246 133.28797913]
[140.25509644 149.34912109]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 32]
[6 31]
[7 30]
[8 29]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[53 78]
[54 77]
[55 76]
[56 75]
[57 74]
[58 73]
[59 72]
[60 71]
[61 70]
[62 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
