%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 05:57:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACUUAAAUCUUACAAGUGGAAAGAAAAUUCCGUGGUAAAUUUAAGUACAAAAGUCAACCAAAAUUCUGAGUCUCGGACAAGACUGGUUAAAAAUCGUUCUACAAUGAAACUAAUAAAUUAAAUCAUAUAAAACUUUUA\
) } def
/len { sequence length } bind def

/coor [
[9.92020130 173.25956726]
[-1.68145335 172.54725647]
[-11.37662029 166.35650635]
[-24.98298454 172.67051697]
[-38.58934784 178.98454285]
[-52.19571304 185.29856873]
[-65.80207825 191.61259460]
[-79.40843964 197.92660522]
[-93.01480103 204.24063110]
[-106.62117004 210.55465698]
[-113.15284729 217.05799866]
[-120.60173035 216.85400391]
[-134.34538269 222.86331177]
[-148.08903503 228.87263489]
[-161.83270264 234.88195801]
[-165.28849792 247.95005798]
[-175.50765991 256.49700928]
[-188.59201050 257.55615234]
[-199.71708679 250.96292114]
[-213.59121704 256.66455078]
[-227.46534729 262.36618042]
[-241.33947754 268.06784058]
[-255.21359253 273.76947021]
[-261.07022095 288.44854736]
[-275.62393188 294.61010742]
[-290.24029541 288.59860229]
[-296.24761963 273.98056030]
[-290.08193970 259.42858887]
[-275.40118408 253.57612610]
[-260.91522217 259.89532471]
[-247.04110718 254.19369507]
[-233.16697693 248.49206543]
[-219.29284668 242.79043579]
[-205.41873169 237.08880615]
[-199.64379883 221.33244324]
[-183.96730042 214.45684814]
[-167.84201050 221.13829041]
[-154.09835815 215.12898254]
[-140.35470581 209.11965942]
[-126.61104584 203.11033630]
[-112.93518829 196.94828796]
[-99.32882690 190.63426208]
[-85.72245789 184.32025146]
[-72.11609650 178.00622559]
[-58.50973129 171.69219971]
[-44.90336990 165.37817383]
[-31.29700470 159.06416321]
[-17.69064140 152.75013733]
[-12.51298809 135.25280762]
[4.05630016 126.88027191]
[21.81052017 133.30718994]
[35.12210464 126.39331818]
[48.43369293 119.47943878]
[61.74528122 112.56556702]
[75.05686951 105.65169525]
[88.36845398 98.73781586]
[78.18287659 86.48951721]
[78.61910248 66.64020538]
[80.94911194 51.82227707]
[83.27912140 37.00434494]
[85.60913086 22.18641472]
[87.93914795 7.36848545]
[74.05133057 -3.28695488]
[67.46070099 -19.40785980]
[69.88147736 -36.56552505]
[80.56537628 -50.09479904]
[96.52969360 -56.36253738]
[98.19729614 -71.26955414]
[99.86489868 -86.17656708]
[101.53250885 -101.08358002]
[103.20011139 -115.99060059]
[98.95214844 -132.40373230]
[113.54790497 -141.02929688]
[125.87688446 -129.39173889]
[118.10712433 -114.32299042]
[116.43952179 -99.41597748]
[114.77191925 -84.50896454]
[113.10430908 -69.60195160]
[111.43670654 -54.69493484]
[122.42576599 -48.28517914]
[130.18064880 -38.14110947]
[133.50802612 -25.76495171]
[131.87359619 -13.00665569]
[125.48750305 -1.78736949]
[115.27807617 6.18984318]
[102.75707245 9.69849586]
[100.42706299 24.51642609]
[98.09705353 39.33435440]
[95.76704407 54.15228653]
[93.43703461 68.97021484]
[98.71070862 74.30297852]
[105.59493256 60.97602844]
[120.39694977 63.40507889]
[122.66083527 78.23325348]
[109.25806427 84.96849060]
[114.53174591 90.30125427]
[129.37471008 88.13645935]
[144.21768188 85.97166443]
[159.06065369 83.80687714]
[173.90361023 81.64208221]
[186.43130493 71.05960846]
[201.76605225 76.87147522]
[204.13276672 93.09894562]
[191.09678650 103.04857635]
[176.06840515 96.48505402]
[161.22543335 98.64984131]
[146.38247681 100.81463623]
[131.53950500 102.97942352]
[116.69654083 105.14421844]
[131.69483948 104.91809082]
[146.32676697 108.22060394]
[159.77388000 114.86703491]
[171.28401184 124.48561096]
[180.21331787 136.53829956]
[186.06234741 150.35093689]
[188.50390625 165.15089417]
[187.40145874 180.11033630]
[182.81663513 194.39247131]
[175.00592041 207.19842529]
[164.40618896 217.81190491]
[151.61035156 225.63920593]
[137.33416748 230.24253845]
[122.37618256 231.36437988]
[107.57307434 228.94198608]
[93.75286865 223.11087036]
[81.68861389 214.19717407]
[72.05513763 202.69952393]
[65.39128113 189.26103210]
[62.06980896 174.63339233]
[62.27650070 159.63482666]
[65.99980164 145.10426331]
[73.03144073 131.85450745]
[82.97809601 120.62668610]
[95.28232574 112.04940796]
[81.97074127 118.96327972]
[68.65915680 125.87715149]
[55.34756851 132.79103088]
[42.03598022 139.70489502]
[28.72439384 146.61877441]
[27.39353180 158.52931213]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 48]
[4 47]
[5 46]
[6 45]
[7 44]
[8 43]
[9 42]
[10 41]
[12 40]
[13 39]
[14 38]
[15 37]
[19 34]
[20 33]
[21 32]
[22 31]
[23 30]
[51 139]
[52 138]
[53 137]
[54 136]
[55 135]
[56 134]
[58 90]
[59 89]
[60 88]
[61 87]
[62 86]
[67 79]
[68 78]
[69 77]
[70 76]
[71 75]
[96 109]
[97 108]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
