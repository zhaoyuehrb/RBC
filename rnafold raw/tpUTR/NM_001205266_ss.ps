%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 11:49:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGCCAAGAAGCUGCUGUGGCUGAUGCGGAUUCAGAAAGGGCUCCCUCAUCAGAGACGUGCGACAUGUAAACCAAAUUAAACUAUGGUGUCCAAAG\
) } def
/len { sequence length } bind def

/coor [
[118.93783569 287.71481323]
[117.03894806 272.83547974]
[115.14006042 257.95617676]
[105.85383606 246.31076050]
[111.78189087 231.64213562]
[109.88300323 216.76281738]
[107.98411560 201.88348389]
[106.08522797 187.00416565]
[103.95050812 172.15684509]
[101.58048248 157.34526062]
[84.55918884 155.24996948]
[68.91783142 148.21696472]
[56.05429840 136.87481689]
[47.11819077 122.23716736]
[42.90813828 105.61217499]
[43.80038834 88.48562622]
[29.62537575 83.57960510]
[15.45036316 78.67358398]
[-0.12143409 81.47174835]
[-9.61809349 69.99730682]
[-23.70216560 76.65138245]
[-38.00775528 71.47405243]
[-44.26460266 58.00603867]
[-58.43961334 53.10001755]
[-72.61462402 48.19399643]
[-86.78963470 43.28797913]
[-100.11258698 51.47534943]
[-115.57363892 49.13228989]
[-125.87255096 37.36511612]
[-126.14650726 21.72993469]
[-116.26613617 9.60919380]
[-100.89665985 6.72594023]
[-87.29506683 14.44155693]
[-81.88362122 29.11296654]
[-67.70860291 34.01898575]
[-53.53359222 38.92500687]
[-39.35858154 43.83102417]
[-26.11499214 37.11217499]
[-11.66962719 41.88564682]
[-4.71207380 55.82229614]
[9.84583187 52.67322540]
[20.35638237 64.49857330]
[34.53139496 69.40459442]
[48.70640564 74.31061554]
[58.93917847 58.55332184]
[73.93442535 46.71635437]
[92.23212433 40.20981979]
[111.96588898 39.91197968]
[114.80465698 25.18304825]
[117.64342499 10.45411777]
[111.77138519 -4.85768080]
[122.30458832 -17.42683411]
[138.40737915 -14.32327557]
[143.51458740 1.26032090]
[132.37236023 13.29288578]
[129.53358459 28.02181625]
[126.69481659 42.75074768]
[139.44070435 50.65913010]
[151.37712097 41.57498550]
[163.31355286 32.49083710]
[175.24998474 23.40669250]
[187.18640137 14.32254791]
[196.12886047 -0.08123044]
[212.44525146 4.52438784]
[212.53645325 21.47809029]
[196.27055359 26.25897598]
[184.33412170 35.34312057]
[172.39770508 44.42726517]
[160.46127319 53.51140976]
[148.52484131 62.59555817]
[152.97932434 69.78611755]
[156.38243103 77.48777008]
[158.67863464 85.54859924]
[159.83413696 93.81118011]
[159.83732605 102.11564636]
[158.69877625 110.30281830]
[156.45080566 118.21720886]
[153.14677429 125.70999908]
[148.85969543 132.64184570]
[143.68083191 138.88543701]
[137.71765137 144.32788086]
[131.09159851 148.87266541]
[123.93576813 152.44142151]
[116.39206696 154.97525024]
[118.76208496 169.78681946]
[123.28284454 177.94079590]
[120.96455383 185.10528564]
[122.86343384 199.98460388]
[124.76232147 214.86392212]
[126.66120911 229.74325562]
[136.08326721 242.45291138]
[130.01937866 256.05728149]
[131.91827393 270.93658447]
[133.81715393 285.81591797]
[145.57522583 296.73046875]
[144.22927856 312.71697998]
[130.81182861 321.51193237]
[115.61557770 316.36862183]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 94]
[2 93]
[3 92]
[5 90]
[6 89]
[7 88]
[8 87]
[9 85]
[10 84]
[16 44]
[17 43]
[18 42]
[20 40]
[23 37]
[24 36]
[25 35]
[26 34]
[48 57]
[49 56]
[50 55]
[58 70]
[59 69]
[60 68]
[61 67]
[62 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
