%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 10:39:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUUGGAGAUGGGGAGGAUCCUUGGACUUUGUGUUUUUGAUUGUAUGUUGAUAUUCUAAAAACAUCUAUUUUAAUGUUAUUUCUGUUCUAAAAAUAAGAUAAUAAAUAUUAACAAACUUUGCUUUUUUAAAAAACUGAUAAUAU\
) } def
/len { sequence length } bind def

/coor [
[104.34992981 349.66406250]
[110.13722229 335.68685913]
[119.96200562 324.18341064]
[132.86174011 316.28076172]
[129.34437561 301.69897461]
[125.82700348 287.11721802]
[122.30963135 272.53543091]
[118.79225922 257.95367432]
[115.27488708 243.37188721]
[111.75751495 228.79011536]
[101.25151062 218.23204041]
[105.53706360 203.00230408]
[95.03105164 192.44422913]
[99.31660461 177.21449280]
[95.79923248 162.63272095]
[92.28186035 148.05094910]
[88.76448822 133.46917725]
[75.88303375 125.78360748]
[61.38031387 129.61390686]
[46.87759781 133.44421387]
[32.37487793 137.27450562]
[26.95854950 149.65379333]
[15.55550766 156.53282166]
[2.46793985 155.57919312]
[-7.51609755 147.36746216]
[-22.09786987 150.88484192]
[-36.67964554 154.40220642]
[-51.26141739 157.91958618]
[-60.82228470 170.80249023]
[-76.86001587 171.21583557]
[-87.07182312 158.84254456]
[-83.62409973 143.17434692]
[-69.16162872 136.23052979]
[-54.77878571 143.33781433]
[-40.19701385 139.82043457]
[-25.61524200 136.30307007]
[-11.03346825 132.78569031]
[-2.91746140 118.09318542]
[13.63020515 113.69609833]
[28.54458046 122.77178955]
[43.04729843 118.94149017]
[57.55001450 115.11119080]
[72.05273438 111.28089142]
[71.57258606 96.81420898]
[77.76130676 84.56092834]
[88.46312714 77.21444702]
[100.63746643 76.00146484]
[105.70030975 61.88170242]
[110.76315308 47.76194000]
[115.82599640 33.64218140]
[120.88883972 19.52242279]
[125.95168304 5.40266228]
[131.01452637 -8.71709728]
[136.07736206 -22.83685684]
[141.14021301 -36.95661545]
[146.20304871 -51.07637787]
[134.43022156 -41.78118896]
[120.47196198 -36.28876495]
[105.52165985 -35.06869507]
[90.85755920 -38.22529602]
[77.73341370 -45.48868179]
[67.27130890 -56.23784256]
[60.36575317 -69.55374908]
[57.60715103 -84.29789734]
[59.23136139 -99.20970917]
[65.09951782 -113.01422882]
[74.70989227 -124.53119659]
[87.24082947 -132.77593994]
[101.62094116 -137.04351807]
[116.62075806 -136.96910095]
[130.95780945 -132.55902100]
[143.40631104 -124.19034576]
[152.90194702 -112.57857513]
[158.63281250 -98.71650696]
[160.10897827 -83.78931427]
[157.20317078 -69.07035065]
[167.46195984 -80.01371765]
[177.72074890 -90.95707703]
[187.97953796 -101.90044403]
[198.23832703 -112.84380341]
[208.49711609 -123.78717041]
[218.75592041 -134.73052979]
[229.01470947 -145.67388916]
[232.63694763 -154.14019775]
[239.61390686 -156.73933411]
[250.10577393 -167.45944214]
[260.59765625 -178.17953491]
[271.08953857 -188.89964294]
[272.35540771 -204.89266968]
[285.72866821 -213.75471497]
[300.95046997 -208.68754578]
[306.34396362 -193.57829285]
[297.77172852 -180.01745605]
[281.80963135 -178.40776062]
[271.31774902 -167.68766785]
[260.82586670 -156.96755981]
[250.33399963 -146.24746704]
[239.95806885 -135.41510010]
[229.69927979 -124.47174072]
[219.44049072 -113.52837372]
[209.18170166 -102.58501434]
[198.92289734 -91.64164734]
[188.66410828 -80.69828796]
[178.40531921 -69.75492096]
[168.14653015 -58.81156158]
[160.32281494 -46.01353455]
[155.25997925 -31.89377403]
[150.19712830 -17.77401352]
[145.13429260 -3.65425396]
[140.07144165 10.46550560]
[135.00859070 24.58526611]
[129.94575500 38.70502472]
[124.88291168 52.82478333]
[119.82006836 66.94454193]
[114.75722504 81.06430817]
[125.86541748 96.89836884]
[122.01935577 117.44836426]
[103.34626007 129.95181274]
[106.86363220 144.53358459]
[110.38100433 159.11535645]
[113.89837646 173.69712830]
[124.65596771 185.29820251]
[120.11883545 199.48493958]
[130.87641907 211.08601379]
[126.33928680 225.27275085]
[129.85665894 239.85452271]
[133.37403870 254.43629456]
[136.89140320 269.01806641]
[140.40876770 283.59985352]
[143.92614746 298.18161011]
[147.44351196 312.76339722]
[162.52751160 313.91589355]
[176.51632690 319.67507935]
[188.03947449 329.47671509]
[195.96804810 342.36053467]
[199.52528381 357.06433105]
[198.36267090 372.14755249]
[192.59411621 386.13250732]
[182.78475952 397.64907837]
[169.89562988 405.56903076]
[155.18945312 409.11639404]
[140.10702515 407.94366455]
[126.12593842 402.16574097]
[114.61592865 392.34869385]
[106.70462799 379.45425415]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 131]
[5 130]
[6 129]
[7 128]
[8 127]
[9 126]
[10 125]
[12 123]
[14 121]
[15 120]
[16 119]
[17 118]
[18 43]
[19 42]
[20 41]
[21 40]
[25 37]
[26 36]
[27 35]
[28 34]
[47 115]
[48 114]
[49 113]
[50 112]
[51 111]
[52 110]
[53 109]
[54 108]
[55 107]
[56 106]
[76 105]
[77 104]
[78 103]
[79 102]
[80 101]
[81 100]
[82 99]
[83 98]
[85 97]
[86 96]
[87 95]
[88 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
