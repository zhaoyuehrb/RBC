%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 16:51:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGUUGUACCAGGCUACUGGAAGAUUCCAGGCAUGUUAAAGAUAUGCAGUAUUGAAUAUAUGUAAGGAAGUAUUGGAAACAUACUAGCCAUUUGAAGACAUAACUAAUUCUUAAAUAAUACUGCUAAACUUUCAA\
) } def
/len { sequence length } bind def

/coor [
[122.40832520 332.99926758]
[130.39335632 320.03164673]
[142.96612549 311.43832397]
[140.22976685 296.69000244]
[137.49340820 281.94171143]
[127.56419373 270.83947754]
[132.65419006 255.85939026]
[129.91783142 241.11109924]
[127.18148804 226.36279297]
[116.16854095 220.32742310]
[111.17265320 208.07165527]
[115.21660614 194.76069641]
[127.30501556 186.59375000]
[116.75939178 175.92651367]
[106.21376801 165.25927734]
[95.66815186 154.59204102]
[85.12252808 143.92481995]
[70.34381866 141.35774231]
[56.81864548 147.84384155]
[43.29347229 154.32995605]
[29.76829720 160.81607056]
[16.24312210 167.30218506]
[7.43457890 181.13481140]
[-8.93512058 180.15248108]
[-16.02623367 165.36572266]
[-6.54403067 151.98588562]
[9.75701046 153.77700806]
[23.28218460 147.29089355]
[36.80736160 140.80477905]
[50.33253479 134.31867981]
[63.85771179 127.83256531]
[62.48376083 112.89562225]
[48.00231552 108.98565674]
[33.52087402 105.07569122]
[19.03943253 101.16571808]
[4.55799055 97.25575256]
[-9.92345142 93.34578705]
[-24.40489388 89.43582153]
[-41.27252579 91.14443970]
[-47.58379364 75.40899658]
[-34.21042633 64.98836517]
[-20.49492836 74.95438385]
[-6.01348543 78.86434937]
[8.46795654 82.77431488]
[22.94939804 86.68428040]
[37.43083954 90.59424591]
[51.91228485 94.50421143]
[66.39372253 98.41417694]
[75.69310760 83.86767578]
[89.34271240 77.71437836]
[87.28540039 62.85612869]
[77.72846985 50.24757767]
[83.64704895 36.57937622]
[81.58973694 21.72113228]
[72.03279877 9.11258030]
[77.95137787 -4.55561924]
[75.89406586 -19.41386414]
[73.83675385 -34.27210999]
[71.77943420 -49.13035583]
[69.72212219 -63.98860168]
[60.16518784 -76.59715271]
[66.08377075 -90.26535034]
[53.33165741 -99.60126495]
[50.99863815 -115.23240662]
[60.46884918 -127.88509369]
[76.12378693 -130.05271912]
[88.67564392 -120.44927216]
[90.67763519 -104.77229309]
[80.94201660 -92.32266998]
[90.35179138 -80.77687836]
[84.58036804 -66.04591370]
[86.63768005 -51.18767166]
[88.69499969 -36.32942581]
[90.75231171 -21.47117996]
[92.80962372 -6.61293364]
[102.21940613 4.93285751]
[96.44797516 19.66381836]
[98.50529480 34.52206421]
[107.91507721 46.06785583]
[102.14364624 60.79881668]
[104.20095825 75.65705872]
[118.82027435 81.35683441]
[127.91143036 95.45452881]
[126.97121429 113.28897095]
[115.09769440 128.05052185]
[95.78975677 133.37919617]
[106.33538055 144.04641724]
[116.88100433 154.71365356]
[127.42662811 165.38088989]
[137.97224426 176.04812622]
[151.64259338 182.22241211]
[166.61795044 183.08186340]
[181.59330750 183.94131470]
[196.56866455 184.80076599]
[211.54402161 185.66021729]
[226.51937866 186.51968384]
[235.35513306 183.87008667]
[241.82704163 187.57441711]
[256.77874756 188.77702332]
[265.43371582 176.08894348]
[279.28012085 169.44270325]
[294.59335327 170.62608337]
[307.25424194 179.32077026]
[313.85705566 193.18794250]
[312.62567139 208.49739075]
[303.89135742 221.13095093]
[290.00354004 227.69027710]
[274.69802856 226.41091919]
[262.09191895 217.63702393]
[255.57615662 203.72872925]
[240.62443542 202.52612305]
[225.65992737 201.49504089]
[210.68457031 200.63557434]
[195.70921326 199.77612305]
[180.73385620 198.91667175]
[165.75849915 198.05722046]
[150.78314209 197.19776917]
[152.52058411 207.86611938]
[149.07957458 217.40686035]
[141.92979431 223.62643433]
[144.66613770 238.37474060]
[147.40249634 253.12304688]
[157.52743530 265.28018188]
[152.24171448 279.20535278]
[154.97807312 293.95364380]
[157.71441650 308.70196533]
[172.53302002 312.21319580]
[184.63841248 321.45330811]
[191.93322754 334.82138062]
[193.15362549 350.00131226]
[188.08816528 364.36309814]
[177.61444092 375.41848755]
[163.54711914 381.25201416]
[148.32342529 380.85302734]
[134.58097839 374.29064941]
[124.70072174 362.70184326]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 126]
[4 125]
[5 124]
[7 122]
[8 121]
[9 120]
[13 90]
[14 89]
[15 88]
[16 87]
[17 86]
[18 31]
[19 30]
[20 29]
[21 28]
[22 27]
[32 48]
[33 47]
[34 46]
[35 45]
[36 44]
[37 43]
[38 42]
[50 81]
[51 80]
[53 78]
[54 77]
[56 75]
[57 74]
[58 73]
[59 72]
[60 71]
[62 69]
[91 117]
[92 116]
[93 115]
[94 114]
[95 113]
[96 112]
[98 111]
[99 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
