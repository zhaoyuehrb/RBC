%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 18:38:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCGGACACACCAGGGACCAGCGGGCUAGUCCCAGGGCAUGGCCCAGCGGCCAGAUUCUUUUUCCCAGGAUUAAAACUCUGACCCCAGGA\
) } def
/len { sequence length } bind def

/coor [
[76.43557739 285.42306519]
[68.67459106 298.56573486]
[55.97502136 307.03237915]
[40.85838699 309.14190674]
[26.32610321 304.47546387]
[15.26356602 293.95962524]
[9.86725044 279.68228149]
[11.20859909 264.47821045]
[19.02128601 251.36621094]
[31.75409508 242.94966125]
[46.87892151 240.89968872]
[51.46489716 226.61791992]
[47.98920822 212.13452148]
[59.57518387 201.36067200]
[64.16116333 187.07890320]
[68.74713898 172.79713440]
[61.73213196 159.70800781]
[66.17951965 145.15893555]
[79.95616150 137.88970947]
[84.54214478 123.60794067]
[89.12812042 109.32617950]
[86.36191559 95.62071228]
[96.59011841 86.08784485]
[87.59887695 73.57929230]
[87.69598389 58.35287094]
[96.63460541 46.24646759]
[110.81819916 41.77839279]
[115.40417480 27.49662971]
[119.99015045 13.21486378]
[124.57613373 -1.06690085]
[129.16210938 -15.34866619]
[133.74809265 -29.63043022]
[128.52833557 -41.57796860]
[132.79885864 -53.46860886]
[143.70761108 -58.99905014]
[148.78379822 -73.11401367]
[153.86000061 -87.22898102]
[141.12995911 -106.96753693]
[146.10186768 -129.67944336]
[165.51324463 -142.03855896]
[166.54811096 -157.00280762]
[167.58297729 -171.96707153]
[168.61784363 -186.93133545]
[169.65270996 -201.89558411]
[161.97026062 -216.38394165]
[170.90443420 -230.13575745]
[187.26451111 -229.00436401]
[194.22064209 -214.15362549]
[184.61697388 -200.86071777]
[183.58209229 -185.89646912]
[182.54722595 -170.93220520]
[181.51235962 -155.96794128]
[180.47749329 -141.00369263]
[187.60050964 -137.60348511]
[193.60018921 -132.44058228]
[198.04939270 -125.86712646]
[200.62730408 -118.33618927]
[201.14262390 -110.37056732]
[199.54760742 -102.52648926]
[195.94235229 -95.35475922]
[190.56845093 -89.36211395]
[183.79296875 -84.97537994]
[176.08329773 -82.51111603]
[167.97496033 -82.15278625]
[162.89877319 -68.03781891]
[157.82257080 -53.92285538]
[161.93876648 -36.95846176]
[148.02984619 -25.04445267]
[143.44387817 -10.76268864]
[138.85789490 3.51907659]
[134.27191162 17.80084229]
[129.68594360 32.08260727]
[125.09996033 46.36437225]
[134.03077698 58.25464630]
[134.25021362 73.30176544]
[125.46455383 85.73823547]
[110.87187958 90.67382050]
[113.63808441 104.37928772]
[103.40988159 113.91215515]
[98.82390594 128.19392395]
[94.23793030 142.47569275]
[101.20707703 156.40653992]
[96.35279083 170.82495117]
[83.02890015 177.38311768]
[78.44292450 191.66488647]
[73.85694885 205.94665527]
[77.00461578 221.45156860]
[65.74666595 231.20390320]
[61.16068649 245.48565674]
[72.26454926 255.95785522]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 89]
[12 88]
[14 86]
[15 85]
[16 84]
[19 81]
[20 80]
[21 79]
[23 77]
[27 73]
[28 72]
[29 71]
[30 70]
[31 69]
[32 68]
[35 66]
[36 65]
[37 64]
[40 53]
[41 52]
[42 51]
[43 50]
[44 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
