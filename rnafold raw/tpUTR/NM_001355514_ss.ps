%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 05:04:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAAUAAGAAUAAAACUGAGUAGAACAAAAUAAAAAAAUCAAAAAACAAAACAAAACCCACACUCCAAAAACAAACUAACAAAGAAUAAAUAAAUAAUAUAAAAAUAA\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.52111053 91.62770081]
[62.61828232 89.88593292]
[47.84194183 87.28057861]
[33.24208832 83.82047272]
[18.86812401 79.51730347]
[4.76868677 74.38565063]
[-9.00851727 68.44286346]
[-22.41686821 61.70905304]
[-35.41099548 54.20700836]
[-47.94693756 45.96211243]
[-59.98226547 37.00226212]
[-71.47626495 27.35778046]
[-82.39003754 17.06129456]
[-92.68666077 6.14764929]
[-102.33128357 -5.34622955]
[-111.29128265 -17.38144875]
[-119.53633118 -29.91728592]
[-127.03854370 -42.91131973]
[-133.77252197 -56.31958771]
[-139.71546936 -70.09671783]
[-144.84730530 -84.19609070]
[-149.15065002 -98.56999969]
[-152.61094666 -113.16981506]
[-155.21647644 -127.94612122]
[-156.95843506 -142.84892273]
[-157.83091736 -157.82780457]
[-157.83097839 -172.83207703]
[-156.95861816 -187.81095886]
[-155.21678162 -202.71379089]
[-152.61137390 -217.49011230]
[-149.15119934 -232.08995056]
[-144.84797668 -246.46389771]
[-139.71626282 -260.56332397]
[-133.77342224 -274.34048462]
[-127.03955078 -287.74880981]
[-119.53745270 -300.74291992]
[-111.29251099 -313.27880859]
[-102.33261108 -325.31411743]
[-92.68807983 -336.80807495]
[-82.39154816 -347.72180176]
[-71.47785950 -358.01837158]
[-59.98394012 -367.66296387]
[-47.94868469 -376.62289429]
[-35.41281509 -384.86788940]
[-22.41874695 -392.37005615]
[-9.01045227 -399.10397339]
[4.76670265 -405.04687500]
[18.86609840 -410.17864990]
[33.24002457 -414.48193359]
[47.83985138 -417.94216919]
[62.61616898 -420.54763794]
[77.51898193 -422.28952026]
[92.49786377 -423.16195679]
[107.50213623 -423.16195679]
[122.48101807 -422.28952026]
[137.38383484 -420.54763794]
[152.16015625 -417.94216919]
[166.75997925 -414.48193359]
[181.13389587 -410.17864990]
[195.23329163 -405.04687500]
[209.01045227 -399.10397339]
[222.41874695 -392.37005615]
[235.41281128 -384.86788940]
[247.94868469 -376.62289429]
[259.98394775 -367.66296387]
[271.47787476 -358.01837158]
[282.39154053 -347.72180176]
[292.68807983 -336.80807495]
[302.33261108 -325.31411743]
[311.29251099 -313.27880859]
[319.53744507 -300.74291992]
[327.03955078 -287.74880981]
[333.77340698 -274.34048462]
[339.71624756 -260.56332397]
[344.84799194 -246.46389771]
[349.15121460 -232.08995056]
[352.61138916 -217.49011230]
[355.21679688 -202.71379089]
[356.95861816 -187.81095886]
[357.83096313 -172.83207703]
[357.83090210 -157.82780457]
[356.95843506 -142.84892273]
[355.21646118 -127.94612122]
[352.61093140 -113.16981506]
[349.15066528 -98.56999969]
[344.84732056 -84.19609070]
[339.71548462 -70.09671783]
[333.77252197 -56.31958771]
[327.03854370 -42.91131973]
[319.53634644 -29.91728592]
[311.29129028 -17.38144875]
[302.33129883 -5.34622955]
[292.68664551 6.14764929]
[282.39004517 17.06129456]
[271.47625732 27.35778046]
[259.98226929 37.00226212]
[247.94692993 45.96211243]
[235.41099548 54.20700836]
[222.41687012 61.70905304]
[209.00851440 68.44286346]
[195.23130798 74.38565063]
[181.13188171 79.51730347]
[166.75790405 83.82047272]
[152.15806580 87.28057861]
[137.38171387 89.88593292]
[122.47888947 91.62770081]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
