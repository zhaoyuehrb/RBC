%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 21:48:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAGAGCACCACUCAUCUGCGAAACGCACGUAAAACAAAGUGAACCGUGACUGUUAAACUAGGGAUGGGAAAUUCUGCAUCUUGGGGGGCUGUACAUUUAUUUAUUUAGUUGAAGAUUCACUGAUCCCACUUUGAAAUACAUCUUUUUACCUAA\
) } def
/len { sequence length } bind def

/coor [
[103.00090027 114.61063385]
[98.22131348 128.82878113]
[93.44172668 143.04692078]
[88.66213989 157.26506042]
[96.96783447 170.51457214]
[94.76255798 185.99586487]
[83.08757019 196.39916992]
[67.45544434 196.81234741]
[55.24719620 187.04031372]
[52.22718048 171.69712830]
[59.82136154 158.02735901]
[74.44399261 152.48547363]
[79.22357941 138.26733398]
[84.00316620 124.04918671]
[88.78276062 109.83104706]
[82.71512604 105.42266083]
[70.57987213 96.60588074]
[64.51224518 92.19749451]
[52.46696472 101.13679504]
[40.42168045 110.07610321]
[28.37639999 119.01540375]
[19.26061630 133.31011963]
[3.00104547 128.50775146]
[3.11463475 111.55418396]
[19.43709373 106.97012329]
[31.48237801 98.03081512]
[43.52766037 89.09151459]
[55.57294083 80.15220642]
[79.08052826 77.97665405]
[95.64169312 88.72142029]
[100.13214111 74.40932465]
[104.62258911 60.09724045]
[95.54797363 47.64904404]
[95.54332733 32.42231369]
[104.40086365 20.25645447]
[118.55428314 15.69370937]
[123.04473114 1.38162017]
[127.53517914 -12.93046856]
[132.02561951 -27.24255753]
[136.51606750 -41.55464554]
[141.00651550 -55.86673355]
[145.49696350 -70.17882538]
[136.08064270 -86.56501007]
[141.48039246 -104.34437561]
[157.84945679 -112.44426727]
[153.97343445 -127.78334045]
[164.75852966 -138.05618286]
[168.66528320 -152.53848267]
[172.57203674 -167.02079773]
[176.47879028 -181.50311279]
[172.60276794 -196.84217834]
[183.38786316 -207.11502075]
[179.51185608 -222.45408630]
[190.29693604 -232.72692871]
[194.20368958 -247.20924377]
[190.32768250 -262.54830933]
[201.11276245 -272.82113647]
[205.01951599 -287.30346680]
[208.92626953 -301.78576660]
[212.83302307 -316.26806641]
[216.73977661 -330.75039673]
[220.64653015 -345.23269653]
[224.55328369 -359.71499634]
[227.57275391 -374.40795898]
[229.69380188 -389.25723267]
[231.81484985 -404.10650635]
[233.93588257 -418.95581055]
[221.33723450 -427.50189209]
[213.72947693 -440.61709595]
[212.57522583 -455.67324829]
[218.05001831 -469.67996216]
[229.01806641 -479.87854004]
[243.26744080 -484.28543091]
[245.38848877 -499.13470459]
[247.50953674 -513.98400879]
[249.63056946 -528.83325195]
[243.92239380 -543.58886719]
[253.38163757 -555.09417725]
[255.50267029 -569.94342041]
[251.75679016 -586.47839355]
[266.60858154 -594.65521240]
[278.57723999 -582.64739990]
[270.35195923 -567.82238770]
[268.23092651 -552.97314453]
[274.09078979 -539.27966309]
[264.47985840 -526.71221924]
[262.35882568 -511.86294556]
[260.23776245 -497.01367188]
[258.11672974 -482.16436768]
[270.56253052 -473.94442749]
[278.23672485 -461.08300781]
[279.57119751 -446.10366821]
[274.24792480 -431.97274780]
[263.27258301 -421.51190186]
[248.78517151 -416.83474731]
[246.66412354 -401.98547363]
[244.54307556 -387.13619995]
[242.42204285 -372.28689575]
[255.24717712 -380.06610107]
[269.86007690 -376.68041992]
[277.95733643 -364.05368042]
[274.93789673 -349.36074829]
[262.51745605 -340.95046997]
[247.75364685 -343.60180664]
[239.03558350 -355.80825806]
[235.12882996 -341.32592773]
[231.22209167 -326.84362793]
[227.31533813 -312.36132812]
[223.40858459 -297.87902832]
[219.50183105 -283.39669800]
[215.59507751 -268.91439819]
[219.75051880 -254.61119080]
[208.68600464 -243.30249023]
[204.77925110 -228.82017517]
[208.93469238 -214.51696777]
[197.87016296 -203.20826721]
[202.02561951 -188.90505981]
[190.96109009 -177.59635925]
[187.05433655 -163.11404419]
[183.14758301 -148.63172913]
[179.24082947 -134.14942932]
[183.39628601 -119.84622955]
[172.33175659 -108.53751373]
[180.06727600 -100.05839539]
[182.75068665 -88.77532959]
[179.59591675 -77.48996735]
[171.28158569 -69.06284332]
[159.80905151 -65.68837738]
[155.31860352 -51.37628937]
[150.82815552 -37.06420135]
[146.33770752 -22.75211143]
[141.84725952 -8.44002151]
[137.35681152 5.87206697]
[132.86637878 20.18415642]
[141.87643433 32.01449203]
[142.19639587 47.05981064]
[133.49404907 59.55470276]
[118.93467712 64.58768463]
[114.44422913 78.89977264]
[109.95378113 93.21186066]
[120.33705902 82.38655090]
[133.86064148 75.89710236]
[148.80183411 74.57015991]
[163.25738525 78.57476044]
[175.38592529 87.40078735]
[183.64245605 99.92395020]
[186.97526550 114.54901123]
[184.95977783 129.41299438]
[177.85276794 142.62246704]
[166.55952454 152.49478149]
[152.51861572 157.77236938]
[137.51861572 157.78294373]
[123.47027588 152.52519226]
[112.16310883 142.66882324]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[3 13]
[4 12]
[18 28]
[19 27]
[20 26]
[21 25]
[30 140]
[31 139]
[32 138]
[36 134]
[37 133]
[38 132]
[39 131]
[40 130]
[41 129]
[42 128]
[45 123]
[47 121]
[48 120]
[49 119]
[50 118]
[52 116]
[54 114]
[55 113]
[57 111]
[58 110]
[59 109]
[60 108]
[61 107]
[62 106]
[63 105]
[64 98]
[65 97]
[66 96]
[67 95]
[73 89]
[74 88]
[75 87]
[76 86]
[78 84]
[79 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
