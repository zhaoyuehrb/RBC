%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:20:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUCCCUCCUGGGGCCUCAGCCAGAGCUGCCAGAGAAAGGAAACCUCUUCCCGCAGCCUGGCUCCUGUGUUCCCUCUAUCCAGCCAAUGCCUGUUUACACAGACACCUGGCCUCACUGCCAGCCCACCUCCCCUACAGCCCUGUUUGUUCCUGCUUCUCAUGAUUUUCCUGUAAAUAAACACACUCUUAAUUUGCCA\
) } def
/len { sequence length } bind def

/coor [
[164.63142395 113.78113556]
[157.85948181 117.00460052]
[153.86238098 131.46223450]
[149.86526489 145.91986084]
[145.86816406 160.37750244]
[141.87104797 174.83512878]
[146.51116943 190.56413269]
[135.01498413 202.25898743]
[119.20879364 197.88905334]
[115.35264587 181.94972229]
[127.41342163 170.83801270]
[131.41052246 156.38038635]
[135.40763855 141.92276001]
[139.40473938 127.46512604]
[143.40185547 113.00749207]
[127.28678894 133.29705811]
[103.80490112 140.61212158]
[81.53823853 133.81945801]
[67.79473114 116.68515778]
[53.33710098 120.68226624]
[38.87946701 124.67937469]
[24.42183495 128.67648315]
[9.96420288 132.67358398]
[-4.49342918 136.67070007]
[-11.94042683 141.97917175]
[-19.21220398 140.61457825]
[-33.73143387 144.38180542]
[-48.25066376 148.14901733]
[-62.76989365 151.91624451]
[-77.28912354 155.68345642]
[-85.32927704 169.02488708]
[-100.10750580 172.63854980]
[-112.77696991 164.89128113]
[-127.29620361 168.65850830]
[-141.81542969 172.42572021]
[-149.01879883 183.13340759]
[-161.19743347 185.96809387]
[-171.69291687 179.94038391]
[-186.27009583 183.47676086]
[-200.84727478 187.01315308]
[-214.81443787 196.62327576]
[-227.91549683 185.86228943]
[-221.20178223 170.29429626]
[-204.38365173 172.43597412]
[-189.80647278 168.89959717]
[-175.22930908 165.36320496]
[-163.20629883 152.58607483]
[-145.58265686 157.90649414]
[-131.06341553 154.13926697]
[-116.54418945 150.37205505]
[-109.23968506 137.44224548]
[-94.56878662 133.41491699]
[-81.05634308 141.16423035]
[-66.53711700 137.39700317]
[-52.01788330 133.62979126]
[-37.49865341 129.86256409]
[-22.97942352 126.09535217]
[-8.49053669 122.21306610]
[5.96709585 118.21595764]
[20.42472839 114.21884918]
[34.88236237 110.22174072]
[49.33999252 106.22463226]
[63.79762650 102.22752380]
[79.45783997 64.76023102]
[124.70559692 62.01910019]
[117.62152863 48.79729843]
[110.53746033 35.57549667]
[103.45339966 22.35369682]
[96.36933136 9.13189697]
[89.28526306 -4.08990335]
[74.75791931 -0.10191742]
[59.70737457 0.55292225]
[44.88855743 -2.15823078]
[31.04477119 -8.09938622]
[18.87041664 -16.97253799]
[8.97615242 -28.33261299]
[1.85827339 -41.60979462]
[-2.12619233 -56.13810349]
[-2.77738523 -71.18880463]
[-0.06264163 -86.00696564]
[5.88186789 -99.84931183]
[14.75796890 -112.02151489]
[26.12044144 -121.91303253]
[39.39934540 -129.02769470]
[53.92861938 -133.00863647]
[68.97948456 -133.65618896]
[83.79698181 -130.93785095]
[97.63789368 -124.98998260]
[109.80794525 -116.11093140]
[119.69670105 -104.74606323]
[126.80814362 -91.46543884]
[130.78556824 -76.93519592]
[131.42947388 -61.88418198]
[128.70755005 -47.06733704]
[122.75632477 -33.22787476]
[113.87432861 -21.05997276]
[102.50706482 -11.17396927]
[109.59113312 2.04783106]
[116.67519379 15.26963139]
[123.75926208 28.49143219]
[130.84332275 41.71323395]
[137.92739868 54.93503189]
[145.42739868 54.93503189]
[145.42762756 39.93503189]
[160.42762756 39.93549728]
[160.42739868 54.93503189]
[167.92739868 54.93503189]
[175.01145935 41.71323395]
[182.09553528 28.49143219]
[189.17959595 15.26963139]
[196.26365662 2.04783106]
[191.45158386 -13.00605297]
[198.76779175 -27.01493073]
[213.87170410 -31.66758347]
[227.80244446 -24.20367622]
[232.29515076 -9.05140972]
[224.68437195 4.79964209]
[209.48545837 9.13189697]
[202.40139771 22.35369682]
[195.31732178 35.57549667]
[188.23326111 48.79729843]
[181.14920044 62.01910019]
[183.60220337 69.10660553]
[196.15792847 60.89966583]
[208.71365356 52.69272614]
[221.26937866 44.48578644]
[233.82508850 36.27884674]
[243.14469910 24.52534485]
[256.80856323 18.33671570]
[271.78994751 19.08381271]
[284.77029419 26.60114670]
[292.87432861 39.22353745]
[294.30688477 54.15497208]
[288.75064087 68.08795929]
[277.43637085 77.93618011]
[262.87033081 81.51811981]
[248.27885437 78.04024506]
[233.33619690 79.35059357]
[218.39353943 80.66093445]
[203.45088196 81.97127533]
[188.50822449 83.28161621]
[190.96124268 90.36912537]
[204.70286560 96.38307953]
[218.44448853 102.39704132]
[232.18611145 108.41099548]
[245.92774963 114.42495728]
[259.66937256 120.43891144]
[273.41101074 126.45287323]
[287.15261841 132.46682739]
[293.77194214 132.11373901]
[298.81384277 134.76495361]
[301.23007202 138.89578247]
[314.77395630 145.34271240]
[328.31787109 151.78962708]
[339.10369873 141.13874817]
[352.88317871 134.82197571]
[367.99240112 133.60211182]
[382.60678101 137.62644958]
[394.96160889 146.40905762]
[403.56497192 158.88935852]
[407.37796021 173.56030273]
[405.94015503 188.65031433]
[399.42517090 202.33720398]
[388.61972046 212.96820068]
[374.82864380 219.25955200]
[359.71722412 220.45156860]
[345.11026001 216.40029907]
[332.77163696 207.59495544]
[324.19128418 195.09881592]
[320.40533447 180.42086792]
[321.87094116 165.33352661]
[308.32705688 158.88661194]
[294.78314209 152.43968201]
[281.13867188 146.20845032]
[267.39703369 140.19450378]
[253.65541077 134.18054199]
[239.91378784 128.16658020]
[226.17216492 122.15262604]
[212.43052673 116.13866425]
[198.68890381 110.12471008]
[184.94728088 104.11074829]
[178.17532349 107.33421326]
[187.35150146 119.20004272]
[196.52766418 131.06587219]
[205.70382690 142.93170166]
[214.87998962 154.79753113]
[227.29960632 163.20904541]
[233.82383728 176.71586609]
[232.69212341 191.67311096]
[224.20983887 204.04449463]
[210.66598511 210.49151611]
[195.71545410 209.27441406]
[183.39270020 200.72163391]
[177.02311707 187.14120483]
[178.32569885 172.19746399]
[174.90213013 157.59338379]
[171.47856140 142.98930359]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[19 63]
[20 62]
[21 61]
[22 60]
[23 59]
[24 58]
[26 57]
[27 56]
[28 55]
[29 54]
[30 53]
[33 50]
[34 49]
[35 48]
[38 46]
[39 45]
[40 44]
[65 102]
[66 101]
[67 100]
[68 99]
[69 98]
[70 97]
[107 122]
[108 121]
[109 120]
[110 119]
[111 118]
[142 181]
[143 180]
[144 179]
[145 178]
[146 177]
[147 176]
[148 175]
[149 174]
[152 173]
[153 172]
[154 171]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
