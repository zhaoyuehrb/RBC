%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 14:54:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAGUCGCUCGACUGCGACGCAGGUGUACCUCCCCCUGCCUUCCAACCCCUUUCCACGAGCUAUAUUUAUUUCUCCGAAUAAACGUGCUCCCCGAA\
) } def
/len { sequence length } bind def

/coor [
[87.08728790 154.14064026]
[76.66770172 150.86833191]
[67.03294373 145.60020447]
[58.56336212 138.51776123]
[51.59840012 129.87461853]
[40.82315826 140.30986023]
[30.04792023 150.74510193]
[19.27268028 161.18032837]
[8.49743938 171.61557007]
[8.49476337 187.41986084]
[-2.74135971 198.53404236]
[-18.54473686 198.36427307]
[-29.53950500 187.01127625]
[-29.20266342 171.21057129]
[-17.73405266 160.33645630]
[-1.93779910 160.84033203]
[8.83744144 150.40509033]
[19.61268234 139.96984863]
[30.38792229 129.53462219]
[41.16316223 119.09938049]
[38.29578400 104.37599182]
[24.39203072 98.74698639]
[10.48827934 93.11798096]
[-3.41547155 87.48897552]
[-17.31922340 81.85997009]
[-33.01438904 83.85305786]
[-41.90795517 71.90509796]
[-56.36067963 78.29996490]
[-71.07182312 72.52434540]
[-77.31352997 58.00481796]
[-71.38270569 43.35556030]
[-56.79799652 37.26771164]
[-42.21225739 43.35308838]
[-36.27894974 58.00134277]
[-21.57827568 55.60563660]
[-11.69021797 67.95622253]
[2.21353340 73.58522034]
[16.11728477 79.21422577]
[30.02103615 84.84323120]
[43.92478943 90.47223663]
[46.23451614 82.03866577]
[49.79988480 74.08689117]
[54.52800751 66.80186462]
[60.29906845 60.35146713]
[66.96936035 54.88267136]
[74.37486267 50.51819611]
[82.33524323 47.35375214]
[90.65827179 45.45596695]
[99.14444733 44.86099243]
[107.59178925 45.57386780]
[115.80062866 47.56861115]
[123.57834625 50.78905106]
[130.74388123 55.15037155]
[137.13194275 60.54131317]
[142.59681702 66.82700348]
[147.01573181 73.85234070]
[150.29150391 81.44576263]
[152.35478210 89.42350769]
[153.16540527 97.59398651]
[168.09609985 99.03433228]
[183.02677917 100.47467804]
[197.95747375 101.91502380]
[206.99134827 99.59524536]
[213.34097290 103.64832306]
[228.21781921 105.56648254]
[242.89411926 99.65743256]
[254.52746582 108.95874023]
[269.40432739 110.87689209]
[284.28115845 112.79505157]
[299.15802002 114.71321106]
[314.03488159 116.63137054]
[328.91171265 118.54952240]
[343.78857422 120.46768188]
[358.70596313 113.65564728]
[371.90527344 123.38756561]
[369.80819702 139.65206909]
[354.57202148 145.71763611]
[341.87042236 135.34452820]
[326.99356079 133.42637634]
[312.11669922 131.50822449]
[297.23986816 129.59005737]
[282.36300659 127.67190552]
[267.48617554 125.75374603]
[252.60931396 123.83558655]
[238.99710083 129.88183594]
[226.29965210 120.44333649]
[211.42280579 118.52517700]
[196.51712036 116.84571075]
[181.58644104 115.40536499]
[166.65574646 113.96501923]
[151.72506714 112.52467346]
[148.57406616 122.48239899]
[143.51466370 131.68765259]
[136.72042847 139.77642822]
[128.43395996 146.42381287]
[118.95831299 151.35693359]
[108.64591980 154.36616516]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 20]
[6 19]
[7 18]
[8 17]
[9 16]
[21 40]
[22 39]
[23 38]
[24 37]
[25 36]
[27 34]
[59 91]
[60 90]
[61 89]
[62 88]
[64 87]
[65 86]
[67 84]
[68 83]
[69 82]
[70 81]
[71 80]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
