%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 13:51:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCAGCCUACCGCUGGCCCUGCCGUUUCCCCUCCUUGGCUUUAUGCAAAUACAAUCAGCCCAGUGCAAACGG\
) } def
/len { sequence length } bind def

/coor [
[4.11886978 182.91740417]
[-6.71047163 193.29649353]
[-10.90649986 201.75727844]
[-18.22663498 203.87413025]
[-29.48672104 213.78424072]
[-40.74680328 223.69436646]
[-52.00688934 233.60449219]
[-54.45868301 249.45909119]
[-68.45397949 257.30200195]
[-83.25678253 251.11680603]
[-87.51165009 235.64826965]
[-77.95461273 222.76252747]
[-61.91701126 222.34440613]
[-50.65692520 212.43428040]
[-39.39683914 202.52415466]
[-28.13675690 192.61404419]
[-17.08955383 182.46714783]
[-6.26021338 172.08807373]
[-7.55772543 162.77420044]
[-4.20313311 153.83872986]
[3.11564016 147.49562073]
[12.71174049 145.38430786]
[22.28719330 148.14770508]
[34.34714890 139.22821045]
[46.40710831 130.30870056]
[58.46706390 121.38920593]
[70.52702332 112.46971130]
[82.58697510 103.55020905]
[83.54742432 93.28209686]
[90.04854584 85.27634430]
[99.90097809 82.22902679]
[109.78675842 85.16636658]
[113.62143707 72.64622498]
[124.67103577 66.40720367]
[136.58670044 69.39456940]
[149.68191528 62.07914734]
[157.95620728 48.59410095]
[172.84074402 49.14184570]
[185.93595886 41.82642365]
[199.03117371 34.51099777]
[212.12637329 27.19557381]
[214.08370972 11.91568470]
[224.54078674 0.84757769]
[239.33505249 -1.90813291]
[252.75453186 4.49933004]
[265.84973145 -2.81609392]
[269.91412354 -18.08882904]
[283.62921143 -25.94194412]
[298.85812378 -21.71632576]
[306.56579590 -7.91895819]
[302.17941284 7.26442480]
[288.30133057 14.82579136]
[273.16516113 10.27911758]
[260.06994629 17.59454155]
[258.49017334 32.38109970]
[248.38685608 43.53400040]
[233.47932434 46.63541412]
[219.44180298 40.29078674]
[206.34658813 47.60620880]
[193.25137329 54.92163467]
[180.15617371 62.23705673]
[172.81852722 75.19886017]
[156.99732971 75.17436218]
[143.90213013 82.48978424]
[135.92414856 97.97396088]
[117.65136719 97.93930817]
[109.95145416 114.72365570]
[91.50647736 115.61016846]
[79.44651794 124.52967072]
[67.38655853 133.44915771]
[55.32660294 142.36866760]
[43.26664734 151.28816223]
[31.20669174 160.20765686]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[4 16]
[5 15]
[6 14]
[7 13]
[23 73]
[24 72]
[25 71]
[26 70]
[27 69]
[28 68]
[32 66]
[35 64]
[36 63]
[38 61]
[39 60]
[40 59]
[41 58]
[45 54]
[46 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
