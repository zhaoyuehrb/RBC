%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 17:40:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUAAGCACCAGCUGCAAGAAACAAAGAGGUGAAGAUUCUCUGGCUGCGAUAUCAGUGGGAUAAAUCUCUCUGGACCAUCUCUCUU\
) } def
/len { sequence length } bind def

/coor [
[17.99833870 251.48417664]
[6.54655457 261.92047119]
[-7.19029856 269.06301880]
[-22.28936768 272.43838501]
[-37.73792648 271.82598877]
[-52.50130081 267.27249146]
[-65.59216309 259.08840942]
[-76.47581482 269.41052246]
[-87.35946655 279.73263550]
[-91.50040436 295.60037231]
[-107.38230896 299.68658447]
[-118.66723633 287.78775024]
[-113.74622345 272.14434814]
[-97.68157959 268.84899902]
[-86.79792786 258.52688599]
[-75.91427612 248.20475769]
[-83.04129791 235.56991577]
[-86.91005707 221.57910156]
[-87.28729248 207.05862427]
[-84.14610291 192.86720276]
[-77.66778564 179.84523010]
[-68.23140717 168.76498413]
[-56.39160919 160.28479004]
[-42.84600067 154.90997314]
[-28.39408684 152.96273804]
[-13.89004612 154.56278992]
[-0.19226016 159.62005615]
[11.88748550 167.83975220]
[23.12864113 157.90815735]
[34.36979675 147.97657776]
[45.61095047 138.04498291]
[56.85210800 128.11340332]
[68.09326172 118.18180847]
[79.33441925 108.25022125]
[83.32444000 85.26710510]
[105.64068604 78.47524261]
[114.11130524 66.09587860]
[122.58192444 53.71651840]
[131.05255127 41.33715820]
[139.52316284 28.95779800]
[140.40339661 10.66901016]
[156.32145691 3.51223612]
[164.34991455 -9.15835381]
[172.37838745 -21.82894325]
[173.22891235 -37.62727356]
[186.57667542 -44.23683548]
[194.60513306 -56.90742493]
[202.63359070 -69.57801819]
[210.66206360 -82.24860382]
[206.95944214 -97.61305237]
[215.27676392 -111.05171967]
[230.67950439 -114.59167480]
[244.02947998 -106.13273621]
[247.40640259 -90.69343567]
[238.80679321 -77.43363953]
[223.33264160 -74.22014618]
[215.30418396 -61.54955673]
[207.27572632 -48.87896729]
[199.24726868 -36.20837784]
[198.97099304 -21.31633377]
[185.04896545 -13.80048466]
[177.02050781 -1.12989509]
[168.99205017 11.54069519]
[171.32034302 23.55296898]
[164.54632568 34.22413254]
[151.90252686 37.42842102]
[143.43191528 49.80778122]
[134.96128845 62.18714142]
[126.49066925 74.56650543]
[118.02004242 86.94586182]
[121.07385254 92.85679626]
[122.24365234 99.40632629]
[121.42487335 106.00893402]
[118.69071198 112.07434845]
[114.28559875 117.06031036]
[108.60336304 120.52108002]
[102.15197754 122.14727020]
[95.50820923 121.79349518]
[89.26600647 119.49137878]
[78.02484894 129.42297363]
[66.78369141 139.35455322]
[55.54253769 149.28614807]
[44.30138397 159.21772766]
[33.06022644 169.14932251]
[21.81907272 179.08090210]
[28.80559158 192.97204590]
[31.99069405 208.18017578]
[31.16656494 223.68530273]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 16]
[8 15]
[9 14]
[28 85]
[29 84]
[30 83]
[31 82]
[32 81]
[33 80]
[34 79]
[36 70]
[37 69]
[38 68]
[39 67]
[40 66]
[42 63]
[43 62]
[44 61]
[46 59]
[47 58]
[48 57]
[49 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
