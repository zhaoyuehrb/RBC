%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 09:10:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAGACAAGCUGAAACCAUACAUGCAGUCUUUAUGUUGGAAACUUCACCAGUAAAAUUCUCUCAAUAAAGUUUCACAAUUGUCUGCAA\
) } def
/len { sequence length } bind def

/coor [
[94.80818939 109.40372467]
[80.44939423 113.74250793]
[66.09059906 118.08129120]
[51.73180389 122.42006683]
[37.37301254 126.75885010]
[23.01421738 131.09762573]
[8.65542316 135.43641663]
[-5.70337105 139.77519226]
[-12.57084656 150.85794067]
[-24.78258514 154.09802246]
[-35.53092575 148.26194763]
[-50.03092194 152.10253906]
[-64.46247101 156.19282532]
[-78.82125854 160.53161621]
[-83.79356384 175.23045349]
[-96.47542572 184.17192078]
[-111.99041748 183.91784668]
[-124.37271118 174.56593323]
[-128.86105347 159.71215820]
[-123.72959900 145.06813049]
[-110.95148468 136.26475525]
[-95.44015503 136.68711853]
[-83.16004181 146.17282104]
[-68.80124664 141.83403015]
[-63.18978500 136.77761841]
[-53.87150955 137.60253906]
[-39.37151337 133.76194763]
[-27.74835205 120.73752594]
[-10.04215336 125.41640472]
[4.31664133 121.07762146]
[18.67543602 116.73883820]
[33.03422928 112.40005493]
[47.39302444 108.06127167]
[61.75181961 103.72249603]
[76.11061096 99.38371277]
[90.46940613 95.04492950]
[103.86959076 88.30437469]
[115.91287994 79.36238861]
[127.95616913 70.42040253]
[139.99946594 61.47841263]
[151.88661194 52.32988358]
[163.61408997 42.97753525]
[175.34156799 33.62518692]
[187.06903076 24.27284050]
[198.79650879 14.92049408]
[210.52397156 5.56814671]
[222.25144958 -3.78420043]
[216.20790100 -17.60946274]
[213.94947815 -32.52797318]
[215.63015747 -47.52256012]
[221.13537598 -61.57087326]
[230.08975220 -73.71507263]
[241.88276672 -83.12714386]
[255.71037292 -89.16535950]
[270.62976074 -91.41802216]
[285.62368774 -89.73153687]
[299.66986084 -84.22090149]
[311.81060791 -75.26184082]
[321.21813965 -63.46518326]
[327.25100708 -49.63525772]
[329.49789429 -34.71500778]
[327.80563354 -19.72172356]
[322.28958130 -5.67766714]
[313.32583618 6.45961189]
[301.52554321 15.86257362]
[287.69329834 21.89010811]
[272.77215576 24.13124847]
[257.77954102 22.43319130]
[243.73760986 16.91171074]
[231.60379028 7.94327164]
[219.87632751 17.29561806]
[208.14884949 26.64796638]
[196.42138672 36.00031281]
[184.69390869 45.35266113]
[172.96643066 54.70500565]
[161.23896790 64.05735779]
[157.90164185 70.83364868]
[148.94145203 73.52170563]
[136.89816284 82.46369171]
[124.85486603 91.40567780]
[112.81157684 100.34766388]
[127.67926025 102.33563995]
[139.69773865 111.31094360]
[145.82551575 125.00219727]
[144.51181030 139.94456482]
[136.08911133 152.35656738]
[122.68892670 159.09713745]
[107.70244598 158.46040344]
[94.92229462 150.60752869]
[87.58274078 137.52581787]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 34]
[4 33]
[5 32]
[6 31]
[7 30]
[8 29]
[11 27]
[12 26]
[13 24]
[14 23]
[37 81]
[38 80]
[39 79]
[40 78]
[41 76]
[42 75]
[43 74]
[44 73]
[45 72]
[46 71]
[47 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
