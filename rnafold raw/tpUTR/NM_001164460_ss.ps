%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 23:09:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUGCAUGAAAGUGAGAACCUUGUUCCCUGCUCAUACAUCUUACAUACUUGCAGACCAGACCAUGGUAG\
) } def
/len { sequence length } bind def

/coor [
[134.39706421 192.82089233]
[131.82760620 185.00895691]
[132.33775330 176.73101807]
[135.90672302 169.16711426]
[127.74640656 156.58102417]
[119.58610535 143.99494934]
[111.42579651 131.40887451]
[96.68785095 133.25801086]
[82.60408020 128.53852844]
[71.95608521 118.18254089]
[66.84690857 104.23540497]
[68.28564453 89.45175171]
[75.98812103 76.75143433]
[67.82781982 64.16535187]
[59.66751099 51.57927322]
[51.50720596 38.99319458]
[43.34689713 26.40711594]
[35.18659210 13.82103539]
[19.90667915 14.50770760]
[6.42363977 7.50025225]
[-1.68767142 -5.23053741]
[-2.33330464 -20.21183014]
[4.56009007 -33.41587067]
[-3.60021615 -46.00194931]
[-19.02669907 -45.83706665]
[-32.08126068 -54.05789185]
[-38.59823990 -68.04118347]
[-36.49809265 -83.32493591]
[-26.45096779 -95.03214264]
[-11.66286469 -99.42709351]
[3.14738488 -95.10736084]
[13.25388432 -83.45137024]
[15.43168736 -68.17849731]
[8.98586369 -54.16225815]
[17.14616966 -41.57617569]
[32.01380920 -42.48110962]
[45.42742538 -35.77806473]
[53.73983765 -23.17765999]
[54.63504791 -8.00876427]
[47.77267075 5.66072941]
[55.93297958 18.24680901]
[64.09328461 30.83288956]
[72.25359344 43.41896820]
[80.41389465 56.00505066]
[88.57420349 68.59112549]
[103.31214905 66.74198151]
[117.39591980 71.46146393]
[128.04391479 81.81745911]
[133.15309143 95.76459503]
[131.71435547 110.54824829]
[124.01187897 123.24856567]
[132.17218018 135.83464050]
[140.33248901 148.42073059]
[148.49279785 161.00680542]
[170.19902039 168.80644226]
[172.86465454 191.02954102]
[183.58793640 201.51817322]
[194.31121826 212.00679016]
[205.03450012 222.49542236]
[221.02790833 223.75645447]
[229.89399719 237.12701416]
[224.83146667 252.35035706]
[209.72383118 257.74844360]
[196.16040039 249.18029785]
[194.54586792 233.21870422]
[183.82258606 222.73007202]
[173.09931946 212.24145508]
[162.37603760 201.75282288]
[154.70814514 203.82788086]
[146.74742126 202.90795898]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 54]
[5 53]
[6 52]
[7 51]
[13 45]
[14 44]
[15 43]
[16 42]
[17 41]
[18 40]
[23 35]
[24 34]
[56 68]
[57 67]
[58 66]
[59 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
