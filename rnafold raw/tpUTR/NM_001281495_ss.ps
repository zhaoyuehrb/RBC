%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 22:09:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCACCUUGGCCCUGCGCAUCAUGGACUCUCUCAGCUUCCCUCCCAGGAUCAGUUUCUACACAACUCUGUGUGGCUUUUGGACAAAUUAAAGCUAGUUUUGGUAUCCCCGGGCCA\
) } def
/len { sequence length } bind def

/coor [
[81.41362762 240.84387207]
[76.06704712 255.31515503]
[63.73171997 264.58032227]
[48.34380722 265.68289185]
[34.81353378 258.27105713]
[27.45836067 244.70989990]
[28.62529755 229.32673645]
[37.94197845 217.03027344]
[52.43548584 211.74427795]
[55.63290787 197.08901978]
[58.83033371 182.43376160]
[62.02775574 167.77850342]
[65.22518158 153.12326050]
[68.42259979 138.46800232]
[64.32936859 132.18345642]
[54.49726105 143.51173401]
[49.01536560 157.47413635]
[35.61898041 164.22224426]
[21.13641357 160.31645203]
[12.94960308 147.74758911]
[15.23147011 132.92218018]
[26.81891823 123.39688873]
[41.80673218 124.02734375]
[56.14290237 119.61437988]
[52.04966736 113.32984161]
[37.35280609 110.32946014]
[22.65594864 107.32907104]
[9.56862545 115.77654266]
[-5.29333830 112.52436066]
[-13.26605797 99.99554443]
[-27.96291733 96.99515533]
[-44.69137573 99.75106812]
[-51.97048187 84.43927765]
[-39.27214432 73.20591736]
[-24.96253204 82.29829407]
[-10.26567173 85.29868317]
[1.97994483 76.89746094]
[16.92739296 79.73091888]
[25.65633392 92.63220978]
[40.35319138 95.63259888]
[55.05005264 98.63298035]
[63.89076996 76.72982788]
[81.95886993 63.24392700]
[103.33491516 61.21099472]
[121.68561554 70.12085724]
[132.77873230 60.02417755]
[143.87184143 49.92750168]
[154.96495056 39.83082199]
[166.05805969 29.73414612]
[177.15116882 19.63747025]
[188.24427795 9.54079247]
[193.24200439 -5.47031546]
[207.86241150 -8.31514359]
[218.95552063 -18.41182137]
[230.04862976 -28.50849724]
[241.14173889 -38.60517502]
[252.23484802 -48.70185089]
[261.08419800 -60.81338882]
[267.33206177 -74.45025635]
[273.57992554 -88.08712006]
[279.82781982 -101.72398376]
[286.07568359 -115.36084747]
[292.32354736 -128.99771118]
[298.57144165 -142.63458252]
[296.49465942 -158.90168762]
[309.70611572 -168.61712646]
[324.61495972 -161.78646851]
[325.88427734 -145.43652344]
[312.20828247 -136.38670349]
[305.96041870 -122.74983978]
[299.71255493 -109.11297607]
[293.46466064 -95.47611237]
[287.21679688 -81.83924103]
[280.96893311 -68.20237732]
[274.72103882 -54.56551361]
[287.84655762 -61.82645035]
[302.69055176 -63.98407745]
[317.34005737 -60.76033783]
[329.90704346 -52.57068634]
[338.77200317 -40.47056961]
[342.79238892 -26.01939964]
[341.45013428 -11.07957649]
[334.91818237 2.42352271]
[324.03836060 12.74967861]
[310.21282959 18.56810188]
[295.22329712 19.12894058]
[281.00161743 14.35991764]
[269.38058472 4.87564087]
[261.85787964 -8.10159683]
[259.40295410 -22.89934731]
[262.33154297 -37.60874176]
[251.23841858 -27.51206398]
[240.14530945 -17.41538620]
[229.05220032 -7.31870985]
[217.95909119 2.77796745]
[213.75482178 17.06689262]
[198.34095764 20.63390350]
[187.24784851 30.73058128]
[176.15473938 40.82725906]
[165.06163025 50.92393494]
[153.96852112 61.02061081]
[142.87541199 71.11728668]
[131.78228760 81.21396637]
[136.99046326 91.62969208]
[138.77880859 103.45139313]
[136.78472900 115.55541992]
[131.01438904 126.73197937]
[121.86013794 135.80580139]
[110.07825470 141.75889587]
[96.72821808 143.84237671]
[83.07785797 141.66542053]
[79.88043213 156.32067871]
[76.68301392 170.97593689]
[73.48558807 185.63119507]
[70.28816223 200.28643799]
[67.09074402 214.94169617]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 116]
[10 115]
[11 114]
[12 113]
[13 112]
[14 111]
[25 41]
[26 40]
[27 39]
[30 36]
[31 35]
[45 103]
[46 102]
[47 101]
[48 100]
[49 99]
[50 98]
[51 97]
[53 95]
[54 94]
[55 93]
[56 92]
[57 91]
[58 75]
[59 74]
[60 73]
[61 72]
[62 71]
[63 70]
[64 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
