%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 03:25:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGGCACUGACUAUAUCUCUGCUUGACUGUGAAUAAAGUCAGCUGUGCAGUAUUUAUAGUCCAUGUAUAAUAAAUACAUCUCUUAAUCUCCUAAUAAAUUGGACCUUUAAACUACAGAU\
) } def
/len { sequence length } bind def

/coor [
[14.40810108 190.35386658]
[12.06193161 175.53848267]
[13.01195717 160.56860352]
[17.21220207 146.16867065]
[24.45939445 133.03556824]
[34.40281296 121.80487823]
[46.56124878 113.02009583]
[60.34630203 107.10635376]
[75.09085083 104.34985352]
[90.08007812 104.88379669]
[75.74375153 100.47132874]
[61.40742874 96.05886841]
[47.07110977 91.64640045]
[32.73478699 87.23393250]
[18.39846230 82.82146454]
[4.06214046 78.40900421]
[-9.26495838 88.73020935]
[-25.95151329 89.11533356]
[-39.46992493 79.61022186]
[-44.64855576 64.09131622]
[-59.09459686 60.05252075]
[-73.54063416 56.01372147]
[-87.98667908 51.97492599]
[-102.62287903 48.69137573]
[-117.40977478 46.17192459]
[-132.19667053 43.65247726]
[-146.98356628 41.13302612]
[-161.77047729 38.61357880]
[-176.55737305 36.09412766]
[-187.56251526 47.03333664]
[-202.90090942 49.38140106]
[-216.67462158 42.23544693]
[-223.58737183 28.34323692]
[-220.98106384 13.04660892]
[-209.85789490 2.22742939]
[-194.49493408 0.04589311]
[-180.79956055 7.34084558]
[-174.03791809 21.30722809]
[-159.25102234 23.82667732]
[-144.46412659 26.34612846]
[-129.67723083 28.86557770]
[-114.89032745 31.38502693]
[-100.10342407 33.90447617]
[-97.68344116 32.27193451]
[-94.43282318 31.56036377]
[-90.72253418 32.10616302]
[-87.04352570 34.09619141]
[-83.94787598 37.52888489]
[-69.50183868 41.56768036]
[-55.05579758 45.60647964]
[-40.60975647 49.64527893]
[-30.90049553 40.38471985]
[-17.77064896 37.13478470]
[-4.65364742 40.85635376]
[4.96517706 50.67259216]
[8.47460651 64.07267761]
[22.81092834 68.48514557]
[37.14725113 72.89761353]
[51.48357391 77.31007385]
[65.81989288 81.72254181]
[80.15621948 86.13500977]
[94.49253845 90.54747772]
[91.65727234 76.08653259]
[94.30964661 60.69580460]
[102.74411774 48.29178619]
[111.17858887 35.88776779]
[119.61306000 23.48374748]
[128.04753113 11.07972908]
[136.48200989 -1.32429039]
[134.90447998 -17.28959656]
[146.50311279 -28.37343407]
[162.38040161 -26.07323265]
[170.35667419 -12.15351105]
[164.31320190 2.70771408]
[148.88603210 7.11018133]
[140.45155334 19.51420021]
[132.01708984 31.91821861]
[123.58261108 44.32223892]
[115.14813995 56.72625732]
[106.71366882 69.13027954]
[109.10524750 76.23874664]
[122.45399475 69.39689636]
[131.81108093 57.67320251]
[146.79919434 57.07625580]
[157.05902100 68.01863861]
[155.49929810 82.93733215]
[143.19804382 91.52098846]
[128.65811157 87.83734131]
[113.88840485 90.45568848]
[116.27998352 97.56415558]
[130.49693298 102.34731293]
[144.71386719 107.13047791]
[156.69308472 97.40925598]
[172.02882385 95.73041534]
[185.82751465 102.62965393]
[193.68605042 115.90545654]
[193.09680176 131.32156372]
[184.24778748 143.95875549]
[169.96269226 149.78453064]
[154.79985046 146.93992615]
[143.59765625 136.33264160]
[139.93070984 121.34741211]
[125.71376801 116.56425476]
[111.49682617 111.78109741]
[123.98152924 120.09568024]
[134.34613037 130.93888855]
[142.08903503 143.78596497]
[146.83552551 158.01518250]
[148.35592651 172.93792725]
[146.57662964 187.83203125]
[141.58374023 201.97668457]
[133.61891174 214.68736267]
[123.06758118 225.34895325]
[110.44037628 233.44548035]
[96.34839630 238.58511353]
[81.47359467 240.51913452]
[66.53585052 239.15394592]
[52.25806046 234.55561829]
[39.33118820 226.94667053]
[28.38083076 216.69534302]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 62]
[11 61]
[12 60]
[13 59]
[14 58]
[15 57]
[16 56]
[20 51]
[21 50]
[22 49]
[23 48]
[24 43]
[25 42]
[26 41]
[27 40]
[28 39]
[29 38]
[64 80]
[65 79]
[66 78]
[67 77]
[68 76]
[69 75]
[90 104]
[91 103]
[92 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
