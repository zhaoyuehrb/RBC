%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 20:34:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCAUGUAACUAACAAAGGAUUUGCUUUAGAGAUAAUUAUUUGGAAUUUUUAUAGCUUACUUCACAAUGUGCCCAGGUCAGCUGUAUAAAAUAAAUACUGCAUUGUUGUUUCUUUCCA\
) } def
/len { sequence length } bind def

/coor [
[68.69414520 338.99240112]
[69.15370178 353.98535156]
[65.64406586 368.56900024]
[58.41357422 381.71130371]
[47.97390747 392.48223877]
[35.06382370 400.11962891]
[20.59690857 404.08300781]
[5.59691095 404.09188843]
[-8.87469196 400.14566040]
[-21.79381561 392.52359009]
[-32.24623871 381.76501465]
[-39.49229431 368.63128662]
[-43.01921844 354.05181885]
[-42.57741928 339.05831909]
[-38.19816971 324.71182251]
[-30.18967819 312.02554321]
[-44.04787064 317.76577759]
[-57.90606308 323.50604248]
[-71.76425934 329.24627686]
[-77.57997894 343.94161987]
[-92.11647797 350.14370728]
[-106.74951172 344.17291260]
[-112.79754639 329.57165527]
[-106.67240143 315.00259399]
[-92.00801849 309.10925293]
[-77.50450897 315.38809204]
[-63.64631653 309.64782715]
[-49.78812408 303.90759277]
[-35.92993164 298.16732788]
[-24.15017509 288.88092041]
[-15.33339691 276.74566650]
[-6.51661825 264.61041260]
[2.30016041 252.47515869]
[11.11693954 240.33990479]
[19.93371773 228.20465088]
[28.75049591 216.06939697]
[37.56727600 203.93414307]
[46.38405609 191.79888916]
[54.05345154 178.90779114]
[60.51111603 165.36901855]
[66.96878052 151.83023071]
[73.42645264 138.29145813]
[79.88411713 124.75267029]
[86.34178162 111.21389771]
[82.43119049 101.90660858]
[84.25416565 91.97709656]
[91.21578979 84.66585541]
[101.04413605 82.35890961]
[108.20151520 69.17665100]
[115.35889435 55.99439621]
[115.14409637 40.17464828]
[128.01669312 32.68162155]
[135.17407227 19.49936676]
[142.33146667 6.31711006]
[149.48884583 -6.86514664]
[156.64622498 -20.04740334]
[163.80360413 -33.22966003]
[170.96098328 -46.41191864]
[170.74618530 -62.23166656]
[183.61878967 -69.72468567]
[190.77616882 -82.90694427]
[197.93354797 -96.08920288]
[205.09092712 -109.27146149]
[211.72526550 -122.72454834]
[217.82630920 -136.42773438]
[223.92736816 -150.13092041]
[224.84611511 -167.05995178]
[241.36788940 -170.86352539]
[249.59651184 -156.04035950]
[237.63053894 -144.02986145]
[231.52949524 -130.32667542]
[225.42845154 -116.62349701]
[226.42767334 -113.11991882]
[225.69992065 -108.94660950]
[222.94483948 -104.95872498]
[218.27319336 -102.11407471]
[211.11581421 -88.93182373]
[203.95841980 -75.74956512]
[196.80104065 -62.56730652]
[197.52778625 -47.69044113]
[184.14324951 -39.25453568]
[176.98585510 -26.07227898]
[169.82847595 -12.89002228]
[162.67109680 0.29223457]
[155.51371765 13.47449112]
[148.35633850 26.65674782]
[141.19895935 39.83900452]
[141.92568970 54.71586990]
[128.54115295 63.15177536]
[121.38377380 76.33403015]
[114.22638702 89.51628876]
[115.74583435 108.02290344]
[99.88056183 117.67156219]
[93.42289734 131.21034241]
[86.96523285 144.74911499]
[80.50756073 158.28790283]
[74.04989624 171.82667542]
[67.59223175 185.36546326]
[81.98841858 181.15240479]
[95.81137848 186.97698975]
[102.85107422 200.22245789]
[99.94487000 214.93823242]
[88.39840698 224.51315308]
[73.39899445 224.64564514]
[61.68519974 215.27616882]
[58.51931000 200.61566162]
[49.70252991 212.75091553]
[40.88574982 224.88616943]
[32.06897354 237.02142334]
[23.25219345 249.15669250]
[14.43541527 261.29193115]
[5.61863661 273.42718506]
[-3.19814229 285.56243896]
[-12.01492119 297.69769287]
[2.18782187 292.87255859]
[17.16020393 291.96273804]
[31.84270287 295.03262329]
[45.19631195 301.86495972]
[56.27606201 311.97631836]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 29]
[17 28]
[18 27]
[19 26]
[30 114]
[31 113]
[32 112]
[33 111]
[34 110]
[35 109]
[36 108]
[37 107]
[38 106]
[39 98]
[40 97]
[41 96]
[42 95]
[43 94]
[44 93]
[48 91]
[49 90]
[50 89]
[52 87]
[53 86]
[54 85]
[55 84]
[56 83]
[57 82]
[58 81]
[60 79]
[61 78]
[62 77]
[63 76]
[64 72]
[65 71]
[66 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
