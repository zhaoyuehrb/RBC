%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 21:13:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUAAAAAGUCUGUUUUAGGGAAUAGAAUAAAUACAAUCCAUAGAAAUCCUCAAACACACUUAAAAUGAUGGUGUCUAUCAAAGUGUCCACG\
) } def
/len { sequence length } bind def

/coor [
[45.31153107 118.76927948]
[30.61210442 121.75707245]
[15.91267776 124.74485779]
[1.21325266 127.73265076]
[-1.67476654 144.17333984]
[-10.56371689 158.25935364]
[-24.10183716 167.90007019]
[-40.24980927 171.67700195]
[-56.58791733 169.05236816]
[-70.67864990 160.44557190]
[-80.43032837 147.16642761]
[-94.89736938 151.12936401]
[-109.36440277 155.09228516]
[-123.83144379 159.05522156]
[-138.29847717 163.01815796]
[-152.76551819 166.98107910]
[-167.23255920 170.94401550]
[-178.37272644 182.97850037]
[-194.30290222 179.08468628]
[-198.63548279 163.26821899]
[-186.91348267 151.79971313]
[-171.19548035 156.47697449]
[-156.72845459 152.51405334]
[-142.26141357 148.55111694]
[-127.79437256 144.58818054]
[-113.32733917 140.62525940]
[-98.86029816 136.66232300]
[-84.39326477 132.69938660]
[-83.54377747 119.25803375]
[-78.53258514 106.73204041]
[-69.84708405 96.37846375]
[-58.34420776 89.24115753]
[-45.16583633 86.04556274]
[-31.62547874 87.12497711]
[-19.07735252 92.38587189]
[-8.78092957 101.31578827]
[-1.77453709 113.03322601]
[12.92488861 110.04543304]
[27.62431335 107.05764771]
[42.32373810 104.06985474]
[42.53013992 93.64939880]
[44.60392380 83.43529510]
[48.47769928 73.75942993]
[54.02560043 64.93621063]
[61.06735611 57.25231934]
[69.37416077 50.95743942]
[78.67609406 46.25611115]
[88.67090607 43.30109024]
[99.03384399 42.18840027]
[109.42816925 42.95418930]
[119.51614380 45.57358551]
[128.96998596 49.96146393]
[137.48248291 55.97525787]
[144.77706909 63.41955566]
[150.61669922 72.05246735]
[154.81163025 81.59349060]
[157.22555542 91.73258972]
[157.78004456 102.14033508]
[172.57110596 104.63526917]
[187.36215210 107.13021088]
[202.15321350 109.62515259]
[216.94425964 112.12009430]
[231.73532104 114.61503601]
[236.17211914 112.73452759]
[240.51605225 112.52658081]
[244.21232605 113.72790527]
[246.86430359 115.91099548]
[248.27589417 118.55685425]
[262.60241699 123.00098419]
[276.92895508 127.44512177]
[291.25549316 131.88925171]
[305.58203125 136.33338928]
[319.90856934 140.77752686]
[336.82794189 139.69538879]
[342.55154419 155.65399170]
[328.80105591 165.57168579]
[315.46444702 155.10406494]
[301.13790894 150.65992737]
[286.81137085 146.21578979]
[272.48483276 141.77165222]
[258.15829468 137.32752991]
[243.83175659 132.88339233]
[229.24037170 129.40608215]
[214.44932556 126.91114807]
[199.65826416 124.41620636]
[184.86721802 121.92126465]
[170.07615662 119.42632294]
[155.28511047 116.93138885]
[145.80793762 135.28099060]
[130.48645020 149.12933350]
[111.27541351 156.70960999]
[90.62583160 157.05470276]
[71.17222595 150.12059021]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[4 37]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[58 88]
[59 87]
[60 86]
[61 85]
[62 84]
[63 83]
[68 82]
[69 81]
[70 80]
[71 79]
[72 78]
[73 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
