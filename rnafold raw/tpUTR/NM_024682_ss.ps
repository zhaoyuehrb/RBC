%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 16:33:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCGCCAGGCAGCCUCGUUCUGCACAGGCACUUUAGCCCGAGCCAGGCACACCUGCGAGGGGGCAGGUGUGCUCCGCCGCCCUGCUGAUAAGCUGGCUUCAUUAAACUGACACUUCUCAUGUGCA\
) } def
/len { sequence length } bind def

/coor [
[53.60728836 242.37556458]
[49.94156265 252.42123413]
[42.45258713 259.94021606]
[32.57427216 263.58966064]
[22.15784836 262.75848389]
[13.76653767 275.19174194]
[12.45975780 290.95889282]
[-1.07346547 297.17993164]
[-9.46477699 309.61318970]
[-17.85608864 322.04644775]
[-21.70511436 338.55767822]
[-38.63661194 339.42984009]
[-44.16179657 323.40148926]
[-30.28934479 313.65512085]
[-21.89803505 301.22186279]
[-13.50672340 288.78860474]
[-12.80014610 273.91076660]
[1.33327961 266.80044556]
[9.72459126 254.36718750]
[4.52838087 235.68814087]
[14.75617981 218.86401367]
[34.31911087 214.75505066]
[41.76548767 201.73385620]
[49.21186829 188.71266174]
[56.65824890 175.69146729]
[64.10462952 162.67027283]
[71.55100250 149.64907837]
[64.59279633 136.36061096]
[49.64898300 135.06355286]
[34.70516586 133.76647949]
[22.76811981 144.12420654]
[7.00945997 142.92413330]
[-3.22147965 130.87825012]
[-1.85486388 115.13315582]
[10.29851818 105.03014374]
[26.02828217 106.56314850]
[36.00223541 118.82266998]
[50.94604874 120.11973572]
[65.88986969 121.41680145]
[62.23809052 104.75186920]
[65.86869812 89.05541229]
[75.29944611 77.18275452]
[88.07199097 70.94303131]
[85.85382843 56.10794449]
[73.43271637 46.70827866]
[71.39452362 31.63179398]
[80.43221283 19.84808922]
[78.21405029 5.01300335]
[75.99588776 -9.82208252]
[73.77773285 -24.65716743]
[71.55957031 -39.49225235]
[69.34140778 -54.32733917]
[67.12324524 -69.16242218]
[64.90509033 -83.99751282]
[62.68692780 -98.83259583]
[60.46876907 -113.66767883]
[58.25060654 -128.50276184]
[45.39810562 -137.69998169]
[42.89588165 -153.30493164]
[52.22846603 -166.05947876]
[67.85900116 -168.39657593]
[80.51416016 -158.92965698]
[82.68587494 -143.27529907]
[73.08569336 -130.72093201]
[75.30385590 -115.88584137]
[77.52201080 -101.05075836]
[79.74017334 -86.21566772]
[81.95833588 -71.38058472]
[84.17649841 -56.54549789]
[86.39465332 -41.71041489]
[88.61281586 -26.87532806]
[90.83097839 -12.04024220]
[93.04914093 2.79484296]
[95.26729584 17.62992859]
[107.35649109 26.25471497]
[109.81735229 41.26800156]
[100.68891907 53.88978577]
[102.90707397 68.72486877]
[116.59346008 73.33087921]
[126.77251434 83.57388306]
[141.06111145 79.00926208]
[155.34971619 74.44464111]
[161.99337769 63.30723953]
[174.07083130 59.83699799]
[184.89677429 65.38307953]
[199.29389954 61.17327881]
[213.69104004 56.96347427]
[224.62373352 44.74021149]
[240.61817932 48.36096573]
[245.22065735 64.10101318]
[233.69653320 75.76834869]
[217.90084839 71.36061096]
[203.50370789 75.57041931]
[189.10656738 79.78022003]
[177.75177002 93.10021973]
[159.91433716 88.73324585]
[145.62573242 93.29786682]
[131.33712769 97.86248779]
[129.98022461 119.64473724]
[113.52911377 137.93605042]
[126.64141083 145.22080994]
[139.75370789 152.50556946]
[154.87918091 147.92349243]
[168.77491760 155.45236206]
[173.19682312 170.62544250]
[165.52146912 184.44081116]
[150.30249023 188.70204163]
[136.56904602 180.88104248]
[132.46893311 165.61785889]
[119.35664368 158.33309937]
[106.24435425 151.04833984]
[114.25897217 163.72769165]
[125.58251953 173.56523132]
[129.14826965 188.13525391]
[123.64753723 202.09024048]
[111.09918213 210.30844116]
[96.10872650 209.77360535]
[84.17795563 200.68202209]
[79.68572998 186.37049866]
[84.28007507 172.09262085]
[84.57219696 157.09545898]
[77.12581635 170.11665344]
[69.67943573 183.13784790]
[62.23305893 196.15904236]
[54.78667831 209.18023682]
[47.34030151 222.20141602]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 19]
[6 18]
[8 16]
[9 15]
[10 14]
[22 126]
[23 125]
[24 124]
[25 123]
[26 122]
[27 121]
[28 39]
[29 38]
[30 37]
[43 78]
[44 77]
[47 74]
[48 73]
[49 72]
[50 71]
[51 70]
[52 69]
[53 68]
[54 67]
[55 66]
[56 65]
[57 64]
[80 98]
[81 97]
[82 96]
[85 94]
[86 93]
[87 92]
[100 111]
[101 110]
[102 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
