%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 09:43:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGCUCACUUCUGCACGCAGCCUCUCUGUUGCCUCAGCUCUCCAAGUUCCAGGCUUCCGGUCCUUAGCCUUCCCAGGUGGGACUUUAGGCAUGAUUAAAAUAUGGACAUAUUUUUGGAGAA\
) } def
/len { sequence length } bind def

/coor [
[124.69110870 132.49064636]
[108.04551697 140.00703430]
[89.78833771 139.50968933]
[83.42962646 153.09521484]
[91.05062103 166.61187744]
[89.23780060 182.02268982]
[78.68824005 193.40190125]
[63.45844650 196.37394714]
[49.40459824 189.79603577]
[41.93067932 176.19750977]
[43.91056824 160.80725098]
[54.58295441 149.54316711]
[69.84409332 146.73649597]
[76.20280457 133.15097046]
[71.47368622 129.18119812]
[67.39761353 124.54338074]
[64.06791687 119.34368896]
[49.77838516 123.90541077]
[35.48885345 128.46713257]
[21.19932175 133.02885437]
[6.90979147 137.59057617]
[-0.11399524 151.74833679]
[-15.11806297 156.71356201]
[-29.20076561 149.54048157]
[-34.00708389 134.48475647]
[-26.68551636 120.47867584]
[-11.57981682 115.83180237]
[2.34806895 123.30104828]
[16.63759995 118.73932648]
[30.92712975 114.17759705]
[45.21665955 109.61587524]
[59.50619125 105.05415344]
[60.24507904 90.78917694]
[65.85482788 77.65273285]
[75.64812469 67.25432587]
[88.42506409 60.86799240]
[102.62020111 59.27620316]
[116.49429321 62.67398834]
[128.34747314 70.64504242]
[140.57290649 61.95372391]
[152.79832458 53.26240540]
[165.02374268 44.57109070]
[177.24917603 35.87977219]
[189.47459412 27.18845749]
[201.70002747 18.49714088]
[192.64933777 5.14444685]
[191.93867493 -10.41987514]
[199.20491028 -23.57689095]
[211.80072021 -30.71908379]
[225.72193909 -30.23496437]
[233.44381714 -43.09468460]
[233.91474915 -58.90887833]
[247.09996033 -65.83705139]
[254.82185364 -78.69676971]
[262.54373169 -91.55648804]
[270.26562500 -104.41620636]
[266.65682983 -119.56923676]
[274.67111206 -132.50082397]
[289.13946533 -135.84788513]
[296.86135864 -148.70759583]
[304.58325195 -161.56732178]
[312.30514526 -174.42703247]
[320.02700806 -187.28675842]
[327.74890137 -200.14648438]
[328.25772095 -206.93186951]
[331.66986084 -211.66328430]
[336.21392822 -213.45487976]
[344.58758545 -225.90002441]
[352.96124268 -238.34518433]
[361.33489990 -250.79034424]
[361.91967773 -267.17904663]
[376.52999878 -274.62692261]
[390.13601685 -265.47219849]
[388.74099731 -249.13249207]
[373.78002930 -242.41668701]
[365.40640259 -229.97152710]
[357.03274536 -217.52638245]
[348.65908813 -205.08122253]
[340.60864258 -192.42459106]
[332.88674927 -179.56486511]
[325.16485596 -166.70515442]
[317.44296265 -153.84542847]
[309.72106934 -140.98570251]
[301.99917603 -128.12599182]
[305.84457397 -113.78205109]
[298.19665527 -100.63047028]
[283.12536621 -96.69431305]
[275.40347290 -83.83459473]
[267.68157959 -70.97487640]
[259.95968628 -58.11515808]
[260.04107666 -43.22077560]
[246.30354309 -35.37279129]
[238.58164978 -22.51307106]
[244.15008545 -15.37435436]
[246.98481750 -6.40285635]
[246.49629211 3.34879160]
[242.50097656 12.64587116]
[235.27372742 20.22776794]
[246.54071045 30.13005066]
[257.80767822 40.03233337]
[269.07467651 49.93461227]
[280.34164429 59.83689499]
[291.60864258 69.73917389]
[307.78659058 72.42342377]
[313.29687500 87.86910248]
[302.47094727 100.18702698]
[286.44558716 96.70556641]
[281.70635986 81.00615692]
[270.43936157 71.10387421]
[259.17239380 61.20159149]
[247.90541077 51.29930878]
[236.63842773 41.39702988]
[225.37145996 31.49474716]
[210.39134216 30.72256660]
[198.16590881 39.41388321]
[185.94049072 48.10519791]
[173.71507263 56.79651642]
[161.48963928 65.48783112]
[149.26422119 74.17914581]
[137.03878784 82.87046814]
[140.80123901 100.74267578]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 14]
[4 13]
[17 32]
[18 31]
[19 30]
[20 29]
[21 28]
[39 120]
[40 119]
[41 118]
[42 117]
[43 116]
[44 115]
[45 114]
[50 93]
[51 92]
[53 90]
[54 89]
[55 88]
[56 87]
[59 84]
[60 83]
[61 82]
[62 81]
[63 80]
[64 79]
[67 78]
[68 77]
[69 76]
[70 75]
[98 113]
[99 112]
[100 111]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
