%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 23:28:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCAAUGGCAUUACUAUUAGUAAAAUGCACACCUUUUUCUGAAUUUACUAUUAUAUUUGUUUUCAAUUUCAUUUUUCAAGUACUGUUUUACUCAUUUUUAUUCAUAAAUAAAGUUUUGUGUUGAUUUGUGAAAAUGCAAUUACAA\
) } def
/len { sequence length } bind def

/coor [
[-185.65888977 264.96267700]
[-197.47528076 284.22143555]
[-214.71240234 298.80575562]
[-235.63287354 307.25845337]
[-258.13208008 308.73974609]
[-279.94989014 303.11065674]
[-298.89767456 290.94592285]
[-310.00186157 301.03045654]
[-320.99761963 311.23303223]
[-331.88375854 321.55255127]
[-342.76989746 331.87203979]
[-353.65603638 342.19155884]
[-364.31915283 352.74133301]
[-374.75439453 363.51657104]
[-385.18960571 374.29180908]
[-395.62484741 385.06704712]
[-402.30047607 400.65142822]
[-419.12380981 398.55087280]
[-421.76248169 381.80352783]
[-406.40008545 374.63180542]
[-395.96487427 363.85656738]
[-385.52963257 353.08132935]
[-375.09439087 342.30609131]
[-374.28054810 337.53451538]
[-370.41552734 333.24691772]
[-363.97552490 331.30541992]
[-353.08938599 320.98593140]
[-342.20327759 310.66641235]
[-331.31713867 300.34692383]
[-328.60742188 293.41345215]
[-320.08636475 289.92626953]
[-308.98220825 279.84176636]
[-313.86254883 272.21838379]
[-317.73468018 264.03451538]
[-320.53527832 255.42283630]
[-322.21835327 246.52304077]
[-322.75616455 237.47953796]
[-322.13940430 228.43913269]
[-320.37768555 219.54866028]
[-317.49905396 210.95254517]
[-313.54983521 202.79055786]
[-308.59368896 195.19540405]
[-302.71069336 188.29071045]
[-295.99594116 182.18888855]
[-288.55819702 176.98936462]
[-280.51794434 172.77700806]
[-272.00543213 169.62060547]
[-263.15878296 167.57189941]
[-254.12152100 166.66464233]
[-245.04029846 166.91401672]
[-236.06262207 168.31649780]
[-227.33430481 170.84979248]
[-218.99722290 174.47323608]
[-211.18695068 179.12844849]
[-204.03054810 184.74026489]
[-197.64451599 191.21794128]
[-192.13288879 198.45666504]
[-187.58557129 206.33918762]
[-173.50854492 201.15870667]
[-159.43151855 195.97824097]
[-145.35449219 190.79776001]
[-134.90986633 176.73303223]
[-116.80751801 179.92352295]
[-102.84441376 174.44342041]
[-88.94065857 168.81440735]
[-75.09784698 163.03715515]
[-66.33245850 150.99484253]
[-50.61689377 152.82011414]
[-36.77408600 147.04286194]
[-22.93127632 141.26560974]
[-9.08846760 135.48835754]
[4.75434113 129.71110535]
[18.59715080 123.93384552]
[21.84981918 109.42322540]
[33.15698624 99.49286652]
[48.32065964 98.10853577]
[61.54473114 106.00981140]
[75.38754272 100.23255920]
[89.23034668 94.45530701]
[100.65203857 84.73188019]
[108.56454468 71.98856354]
[116.47705841 59.24524307]
[124.38956451 46.50192261]
[120.54691315 31.17189980]
[128.74125671 17.65790176]
[144.11105347 13.97754192]
[157.53765869 22.31431389]
[161.05531311 37.72215652]
[152.57705688 51.05987167]
[137.13288879 54.41442871]
[129.22036743 67.15775299]
[121.30786896 79.90106964]
[113.39535522 92.64439392]
[116.72150421 99.36650085]
[129.77485657 91.97664642]
[142.82821655 84.58678436]
[152.17097473 72.85167694]
[167.08610535 74.44506073]
[173.73899841 87.88898468]
[165.95872498 100.71347046]
[150.96069336 101.02245331]
[137.16725159 106.91658783]
[123.37379456 112.81071472]
[126.69994354 119.53282928]
[141.63063049 120.97316742]
[156.56132507 122.41351318]
[171.49200439 123.85385895]
[186.42269897 125.29420471]
[201.35337830 126.73455048]
[213.38922119 116.49179840]
[229.13565063 117.84297180]
[239.25057983 129.98643494]
[237.73300171 145.71769714]
[225.48327637 155.70367432]
[209.76893616 154.01986694]
[199.91304016 141.66523743]
[184.98234558 140.22489929]
[170.05166626 138.78454590]
[155.12097168 137.34420776]
[140.19029236 135.90385437]
[125.25959778 134.46351624]
[101.19033813 126.17961121]
[95.00759888 108.29811859]
[81.16479492 114.07537079]
[67.32198334 119.85262299]
[63.63806534 134.81039429]
[51.98907852 144.61622620]
[36.97729874 145.67001343]
[24.37440109 137.77665710]
[10.53159332 143.55390930]
[-3.31121588 149.33116150]
[-17.15402412 155.10841370]
[-30.99683380 160.88566589]
[-44.83964157 166.66291809]
[-54.59516525 179.11845398]
[-69.32060242 176.87995911]
[-83.16340637 182.65721130]
[-89.93613434 188.89410400]
[-97.36429596 188.40652466]
[-111.32740021 193.88662720]
[-117.22068787 205.41171265]
[-129.01921082 209.66764832]
[-140.17402649 204.87478638]
[-154.25105286 210.05526733]
[-168.32807922 215.23573303]
[-182.40510559 220.41621399]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 32]
[8 31]
[9 29]
[10 28]
[11 27]
[12 26]
[13 23]
[14 22]
[15 21]
[16 20]
[58 146]
[59 145]
[60 144]
[61 143]
[63 140]
[64 139]
[65 137]
[66 136]
[68 134]
[69 133]
[70 132]
[71 131]
[72 130]
[73 129]
[77 125]
[78 124]
[79 123]
[80 93]
[81 92]
[82 91]
[83 90]
[104 121]
[105 120]
[106 119]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
