%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 21:04:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUGAGGGGGUACAGGAGAGGCCGCUGCUGCCAGCCGUCAUAUAAAACUAUUUAUUCAUAAAUAUUUUCCAAAAUGAAA\
) } def
/len { sequence length } bind def

/coor [
[93.02328491 117.12354279]
[82.21545410 127.52503204]
[71.40763092 137.92651367]
[60.59981155 148.32800293]
[49.79198456 158.72949219]
[38.98416138 169.13098145]
[41.25085831 184.48161316]
[34.03196716 198.21722412]
[20.10329437 205.05621338]
[4.82070303 202.36883545]
[-5.93934155 191.18844604]
[-8.03938103 175.81413269]
[-0.67190784 162.15763855]
[13.33013439 155.47015381]
[28.58267403 158.32315063]
[39.39049911 147.92167664]
[50.19832230 137.52018738]
[61.00614548 127.11869812]
[71.81397247 116.71720886]
[82.62179565 106.31571960]
[83.39208221 87.63758087]
[101.31853485 77.12039185]
[91.33865356 65.92209625]
[81.35876465 54.72379684]
[66.40084839 49.56905746]
[63.70937729 34.91964722]
[53.72948837 23.72134972]
[43.74960327 12.52305222]
[33.76971817 1.32475364]
[18.03793907 -3.30592227]
[14.44585323 -19.30682755]
[26.68868828 -30.21760178]
[42.17206955 -24.81417656]
[44.96801758 -8.65513134]
[54.94790268 2.54316640]
[64.92778778 13.74146461]
[74.90767670 24.93976402]
[89.15176392 29.29352379]
[92.55706787 44.74391174]
[102.53694916 55.94221115]
[112.51683807 67.14051056]
[106.25315857 53.51089478]
[105.17485046 38.54970551]
[109.41927338 24.16273499]
[118.44575500 12.18264198]
[131.10447693 4.13548565]
[145.78292847 1.04633582]
[160.61134338 3.30869794]
[173.70082092 10.63438606]
[183.38397217 22.09023094]
[188.42735291 36.21695328]
[188.18852234 51.21505356]
[182.69787598 65.17402649]
[172.65484619 76.31573486]
[159.33876038 83.22091675]
[144.44583130 85.00997162]
[129.87533569 81.45596313]
[142.76889038 89.12124634]
[155.66242981 96.78652191]
[168.55596924 104.45180511]
[181.44952393 112.11708069]
[193.60543823 102.99009705]
[208.33004761 99.21456909]
[223.37792969 101.36624908]
[236.45439148 109.11701202]
[245.56538391 121.28493500]
[249.32153320 136.01449585]
[247.15007019 151.05952454]
[239.38211060 164.12579346]
[227.20220947 173.22076416]
[212.46772766 176.95753479]
[197.42555237 174.76628113]
[184.36952209 166.98114014]
[175.29057312 154.78929138]
[171.57319641 140.04989624]
[173.78424072 125.01062775]
[160.89070129 117.34535217]
[147.99714661 109.68006897]
[135.10360718 102.01478577]
[122.21006012 94.34951019]
[118.95420074 110.02442932]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[3 18]
[4 17]
[5 16]
[6 15]
[22 41]
[23 40]
[24 39]
[26 37]
[27 36]
[28 35]
[29 34]
[57 80]
[58 79]
[59 78]
[60 77]
[61 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
