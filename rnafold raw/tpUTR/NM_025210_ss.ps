%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 10:37:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAUGCCUGCUUCACCCUUGCAAUUGUUUGUGAAUAUGUGACGCUUAGAAGAUAUCUGCUUCACCCUUGCAAUUGUUUGUGAAAUACAAACCUUGUUACUGUAA\
) } def
/len { sequence length } bind def

/coor [
[174.04103088 137.91342163]
[169.11036682 122.21154785]
[154.43202209 119.12187195]
[139.75366211 116.03218842]
[125.07532501 112.94251251]
[110.39697266 109.85283661]
[97.04957581 114.01679230]
[86.51334381 104.82551575]
[71.83499908 101.73583221]
[56.96820831 99.74121857]
[41.99455261 98.85260773]
[27.76025391 105.75878906]
[15.51369667 97.28110504]
[0.54004061 96.39249420]
[-14.43361568 95.50388336]
[-29.40727043 94.61528015]
[-42.91835022 107.71273804]
[-61.40531158 106.95690155]
[-73.38699341 93.27393341]
[-88.38699341 93.27393341]
[-103.38699341 93.27393341]
[-118.38699341 93.27393341]
[-133.38699341 93.27393341]
[-148.38699341 93.27393341]
[-162.31079102 101.93763733]
[-176.64622498 93.97351074]
[-176.64622498 77.57436371]
[-162.31079102 69.61022949]
[-148.38699341 78.27393341]
[-133.38699341 78.27393341]
[-118.38699341 78.27393341]
[-103.38699341 78.27393341]
[-88.38699341 78.27393341]
[-73.38699341 78.27393341]
[-67.13727570 68.50566101]
[-56.80682373 62.97586823]
[-44.97060776 63.19680023]
[-34.64490891 69.23020172]
[-28.51866150 79.64162445]
[-13.54500580 80.53022766]
[1.42865002 81.41883850]
[16.40230560 82.30744934]
[29.56558800 75.33770752]
[42.88315964 83.87895203]
[57.85681534 84.76756287]
[59.64659882 83.03716278]
[62.19438934 81.86639404]
[65.30680084 81.52816772]
[68.70210266 82.22679901]
[72.03430176 84.07138062]
[74.92467499 87.05748749]
[89.60302734 90.14716339]
[102.95042419 85.98320770]
[113.48665619 95.17448425]
[128.16499329 98.26416779]
[142.84335327 101.35384369]
[157.52169800 104.44352722]
[172.20004272 107.53320312]
[181.05224609 96.59009552]
[193.71064758 90.58917999]
[207.65275574 90.66255951]
[220.12773132 96.73816681]
[228.69917297 107.56534576]
[231.72085571 120.97187805]
[246.30119324 124.49517059]
[256.92037964 113.48698425]
[271.52737427 109.29976654]
[286.17169189 112.96179962]
[296.94467163 123.39244843]
[301.02279663 137.71846008]
[315.60311890 141.24174500]
[330.18347168 144.76504517]
[344.76382446 148.28833008]
[356.26104736 142.21383667]
[368.40863037 145.56088257]
[374.75201416 155.97894287]
[389.22152710 159.93273926]
[403.69107056 163.88655090]
[418.16061401 167.84036255]
[432.63012695 171.79417419]
[447.09967041 175.74797058]
[461.56921387 179.70178223]
[478.44192505 178.04426575]
[484.70550537 193.79875183]
[471.30065918 204.17881775]
[457.61538696 194.17131042]
[443.14587402 190.21751404]
[428.67633057 186.26370239]
[414.20678711 182.30989075]
[399.73727417 178.35609436]
[385.26773071 174.40228271]
[370.79818726 170.44847107]
[354.17895508 175.86561584]
[341.24053955 162.86866760]
[326.66018677 159.34538269]
[312.07983398 155.82209778]
[297.49951172 152.29879761]
[287.32971191 163.18185425]
[272.98248291 167.54228210]
[258.28189087 164.11322021]
[247.19866943 153.71806335]
[242.77790833 139.07551575]
[228.19755554 135.55223083]
[217.41645813 147.48867798]
[202.01235962 152.43196106]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 58]
[3 57]
[4 56]
[5 55]
[6 54]
[8 52]
[9 51]
[10 45]
[11 44]
[13 42]
[14 41]
[15 40]
[16 39]
[19 34]
[20 33]
[21 32]
[22 31]
[23 30]
[24 29]
[64 103]
[65 102]
[70 97]
[71 96]
[72 95]
[73 94]
[76 92]
[77 91]
[78 90]
[79 89]
[80 88]
[81 87]
[82 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
