%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 23:25:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUCCUCUUCACUCUGCUCUCAGGAGAUCUGGCUGUGAGGCCCUCAGGGCAGGGAUACAAAGCGGGGAGAGGGUACACAAUGGGUAUCUAAUAAAUACUUAAGAGGUGGAAUUUGUGGAA\
) } def
/len { sequence length } bind def

/coor [
[82.74438477 120.06193542]
[77.08200073 113.22886658]
[73.99713135 104.90798950]
[73.83671570 96.03513336]
[60.25118637 89.67641449]
[46.66564941 83.31769562]
[33.08011627 76.95898438]
[19.49458313 70.60026550]
[5.90904951 64.24155426]
[-7.67648458 57.88283539]
[-21.26201820 51.52412033]
[-31.96752167 52.24170685]
[-39.02680969 45.85297012]
[-53.78377914 43.16376114]
[-68.54074860 40.47454834]
[-83.29771423 37.78533554]
[-98.05468750 35.09612656]
[-112.81165314 32.40691376]
[-127.56862640 29.71770287]
[-142.32559204 27.02849197]
[-157.08256531 24.33927917]
[-162.21879578 26.19133186]
[-167.04519653 25.84044075]
[-170.74964905 23.79814720]
[-172.85552979 20.83065796]
[-187.36094666 17.01059151]
[-201.86636353 13.19052410]
[-206.26771545 14.58465958]
[-210.44335938 14.44242573]
[-213.91763306 13.04069805]
[-216.36219788 10.78751564]
[-217.62710571 8.15913868]
[-231.66285706 2.86785722]
[-245.69860840 -2.42342424]
[-259.73437500 -7.71470547]
[-275.81924438 -4.51958370]
[-286.42379761 -17.02860832]
[-280.63894653 -32.37356567]
[-264.41567993 -34.76887894]
[-254.44308472 -21.75045776]
[-240.40733337 -16.45917702]
[-226.37158203 -11.16789532]
[-212.33583069 -5.87661362]
[-198.04629517 -1.31489134]
[-183.54087830 2.50517535]
[-169.03546143 6.32524204]
[-154.39335632 9.58231068]
[-139.63638306 12.27152252]
[-124.87941742 14.96073341]
[-110.12244415 17.64994431]
[-95.36547852 20.33915710]
[-80.60850525 23.02836800]
[-65.85153961 25.71757889]
[-51.09456635 28.40678978]
[-36.33759689 31.09600258]
[-45.73021317 19.40075493]
[-48.88393021 4.73603249]
[-45.12957764 -9.78653145]
[-35.26377869 -21.08546829]
[-21.37990189 -26.76331520]
[-6.42389584 -25.61531830]
[6.43079948 -17.88506508]
[14.45661259 -5.21280003]
[15.95058727 9.71261597]
[10.59572411 23.72423363]
[-0.47175488 33.84900284]
[-14.90330219 37.93858719]
[-1.31776869 44.29730225]
[12.26776505 50.65601730]
[25.85330009 57.01473236]
[39.43883133 63.37344742]
[53.02436829 69.73216248]
[66.60990143 76.09088135]
[80.19543457 82.44960022]
[99.12781525 73.55237579]
[118.60524750 81.18292999]
[126.45580292 100.57273102]
[140.74533081 105.13445282]
[155.03486633 109.69617462]
[169.32438660 114.25789642]
[183.61392212 118.81961823]
[194.99655151 108.60282135]
[209.86662292 105.47588348]
[224.20999146 110.18058014]
[234.20576477 121.35826874]
[237.24406433 135.94024658]
[251.53359985 140.50196838]
[265.82312012 145.06369019]
[280.11267090 149.62541199]
[294.40219116 154.18714905]
[308.32119751 147.19435120]
[322.74783325 152.02415466]
[329.32861328 165.33688354]
[343.61813354 169.89860535]
[357.90765381 174.46032715]
[373.80673218 170.44142151]
[385.04116821 182.38793945]
[380.05392456 198.01036072]
[363.97549438 201.23764038]
[353.34594727 188.74986267]
[339.05639648 184.18814087]
[324.76687622 179.62641907]
[311.68966675 186.66363525]
[297.13308716 182.24095154]
[289.84045410 168.47666931]
[275.55093384 163.91494751]
[261.26141357 159.35322571]
[246.97187805 154.79150391]
[232.68234253 150.22978210]
[221.75692749 160.35404968]
[207.13351440 163.67242432]
[192.71725464 159.19604492]
[182.40954590 148.03146362]
[179.05220032 133.10914612]
[164.76266479 128.54742432]
[150.47314453 123.98570251]
[136.18360901 119.42398071]
[121.89408112 114.86225891]
[115.74925232 121.26495361]
[107.83316803 125.27605438]
[99.03610229 126.44444275]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 74]
[5 73]
[6 72]
[7 71]
[8 70]
[9 69]
[10 68]
[11 67]
[13 55]
[14 54]
[15 53]
[16 52]
[17 51]
[18 50]
[19 49]
[20 48]
[21 47]
[25 46]
[26 45]
[27 44]
[32 43]
[33 42]
[34 41]
[35 40]
[77 118]
[78 117]
[79 116]
[80 115]
[81 114]
[86 109]
[87 108]
[88 107]
[89 106]
[90 105]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
