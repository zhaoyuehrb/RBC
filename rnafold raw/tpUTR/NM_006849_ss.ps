%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 11:13:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCCCCCGUGUCACCCCCGCCAUCACUGCUGGACAGGAGCCACCCCCUUGGGUACCAGAGGGAGCUGUGCAUUGUGAAUAAAGAGUGAGCUUGGUUCUGGA\
) } def
/len { sequence length } bind def

/coor [
[186.21903992 125.04956055]
[181.94371033 121.48366547]
[167.15428162 118.97912598]
[152.36483765 116.47458649]
[137.57540894 113.97004700]
[122.78598022 111.46550751]
[107.46580505 124.39099121]
[87.53556061 122.25525665]
[75.30199432 106.37709808]
[60.31769180 105.69107056]
[45.33338928 105.00503540]
[31.19378853 112.10308838]
[18.83370399 103.79179382]
[4.69410324 110.88984680]
[-7.66598225 102.57855225]
[-22.65028572 101.89252472]
[-39.92942810 112.05117035]
[-55.90198135 101.33451843]
[-70.90023804 101.56326294]
[-85.89849091 101.79200745]
[-99.57906342 109.73886108]
[-112.42285156 102.19654846]
[-127.42110443 102.42530060]
[-141.21116638 111.30033112]
[-155.66639709 103.55574036]
[-155.91647339 87.15850067]
[-141.70416260 78.97668457]
[-127.64985657 87.42704010]
[-112.65159607 87.19829559]
[-100.04380035 79.26780701]
[-86.12724304 86.79375458]
[-71.12898254 86.56501007]
[-56.13072968 86.33625793]
[-49.55113220 78.24815369]
[-39.36648941 75.14102173]
[-28.96824646 78.30786133]
[-21.96425438 86.90821838]
[-6.97995138 87.59424591]
[6.08787107 80.44712830]
[19.51973343 88.80749512]
[32.58755493 81.66037750]
[46.01942062 90.02073669]
[61.00372314 90.70676422]
[75.98802948 91.39279938]
[80.90976715 83.08191681]
[88.56874084 77.19681549]
[97.86677551 74.58134460]
[107.47068787 75.61050415]
[116.00341797 80.13673401]
[122.24150848 87.51104736]
[125.29051971 96.67607880]
[140.07995605 99.18061829]
[154.86938477 101.68515778]
[169.65881348 104.18968964]
[184.44824219 106.69422913]
[199.33674622 108.51975250]
[214.29315186 109.66242218]
[229.24957275 110.80509949]
[244.20597839 111.94777679]
[259.16238403 113.09045410]
[274.11880493 114.23312378]
[290.42773438 105.85579681]
[304.57083130 116.12101746]
[319.55514526 116.80704498]
[334.53942871 117.49308014]
[349.52374268 118.17910767]
[364.50805664 118.86514282]
[369.44186401 116.28610992]
[374.36105347 116.01016235]
[378.34921265 117.61444092]
[380.81161499 120.36113739]
[395.67056274 122.41349030]
[410.52947998 124.46584320]
[425.38839722 126.51819611]
[440.11743164 120.74185181]
[451.66638184 130.14778137]
[464.11276245 120.40799713]
[479.79040527 122.40474701]
[489.39804077 134.95339966]
[487.23565674 150.60905457]
[474.58612061 160.08349609]
[458.95419312 157.75569153]
[449.61401367 145.00671387]
[435.94781494 150.92985535]
[423.33605957 141.37712097]
[408.47714233 139.32478333]
[393.61819458 137.27243042]
[378.75927734 135.22007751]
[363.82202148 133.84944153]
[348.83770752 133.16340637]
[333.85339355 132.47738647]
[318.86911011 131.79135132]
[303.88479614 131.10531616]
[294.64028931 139.07127380]
[282.04623413 138.51576233]
[272.97613525 129.18954468]
[258.01971436 128.04685974]
[243.06330872 126.90419006]
[228.10690308 125.76151276]
[213.15048218 124.61883545]
[198.19407654 123.47616577]
[195.20559692 125.63874054]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 55]
[3 54]
[4 53]
[5 52]
[6 51]
[9 44]
[10 43]
[11 42]
[13 40]
[15 38]
[16 37]
[18 33]
[19 32]
[20 31]
[22 29]
[23 28]
[56 101]
[57 100]
[58 99]
[59 98]
[60 97]
[61 96]
[63 93]
[64 92]
[65 91]
[66 90]
[67 89]
[71 88]
[72 87]
[73 86]
[74 85]
[76 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
