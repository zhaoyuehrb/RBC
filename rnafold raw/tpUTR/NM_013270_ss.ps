%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 10:21:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUGUGUGCCCUCCCUCACUUGUGGGCCCCCCUUGCCUCCGUGCCCAGGUUGCUGUGGGUGCAGCUGUCACAGCCCUGAGAGUCAGGGUGGAGAUGAGGUGCUCAAUUAAACAUUACUGUUUUCCAUGC\
) } def
/len { sequence length } bind def

/coor [
[83.47837067 182.98190308]
[91.45040894 170.27507019]
[92.94105530 155.34933472]
[94.43170166 140.42358398]
[86.94032288 140.78315735]
[78.47637939 153.16708374]
[70.01242828 165.55101013]
[68.61337280 181.31024170]
[55.04396439 187.45193481]
[58.21038055 202.93577576]
[49.43104935 216.07727051]
[33.91459656 219.07980347]
[20.86665535 210.16203308]
[18.02833939 194.61470032]
[27.08357048 181.66177368]
[42.66004181 178.98799133]
[43.45369720 164.11454773]
[57.62850189 157.08706665]
[66.09245300 144.70314026]
[74.55639648 132.31921387]
[63.75474548 113.31959534]
[64.61876678 92.84479523]
[75.45858002 77.08007050]
[91.77934265 70.04539490]
[91.41965485 55.04970551]
[91.05996704 40.05401993]
[90.70027161 25.05833054]
[90.34058380 10.06264496]
[81.95796967 2.93692541]
[78.99642944 -7.42950344]
[82.21542358 -17.48727798]
[90.30049133 -23.93221092]
[90.66018677 -38.92789841]
[91.01987457 -53.92358398]
[91.37956238 -68.91927338]
[91.73925781 -83.91495514]
[84.33509827 -97.89669800]
[92.37536621 -110.43477631]
[92.73505402 -125.43045807]
[93.09474182 -140.42614746]
[93.45443726 -155.42182922]
[61.78282547 -173.25938416]
[53.02435303 -185.43679810]
[44.26588058 -197.61419678]
[35.50740814 -209.79159546]
[26.74893379 -221.96900940]
[17.99046135 -234.14640808]
[9.23198795 -246.32380676]
[-6.28497028 -246.26356506]
[-18.85415077 -255.36276245]
[-23.64244461 -270.12255859]
[-18.80865860 -284.86752319]
[-6.21147966 -293.92791748]
[9.30521870 -293.81985474]
[21.77495003 -284.58483887]
[26.40284729 -269.77395630]
[21.40939140 -255.08229065]
[30.16786385 -242.90487671]
[38.92633820 -230.72747803]
[47.68481064 -218.55007935]
[56.44328308 -206.37266541]
[65.20175934 -194.19526672]
[73.96022797 -182.01786804]
[81.43382263 -181.38908386]
[79.58570099 -196.27479553]
[71.41143036 -208.85180664]
[73.91008759 -223.64224243]
[85.76226807 -232.83604431]
[100.70945740 -231.57846069]
[110.85884094 -220.53355408]
[110.85107422 -205.53355408]
[100.69033051 -194.49919128]
[96.38101959 -180.13153076]
[103.85461426 -179.50274658]
[114.52461243 -190.04556274]
[125.19461823 -200.58839417]
[135.86462402 -211.13121033]
[146.53462219 -221.67402649]
[157.20462036 -232.21685791]
[167.87461853 -242.75967407]
[174.89183044 -258.19323730]
[191.66481018 -255.72271729]
[193.93405151 -238.92131042]
[178.41744995 -232.08967590]
[167.74743652 -221.54684448]
[157.07743835 -211.00402832]
[146.40744019 -200.46121216]
[135.73744202 -189.91839600]
[125.06743622 -179.37556458]
[114.39743042 -168.83274841]
[108.45011902 -155.06214905]
[108.09043121 -140.06645203]
[107.73074341 -125.07077026]
[107.37104797 -110.07508850]
[114.80093384 -97.16593933]
[106.73493958 -83.55526733]
[106.37525177 -68.55958557]
[106.01556396 -53.56389618]
[105.65586853 -38.56820679]
[105.29618073 -23.57252121]
[115.83355713 -7.42950344]
[105.33627319 9.70295525]
[105.69596100 24.69864082]
[106.05564880 39.69432831]
[106.41534424 54.69001389]
[106.77503204 69.68569946]
[123.12400818 75.65077209]
[134.77537537 90.31999969]
[137.23432922 110.23400116]
[128.42213440 129.73365784]
[138.03330994 141.24996948]
[147.64447021 152.76629639]
[157.25563049 164.28260803]
[166.86679077 175.79893494]
[182.43998718 180.93777466]
[185.51083374 197.04684448]
[172.92030334 207.55448914]
[157.62046814 201.65136719]
[155.35046387 185.41009521]
[145.73930359 173.89376831]
[136.12814331 162.37745667]
[126.51698303 150.86112976]
[116.90582275 139.34481812]
[109.41445160 139.70440674]
[112.32781982 154.41876221]
[115.24118805 169.13311768]
[124.39346313 181.01739502]
[123.34274292 195.98054504]
[112.61944580 206.46914673]
[97.63670349 207.18853760]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 20]
[6 19]
[7 18]
[9 16]
[24 106]
[25 105]
[26 104]
[27 103]
[28 102]
[32 100]
[33 99]
[34 98]
[35 97]
[36 96]
[38 94]
[39 93]
[40 92]
[41 91]
[42 63]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[74 90]
[75 89]
[76 88]
[77 87]
[78 86]
[79 85]
[80 84]
[110 123]
[111 122]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
