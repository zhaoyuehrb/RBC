%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 19:15:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUUUGAACCAGAUUUGGAUCAUAUUGAUGAUGGUCCCUUGUGAUAAGCUUGUUUCUUUUGGAUAAUCUUCAACCUAAAAUUACUAAUUACUGAAAAAUCAAAUUAAUGUAUUGUUUUCAUAAUAAUACAGCAAGGUAAAAGUCUGUGUGGAAUAUA\
) } def
/len { sequence length } bind def

/coor [
[98.55441284 445.29830933]
[98.25805664 430.30123901]
[97.96170044 415.30416870]
[97.66534424 400.30709839]
[97.36898041 385.31002808]
[97.07262421 370.31295776]
[88.55523682 361.67654419]
[88.21644592 349.14971924]
[96.78594971 339.46340942]
[96.78594971 324.46340942]
[96.63776398 309.46414185]
[96.34140015 294.46707153]
[96.04504395 279.47000122]
[95.74868774 264.47293091]
[95.45233154 249.47586060]
[95.15597534 234.47879028]
[94.85961914 219.48171997]
[83.97698212 209.37707520]
[83.46279144 194.17213440]
[94.13526154 182.82594299]
[93.83890533 167.82887268]
[93.54254913 152.83180237]
[72.18755341 145.38023376]
[55.85490799 129.73396301]
[47.49392700 108.71836090]
[48.61443329 86.12841034]
[34.82818222 80.21746826]
[21.04193115 74.30651855]
[7.25567961 68.39557648]
[-8.47681427 70.06866455]
[-17.12525558 57.94209290]
[-30.91150665 52.03114700]
[-44.69775772 46.12020111]
[-60.43025208 47.79328918]
[-69.07868958 35.66671753]
[-82.86494446 29.75577354]
[-96.65119934 23.84482956]
[-110.43744659 17.93388557]
[-124.82085419 26.78571129]
[-141.48257446 25.35412025]
[-153.89645386 14.39793682]
[-157.31813049 -1.63233757]
[-173.01449585 0.35125282]
[-181.90083313 -11.60208321]
[-195.80117798 -17.23949623]
[-209.70152283 -22.87691116]
[-223.60186768 -28.51432419]
[-239.76097107 -25.71870995]
[-250.05232239 -38.48663712]
[-243.88908386 -53.68355560]
[-227.61143494 -55.67618179]
[-217.96446228 -42.41466904]
[-204.06411743 -36.77725601]
[-190.16377258 -31.13984108]
[-176.26342773 -25.50242615]
[-161.56129456 -27.88924217]
[-151.68070984 -15.53268147]
[-141.02626038 -23.62649155]
[-127.65478516 -25.39962769]
[-115.05818176 -20.28079605]
[-106.57963562 -9.51272488]
[-104.52650452 4.14763355]
[-90.74024963 10.05857754]
[-76.95400238 15.96952248]
[-63.16774750 21.88046646]
[-48.42134094 19.78458977]
[-38.78681564 32.33395004]
[-25.00056267 38.24489594]
[-11.21431065 44.15584183]
[3.53209782 42.05996323]
[13.16662407 54.60932541]
[26.95287514 60.52026749]
[40.73912811 66.43121338]
[54.52537918 72.34215546]
[58.47998428 66.69856262]
[63.13061142 61.61321259]
[68.39929199 57.17135620]
[74.19771576 53.44745636]
[80.42866516 50.50393677]
[86.98770905 48.39014053]
[93.76486969 47.14150238]
[100.64656067 46.77895737]
[107.51741791 47.30857849]
[114.26225281 48.72148895]
[120.76799774 50.99400330]
[126.92560577 54.08802795]
[136.26139832 42.34737015]
[145.59718323 30.60670853]
[154.93296814 18.86604881]
[164.26875305 7.12538910]
[165.63825989 0.56928420]
[169.55044556 -3.64488029]
[174.21266174 -4.88507509]
[184.00500488 -16.24774361]
[193.79733276 -27.61041260]
[196.32424927 -43.81370544]
[211.71565247 -49.47380066]
[224.13819885 -38.76807404]
[220.81262207 -22.70966148]
[205.16000366 -17.81808090]
[195.36767578 -6.45541239]
[185.57533264 4.90725660]
[176.00941467 16.46117592]
[166.67362976 28.20183563]
[157.33784485 39.94249344]
[148.00204468 51.68315506]
[138.66625977 63.42381287]
[148.27517700 77.58560944]
[152.89300537 94.06478882]
[167.88642883 94.50929260]
[182.87983704 94.95378876]
[197.87324524 95.39829254]
[212.86666870 95.84278870]
[227.86007690 96.28729248]
[242.85348511 96.73178864]
[257.84689331 97.17629242]
[272.84030151 97.62078857]
[285.45480347 87.70847321]
[301.03588867 91.53075409]
[307.63104248 106.15550232]
[300.18109131 120.36386108]
[284.40093994 123.25639343]
[272.39581299 112.61420441]
[257.40240479 112.16970062]
[242.40898132 111.72520447]
[227.41557312 111.28070068]
[212.42216492 110.83620453]
[197.42875671 110.39170074]
[182.43533325 109.94720459]
[167.44192505 109.50270081]
[152.44851685 109.05820465]
[148.62629700 121.64212036]
[141.83515930 132.90466309]
[132.48976135 142.15818787]
[121.16068268 148.83772278]
[108.53961945 152.53544617]
[108.83597565 167.53251648]
[109.13233185 182.52958679]
[120.24472046 193.44528198]
[120.33162689 208.65867615]
[109.85668945 219.18536377]
[110.15304565 234.18243408]
[110.44940186 249.17950439]
[110.74575806 264.17657471]
[111.04211426 279.17364502]
[111.33847809 294.17071533]
[111.63483429 309.16778564]
[114.94760895 317.73876953]
[111.78594971 324.46340942]
[111.78594971 339.46340942]
[121.36726379 355.15972900]
[112.06969452 370.01660156]
[112.36605835 385.01367188]
[112.66241455 400.01074219]
[112.95877075 415.00781250]
[113.25512695 430.00488281]
[113.55148315 445.00195312]
[116.12237549 464.21237183]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 157]
[2 156]
[3 155]
[4 154]
[5 153]
[6 152]
[9 150]
[10 149]
[11 147]
[12 146]
[13 145]
[14 144]
[15 143]
[16 142]
[17 141]
[20 138]
[21 137]
[22 136]
[26 74]
[27 73]
[28 72]
[29 71]
[31 69]
[32 68]
[33 67]
[35 65]
[36 64]
[37 63]
[38 62]
[42 57]
[44 55]
[45 54]
[46 53]
[47 52]
[86 107]
[87 106]
[88 105]
[89 104]
[90 103]
[93 102]
[94 101]
[95 100]
[109 131]
[110 130]
[111 129]
[112 128]
[113 127]
[114 126]
[115 125]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
