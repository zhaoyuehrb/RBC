%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:55:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCCUUCUGAGCCCAGCGACUUCUGAAGGGCCCCUUGCAAAGUAAUAGGGCUUCUGCCUAAGCCUCUCCCUCCAGCCAAUAGGCAGCUUUCUUAACUAUCCUAACAAGCCUUGGACCAAAUGGAAAUAAAGCUUUUUGAUGCA\
) } def
/len { sequence length } bind def

/coor [
[105.62215424 167.17314148]
[102.71572113 152.45741272]
[99.80928802 137.74168396]
[96.90286255 123.02595520]
[95.55075836 137.96488953]
[83.60939789 147.04254150]
[68.85324097 144.34886169]
[60.88936234 131.63757324]
[64.90267944 117.18444061]
[78.27985382 110.39924622]
[63.53350830 113.14608765]
[48.78715897 115.89293671]
[34.04080963 118.63978577]
[19.29445839 121.38662720]
[4.54810810 124.13347626]
[-0.64126670 138.52157593]
[-12.25899792 148.31571960]
[-27.12045860 150.96211243]
[-41.21684647 145.84861755]
[-50.79652405 134.44268799]
[-65.54286957 137.18952942]
[-80.28922272 139.93637085]
[-95.03557587 142.68322754]
[-102.96832275 147.36306763]
[-110.13092804 145.32621765]
[-124.93332672 147.75294495]
[-139.70857239 150.33987427]
[-154.45492554 153.08673096]
[-169.20126343 155.83357239]
[-183.94761658 158.58041382]
[-198.41168213 167.42503357]
[-210.91468811 155.97465515]
[-203.37298584 140.79048157]
[-186.69445801 143.83407593]
[-171.94812012 141.08721924]
[-157.20176697 138.34037781]
[-142.45541382 135.59353638]
[-136.41091919 131.24429321]
[-127.36006165 132.95054626]
[-112.55766296 130.52381897]
[-97.78241730 127.93687439]
[-83.03607178 125.19002533]
[-68.28971863 122.44318390]
[-53.54336929 119.69633484]
[-48.71292496 105.60617828]
[-37.40308380 95.76019287]
[-22.58551216 92.87818909]
[-8.22055244 97.83245087]
[1.80126166 109.38712311]
[16.54761124 106.64028168]
[31.29396057 103.89343262]
[46.04030991 101.14658356]
[60.78666306 98.39974213]
[75.53301239 95.65289307]
[84.73944855 83.81053162]
[83.76515961 68.84220886]
[82.79087067 53.87388611]
[81.81658173 38.90555954]
[80.84228516 23.93723488]
[79.86799622 8.96890926]
[78.89370728 -5.99941635]
[66.92573547 -22.15997696]
[76.04908752 -39.15936661]
[74.42729950 -54.07143402]
[60.16212082 -59.61789703]
[50.11724854 -71.16602325]
[46.60092163 -86.06212616]
[50.42116928 -100.88320923]
[60.70011902 -112.22347260]
[75.07575226 -117.47702789]
[90.24464417 -115.43663788]
[102.72110748 -106.57116699]
[109.63813019 -92.91783905]
[109.40623474 -77.61408997]
[102.07871246 -64.17660522]
[89.33937073 -55.69321823]
[90.96115875 -40.78115082]
[99.53720093 -35.06103134]
[103.59708405 -25.34606552]
[101.55784607 -14.79159260]
[93.86203003 -6.97370672]
[94.83632660 7.99461842]
[95.81061554 22.96294403]
[96.78490448 37.93126678]
[97.75919342 52.89959335]
[98.73348236 67.86791992]
[99.70777893 82.83624268]
[112.52397156 77.12055969]
[129.79956055 81.64357758]
[144.79164124 81.15617371]
[159.78372192 80.66877747]
[174.77580261 80.18137360]
[189.76786804 79.69396973]
[195.17817688 65.51636505]
[205.57627869 54.51990128]
[219.35508728 48.35886383]
[234.40219116 47.94367218]
[248.42378235 53.30646896]
[259.29434204 63.60095596]
[265.37875366 77.23580933]
[280.37081909 76.74840546]
[295.36291504 76.26100159]
[301.97415161 62.45701218]
[314.25006104 53.31587982]
[329.36975098 50.93817139]
[343.85882568 55.87026596]
[354.38778687 66.97880554]
[358.53717041 81.71112823]
[355.35345459 96.68185425]
[345.56826782 108.45081329]
[331.43014526 114.31359863]
[316.18792725 112.92297363]
[303.34420776 104.59850311]
[295.85031128 91.25308228]
[280.85824585 91.74048615]
[265.86614990 92.22789001]
[260.68020630 106.22914124]
[250.50126648 117.20796967]
[236.85760498 123.47017670]
[221.81530762 124.03321075]
[207.66543579 118.78015900]
[196.57502747 108.48229980]
[190.25527954 94.68605042]
[175.26319885 95.17344666]
[160.27111816 95.66085052]
[145.27903748 96.14825439]
[130.28695679 96.63565826]
[125.61986542 102.50662231]
[137.36164856 111.84100342]
[128.02706909 123.58262634]
[116.28568268 114.24855804]
[111.61859131 120.11952209]
[114.52501678 134.83525085]
[117.43144989 149.55097961]
[120.33788300 164.26670837]
[134.90068054 169.14733887]
[145.06007385 180.66610718]
[148.08326721 195.72453308]
[143.15701294 210.27195740]
[131.60644531 220.39520264]
[116.53863525 223.37117004]
[102.00672150 218.39933777]
[91.91972351 206.81710815]
[88.99100494 191.74003601]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 135]
[2 134]
[3 133]
[4 132]
[10 54]
[11 53]
[12 52]
[13 51]
[14 50]
[15 49]
[20 44]
[21 43]
[22 42]
[23 41]
[25 40]
[26 39]
[27 37]
[28 36]
[29 35]
[30 34]
[55 87]
[56 86]
[57 85]
[58 84]
[59 83]
[60 82]
[61 81]
[63 77]
[64 76]
[89 127]
[90 126]
[91 125]
[92 124]
[93 123]
[100 116]
[101 115]
[102 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
