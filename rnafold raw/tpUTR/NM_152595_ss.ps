%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 09:41:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACCGAUCAUCAUACACAUCUGUUCCAUUAGGAUUAGAGACAAGUUCUGUUUAGAAAUAACUCCAAGAUUGGGAGGCCGACCUGGGUGGAUCACCUGAGA\
) } def
/len { sequence length } bind def

/coor [
[71.51505280 108.69709778]
[71.05772400 100.67865753]
[72.75286102 93.05879974]
[76.35364532 86.38768005]
[65.91163635 75.61899567]
[55.46962738 64.85031891]
[45.02761841 54.08164215]
[34.58560944 43.31296158]
[24.14360046 32.54428482]
[12.80520821 39.32097626]
[0.12765187 43.26897049]
[-13.19103241 44.13704681]
[-26.40952682 41.84452057]
[-38.78448868 36.48752975]
[-49.61235809 28.33543396]
[-58.26933289 17.81744957]
[-64.24727631 5.50011587]
[-67.18346405 -7.94317532]
[-66.88246918 -21.76898384]
[-63.32877731 -35.20492935]
[-77.87573242 -38.86363602]
[-92.42268372 -42.52234268]
[-106.96963501 -46.18104935]
[-122.24023438 -42.04349136]
[-132.69587708 -52.65145493]
[-147.24282837 -56.31016159]
[-161.78977966 -59.96886826]
[-177.40623474 -54.96304321]
[-189.36613464 -66.18323517]
[-185.36616516 -82.08708191]
[-169.52113342 -86.31406403]
[-158.13107300 -74.51582336]
[-143.58412170 -70.85711670]
[-129.03717041 -67.19841003]
[-114.80706024 -71.59766388]
[-103.31093597 -60.72800064]
[-88.76397705 -57.06929779]
[-74.21702576 -53.41059113]
[-59.67007065 -49.75188446]
[-49.39513016 -60.68008804]
[-53.94242096 -74.97422028]
[-58.48971176 -89.26834869]
[-63.03699875 -103.56247711]
[-76.56832123 -112.18122864]
[-78.12320709 -128.14875793]
[-66.50888062 -139.21614075]
[-50.63486099 -136.89343262]
[-42.67833328 -122.96240997]
[-48.74287033 -108.10976410]
[-44.19557953 -93.81563568]
[-39.64828873 -79.52150726]
[-35.10100174 -65.22737885]
[-25.80605698 -68.67253113]
[-16.09801865 -70.50312042]
[-6.25420570 -70.67836761]
[3.44610453 -69.20462036]
[12.72960377 -66.13486481]
[21.33665276 -61.56686401]
[29.02854156 -55.64012909]
[35.59410858 -48.53165817]
[40.85552597 -40.45066452]
[44.67311478 -31.63242912]
[46.94902802 -22.33146286]
[47.62973404 -12.81415176]
[46.70722961 -3.35113740]
[44.21893311 5.79038286]
[40.24631500 14.35420036]
[34.91227722 22.10227394]
[45.35428619 32.87095261]
[55.79629898 43.63963318]
[66.23830414 54.40830994]
[76.68031311 65.17698669]
[87.12232208 75.94567108]
[114.18305969 72.39840698]
[134.48701477 95.49362183]
[149.23161316 98.24986267]
[163.97621155 101.00610352]
[179.25488281 95.04840851]
[191.88282776 105.51106262]
[188.86949158 121.63098145]
[173.31472778 126.82537842]
[161.21995544 115.75070190]
[146.47537231 112.99446106]
[131.73077393 110.23821259]
[124.03161621 123.11155701]
[133.43547058 134.79777527]
[142.83932495 146.48397827]
[152.24317932 158.17018127]
[161.64704895 169.85639954]
[176.28755188 178.40576172]
[172.12519836 194.84082031]
[155.18017578 195.39080811]
[149.96083069 179.26025391]
[140.55697632 167.57405090]
[131.15312195 155.88783264]
[121.74925995 144.20162964]
[112.34540558 132.51541138]
[103.05038452 133.81001282]
[93.97673035 132.56208801]
[85.79028320 128.98599243]
[79.05854797 123.46234131]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 73]
[5 72]
[6 71]
[7 70]
[8 69]
[9 68]
[20 39]
[21 38]
[22 37]
[23 36]
[25 34]
[26 33]
[27 32]
[40 52]
[41 51]
[42 50]
[43 49]
[75 84]
[76 83]
[77 82]
[85 97]
[86 96]
[87 95]
[88 94]
[89 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
