%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 01:04:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUCCAAUACCAGGAAAAAAGAUGCUUAUUUUCCAGAUCCUGGCAUCAUUUUCUGAAUGGAUUGAUUCCAAUAAAAGCAUAUAUCAUUGUGGUAGGGUAGGUGGGGCGGGGGUAGGGGUGGAUAAUAAAGCCUCUGAGUGUCCUUGG\
) } def
/len { sequence length } bind def

/coor [
[197.34539795 248.74893188]
[191.41288757 234.97193909]
[198.29516602 221.64399719]
[212.96366882 218.50473022]
[202.24658203 208.00978088]
[191.52949524 197.51483154]
[180.81240845 187.01988220]
[170.09530640 176.52493286]
[152.90878296 173.11900330]
[148.03247070 155.39401245]
[137.09794617 145.12579346]
[126.16342163 134.85758972]
[115.22888947 124.58938599]
[90.48809052 127.31447601]
[72.79158020 109.81114960]
[57.84418488 111.06632233]
[42.89678955 112.32148743]
[27.94939804 113.57665253]
[13.00200462 114.83182526]
[-1.94538796 116.08699036]
[-10.88774586 125.44186401]
[-23.40763474 126.14585876]
[-32.72495270 118.36653137]
[-47.69535065 119.30838776]
[-62.66575241 120.25025177]
[-77.63615417 121.19210815]
[-92.60655212 122.13396454]
[-107.57695770 123.07582092]
[-112.13233948 137.55383301]
[-121.61322021 149.40614319]
[-134.73739624 157.02983093]
[-149.72991943 159.39382935]
[-164.56318665 156.17845154]
[-177.23112488 147.81854248]
[-186.02047729 135.44470215]
[-189.74256897 120.73041534]
[-187.89401245 105.66564178]
[-180.72482300 92.28778839]
[-169.20455933 82.40608215]
[-154.89125061 77.35695648]
[-139.72065735 77.82325745]
[-125.74446869 83.74192810]
[-114.85285187 94.31250763]
[-108.51881409 108.10542297]
[-93.54841614 107.16356659]
[-78.57801056 106.22170258]
[-63.60761261 105.27984619]
[-48.63721085 104.33798981]
[-33.66680908 103.39613342]
[-19.63568115 92.90305328]
[-3.20055556 101.13959503]
[11.74683762 99.88442993]
[26.69423103 98.62926483]
[41.64162445 97.37409210]
[56.58901596 96.11892700]
[71.53640747 94.86376190]
[70.00502777 89.23510742]
[69.62756348 82.98631287]
[70.56131744 76.35622406]
[72.91443634 69.61751556]
[67.39256287 55.67087173]
[61.87069702 41.72422409]
[56.34883118 27.77757645]
[42.25554657 20.11214066]
[39.60360336 4.28979063]
[50.42734909 -7.55192137]
[66.42372894 -6.32904673]
[75.32168579 7.02032900]
[70.29547882 22.25570679]
[75.81734467 36.20235443]
[81.33921051 50.14900208]
[86.86108398 64.09564972]
[94.35080719 64.48816681]
[90.46854401 49.99927521]
[103.04862976 41.82973099]
[114.70577240 51.26959229]
[109.33024597 65.27320862]
[116.81996918 65.66572571]
[116.35671234 49.85130692]
[129.11003113 42.15701294]
[136.05946350 28.86395836]
[143.00891113 15.57090473]
[149.95834351 2.27785110]
[144.99365234 -12.72639275]
[152.16723633 -26.80883980]
[167.22312927 -31.61462593]
[181.22894287 -24.29256058]
[185.87527466 -9.18669796]
[178.40554810 4.74092293]
[163.25140381 9.22729206]
[156.30195618 22.52034569]
[149.35252380 35.81340027]
[142.40307617 49.10645294]
[143.36340332 63.97006607]
[130.11302185 72.61516571]
[134.81459045 88.14910126]
[132.74000549 102.68379974]
[125.49709320 113.65485382]
[136.43162537 123.92306519]
[147.36614990 134.19126892]
[158.30068970 144.45947266]
[171.23631287 144.84530640]
[180.13693237 153.67832947]
[180.59025574 165.80784607]
[191.30735779 176.30279541]
[202.02444458 186.79774475]
[212.74153137 197.29269409]
[223.45861816 207.78764343]
[234.71028137 217.70732117]
[246.46569824 227.02453613]
[258.22109985 236.34175110]
[269.97650146 245.65896606]
[281.73190308 254.97618103]
[293.48730469 264.29339600]
[305.62255859 273.11016846]
[318.11636353 281.41104126]
[330.61019897 289.71191406]
[343.10400391 298.01278687]
[355.59783936 306.31365967]
[368.09164429 314.61453247]
[380.58547974 322.91540527]
[394.30673218 316.01452637]
[409.63922119 316.91485596]
[422.45855713 325.37420654]
[429.31637573 339.11703491]
[428.36801147 354.44662476]
[419.86853027 367.23937988]
[406.10424805 374.05410767]
[390.77770996 373.05767822]
[378.01168823 364.51812744]
[371.24014282 350.73257446]
[372.28457642 335.40924072]
[359.79077148 327.10836792]
[347.29696655 318.80749512]
[334.80313110 310.50662231]
[322.30932617 302.20574951]
[309.81549072 293.90487671]
[297.32168579 285.60400391]
[294.49398804 286.07281494]
[291.30496216 285.41189575]
[288.19833374 283.47573853]
[285.66271973 280.28732300]
[284.17007446 276.04879761]
[272.41467285 266.73159790]
[260.65927124 257.41436768]
[248.90386963 248.09715271]
[237.14846802 238.77993774]
[225.39306641 229.46272278]
[224.11738586 244.40837097]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 108]
[5 107]
[6 106]
[7 105]
[8 104]
[10 101]
[11 100]
[12 99]
[13 98]
[15 56]
[16 55]
[17 54]
[18 53]
[19 52]
[20 51]
[23 49]
[24 48]
[25 47]
[26 46]
[27 45]
[28 44]
[60 72]
[61 71]
[62 70]
[63 69]
[78 95]
[80 93]
[81 92]
[82 91]
[83 90]
[109 148]
[110 147]
[111 146]
[112 145]
[113 144]
[114 143]
[115 138]
[116 137]
[117 136]
[118 135]
[119 134]
[120 133]
[121 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
