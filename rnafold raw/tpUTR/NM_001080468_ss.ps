%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 11:17:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCAUUGCUGGUCUCUCAUCUGCAGCUUCCACAGAGUGCCAAGCCCCUCACUCAGCCCAUCCCUGGGCUCUGCUCCGGGGCCCCAAGACCCAGGAGGAGGAGCGUUCUGCCUGCCCCCUCCCACCUCCCCUGCAAUACAGCCUUUGUGCAGUUGUC\
) } def
/len { sequence length } bind def

/coor [
[15.82711697 403.06613159]
[18.31541061 417.94091797]
[17.02549934 432.96713257]
[12.03847122 447.20019531]
[3.66781330 459.74542236]
[-7.56028795 469.81423950]
[-20.94002342 476.77365112]
[-35.63033295 480.18621826]
[-50.70777130 479.83740234]
[-65.22455597 475.74917603]
[-78.26815796 468.17846680]
[-89.01863098 457.60122681]
[-96.80020142 444.68231201]
[-101.12371826 430.23385620]
[-101.71738434 415.16409302]
[-98.54389191 400.42028809]
[-91.80273438 386.92926025]
[-81.91765594 375.53909302]
[-69.51005554 366.96575928]
[-55.35986328 361.74816895]
[-40.35659027 360.21435547]
[-25.44334984 362.46069336]
[-19.59927177 348.64596558]
[-13.75519466 334.83123779]
[-7.91111660 321.01651001]
[-2.06703854 307.20178223]
[3.77703953 293.38705444]
[-0.47909781 282.02655029]
[4.32124472 270.44915771]
[16.09826851 265.10043335]
[22.21759415 251.40539551]
[28.33691788 237.71035767]
[34.45624161 224.01533508]
[40.57556534 210.32029724]
[46.69489288 196.62527466]
[52.81421661 182.93023682]
[52.67086029 175.49873352]
[59.19543457 169.02432251]
[65.58755493 155.45446777]
[44.79937363 134.81817627]
[35.13065338 107.16821289]
[38.52904129 78.07429504]
[54.30997086 53.39703369]
[45.10925293 41.55022812]
[35.90853500 29.70342445]
[26.70781517 17.85662079]
[17.50709534 6.00981665]
[0.63754553 6.79143858]
[-13.24769497 -2.52622747]
[-18.80686188 -18.12095833]
[-14.04312706 -33.80353165]
[-29.51548767 -35.60458755]
[-38.91874313 -47.56424713]
[-37.10635757 -62.30367661]
[-46.54227829 -73.96401215]
[-55.97819519 -85.62435150]
[-65.41410828 -97.28469086]
[-74.85002899 -108.94502258]
[-84.28594971 -120.60536194]
[-99.77964783 -125.97911072]
[-102.60655212 -142.13276672]
[-89.85858154 -152.44883728]
[-74.64975739 -146.31503296]
[-72.62561035 -130.04127502]
[-63.18969345 -118.38094330]
[-53.75377655 -106.72060394]
[-44.31785583 -95.06027222]
[-34.88193893 -83.39993286]
[-25.44602203 -71.73959351]
[-10.65273094 -70.43801117]
[-0.91726285 -58.74718857]
[-2.38279033 -43.23944855]
[10.85942078 -45.16600418]
[23.41990280 -40.24505234]
[31.96550751 -29.66718292]
[34.17166901 -16.13898087]
[29.35389900 -3.19090223]
[38.55461884 8.65590191]
[47.75533676 20.50270653]
[56.95605850 32.34951019]
[66.15677643 44.19631577]
[73.72901917 40.25679398]
[81.75064087 37.33919907]
[90.08441925 35.49343872]
[98.58780670 34.75108719]
[107.11535645 35.12483597]
[115.52118683 36.60829926]
[123.66152954 39.17609787]
[131.39712524 42.78430557]
[138.59567261 47.37121201]
[145.13401794 52.85834885]
[150.90034485 59.15185928]
[155.79598999 66.14409637]
[169.42910767 59.88805771]
[183.06224060 53.63202286]
[196.69535828 47.37598801]
[210.32847595 41.11994934]
[216.86784363 34.66048050]
[224.29754639 34.87818146]
[238.05311584 28.89617920]
[244.72041321 22.56884575]
[252.14427185 22.93516159]
[266.01678467 17.22959137]
[279.88928223 11.52402115]
[284.45614624 -3.43183970]
[297.59609985 -11.90977859]
[313.10488892 -9.90677166]
[323.65969849 1.63142240]
[324.27688599 17.25682068]
[314.66503906 29.59158897]
[299.36257935 32.81162643]
[285.59484863 25.39652824]
[271.72235107 31.10209846]
[257.84985352 36.80767059]
[244.03511047 42.65174866]
[230.27954102 48.63374710]
[216.58451843 54.75307465]
[202.95140076 61.00910950]
[189.31826782 67.26514435]
[175.68515015 73.52117920]
[162.05203247 79.77721405]
[163.98027039 87.11824036]
[165.04318237 94.63348389]
[165.22637939 102.22131348]
[164.52738953 109.77910614]
[162.95567322 117.20462799]
[160.53245544 124.39746094]
[157.29055786 131.26031494]
[153.27378845 137.70037842]
[148.53649902 143.63053894]
[143.14274597 148.97058105]
[137.16548157 153.64831543]
[130.68556213 157.60044861]
[123.79061890 160.77352905]
[116.57390594 163.12464905]
[109.13302612 164.62199402]
[101.56861877 165.24534607]
[93.98300171 164.98623657]
[86.47876740 163.84819031]
[79.15740204 161.84658813]
[72.76528168 175.41644287]
[66.50924683 189.04956055]
[60.38992310 202.74459839]
[54.27059937 216.43962097]
[48.15127182 230.13465881]
[42.03194809 243.82968140]
[35.91262436 257.52471924]
[29.79330063 271.21975708]
[32.13868713 289.45782471]
[17.59176826 299.23114014]
[11.74769115 313.04586792]
[5.90361309 326.86059570]
[0.05953486 340.67532349]
[-5.78454304 354.49005127]
[-11.62862110 368.30477905]
[0.36925417 377.44271851]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 155]
[23 154]
[24 153]
[25 152]
[26 151]
[27 150]
[30 148]
[31 147]
[32 146]
[33 145]
[34 144]
[35 143]
[36 142]
[38 141]
[39 140]
[43 81]
[44 80]
[45 79]
[46 78]
[47 77]
[51 72]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
[93 121]
[94 120]
[95 119]
[96 118]
[97 117]
[99 116]
[100 115]
[102 114]
[103 113]
[104 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
