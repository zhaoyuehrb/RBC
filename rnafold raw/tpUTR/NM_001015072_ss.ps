%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 23:36:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACGAAGUUACAGAACUGAGAUUCUCGGGUCCCAGACACGCACCUAUGUACCUCCCACUGGUGUCCCUGCAAAGCCUGGCGCUUUUGACAUCAAUAAUAAAAGUGGCAGGGCUGAGCAA\
) } def
/len { sequence length } bind def

/coor [
[78.04106140 127.75986481]
[66.45362854 137.28517151]
[54.86619949 146.81047058]
[43.27876663 156.33576965]
[58.27458191 155.98150635]
[72.00003815 162.03228760]
[81.85410309 173.34146118]
[85.96939087 187.76589966]
[83.56604004 202.57209778]
[75.09949493 214.95425415]
[62.17419434 222.56587219]
[47.23954391 223.96452332]
[33.12572098 218.88516235]
[22.50734520 208.29034424]
[17.39664841 194.18783569]
[18.76212692 179.25010681]
[26.34310150 166.30999756]
[12.39358902 171.82463074]
[-1.55592370 177.33924866]
[-15.50543690 182.85388184]
[-29.45494843 188.36849976]
[-41.96194077 199.81452942]
[-56.42293167 190.96488953]
[-51.92234039 174.61921692]
[-34.96957397 174.41899109]
[-21.02006149 168.90435791]
[-7.07054901 163.38973999]
[6.87896347 157.87510681]
[20.82847595 152.36048889]
[33.75346375 144.74835205]
[45.34089661 135.22303772]
[56.92832565 125.69773865]
[68.51576233 116.17243195]
[66.12606812 110.26457977]
[64.83449554 104.02397156]
[64.68292236 97.65290833]
[65.67624664 91.35794067]
[67.78228760 85.34312439]
[70.93275452 79.80345917]
[75.02552032 74.91852570]
[79.92790985 70.84667969]
[74.23266602 56.96992493]
[68.53742218 43.09317780]
[62.84217834 29.21642685]
[57.14693069 15.33967781]
[42.84114075 9.17671490]
[37.26303101 -4.97741318]
[43.22663498 -18.57781792]
[37.53139114 -32.45456696]
[22.57893181 -37.03255844]
[14.11077404 -50.17882538]
[16.12532234 -65.68610382]
[27.67136765 -76.23232269]
[43.29722214 -76.83789062]
[55.62483215 -67.21687317]
[58.83348083 -51.91201782]
[51.40813828 -38.14981461]
[57.10338593 -24.27306366]
[70.90188599 -18.78334999]
[76.87535858 -4.79148388]
[71.02368164 9.64443207]
[76.71892548 23.52118111]
[82.41416931 37.39793015]
[88.10942078 51.27468109]
[93.80466461 65.15142822]
[108.74163818 65.70147705]
[122.11969757 72.36805725]
[131.55310059 83.96231842]
[135.35955811 98.41661072]
[150.14645386 100.93605804]
[164.93334961 103.45551300]
[177.73818970 94.58569336]
[192.69831848 97.35141754]
[201.07542419 109.61354065]
[215.86231995 112.13298798]
[230.64923096 114.65243530]
[245.43612671 117.17189026]
[260.25448608 119.49916840]
[275.10180664 121.63388824]
[289.86264038 115.93931580]
[301.35922241 125.40914154]
[316.20657349 127.54386139]
[331.05389404 129.67858887]
[345.90121460 131.81330872]
[360.74853516 133.94802856]
[375.59585571 136.08274841]
[390.44317627 138.21746826]
[405.29049683 140.35220337]
[414.72152710 128.22985840]
[428.95623779 122.46199036]
[444.16558838 124.60012817]
[456.25830078 134.06912231]
[461.98150635 148.32185364]
[459.79571533 163.52441406]
[450.28887939 175.58738708]
[436.01828003 181.26589966]
[420.82263184 179.03245544]
[408.78952026 169.48785400]
[403.15576172 155.19952393]
[388.30844116 153.06480408]
[373.46112061 150.93006897]
[358.61380005 148.79534912]
[343.76647949 146.66062927]
[328.91915894 144.52590942]
[314.07183838 142.39118958]
[299.22451782 140.25645447]
[285.52566528 146.10372925]
[272.96707153 136.48121643]
[258.11975098 134.34649658]
[250.96490479 136.53543091]
[242.91667175 131.95878601]
[228.12977600 129.43933105]
[213.34288025 126.91988373]
[198.55598450 124.40043640]
[186.59088135 133.19657898]
[171.55897522 130.85214233]
[162.41389465 118.24240875]
[147.62699890 115.72296143]
[132.84010315 113.20351410]
[119.07833099 129.81312561]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[2 32]
[3 31]
[4 30]
[17 29]
[18 28]
[19 27]
[20 26]
[21 25]
[41 65]
[42 64]
[43 63]
[44 62]
[45 61]
[48 58]
[49 57]
[69 119]
[70 118]
[71 117]
[74 114]
[75 113]
[76 112]
[77 111]
[78 109]
[79 108]
[81 106]
[82 105]
[83 104]
[84 103]
[85 102]
[86 101]
[87 100]
[88 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
