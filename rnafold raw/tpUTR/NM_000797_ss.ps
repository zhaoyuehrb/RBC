%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 07:12:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGGGCACCCCCGGACGCCCCCCGGCCUGAUGGCCAGGCCUCAGGGACCAAGGAGAUGGGGAGGGCGCUUUUGUACGUUAAUUAAACAAAUUCCUUCCCAA\
) } def
/len { sequence length } bind def

/coor [
[102.25342560 149.46466064]
[82.25762177 146.22811890]
[74.82375336 159.25645447]
[67.38988495 172.28480530]
[59.95602036 185.31314087]
[52.52215576 198.34147644]
[53.14655304 214.72872925]
[39.12474442 223.23291016]
[24.88116837 215.10563660]
[25.06839180 198.70756531]
[39.49381638 190.90760803]
[46.92768097 177.87927246]
[54.36154938 164.85093689]
[61.79541779 151.82260132]
[69.22928619 138.79425049]
[59.20607758 128.06576538]
[52.76947784 114.86973572]
[50.48538589 100.36634827]
[52.55462265 85.83076477]
[38.99784088 79.41097260]
[25.44105911 72.99118805]
[11.86115074 80.26389313]
[-3.22096276 78.17028046]
[-14.05021191 67.72080994]
[-16.61911583 53.07366943]
[-30.17589760 46.65388107]
[-43.73267746 40.23409271]
[-57.28945923 33.81430435]
[-70.84624481 27.39451790]
[-84.40302277 20.97472954]
[-99.93379974 24.99650002]
[-112.67436981 15.24676609]
[-112.85126495 -0.79531157]
[-100.32878876 -10.82362366]
[-84.71310425 -7.14530659]
[-77.98323822 7.41794872]
[-64.42645264 13.83773708]
[-50.86967087 20.25752449]
[-37.31288910 26.67731285]
[-23.75610924 33.09709930]
[-10.19932747 39.51688766]
[2.75971842 32.22298050]
[17.70560074 33.97927856]
[28.88212967 44.32038879]
[31.86084557 59.43440247]
[45.41762924 65.85419464]
[58.97441101 72.27397919]
[66.38386536 63.64361191]
[75.56725311 56.93177414]
[86.03995514 52.49264908]
[97.24933624 50.56048965]
[108.60385895 51.23725891]
[119.50436401 54.48724365]
[129.37562561 60.13893890]
[137.69671631 67.89410400]
[144.02856445 77.34350586]
[148.03701782 87.98848724]
[149.51054382 99.26731873]
[164.36947632 101.31967163]
[179.22840881 103.37202454]
[194.08734131 105.42437744]
[208.94627380 107.47673035]
[223.80520630 109.52907562]
[238.66413879 111.58142853]
[253.52307129 113.63378143]
[268.38198853 115.68613434]
[275.29394531 108.83374023]
[284.48168945 106.07260895]
[293.75280762 107.92503357]
[300.95846558 113.82829285]
[304.49154663 122.29660034]
[319.10076904 125.69810486]
[333.71002197 129.09960938]
[348.31924438 132.50111389]
[362.92849731 135.90260315]
[372.88085938 124.27468109]
[387.10131836 118.61454010]
[402.32208252 120.22284698]
[415.04556274 128.73001099]
[422.34796143 142.18116760]
[422.55126953 157.48532104]
[415.60873413 171.12570190]
[403.11575317 179.96784973]
[387.94305420 181.97990417]
[373.57727051 176.69949341]
[363.31951904 165.34004211]
[359.52697754 150.51184082]
[344.91775513 147.11033630]
[330.30850220 143.70884705]
[315.69927979 140.30734253]
[301.09002686 136.90583801]
[282.14068604 144.83691406]
[266.32965088 130.54507446]
[251.47071838 128.49272156]
[236.61178589 126.44036102]
[221.75285339 124.38800812]
[206.89392090 122.33565521]
[192.03498840 120.28330231]
[177.17605591 118.23094940]
[162.31712341 116.17860413]
[147.45819092 114.12625122]
[137.83058167 131.94804382]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[19 47]
[20 46]
[21 45]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[30 36]
[58 101]
[59 100]
[60 99]
[61 98]
[62 97]
[63 96]
[64 95]
[65 94]
[66 93]
[71 91]
[72 90]
[73 89]
[74 88]
[75 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
