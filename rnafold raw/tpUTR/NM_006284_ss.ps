%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 08:38:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCACCCAACCUAAAUGUACUUAUCUGUCCCCAUGUCCCCACACCAGCCUGUUUUCAUAAUAAACUUUAUUGUGACAGGCGGGGCUGAUCCCUCCCAUGUUGGGA\
) } def
/len { sequence length } bind def

/coor [
[56.22906113 447.77825928]
[40.48720169 446.37490845]
[30.41258049 434.19796753]
[31.98229027 418.47183228]
[44.26505280 408.52651978]
[45.59698868 393.58575439]
[46.92892838 378.64501953]
[48.26086807 363.70425415]
[49.59280396 348.76351929]
[50.92474365 333.82278442]
[49.06013489 331.52615356]
[48.07059860 328.29409790]
[48.34062958 324.48675537]
[50.10503387 320.60494995]
[53.40184402 317.22943115]
[56.49152374 302.55108643]
[59.58119965 287.87274170]
[46.78331375 278.42868042]
[39.32402420 264.31561279]
[38.72541428 248.30589294]
[45.15623093 233.56915283]
[57.38853836 223.04484558]
[73.03186035 218.85588074]
[75.68521118 204.09242249]
[78.33856964 189.32896423]
[72.97460938 175.43374634]
[83.03101349 163.21984863]
[85.68437195 148.45639038]
[88.33772278 133.69293213]
[90.99107361 118.92946625]
[93.64443207 104.16600800]
[83.67475891 106.51001740]
[72.88710022 104.89638519]
[62.48159409 99.17024994]
[51.11892700 89.37792206]
[39.75625992 79.58558655]
[23.55296326 77.05867767]
[17.89286995 61.66727066]
[28.59859657 49.24473190]
[44.65700912 52.57030106]
[49.54859161 68.22292328]
[60.91125870 78.01525116]
[72.27392578 87.80758667]
[79.72128296 86.92053223]
[85.63194275 73.13416290]
[94.61600494 85.14643860]
[102.06336212 84.25939178]
[110.80805206 72.07208252]
[119.55274200 59.88478470]
[128.29743958 47.69747925]
[137.04212952 35.51017761]
[137.56933594 29.98765182]
[140.00746155 25.72474480]
[143.51055908 23.25497246]
[147.14443970 22.67590523]
[156.93676758 11.31323719]
[166.72911072 -0.04943164]
[176.52143860 -11.41209984]
[186.31376648 -22.77476883]
[196.10609436 -34.13743591]
[205.89843750 -45.50010681]
[215.69076538 -56.86277390]
[225.48309326 -68.22544098]
[231.24305725 -84.17095184]
[248.15992737 -83.05023956]
[251.76606750 -66.48424530]
[236.84576416 -58.43311310]
[227.05343628 -47.07044220]
[217.26110840 -35.70777512]
[207.46876526 -24.34510612]
[197.67643738 -12.98243713]
[187.88410950 -1.61976850]
[178.09178162 9.74289989]
[168.29943848 21.10556793]
[158.50711060 32.46823883]
[149.22943115 44.25486755]
[140.48474121 56.44217300]
[131.74005127 68.62947845]
[122.99535370 80.81678009]
[114.25066376 93.00408173]
[108.40789032 106.81935883]
[105.75453186 121.58282471]
[103.10118103 136.34628296]
[100.44783020 151.10974121]
[97.79447174 165.87319946]
[102.96864319 180.82440186]
[93.10202789 191.98231506]
[90.44866943 206.74577332]
[87.79531860 221.50923157]
[99.61488342 229.41160583]
[107.48068237 241.20327759]
[110.21999359 255.06610107]
[107.44747925 268.87796021]
[99.61895752 280.53744507]
[87.95688629 288.28375244]
[74.25955200 290.96240234]
[71.16986847 305.64074707]
[68.08019257 320.31909180]
[65.86549377 335.15472412]
[64.53355408 350.09545898]
[63.20161438 365.03619385]
[61.86967468 379.97695923]
[60.53773880 394.91769409]
[59.20579910 409.85845947]
[69.53563690 421.81964111]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 104]
[6 103]
[7 102]
[8 101]
[9 100]
[10 99]
[15 98]
[16 97]
[17 96]
[23 89]
[24 88]
[25 87]
[27 85]
[28 84]
[29 83]
[30 82]
[31 81]
[34 43]
[35 42]
[36 41]
[47 80]
[48 79]
[49 78]
[50 77]
[51 76]
[55 75]
[56 74]
[57 73]
[58 72]
[59 71]
[60 70]
[61 69]
[62 68]
[63 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
