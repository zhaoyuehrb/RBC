%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 10:37:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCUAGAUAGUAAAAAAAAAAAAAAAAAGUCUACAUAUUUUGUAAAAGUAAACUGAUAAUUGUAUGAUAAGUGGCACUGUAAGUAAAUAGCAAACACCAA\
) } def
/len { sequence length } bind def

/coor [
[107.79864502 230.45884705]
[100.13138580 243.35121155]
[90.31413269 254.69235229]
[78.65356445 264.12799072]
[65.51394653 271.36334229]
[51.30574799 276.17242432]
[36.47282028 278.40493774]
[21.47852707 277.99121094]
[6.79127693 274.94412231]
[-7.13011408 269.35888672]
[-19.85075569 261.40997314]
[-30.97326660 251.34570312]
[-40.15019226 239.48045349]
[-47.09485245 226.18490601]
[-51.59030533 211.87438965]
[-53.49611282 196.99594116]
[-52.75274277 182.01437378]
[-49.38341522 167.39768982]
[-43.49338913 153.60249329]
[-35.26665497 141.05972290]
[-24.96021843 130.16122437]
[-12.89603424 121.24744415]
[0.54902071 114.59683990]
[14.95493603 110.41717529]
[29.87168503 108.83901978]
[44.83328247 109.91166687]
[59.37234497 113.60160828]
[73.03468323 119.79357910]
[85.39350128 128.29414368]
[96.06720734 138.84306335]
[94.68318176 123.90704346]
[93.29915619 108.97103119]
[91.68529510 94.05810547]
[89.84196472 79.17179108]
[87.99864197 64.28548431]
[86.15531921 49.39918137]
[83.85444641 34.57669830]
[81.09819794 19.83210182]
[78.34195709 5.08750439]
[75.58571625 -9.65709209]
[65.33037567 -17.66511536]
[63.41524124 -30.12719154]
[70.33648682 -40.18022919]
[68.03561401 -55.00271225]
[54.17057800 -61.96979904]
[47.07860565 -75.77137756]
[49.48670959 -91.10045624]
[60.46892166 -102.06269073]
[75.80236053 -104.44288635]
[89.59100342 -97.32579803]
[96.53283691 -83.44809723]
[93.95858002 -68.14604187]
[82.85810089 -57.30358505]
[85.15897369 -42.48110199]
[96.89226532 -29.53190041]
[90.33031464 -12.41333485]
[93.08655548 2.33126163]
[95.84279633 17.07585907]
[98.59903717 31.82045555]
[102.10753632 35.29185104]
[103.35913086 41.06182480]
[101.04162598 47.55585480]
[102.88494873 62.44216156]
[104.72827148 77.32846832]
[106.57160187 92.21477509]
[110.67171478 99.33067322]
[108.23516846 107.58700562]
[109.61919403 122.52301788]
[111.00321960 137.45903015]
[113.20451355 139.60891724]
[114.78551483 142.10995483]
[115.70511627 144.79789734]
[128.69549561 152.29789734]
[141.68588257 159.79789734]
[156.95225525 152.71144104]
[173.28544617 156.02462769]
[184.36209106 168.25503540]
[186.01254272 184.50712585]
[199.22772217 191.60353088]
[212.44291687 198.69993591]
[225.65809631 205.79634094]
[240.71646118 200.99830627]
[254.71850586 208.32759094]
[259.35705566 223.43585205]
[251.88015747 237.35961914]
[236.72370911 241.83818054]
[222.87976074 234.21447754]
[218.56169128 219.01152039]
[205.34651184 211.91511536]
[192.13133240 204.81871033]
[178.91613770 197.72232056]
[167.39070129 204.64846802]
[153.83840942 204.93327332]
[141.84106445 198.39328003]
[134.62324524 186.66313171]
[134.18588257 172.78826904]
[121.19549561 165.28826904]
[108.20511627 157.78826904]
[113.32546234 171.88728333]
[115.88364410 186.66752625]
[115.79975128 201.66729736]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[30 69]
[31 68]
[32 67]
[33 65]
[34 64]
[35 63]
[36 62]
[37 59]
[38 58]
[39 57]
[40 56]
[43 54]
[44 53]
[72 98]
[73 97]
[74 96]
[78 91]
[79 90]
[80 89]
[81 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
