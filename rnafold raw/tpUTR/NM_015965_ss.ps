%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 07:38:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCUGUGCCCUCCGGCCACCUGGAUCCCUGCCCCUCCCCACUGGGACGGAAUAAAUGCUCUGCAGACCUGGCCUGCC\
) } def
/len { sequence length } bind def

/coor [
[70.67613220 279.28054810]
[58.64179230 288.42745972]
[44.44542694 293.61926270]
[29.34937668 294.39428711]
[14.69596863 290.68362427]
[1.78817439 282.81719971]
[-8.22625351 271.49456787]
[-14.45683956 257.72244263]
[-16.34956360 242.72546387]
[-13.73612595 227.83717346]
[-6.84891272 214.38140869]
[3.69967151 203.55464172]
[16.97165298 196.31959534]
[31.78689575 193.31959534]
[46.82803726 194.82141113]
[52.63710403 180.99191284]
[58.44617462 167.16242981]
[64.25524139 153.33294678]
[70.06430817 139.50344849]
[68.87975311 135.90536499]
[69.56222534 131.52323914]
[72.47286987 127.33370972]
[77.47717285 124.44020081]
[84.89091492 111.40039825]
[81.30577087 102.96301270]
[82.10610962 93.83053589]
[87.10417175 86.14535522]
[95.12746429 81.71033478]
[104.29380035 81.56587982]
[113.20681763 69.50112915]
[122.11982727 57.43638229]
[131.03285217 45.37163162]
[136.84191895 31.54214478]
[139.21788025 16.73151588]
[133.76419067 1.87999249]
[143.41978455 -9.46102905]
[145.79574585 -24.27165985]
[148.17172241 -39.08229065]
[150.54768372 -53.89291763]
[144.19886780 -69.01325226]
[154.33316040 -81.90620422]
[170.52526855 -79.30860901]
[176.11814880 -63.89265442]
[165.35832214 -51.51694870]
[162.98234558 -36.70631790]
[160.60638428 -21.89568901]
[158.23040771 -7.08505869]
[163.85404968 6.70710897]
[154.02851868 19.10748672]
[151.65254211 33.91811752]
[163.73899841 25.03454971]
[178.43966675 22.05291367]
[193.03219604 25.52536201]
[204.81425476 34.80884933]
[211.60395813 48.18419647]
[212.14395142 63.17447281]
[206.33422852 77.00368500]
[195.25067139 87.11084747]
[180.94580078 91.62425995]
[166.06869507 89.70809174]
[153.37438965 81.71719360]
[145.21368408 69.13137054]
[143.09759521 54.28464890]
[134.18458557 66.34939575]
[125.27156067 78.41414642]
[116.35855103 90.47889709]
[115.86717224 110.31922150]
[97.93071747 118.81413269]
[90.51697540 131.85394287]
[83.89379883 145.31251526]
[78.08473206 159.14201355]
[72.27565765 172.97149658]
[66.46659088 186.80097961]
[60.65752411 200.63047791]
[72.25939941 210.32005310]
[80.48838806 222.99975586]
[84.61277771 237.54214478]
[84.26582336 252.65409851]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 74]
[16 73]
[17 72]
[18 71]
[19 70]
[23 69]
[24 68]
[29 66]
[30 65]
[31 64]
[32 63]
[33 50]
[34 49]
[36 47]
[37 46]
[38 45]
[39 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
