%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 18:22:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAGUUUUUGACUCUAAUACUGUAUAUGCAUUUAAGUGGAAUAUUUGGUGCCAUUUACAACAUUAUUUUCAUGCCAAUAAAAGAUUUUUUUUGCAA\
) } def
/len { sequence length } bind def

/coor [
[118.42015839 204.61083984]
[104.06398010 208.95825195]
[89.29621124 206.32894897]
[77.32271576 197.29371643]
[70.74274445 183.81396484]
[70.98469543 168.81591797]
[77.99604797 155.55540466]
[90.25475311 146.91108704]
[105.09963989 144.75950623]
[119.30852509 149.56799316]
[111.94776154 136.49819946]
[104.58699799 123.42842102]
[89.99869537 121.67730713]
[79.19879913 111.71501923]
[76.27820587 97.31518555]
[82.34321594 83.93233490]
[74.98245239 70.86255646]
[67.62168884 57.79277802]
[60.26092911 44.72299576]
[45.30508041 40.36864471]
[38.02640533 27.00917244]
[42.26978302 12.77789211]
[34.90901947 -0.29188862]
[27.54825401 -13.36166954]
[20.18749237 -26.43144989]
[6.67385006 -34.65896988]
[7.17000914 -49.54530716]
[-0.19075432 -62.61508942]
[-7.55151749 -75.68486786]
[-15.12081623 -88.63499451]
[-22.89670372 -101.46213531]
[-30.67259216 -114.28927612]
[-38.44848251 -127.11641693]
[-45.71083832 -132.96881104]
[-46.26041794 -140.48167419]
[-53.62118149 -153.55145264]
[-60.98194504 -166.62123108]
[-68.34270477 -179.69100952]
[-75.70346832 -192.76078796]
[-88.74430084 -203.59468079]
[-81.94387054 -219.12498474]
[-65.13793945 -216.88952637]
[-62.63368988 -200.12155151]
[-55.27292633 -187.05177307]
[-47.91216660 -173.98199463]
[-40.55140305 -160.91221619]
[-33.19063950 -147.84243774]
[-25.62133980 -134.89230347]
[-17.84545135 -122.06516266]
[-10.06956291 -109.23802185]
[-2.29367447 -96.41088104]
[3.98273134 -92.24533081]
[5.51826286 -83.04563141]
[12.87902641 -69.97585297]
[20.23978996 -56.90607071]
[33.22694016 -49.61339188]
[33.25727081 -33.79221344]
[40.61803436 -20.72243309]
[47.97879791 -7.65265179]
[55.33956146 5.41712856]
[69.70907593 9.16582584]
[77.36011505 22.31558609]
[73.33071136 37.36223221]
[80.69147491 50.43201447]
[88.05223846 63.50179291]
[95.41300201 76.57157898]
[110.00130463 78.32269287]
[120.80120087 88.28498077]
[123.72179413 102.68481445]
[117.65678406 116.06766510]
[125.01754761 129.13743591]
[132.37831116 142.20722961]
[141.91741943 153.78329468]
[153.33911133 163.50671387]
[164.76080322 173.23014832]
[180.28442383 176.28427124]
[184.96000671 190.42597961]
[196.38169861 200.14941406]
[211.90531921 203.20353699]
[216.58091736 217.34526062]
[228.00260925 227.06867981]
[239.42430115 236.79209900]
[255.64257812 239.22096252]
[261.39566040 254.57786560]
[250.76527405 267.06491089]
[234.68704224 263.83654785]
[229.70086670 248.21379089]
[218.27917480 238.49037170]
[206.85749817 228.76693726]
[192.15081787 226.40829468]
[186.65827942 211.57110596]
[175.23658752 201.84767151]
[160.52992249 199.48902893]
[155.03736877 184.65182495]
[143.61567688 174.92840576]
[132.19400024 165.20498657]
[134.19769287 180.07055664]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 72]
[11 71]
[12 70]
[16 66]
[17 65]
[18 64]
[19 63]
[22 60]
[23 59]
[24 58]
[25 57]
[27 55]
[28 54]
[29 53]
[30 51]
[31 50]
[32 49]
[33 48]
[35 47]
[36 46]
[37 45]
[38 44]
[39 43]
[73 96]
[74 95]
[75 94]
[77 92]
[78 91]
[80 89]
[81 88]
[82 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
