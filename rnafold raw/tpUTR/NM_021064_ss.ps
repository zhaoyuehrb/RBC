%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 13:54:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUCUGUACUAGUUUGUGGCAGCUCAAGUAAAAUCGAGUCCAAACCAACGGCUCUUUUCAGGGCCACCCA\
) } def
/len { sequence length } bind def

/coor [
[87.54882812 150.31282043]
[78.63798523 147.22367859]
[70.43443298 142.57098389]
[63.20977783 136.50877380]
[57.20323181 129.23777771]
[52.61367035 120.99874115]
[49.59304810 112.06443787]
[48.24138260 102.73068237]
[48.60341644 93.30651855]
[50.66717529 84.10398102]
[54.36431885 75.42774200]
[59.57244110 67.56508636]
[66.11910248 60.77633286]
[58.05960846 48.12546158]
[50.00011444 35.47459030]
[41.94062042 22.82371902]
[33.88112640 10.17284775]
[26.39521790 4.39318562]
[25.76001549 -3.21032476]
[18.26001549 -16.20070648]
[10.76001644 -29.19108772]
[-4.09699631 -26.26740837]
[-19.09799194 -28.32867622]
[-32.61577606 -35.15130234]
[-43.18404007 -45.99522018]
[-49.65641785 -59.68415833]
[-51.33083344 -74.73324585]
[-48.02566147 -89.51007080]
[-40.09941864 -102.41175079]
[-28.41188622 -112.03881073]
[-14.23084068 -117.34698486]
[0.90546459 -117.76046753]
[15.35515690 -113.23442078]
[27.55084038 -104.25978851]
[36.16962051 -91.81007385]
[40.27659607 -77.23573303]
[39.42626953 -62.11767578]
[33.71088409 -48.09579849]
[23.75039673 -36.69108582]
[31.25039673 -23.70070648]
[38.75039673 -10.71032524]
[46.53199768 2.11335325]
[54.59149170 14.76422501]
[62.65098572 27.41509628]
[70.71047974 40.06596756]
[78.76997375 52.71683884]
[101.34954834 48.18696976]
[123.66269684 53.88613892]
[141.30430603 68.68920898]
[150.79151917 89.67371368]
[150.25137329 112.69686127]
[164.10957336 118.43711090]
[177.96775818 124.17736053]
[191.82595825 129.91761780]
[205.68414307 135.65786743]
[219.54234314 141.39811707]
[235.72171021 138.72230530]
[245.91818237 151.56613159]
[239.64250183 166.71697998]
[223.35055542 168.58894348]
[213.80209351 155.25631714]
[199.94389343 149.51605225]
[186.08570862 143.77580261]
[172.22750854 138.03555298]
[158.36932373 132.29530334]
[144.51112366 126.55505371]
[138.96232605 134.18110657]
[132.12350464 140.67544556]
[124.22108459 145.82302856]
[115.51670837 149.45344543]
[106.29859161 151.44647217]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 46]
[14 45]
[15 44]
[16 43]
[17 42]
[19 41]
[20 40]
[21 39]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
