%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 22:39:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCUUCUGCCCCCCAGACCAUAGCCCCUUUUAGUUGGUUUUAGUUGCUCUGGGGGGAGGAGAGAAGGUAGAGCUGUUCUUAAAUUUAUUAAAAAAAAAAAUAAAAGGGAAUCUCAGUGUCUGUUCCAGGCUCUGCGCAGGA\
) } def
/len { sequence length } bind def

/coor [
[80.21101379 137.75167847]
[71.06352234 131.29653931]
[63.91244125 122.68216705]
[59.25113297 112.50289154]
[44.36050034 114.31094360]
[29.46986580 116.11899567]
[14.57923317 117.92704773]
[-0.31139997 119.73509216]
[-8.52762127 123.90471649]
[-15.54854012 121.41559601]
[-30.47529793 122.89610291]
[-45.40205765 124.37660980]
[-60.32881546 125.85710907]
[-75.25556946 127.33761597]
[-90.18232727 128.81811523]
[-105.10908508 130.29862976]
[-120.03584290 131.77912903]
[-134.96260071 133.25964355]
[-147.93171692 142.32124329]
[-161.36051941 135.87789917]
[-176.28727722 137.35841370]
[-181.82751465 153.54154968]
[-193.81784058 165.66346741]
[-209.83581543 171.34324646]
[-226.67478943 169.49461365]
[-240.98574829 160.53340149]
[-249.94348145 146.28518677]
[-264.79080200 148.41992188]
[-271.91271973 162.20605469]
[-285.79287720 169.14300537]
[-301.09402466 166.56336975]
[-311.93258667 155.45907593]
[-314.14086914 140.09994507]
[-306.86981201 126.39187622]
[-292.91522217 119.60590363]
[-277.64297485 122.35137177]
[-266.92550659 133.57260132]
[-252.07820129 131.43786621]
[-249.16098022 118.69534302]
[-242.04965210 107.68850708]
[-231.58106995 99.75302124]
[-219.00105286 95.86074066]
[-205.81611633 96.50070953]
[-193.61305237 101.61783600]
[-183.86798096 110.61688995]
[-177.76777649 122.43165588]
[-162.84101868 120.95114899]
[-150.93957520 111.99543762]
[-136.44311523 118.33287811]
[-121.51634979 116.85237122]
[-106.58959198 115.37187195]
[-91.66283417 113.89136505]
[-76.73607635 112.41085815]
[-61.80931854 110.93035126]
[-46.88256073 109.44985199]
[-31.95580292 107.96934509]
[-17.02904510 106.48883820]
[-2.11945009 104.84445953]
[12.77118301 103.03640747]
[27.66181564 101.22836304]
[42.55244827 99.42031097]
[57.44308090 97.61225891]
[62.64278793 79.47608185]
[75.16176605 65.36107635]
[92.54721832 58.03276825]
[111.39286804 58.92695236]
[128.00634766 67.86844635]
[139.13264465 83.10536194]
[153.73532104 79.67581940]
[168.33799744 76.24627686]
[182.94068909 72.81674194]
[197.54336548 69.38719940]
[212.14604187 65.95765686]
[226.74871826 62.52811813]
[241.35139465 59.09857559]
[255.12947083 53.16859055]
[267.65844727 44.92085648]
[280.18740845 36.67312622]
[292.71636963 28.42539215]
[305.24533081 20.17765999]
[317.77429199 11.92992687]
[319.37213135 1.07252145]
[326.56719971 -6.91966105]
[336.77044678 -9.53544998]
[346.50668335 -6.13579416]
[359.38583374 -13.82524109]
[372.26498413 -21.51468849]
[385.14413452 -29.20413589]
[398.02325439 -36.89358521]
[410.90240479 -44.58303070]
[411.30792236 -60.00506592]
[420.00573730 -72.74679565]
[434.22039795 -78.74239349]
[449.41604614 -76.07866669]
[460.74383545 -65.60562134]
[464.58908081 -50.66515350]
[459.72482300 -36.02471924]
[447.70318604 -26.35602570]
[432.36022949 -24.74431801]
[418.59185791 -31.70388603]
[405.71270752 -24.01443863]
[392.83355713 -16.32499123]
[379.95440674 -8.63554287]
[367.07528687 -0.94609559]
[354.19613647 6.74335194]
[346.12847900 24.26625252]
[326.02200317 24.45888901]
[313.49304199 32.70662308]
[300.96408081 40.95435333]
[288.43511963 49.20208740]
[275.90615845 57.44982147]
[263.37719727 65.69755554]
[278.37713623 65.64777374]
[292.52346802 70.63581085]
[304.17477417 80.08287048]
[311.97906494 92.89276123]
[315.03073120 107.57905579]
[312.97570801 122.43761444]
[306.05242920 135.74430847]
[295.06423950 145.95506287]
[281.28616333 151.88508606]
[266.31698608 152.84625244]
[251.89367676 148.72705078]
[239.68984985 140.00543213]
[231.12158203 127.69345856]
[227.18312073 113.21973419]
[228.33148193 98.26375580]
[234.43338013 84.56095886]
[244.78094482 73.70125580]
[230.17826843 77.13079834]
[215.57557678 80.56034088]
[200.97290039 83.98987579]
[186.37022400 87.41941833]
[171.76754761 90.84896088]
[157.16485596 94.27850342]
[142.56217957 97.70803833]
[141.69075012 108.86985016]
[137.94294739 119.41970062]
[131.57737732 128.62974548]
[123.03318787 135.86453247]
[112.89987946 140.62493896]
[101.87657928 142.58251953]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 62]
[5 61]
[6 60]
[7 59]
[8 58]
[10 57]
[11 56]
[12 55]
[13 54]
[14 53]
[15 52]
[16 51]
[17 50]
[18 49]
[20 47]
[21 46]
[27 38]
[28 37]
[68 136]
[69 135]
[70 134]
[71 133]
[72 132]
[73 131]
[74 130]
[75 129]
[76 112]
[77 111]
[78 110]
[79 109]
[80 108]
[81 107]
[85 105]
[86 104]
[87 103]
[88 102]
[89 101]
[90 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
