%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 12:22:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUUUUCAAUUUACUGCUUAAUUGGGUAUUUCUUGCUCUCAUUCUAAACAUCAAUCAGAAUUUAUGAUGACUGGCCCCGUGAAUGUACAACUUUGGCAACAUCUGUAAAUUCAAUACCCAAUGCUUAUAAAUAUGUCUUAAUGACC\
) } def
/len { sequence length } bind def

/coor [
[101.59848785 432.82543945]
[96.54203033 428.43881226]
[92.55522919 423.04220581]
[89.83559418 416.89169312]
[88.52030945 410.28082275]
[88.67936707 403.52679443]
[90.31184387 396.95516968]
[93.34564972 390.88415527]
[97.64063263 385.60931396]
[102.99511719 381.38897705]
[109.15529633 378.43182373]
[107.89172363 363.48513794]
[106.62815094 348.53845215]
[105.36457825 333.59176636]
[104.10101318 318.64508057]
[90.80960846 308.39077759]
[88.97839355 291.36486816]
[100.21872711 278.00292969]
[98.64031219 263.08621216]
[96.07701874 260.57269287]
[94.63784790 256.66583252]
[94.97639465 251.92391968]
[97.46443939 247.18098450]
[96.83209229 232.19432068]
[96.19974518 217.20765686]
[95.56739807 202.22099304]
[94.93505096 187.23431396]
[94.30269623 172.24765015]
[93.67034912 157.26098633]
[93.03800201 142.27432251]
[92.40565491 127.28765869]
[91.77330780 112.30099487]
[84.38368988 125.35448456]
[74.40705872 136.55567932]
[62.29228973 145.40058899]
[48.58448792 151.49124146]
[33.90041733 154.55360413]
[18.90077400 154.44989014]
[4.26045752 151.18475342]
[-9.36180782 144.90512085]
[-21.35309982 135.89350891]
[-31.17388153 124.55542755]
[-38.38227463 111.40099335]
[-42.65394592 97.02209473]
[-43.79669571 82.06568909]
[-41.75910568 67.20471954]
[-36.63285446 53.10786057]
[-28.64859200 40.40937042]
[-18.16556931 29.68061638]
[-5.65545368 21.40432358]
[8.31887054 15.95287704]
[23.12864304 13.57156086]
[38.10750961 14.36751938]
[52.58151245 18.30493927]
[65.89939880 25.20666122]
[77.46195984 34.76214600]
[86.74893188 46.54145432]
[93.34246063 60.01459122]
[96.94588470 74.57534027]
[97.39757538 89.56182861]
[104.94317627 76.59788513]
[112.48877716 63.63394165]
[120.03437805 50.66999435]
[127.57998657 37.70605087]
[135.12557983 24.74210548]
[142.67118835 11.77816010]
[150.21679688 -1.18578494]
[157.62530518 -14.22855568]
[164.89591980 -27.34870338]
[172.16651917 -40.46884918]
[179.43713379 -53.58899689]
[173.96760559 -64.23531342]
[174.34477234 -76.07812500]
[180.35734558 -86.14822388]
[190.39581299 -91.97745514]
[201.88150024 -92.20334625]
[209.69874573 -105.00532532]
[217.51597595 -117.80730438]
[213.08448792 -134.69659424]
[222.03384399 -149.29606628]
[238.43693542 -152.86680603]
[245.98254395 -165.83074951]
[238.87013245 -179.52078247]
[240.31094360 -194.88072205]
[249.84521484 -207.00924683]
[264.43060303 -212.03620911]
[279.41293335 -208.35749817]
[290.01144409 -197.14698792]
[292.84414673 -181.98193359]
[287.00717163 -167.70141602]
[274.36303711 -158.86230469]
[258.94647217 -158.28514099]
[251.40087891 -145.32119751]
[256.40933228 -133.40658569]
[253.57807922 -120.59622955]
[243.72637939 -111.63966370]
[230.31796265 -109.99005890]
[222.50071716 -97.18807983]
[214.68347168 -84.38610077]
[220.07769775 -66.94425201]
[210.91290283 -50.78820801]
[192.55728149 -46.31838989]
[185.28666687 -33.19824219]
[178.01606750 -20.07809639]
[170.74545288 -6.95794868]
[170.25100708 0.46738201]
[163.18074036 6.35981798]
[155.63513184 19.32376289]
[148.08953857 32.28770828]
[140.54393005 45.25165558]
[132.99832153 58.21559906]
[125.45272064 71.17954254]
[117.90711975 84.14348602]
[110.36151886 97.10743713]
[106.75997162 111.66864777]
[107.39231873 126.65531158]
[108.02466583 141.64198303]
[108.65702057 156.62864685]
[109.28936768 171.61531067]
[109.92171478 186.60197449]
[110.55406189 201.58863831]
[111.18640900 216.57530212]
[111.81875610 231.56196594]
[112.45110321 246.54862976]
[113.55703735 261.50781250]
[115.13545227 276.42453003]
[126.54407501 283.65988159]
[131.60830688 295.97366333]
[128.67794800 308.76171875]
[119.04769135 317.38150024]
[120.31126404 332.32818604]
[121.57483673 347.27487183]
[122.83840942 362.22155762]
[124.10198212 377.16824341]
[144.65431213 390.52557373]
[149.04626465 414.39523315]
[134.87882996 433.80355835]
[139.24255371 448.15478516]
[143.60627747 462.50601196]
[157.02603149 471.29748535]
[158.37615967 487.28363037]
[146.62094116 498.20123291]
[130.77799988 495.67529297]
[123.00065613 481.64343262]
[129.25505066 466.86975098]
[124.89131927 452.51852417]
[120.52758789 438.16726685]
[113.88987732 437.80337524]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 134]
[12 133]
[13 132]
[14 131]
[15 130]
[18 126]
[19 125]
[23 124]
[24 123]
[25 122]
[26 121]
[27 120]
[28 119]
[29 118]
[30 117]
[31 116]
[32 115]
[60 114]
[61 113]
[62 112]
[63 111]
[64 110]
[65 109]
[66 108]
[67 107]
[68 105]
[69 104]
[70 103]
[71 102]
[76 99]
[77 98]
[78 97]
[81 93]
[82 92]
[137 147]
[138 146]
[139 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
