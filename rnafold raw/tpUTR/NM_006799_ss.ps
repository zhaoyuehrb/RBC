%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 15:38:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUACCUGAGCCCAUGCAGCCUGGGGCCACUGCCAAGUCAGGCCCUGGUUCUCUUCUGUCUUGUUUGGUAAUAAACACAUUCCAGUUGAUGCCUUGCAGGGCAUUCUUCAAAAGCA\
) } def
/len { sequence length } bind def

/coor [
[84.45352936 345.80691528]
[73.00689697 336.00531006]
[64.12969971 323.82778931]
[58.30068207 309.93106079]
[55.83418655 295.06454468]
[56.86323166 280.02999878]
[61.33232498 265.63818359]
[69.00045013 252.66526794]
[79.45407104 241.81083679]
[92.12944031 233.66027832]
[106.34300232 228.65313721]
[104.74859619 213.73811340]
[103.15419769 198.82308960]
[101.55979156 183.90806580]
[97.67028046 177.50984192]
[100.12691498 168.57553101]
[98.93012238 153.62335205]
[97.73332977 138.67117310]
[96.53653717 123.71899414]
[95.33974457 108.76681519]
[92.35062408 108.81075287]
[89.16218567 107.89322662]
[86.06703949 105.94179535]
[83.37651062 102.96894073]
[69.13555145 98.25778961]
[54.89458466 93.54663849]
[40.65362167 88.83548737]
[26.41265678 84.12433624]
[12.17169285 79.41318512]
[-2.18963790 75.08280182]
[-16.66115570 71.13626862]
[-31.13267326 67.18972778]
[-46.84535599 71.88480377]
[-58.58033752 60.42957687]
[-54.26568222 44.60820770]
[-38.33993149 40.69636154]
[-27.18613625 52.71821213]
[-12.71461773 56.66474915]
[1.75690067 60.61128616]
[6.37456608 58.99216843]
[12.06038761 60.34962082]
[16.88284302 65.17221832]
[31.12380791 69.88336945]
[45.36477280 74.59452057]
[59.60573578 79.30567169]
[73.84670258 84.01682281]
[88.08766174 88.72797394]
[102.39007568 84.20681000]
[111.33558655 72.16613770]
[120.28109741 60.12545776]
[119.18484497 47.18998337]
[126.98937988 37.32449722]
[139.03373718 35.53380966]
[148.29660034 23.73553467]
[146.60246277 8.25110340]
[156.16439819 -3.58207083]
[170.93687439 -5.10175753]
[180.19973755 -16.90003014]
[189.46261597 -28.69830513]
[183.96316528 -45.86327744]
[189.72386169 -62.77807236]
[204.30073547 -72.84162140]
[221.84825134 -72.24353027]
[230.47006226 -84.51807404]
[239.09187317 -96.79261017]
[247.71368408 -109.06715393]
[256.33551025 -121.34169769]
[264.95730591 -133.61624146]
[265.87100220 -149.98991394]
[280.62789917 -157.14295959]
[294.04736328 -147.71693420]
[292.32461548 -131.40852356]
[277.23184204 -124.99443054]
[268.61004639 -112.71988678]
[259.98822021 -100.44534302]
[251.36642456 -88.17079926]
[242.74461365 -75.89626312]
[234.12280273 -63.62171936]
[239.76652527 -52.71165085]
[240.18778992 -40.36279297]
[235.24287415 -28.96013260]
[225.83047485 -20.73266792]
[213.72903442 -17.31773376]
[201.26087952 -19.43543434]
[191.99801636 -7.63716173]
[182.73515320 4.16111135]
[184.76478577 18.87220192]
[175.53898621 30.96928215]
[160.09487915 32.99840546]
[150.83201599 44.79667664]
[149.35308838 62.22813034]
[132.32177734 69.07096863]
[123.37626648 81.11164093]
[114.43075562 93.15232086]
[110.29193115 107.57002258]
[111.48871613 122.52220154]
[112.68550873 137.47438049]
[113.88230133 152.42655945]
[115.07909393 167.37873840]
[116.47481537 182.31365967]
[118.06921387 197.22868347]
[119.66362000 212.14370728]
[121.25801849 227.05873108]
[136.20881653 228.94824219]
[150.32066345 234.23527527]
[162.83250427 242.63470459]
[173.06961060 253.69357300]
[180.47988892 266.81549072]
[184.66372681 281.29278564]
[185.39547729 296.34472656]
[182.63571167 311.15960693]
[176.53321838 324.93844604]
[167.41712952 336.93817139]
[155.77905273 346.51168823]
[142.24662781 353.14263916]
[127.54961395 356.47351074]
[112.48062134 356.32461548]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 103]
[12 102]
[13 101]
[14 100]
[16 99]
[17 98]
[18 97]
[19 96]
[20 95]
[24 47]
[25 46]
[26 45]
[27 44]
[28 43]
[29 42]
[30 39]
[31 38]
[32 37]
[48 94]
[49 93]
[50 92]
[53 90]
[54 89]
[57 86]
[58 85]
[59 84]
[63 78]
[64 77]
[65 76]
[66 75]
[67 74]
[68 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
