%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 14:56:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGGGAAAGCUGGGCACAAAAAUCUUCAUGAGCAAUAUUUCUUUCUUAAUAGAAUGUUUUAUUAUUCAAGUCAAGUUCUAGAGUGUUUACAUACUAUUAUAUAAUGUACAGUGUUAUUUUCUGUACUUCUGAAUAAAUGUGCAAUAUUGGAAAUAA\
) } def
/len { sequence length } bind def

/coor [
[75.85132599 478.31838989]
[61.48907089 473.81164551]
[48.32818222 466.50576782]
[36.90758514 456.69992065]
[27.69494438 444.79562378]
[21.06751633 431.28036499]
[17.29668808 416.70758057]
[16.53687096 401.67404175]
[18.81917953 386.79534912]
[24.05015755 372.68075562]
[32.01559830 359.90823364]
[42.38931656 349.00088501]
[54.74652481 340.40527344]
[68.58119965 334.47341919]
[83.32681274 331.44824219]
[83.32681274 316.44824219]
[83.32681274 301.44824219]
[83.32681274 286.44824219]
[83.32681274 271.44824219]
[71.71783447 266.31469727]
[62.89385223 257.12496948]
[58.20133209 245.23001099]
[58.37575150 232.39726257]
[63.42655945 220.54803467]
[72.63045502 211.46992493]
[84.63475037 206.54707336]
[85.23110199 191.55892944]
[85.82744598 176.57078552]
[86.42379761 161.58264160]
[83.53154755 154.73667908]
[87.18393707 146.30329895]
[88.07816315 131.32997131]
[88.97238922 116.35665131]
[83.00704193 130.11944580]
[72.58390808 140.90640259]
[59.03379059 147.34024048]
[44.08674622 148.59953308]
[29.65117264 144.52348328]
[17.57017517 135.63250732]
[9.38622761 123.06178284]
[6.14423752 108.41632080]
[8.25813580 93.56601715]
[15.45802402 80.40692902]
[26.82463646 70.61917877]
[40.90671158 65.45243835]
[55.90627670 65.56639099]
[69.90822601 70.94648743]
[81.12590027 80.90718079]
[78.16298676 66.20272064]
[75.20007324 51.49825668]
[72.23716736 36.79379654]
[69.27425385 22.08933640]
[66.31134033 7.38487530]
[56.00057602 -4.61506844]
[61.07144547 -18.61990929]
[58.10853577 -33.32436752]
[55.14562607 -48.02882767]
[52.18271255 -62.73329163]
[40.17270279 -66.41944885]
[30.93791199 -74.82975006]
[26.20311165 -86.30987549]
[26.81683540 -98.64041901]
[32.59999466 -109.46594238]
[42.39192963 -116.74489594]
[40.01596069 -131.55552673]
[37.63998795 -146.36614990]
[35.26401901 -161.17678833]
[32.88805008 -175.98741150]
[23.06250954 -188.38778687]
[28.68615341 -202.17996216]
[26.31018257 -216.99058533]
[12.79819107 -224.86206055]
[7.55576468 -239.59471130]
[13.05821800 -254.23223877]
[26.70746040 -261.86325073]
[42.05873871 -258.88458252]
[51.86364365 -246.70272827]
[51.49260712 -231.06954956]
[41.12081528 -219.36656189]
[43.49678421 -204.55593872]
[53.15237808 -193.21490479]
[47.69867706 -178.36338806]
[50.07464981 -163.55274963]
[52.45061874 -148.74212646]
[54.82659149 -133.93150330]
[57.20256042 -119.12086487]
[73.27935791 -111.91761017]
[81.92601776 -96.38939667]
[79.54110718 -78.61887360]
[66.88717651 -65.69619751]
[69.85008240 -50.99174118]
[72.81299591 -36.28728104]
[75.77590942 -21.58281898]
[85.87474823 -10.63463688]
[81.01580048 4.42196417]
[83.97871399 19.12642479]
[86.94162750 33.83088684]
[89.90453339 48.53534698]
[92.86744690 63.23980713]
[95.83036041 77.94426727]
[96.16008759 62.94789124]
[106.46077728 52.04395294]
[121.41414642 50.86217880]
[133.29975891 60.01272202]
[135.98101807 74.77113342]
[128.07360840 87.51762390]
[113.65808868 91.67095947]
[128.63140869 90.77673340]
[143.60473633 89.88250732]
[158.57804871 88.98827362]
[173.55137634 88.09404755]
[188.52470398 87.19982147]
[195.98698425 73.69731140]
[209.57551575 66.39281464]
[224.95420837 67.61717224]
[237.21580505 76.97969818]
[242.44766235 91.49283600]
[238.98031616 106.52549744]
[227.92019653 117.28082275]
[212.79652405 120.32682800]
[198.43521118 114.69152832]
[189.41893005 102.17314148]
[174.44560242 103.06737518]
[159.47227478 103.96160126]
[144.49896240 104.85582733]
[129.52563477 105.75005341]
[114.55231476 106.64427948]
[103.94571686 117.25087738]
[103.05149078 132.22419739]
[102.15725708 147.19752502]
[101.41193390 162.17900085]
[100.81558990 177.16712952]
[100.21923828 192.15527344]
[99.62289429 207.14341736]
[114.66686249 216.13662720]
[123.07048035 231.41661072]
[122.61335754 248.76033020]
[113.51003265 263.42572021]
[98.32681274 271.44824219]
[98.32681274 286.44824219]
[98.32681274 301.44824219]
[98.32681274 316.44824219]
[98.32681274 331.44824219]
[113.07242584 334.47341919]
[126.90709686 340.40527344]
[139.26431274 349.00088501]
[149.63803101 359.90823364]
[157.60346985 372.68075562]
[162.83444214 386.79534912]
[165.11676025 401.67404175]
[164.35693359 416.70758057]
[160.58610535 431.28036499]
[153.95867920 444.79562378]
[144.74603271 456.69992065]
[133.32543945 466.50576782]
[120.16455078 473.81164551]
[105.80229950 478.31838989]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 143]
[16 142]
[17 141]
[18 140]
[19 139]
[26 134]
[27 133]
[28 132]
[29 131]
[31 130]
[32 129]
[33 128]
[48 100]
[49 99]
[50 98]
[51 97]
[52 96]
[53 95]
[55 93]
[56 92]
[57 91]
[58 90]
[64 86]
[65 85]
[66 84]
[67 83]
[68 82]
[70 80]
[71 79]
[107 127]
[108 126]
[109 125]
[110 124]
[111 123]
[112 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
