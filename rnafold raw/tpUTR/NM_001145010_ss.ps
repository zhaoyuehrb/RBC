%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 15:32:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUACAGAAGUUACUGUCACCCUACUGACUUUCUCACCAGUAAACAUUGUGGCUGUUCCUGUA\
) } def
/len { sequence length } bind def

/coor [
[77.20596313 261.14450073]
[60.97890091 258.77502441]
[55.16965485 243.43928528]
[65.75428009 230.91340637]
[67.92161560 216.07080078]
[70.08895111 201.22821045]
[72.25628662 186.38562012]
[74.42362213 171.54301453]
[65.83766937 164.84428406]
[60.94948578 155.02047729]
[60.78164673 143.96618652]
[65.43854523 133.84808350]
[74.07190704 126.68016815]
[85.03443146 123.92304993]
[89.32361603 109.54936218]
[86.27413940 95.90412903]
[96.30269623 86.16145325]
[100.59188080 71.78776550]
[104.88106537 57.41408157]
[109.17024994 43.04039383]
[113.45943451 28.66670609]
[102.02523041 11.49817085]
[106.13782501 -8.43634510]
[122.97488403 -19.37983131]
[124.42259216 -34.30980682]
[125.87030029 -49.23978043]
[127.31800842 -64.16975403]
[128.76571655 -79.09973145]
[116.22132874 -87.96166229]
[109.80311584 -101.91522980]
[111.23753357 -117.20699310]
[120.13874054 -129.72354126]
[134.11236572 -136.09799194]
[149.39955139 -134.61564636]
[161.88813782 -125.67524719]
[168.21875000 -111.68171692]
[166.68850708 -96.39924622]
[157.70899963 -83.93874359]
[143.69569397 -77.65202332]
[142.24798584 -62.72204590]
[140.80027771 -47.79207230]
[139.35256958 -32.86209869]
[137.90486145 -17.93212318]
[146.44888306 -12.41941547]
[152.25393677 -3.99882841]
[154.39178467 6.06377888]
[152.48974609 16.23419571]
[146.79463196 24.94377136]
[138.14186096 30.83134079]
[127.83312225 32.95589066]
[123.54393768 47.32957840]
[119.25475311 61.70326614]
[114.96556854 76.07695007]
[110.67638397 90.45063782]
[113.72586060 104.09587097]
[103.69730377 113.83854675]
[99.40811920 128.21223450]
[110.02175903 144.83685303]
[105.62509155 163.76678467]
[89.26622009 173.71035767]
[87.09888458 188.55294800]
[84.93154907 203.39553833]
[82.76421356 218.23814392]
[80.59687805 233.08073425]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 64]
[5 63]
[6 62]
[7 61]
[8 60]
[14 57]
[15 56]
[17 54]
[18 53]
[19 52]
[20 51]
[21 50]
[24 43]
[25 42]
[26 41]
[27 40]
[28 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
