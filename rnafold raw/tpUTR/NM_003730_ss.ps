%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 06:29:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCCAAGUUUUGGAAAUAUUCUGUUUUAAAAAGCAAGAGAAAUUCACAAACUGCAGCUUUCUAAAAAACAA\
) } def
/len { sequence length } bind def

/coor [
[158.12857056 233.81381226]
[167.46913147 221.87522888]
[159.50817871 209.16210938]
[144.66113281 208.32353210]
[133.01707458 198.79043579]
[129.17425537 184.05657959]
[134.80917358 169.71943665]
[126.84822083 157.00631714]
[118.88726807 144.29321289]
[110.92632294 131.58009338]
[102.96537018 118.86697388]
[88.86798859 115.51884460]
[81.17796326 103.23838043]
[84.32151794 89.09397125]
[76.36056519 76.38085938]
[68.39961243 63.66774368]
[53.04097748 62.47675323]
[41.46392822 52.58608627]
[37.97204590 37.94809341]
[43.70061111 24.22506523]
[35.73966217 11.51195240]
[27.77871132 -1.20116186]
[19.81776047 -13.91427612]
[11.58511639 -26.45315742]
[3.08458996 -38.81200409]
[-5.41593647 -51.17084885]
[-13.91646290 -63.52969360]
[-28.94532967 -70.09210205]
[-30.50741768 -86.41667938]
[-16.99578285 -95.71010590]
[-2.31003737 -88.41209412]
[-1.55761755 -72.03022003]
[6.94290876 -59.67137527]
[15.44343472 -47.31253052]
[23.94396210 -34.95368576]
[30.53027725 -31.11174583]
[32.53087616 -21.87522697]
[40.49182510 -9.16211224]
[48.45277786 3.55100131]
[56.41372681 16.26411438]
[71.26077271 17.10269928]
[82.90483093 26.63579750]
[86.74764252 41.36964417]
[81.11273193 55.70679474]
[89.07367706 68.41990662]
[97.03462982 81.13302612]
[111.13201141 84.48115540]
[118.82203674 96.76161957]
[115.67848206 110.90602875]
[123.63943481 123.61914062]
[131.60038757 136.33226013]
[139.56134033 149.04536438]
[147.52229309 161.75848389]
[162.88092041 162.94947815]
[174.45797729 172.84014893]
[177.94985962 187.47813416]
[172.22128296 201.20115662]
[180.18223572 213.91427612]
[195.00112915 210.72421265]
[210.01695251 212.79797363]
[223.41651917 219.88513184]
[233.58172607 231.12988281]
[239.28507996 245.17436218]
[239.83789062 260.32263184]
[235.17340088 274.74548340]
[225.85485840 286.70126343]
[213.00753784 294.74624634]
[198.18280029 297.90899658]
[183.17080688 295.80755615]
[169.78433228 288.69573975]
[159.63986206 277.43225098]
[153.96240234 263.37728882]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 58]
[3 57]
[7 53]
[8 52]
[9 51]
[10 50]
[11 49]
[14 46]
[15 45]
[16 44]
[20 40]
[21 39]
[22 38]
[23 37]
[24 35]
[25 34]
[26 33]
[27 32]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
