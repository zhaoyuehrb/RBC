%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 16:21:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGGGAGUGACCAGAAGAAAUGACGCAGAAGUGAAAUGAACUUUUUAUAAGCAUUCUUUUAAUAAAGGAAAAUUGCUUUUGAAGUAUACCUCCUUUGGGCCAAAA\
) } def
/len { sequence length } bind def

/coor [
[-2.54938912 306.97537231]
[-19.18473434 303.96731567]
[-26.36468315 317.13729858]
[-33.54463196 330.30728149]
[-40.72457886 343.47723389]
[-36.02200699 358.56570435]
[-43.43980789 372.52105713]
[-58.57713318 377.06384277]
[-72.45327759 369.49890137]
[-76.83576965 354.31439209]
[-69.12454987 340.51901245]
[-53.89455795 336.29730225]
[-46.71461105 323.12731934]
[-39.53466034 309.95733643]
[-32.35471344 296.78735352]
[-41.66482162 287.56372070]
[-48.22914124 276.20498657]
[-51.57956314 263.50677490]
[-51.47338867 250.36074829]
[-47.91090775 237.69201660]
[-41.13588333 226.39392090]
[-31.61887932 217.26515198]
[-20.02457809 210.95323181]
[-7.16537428 207.90859985]
[6.05555582 208.35247803]
[18.70768929 212.26080322]
[27.01834106 199.77348328]
[27.11377144 182.29260254]
[43.52777863 174.10993958]
[51.46826553 161.38403320]
[59.40875626 148.65812683]
[67.34924316 135.93222046]
[68.23377991 128.47404480]
[75.71427917 122.95409393]
[84.02493286 110.46677399]
[81.27507019 96.24058533]
[89.30289459 84.17823792]
[103.48775482 81.22257233]
[111.79840851 68.73525238]
[113.00309753 52.95998001]
[126.49576569 46.65148544]
[134.80641174 34.16416931]
[143.11706543 21.67685318]
[151.42771912 9.18953800]
[159.73837280 -3.29777789]
[155.11933899 -14.45602131]
[156.52131653 -26.32914925]
[163.47027588 -35.90896225]
[174.10198975 -40.82637024]
[185.66076660 -39.93680954]
[194.68994141 -51.91487122]
[203.71911621 -63.89293289]
[212.74830627 -75.87099457]
[221.77748108 -87.84905243]
[230.27055359 -100.21302032]
[238.21104431 -112.93892670]
[246.15151978 -125.66483307]
[254.09201050 -138.39073181]
[262.03250122 -151.11663818]
[269.97299194 -163.84254456]
[277.91348267 -176.56845093]
[281.16848755 -193.20700073]
[298.05789185 -194.68519592]
[304.15374756 -178.86506653]
[290.63937378 -168.62796021]
[282.69888306 -155.90205383]
[274.75839233 -143.17614746]
[266.81793213 -130.45025635]
[258.87744141 -117.72434235]
[250.93693542 -104.99844360]
[242.99645996 -92.27253723]
[243.52128601 -88.63338470]
[242.20524597 -84.55844116]
[238.86439514 -80.96608734]
[233.75553894 -78.81987000]
[224.72636414 -66.84181213]
[215.69718933 -54.86375046]
[206.66799927 -42.88569260]
[197.63882446 -30.90763283]
[201.35134888 -13.10077572]
[190.82115173 2.11571431]
[172.22569275 5.01287460]
[163.91503906 17.50019073]
[155.60438538 29.98750687]
[147.29373169 42.47482300]
[138.98307800 54.96213531]
[138.37283325 69.84423828]
[124.28572083 77.04590607]
[115.97506714 89.53322601]
[118.72492981 103.75941467]
[110.69710541 115.82176208]
[96.51224518 118.77742767]
[88.20159149 131.26473999]
[80.07514954 143.87271118]
[72.13465881 156.59861755]
[64.19417572 169.32452393]
[56.25368500 182.05043030]
[58.39362335 194.87442017]
[51.38983154 205.34655762]
[39.50565720 208.08413696]
[31.19500351 220.57145691]
[41.62152100 234.09295654]
[46.87287140 250.31455994]
[46.34998703 267.33273315]
[40.13038635 283.15625000]
[28.95717049 295.93920898]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[26 101]
[27 100]
[29 97]
[30 96]
[31 95]
[32 94]
[34 93]
[35 92]
[38 89]
[39 88]
[41 86]
[42 85]
[43 84]
[44 83]
[45 82]
[50 79]
[51 78]
[52 77]
[53 76]
[54 75]
[55 71]
[56 70]
[57 69]
[58 68]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
