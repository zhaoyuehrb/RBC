%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 19:04:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUCAUUACGAAGGAGCAUAAUCCUGAAUUAGAAUGAAGACCCUCCAGUGUAUCAUAGUGUCAUGCCAACCAUCUUUGCC\
) } def
/len { sequence length } bind def

/coor [
[134.28543091 117.19983673]
[119.82162476 113.22511292]
[105.35782623 109.25039673]
[90.53361511 106.96065521]
[75.54462433 106.38611603]
[60.55562973 105.81156921]
[45.56663895 105.23703003]
[30.57764626 104.66249084]
[21.56241417 120.42547607]
[5.98561049 129.59745789]
[-12.00706482 129.83216858]
[-27.67375374 121.14945984]
[-36.92612839 105.90857697]
[-51.88211441 107.05680847]
[-66.83810425 108.20504761]
[-81.79409027 109.35328674]
[-91.88959503 121.51290894]
[-107.63383484 122.88925171]
[-119.68604279 112.66575623]
[-120.89585114 96.90783691]
[-110.54550171 84.96439362]
[-94.77567291 83.92125702]
[-82.94232941 94.39730072]
[-67.98634338 93.24906158]
[-53.03035355 92.10082245]
[-38.07436752 90.95258331]
[-34.35467911 79.34040833]
[-26.82642555 69.70378876]
[-16.39973068 63.24731445]
[-4.34888935 60.78873444]
[7.84335089 62.65542221]
[18.66823006 68.64103699]
[26.77767944 78.02800751]
[31.15218735 89.67350006]
[46.14117813 90.24803925]
[61.13017273 90.82257843]
[76.11916351 91.39711761]
[91.10815430 91.97166443]
[83.11727905 79.27733612]
[86.09941101 64.57676697]
[98.40534973 55.99982452]
[113.22951508 58.28983688]
[122.37367249 70.18035126]
[120.78081512 85.09554291]
[109.33254242 94.78659058]
[123.79634857 98.76131439]
[138.26014709 102.73603821]
[144.63505554 89.11734772]
[153.21995544 76.77201080]
[163.76788330 66.05522919]
[175.97532654 57.27534103]
[189.49104309 50.68496704]
[203.92619324 46.47372055]
[218.86543274 44.76276779]
[233.87892151 45.60133743]
[248.53468323 48.96530151]
[262.41107178 54.75787354]
[275.10882568 62.81238937]
[286.26260376 72.89710236]
[295.55145264 84.72185516]
[302.70819092 97.94643402]
[307.52682495 112.19033051]
[309.86877441 127.04372406]
[309.66662598 142.07925415]
[306.92620850 156.86431885]
[301.72634888 170.97351074]
[294.21667480 184.00090027]
[284.61325073 195.57165527]
[273.19238281 205.35285950]
[260.28268433 213.06307983]
[246.25556946 218.48049927]
[231.51466370 221.44921875]
[216.48405457 221.88385010]
[201.59622192 219.77188110]
[187.27951050 215.17405701]
[173.94584656 208.22270203]
[161.97886658 199.11779785]
[151.72288513 188.12130737]
[143.47297668 175.54962158]
[137.46652222 161.76446533]
[133.87632751 147.16246033]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 47]
[2 46]
[3 45]
[4 38]
[5 37]
[6 36]
[7 35]
[8 34]
[13 26]
[14 25]
[15 24]
[16 23]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
