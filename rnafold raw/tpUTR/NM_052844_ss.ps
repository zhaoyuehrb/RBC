%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 06:11:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGUCCCGGGAGGCGGGUGCAAGCCUUCGCUGUGCCGAGCCUUGUGUUUCUGACGCAAGCCAAAUGAAGAAAAGCAAAGCUU\
) } def
/len { sequence length } bind def

/coor [
[99.78787231 110.94490051]
[94.86876678 110.73292542]
[90.16045380 108.25839996]
[75.20240021 109.37935638]
[60.24434280 110.50030518]
[47.06096649 119.24726105]
[33.79107285 112.48270416]
[20.60770035 121.22966003]
[7.33780622 114.46510315]
[-7.59667492 115.86555481]
[-22.50235748 117.54502106]
[-37.40804291 119.22448730]
[-52.31372452 120.90395355]
[-67.21940613 122.58342743]
[-82.12509155 124.26289368]
[-89.66548157 137.82467651]
[-103.75136566 144.33372498]
[-118.96642303 141.28715515]
[-129.46015930 129.85644531]
[-131.19752502 114.43694305]
[-123.51045227 100.95774841]
[-109.35478973 94.60189819]
[-94.17367554 97.81333923]
[-83.80455780 109.35720825]
[-68.89887238 107.67774200]
[-53.99319077 105.99827576]
[-39.08750916 104.31880951]
[-24.18182564 102.63934326]
[-9.27614212 100.95986938]
[-2.82500243 96.98456573]
[6.21685505 99.50704193]
[18.33032990 90.84027100]
[32.67012405 97.52464294]
[44.78359604 88.85787201]
[59.12339020 95.54225159]
[74.08145142 94.42129517]
[89.03950500 93.30034637]
[103.91117859 91.34245300]
[118.64967346 88.55377960]
[133.38816833 85.76510620]
[148.12666321 82.97643280]
[160.24780273 72.80840302]
[174.19165039 78.04467010]
[188.93014526 75.25599670]
[203.66864014 72.46732330]
[218.40713501 69.67864990]
[230.52827454 59.51062393]
[244.47212219 64.74688721]
[259.21060181 61.95821381]
[273.94909668 59.16954041]
[288.68759155 56.38086700]
[303.42611694 53.59218979]
[305.84750366 38.62848282]
[313.24349976 25.39688110]
[324.72094727 15.49516678]
[338.89392090 10.11902046]
[354.05093384 9.91763687]
[368.36172485 14.91533470]
[380.09817505 24.50861740]
[387.84310913 37.53905106]
[390.66122437 52.43314362]
[388.21221924 67.39236450]
[380.79187012 80.61031342]
[369.29620361 90.49085999]
[355.11334229 95.84088135]
[339.95599365 96.01432800]
[325.65441895 90.99026489]
[313.93566895 81.37537384]
[306.21478271 68.33068848]
[291.47628784 71.11936188]
[276.73779297 73.90803528]
[261.99929810 76.69670868]
[247.26078796 79.48538208]
[236.19384766 89.45394135]
[221.19581604 84.41714478]
[206.45732117 87.20581818]
[191.71881104 89.99449158]
[176.98031616 92.78316498]
[165.91339111 102.75172424]
[150.91534424 97.71492767]
[136.17684937 100.50360107]
[121.43834686 103.29227448]
[106.69985199 106.08094788]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 37]
[4 36]
[5 35]
[7 33]
[9 31]
[10 29]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[38 83]
[39 82]
[40 81]
[41 80]
[43 78]
[44 77]
[45 76]
[46 75]
[48 73]
[49 72]
[50 71]
[51 70]
[52 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
