%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 11:29:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAGGCGGCCCUGCGCGGGCUGUCCAGGCCUCCGCCUGGGGAAGGCUUGUGCGGCGGUGGGAAAUAAAGGCUGCUUCUCCGCGCUG\
) } def
/len { sequence length } bind def

/coor [
[116.98435211 250.81649780]
[128.02909851 240.14369202]
[124.31950378 225.60961914]
[120.60990906 211.07556152]
[116.90031433 196.54150391]
[113.19071198 182.00744629]
[109.48111725 167.47338867]
[105.77152252 152.93933105]
[102.06192017 138.40527344]
[98.35232544 123.87120819]
[94.64272308 109.33715057]
[87.45399475 96.17196655]
[77.23271942 85.19355011]
[67.01145172 74.21513367]
[56.79018402 63.23671341]
[46.56891632 52.25829315]
[36.34764481 41.27987671]
[26.12637711 30.30145836]
[15.90510845 19.32304001]
[5.68383932 8.34462261]
[-4.53742981 -2.63379478]
[-14.75869942 -13.61221218]
[-34.18498230 -18.38764572]
[-38.22050476 -37.15803146]
[-49.19892502 -47.37929916]
[-60.17734146 -57.60057068]
[-71.15576172 -67.82183838]
[-82.13417816 -78.04310608]
[-93.11259460 -88.26437378]
[-104.09101105 -98.48564911]
[-120.18537140 -101.63265991]
[-125.25049591 -117.22998047]
[-114.07582092 -129.23242188]
[-98.15689850 -125.29290771]
[-93.86974335 -109.46406555]
[-82.89132690 -99.24279785]
[-71.91291046 -89.02152252]
[-60.93449020 -78.80025482]
[-49.95607376 -68.57898712]
[-38.97765350 -58.35771942]
[-27.99923706 -48.13644791]
[-17.58172035 -49.41356659]
[-8.03931999 -44.53330612]
[-2.76215100 -34.94979477]
[-3.78028131 -23.83348083]
[6.44098806 -12.85506344]
[16.66225624 -1.87664604]
[26.88352585 9.10177135]
[37.10479355 20.08018875]
[47.32606506 31.05860710]
[57.54733276 42.03702545]
[67.76860046 53.01544189]
[77.98986816 63.99386215]
[88.21114349 74.97228241]
[98.43241119 85.95069885]
[98.09027100 70.95459747]
[103.34407806 56.90477753]
[113.44172668 45.81255341]
[126.93767548 39.26583862]
[141.89988708 38.20184326]
[156.18644714 42.77288055]
[167.75213623 52.32457733]
[174.94125366 65.48955536]
[176.72462463 80.38316345]
[172.84698486 94.87329102]
[163.86340332 106.88558960]
[151.05995178 114.70042419]
[136.26951599 117.19905090]
[121.60945129 114.02378845]
[109.17678833 105.62755585]
[112.88638306 120.16161346]
[116.59597778 134.69567871]
[120.30558014 149.22973633]
[124.01517487 163.76379395]
[127.72477722 178.29785156]
[131.43437195 192.83190918]
[135.14396667 207.36596680]
[138.85356140 221.90002441]
[142.56317139 236.43408203]
[157.37184143 240.50820923]
[168.14805603 251.45211792]
[171.99304199 266.32192993]
[167.87251282 281.11776733]
[156.89488220 291.85961914]
[142.01307678 295.65798950]
[127.23023224 291.49108887]
[116.52285004 280.47985840]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 79]
[3 78]
[4 77]
[5 76]
[6 75]
[7 74]
[8 73]
[9 72]
[10 71]
[11 70]
[12 55]
[13 54]
[14 53]
[15 52]
[16 51]
[17 50]
[18 49]
[19 48]
[20 47]
[21 46]
[22 45]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
