%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 13:36:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGGGGGGUCUUCCUUCUUAAUCCCAUGGCUGGUGGCCACGCCCCCACCAUCAUCAGCUGGGAGGAAAGGCAGAGUUGGGAAAUAGAUGGCUCCCACUCCUCCCUCCUUUCACUUCUCUGCCUAUGGGCUACCCUCCCCACCCCACUUCUAUCUCAAUAAAGAACACAGUGCAUAUGACUUGACA\
) } def
/len { sequence length } bind def

/coor [
[203.75160217 228.50714111]
[194.06718445 217.05235291]
[184.38276672 205.59757996]
[174.69834900 194.14279175]
[165.01393127 182.68800354]
[155.32951355 171.23323059]
[145.64509583 159.77844238]
[135.96067810 148.32365417]
[126.27625275 136.86888123]
[116.59183502 125.41409302]
[94.71239471 129.12220764]
[76.74605560 117.06884003]
[72.12485504 96.50307465]
[57.42543030 99.49086761]
[42.72600555 102.47865295]
[28.02658081 105.46644592]
[13.32715511 108.45423126]
[-1.37227011 111.44202423]
[-16.07169533 114.42981720]
[-30.77112198 117.41760254]
[-33.04271317 133.17784119]
[-40.55777740 147.18553162]
[-52.39267349 157.75790405]
[-67.10608673 163.63200378]
[-82.91452026 164.11555481]
[-97.90850830 159.16851807]
[-110.28323364 149.40568542]
[-118.55579376 136.02037048]
[-133.20324707 139.25335693]
[-147.85069275 142.48635864]
[-162.49813843 145.71936035]
[-170.22189331 150.63401794]
[-177.41729736 148.88183594]
[-192.11671448 151.86962891]
[-206.81614685 154.85742188]
[-218.79861450 165.18847656]
[-232.81202698 160.14131165]
[-247.51144409 163.12910461]
[-262.21087646 166.11689758]
[-276.52825928 175.19700623]
[-289.21697998 163.95275879]
[-281.92474365 148.64721680]
[-265.19866943 151.41746521]
[-250.49923706 148.42967224]
[-235.79981995 145.44187927]
[-224.86872864 135.32453918]
[-209.80393982 140.15798950]
[-195.10450745 137.17019653]
[-180.40507507 134.18241882]
[-165.73114014 131.07191467]
[-151.08367920 127.83891296]
[-136.43623352 124.60591125]
[-121.78878784 121.37291718]
[-120.35195160 107.27924347]
[-114.62140656 94.29981995]
[-105.14601135 83.71062469]
[-92.84347534 76.55715179]
[-78.91149902 73.55114746]
[-64.71116638 74.99986267]
[-51.63397217 80.77466583]
[-40.96547318 90.32237244]
[-33.75891113 102.71817780]
[-19.05948639 99.73039246]
[-4.36005974 96.74259949]
[10.33936596 93.75480652]
[25.03879166 90.76702118]
[39.73821640 87.77922821]
[54.43764114 84.79144287]
[69.13706970 81.80364990]
[79.29143524 70.76332855]
[81.04205322 55.86582947]
[82.79266357 40.96833420]
[84.54328156 26.07084084]
[86.29389191 11.17334652]
[88.04450989 -3.72414851]
[89.79512024 -18.62164307]
[91.54573822 -33.51913834]
[74.67890930 -50.67719269]
[75.86294556 -74.45381165]
[93.96062469 -89.52608490]
[93.45940399 -104.51770782]
[92.95817566 -119.50933075]
[92.45695496 -134.50094604]
[81.61806488 -142.51683044]
[77.44194794 -155.12966919]
[81.24252319 -167.65736389]
[91.41546631 -175.58442688]
[91.16481781 -190.58233643]
[87.88710785 -199.13026428]
[91.03739929 -205.83245850]
[91.03739929 -220.83245850]
[91.03739929 -235.83245850]
[84.99105835 -251.67160034]
[98.53739929 -261.86636353]
[112.08374023 -251.67160034]
[106.03739929 -235.83245850]
[106.03739929 -220.83245850]
[106.03739929 -205.83245850]
[106.16272736 -190.83299255]
[106.41337585 -175.83508301]
[118.98817444 -164.68107605]
[119.62738037 -147.54663086]
[107.44857788 -135.00218201]
[107.94979858 -120.01055145]
[108.45102692 -105.01892853]
[108.95224762 -90.02730560]
[115.33743286 -87.83400726]
[121.06374359 -84.22324371]
[125.82062531 -79.38091278]
[129.34782410 -73.55996704]
[131.44964600 -67.06719208]
[132.00572205 -60.24704742]
[130.97799683 -53.46340561]
[128.41308594 -47.08011246]
[124.44030762 -41.44149399]
[119.26514435 -36.85377121]
[113.15864563 -33.56845093]
[106.44322968 -31.76852417]
[104.69261932 -16.87102890]
[102.94200134 -1.97353435]
[101.19139099 12.92396069]
[99.44077301 27.82145500]
[97.69016266 42.71894836]
[95.93954468 57.61644363]
[94.18893433 72.51393890]
[106.79259491 71.96517181]
[118.69790649 77.05548859]
[127.44738007 87.04598236]
[141.69766235 82.36307526]
[152.22077942 69.78546906]
[168.32604980 72.87610626]
[173.44577026 88.45559692]
[162.31318665 100.49710083]
[146.38056946 96.61334991]
[132.13029480 101.29625702]
[128.04661560 115.72967529]
[137.73103333 127.18446350]
[147.41545105 138.63923645]
[157.09986877 150.09402466]
[166.78428650 161.54881287]
[176.46870422 173.00358582]
[186.15312195 184.45837402]
[195.83753967 195.91316223]
[205.52195740 207.36793518]
[215.20637512 218.82272339]
[226.24670410 228.97709656]
[238.46974182 237.67175293]
[250.69279480 246.36642456]
[262.91583252 255.06109619]
[276.86813354 248.79365540]
[291.98440552 250.34117126]
[304.21520996 259.18841553]
[310.33450317 272.87820435]
[308.79022217 287.69311523]
[321.01327515 296.38775635]
[333.23632812 305.08242798]
[348.77679443 302.20690918]
[361.75137329 311.23110962]
[364.46243286 326.80111694]
[355.30157471 339.67956543]
[339.70376587 342.22586060]
[326.92288208 332.92935181]
[324.54165649 317.30548096]
[312.31860352 308.61080933]
[300.09555054 299.91613770]
[286.60696411 306.23461914]
[271.66735840 304.94451904]
[259.29763794 296.29257202]
[252.87721252 282.52029419]
[254.22117615 267.28411865]
[241.99812317 258.58947754]
[229.77508545 249.89480591]
[217.55203247 241.20013428]
[223.62417603 254.91615295]
[224.41296387 269.89538574]
[219.81494141 284.17327881]
[210.43315125 295.87722778]
[197.49806213 303.47219849]
[182.70616150 305.96206665]
[167.99745178 303.02032471]
[155.30104065 295.03277588]
[146.28211975 283.04696655]
[142.12355042 268.63494873]
[143.37072754 253.68690491]
[149.86010742 240.16329956]
[160.74055481 229.83779907]
[174.58508301 224.06466675]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 145]
[2 144]
[3 143]
[4 142]
[5 141]
[6 140]
[7 139]
[8 138]
[9 137]
[10 136]
[13 69]
[14 68]
[15 67]
[16 66]
[17 65]
[18 64]
[19 63]
[20 62]
[28 53]
[29 52]
[30 51]
[31 50]
[33 49]
[34 48]
[35 47]
[37 45]
[38 44]
[39 43]
[70 125]
[71 124]
[72 123]
[73 122]
[74 121]
[75 120]
[76 119]
[77 118]
[80 106]
[81 105]
[82 104]
[83 103]
[87 100]
[88 99]
[90 98]
[91 97]
[92 96]
[128 135]
[129 134]
[146 173]
[147 172]
[148 171]
[149 170]
[154 165]
[155 164]
[156 163]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
