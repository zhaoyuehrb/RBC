%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 23:29:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGAGCCCAGGGCAGCCCCUGGGCAGGAGACGUGGCUGCUGAACAGCCGCAAACCAUCUUCACCUGGGGGCAUUGAGUGGCGCAGAGCCGGGUUUCAUCUGGAAUUAACUGGAUGGAAGGGAAAAUAAAGCUAUCUAGCGGUG\
) } def
/len { sequence length } bind def

/coor [
[154.61715698 165.14248657]
[139.86059570 163.11932373]
[134.03163147 148.41102600]
[122.39151001 138.95019531]
[110.75138855 129.48934937]
[95.83931732 131.11114502]
[86.50512695 142.85307312]
[77.17094421 154.59500122]
[67.83675385 166.33692932]
[58.50257111 178.07887268]
[49.16838455 189.82080078]
[39.83419800 201.56272888]
[30.50000954 213.30465698]
[28.61742401 229.59539795]
[13.46249962 235.86119080]
[0.62532151 225.65634155]
[3.31167912 209.47872925]
[18.75807762 203.97047424]
[28.09226418 192.22854614]
[37.42645264 180.48661804]
[46.76063919 168.74467468]
[56.09482574 157.00274658]
[65.42900848 145.26081848]
[74.76319885 133.51889038]
[84.09738159 121.77695465]
[77.10113525 109.04409790]
[78.11639404 95.84237671]
[85.43997955 86.39089966]
[79.14164734 72.77726746]
[72.84330750 59.16363525]
[66.54497528 45.55000305]
[60.24663544 31.93637276]
[47.42991257 22.66048431]
[49.10805130 7.86071682]
[42.80971527 -5.75291443]
[36.51137924 -19.36654472]
[30.21304321 -32.98017502]
[23.91470718 -46.59380722]
[17.42323875 -53.12759018]
[17.63095856 -60.57128143]
[11.62903309 -74.31816864]
[5.62710667 -88.06505585]
[-3.65864372 -90.34206390]
[-10.72151661 -96.57904053]
[-14.03112602 -105.25331879]
[-12.95041466 -114.33512878]
[-7.85403109 -121.76232147]
[-12.95038605 -135.87002563]
[-18.04674149 -149.97772217]
[-23.14309502 -164.08541870]
[-28.23945045 -178.19311523]
[-43.39502335 -178.95748901]
[-57.06647873 -185.44859314]
[-67.18385315 -196.64913940]
[-72.22853088 -210.83148193]
[-71.46112823 -225.82402039]
[-65.02967072 -239.34368896]
[-53.94234467 -249.34371948]
[-59.03870010 -263.45141602]
[-64.13505554 -277.55911255]
[-69.23140717 -291.66680908]
[-74.32776642 -305.77450562]
[-87.20680237 -315.92648315]
[-84.58699799 -332.11502075]
[-69.16338348 -337.68673706]
[-56.80244827 -326.90994263]
[-60.22006607 -310.87088013]
[-55.12371063 -296.76318359]
[-50.02735519 -282.65545654]
[-44.93100357 -268.54776001]
[-39.83464813 -254.44007874]
[-24.91611481 -253.83457947]
[-11.32916737 -247.54646301]
[-1.15732741 -236.50569153]
[4.02647543 -222.37361145]
[3.40307474 -207.29299927]
[-2.96364617 -193.56318665]
[-14.13175106 -183.28947449]
[-9.03539658 -169.18177795]
[-3.93904161 -155.07406616]
[1.15731311 -140.96636963]
[6.25366783 -126.85867310]
[23.17162895 -115.10755157]
[19.37399292 -94.06697845]
[25.37591934 -80.32009125]
[31.37784576 -66.57320404]
[37.52833939 -52.89214325]
[43.82667542 -39.27851486]
[50.12501144 -25.66488266]
[56.42334747 -12.05125046]
[62.72168350 1.56238055]
[75.08791351 9.86453152]
[73.86026764 25.63803673]
[80.15860748 39.25166702]
[86.45693970 52.86529922]
[92.75527954 66.47892761]
[99.05361176 80.09255981]
[121.13925171 89.85490417]
[120.21221924 117.84922791]
[131.85235596 127.31006622]
[143.49247742 136.77090454]
[159.08161926 139.47077942]
[164.07800293 153.50236511]
[177.45823669 146.34381104]
[192.51922607 144.85737610]
[206.96286011 149.23860168]
[218.59719849 158.79003906]
[225.66909790 172.03213501]
[227.12838745 186.93232727]
[222.78367615 201.21704102]
[234.42379761 210.67787170]
[246.06393433 220.13871765]
[257.70407104 229.59954834]
[269.34417725 239.06039429]
[280.98431396 248.52122498]
[292.62445068 257.98205566]
[304.26455688 267.44290161]
[317.61981201 260.18301392]
[332.73721313 258.59155273]
[347.31146240 262.91119385]
[359.12011719 272.48324585]
[366.36242676 285.84802246]
[367.93402100 300.96749878]
[363.59518433 315.53607178]
[354.00762939 327.33212280]
[340.63333130 334.55685425]
[325.51181030 336.10852051]
[310.94894409 331.75054932]
[299.16552734 322.14746094]
[291.95840454 308.76370239]
[290.42660522 293.64013672]
[294.80371094 279.08303833]
[283.16360474 269.62219238]
[271.52346802 260.16134644]
[259.88333130 250.70051575]
[248.24322510 241.23968506]
[236.60308838 231.77883911]
[224.96296692 222.31800842]
[213.32284546 212.85716248]
[200.22761536 220.02964783]
[185.34368896 221.64643860]
[170.93576050 217.43020630]
[159.20812988 207.99356079]
[151.96742249 194.75022888]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 103]
[3 101]
[4 100]
[5 99]
[6 25]
[7 24]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[13 18]
[28 97]
[29 96]
[30 95]
[31 94]
[32 93]
[34 91]
[35 90]
[36 89]
[37 88]
[38 87]
[40 86]
[41 85]
[42 84]
[47 82]
[48 81]
[49 80]
[50 79]
[51 78]
[58 71]
[59 70]
[60 69]
[61 68]
[62 67]
[110 139]
[111 138]
[112 137]
[113 136]
[114 135]
[115 134]
[116 133]
[117 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
