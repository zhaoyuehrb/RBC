%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 17:35:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCUUAGGGCACUCACCUCCUGUUUCCACAGGAAUCUUUUGGUCAAUAAAAUAGAUUGACUCAGAA\
) } def
/len { sequence length } bind def

/coor [
[109.89398956 144.72946167]
[93.95578766 145.41015625]
[78.75054169 140.58418274]
[69.71102142 152.55444336]
[60.67150116 164.52470398]
[55.95137405 180.80833435]
[38.99745178 180.78042603]
[34.33095169 164.48135376]
[48.70124435 155.48518372]
[57.74076462 143.51492310]
[66.78028107 131.54466248]
[61.56677628 124.92995453]
[57.65234375 117.47259521]
[55.16930008 109.42464447]
[54.20157623 101.05812836]
[54.78187561 92.65585327]
[56.89058685 84.50181580]
[60.45643234 76.87162781]
[65.35888672 70.02319336]
[55.77618408 58.48318863]
[46.19348145 46.94317627]
[36.61078262 35.40316772]
[27.02807999 23.86315918]
[17.44537735 12.32314968]
[1.88491905 7.14587355]
[-1.14615262 -8.97072220]
[11.47026825 -19.44726562]
[26.75548935 -13.50638580]
[28.98538589 2.74044728]
[38.56808853 14.28045654]
[48.15079117 25.82046700]
[57.73349380 37.36047745]
[67.31619263 48.90048599]
[76.89889526 60.44049454]
[94.79595184 54.48590088]
[113.57521057 56.24695206]
[130.05316162 65.42511749]
[141.43644714 80.46448517]
[145.79533386 98.81555939]
[160.65148926 100.88790131]
[175.50764465 102.96025085]
[190.36380005 105.03259277]
[205.26385498 106.76123810]
[220.19987488 108.14526367]
[235.13587952 109.52928925]
[250.07189941 110.91331482]
[265.00790405 112.29734039]
[279.94393921 113.68136597]
[290.92996216 102.55297852]
[306.50369263 101.14129639]
[319.31167603 110.11288452]
[323.30639648 125.23162079]
[316.60165405 139.35891724]
[302.36318970 145.82427979]
[287.31402588 141.57496643]
[278.55990601 128.61738586]
[263.62390137 127.23335266]
[248.68788147 125.84932709]
[233.75186157 124.46530151]
[218.81584167 123.08127594]
[203.87983704 121.69725037]
[196.68667603 124.30609894]
[188.29145813 119.88874817]
[173.43530273 117.81640625]
[158.57914734 115.74405670]
[143.72299194 113.67171478]
[136.38374329 127.83592987]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 11]
[4 10]
[5 9]
[19 34]
[20 33]
[21 32]
[22 31]
[23 30]
[24 29]
[39 66]
[40 65]
[41 64]
[42 63]
[43 61]
[44 60]
[45 59]
[46 58]
[47 57]
[48 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
