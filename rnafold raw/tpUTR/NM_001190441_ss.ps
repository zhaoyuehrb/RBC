%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 20:55:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACACUCCUCAUUGUUGAGGAAACCCUCUUUCUACCUGACCAUGGGAUUCCUAGAGCCUGCUAACAGAAUAAUCCCUCCUCAACCCCUUCCCCUACACUUGGUCAUUAAAACAGCACCAAACCGUA\
) } def
/len { sequence length } bind def

/coor [
[27.17261124 395.84399414]
[14.76352310 395.68118286]
[2.45540309 394.10107422]
[-9.59042358 391.12463379]
[-21.21609306 386.79110718]
[-32.26927567 381.15750122]
[-42.60517502 374.29791260]
[-52.40277100 385.65603638]
[-62.20036316 397.01416016]
[-71.99795532 408.37228394]
[-81.79554749 419.73043823]
[-91.59313965 431.08856201]
[-94.12755585 447.29067993]
[-109.52158356 452.94363403]
[-121.93916321 442.23217773]
[-118.60615540 426.17529297]
[-102.95127106 421.29095459]
[-93.15367889 409.93283081]
[-83.35608673 398.57470703]
[-73.55849457 387.21658325]
[-63.76090240 375.85842896]
[-53.96331024 364.50030518]
[-65.75241089 350.69421387]
[-75.07216644 335.11114502]
[-81.66013336 318.18817139]
[-85.33050537 300.40011597]
[-85.97933960 282.24618530]
[-83.58750153 264.23608398]
[-78.22126007 246.87561035]
[-70.03040314 230.65242004]
[-59.24411011 216.02244568]
[-46.16448212 203.39697266]
[-31.15813065 193.13114929]
[-14.64586926 185.51393127]
[2.90906906 180.76004028]
[21.01403618 179.00379944]
[39.16078949 180.29544067]
[56.83975983 184.59959412]
[62.58001328 170.74139404]
[68.32026672 156.88320923]
[74.06051636 143.02500916]
[79.80076599 129.16682434]
[85.54101562 115.30862427]
[80.00535583 93.39466095]
[97.50577545 79.09078979]
[101.15047455 64.54032135]
[104.79518127 49.98985291]
[108.43988037 35.43938446]
[95.49744415 25.98348999]
[87.17594147 12.32904434]
[84.71585083 -3.43207216]
[88.46228027 -18.89834785]
[97.81691742 -31.72455215]
[111.33337402 -39.97735596]
[126.94071960 -42.42672729]
[130.22723389 -57.06225967]
[133.51374817 -71.69779205]
[130.49627686 -82.12272644]
[135.35919189 -90.43480682]
[134.99107361 -105.43029022]
[134.62295532 -120.42577362]
[125.62015533 -134.13276672]
[133.23007202 -148.65933228]
[149.62428284 -149.06178284]
[157.93782043 -134.92611694]
[149.61843872 -120.79389191]
[149.98655701 -105.79840851]
[150.35467529 -90.80292511]
[159.82530212 -102.43508911]
[173.50529480 -108.58794403]
[188.49197388 -107.95594788]
[201.60539246 -100.67321014]
[210.06307983 -88.28500366]
[212.07043457 -73.41992188]
[207.20152283 -59.23212051]
[196.48947144 -48.73202515]
[182.20721436 -44.14760208]
[167.38520813 -46.45159912]
[155.16848755 -55.15513611]
[148.14929199 -68.41127014]
[144.86276245 -53.77574158]
[141.57624817 -39.14020920]
[153.38978577 -31.46633911]
[161.87863159 -20.18662071]
[165.99963379 -6.65307093]
[165.23469543 7.50330877]
[159.65582275 20.56909752]
[149.91896057 30.95584297]
[137.18687439 37.39315414]
[122.99034882 39.08408737]
[119.34564972 53.63455582]
[115.70094299 68.18502808]
[112.05624390 82.73549652]
[116.87587738 87.40551758]
[119.98142242 93.35477448]
[121.05744171 99.97898865]
[119.99464417 106.60533905]
[116.90097809 112.56077576]
[112.09066772 117.24040985]
[106.05230713 120.16893005]
[99.39920807 121.04887390]
[93.65895844 134.90707397]
[87.91870880 148.76525879]
[82.17845917 162.62345886]
[76.43820190 176.48164368]
[70.69795227 190.33984375]
[81.48930359 196.51589966]
[91.50310516 203.88442993]
[100.60821533 212.34864807]
[108.68543243 221.79740906]
[115.62903595 232.10670471]
[121.34820557 243.14123535]
[125.76815033 254.75622559]
[128.83116150 266.79934692]
[130.49729919 279.11264038]
[130.74496460 291.53466797]
[129.57113647 303.90255737]
[126.99143982 316.05419922]
[123.03991699 327.83032227]
[117.76860046 339.07659912]
[111.24681091 349.64575195]
[103.56023407 359.39932251]
[94.80982971 368.20956421]
[85.11048889 375.96115112]
[74.58950043 382.55264282]
[63.38492966 387.89785767]
[51.64375687 391.92687988]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 22]
[8 21]
[9 20]
[10 19]
[11 18]
[12 17]
[38 106]
[39 105]
[40 104]
[41 103]
[42 102]
[43 101]
[45 93]
[46 92]
[47 91]
[48 90]
[55 82]
[56 81]
[57 80]
[59 68]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
