%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 07:30:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCACACCAUCGCAAAGGACCAGGGACACAGCUAACUAACUUAUUCAGCUUUGGGCCGAUGGGGGUGGGGGGGGGUCUUUCAGUGAAUAUUUUUAUUAAACUCUACUGUGGACAAGAA\
) } def
/len { sequence length } bind def

/coor [
[156.16217041 133.21478271]
[142.45898438 127.11373138]
[128.75581360 121.01268005]
[115.05262756 114.91162872]
[103.77386475 120.84937286]
[91.12937164 119.24188232]
[81.69508362 110.67091370]
[78.88520813 98.23822784]
[65.34642792 91.78055573]
[51.80765152 85.32289124]
[38.26887131 78.86522675]
[24.73009109 72.40756226]
[8.94326496 73.45000458]
[0.78681058 60.98720169]
[-13.90277195 69.25259399]
[-30.46589661 67.19959259]
[-42.45294189 55.82555008]
[-45.31385422 39.71859741]
[-59.01703644 33.61754608]
[-74.77116394 35.07288742]
[-83.25106049 22.82786369]
[-96.95424652 16.72681427]
[-110.65742493 10.62576389]
[-124.36061096 4.52471399]
[-138.06379700 -1.57633555]
[-151.76696777 -7.67738533]
[-161.12736511 4.14774656]
[-173.13497925 13.27287769]
[-187.03500366 19.12439537]
[-201.95365906 21.33446693]
[-216.95317078 19.76416588]
[-231.09062195 14.51220417]
[-243.47734070 5.90872288]
[-253.33470154 -5.50545502]
[-260.04302979 -19.01282501]
[-263.18066406 -33.76430511]
[-262.55035400 -48.83259964]
[-258.19171143 -63.27050781]
[-250.37875366 -76.17044830]
[-239.60258484 -86.72151947]
[-226.54061890 -94.26046753]
[-212.01393127 -98.31340027]
[-196.93569946 -98.62553406]
[-182.25372314 -95.17726135]
[-168.89094543 -88.18533325]
[-157.68736267 -78.08926392]
[-149.34724426 -65.52371216]
[-144.39483643 -51.27855682]
[-143.14146423 -36.24925613]
[-145.66592407 -21.38056755]
[-131.96273804 -15.27951717]
[-118.25955963 -9.17846775]
[-104.55637360 -3.07741809]
[-90.85319519 3.02363157]
[-77.15000916 9.12468147]
[-62.37602615 7.23295355]
[-52.91598511 19.91436577]
[-39.21280289 26.01541519]
[-28.25635529 18.26823807]
[-14.79166412 16.96730232]
[-2.35651183 22.56271935]
[5.72804976 33.67831802]
[7.24447680 47.44842148]
[22.06291962 45.94408035]
[31.18775749 58.86877823]
[44.72653580 65.32644653]
[58.26531601 71.78411102]
[71.80409241 78.24178314]
[85.34287262 84.69944763]
[100.70624542 78.82360840]
[115.64398193 85.71000671]
[121.15367126 101.20845032]
[134.85685730 107.30950165]
[148.56004333 113.41055298]
[162.26321411 119.51159668]
[176.40284729 124.51869965]
[190.89172363 128.40098572]
[205.38061523 132.28327942]
[219.86950684 136.16555786]
[231.48890686 130.38317871]
[243.53308105 134.00233459]
[249.63613892 144.53572083]
[264.01843262 148.79594421]
[278.40072632 153.05618286]
[292.78302002 157.31640625]
[307.16531372 161.57664490]
[321.83752441 164.69531250]
[336.70919800 166.65321350]
[351.58087158 168.61109924]
[366.45254517 170.56900024]
[381.38809204 163.79682922]
[394.56134033 173.56398010]
[392.42083740 189.82283020]
[377.16851807 195.84767151]
[364.49465942 185.44067383]
[349.62298584 183.48277283]
[334.75131226 181.52488708]
[319.87963867 179.56698608]
[327.43234253 192.52679443]
[323.84310913 207.09103394]
[311.13330078 215.05728149]
[296.46099854 211.93901062]
[288.08947754 199.49241638]
[290.73352051 184.72727966]
[302.90509033 175.95893860]
[288.52279663 171.69871521]
[274.14050293 167.43847656]
[259.75820923 163.17825317]
[245.37590027 158.91801453]
[228.62460327 163.96873474]
[215.98721313 150.65444946]
[201.49833679 146.77215576]
[187.00944519 142.88987732]
[172.52055359 139.00758362]
[178.31706238 152.84234619]
[172.85749817 166.81350708]
[159.21662903 173.05262756]
[145.07685852 168.04592896]
[138.40158081 154.61309814]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 75]
[2 74]
[3 73]
[4 72]
[8 69]
[9 68]
[10 67]
[11 66]
[12 65]
[14 63]
[18 58]
[19 57]
[21 55]
[22 54]
[23 53]
[24 52]
[25 51]
[26 50]
[76 114]
[77 113]
[78 112]
[79 111]
[82 109]
[83 108]
[84 107]
[85 106]
[86 105]
[87 98]
[88 97]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
