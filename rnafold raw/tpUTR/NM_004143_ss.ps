%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 06:40:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCAAGUGUCCCUAAAGAUGGAGGAAUAAAGCCACCAAUUCUGUUGUAAAUAAAAAUAAAGUUACUUACAAAGAGACGGGCCAA\
) } def
/len { sequence length } bind def

/coor [
[89.99304962 255.95513916]
[99.34843445 242.92224121]
[98.25350189 227.96226501]
[97.15857697 213.00227356]
[88.13066101 204.73078918]
[87.22599792 192.11497498]
[95.49230957 182.01403809]
[94.94448090 167.02403259]
[86.74752045 154.58784485]
[93.97564697 140.51429749]
[93.42781067 125.52429962]
[86.73896027 122.77780151]
[81.04817963 118.31698608]
[76.78376007 112.47756958]
[74.26667023 105.69905853]
[73.68634796 98.49161530]
[75.08647156 91.39770508]
[62.88712311 82.66982269]
[50.68777847 73.94193268]
[38.17781067 65.66542053]
[25.37391281 57.85131454]
[12.57001781 50.03720856]
[-3.24038625 49.45264816]
[-10.07362556 36.21799469]
[-22.87752151 28.40388870]
[-37.63920975 33.56398773]
[-52.24578476 27.97990417]
[-59.80046844 14.28827286]
[-56.73617172 -1.04613578]
[-44.49976349 -10.78288460]
[-28.86889648 -10.32457733]
[-17.22399139 0.11238634]
[-15.06341743 15.59999180]
[-2.25952053 23.41409683]
[12.63506222 23.43974113]
[20.38412285 37.23331451]
[33.18801880 45.04741669]
[45.99191666 52.86152267]
[50.97662735 52.55546188]
[56.16059494 55.54671478]
[59.41566086 61.74258804]
[71.61500549 70.47047424]
[83.81435394 79.19835663]
[102.40370178 73.75298309]
[119.69475555 82.48429108]
[133.27647400 76.11743927]
[146.85820007 69.75058746]
[160.43992615 63.38373566]
[174.02165222 57.01688766]
[187.60337830 50.65003586]
[196.81455994 37.78673553]
[211.62260437 39.39028549]
[225.20433044 33.02343369]
[238.78604126 26.65658379]
[241.58357239 11.39377022]
[252.84127808 0.71463871]
[268.23031616 -1.27446616]
[281.83334351 6.19130659]
[288.41967773 20.24121475]
[285.45672607 35.47278214]
[274.08383179 46.02915955]
[258.67410278 47.85120773]
[245.15289307 40.23830795]
[231.57116699 46.60515594]
[217.98945618 52.97200775]
[209.74971008 65.37990570]
[193.97023010 64.23175812]
[180.38850403 70.59860992]
[166.80677795 76.96546173]
[153.22505188 83.33231354]
[139.64332581 89.69915771]
[126.06160736 96.06600952]
[122.49802399 113.73034668]
[108.41780853 124.97647095]
[108.96563721 139.96646118]
[117.20178986 153.47485352]
[109.93447113 166.47621155]
[110.48230743 181.46620178]
[120.64789581 196.68730164]
[112.11856079 211.90734863]
[113.21348572 226.86732483]
[114.30841827 241.82731628]
[125.46171570 253.35916138]
[123.25690460 269.25000000]
[109.38533783 277.30972290]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 82]
[3 81]
[4 80]
[7 78]
[8 77]
[10 75]
[11 74]
[17 43]
[18 42]
[19 41]
[20 38]
[21 37]
[22 36]
[24 34]
[25 33]
[45 72]
[46 71]
[47 70]
[48 69]
[49 68]
[50 67]
[52 65]
[53 64]
[54 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
