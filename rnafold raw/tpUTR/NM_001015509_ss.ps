%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 11:28:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGACUUUGAUAUGACAACAACCCCUCCAUCACAAGUGUUUGAAGCCUGUCAGAUUCUAACAACAAAAGCUGAAUUUCUUCACCCAACUUAAAUGUUCUUGAGAUGAAAAUAAAACCUAUUCCCAUGUUCUA\
) } def
/len { sequence length } bind def

/coor [
[114.17910767 199.54112244]
[112.07603455 184.68928528]
[109.97296143 169.83744812]
[107.86988831 154.98561096]
[94.25880432 148.68176270]
[81.57131958 156.68350220]
[68.88384247 164.68524170]
[56.19636154 172.68698120]
[43.60354996 180.83689880]
[31.10713577 189.13386536]
[18.61072350 197.43083191]
[6.11431026 205.72779846]
[9.96052170 220.37312317]
[8.84051991 235.47358704]
[2.87579489 249.39123535]
[-7.28664589 260.61636353]
[-20.54445648 267.93136597]
[-35.45952606 270.54275513]
[-50.41398621 268.16726685]
[-63.78568268 261.06259155]
[-74.12415314 249.99937439]
[-80.30796051 236.17768860]
[-81.66633606 221.09678650]
[-78.05192566 206.39253235]
[-69.85679626 193.65995789]
[-57.96989822 184.28018188]
[-43.68062592 179.27064514]
[-28.53897667 179.17475891]
[-14.18740273 184.00291443]
[-2.18265724 193.23138428]
[10.31375599 184.93441772]
[22.81016922 176.63745117]
[35.30657959 168.34048462]
[39.17507553 161.96035767]
[48.19462204 159.99949646]
[60.88210297 151.99775696]
[73.56958008 143.99601746]
[86.25706482 135.99427795]
[70.65768433 121.33918762]
[66.01116180 101.75173187]
[72.50698090 84.04626465]
[86.68236542 73.63320923]
[83.54076385 58.96588516]
[80.39915466 44.29856491]
[77.25755310 29.63124275]
[74.11595154 14.96392155]
[59.59375763 10.16254807]
[49.49136353 -1.18815398]
[46.44709015 -15.97323990]
[51.18043518 -30.20178223]
[62.32517242 -40.08411026]
[59.18357086 -54.75143051]
[56.04196548 -69.41875458]
[52.90036392 -84.08607483]
[37.88284683 -86.14764404]
[24.47755051 -93.22393036]
[14.30322266 -104.46042633]
[8.58846378 -118.50027466]
[8.02336121 -133.64810181]
[12.67615128 -148.07472229]
[21.98498917 -160.03805542]
[34.82578659 -168.09346008]
[49.64795303 -171.26823425]
[64.66164398 -169.17898560]
[78.05387878 -162.07801819]
[88.20748138 -150.82278442]
[93.89635468 -136.77243042]
[94.43354034 -121.62359619]
[89.75417328 -107.20557404]
[80.42330170 -95.25941467]
[67.56768036 -87.22767639]
[70.70928955 -72.56035614]
[73.85089111 -57.89303589]
[76.99249268 -43.22571182]
[91.20720673 -38.77514648]
[101.35316467 -27.73361206]
[104.63179779 -12.99872208]
[100.06482697 1.49402106]
[88.78327179 11.82231712]
[91.92487335 26.48963928]
[95.06648254 41.15695953]
[98.20808411 55.82428360]
[101.34968567 70.49160767]
[121.80561829 75.85279083]
[135.14619446 94.77686310]
[133.02163696 119.85014343]
[147.75857544 117.05324554]
[159.87403870 106.87845612]
[173.82080078 112.10693359]
[188.55773926 109.31003571]
[203.29467773 106.51313019]
[218.03161621 103.71623230]
[232.76855469 100.91932678]
[241.45585632 87.71681976]
[256.95095825 84.60594940]
[270.06088257 93.43235016]
[273.00775146 108.95947266]
[264.04324341 121.97534943]
[248.48582458 124.75789642]
[235.56544495 115.65626526]
[220.82850647 118.45317078]
[206.09156799 121.25006866]
[191.35462952 124.04697418]
[176.61769104 126.84387207]
[165.55632019 136.81860352]
[150.55548096 131.79017639]
[135.81854248 134.58708191]
[150.09233093 139.19783020]
[164.36610413 143.80859375]
[179.10488892 141.02139282]
[193.77662659 144.14231873]
[206.10490417 152.68710327]
[214.17691040 165.33000183]
[216.74023438 180.10935974]
[213.39714050 194.73207092]
[204.66633606 206.92932129]
[191.90246582 214.80863953]
[177.08592224 217.14749146]
[162.51559448 213.58297729]
[150.45217896 204.66816711]
[142.76736450 191.78625488]
[140.65367126 176.93342590]
[131.68769836 164.90797424]
[122.72172546 152.88253784]
[124.82479858 167.73437500]
[126.92787170 182.58621216]
[129.03094482 197.43804932]
[142.39582825 205.55679321]
[147.36630249 220.38339233]
[141.59547424 234.91720581]
[127.80814362 242.29579163]
[112.51426697 239.03520203]
[102.93514252 226.67500305]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 127]
[2 126]
[3 125]
[4 124]
[5 38]
[6 37]
[7 36]
[8 35]
[9 33]
[10 32]
[11 31]
[12 30]
[42 83]
[43 82]
[44 81]
[45 80]
[46 79]
[51 74]
[52 73]
[53 72]
[54 71]
[86 107]
[87 106]
[89 104]
[90 103]
[91 102]
[92 101]
[93 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
