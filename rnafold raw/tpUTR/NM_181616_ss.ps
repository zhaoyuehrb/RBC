%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 21:40:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAUAUCUGGCAACUCAACCUCGUGGUCUCUUCCACAUGGACUUCCUAAAUUUGCCUUCAUAAUUCUUCAUAUGAGUAAUUCAUUUUUCUGUUGUAAAAUGUCAACAUCAUCCUUAAGUAUCUGGAAGAAAAAAUAGGUCAGAUGCUGCAAGCCUCA\
) } def
/len { sequence length } bind def

/coor [
[102.67176819 307.63085938]
[89.38385010 315.07067871]
[74.21808624 316.45614624]
[59.80204391 311.54721069]
[48.63338470 301.19439697]
[42.64715576 287.19134521]
[42.88050079 271.96423340]
[49.29298782 258.15118408]
[60.77362442 248.14544678]
[75.33331299 243.68054199]
[77.10741425 228.78582764]
[78.88150787 213.89111328]
[65.43892670 210.55636597]
[52.49046707 205.64100647]
[40.22124100 199.21530151]
[28.80666351 191.37113953]
[18.40992737 182.22065735]
[9.17967224 171.89468384]
[1.24786294 160.54083252]
[-5.27210140 148.32144165]
[-19.28111076 153.68312073]
[-25.78450584 167.83740234]
[-40.06801605 173.07534790]
[-53.52187729 166.78811646]
[-67.53089142 172.14981079]
[-81.53989410 177.51148987]
[-95.54890442 182.87316895]
[-101.76168060 197.40510559]
[-116.46128845 203.21000671]
[-130.92672729 196.84394836]
[-136.57589722 182.08378601]
[-130.05725098 167.68646240]
[-115.23818970 162.19366455]
[-100.91059113 168.86416626]
[-86.90158081 163.50247192]
[-72.89257050 158.14079285]
[-58.88356018 152.77911377]
[-53.06535721 139.11587524]
[-38.93460464 133.47880554]
[-24.64279366 139.67411804]
[-10.63378334 134.31242371]
[-13.68222332 122.21550751]
[-15.41204166 109.86090851]
[-15.80317307 97.39192963]
[-14.85108089 84.95320129]
[-12.56680870 72.68900299]
[-8.97685242 60.74159241]
[-4.12285280 49.24954987]
[1.93888795 38.34616852]
[9.13805866 28.15792084]
[17.39115524 18.80298424]
[26.60244560 10.38986683]
[36.66508865 3.01615572]
[29.29378891 -10.04768467]
[21.92248726 -23.11152458]
[14.55118656 -36.17536545]
[8.99040890 -39.90843201]
[6.55549574 -45.11761856]
[7.15841246 -49.90415192]
[0.30897385 -63.24900818]
[-6.54046488 -76.59386444]
[-13.38990307 -89.93872070]
[-20.23934174 -103.28357697]
[-35.59259796 -105.53239441]
[-46.66827011 -116.40019226]
[-49.20753860 -131.70808411]
[-42.23399734 -145.56988525]
[-28.42912292 -152.65544128]
[-13.10116577 -150.24020386]
[-2.14403963 -139.25289917]
[0.22901659 -123.91835022]
[-6.89448547 -110.13301849]
[-0.04504691 -96.78816223]
[6.80439186 -83.44330597]
[13.65383053 -70.09844971]
[20.50326920 -56.75359344]
[27.61502647 -43.54666519]
[34.98632812 -30.48282623]
[42.35762787 -17.41898537]
[49.72893143 -4.35514545]
[61.13603592 -9.11814213]
[72.98576355 -12.63839340]
[85.14315033 -14.87580585]
[97.46974945 -15.80489922]
[109.82515717 -15.41509056]
[122.06867218 -13.71082020]
[134.06085205 -10.71149731]
[145.66510010 -6.45128202]
[156.74928284 -0.97869343]
[167.18713379 5.64394093]
[176.85980225 13.34119606]
[187.51866150 2.78711581]
[198.17752075 -7.76696396]
[208.83639526 -18.32104492]
[219.49525452 -28.87512398]
[217.01055908 -44.19197464]
[224.03346252 -58.02882767]
[237.86351013 -65.06513214]
[253.18275452 -62.59528351]
[264.10064697 -51.56899261]
[266.41903687 -36.22608566]
[259.24645996 -22.46623230]
[245.34089661 -15.58037186]
[230.04933167 -18.21625900]
[219.39047241 -7.66217947]
[208.73161316 2.89190054]
[198.07273865 13.44598007]
[187.41387939 24.00006104]
[195.84584045 34.95577621]
[202.91250610 46.83803940]
[208.51318359 59.47758865]
[212.56811523 72.69437408]
[215.01951599 86.30011749]
[215.83248901 100.10102081]
[214.99545288 113.90048218]
[212.52030945 127.50193024]
[208.44233704 140.71162415]
[202.81961060 153.34138489]
[215.65928650 161.09657288]
[228.49894714 168.85176086]
[241.33862305 176.60694885]
[254.17828369 184.36213684]
[267.01794434 192.11732483]
[279.85760498 199.87251282]
[292.69729614 207.62770081]
[305.53695679 215.38288879]
[318.00769043 206.64213562]
[332.95669556 203.73573303]
[347.79394531 207.16723633]
[359.94885254 216.34210205]
[367.31546021 229.67076111]
[368.61749268 244.84391785]
[363.62933350 259.23272705]
[353.21520996 270.34426880]
[339.17944336 276.25338745]
[323.95382690 275.93627930]
[310.17630005 269.44787598]
[300.23385620 257.91238403]
[295.84912109 243.32835388]
[297.78176880 228.22256470]
[284.94210815 220.46737671]
[272.10241699 212.71218872]
[259.26275635 204.95700073]
[246.42309570 197.20181274]
[233.58343506 189.44660950]
[220.74375916 181.69142151]
[207.90409851 173.93623352]
[195.06442261 166.18104553]
[179.74617004 184.01026917]
[161.14390564 198.37988281]
[140.02366638 208.69812012]
[117.25524139 214.54010010]
[93.77622223 215.66520691]
[92.00212860 230.55993652]
[90.22802734 245.45465088]
[103.33163452 253.21449280]
[112.14086914 265.63696289]
[115.12946320 280.56973267]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 155]
[11 154]
[12 153]
[20 41]
[21 40]
[24 37]
[25 36]
[26 35]
[27 34]
[53 80]
[54 79]
[55 78]
[56 77]
[59 76]
[60 75]
[61 74]
[62 73]
[63 72]
[91 108]
[92 107]
[93 106]
[94 105]
[95 104]
[118 148]
[119 147]
[120 146]
[121 145]
[122 144]
[123 143]
[124 142]
[125 141]
[126 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
