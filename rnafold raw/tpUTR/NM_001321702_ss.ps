%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 12:58:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCACCUGUCCCUCCUGGGCUGCUGGAUUGUCUCGUUUUCCUGCCAAAUAAACAGGAUCAGCGCUUUACAA\
) } def
/len { sequence length } bind def

/coor [
[92.82701111 109.86385345]
[78.41006470 114.00530243]
[63.99311447 118.14675903]
[49.57616806 122.28821564]
[35.15922165 126.42967224]
[24.03171158 137.67640686]
[9.66290569 133.75381470]
[-1.46460605 145.00054932]
[-15.83341122 141.07795715]
[-23.49264908 146.61436462]
[-30.96021271 145.07308960]
[-45.54198456 148.59045410]
[-60.12375641 152.10783386]
[-71.62777710 163.79498291]
[-87.43103027 159.41444397]
[-91.27648926 143.47253418]
[-79.20827484 132.36892700]
[-63.64112854 137.52606201]
[-49.05935669 134.00868225]
[-34.47758484 130.49131775]
[-19.97486687 126.66101837]
[-9.87855148 115.71050262]
[5.52145052 119.33686829]
[15.61776543 108.38636017]
[31.01776695 112.01272583]
[45.43471527 107.87126923]
[59.85166168 103.72981262]
[74.26860809 99.58835602]
[88.68555450 95.44690704]
[102.91098022 90.68903351]
[116.91853333 85.32356262]
[130.92610168 79.95808411]
[137.70184326 62.53208160]
[154.65487671 55.41575623]
[171.26702881 62.53948593]
[184.76148987 55.98971939]
[198.25595093 49.43994904]
[211.75042725 42.89018250]
[221.53201294 27.45952797]
[238.87599182 29.03957748]
[252.07617188 21.91531181]
[265.27636719 14.79104519]
[278.47653198 7.66677952]
[291.67672729 0.54251349]
[292.75000000 -14.84747219]
[301.99163818 -27.20042801]
[316.45269775 -32.57457352]
[331.51867676 -29.25503349]
[342.38211060 -18.30106354]
[345.57650757 -3.20803714]
[340.08251953 11.20791721]
[327.65328979 20.34672165]
[312.25491333 21.29221535]
[298.80099487 13.74269676]
[285.60079956 20.86696243]
[272.40063477 27.99122810]
[259.20043945 35.11549377]
[246.00025940 42.23976135]
[242.12440491 53.90089417]
[230.92488098 59.87517548]
[218.30018616 56.38464355]
[204.80572510 62.93441391]
[191.31126404 69.48418427]
[177.81680298 76.03395081]
[176.41571045 87.71595001]
[169.36128235 97.28410339]
[158.39337158 102.17604828]
[146.31842041 101.00844574]
[136.29156494 93.96564484]
[122.28401184 99.33112335]
[108.27645111 104.69659424]
[104.93122101 109.16739655]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[4 26]
[5 25]
[7 23]
[9 21]
[11 20]
[12 19]
[13 18]
[30 71]
[31 70]
[32 69]
[35 64]
[36 63]
[37 62]
[38 61]
[40 58]
[41 57]
[42 56]
[43 55]
[44 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
