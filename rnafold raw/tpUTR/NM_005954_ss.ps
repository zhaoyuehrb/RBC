%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 22:08:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGGCACCCCUCCGUGUGGAGCACGUGGAGAUAGUGCCAGGUGGCUCAGUGCCACCUAUGCCUGUGGUGAAGUGUGGCUGGUGUCCCCUUCCCCUGCUGACCUUGGAGGAAUGACAAUAAAUCCCAUGAACAGCAUGA\
) } def
/len { sequence length } bind def

/coor [
[107.53878784 116.37729645]
[102.69727325 120.18122864]
[96.25769806 122.38153839]
[88.79643250 122.37567902]
[76.46640015 130.91795349]
[64.13636780 139.46022034]
[51.80633926 148.00248718]
[39.47630692 156.54475403]
[36.69760895 173.77601624]
[22.61696243 183.50914001]
[6.17522287 180.15425110]
[-5.96003199 188.97102356]
[-18.09528732 197.78781128]
[-30.23054123 206.60458374]
[-42.36579514 215.42137146]
[-54.50105286 224.23814392]
[-66.63630676 233.05493164]
[-78.77156067 241.87170410]
[-90.90681458 250.68847656]
[-100.16699219 264.89007568]
[-116.37705994 259.92318726]
[-116.09167480 242.97164917]
[-99.72359467 238.55322266]
[-87.58834076 229.73645020]
[-75.45308685 220.91967773]
[-63.31782913 212.10289001]
[-51.18257523 203.28611755]
[-39.04732132 194.46932983]
[-26.91206551 185.65255737]
[-14.77681065 176.83576965]
[-2.64155579 168.01899719]
[-2.41408992 155.08793640]
[5.35626745 144.50633240]
[17.99643135 140.29499817]
[30.93404007 144.21472168]
[43.26407242 135.67245483]
[55.59410095 127.13018799]
[67.92413330 118.58792114]
[80.25416565 110.04564667]
[80.42246246 95.04659271]
[68.28720856 86.22981262]
[56.15195084 77.41304016]
[44.01669693 68.59626007]
[31.88144112 59.77947998]
[19.74618530 50.96269989]
[7.61093044 42.14592361]
[-8.39576817 43.22533798]
[-19.11291504 31.28706932]
[-16.31923294 15.48913002]
[-2.15779567 7.95034838]
[12.50795460 14.45383263]
[16.42770958 30.01066780]
[28.56296349 38.82744598]
[40.69821930 47.64422607]
[52.83347321 56.46100235]
[64.96872711 65.27777863]
[77.10398102 74.09455872]
[89.23924255 82.91133881]
[104.05456543 85.25785828]
[118.32041168 80.62260437]
[132.58625793 75.98735046]
[146.85211182 71.35208893]
[154.11865234 65.67877197]
[161.49032593 66.77677155]
[175.85659790 62.46278381]
[190.22285461 58.14879227]
[192.19046021 48.45889282]
[197.56063843 40.22615433]
[205.54054260 34.58739090]
[214.98072815 32.30221939]
[224.54061890 33.65094376]
[232.87886047 38.40093231]
[238.84155273 45.84540558]
[253.53668213 42.83656311]
[268.23181152 39.82772064]
[276.08789062 35.00367355]
[283.29028320 36.92013168]
[298.04922485 34.24177933]
[303.53729248 17.62136078]
[316.58743286 6.09043121]
[333.58358765 2.72507405]
[349.87588501 8.35509109]
[361.05279541 21.36166382]
[375.67672729 18.02384949]
[390.30062866 14.68603611]
[404.92456055 11.34822273]
[410.22705078 1.73251367]
[419.77261353 -3.23377919]
[430.25146484 -2.10391712]
[438.17974854 4.50087547]
[452.93869019 1.82252204]
[467.69763184 -0.85583138]
[482.45657349 -3.53418493]
[497.18453979 -6.37796116]
[511.87966919 -9.38680267]
[516.65875244 -23.98323441]
[528.10650635 -34.22261047]
[543.14349365 -37.35058975]
[557.72491455 -32.52576447]
[567.92834473 -21.04598427]
[571.00915527 -5.99925518]
[566.13867188 8.56692886]
[554.62695312 18.73433876]
[539.57061768 21.76799011]
[525.01977539 16.85184669]
[514.88848877 5.30832863]
[500.19338989 8.31717014]
[494.22222900 12.77726555]
[485.13494873 11.22475910]
[470.37597656 13.90311241]
[455.61703491 16.58146667]
[440.85809326 19.25981903]
[427.15805054 32.83663559]
[408.26235962 25.97214127]
[393.63845825 29.30995560]
[379.01452637 32.64776993]
[364.39059448 35.98558426]
[361.95947266 48.47485733]
[354.93569946 59.14046478]
[344.34487915 66.36015320]
[331.75833130 69.01959991]
[319.05987549 66.68427277]
[308.16412354 59.66999435]
[300.72756958 49.00072098]
[285.96862793 51.67907715]
[271.24066162 54.52285385]
[256.54553223 57.53169250]
[241.85040283 60.54053497]
[232.21269226 78.48500824]
[212.23083496 83.72702026]
[194.53684998 72.51505280]
[180.17057800 76.82904816]
[165.80432129 81.14303589]
[151.48736572 85.61794281]
[137.22151184 90.25319672]
[122.95566559 94.88845062]
[108.68981934 99.52370453]
[110.70816040 102.66342163]
[111.44815826 106.89849854]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 39]
[5 38]
[6 37]
[7 36]
[8 35]
[11 31]
[12 30]
[13 29]
[14 28]
[15 27]
[16 26]
[17 25]
[18 24]
[19 23]
[40 58]
[41 57]
[42 56]
[43 55]
[44 54]
[45 53]
[46 52]
[59 137]
[60 136]
[61 135]
[62 134]
[64 133]
[65 132]
[66 131]
[73 128]
[74 127]
[75 126]
[77 125]
[78 124]
[83 117]
[84 116]
[85 115]
[86 114]
[90 112]
[91 111]
[92 110]
[93 109]
[94 107]
[95 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
