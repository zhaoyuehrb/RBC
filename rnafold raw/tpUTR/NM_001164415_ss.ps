%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 22:35:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGCAGCAUUUGGGCAGAAUAUGUGCUGGUCAAUAAAUGUGUCAGAAAAUGAGUAAUUUUCUGACUGCACAAAAAAGUC\
) } def
/len { sequence length } bind def

/coor [
[59.80730057 129.85615540]
[53.93215179 119.61112213]
[39.40630341 123.35274506]
[27.97235489 134.28779602]
[13.71739101 129.96977234]
[-0.80845803 133.71139526]
[-15.33430767 137.45301819]
[-29.86015701 141.19462585]
[-44.38600540 144.93624878]
[-58.91185379 148.67787170]
[-70.34580231 159.61291504]
[-84.60076904 155.29490662]
[-99.12661743 159.03651428]
[-105.70877075 173.22134399]
[-119.89067841 179.80976868]
[-134.97607422 175.69096375]
[-143.84211731 162.80967712]
[-142.30250549 147.24806213]
[-131.08419800 136.35385132]
[-115.48416138 135.27095032]
[-102.86823273 144.51066589]
[-88.34238434 140.76905823]
[-77.94742584 130.10162354]
[-62.65347290 134.15200806]
[-48.12762451 130.41040039]
[-33.60177231 126.66877747]
[-19.07592392 122.92716217]
[-4.55007505 119.18554688]
[9.97577381 115.44393158]
[20.37073517 104.77649689]
[35.66468430 108.82689667]
[50.19053268 105.08527374]
[51.75695038 86.60407257]
[59.94365311 69.96115875]
[73.62720490 57.44041061]
[90.92984009 50.76002502]
[109.47714996 50.83673477]
[126.72393036 57.66001511]
[140.30345154 70.29351807]
[153.57487488 63.30286407]
[166.84629822 56.31221390]
[179.97967529 49.06552505]
[192.97006226 41.56552505]
[205.96043396 34.06552505]
[218.95082092 26.56552315]
[231.94119263 19.06552315]
[244.93157959 11.56552315]
[257.92196655 4.06552362]
[270.91235352 -3.43447638]
[283.90270996 -10.93447685]
[296.89309692 -18.43447685]
[302.41751099 -33.49636078]
[317.68273926 -38.43123245]
[330.97857666 -29.45347595]
[332.10562134 -13.45005894]
[320.19927979 -2.69743490]
[304.39309692 -5.44409561]
[291.40270996 2.05590463]
[278.41235352 9.55590439]
[265.42196655 17.05590439]
[252.43157959 24.55590439]
[239.44119263 32.05590439]
[226.45082092 39.55590439]
[213.46043396 47.05590439]
[200.47006226 54.55590439]
[187.47967529 62.05590439]
[183.15014648 68.28900909]
[173.83695984 69.58364105]
[160.56552124 76.57429504]
[147.29409790 83.56494141]
[149.82803345 95.09999084]
[149.58958435 106.90766144]
[146.59202576 118.33100128]
[141.00215149 128.73442078]
[133.13093567 137.53909302]
[123.41637421 144.25512695]
[112.39894104 148.50885010]
[100.69164276 150.06359863]
[88.94586945 148.83287048]
[77.81512451 144.88511658]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 32]
[3 31]
[5 29]
[6 28]
[7 27]
[8 26]
[9 25]
[10 24]
[12 22]
[13 21]
[39 70]
[40 69]
[41 68]
[42 66]
[43 65]
[44 64]
[45 63]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
[51 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
