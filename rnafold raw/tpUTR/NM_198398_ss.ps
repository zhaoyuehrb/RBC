%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 23:46:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACCCUCGGUGCUUCCUCUGUCUCCUCUUUCUCCCUGGCCUGUGGUUGUCCCCCAGCCUCUGCCACCCUCCACCUCCUCGGUCAGCCCCAGCCCCAGGUUGAUAAAUCUAUUGAUUGAUUGUGAUAGUA\
) } def
/len { sequence length } bind def

/coor [
[65.22128296 249.66435242]
[48.27698517 252.21441650]
[43.33492661 266.37689209]
[38.39287186 280.53939819]
[33.45081329 294.70187378]
[33.94103241 311.64874268]
[17.79216957 316.81115723]
[8.36104965 302.72250366]
[19.28832436 289.75982666]
[24.23038292 275.59732056]
[29.17243958 261.43484497]
[34.11449814 247.27235413]
[24.81376266 238.56295776]
[19.50968933 226.92581177]
[19.03365898 214.09877014]
[23.49309921 202.01237488]
[32.24991989 192.49932861]
[44.01156616 187.01661682]
[57.02173233 186.42237854]
[62.63712692 172.51313782]
[68.25251770 158.60388184]
[73.86791229 144.69462585]
[79.48330688 130.78536987]
[71.23917389 123.26990509]
[65.61014557 113.63860321]
[63.10804749 102.76720428]
[63.96038437 91.64418793]
[68.08965302 81.28093719]
[75.12039948 72.61972809]
[84.41335297 66.44809723]
[95.12352753 63.32720947]
[96.20177460 48.36601257]
[86.13568115 36.47855759]
[87.44229889 21.32113647]
[98.83720398 11.79791641]
[99.91545105 -3.16327953]
[100.99369049 -18.12447548]
[102.07192993 -33.08567047]
[103.15017700 -48.04686737]
[94.71427155 -64.36315918]
[105.00183105 -78.52805328]
[105.72100830 -93.51080322]
[106.44017792 -108.49355316]
[99.37342834 -122.64881897]
[107.71203613 -134.99049377]
[108.43120575 -149.97323608]
[109.15038300 -164.95599365]
[109.86955261 -179.93873596]
[110.58872986 -194.92149353]
[103.52197266 -209.07675171]
[111.86058044 -221.41842651]
[112.57975769 -236.40118408]
[98.01803589 -240.22872925]
[84.57049561 -247.00053406]
[72.82500458 -256.42056274]
[63.29502106 -268.07702637]
[56.39715576 -281.46032715]
[52.43295288 -295.98544312]
[51.57571030 -311.01736450]
[53.86290359 -325.89898682]
[59.19454956 -339.97973633]
[67.33757019 -352.64404297]
[77.93598175 -363.33831787]
[90.52647400 -371.59503174]
[104.55864716 -377.05322266]
[119.41906738 -379.47430420]
[134.45809937 -378.75241089]
[149.01831055 -374.91915894]
[162.46318054 -368.14205933]
[174.20497131 -358.71740723]
[183.73036194 -347.05718994]
[190.62297058 -333.67117310]
[194.58145142 -319.14450073]
[195.43278503 -304.11224365]
[193.13973999 -289.23150635]
[187.80255127 -275.15286255]
[179.65455627 -262.49176025]
[169.05192566 -251.80166626]
[156.45819092 -243.54991150]
[142.42387390 -238.09724426]
[127.56250000 -235.68200684]
[126.84333038 -220.69924927]
[133.96153259 -207.61566162]
[125.57147980 -194.20231628]
[124.85230255 -179.21957397]
[124.13313293 -164.23681641]
[123.41395569 -149.25407410]
[122.69478607 -134.27131653]
[129.81297302 -121.18772125]
[121.42292786 -107.77438354]
[120.70375824 -92.79163361]
[119.98458099 -77.80888367]
[127.91067505 -68.58870697]
[127.37211609 -56.03939438]
[118.11137390 -46.96862411]
[117.03312683 -32.00743103]
[115.95488739 -17.04623413]
[114.87664795 -2.08503723]
[113.79840088 12.87615871]
[123.70998383 23.93492126]
[122.82962036 39.12306213]
[111.16296387 49.44425583]
[110.08472443 64.40544891]
[128.59445190 76.52594757]
[136.87715149 97.04210663]
[131.97047424 118.61618042]
[143.13368225 128.63529968]
[154.29689026 138.65443420]
[165.46009827 148.67355347]
[180.60412598 145.29154968]
[194.83038330 151.48777771]
[202.66857910 164.87965393]
[201.10476685 180.31771851]
[190.74026489 191.86573792]
[175.56044006 195.08326721]
[161.40223694 188.73307800]
[153.70977783 175.25695801]
[155.44096375 159.83676147]
[144.27777100 149.81762695]
[133.11456299 139.79850769]
[121.95135498 129.77938843]
[113.15791321 134.57662964]
[103.39985657 136.83903503]
[93.39256287 136.40075684]
[87.77716827 150.31001282]
[82.16177368 164.21926880]
[76.54637909 178.12852478]
[70.93099213 192.03778076]
[82.04946899 205.53695679]
[84.84548950 222.71099854]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 12]
[3 11]
[4 10]
[5 9]
[19 128]
[20 127]
[21 126]
[22 125]
[23 124]
[31 103]
[32 102]
[35 99]
[36 98]
[37 97]
[38 96]
[39 95]
[41 92]
[42 91]
[43 90]
[45 88]
[46 87]
[47 86]
[48 85]
[49 84]
[51 82]
[52 81]
[106 121]
[107 120]
[108 119]
[109 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
