%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:25:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCUGCGGUCCCAGGAAGGUCUUACCCCCUCUUCUAUUUAUUAAUUUGCAGACCCAGCCCCUCCCCUACUUUUUGGUCAGCUACGUCUCUAGAAUAAGAUGGUAUCUGAAGUCCUUCCA\
) } def
/len { sequence length } bind def

/coor [
[61.36373138 122.39243317]
[57.76263046 113.51033020]
[56.15924072 104.12888336]
[41.20397949 102.97125244]
[26.24871635 101.81362152]
[11.29345322 100.65599060]
[-3.66180968 99.49835205]
[-12.57994556 101.97672272]
[-18.98561096 98.11350250]
[-33.90610886 96.57118988]
[-48.82660675 95.02887726]
[-63.74710464 93.48655701]
[-80.30578613 101.41526031]
[-94.15119934 90.71520233]
[-109.10646057 89.55757141]
[-124.07538605 90.52255249]
[-138.75822449 93.59083557]
[-153.44105530 96.65911865]
[-168.12390137 99.72740173]
[-182.80673218 102.79567719]
[-197.48956299 105.86396027]
[-202.20956421 120.47961426]
[-213.61576843 130.76522827]
[-228.63998413 133.95402527]
[-243.24076843 129.18824768]
[-253.49058533 117.74984741]
[-256.63226318 102.71571350]
[-251.82075500 88.12993622]
[-240.35028076 77.91603088]
[-225.30636597 74.82147217]
[-210.73574829 79.67869568]
[-200.55784607 91.18112183]
[-185.87501526 88.11284637]
[-171.19216919 85.04456329]
[-156.50933838 81.97628021]
[-141.82650757 78.90800476]
[-127.14366913 75.83972168]
[-140.46925354 68.95287323]
[-149.19734192 56.75367355]
[-151.41323853 41.91824722]
[-146.63085938 27.70104790]
[-135.89930725 17.22089386]
[-121.57274628 12.77681541]
[-106.79401398 15.34370804]
[-94.80509949 24.35847473]
[-88.23601532 37.84354782]
[-88.52782440 52.84070969]
[-95.61650848 66.06003571]
[-107.94882965 74.60230255]
[-92.99356842 75.75994110]
[-83.53369904 68.10231781]
[-70.99407959 69.02061462]
[-62.20479202 78.56606293]
[-47.28429413 80.10837555]
[-32.36379623 81.65069580]
[-17.44329643 83.19300842]
[-2.50417781 84.54309082]
[12.45108509 85.70072174]
[27.40634727 86.85836029]
[42.36161041 88.01599121]
[57.31687546 89.17362213]
[62.87868500 74.99095917]
[73.07520294 63.34027481]
[86.82958984 55.70656586]
[102.60066986 53.13697052]
[118.55516815 56.10007477]
[132.78083801 64.41128540]
[141.15449524 51.96613312]
[135.70436096 37.43768692]
[139.86717224 22.48941994]
[152.04222107 12.86924362]
[167.54795837 12.27631474]
[180.42211914 20.93862343]
[185.71432495 35.52533722]
[181.38960266 50.42756653]
[169.11091614 59.91510010]
[153.59965515 60.33978653]
[145.22599792 72.78494263]
[151.05534363 86.60589600]
[165.81231689 89.29510498]
[180.56927490 91.98432159]
[195.32624817 94.67353058]
[210.28997803 89.53569794]
[221.42388916 99.42938995]
[236.18086243 102.11859894]
[250.93783569 104.80781555]
[265.72821045 107.30680847]
[280.54953003 109.61516571]
[295.37084961 111.92352295]
[310.19216919 114.23188019]
[321.04022217 103.13687134]
[336.34356689 100.57034302]
[350.21777344 107.51918793]
[357.32788086 121.31141663]
[354.93994141 136.64366150]
[343.97216797 147.62033081]
[328.64187622 150.02069092]
[314.84387207 142.92175293]
[307.88378906 129.05319214]
[293.06246948 126.74484253]
[278.24114990 124.43648529]
[263.41983032 122.12812042]
[256.24154663 124.23262787]
[248.24862671 119.56478119]
[233.49165344 116.87557220]
[218.73468018 114.18635559]
[204.82646179 119.51654053]
[192.63703918 109.43049622]
[177.88006592 106.74128723]
[163.12309265 104.05207825]
[148.36613464 101.36286163]
[146.65231323 111.60717773]
[142.80883789 121.18456268]
[137.04069519 129.66108704]
[129.63929749 136.65936279]
[120.96791840 141.87530518]
[111.44387054 145.09126282]
[101.51845551 146.18508911]
[91.65561676 145.13441467]
[82.31023407 142.01651001]
[73.90715027 137.00325012]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 61]
[4 60]
[5 59]
[6 58]
[7 57]
[9 56]
[10 55]
[11 54]
[12 53]
[14 50]
[15 49]
[16 37]
[17 36]
[18 35]
[19 34]
[20 33]
[21 32]
[67 78]
[68 77]
[79 111]
[80 110]
[81 109]
[82 108]
[84 106]
[85 105]
[86 104]
[87 102]
[88 101]
[89 100]
[90 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
