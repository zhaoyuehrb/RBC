%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 18:04:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCACGAUAGAGGGAAACCCAACAUUGGGAGUUAGAGUCCUGCUCCCGCCCCUUGCUGUGUGGGCUCAAUCCAGGCCCUGUCAGCAUGUUUCCAGCACUAUCCCCACUUUUCAGUGCCUCCCCUGCUCAUCUCCAAUAAAAUAAAAGCACUUAUGGAA\
) } def
/len { sequence length } bind def

/coor [
[270.95056152 279.23376465]
[262.32669067 266.96066284]
[253.70281982 254.68756104]
[245.07894897 242.41445923]
[231.43103027 236.44927979]
[229.82768250 220.70953369]
[219.58045959 219.84985352]
[211.34330750 213.33280945]
[208.01226807 203.13957214]
[210.92852783 192.59130859]
[202.79626465 179.98710632]
[194.66400146 167.38288879]
[183.79869080 157.04145813]
[170.80831909 149.54145813]
[157.81793213 142.04145813]
[144.82754517 134.54145813]
[131.83717346 127.04145050]
[118.84678650 119.54145050]
[113.79969025 124.97602081]
[107.17736816 129.04689026]
[99.36493683 131.29978943]
[90.87690735 131.39321899]
[82.32337189 129.13462830]
[74.36623383 124.50643158]
[67.66866302 117.67897034]
[62.84159851 109.00894165]
[47.93008041 110.63581085]
[33.01856613 112.26267242]
[18.10704994 113.88953400]
[3.19553375 115.51640320]
[-11.71598244 117.14326477]
[-26.62749863 118.77013397]
[-34.87046051 122.83089447]
[-41.84928513 120.27883911]
[-56.79003143 121.61077881]
[-69.88953400 131.47663879]
[-84.87552643 124.81689453]
[-86.33170319 108.48252106]
[-72.76007080 99.27692413]
[-58.12197113 106.67002869]
[-43.18122482 105.33808899]
[-28.25436401 103.85861969]
[-13.34284782 102.23175049]
[1.56866860 100.60488892]
[16.48018456 98.97801971]
[31.39170074 97.35115814]
[46.30321503 95.72428894]
[61.21473312 94.09742737]
[65.09233093 87.67758942]
[50.48460007 84.26962280]
[49.21176147 69.32372284]
[63.03283691 63.49466705]
[72.84751892 74.83792877]
[76.72511292 68.41809082]
[71.22529602 54.46273422]
[65.72547913 40.50737762]
[60.22566223 26.55201912]
[54.72584534 12.59665966]
[39.84458160 8.61493778]
[30.27319145 -3.22743917]
[29.51924324 -18.25726128]
[37.66255951 -30.70010567]
[32.16274261 -44.65546417]
[26.66292763 -58.61082077]
[21.16311073 -72.56617737]
[15.66329479 -86.52153778]
[0.77659875 -91.30905151]
[-7.50611448 -104.57293701]
[-5.27400112 -120.05039215]
[6.41900349 -130.43344116]
[22.05182076 -130.81951904]
[34.24311066 -121.02633667]
[37.23651886 -105.67793274]
[29.61865234 -92.02135468]
[35.11846924 -78.06599426]
[40.61828613 -64.11064148]
[46.11810303 -50.15528107]
[51.61791992 -36.19992447]
[66.06072998 -32.65828705]
[75.76342773 -21.15517426]
[76.84484100 -5.96689129]
[68.68120575 7.09684372]
[74.18102264 21.05220222]
[79.68083954 35.00756073]
[85.18065643 48.96291733]
[90.68046570 62.91827774]
[123.08757782 76.85419464]
[126.34678650 106.55107117]
[139.33717346 114.05107117]
[152.32754517 121.55107117]
[165.31793213 129.05107117]
[178.30831909 136.55107117]
[191.29869080 144.05107117]
[195.39083862 137.02191162]
[203.29150391 131.67990112]
[216.28189087 124.17989349]
[229.27226257 116.67989349]
[242.26264954 109.17989349]
[255.25302124 101.67989349]
[253.61921692 86.53887177]
[258.29122925 72.04431915]
[268.45962524 60.70750046]
[282.36267090 54.49258804]
[297.59158325 54.47636032]
[311.50784302 60.66162109]
[321.70040894 71.97673798]
[326.40332031 86.46130371]
[324.80175781 101.60576630]
[317.17324829 114.78627777]
[304.83947754 123.71921539]
[289.93728638 126.85690308]
[275.04861450 123.65571594]
[262.75302124 114.67027283]
[249.76264954 122.17027283]
[236.77226257 129.67027283]
[223.78189087 137.17027283]
[210.79150391 144.67027283]
[207.26821899 159.25062561]
[215.40048218 171.85482788]
[223.53274536 184.45904541]
[241.85435486 192.78205872]
[242.10078430 212.08566284]
[256.36553955 218.92869568]
[257.35205078 233.79058838]
[265.97592163 246.06369019]
[274.59979248 258.33679199]
[283.22366333 270.60989380]
[295.17251587 270.34127808]
[305.64868164 275.84024048]
[312.08224487 285.62634277]
[312.95907593 297.18438721]
[308.17565918 307.61047363]
[316.30792236 320.21469116]
[324.44018555 332.81890869]
[332.57244873 345.42312622]
[339.89462280 350.97488403]
[340.73800659 358.35769653]
[348.61965942 371.12011719]
[356.50131226 383.88253784]
[371.76483154 382.74972534]
[385.80184937 388.85061646]
[395.38674927 400.78326416]
[398.31698608 415.80566406]
[393.91921997 430.46575928]
[383.20404053 441.39474487]
[368.63366699 446.08126831]
[353.55633545 443.44836426]
[341.43664551 434.10107422]
[335.05966187 420.18731689]
[335.89071655 404.90438843]
[343.73889160 391.76419067]
[335.85723877 379.00177002]
[327.97558594 366.23934937]
[319.96823120 353.55538940]
[311.83596802 340.95117188]
[303.70370483 328.34695435]
[295.57144165 315.74276733]
[277.50955200 313.00921631]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 127]
[2 126]
[3 125]
[4 124]
[6 122]
[10 120]
[11 119]
[12 118]
[13 93]
[14 92]
[15 91]
[16 90]
[17 89]
[18 88]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[34 41]
[35 40]
[54 86]
[55 85]
[56 84]
[57 83]
[58 82]
[62 78]
[63 77]
[64 76]
[65 75]
[66 74]
[95 117]
[96 116]
[97 115]
[98 114]
[99 113]
[132 157]
[133 156]
[134 155]
[135 154]
[137 153]
[138 152]
[139 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
