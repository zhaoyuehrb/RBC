%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 22:29:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCCAGGGGGCCAGAAGGACUGACACCACAGAUGACAGCCCCACCUCCUUGAGCUUUAUUUACCUAAAUUUAAAGGUAUUUCUUAACCCGA\
) } def
/len { sequence length } bind def

/coor [
[252.10575867 176.25483704]
[253.50590515 166.20083618]
[239.62359619 160.51914978]
[225.74128723 154.83746338]
[211.76499939 149.39105225]
[197.69871521 144.18147278]
[183.63243103 138.97189331]
[169.56614685 133.76231384]
[155.49986267 128.55274963]
[141.43357849 123.34316254]
[127.36730194 118.13358307]
[118.34743500 127.22439575]
[106.53577423 132.17265320]
[93.72959900 132.22543335]
[81.87755585 127.37467957]
[72.78307343 118.35852051]
[67.83000946 106.54886627]
[67.77201843 93.74272156]
[54.08952713 87.59541321]
[44.76940536 86.89559937]
[40.05420303 81.00247192]
[26.58713531 74.39656067]
[13.12006664 67.79064178]
[-2.67725277 68.65971375]
[-10.69639301 56.10811234]
[-24.16346169 49.50220108]
[-38.38921738 55.99542236]
[-53.44667053 51.77557755]
[-62.22615433 38.83515167]
[-60.58226395 23.28421402]
[-49.29119492 12.46544456]
[-33.68424606 11.48713493]
[-21.13053703 20.81121254]
[-17.55754852 36.03513336]
[-4.09048128 42.64104462]
[10.74358273 41.29948044]
[19.72597885 54.32357788]
[33.19304657 60.92948914]
[46.66011429 67.53540039]
[60.23683167 73.91291809]
[73.91932678 80.06022644]
[87.35345459 69.70378113]
[104.16374207 67.43530273]
[119.86246490 73.86039734]
[130.25863647 87.26380157]
[132.57687378 104.06730652]
[146.64315796 109.27687836]
[160.70944214 114.48645782]
[174.77572632 119.69603729]
[188.84201050 124.90561676]
[202.90829468 130.11520386]
[216.97457886 135.32478333]
[226.32067871 135.39379883]
[231.42297363 140.95515442]
[245.30526733 146.63684082]
[259.18759155 152.31852722]
[273.61682129 136.79695129]
[293.06893921 128.48321533]
[314.18289185 128.78009033]
[333.32409668 137.60537720]
[347.21026611 153.41156006]
[353.47412109 173.45693970]
[368.45486450 174.21669006]
[383.43560791 174.97642517]
[398.41635132 175.73616028]
[413.39709473 176.49589539]
[423.03677368 164.33627319]
[437.99166870 160.19741821]
[452.51138306 165.67080688]
[461.01272583 178.65180969]
[460.22680664 194.14897156]
[450.45581055 206.20330811]
[435.45687866 210.17968750]
[420.99740601 204.54910278]
[412.63735962 191.47663879]
[397.65661621 190.71690369]
[382.67587280 189.95716858]
[367.69512939 189.19743347]
[352.71438599 188.43769836]
[349.78738403 198.04995728]
[345.01501465 206.90013123]
[338.58319092 214.63774109]
[330.74356079 220.95578003]
[321.80377197 225.60287476]
[312.11520386 228.39323425]
[302.05944824 229.21418762]
[292.03295898 228.03062439]
[282.43167114 224.88656616]
[273.63522339 219.90344238]
[265.99203491 213.27554321]
[259.80541992 205.26228333]
[255.32162476 196.17816162]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 56]
[3 55]
[4 54]
[5 52]
[6 51]
[7 50]
[8 49]
[9 48]
[10 47]
[11 46]
[18 41]
[19 40]
[21 39]
[22 38]
[23 37]
[25 35]
[26 34]
[62 79]
[63 78]
[64 77]
[65 76]
[66 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
