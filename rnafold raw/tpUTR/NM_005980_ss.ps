%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 21:46:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCCUGGAGAUGUCACAGAUUCCUGGCAGAGCCAUGGUCCCAGGCUUCCCAAAAGUGUUUGUUGGCAAUUAUUCCCCUAGGCUGAGCCUGCUCAUGUACCUCUGAUUAAUAAAUGCUUAUGAAAUGA\
) } def
/len { sequence length } bind def

/coor [
[74.94367218 127.23307037]
[64.93389130 138.40464783]
[54.92411041 149.57623291]
[44.91432953 160.74781799]
[44.82578659 173.71319580]
[36.17203522 182.82106018]
[24.03113365 183.52441406]
[13.75228024 194.44892883]
[3.47342658 205.37345886]
[-6.80542707 216.29797363]
[-10.55755043 234.27679443]
[-27.47440529 238.77534485]
[-37.48418808 249.94692993]
[-43.55079269 265.77832031]
[-60.44288254 264.33135986]
[-63.72866821 247.69885254]
[-48.65576935 239.93714905]
[-38.64598846 228.76556396]
[-38.97878647 216.60885620]
[-30.64072037 207.21113586]
[-17.72994804 206.01911926]
[-7.45109510 195.09460449]
[2.82775831 184.17007446]
[13.10661221 173.24555969]
[16.14863586 156.00714111]
[33.74274445 150.73803711]
[43.75252914 139.56645203]
[53.76231003 128.39486694]
[63.77209091 117.22328186]
[59.97809219 102.71102905]
[45.78149414 97.86782074]
[31.58489799 93.02462006]
[17.38830185 88.18141174]
[3.19170475 83.33820343]
[-6.04692268 83.52040100]
[-11.28913212 78.20034790]
[-25.36358261 73.01287842]
[-41.42441940 76.32671356]
[-52.12106323 63.89635086]
[-46.44972229 48.50908661]
[-30.24458694 45.99401474]
[-20.17610931 58.93842697]
[-6.10166025 64.12590027]
[8.03491116 69.14160919]
[22.23150826 73.98481750]
[36.42810440 78.82801819]
[50.62470245 83.67122650]
[64.82129669 88.51443481]
[81.36153412 70.31958771]
[104.41235352 67.20695496]
[122.93438721 78.95066833]
[136.10354614 71.76921844]
[144.51499939 58.36928940]
[159.39315796 59.06885529]
[172.56231689 51.88740921]
[185.73149109 44.70596313]
[198.90065002 37.52451706]
[212.06980896 30.34306908]
[225.23896790 23.16162109]
[238.40812683 15.98017502]
[251.57730103 8.79872799]
[264.74645996 1.61728108]
[277.91561890 -5.56416559]
[291.08477783 -12.74561310]
[304.25393677 -19.92705917]
[317.42309570 -27.10850716]
[330.50384521 -34.44977570]
[343.49423218 -41.94977570]
[347.61190796 -60.35855103]
[363.55038452 -69.84333038]
[381.08529663 -64.85512543]
[393.69509888 -72.97869873]
[406.30493164 -81.10227966]
[404.51043701 -96.21985626]
[409.43759155 -110.55897522]
[420.05841064 -121.29296112]
[434.22824097 -126.33045959]
[449.11868286 -124.72278595]
[461.78198242 -116.84206390]
[474.39181519 -124.96563721]
[487.00161743 -133.08921814]
[499.61145020 -141.21278381]
[512.22125244 -149.33636475]
[522.26196289 -162.99726868]
[538.16857910 -157.13067627]
[536.93463135 -140.22169495]
[520.34484863 -136.72654724]
[507.73501587 -128.60296631]
[495.12521362 -120.47939301]
[482.51538086 -112.35581970]
[469.90557861 -104.23224640]
[471.84634399 -89.44377136]
[467.15451050 -75.22068787]
[456.70980835 -64.40084839]
[442.54531860 -59.16749954]
[427.45196533 -60.60889435]
[414.42849731 -68.49245453]
[401.81866455 -60.36888123]
[389.20886230 -52.24530411]
[389.25436401 -40.71595001]
[383.62911987 -30.51404953]
[373.65048218 -24.27133942]
[361.77499390 -23.66292000]
[350.99423218 -28.95939255]
[338.00384521 -21.45939255]
[333.74017334 -15.32712078]
[324.60455322 -13.93934536]
[311.43539429 -6.75789785]
[298.26623535 0.42354894]
[285.09707642 7.60499573]
[271.92791748 14.78644276]
[258.75872803 21.96788979]
[245.58958435 29.14933586]
[232.42042542 36.33078384]
[219.25125122 43.51222992]
[206.08209229 50.69367599]
[192.91293335 57.87512589]
[179.74377441 65.05657196]
[166.57461548 72.23802185]
[159.10510254 85.12428284]
[143.28498840 84.93837738]
[130.11582947 92.11982727]
[131.79620361 102.08212280]
[130.19166565 112.29426575]
[125.32179260 121.67771149]
[117.55831909 129.19473267]
[107.60001373 133.96257019]
[96.41101837 135.35539246]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[4 26]
[7 24]
[8 23]
[9 22]
[10 21]
[12 18]
[13 17]
[30 48]
[31 47]
[32 46]
[33 45]
[34 44]
[36 43]
[37 42]
[51 122]
[52 121]
[54 119]
[55 118]
[56 117]
[57 116]
[58 115]
[59 114]
[60 113]
[61 112]
[62 111]
[63 110]
[64 109]
[65 108]
[66 107]
[67 105]
[68 104]
[71 99]
[72 98]
[73 97]
[79 91]
[80 90]
[81 89]
[82 88]
[83 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
