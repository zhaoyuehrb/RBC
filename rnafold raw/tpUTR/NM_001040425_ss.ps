%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 08:14:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCUGGCCCCCUUACCCUUCACCCCCAACAGGGACAGAUGUUCCUGGCAGGACCUCUCCUCAAAGCCCCCUUCACUCUCCUGCCCCAUCCUUCCCAGGCUCCCGGGCUCCAUAAUGUAAUCUGUUCAGCAUGGAGACCUUCUUCUACCGCCCCUGUCUUAAUAAAGCUGCGUGUUUCACUUCGGCAUCAA\
) } def
/len { sequence length } bind def

/coor [
[81.74134827 102.93836975]
[66.92033386 100.62802887]
[48.48100662 108.74925995]
[33.94715881 96.00895691]
[19.05880165 94.18226624]
[4.17044449 92.35556793]
[-10.71791267 90.52887726]
[-25.60626984 88.70217896]
[-27.75024796 96.10266113]
[-30.76729965 103.20867157]
[-34.61770630 109.91740417]
[-39.24966431 116.13133240]
[-44.59999084 121.75962830]
[-50.59496307 126.71947479]
[-57.15134811 130.93731689]
[-64.17755127 134.34992981]
[-71.57489777 136.90536499]
[-79.23902893 138.56372070]
[-87.06134033 139.29780579]
[-94.93055725 139.09352112]
[-102.73430634 137.95019531]
[-110.36071014 135.88053894]
[-117.70000458 132.91058350]
[-124.64611053 129.07936096]
[-131.09815979 124.43836212]
[-136.96197510 119.05086517]
[-142.15145874 112.99108124]
[-146.58978271 106.34310913]
[-150.21061707 99.19980621]
[-152.95909119 91.66144562]
[-154.79255676 83.83436584]
[-169.18807983 88.04970551]
[-183.58358765 92.26504517]
[-197.97911072 96.48037720]
[-212.37461853 100.69571686]
[-226.77014160 104.91105652]
[-241.16566467 109.12639618]
[-252.09365845 121.35386658]
[-268.08947754 117.73925781]
[-272.69802856 102.00097656]
[-261.17837524 90.32921600]
[-245.38099670 94.73088074]
[-230.98547363 90.51554108]
[-216.58996582 86.30020142]
[-202.19444275 82.08486176]
[-187.79893494 77.86952209]
[-173.40341187 73.65418243]
[-159.00788879 69.43885040]
[-156.57701111 54.63713074]
[-168.86817932 46.03903961]
[-181.15934753 37.44095230]
[-193.45051575 28.84286118]
[-205.74168396 20.24477196]
[-218.03285217 11.64668179]
[-229.28077698 21.67569923]
[-242.53863525 28.83990479]
[-257.09146118 32.75294113]
[-272.15444946 33.20378494]
[-286.91525269 30.16812134]
[-300.57785034 23.80965996]
[-312.40545654 14.47130489]
[-321.76016235 2.65666223]
[-328.13754272 -10.99711895]
[-331.19366455 -25.75370789]
[-330.76367188 -40.81730270]
[-326.87078857 -55.37553787]
[-319.72497559 -68.64331055]
[-309.71154785 -79.90510559]
[-297.37054443 -88.55358124]
[-283.36746216 -94.12235260]
[-268.45755005 -96.31108093]
[-253.44479370 -95.00175476]
[-239.13887024 -90.26496124]
[-226.31126404 -82.35617065]
[-215.65373230 -71.70187378]
[-207.74104309 -58.87666321]
[-202.99992371 -44.57217407]
[-201.68603516 -29.55982971]
[-203.87025452 -14.64923191]
[-209.43476868 -0.64448786]
[-197.14360046 7.95360184]
[-184.85243225 16.55169106]
[-172.56126404 25.14978218]
[-160.27009583 33.74787140]
[-147.97891235 42.34596252]
[-138.56115723 29.08605385]
[-126.28347015 18.51772118]
[-111.88455200 11.23606682]
[-96.22103119 7.63968611]
[-80.21652985 7.90895700]
[-64.80720520 11.99724007]
[-50.88696289 19.63541412]
[-39.25564957 30.34937096]
[-30.57307816 43.48934937]
[-25.32163811 58.26928711]
[-23.77957726 73.81382751]
[-8.89121914 75.64051819]
[5.99713850 77.46720886]
[20.88549614 79.29390717]
[35.77385330 81.12059784]
[43.24209595 74.11936188]
[53.54882431 72.35560608]
[63.32262421 76.65171814]
[69.23067474 85.80702209]
[84.05168152 88.11735535]
[107.92697144 74.92513275]
[119.47843933 65.35624695]
[131.02990723 55.78736496]
[142.50312805 46.12478256]
[153.89730835 36.36914444]
[165.29150391 26.61350632]
[176.68568420 16.85786819]
[188.07987976 7.10222960]
[199.47406006 -2.65340853]
[200.84536743 -18.16976357]
[212.53967285 -27.90105438]
[227.32368469 -26.49810028]
[238.71788025 -36.25373840]
[236.51094055 -51.52243042]
[242.93000793 -65.55094147]
[255.92678833 -73.86282349]
[271.35403442 -73.80577850]
[284.28900146 -65.39801788]
[290.60415649 -51.32242584]
[288.28439331 -36.07047272]
[278.06988525 -24.50899696]
[263.22009277 -20.32722664]
[248.47351074 -24.85955048]
[237.07933044 -15.10391235]
[236.18847656 -0.28021631]
[224.77210999 9.77570248]
[209.22970581 8.74077988]
[197.83551025 18.49641800]
[186.44132996 28.25205612]
[175.04713440 38.00769424]
[163.65295410 47.76333237]
[152.25875854 57.51897049]
[149.21792603 64.26762390]
[140.59880066 67.33883667]
[129.04733276 76.90771484]
[117.49585724 86.47660065]
[132.22079468 83.61718750]
[146.94572449 80.75777435]
[161.67066956 77.89835358]
[176.39559937 75.03894043]
[188.58110046 66.29172516]
[202.62963867 61.03451157]
[217.56402588 59.63299179]
[232.34539795 62.18465424]
[245.94557190 68.51200867]
[257.41848755 78.17491913]
[265.96612549 90.50122833]
[270.99389648 104.63352203]
[272.15203857 119.58874512]
[269.36001587 134.32661438]
[262.81204224 147.82194519]
[252.96360779 159.13600159]
[240.49974060 167.48179626]
[226.28746033 172.27876282]
[211.31535339 173.19323730]
[196.62490845 170.16160583]
[183.23799133 163.39476013]
[172.08578491 153.36338806]
[163.94566345 140.76867676]
[151.28639221 132.72238159]
[138.62712097 124.67610168]
[125.96783447 116.62982178]
[113.30856323 108.58353424]
[120.56052399 121.71399689]
[127.81249237 134.84445190]
[135.06446838 147.97491455]
[151.04743958 157.10552979]
[150.04748535 174.61953735]
[157.51222229 187.63021851]
[164.97694397 200.64089966]
[178.10372925 211.37046814]
[171.42733765 226.95449829]
[154.60412598 224.85310364]
[151.96626282 208.10562134]
[144.50154114 195.09494019]
[137.03680420 182.08427429]
[125.43852997 178.61488342]
[119.11596680 167.82360840]
[121.93399811 155.22688293]
[114.68203735 142.09642029]
[107.43006897 128.96595764]
[100.17810059 115.83550262]
[100.53444672 130.83126831]
[90.74313354 142.19480896]
[75.85943604 144.05911255]
[63.56784439 135.46162415]
[60.21453094 120.84125519]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 105]
[2 104]
[4 100]
[5 99]
[6 98]
[7 97]
[8 96]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
[49 85]
[50 84]
[51 83]
[52 82]
[53 81]
[54 80]
[106 141]
[107 140]
[108 139]
[109 137]
[110 136]
[111 135]
[112 134]
[113 133]
[114 132]
[117 129]
[118 128]
[168 187]
[169 186]
[170 185]
[171 184]
[173 181]
[174 180]
[175 179]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
