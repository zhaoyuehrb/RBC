%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:40:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGUCCCUGUCAUUCACUCGGGUGCGUGUGUUUGUAUGUCUGUGUAUGUAUAGGGGAAAGAAGGGAUCCCUAACUGUUCCCUUAUCUGUUUUCUACCUCCUCCUUUGUUUAAUAAAGGCUGAAGCUUUUUGUACUCAUGA\
) } def
/len { sequence length } bind def

/coor [
[32.37459564 151.80114746]
[27.07380486 144.02639771]
[22.66286469 135.71444702]
[19.19559860 126.96669769]
[4.60421896 130.44400024]
[-9.98716068 133.92129517]
[-24.57854080 137.39860535]
[-39.16992188 140.87590027]
[-53.76129913 144.35321045]
[-68.35268402 147.83050537]
[-82.90441895 151.47015381]
[-97.41470337 155.27166748]
[-111.92499542 159.07318115]
[-123.31372070 170.05532837]
[-137.58638000 165.79615784]
[-152.09666443 169.59768677]
[-166.60696411 173.39920044]
[-174.61555481 186.75959778]
[-189.38520813 190.40817261]
[-202.07293701 182.69085693]
[-213.46166992 193.67300415]
[-227.73432922 189.41383362]
[-242.24462891 193.21534729]
[-256.75491333 197.01687622]
[-271.26519775 200.81838989]
[-285.77548218 204.61991882]
[-293.53637695 218.38740540]
[-308.78149414 222.55418396]
[-322.46618652 214.64814758]
[-326.47152710 199.35983276]
[-318.42126465 185.75950623]
[-303.09146118 181.91601562]
[-289.57699585 190.10961914]
[-275.06671143 186.30810547]
[-260.55642700 182.50659180]
[-246.04614258 178.70506287]
[-231.53585815 174.90354919]
[-221.18499756 164.19331360]
[-205.87446594 168.18057251]
[-198.60052490 155.23355103]
[-183.93919373 151.17155457]
[-170.40847778 158.88891602]
[-155.89819336 155.08738708]
[-141.38790894 151.28587341]
[-131.03704834 140.57563782]
[-115.72650909 144.56289673]
[-101.21622467 140.76138306]
[-86.70594025 136.95985413]
[-80.98649597 132.18331909]
[-71.82998657 133.23913574]
[-57.23860168 129.76182556]
[-42.64722443 126.28452301]
[-28.05584335 122.80722046]
[-13.46446323 119.32992554]
[1.12691665 115.85262299]
[15.71829700 112.37532043]
[16.40051460 83.63906860]
[26.60144424 56.76568604]
[45.15959549 34.81500244]
[69.96192169 20.28633881]
[98.18441010 14.83394051]
[99.18630219 -0.13256235]
[100.18818665 -15.09906578]
[101.19007874 -30.06556892]
[102.19197083 -45.03207016]
[103.19385529 -59.99857330]
[90.11361694 -67.94627380]
[82.23506165 -81.06827545]
[81.36862183 -96.34924316]
[87.71340179 -110.27770996]
[99.81141663 -119.65303040]
[114.88262939 -122.32082367]
[129.46379089 -117.66803741]
[140.20425415 -106.76386261]
[144.63592529 -92.11399078]
[141.74046326 -77.08485413]
[132.18321228 -65.13004303]
[118.16036224 -58.99668503]
[117.15847015 -44.03018188]
[116.15658569 -29.06367874]
[115.15469360 -14.09717560]
[114.15280151 0.86932713]
[113.15091705 15.83583069]
[121.58116150 17.59364510]
[129.79086304 20.19361687]
[137.69610596 23.60917854]
[145.21611023 27.80542183]
[152.27403259 32.73946381]
[158.79772949 38.36088181]
[164.72053528 44.61222458]
[169.98193359 51.42960739]
[174.52813721 58.74335861]
[178.31269836 66.47873688]
[181.29693604 74.55668640]
[183.45034790 82.89466095]
[184.75094604 91.40744019]
[185.18540955 100.00803375]
[184.74931335 108.60855103]
[199.48110962 111.43239594]
[212.46615601 102.82852936]
[227.36605835 105.90216827]
[235.48851013 118.33444214]
[250.22032166 121.15829468]
[264.95211792 123.98213959]
[279.68389893 126.80599213]
[294.41571045 129.62983704]
[309.14749146 132.45368958]
[323.87930298 135.27754211]
[340.57348633 132.32113647]
[348.03576660 147.54449463]
[335.47311401 158.92939758]
[321.05545044 150.00933838]
[306.32366943 147.18548584]
[291.59185791 144.36163330]
[276.86004639 141.53779602]
[262.12826538 138.71394348]
[247.39646912 135.89009094]
[232.66467285 133.06623840]
[220.52072144 141.61376953]
[205.54035950 138.95983887]
[196.65727234 126.16419220]
[181.92546082 123.34034729]
[178.85133362 132.23387146]
[174.81503296 140.73406982]
[169.86584473 148.73722839]
[164.06414795 156.14569092]
[157.48074341 162.86906433]
[150.19593811 168.82530212]
[142.29864502 173.94172668]
[133.88522339 178.15589905]
[125.05833435 181.41642761]
[115.92568207 183.68348694]
[106.59869385 184.92944336]
[97.19119263 185.13908386]
[87.81797028 184.30986023]
[78.59338379 182.45187378]
[69.63000488 179.58779907]
[61.03720856 175.75259399]
[52.91983795 170.99304199]
[45.37693787 165.36723328]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 56]
[5 55]
[6 54]
[7 53]
[8 52]
[9 51]
[10 50]
[11 48]
[12 47]
[13 46]
[15 44]
[16 43]
[17 42]
[20 39]
[22 37]
[23 36]
[24 35]
[25 34]
[26 33]
[61 83]
[62 82]
[63 81]
[64 80]
[65 79]
[66 78]
[98 122]
[99 121]
[102 118]
[103 117]
[104 116]
[105 115]
[106 114]
[107 113]
[108 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
