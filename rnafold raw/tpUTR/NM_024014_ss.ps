%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 14:07:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCUGGGCAGGGACCAGGCCAGCGCUGCAACCUCCUUCGGCUUUGCCCCCUUGCCCUCGCCUGUUCCCCAACU\
) } def
/len { sequence length } bind def

/coor [
[148.06684875 273.18026733]
[154.23944092 259.33560181]
[164.77716064 248.43916321]
[158.18920898 234.96330261]
[144.06211853 230.38497925]
[137.18904114 216.81239319]
[142.08697510 202.02563477]
[135.49902344 188.54977417]
[128.91107178 175.07391357]
[122.32312775 161.59805298]
[115.73518372 148.12217712]
[109.14723206 134.64631653]
[102.55928040 121.17045593]
[95.97133636 107.69458771]
[92.83081818 106.44898224]
[90.14261627 103.89897156]
[88.44450378 100.23976898]
[88.18089294 95.88337708]
[89.61816406 91.41281891]
[85.33811951 77.03640747]
[73.98479462 66.01766968]
[77.76888275 51.61177063]
[73.48883820 37.23535919]
[69.20879364 22.85894775]
[57.85546494 11.84021568]
[61.63955307 -2.56568408]
[57.35951233 -16.94209671]
[53.07946777 -31.31850815]
[48.79942322 -45.69491959]
[33.84155273 -49.18170547]
[22.64202690 -59.69199371]
[18.21345711 -74.39856720]
[21.74711227 -89.34543610]
[32.29245377 -100.51196289]
[47.01283646 -104.89441681]
[61.94855499 -101.31392670]
[73.08197784 -90.73363495]
[77.41825867 -75.99958801]
[73.79097748 -61.07516479]
[63.17583847 -49.97496414]
[67.45587921 -35.59855270]
[71.73592377 -21.22213936]
[76.01596832 -6.84572744]
[87.06315613 3.14470792]
[83.58520508 18.57890511]
[87.86524963 32.95531464]
[92.14529419 47.33172989]
[103.19248962 57.32216263]
[99.71453857 72.75636292]
[103.99457550 87.13277435]
[109.44719696 101.10663605]
[116.03514862 114.58250427]
[122.62309265 128.05836487]
[129.21104431 141.53424072]
[135.79899597 155.01010132]
[142.38694763 168.48596191]
[148.97488403 181.96182251]
[155.56283569 195.43769836]
[170.24003601 200.65473938]
[176.72918701 214.41502380]
[171.66508484 228.37535095]
[178.25302124 241.85121155]
[193.32424927 240.22819519]
[208.04092407 243.86073303]
[220.62593079 252.31016541]
[229.55960083 264.55621338]
[233.76312256 279.12008667]
[232.72891235 294.24310303]
[226.58184814 308.09915161]
[216.06422424 319.01498413]
[202.44609070 325.67245483]
[187.37190247 327.26770020]
[172.66195679 323.60806274]
[160.09252930 315.13543701]
[151.18144226 302.87295532]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 62]
[4 61]
[7 58]
[8 57]
[9 56]
[10 55]
[11 54]
[12 53]
[13 52]
[14 51]
[19 50]
[20 49]
[22 47]
[23 46]
[24 45]
[26 43]
[27 42]
[28 41]
[29 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
