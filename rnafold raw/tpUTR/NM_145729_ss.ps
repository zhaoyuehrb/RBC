%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 00:01:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUGGGGCAGAGCAGCUCCUCCCCAACUUCUGUCCCAGCCUUGAAGGCUGAGGCACUUCUUUUUCAGAUGCCAAUAAAGAGCACUUUAUGAGUCC\
) } def
/len { sequence length } bind def

/coor [
[101.00058746 161.78300476]
[83.36830139 159.51074219]
[67.11276245 152.31225586]
[53.57958984 140.78341675]
[41.19252777 149.24276733]
[28.80546761 157.70213318]
[16.41840553 166.16148376]
[4.03134298 174.62083435]
[0.98162246 189.89620972]
[-11.70112705 198.29873657]
[-26.24506378 195.29716492]
[-38.63212585 203.75651550]
[-51.01918793 212.21588135]
[-60.68933487 226.14155579]
[-76.74775696 220.70433044]
[-75.96843719 203.76831055]
[-59.47854233 199.82881165]
[-47.09148026 191.36946106]
[-34.70441818 182.91009521]
[-32.20758820 168.27105713]
[-19.76585197 159.51560974]
[-4.42801237 162.23377991]
[7.95904970 153.77442932]
[20.34611130 145.31506348]
[32.73317337 136.85571289]
[45.12023544 128.39636230]
[39.50238419 112.57696533]
[38.34980392 95.82927704]
[41.74757004 79.38942719]
[49.44489288 64.47081757]
[60.87363815 52.17459488]
[75.19026947 43.40831375]
[70.87960052 29.04105568]
[66.56893158 14.67379570]
[62.25827026 0.30653554]
[50.88148499 -10.68798065]
[54.63487244 -25.10190964]
[50.32420349 -39.46916962]
[46.01353836 -53.83642960]
[41.70287323 -68.20368958]
[37.39220810 -82.57095337]
[33.08153915 -96.93820953]
[22.73843765 -110.37162018]
[32.78361130 -124.02925110]
[48.68827438 -118.15745544]
[47.44879913 -101.24887848]
[51.75946426 -86.88161469]
[56.07013321 -72.51435852]
[60.38079834 -58.14709473]
[64.69146729 -43.77983475]
[69.00212860 -29.41257668]
[80.07058716 -19.44570351]
[76.62552643 -4.00413084]
[80.93619537 10.36312866]
[85.24686432 24.73038864]
[89.55752563 39.09764862]
[100.76195526 38.21358490]
[111.94117737 39.37368774]
[122.72532654 42.53956985]
[132.75762939 47.60649490]
[141.70616150 54.40682602]
[149.27487183 62.71557999]
[155.21336365 72.25786591]
[159.32514954 82.71797943]
[161.47419739 93.74986267]
[161.58941650 104.98851776]
[159.66699219 116.06214142]
[155.77050781 126.60435486]
[168.42500305 134.65815735]
[181.07949829 142.71195984]
[192.17860413 137.85398865]
[204.11474609 139.03662109]
[213.84622192 145.83940125]
[218.95147705 156.42500305]
[218.23120117 168.03398132]
[230.33782959 176.89001465]
[242.44447327 185.74604797]
[254.55110168 194.60208130]
[266.65774536 203.45811462]
[278.76437378 212.31414795]
[295.11746216 213.54225159]
[301.98568726 228.43383789]
[292.30358887 241.66973877]
[276.03131104 239.63398743]
[269.90835571 224.42079163]
[257.80169678 215.56475830]
[245.69506836 206.70872498]
[233.58843994 197.85267639]
[221.48179626 188.99664307]
[209.37516785 180.14060974]
[191.65274048 184.12493896]
[176.27642822 173.87615967]
[173.02569580 155.36645508]
[160.37120056 147.31265259]
[147.71670532 139.25885010]
[134.56394958 151.21986389]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 26]
[5 25]
[6 24]
[7 23]
[8 22]
[11 19]
[12 18]
[13 17]
[32 56]
[33 55]
[34 54]
[35 53]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
[42 46]
[68 95]
[69 94]
[70 93]
[75 90]
[76 89]
[77 88]
[78 87]
[79 86]
[80 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
