%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 14:50:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGUCCCGACUGCCACACGAGACUGACUGGGGACCAGCCACCCAUAACCAUGAGCCUUGCGGCACGGUGAGCUCAGCACCCACAGAGAGACUUCUUGUGAUUAAAAGAAACAAACCCAUGC\
) } def
/len { sequence length } bind def

/coor [
[202.34432983 521.38684082]
[197.04324341 507.35482788]
[195.05766296 492.48791504]
[188.40187073 505.93041992]
[181.74606323 519.37292480]
[188.18650818 533.62261963]
[183.91085815 548.66430664]
[170.93797302 557.39575195]
[155.39323425 555.69421387]
[144.61640930 544.36315918]
[143.69596863 528.75268555]
[153.06652832 516.23364258]
[168.30358887 512.71710205]
[174.95938110 499.27462769]
[181.61517334 485.83212280]
[180.68476868 479.23654175]
[183.66806030 472.54135132]
[181.37832642 457.71716309]
[179.08859253 442.89294434]
[176.79884338 428.06872559]
[174.50910950 413.24453735]
[172.21937561 398.42031860]
[169.92962646 383.59613037]
[167.07376099 368.87048340]
[163.65596008 354.26507568]
[150.90512085 346.65246582]
[147.23092651 331.88916016]
[155.30218506 318.56652832]
[151.88438416 303.96109009]
[148.46658325 289.35565186]
[144.86253357 274.79507446]
[141.07284546 260.28167725]
[137.28315735 245.76831055]
[120.62538147 240.18916321]
[110.49002075 225.65029907]
[111.02676392 207.77964783]
[122.20951843 193.63088989]
[117.68370819 179.32994080]
[113.15790558 165.02899170]
[108.44983673 150.78701782]
[103.56027222 136.60630798]
[98.67071533 122.42561340]
[93.78115845 108.24491882]
[86.61535645 95.06723785]
[77.37037659 83.25493622]
[68.12539673 71.44264221]
[52.72116089 65.81755829]
[50.15741348 49.62005234]
[63.07151794 39.51272964]
[78.17855072 45.89313889]
[79.93769073 62.19766235]
[89.18267059 74.00995636]
[98.42765045 85.82225037]
[105.38391876 83.01862335]
[126.25272369 74.60774231]
[124.72290802 59.68595505]
[123.19308472 44.76417160]
[113.15450287 31.79656601]
[119.61505890 16.72363472]
[135.92869568 15.05111980]
[145.31333923 28.49955940]
[138.11486816 43.23435211]
[139.64468384 58.15613556]
[141.17451477 73.07791901]
[134.53993225 91.06616974]
[122.09949493 101.61321259]
[107.96185303 103.35536194]
[112.85140991 117.53605652]
[117.74097443 131.71675110]
[122.63053131 145.89746094]
[128.45195007 153.09071350]
[127.45884705 160.50318909]
[131.98464966 174.80413818]
[136.51046753 189.10508728]
[148.91465759 191.50012207]
[159.03701782 198.93704224]
[164.96104431 209.93055725]
[165.59828186 222.32960510]
[160.88793945 233.73826599]
[151.79653931 241.97862244]
[155.58622742 256.49200439]
[159.37591553 271.00537109]
[164.62962341 278.62316895]
[163.07200623 285.93786621]
[166.48980713 300.54330444]
[169.90760803 315.14871216]
[183.05230713 323.50662231]
[186.31039429 338.36730957]
[178.26139832 350.84725952]
[181.67919922 365.45269775]
[185.42219543 369.42126465]
[187.02473450 373.98330688]
[186.63157654 378.19207764]
[184.75384521 381.30639648]
[187.04357910 396.13058472]
[189.33331299 410.95480347]
[191.62306213 425.77899170]
[193.91279602 440.60321045]
[196.20252991 455.42742920]
[198.49227905 470.25161743]
[204.87155151 456.67572021]
[214.15954590 444.89721680]
[225.87364197 435.52813721]
[239.40516663 429.05526733]
[254.05099487 425.81497192]
[269.05014038 425.97561646]
[283.62322998 429.52886963]
[297.01300049 436.29003906]
[308.52374268 445.90789795]
[317.55734253 457.88262939]
[323.64437866 471.59204102]
[326.46859741 486.32376099]
[325.88323975 501.31234741]
[321.91870117 515.77893066]
[314.78100586 528.97186279]
[304.84103394 540.20562744]
[292.61529541 548.89642334]
[278.73898315 554.59277344]
[263.93319702 556.99865723]
[248.96720886 555.98907471]
[234.61868286 551.61645508]
[221.63317871 544.10797119]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 15]
[4 14]
[5 13]
[17 100]
[18 99]
[19 98]
[20 97]
[21 96]
[22 95]
[23 94]
[24 90]
[25 89]
[28 86]
[29 85]
[30 84]
[31 82]
[32 81]
[33 80]
[37 74]
[38 73]
[39 72]
[40 70]
[41 69]
[42 68]
[43 67]
[44 53]
[45 52]
[46 51]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
