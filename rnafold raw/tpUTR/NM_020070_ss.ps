%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 14:08:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCCCAGCCCCGACCCCACCCAAAGGGGCCUGGAGCUGCAGGAUCCCAGGGGAAGGGUCUCUCUCUGCAUCCCAAGCCAUCCAGCCCUUCUCCCUGUACCCAGUAAACCCUAAAUAAAUACCCUCUUUGUCAACCAGAA\
) } def
/len { sequence length } bind def

/coor [
[89.39589691 220.43702698]
[78.15971375 230.37423706]
[66.92353821 240.31146240]
[55.68735504 250.24867249]
[44.45117569 260.18588257]
[43.32902145 275.72225952]
[31.79237556 285.63992310]
[16.98774529 284.47439575]
[5.75156450 294.41159058]
[-5.48461676 304.34881592]
[-16.72079849 314.28604126]
[-27.95697784 324.22323608]
[-23.34002113 338.73544312]
[-25.03131104 353.87014771]
[-32.73781967 367.00518799]
[-45.12435532 375.86486816]
[-60.04486847 378.91415405]
[-74.91429138 375.62475586]
[-87.15641022 366.56658936]
[-94.65019989 353.30902100]
[-96.09732056 338.14901733]
[-91.24703979 323.71313477]
[-80.93971252 312.50247192]
[-66.96113586 306.45935059]
[-51.73318481 306.63079834]
[-37.89419174 312.98706055]
[-26.65801239 303.04983521]
[-15.42183113 293.11264038]
[-4.18565035 283.17541504]
[7.05053091 273.23822021]
[7.70341206 258.40213013]
[18.95693779 248.16430664]
[34.51395798 248.94970703]
[45.75014114 239.01249695]
[56.98632050 229.07527161]
[68.22250366 219.13806152]
[79.45868683 209.20085144]
[86.07427216 195.73852539]
[87.07616425 180.77203369]
[88.07805634 165.80552673]
[81.20812225 152.58987427]
[89.84989166 139.33732605]
[90.85177612 124.37081909]
[80.02034760 116.68652344]
[74.38909149 104.65916443]
[75.42368317 91.41914368]
[82.85484314 80.41249847]
[94.74843597 74.50396729]
[96.08351898 59.56349945]
[97.41859436 44.62303162]
[98.75367737 29.68256569]
[100.08875275 14.74209785]
[101.25730896 -0.21231557]
[102.25920105 -15.17881870]
[103.26109314 -30.14532280]
[104.26297760 -45.11182404]
[105.26486969 -60.07832718]
[106.26676178 -75.04483032]
[103.70265198 -83.89817810]
[107.46134949 -90.33243561]
[108.79643250 -105.27290344]
[96.35726166 -112.07131958]
[87.48748016 -123.07356262]
[83.50767517 -136.58866882]
[84.99015045 -150.55569458]
[91.67685699 -162.85794067]
[102.52362061 -171.64381409]
[115.86301422 -175.60537720]
[117.53061676 -190.51239014]
[106.61300659 -201.70791626]
[105.49752808 -217.30566406]
[114.71088409 -229.94085693]
[129.90280151 -233.64753723]
[143.90013123 -226.67553711]
[150.09375000 -212.31681824]
[145.55923462 -197.35112000]
[132.43763733 -188.84478760]
[130.77001953 -173.93777466]
[144.44107056 -165.73623657]
[153.21490479 -152.35580444]
[155.30200195 -136.43348694]
[150.23670959 -121.13362122]
[138.97982788 -109.51902008]
[123.73690033 -103.93782043]
[122.40181732 -88.99735260]
[121.23326111 -74.04293823]
[120.23136902 -59.07643890]
[119.22948456 -44.10993576]
[118.22759247 -29.14343262]
[117.22570038 -14.17692947]
[116.22381592 0.78957397]
[118.93743134 7.72958374]
[115.02922058 16.07717705]
[113.69414520 31.01764297]
[112.35906219 45.95811081]
[111.02398682 60.89857864]
[109.68890381 75.83904266]
[122.11415100 86.26715851]
[125.95214844 102.02793121]
[119.71255493 117.00123596]
[105.81828308 125.37270355]
[104.81639099 140.33920288]
[111.61466217 154.62535095]
[103.04455566 166.80741882]
[102.04266357 181.77391052]
[101.04077911 196.74041748]
[110.55101013 185.14062500]
[121.85099030 175.27601624]
[134.62863159 167.41903687]
[148.53102112 161.78669739]
[163.17424011 158.53454590]
[178.15382385 157.75239563]
[193.05610657 159.46185303]
[207.46948242 163.61569214]
[220.99589539 170.09922791]
[233.26177979 178.73335266]
[243.92835999 189.27963257]
[252.70104980 201.44680786]
[259.33755493 214.89881897]
[263.65460205 229.26416016]
[265.53295898 244.14608765]
[264.92077637 259.13357544]
[261.83489990 273.81274414]
[256.36059570 287.77810669]
[248.64904785 300.64404297]
[238.91322327 312.05517578]
[227.42202759 321.69635010]
[214.49282837 329.30133057]
[200.48268127 334.66003418]
[185.77851868 337.62448120]
[170.78648376 338.11282349]
[155.92057800 336.11154175]
[141.59140015 331.67593384]
[128.19468689 324.92846680]
[116.10044098 316.05554199]
[105.64266205 305.30218506]
[97.11018372 292.96536255]
[90.73866272 279.38583374]
[86.70406342 264.93862915]
[85.11782074 250.02272034]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 37]
[2 36]
[3 35]
[4 34]
[5 33]
[8 30]
[9 29]
[10 28]
[11 27]
[12 26]
[38 106]
[39 105]
[40 104]
[42 102]
[43 101]
[48 97]
[49 96]
[50 95]
[51 94]
[52 93]
[53 91]
[54 90]
[55 89]
[56 88]
[57 87]
[58 86]
[60 85]
[61 84]
[68 78]
[69 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
