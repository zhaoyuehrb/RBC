%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 03:18:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUGACCUGGUCUAUAUUCCCUAGAGUUCCAGUCUCUUUUGCUUAGGACAUGUUGCCCCUACCUAAAGUCCUGCAAUAAAAUCAGCAGUCAAAACAUGA\
) } def
/len { sequence length } bind def

/coor [
[80.93132782 287.61145020]
[82.01600647 272.38693237]
[89.60639191 259.14498901]
[102.19541168 250.51484680]
[99.87194061 235.69589233]
[97.54846954 220.87693787]
[95.22499847 206.05796814]
[92.44178009 191.31845093]
[89.20151520 176.67260742]
[85.96124268 162.02676392]
[82.72097778 147.38092041]
[79.48071289 132.73507690]
[81.42911530 147.60800171]
[76.50399780 161.77638245]
[65.75040436 172.23393250]
[51.45007324 176.76168823]
[36.63732910 174.39895630]
[24.45520592 165.64704895]
[17.48856735 152.36299133]
[17.21562767 137.36547852]
[23.69430351 123.83673859]
[35.54991531 114.64736938]
[50.26688385 111.74722290]
[64.72231293 115.75156403]
[50.67177963 110.49966431]
[36.62124252 105.24777222]
[22.57070732 99.99587250]
[9.05113125 107.85431671]
[-6.34786081 105.13309479]
[-16.35533714 93.11708832]
[-16.24607277 77.47988129]
[-6.07166052 65.60489655]
[9.36385536 63.09912872]
[22.77229500 71.14572906]
[27.82260323 85.94533539]
[41.87313843 91.19723511]
[55.92367554 96.44912720]
[69.97421265 101.70102692]
[82.13796234 79.85039520]
[104.18260193 76.59082031]
[111.34340668 63.41041946]
[118.50420380 50.23001862]
[125.66500092 37.04961777]
[125.88368225 30.15242004]
[129.16339111 25.23782921]
[133.70292664 23.29272270]
[141.66929626 10.58300209]
[149.63565063 -2.12671828]
[157.60202026 -14.83643913]
[165.56838989 -27.54615974]
[155.84637451 -39.13656235]
[150.18368530 -53.16472244]
[149.13511658 -68.25630188]
[152.80339050 -82.93277740]
[160.82913208 -95.75630188]
[172.42604065 -105.47055054]
[186.45799255 -111.12383270]
[201.55027771 -112.16228485]
[216.22428894 -108.48417664]
[229.04243469 -100.44985199]
[238.74891663 -88.84643555]
[244.39279175 -74.81069946]
[245.42112732 -59.71772766]
[241.73318481 -45.04618073]
[233.69027710 -32.23342514]
[222.08035278 -22.53472137]
[208.04083252 -16.90025139]
[192.94718933 -15.88202286]
[178.27810669 -19.57979202]
[170.31173706 -6.87007189]
[162.34538269 5.83964872]
[154.37901306 18.54936981]
[146.41264343 31.25909042]
[138.84539795 44.21041489]
[131.68460083 57.39081573]
[124.52380371 70.57122040]
[117.36300659 83.75161743]
[124.27065277 93.84593201]
[125.44319153 106.64856720]
[119.98298645 118.97448730]
[108.71777344 127.46473694]
[94.12654877 129.49481201]
[97.36682129 144.14065552]
[100.60708618 158.78649902]
[103.84735107 173.43234253]
[107.08762360 188.07817078]
[111.44662476 193.42778015]
[112.19464111 199.28868103]
[110.04395294 203.73449707]
[112.36742401 218.55345154]
[114.69089508 233.37242126]
[117.01437378 248.19137573]
[131.64059448 252.55441284]
[142.91954041 262.83782959]
[148.61174011 276.99978638]
[147.58702087 292.22848511]
[140.04884338 305.50018311]
[127.49390411 314.17984009]
[112.41500854 316.54406738]
[97.80607605 312.12347412]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 92]
[5 91]
[6 90]
[7 89]
[8 86]
[9 85]
[10 84]
[11 83]
[12 82]
[24 38]
[25 37]
[26 36]
[27 35]
[40 77]
[41 76]
[42 75]
[43 74]
[46 73]
[47 72]
[48 71]
[49 70]
[50 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
