%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 19:14:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUGUAAAAACUUUCAUCCUGGUUUCCACUGUCUUUCAAUGACACCCUGAUCUUCACUGCAGAAUGUAAAGGUUUCAACGUCUUGCUUUAAUAAAUCACUUGCUCUCCA\
) } def
/len { sequence length } bind def

/coor [
[78.38013458 138.80097961]
[71.34343719 134.31723022]
[65.22692108 128.56237793]
[60.25915527 121.72361755]
[48.12389755 130.54040527]
[45.52066803 145.89816284]
[33.08819580 154.66676331]
[18.46295738 152.09033203]
[6.32770300 160.90711975]
[-5.80755186 169.72389221]
[-17.94280624 178.54066467]
[-30.07806206 187.35745239]
[-29.94339561 202.87394714]
[-38.98220062 215.48661804]
[-53.71886826 220.34565735]
[-68.48685455 215.58264160]
[-77.60755920 203.02906799]
[-77.57389832 187.51202393]
[-68.39879608 174.99813843]
[-53.61028671 170.29925537]
[-38.89484024 175.22219849]
[-26.75958633 166.40541077]
[-14.62433052 157.58863831]
[-2.48907566 148.77185059]
[9.64617920 139.95507812]
[11.71529961 125.24948883]
[23.89657593 116.13515472]
[39.30712128 118.40514374]
[51.44237518 109.58836365]
[50.79997253 94.60212708]
[37.95473862 86.85616302]
[25.10950279 79.11020660]
[12.26426697 71.36424255]
[-2.46979356 76.60269928]
[-17.10583305 71.09630585]
[-24.73316193 57.44501495]
[-21.75038719 42.09453964]
[-9.56588554 32.29291153]
[6.06719542 32.66815567]
[17.76739120 43.04309845]
[20.01022911 58.51900482]
[32.85546494 66.26496887]
[45.70069885 74.01093292]
[58.54593658 81.75688934]
[73.06606293 65.04672241]
[93.28888702 57.56466675]
[114.05104065 60.63373566]
[130.32669067 72.95422363]
[143.17192078 65.20825958]
[156.01715088 57.46229935]
[168.86239624 49.71633911]
[165.71505737 34.16910934]
[168.05120850 18.50647354]
[175.57310486 4.60136414]
[187.36398315 -5.88972425]
[201.99975586 -11.72406578]
[217.72105408 -12.21989441]
[232.64465332 -7.33602238]
[244.98908997 2.32540441]
[257.60791016 -5.78420782]
[270.22671509 -13.89381981]
[282.84548950 -22.00343132]
[290.27185059 -35.97340012]
[305.16180420 -36.34525299]
[317.78060913 -44.45486450]
[330.39941406 -52.56447601]
[343.01821899 -60.67408752]
[342.20727539 -76.01155853]
[349.18801880 -89.69238281]
[362.08264160 -98.03648376]
[377.42257690 -98.79934692]
[391.08145142 -91.77576447]
[399.38510132 -78.85504150]
[400.09988403 -63.51278687]
[393.03350830 -49.87599564]
[380.08682251 -41.61289215]
[364.74240112 -40.94621277]
[351.12783813 -48.05528641]
[338.50903320 -39.94567108]
[325.89022827 -31.83606148]
[313.27142334 -23.72644806]
[306.74765015 -10.33653450]
[290.95510864 -9.38462925]
[278.33630371 -1.27501702]
[265.71749878 6.83459520]
[253.09870911 14.94420719]
[256.64352417 28.72705841]
[255.73527527 42.95103836]
[250.45024109 56.21110916]
[241.29774475 67.19330597]
[229.17105103 74.80490112]
[215.26017761 78.28316498]
[200.93515015 77.27175903]
[187.61109924 71.85717773]
[176.60835266 62.56157303]
[163.76312256 70.30753326]
[150.91787720 78.05349731]
[138.07264709 85.79946136]
[140.33850098 93.09194946]
[141.21022034 100.73318481]
[140.63703918 108.45716858]
[138.61886597 115.99117279]
[135.20698547 123.06542969]
[130.50291443 129.42276001]
[124.65552521 134.82789612]
[117.85633087 139.07618713]
[110.33328247 142.00129700]
[102.34313202 143.48164368]
[94.16265869 143.44532776]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 29]
[5 28]
[8 25]
[9 24]
[10 23]
[11 22]
[12 21]
[30 44]
[31 43]
[32 42]
[33 41]
[48 98]
[49 97]
[50 96]
[51 95]
[59 86]
[60 85]
[61 84]
[62 83]
[64 81]
[65 80]
[66 79]
[67 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
