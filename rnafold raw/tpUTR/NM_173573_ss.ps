%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 14:12:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGAGGAGUGGGGCCGGGACCGCGAGGGAGGGCGCGGGCGGGCGCCGGGGCUGGGCGGGCUGUGUCCGCUGCAUCAUUUAUUGAACCAACGUGGCCUACAAAGUAAACCGCAUUUCUGUACACCUGA\
) } def
/len { sequence length } bind def

/coor [
[172.55729675 548.38256836]
[171.47906494 533.42138672]
[170.22149658 518.47418213]
[161.30076599 506.54647827]
[167.68070984 492.06869507]
[158.75997925 480.14099121]
[165.13993835 465.66320801]
[163.70324707 450.73214722]
[162.26655579 435.80111694]
[160.82986450 420.87008667]
[159.39317322 405.93905640]
[157.95648193 391.00799561]
[156.51979065 376.07696533]
[147.59904480 364.14929199]
[153.97900391 349.67147827]
[152.54231262 334.74044800]
[132.98893738 322.51864624]
[128.35505676 299.67425537]
[141.88876343 280.38861084]
[137.63140869 266.00546265]
[133.37403870 251.62232971]
[128.40977478 246.04615784]
[129.19149780 236.84304810]
[125.28027344 222.36193848]
[121.36904144 207.88084412]
[117.45780182 193.39974976]
[113.54656982 178.91864014]
[100.54486084 171.74290466]
[96.37202454 157.11273193]
[103.98674774 143.52400208]
[100.07551575 129.04289246]
[84.21290588 124.37751770]
[73.46710968 111.81106567]
[71.32096100 95.41648865]
[57.62266541 89.30448914]
[43.92436218 83.19248199]
[30.22606277 77.08048248]
[16.52776337 70.96848297]
[1.86015260 76.85378265]
[-12.63991833 70.56700897]
[-18.36981583 55.83799744]
[-11.93009281 41.40520477]
[2.85867667 35.83135223]
[17.22257805 42.42330551]
[22.63976479 57.27017975]
[36.33806610 63.38218307]
[50.03636551 69.49418640]
[63.73466492 75.60618591]
[77.43296814 81.71818542]
[80.18775177 78.76393890]
[83.32577515 76.22047424]
[86.78634644 74.13699341]
[90.50251770 72.55380249]
[89.42427826 57.59260941]
[85.95465851 51.77602005]
[86.01185608 45.96753311]
[88.67061615 41.89130783]
[88.31092834 26.89562035]
[87.95123291 11.89993382]
[87.59154510 -3.09575319]
[87.23185730 -18.09144020]
[86.87216949 -33.08712769]
[86.51247406 -48.08281326]
[80.08806610 -63.77240372]
[93.38604736 -74.28906250]
[107.17295074 -64.42206573]
[101.50816345 -48.44250488]
[101.86785126 -33.44681549]
[102.22753906 -18.45112991]
[102.58723450 -3.45544314]
[102.94692230 11.54024410]
[103.30661011 26.53593063]
[103.66630554 41.53161621]
[104.38547516 56.51436615]
[105.46371460 71.47556305]
[110.22360992 72.81593323]
[114.68711090 74.94437408]
[125.35711670 64.40155029]
[136.02711487 53.85873032]
[137.56076050 37.88915253]
[151.08059692 29.25240707]
[166.21537781 34.57387161]
[171.35499573 49.77136993]
[162.55676270 63.18668365]
[146.56993103 64.52873230]
[135.89993286 75.07155609]
[125.22993469 85.61437225]
[128.03829956 107.57292938]
[114.55661774 125.13166809]
[118.46784973 139.61276245]
[131.88847351 147.52001953]
[135.64872742 162.26162720]
[128.02766418 175.00741577]
[131.93890381 189.48851013]
[135.85014343 203.96960449]
[139.76136780 218.45071411]
[143.67260742 232.93180847]
[147.75718689 247.36497498]
[152.01454163 261.74810791]
[156.27191162 276.13125610]
[163.88488770 276.92883301]
[171.02616882 279.62271118]
[177.23301697 284.02639771]
[182.10630798 289.84292603]
[185.33618164 296.68493652]
[186.72167969 304.10055542]
[186.18330383 311.60302734]
[183.76745605 318.70291138]
[179.64262390 324.93978882]
[174.08775330 329.91226196]
[167.47334290 333.30374146]
[168.91003418 348.23477173]
[177.93353271 361.23043823]
[171.45082092 374.64025879]
[172.88751221 389.57131958]
[174.32420349 404.50234985]
[175.76089478 419.43338013]
[177.19758606 434.36444092]
[178.63427734 449.29547119]
[180.07096863 464.22650146]
[189.09446716 477.22216797]
[182.61175537 490.63198853]
[191.63525391 503.62765503]
[185.15254211 517.03747559]
[189.12387085 525.37634277]
[186.44026184 532.34313965]
[187.51849365 547.30432129]
[197.16067505 560.56933594]
[190.24761963 575.44018555]
[173.89088440 576.61895752]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 127]
[2 126]
[3 124]
[5 122]
[7 120]
[8 119]
[9 118]
[10 117]
[11 116]
[12 115]
[13 114]
[15 112]
[16 111]
[19 100]
[20 99]
[21 98]
[23 97]
[24 96]
[25 95]
[26 94]
[27 93]
[30 90]
[31 89]
[34 49]
[35 48]
[36 47]
[37 46]
[38 45]
[53 75]
[54 74]
[57 73]
[58 72]
[59 71]
[60 70]
[61 69]
[62 68]
[63 67]
[77 87]
[78 86]
[79 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
