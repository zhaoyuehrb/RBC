%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 07:48:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGAGUAAUCAUGGACUGGACAUCUCAUCCAUUCUCAUAUGUAUUCUCAAUGACAAAUUCACUGAUGCCCAAUUAAAUGAUUGCUGUUUA\
) } def
/len { sequence length } bind def

/coor [
[97.39028931 372.79058838]
[94.20233154 357.69619751]
[99.70244598 343.28259277]
[112.13556671 334.14907837]
[111.10070038 319.18481445]
[110.06583405 304.22055054]
[109.03096771 289.25631714]
[107.99610138 274.29205322]
[106.96123505 259.32778931]
[105.92636871 244.36352539]
[104.89149475 229.39927673]
[103.85662842 214.43501282]
[93.26000977 200.56254578]
[101.19662476 184.05764771]
[99.64586639 169.13803101]
[90.63423157 157.27886963]
[96.90335083 142.75273132]
[95.35259247 127.83310699]
[93.80183411 112.91349030]
[85.75280762 101.48086548]
[91.27854156 88.63727570]
[89.72778320 73.71765137]
[88.17702484 58.79802704]
[86.62626648 43.87840271]
[71.73896790 41.46936035]
[57.99324417 35.29355240]
[46.32363892 25.77744865]
[37.52183533 13.57437992]
[32.18294907 -0.48029810]
[30.66529465 -15.42639160]
[33.06635666 -30.24447060]
[39.21653366 -43.92539597]
[48.69110870 -55.53904724]
[60.83957672 -64.29756165]
[74.83030701 -69.60876465]
[73.27954865 -84.52838898]
[71.72879028 -99.44801331]
[70.17803192 -114.36763763]
[66.10241699 -122.78785706]
[68.84038544 -129.82769775]
[67.80551910 -144.79194641]
[55.72275543 -154.97930908]
[54.46576691 -170.73353577]
[64.78030396 -182.70791626]
[80.54693604 -183.79827881]
[92.41159821 -173.35771179]
[93.33519745 -157.58042908]
[82.76978302 -145.82681274]
[83.80464935 -130.86256409]
[85.09765625 -115.91839600]
[86.64841461 -100.99877167]
[88.19917297 -86.07914734]
[89.74993134 -71.15952301]
[104.53388977 -68.83918762]
[118.22394562 -62.76635361]
[129.88444519 -53.34949875]
[138.71676636 -41.22586823]
[144.11399841 -27.21835136]
[145.70259094 -12.27963161]
[143.36831665 2.57260132]
[137.26434326 16.32498932]
[127.80127716 28.03764343]
[115.61950684 36.90837479]
[101.54589081 42.32764435]
[103.09664917 57.24726868]
[104.64740753 72.16689301]
[106.19816589 87.08650970]
[114.24719238 98.51913452]
[108.72145844 111.36272430]
[110.27221680 126.28234863]
[111.82297516 141.20198059]
[120.94553375 154.12828064]
[114.56548309 167.58726501]
[116.11624908 182.50689697]
[125.70365143 191.34266663]
[126.58068848 203.94645691]
[118.82089233 213.40014648]
[119.85575867 228.36439514]
[120.89062500 243.32865906]
[121.92549133 258.29290771]
[122.96035767 273.25717163]
[123.99522400 288.22143555]
[125.03009033 303.18569946]
[126.06495667 318.14996338]
[127.09983063 333.11422729]
[140.67184448 340.44931030]
[148.10369873 353.96859741]
[147.02388000 369.35812378]
[137.77697754 381.70715332]
[123.31362915 387.07513428]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 85]
[5 84]
[6 83]
[7 82]
[8 81]
[9 80]
[10 79]
[11 78]
[12 77]
[14 74]
[15 73]
[17 71]
[18 70]
[19 69]
[21 67]
[22 66]
[23 65]
[24 64]
[35 53]
[36 52]
[37 51]
[38 50]
[40 49]
[41 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
