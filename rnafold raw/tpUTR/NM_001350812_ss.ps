%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 13:53:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCACCGCACCCAGCUGAUAAAACCAUCUUGAAUGACCUUCAUCACUGUGAACAGUGAUGCAGUGGCUUUAUAAACUCUAGAAUGUGCUACAAUUA\
) } def
/len { sequence length } bind def

/coor [
[101.53617859 385.20944214]
[91.63211060 373.70840454]
[86.55517578 359.40493774]
[86.99199677 344.23345947]
[92.88349915 330.24578857]
[103.43289185 319.33367920]
[117.21347046 312.97283936]
[116.24252319 298.00430298]
[115.27157593 283.03573608]
[114.30062866 268.06719971]
[102.31748962 261.94610596]
[94.90509033 250.58558655]
[94.11682129 236.93458557]
[100.26947784 224.60148621]
[111.83079529 216.90023804]
[111.34506226 201.90809631]
[110.85933685 186.91596985]
[108.92151642 172.04167175]
[105.54988098 157.42550659]
[102.17824554 142.80935669]
[98.80661011 128.19319153]
[95.43497467 113.57703400]
[86.04259491 103.21967316]
[89.94886780 89.79460144]
[86.57723236 75.17844391]
[83.20559692 60.56228256]
[75.91719055 73.67255402]
[63.48069000 82.05905151]
[48.59436417 83.90222168]
[34.48800659 78.80215454]
[24.22219276 67.86537933]
[20.02422905 53.46478653]
[22.80492401 38.72478104]
[31.96096611 26.84341431]
[45.50582886 20.39851379]
[60.50075912 20.78838921]
[73.69240570 27.92845345]
[82.21902466 40.27052307]
[84.15684509 25.39622116]
[78.26719666 10.71212673]
[87.58387756 -0.90892488]
[89.52169800 -15.78322601]
[91.45951843 -30.65752792]
[93.39733887 -45.53182983]
[95.33515930 -60.40613174]
[97.27298737 -75.28043365]
[99.21080780 -90.15473175]
[101.14862823 -105.02903748]
[94.35631561 -119.95540619]
[104.10567474 -133.14184570]
[120.36740112 -131.02326965]
[126.41281891 -115.77909088]
[116.02293396 -103.09121704]
[114.08510590 -88.21691132]
[112.14728546 -73.34261322]
[110.20946503 -58.46830750]
[108.27164459 -43.59400558]
[106.33382416 -28.71970558]
[104.39599609 -13.84540462]
[102.45817566 1.02889717]
[108.48642731 14.64908314]
[99.03114319 27.33404350]
[97.09332275 42.20834732]
[97.82175446 57.19064713]
[101.19338989 71.80680847]
[104.56502533 86.42296600]
[113.95740509 96.78032684]
[110.05113220 110.20539856]
[113.42276764 124.82155609]
[116.79440308 139.43771362]
[120.16603851 154.05387878]
[123.53767395 168.67002869]
[133.37695312 157.34799194]
[148.31648254 156.00236511]
[160.02056885 165.38395691]
[161.95881653 180.25820923]
[153.04972839 192.32586670]
[138.26426697 194.85365295]
[125.85147095 186.43023682]
[126.33719635 201.42237854]
[126.82292938 216.41450500]
[140.89424133 225.63381958]
[146.70681763 241.24435425]
[142.18232727 257.10418701]
[129.26916504 267.09625244]
[130.24011230 282.06478882]
[131.21105957 297.03335571]
[132.18200684 312.00189209]
[146.66885376 316.52911377]
[158.53956604 325.98696899]
[166.18873596 339.09628296]
[168.58186340 354.08419800]
[165.39532471 368.92367554]
[157.06004333 381.60784912]
[144.70330811 390.42120361]
[129.99627686 394.17190552]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 88]
[8 87]
[9 86]
[10 85]
[15 81]
[16 80]
[17 79]
[18 72]
[19 71]
[20 70]
[21 69]
[22 68]
[24 66]
[25 65]
[26 64]
[38 63]
[39 62]
[41 60]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
