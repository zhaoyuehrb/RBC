%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 22:40:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGGCCGGGCCGGGGACGAGGCCUCCUGCGGACACCAGCUCCUCUCUCCGCCGUCACCGGGGAGGCCGGGGAUCCUUGCAGGGCUUCUGGGGCGUUGGGAAACCCAGGCCCGCCGGCCAC\
) } def
/len { sequence length } bind def

/coor [
[69.91355896 228.59552002]
[59.09041214 217.07878113]
[59.66435623 201.28492737]
[71.29486847 190.58415222]
[71.68109131 175.58911133]
[72.06730652 160.59408569]
[72.45352936 145.59906006]
[72.83974457 130.60403442]
[59.25421143 124.24532318]
[47.98723221 134.14759827]
[36.72025299 144.04988098]
[25.45327568 153.95216370]
[27.02372551 169.38957214]
[19.19128799 182.78480530]
[4.96769476 188.98715210]
[-10.17779064 185.61166382]
[-20.42142105 173.95629883]
[-21.82431030 158.50276184]
[-13.84702110 145.19328308]
[0.44301757 139.14559937]
[15.55099392 142.68518066]
[26.81797218 132.78291321]
[38.08495331 122.88062286]
[49.35193253 112.97834015]
[53.17199707 98.47292328]
[48.24386215 84.30558777]
[43.31572723 70.13825226]
[38.38759232 55.97091293]
[33.45945358 41.80357361]
[28.53131866 27.63623428]
[23.24003792 13.60048199]
[17.58911896 -0.29437751]
[11.93820095 -14.18923664]
[-2.34784341 -20.39783478]
[-7.88074064 -34.56969833]
[-1.87375104 -48.15099716]
[-7.52466965 -62.04585648]
[-22.30535889 -72.93554688]
[-19.36766434 -90.18537903]
[-25.37447357 -103.93013000]
[-29.19915771 -106.51609802]
[-31.67907715 -109.87857819]
[-32.73612213 -113.47274780]
[-32.48647690 -116.78793335]
[-31.21053123 -119.41097260]
[-35.77225494 -133.70050049]
[-40.33397675 -147.99003601]
[-44.89569855 -162.27955627]
[-49.45742035 -176.56909180]
[-54.01914597 -190.85862732]
[-58.58086777 -205.14814758]
[-73.11709595 -210.91288757]
[-80.50145721 -224.69712830]
[-77.24729919 -239.99237061]
[-64.89112091 -249.57667542]
[-49.26713562 -248.92462158]
[-37.75251389 -238.34410095]
[-35.78410721 -222.83088684]
[-44.29133606 -209.70988464]
[-39.72961426 -195.42034912]
[-35.16789246 -181.13081360]
[-30.60616875 -166.84127808]
[-26.04444695 -152.55175781]
[-21.48272324 -138.26222229]
[-16.92100143 -123.97269440]
[-11.62971973 -109.93694305]
[-5.62291145 -96.19218445]
[5.58222342 -91.44106293]
[10.66499329 -79.94102478]
[6.37019014 -67.69677734]
[12.02110863 -53.80191422]
[25.80201530 -48.26818085]
[31.73078728 -34.25731659]
[25.83306122 -19.84015465]
[31.48397827 -5.94529581]
[37.13489914 7.94956350]
[41.21640015 10.63277149]
[43.58856964 15.96209526]
[42.69865799 22.70809937]
[47.62679291 36.87543869]
[52.55492783 51.04277420]
[57.48306656 65.21011353]
[62.41120148 79.37744904]
[67.33933258 93.54479218]
[74.31982422 80.59642792]
[85.87438965 72.31490326]
[99.40483093 70.03138733]
[112.08898163 73.78456879]
[121.46853638 82.39712524]
[125.92485809 93.79724121]
[124.95085907 105.50336456]
[138.00514221 112.89158630]
[151.05941772 120.27980804]
[164.11369324 127.66802979]
[173.24148560 129.20388794]
[177.40544128 135.41827393]
[190.26515198 143.14016724]
[203.12487793 150.86204529]
[215.98458862 158.58393860]
[228.84431458 166.30583191]
[245.53604126 169.27609253]
[247.30259705 186.13775635]
[231.58892822 192.50303650]
[221.12242126 179.16555786]
[208.26269531 171.44366455]
[195.40298462 163.72177124]
[182.54325867 155.99987793]
[169.68354797 148.27798462]
[156.72546387 140.72230530]
[143.67118835 133.33409119]
[130.61691284 125.94586182]
[117.56263733 118.55764008]
[110.44879913 126.11872101]
[100.09953308 130.71168518]
[87.83477020 130.99024963]
[87.44855499 145.98527527]
[87.06233978 160.98031616]
[86.67611694 175.97534180]
[86.28990173 190.97036743]
[97.35413361 202.25567627]
[97.11426544 218.05815125]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 119]
[5 118]
[6 117]
[7 116]
[8 115]
[9 24]
[10 23]
[11 22]
[12 21]
[25 84]
[26 83]
[27 82]
[28 81]
[29 80]
[30 79]
[31 76]
[32 75]
[33 74]
[36 71]
[37 70]
[39 67]
[40 66]
[45 65]
[46 64]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[91 112]
[92 111]
[93 110]
[94 109]
[96 108]
[97 107]
[98 106]
[99 105]
[100 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
