%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 08:34:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGUAGAAGAAAACAGGACACAAGAUGGCAAGCCUGAGAGAAUUGCCCAGCUGACCUGGAAUGAGGCCUAAACCACAAUCUUCUCUUCCUAAUAAACAGCCUCCUAGAGGCCACAUUCUAUUCUUUAA\
) } def
/len { sequence length } bind def

/coor [
[244.67445374 219.60192871]
[232.60295105 210.69807434]
[220.53143311 201.79421997]
[208.45993042 192.89036560]
[196.38841248 183.98651123]
[189.06542969 182.53343201]
[184.13763428 174.72157288]
[172.28309631 165.53080750]
[160.42857361 156.34004211]
[148.57403564 147.14927673]
[136.71951294 137.95851135]
[124.86498260 128.76774597]
[104.87471008 137.71058655]
[83.26750946 134.14489746]
[67.21043396 119.25344086]
[62.02957916 97.97566223]
[47.50262070 94.23834229]
[32.97566605 90.50102997]
[18.44870949 86.76371002]
[3.15595961 90.81863403]
[-7.24215984 80.15428162]
[-21.76911545 76.41696930]
[-29.97004700 86.53439331]
[-41.36395645 92.74529266]
[-54.21770477 94.14564514]
[-66.59152222 90.56008911]
[-76.63174438 82.56298065]
[-82.84848785 71.38674164]
[-84.33670044 58.73199844]
[-98.66776276 54.30248642]
[-112.99883270 49.87297440]
[-127.32989502 45.44346237]
[-141.66096497 41.01395416]
[-155.51477051 48.13503647]
[-169.98539734 43.43872833]
[-176.68888855 30.18735886]
[-191.01995850 25.75784874]
[-207.93821716 26.85723877]
[-213.67808533 10.90448856]
[-199.93772888 0.97277582]
[-186.59045410 11.42678261]
[-172.25938416 15.85629368]
[-159.24775696 8.69856071]
[-144.65090942 12.98656368]
[-137.23144531 26.68288803]
[-122.90038300 31.11239815]
[-108.56932068 35.54190826]
[-94.23825073 39.97142029]
[-79.90718842 44.40093231]
[-67.79701233 32.27840805]
[-51.14494705 27.87882614]
[-34.45709229 32.48473740]
[-22.29566765 44.92923737]
[-18.03179932 61.89001083]
[-3.50484324 65.62732697]
[10.74884129 61.30508804]
[22.18602562 72.23675537]
[36.71298218 75.97407532]
[51.23993683 79.71138763]
[65.76689148 83.44870758]
[69.12283325 77.80876160]
[73.39858246 72.82987976]
[78.46678162 68.66038513]
[84.17644501 65.42449188]
[90.35749054 63.21858215]
[96.82577515 62.10837555]
[103.38862610 62.12694931]
[107.64598083 47.74380112]
[99.88275909 33.97761154]
[104.20792389 18.77667236]
[118.05541992 11.15943241]
[133.20977783 15.64506435]
[140.68019104 29.57232285]
[136.03459167 44.67840958]
[122.02912903 52.00115585]
[117.77176666 66.38430023]
[127.15505981 73.38320923]
[133.96472168 82.90473175]
[137.55537415 94.04645538]
[137.58670044 105.75243378]
[134.05574036 116.91322327]
[145.91027832 126.10398865]
[157.76480103 135.29475403]
[169.61933899 144.48550415]
[181.47386169 153.67626953]
[193.32839966 162.86703491]
[205.29226685 171.91499329]
[217.36378479 180.81884766]
[229.43528748 189.72271729]
[241.50680542 198.62657166]
[253.57830811 207.53042603]
[268.21859741 195.42958069]
[285.55505371 187.69627380]
[304.31860352 184.89019775]
[323.13748169 187.21063232]
[340.63732910 194.48229980]
[355.54183960 206.16850281]
[366.76556396 221.41084290]
[373.49310303 239.09219360]
[375.23840332 257.91860962]
[371.87969971 276.51400757]
[385.57800293 282.62600708]
[399.27630615 288.73800659]
[412.97460938 294.85000610]
[426.67291260 300.96200562]
[443.60119629 301.89428711]
[447.39157104 318.41909790]
[432.56182861 326.63586426]
[420.56091309 314.66030884]
[406.86260986 308.54830933]
[393.16430664 302.43630981]
[379.46600342 296.32431030]
[365.76770020 290.21231079]
[359.16949463 299.69140625]
[351.09802246 307.95712280]
[341.77282715 314.78292847]
[331.44781494 319.98156738]
[320.40435791 323.41006470]
[308.94363403 324.97372437]
[297.37838745 324.62872314]
[286.02441406 322.38333130]
[275.19189453 318.29772949]
[265.17700195 312.48236084]
[256.25375366 305.09503174]
[248.66648865 296.33651733]
[242.62321472 286.44522095]
[238.28991699 275.69058228]
[235.78598022 264.36578369]
[235.18086243 252.77978516]
[236.49224854 241.24882507]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 91]
[2 90]
[3 89]
[4 88]
[5 87]
[7 86]
[8 85]
[9 84]
[10 83]
[11 82]
[12 81]
[16 60]
[17 59]
[18 58]
[19 57]
[21 55]
[22 54]
[29 49]
[30 48]
[31 47]
[32 46]
[33 45]
[36 42]
[37 41]
[67 76]
[68 75]
[101 113]
[102 112]
[103 111]
[104 110]
[105 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
