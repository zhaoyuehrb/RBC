%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 23:08:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAUUUGAUUCUUCCAGAAUGACCUUCUUAUUUAUGUAACUGGCUUUCAUUUAGAUUGUAAGUUAUGGACAUGAUUUGAGAUGUAGAAGCCAUUUUUUAUUAAAUAAAAUGCUUAUUUUAGGCUCCGUCCCCA\
) } def
/len { sequence length } bind def

/coor [
[95.62943268 124.06023407]
[86.47477722 135.94267273]
[77.32012177 147.82510376]
[79.15571594 163.29341125]
[69.70233154 175.21347046]
[54.94435501 176.86811829]
[52.65116882 192.52224731]
[38.75438309 197.88215637]
[29.59972954 209.76458740]
[20.44507599 221.64703369]
[11.29042149 233.52946472]
[2.13576770 245.41191101]
[-2.74133396 261.64920044]
[-19.69419861 261.45764160]
[-24.20313835 245.11427307]
[-9.74666977 236.25724792]
[-0.59201550 224.37481689]
[8.56263828 212.49237061]
[17.71729279 200.60993958]
[26.87194633 188.72750854]
[28.51033211 173.92327881]
[43.06191635 167.71345520]
[40.89791870 153.02153015]
[50.01276779 140.84063721]
[65.43768311 138.67045593]
[74.59233856 126.78801727]
[83.74699402 114.90557861]
[73.99186707 126.30020905]
[59.51979828 130.24472046]
[45.33193207 125.37600708]
[36.33120346 113.37654877]
[35.62801361 98.39304352]
[43.46537399 85.60336304]
[57.13489914 79.42728424]
[71.91278839 81.99906921]
[82.69236755 92.43030548]
[72.46524811 81.45733643]
[62.23813248 70.48436737]
[52.01101685 59.51139832]
[41.78389740 48.53842926]
[31.55678177 37.56545639]
[16.48763847 32.74555206]
[13.47016239 18.15980148]
[3.24304485 7.18683100]
[-12.31731319 6.47059298]
[-22.53275108 -4.80324841]
[-21.75403404 -19.63325882]
[-31.98115158 -30.60622787]
[-47.89920425 -32.60501099]
[-56.13793182 -46.37101746]
[-50.37728882 -61.34414291]
[-35.03634644 -66.03829193]
[-21.88336182 -56.85250854]
[-21.00818062 -40.83334351]
[-10.78106403 -29.86037445]
[4.06700516 -29.59497070]
[14.59507084 -18.61250687]
[14.21601486 -3.04028630]
[24.44313240 7.93268394]
[38.78076172 11.96773052]
[42.52975082 27.33834076]
[52.75687027 38.31130981]
[62.98398590 49.28427887]
[73.21110535 60.25725174]
[83.43821716 71.23021698]
[93.66533661 82.20319366]
[107.68577576 87.53491211]
[122.61987305 86.13028717]
[137.55395508 84.72566223]
[152.48805237 83.32104492]
[161.35127258 73.86671448]
[173.88189697 73.05133820]
[183.27357483 80.76766205]
[198.23648071 79.71352386]
[213.18600464 78.48405457]
[228.12010193 77.07943726]
[243.05418396 75.67481232]
[257.98828125 74.27018738]
[272.92236328 72.86557007]
[287.85644531 71.46094513]
[302.79055786 70.05632019]
[317.72463989 68.65170288]
[332.65872192 67.24707794]
[336.26757812 64.46384430]
[340.18609619 63.16625977]
[343.88989258 63.26220703]
[346.94311523 64.49283600]
[349.04687500 66.47808075]
[364.04687500 66.47808075]
[379.04687500 66.47808075]
[387.72189331 63.32516861]
[394.39746094 66.65803528]
[409.39334106 67.00967407]
[424.38922119 67.36131287]
[439.38510132 67.71295166]
[454.38098145 68.06459045]
[462.93823242 55.22803879]
[477.08612061 49.07658768]
[492.31015015 51.57314682]
[503.75234985 61.92107010]
[507.76156616 76.81837463]
[503.05850220 91.51138306]
[491.14382935 101.31161499]
[475.81951904 103.09184265]
[461.97549438 96.28401184]
[454.02935791 83.06047058]
[439.03347778 82.70883179]
[424.03759766 82.35719299]
[409.04171753 82.00555420]
[394.04583740 81.65391541]
[379.04687500 81.47808075]
[364.04687500 81.47808075]
[349.04687500 81.47808075]
[334.06335449 82.18116760]
[319.12927246 83.58579254]
[304.19515991 84.99040985]
[289.26107788 86.39503479]
[274.32699585 87.79965973]
[259.39291382 89.20427704]
[244.45881653 90.60890198]
[229.52471924 92.01352692]
[214.59063721 93.41814423]
[208.16578674 97.21190643]
[199.29061890 94.67643738]
[184.32771301 95.73057556]
[170.39280701 106.33175659]
[153.89266968 98.25513458]
[138.95858765 99.65975189]
[124.02449036 101.06437683]
[109.09040070 102.46900177]
[110.51351929 106.62464142]
[110.07730103 111.68925476]
[107.42515564 116.87930298]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[3 25]
[6 22]
[8 20]
[9 19]
[10 18]
[11 17]
[12 16]
[36 66]
[37 65]
[38 64]
[39 63]
[40 62]
[41 61]
[43 59]
[44 58]
[47 55]
[48 54]
[67 130]
[68 129]
[69 128]
[70 127]
[73 125]
[74 124]
[75 122]
[76 121]
[77 120]
[78 119]
[79 118]
[80 117]
[81 116]
[82 115]
[83 114]
[88 113]
[89 112]
[90 111]
[92 110]
[93 109]
[94 108]
[95 107]
[96 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
