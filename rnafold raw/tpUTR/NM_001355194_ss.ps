%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 23:14:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCAUACUGGAGAGAAACUGGAUGAAUGUGGGAAAGCCUUUAACCAGCCCUCGACUCUUACUAACUAUGAGAAUUUAUAUGGAACAUAAACUCAUACAAAUAUAAC\
) } def
/len { sequence length } bind def

/coor [
[152.60209656 194.89321899]
[142.41461182 188.27928162]
[133.41184998 180.12138367]
[125.82550812 170.62820435]
[119.85103607 160.04277039]
[115.64260101 148.63633728]
[113.30910492 136.70130920]
[112.91137695 124.54383087]
[114.46057129 112.47590637]
[101.54129791 119.03630066]
[87.73489380 114.63978577]
[80.98802948 101.81691742]
[66.69520569 97.26551056]
[52.40238571 92.71410370]
[41.14042282 100.27289581]
[27.77722549 99.91887665]
[17.24410439 92.00917053]
[13.29692078 79.64728546]
[-0.85612673 74.67825317]
[-15.00917435 69.70922089]
[-29.16222191 64.74019623]
[-44.74631119 67.46905518]
[-54.19183350 55.95248413]
[-68.34487915 50.98345566]
[-82.49792480 46.01442337]
[-96.65097809 41.04539490]
[-112.23506165 43.77425766]
[-121.68058777 32.25768661]
[-135.83363342 27.28865623]
[-149.96968079 34.35601044]
[-164.93612671 29.27849579]
[-171.85363770 15.06851101]
[-166.61816406 0.15658818]
[-152.33584595 -6.61029387]
[-137.48010254 -1.21746325]
[-130.86460876 13.13560867]
[-116.71155548 18.10463905]
[-102.13978577 15.02035904]
[-91.68194580 26.89234924]
[-77.52890015 31.86137772]
[-63.37585068 36.83040619]
[-49.22280502 41.79943848]
[-34.65103149 38.71515656]
[-24.19319153 50.58714676]
[-10.04014492 55.55617523]
[4.11290264 60.52520752]
[18.26594925 65.49423218]
[33.01553345 57.56446838]
[49.27975464 62.78562164]
[56.95379257 78.42128754]
[71.24661255 82.97268677]
[85.53942871 87.52409363]
[98.45870209 80.96369934]
[112.26510620 85.36021423]
[119.01197052 98.18308258]
[128.35105896 82.27233124]
[141.24568176 69.08911896]
[156.93191528 59.40882874]
[174.48181152 53.79945755]
[192.85829163 52.58833313]
[210.97644043 55.84299469]
[227.76753235 63.36745071]
[242.24209595 74.71396637]
[253.54824829 89.20969391]
[261.02172852 105.99662018]
[264.22503662 124.08228302]
[279.21051025 124.74268341]
[294.19595337 125.40308380]
[309.18142700 126.06348419]
[324.16687012 126.72389221]
[339.15231323 127.38429260]
[345.41915894 124.57125092]
[351.25143433 125.34933472]
[354.99026489 128.54891968]
[369.91113281 130.08763123]
[384.83200073 131.62635803]
[399.75286865 133.16508484]
[414.67373657 134.70381165]
[425.77450562 123.68985748]
[441.36203003 122.43963623]
[454.07635498 131.54345703]
[457.91418457 146.70278931]
[451.06338501 160.75984192]
[436.75872803 167.07731628]
[421.75439453 162.67228699]
[413.13500977 149.62467957]
[398.21414185 148.08595276]
[383.29327393 146.54722595]
[368.37240601 145.00851440]
[353.45153809 143.46978760]
[338.49191284 142.36975098]
[323.50646973 141.70935059]
[308.52099609 141.04895020]
[293.53555298 140.38853455]
[278.55010986 139.72813416]
[263.56463623 139.06773376]
[260.89706421 150.88075256]
[256.37615967 162.11892700]
[250.11709595 172.49349976]
[242.27972412 181.73767090]
[233.06443787 189.61360168]
[222.70716858 195.91841125]
[211.47325134 200.48945618]
[199.65061951 203.20855713]
[187.54254150 204.00498962]
[175.45970154 202.85737610]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 55]
[12 52]
[13 51]
[14 50]
[18 47]
[19 46]
[20 45]
[21 44]
[23 42]
[24 41]
[25 40]
[26 39]
[28 37]
[29 36]
[66 96]
[67 95]
[68 94]
[69 93]
[70 92]
[71 91]
[74 90]
[75 89]
[76 88]
[77 87]
[78 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
