%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 01:21:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCAAGUAGCUGUCUUACUAUGUGUGGAAUUUCUUUUUCACACCAUCAUGGGCUGUAUUUUCAAGUUGAUUCAUAAUAAACAAAAUUACAAAAAGAA\
) } def
/len { sequence length } bind def

/coor [
[101.76573181 114.67186737]
[95.75177002 128.41349792]
[89.73781586 142.15512085]
[95.72777557 156.78030396]
[89.54478455 171.32492065]
[74.85709381 177.15992737]
[60.37865067 170.82350159]
[54.69926071 156.07495117]
[61.18840408 141.66430664]
[75.99618530 136.14115906]
[82.01014709 122.39953613]
[88.02410126 108.65790558]
[83.57029724 94.33437347]
[70.82441711 86.42599487]
[58.07853317 78.51760864]
[45.33265305 70.60923004]
[32.96820450 79.40673065]
[18.21728706 82.79103851]
[3.33467531 80.27677917]
[-9.41694546 72.27779388]
[-18.11097717 60.03938293]
[-21.44796944 45.44452286]
[-18.94977570 30.72418785]
[-31.69565773 22.81580544]
[-44.44153976 14.90742397]
[-57.18741989 6.99904203]
[-69.93330383 -0.90933990]
[-82.67918396 -8.81772232]
[-95.42506409 -16.72610474]
[-108.17094421 -24.63448524]
[-123.49972534 -20.78686905]
[-137.01637268 -28.97684479]
[-140.70170593 -44.34544373]
[-132.36929321 -57.77474976]
[-116.96258545 -61.29739380]
[-103.62212372 -52.82345200]
[-100.26256561 -37.38036728]
[-87.51668549 -29.47198486]
[-74.77080536 -21.56360245]
[-62.02492142 -13.65522099]
[-49.27903748 -5.74683952]
[-36.53315735 2.16154265]
[-23.78727531 10.06992435]
[-11.04139423 17.97830582]
[1.03857088 9.20313072]
[15.59732056 5.71196651]
[30.42358780 8.06709576]
[43.25319672 15.94038677]
[52.11483002 28.15861511]
[55.63290405 42.87820053]
[53.24103546 57.86334991]
[65.98691559 65.77172852]
[78.73279572 73.68011475]
[91.47868347 81.58849335]
[118.90493774 86.66776276]
[133.85775757 85.47901917]
[148.81057739 84.29026794]
[163.76339722 83.10151672]
[176.90699768 74.29489136]
[190.20741272 80.99922180]
[205.16023254 79.81047058]
[220.11305237 78.62171936]
[226.83573914 69.77848053]
[237.14056396 66.26748657]
[247.43553162 69.05104828]
[254.27609253 76.94138336]
[269.27420044 76.70339966]
[284.27230835 76.46540833]
[291.11224365 62.77328491]
[303.53848267 53.83758926]
[318.69564819 51.71167755]
[333.10067749 56.88407135]
[343.44342041 68.16618347]
[347.34719849 82.96548462]
[343.91491699 97.88118744]
[333.93536377 109.48577881]
[319.70169067 115.11260986]
[304.48471069 113.46867371]
[291.78118896 104.93173218]
[284.51031494 91.46351624]
[269.51220703 91.70150757]
[254.51408386 91.93949890]
[238.89772034 103.15462494]
[221.30180359 93.57453918]
[206.34898376 94.76329041]
[191.39616394 95.95204163]
[179.32209778 104.67363739]
[164.95214844 98.05433655]
[149.99932861 99.24308777]
[135.04650879 100.43183899]
[120.09368896 101.62059021]
[134.95492554 103.65615845]
[146.10458374 113.69035339]
[149.68965149 128.25563049]
[144.47122192 142.31863403]
[132.25263977 151.01957703]
[117.25631714 151.35163879]
[104.66456604 143.20008850]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[13 54]
[14 53]
[15 52]
[16 51]
[23 44]
[24 43]
[25 42]
[26 41]
[27 40]
[28 39]
[29 38]
[30 37]
[55 91]
[56 90]
[57 89]
[58 88]
[60 86]
[61 85]
[62 84]
[66 82]
[67 81]
[68 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
