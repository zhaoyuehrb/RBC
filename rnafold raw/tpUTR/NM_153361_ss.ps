%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 15:25:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGCACUAGACUGCUUGUAACUAACCAAGAUGAUUGUUGCUGCUUCUAAAUUUUUUUCAAGGACAACUUGAGUGGAGACAUUUUUGUAAUUUUUAAAUAAACUUAAAUUUGAGAUAUGCA\
) } def
/len { sequence length } bind def

/coor [
[94.13772583 213.72656250]
[81.13416290 202.84797668]
[87.98786163 187.34111023]
[88.76004028 172.36099243]
[89.53222656 157.38088989]
[90.30440521 142.40077209]
[70.04635620 131.53742981]
[58.15456009 111.86547852]
[43.23406219 113.40779114]
[28.31356430 114.95011139]
[13.39306641 116.49242401]
[4.60378170 126.03787231]
[-7.93584156 126.95616913]
[-17.39570808 119.29854584]
[-32.35097122 120.45617676]
[-41.38311768 129.77215576]
[-53.94222641 130.36727905]
[-63.20178986 122.46862793]
[-78.18190002 123.24080658]
[-93.16201019 124.01299286]
[-108.14212799 124.78517151]
[-123.12223816 125.55735016]
[-128.17572021 139.89369202]
[-138.33453369 151.20152283]
[-152.04953003 157.75648499]
[-167.22926331 158.55897522]
[-181.55894470 153.48663330]
[-192.85340881 143.31295776]
[-199.39030457 129.58935547]
[-200.17283630 114.40856934]
[-195.08164978 100.08557129]
[-184.89312744 88.80451202]
[-171.16093445 82.28565979]
[-155.97914124 81.52310944]
[-141.66284180 86.63313293]
[-130.39520264 96.83648682]
[-123.89441681 110.57723999]
[-108.91430664 109.80506134]
[-93.93419647 109.03287506]
[-78.95408630 108.26069641]
[-63.97397232 107.48851776]
[-49.85764694 97.14849091]
[-33.50860214 105.50091553]
[-18.55334091 104.34328461]
[-4.70792723 93.64322662]
[11.85075188 101.57192230]
[26.77124977 100.02960968]
[41.69174957 98.48729706]
[56.61224747 96.94497681]
[60.90321732 80.94030762]
[70.86830902 67.70178223]
[85.06130219 59.15069580]
[101.42234802 56.52808762]
[104.49062347 41.84525299]
[107.55890656 27.16241646]
[102.80805969 12.07135773]
[112.98515320 1.19587636]
[116.05342865 -13.48695850]
[119.12171173 -28.16979408]
[122.18999481 -42.85263062]
[125.25827026 -57.53546524]
[128.32655334 -72.21829987]
[120.78128815 -86.37628937]
[127.27806091 -101.04501343]
[142.83309937 -104.97188568]
[155.51391602 -95.14454651]
[155.59286499 -79.10169220]
[143.00938416 -69.15001678]
[139.94111633 -54.46718216]
[136.87283325 -39.78434753]
[133.80455017 -25.10151291]
[130.73626709 -10.41867828]
[127.66798401 4.26415730]
[132.63829041 18.30500031]
[122.24174500 30.23069763]
[119.17346191 44.91353226]
[116.10517883 59.59636688]
[127.43038940 66.24494171]
[136.25497437 75.97071075]
[149.99972534 69.96389771]
[163.74449158 63.95708847]
[173.03369141 50.44255066]
[189.35874939 51.99953461]
[195.92585754 67.02635193]
[185.97932434 80.06469727]
[169.75129700 77.70184326]
[156.00654602 83.70864868]
[142.26177979 89.71546173]
[143.39508057 97.05089569]
[143.26464844 104.47221375]
[141.87428284 111.76329803]
[139.26446533 118.71181488]
[151.48988342 127.40312958]
[163.71531677 136.09445190]
[175.94073486 144.78576660]
[188.16616821 153.47708130]
[200.39158630 162.16839600]
[212.61701965 170.85971069]
[224.84243774 179.55102539]
[239.50639343 174.47679138]
[254.34252930 179.02310181]
[263.64602661 191.44180298]
[263.83953857 206.95767212]
[254.84860229 219.60453796]
[240.13046265 224.51940918]
[225.34452820 219.81242371]
[216.17628479 207.29351807]
[216.15112305 191.77645874]
[203.92570496 183.08514404]
[191.70027161 174.39382935]
[179.47485352 165.70249939]
[167.24942017 157.01118469]
[155.02400208 148.31987000]
[142.79856873 139.62855530]
[130.57315063 130.93724060]
[123.11331940 136.84568787]
[114.54708862 140.99040222]
[105.28451538 143.17295837]
[104.51233673 158.15306091]
[103.74015045 173.13317871]
[102.96797180 188.11329651]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 121]
[4 120]
[5 119]
[6 118]
[8 49]
[9 48]
[10 47]
[11 46]
[14 44]
[15 43]
[18 41]
[19 40]
[20 39]
[21 38]
[22 37]
[53 77]
[54 76]
[55 75]
[57 73]
[58 72]
[59 71]
[60 70]
[61 69]
[62 68]
[79 88]
[80 87]
[81 86]
[92 115]
[93 114]
[94 113]
[95 112]
[96 111]
[97 110]
[98 109]
[99 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
