%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 00:43:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAAAGGCUGGUAAUACUAGCACUUGGUAUGCCAAGACCUGAAGCCAAACCAGGGGGAAGGUGGGGAUGUGGAGACAAGAAAUGGAAAUUCUAAUAAACUAGCUGAAUUAGAUAAAUCCCA\
) } def
/len { sequence length } bind def

/coor [
[150.36404419 158.87779236]
[144.94062805 172.86302185]
[133.05102539 182.00836182]
[118.14247894 183.66227722]
[104.53752899 177.34519958]
[96.18074799 164.88871765]
[95.49507141 149.90438843]
[102.67759705 136.73849487]
[92.27610779 147.54632568]
[81.87462616 158.35414124]
[71.47313690 169.16197205]
[61.07164764 179.96980286]
[50.67016220 190.77761841]
[44.04330826 206.38278198]
[27.21350479 204.33485413]
[24.52244949 187.59584045]
[39.86233521 180.37612915]
[50.26382446 169.56831360]
[60.66530991 158.76048279]
[71.06680298 147.95266724]
[81.46828461 137.14483643]
[91.86977386 126.33701324]
[79.44615936 119.92207336]
[71.37609100 107.86658478]
[56.37731934 108.05814362]
[41.37854004 108.24969482]
[26.37976456 108.44125366]
[11.38098717 108.63280487]
[-2.43104172 117.47361755]
[-16.86701202 109.69320679]
[-17.07643509 93.29539490]
[-2.84387422 85.14884949]
[11.18943214 93.63403320]
[26.18820953 93.44247437]
[41.18698502 93.25092316]
[56.18576431 93.05936432]
[71.18453979 92.86781311]
[78.35033417 79.69012451]
[70.35827637 66.99655151]
[62.36621094 54.30297089]
[54.37414551 41.60939026]
[39.08644867 42.09262848]
[25.69787025 34.90633774]
[17.75672340 22.06871414]
[17.31054688 7.08015442]
[24.37907600 -6.03096628]
[16.38701248 -18.72454453]
[0.92215812 -21.98243332]
[-7.63936329 -35.26685715]
[-4.21815348 -50.69639969]
[9.15604496 -59.11699295]
[24.54855728 -55.53284454]
[32.82727814 -42.07036591]
[29.08058929 -26.71660805]
[37.07265472 -14.02303028]
[51.95101929 -14.72999668]
[65.27423096 -7.84900951]
[73.41819763 4.86091614]
[74.11143494 20.04038429]
[67.06772614 33.61732864]
[75.05978394 46.31090546]
[83.05184937 59.00448608]
[91.04391479 71.69805908]
[122.14781189 81.86650085]
[124.12094116 113.33862305]
[139.10993958 113.91316223]
[154.09892273 114.48770905]
[169.08792114 115.06224823]
[184.07691956 115.63678741]
[197.51939392 108.98098755]
[206.14918518 96.71205139]
[207.07350159 80.33897400]
[221.83503723 73.19551086]
[235.24838257 82.63024902]
[233.51504517 98.93753052]
[218.41812134 105.34182739]
[209.78834534 117.61077118]
[211.49723816 124.91348267]
[224.95262146 118.28381348]
[238.40802002 111.65414429]
[248.22030640 100.30870819]
[262.82687378 96.89573669]
[276.65066528 102.71834564]
[284.41351318 115.55337524]
[283.15145874 130.50019836]
[273.34634399 141.85183716]
[258.74194336 145.27406311]
[244.91499329 139.46063232]
[229.91500854 139.48977661]
[214.91503906 139.51892090]
[216.62394714 146.82164001]
[229.80162048 153.98742676]
[242.97930908 161.15322876]
[256.15698242 168.31903076]
[269.33468628 175.48481750]
[282.51235962 182.65061951]
[295.19973755 174.08970642]
[310.41357422 172.41702271]
[324.65783691 178.01695251]
[334.65933228 189.60267639]
[338.11975098 204.51187134]
[334.24392700 219.31851196]
[323.92251587 230.62014771]
[309.52728271 235.81974792]
[294.36614990 233.72245789]
[281.92303467 224.81025696]
[275.05728149 211.13107300]
[275.34655762 195.82830811]
[262.16888428 188.66250610]
[248.99119568 181.49670410]
[235.81350708 174.33091736]
[222.63583374 167.16511536]
[209.45814514 159.99931335]
[197.36437988 156.03050232]
[188.64730835 148.61738586]
[184.04312134 139.54309082]
[183.50238037 130.62577820]
[168.51338196 130.05123901]
[153.52438354 129.47669983]
[138.53540039 128.90216064]
[123.54640198 128.32762146]
[137.85327148 132.83467102]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 22]
[9 21]
[10 20]
[11 19]
[12 18]
[13 17]
[24 37]
[25 36]
[26 35]
[27 34]
[28 33]
[38 63]
[39 62]
[40 61]
[41 60]
[46 55]
[47 54]
[65 121]
[66 120]
[67 119]
[68 118]
[69 117]
[70 77]
[71 76]
[91 113]
[92 112]
[93 111]
[94 110]
[95 109]
[96 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
