%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 17:52:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACAGAGCUCCUCAAACCAUUGUGGAUAUCUUCUGCCUUCAACCACAGAUCAAAUACUUCAAGAGCCAUUUAAUAAAUAUGGCAGAACUAUAUAUGUGUCUUAAACCUCAAAGUAAAUUUUCCUUGAGAAAUAA\
) } def
/len { sequence length } bind def

/coor [
[135.80590820 152.10435486]
[125.44713593 141.25559998]
[115.08834839 130.40682983]
[104.72956848 119.55806732]
[89.74557495 118.86531830]
[78.42998505 128.71200562]
[67.11439514 138.55870056]
[65.86756134 154.08555603]
[54.25167084 163.91030884]
[39.45687485 162.62596130]
[28.14128304 172.47265625]
[16.82569313 182.31935120]
[11.49434185 197.21522522]
[-3.18588758 199.73320007]
[-14.50147820 209.57989502]
[-25.81706810 219.42658997]
[-30.63355064 235.10247803]
[-46.67583466 238.50500488]
[-57.44099426 226.13392639]
[-51.85475540 210.71556091]
[-35.66376495 208.11099243]
[-24.34817314 198.26429749]
[-13.03258324 188.41760254]
[-8.51059914 174.22602844]
[6.97899675 171.00375366]
[18.29458809 161.15705872]
[29.61017799 151.31036377]
[30.38213539 136.48001099]
[41.71748352 126.33286285]
[57.26770020 127.24311829]
[68.58329010 117.39642334]
[79.89888000 107.54972839]
[77.14263916 92.80513000]
[63.03412628 87.71102142]
[48.92561722 82.61691284]
[34.81710434 77.52280426]
[23.12878227 87.48667908]
[8.02156258 90.25569916]
[-6.44078922 85.08501434]
[-16.36797142 73.36551666]
[-19.08962440 58.24969101]
[-13.87363434 43.80361938]
[-2.12307835 33.91321945]
[13.00120449 31.23896027]
[27.43085670 36.50020599]
[37.28437424 48.28170776]
[39.91121292 63.41429901]
[54.01972198 68.50840759]
[68.12823486 73.60250854]
[82.23674774 78.69661713]
[88.98863220 75.43134308]
[79.04949188 64.19686890]
[69.11035919 52.96238708]
[55.11433029 47.56690216]
[45.60572433 35.96576309]
[43.06298828 21.18284988]
[48.14889908 7.07138205]
[59.53779221 -2.69043660]
[74.26111603 -5.55815315]
[88.48117828 -0.78428733]
[98.49147034 10.38683605]
[101.68277740 25.04342270]
[97.22187805 39.36740112]
[99.85714722 54.13410187]
[102.49240875 68.90080261]
[109.24429321 65.63552856]
[114.01116943 51.41311646]
[118.77803802 37.19070816]
[123.54490662 22.96829796]
[128.31178284 8.74588776]
[118.57685089 -3.22217989]
[116.88043976 -18.55599022]
[123.76387024 -32.36257935]
[137.03067017 -40.23631668]
[152.44743347 -39.66472244]
[165.09474182 -30.83018494]
[170.93688965 -16.55177689]
[168.10964966 -1.38568711]
[157.51521301 9.82864189]
[142.53419495 13.51275921]
[137.76731873 27.73516846]
[133.00044250 41.95757675]
[128.23358154 56.17998886]
[123.46670532 70.40239716]
[134.46861267 60.20641708]
[147.05583191 52.04787445]
[161.74734497 49.02138138]
[176.53425598 51.54076767]
[189.39463806 59.26154327]
[198.57002258 71.12799072]
[202.80575562 85.51751709]
[201.52267456 100.46253967]
[194.89622498 113.91950989]
[183.83248901 124.04837036]
[169.84428406 129.46411133]
[154.84434509 129.42619324]
[140.88368225 123.93982697]
[129.87019348 113.75370789]
[115.57833099 109.19928741]
[125.93711090 120.04804993]
[136.29589844 130.89680481]
[146.65467834 141.74557495]
[162.80548096 136.14468384]
[179.73054504 138.11557007]
[194.06942749 147.21879578]
[202.99606323 161.60360718]
[204.77580261 178.38400269]
[199.10221863 194.21775818]
[209.95097351 204.57653809]
[220.79974365 214.93531799]
[231.64849854 225.29409790]
[242.49725342 235.65287781]
[257.82150269 239.58706665]
[261.68325806 253.97235107]
[276.92443848 251.05920410]
[290.95272827 257.69140625]
[298.37402344 271.31875610]
[296.33462524 286.70123291]
[285.61874390 297.92398071]
[270.34689331 300.67160034]
[256.39135742 293.88760376]
[249.11833191 280.18054199]
[251.32447815 264.82110596]
[236.77619934 261.62783813]
[232.13847351 246.50164795]
[221.28971863 236.14285278]
[210.44094849 225.78407288]
[199.59219360 215.42529297]
[188.74342346 205.06651306]
[176.90744019 210.64622498]
[163.84516907 211.84703064]
[151.12820435 208.50242615]
[140.29411316 200.99411011]
[132.66053772 190.20855713]
[129.16497803 177.43243408]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 102]
[2 101]
[3 100]
[4 99]
[5 32]
[6 31]
[7 30]
[10 27]
[11 26]
[12 25]
[14 23]
[15 22]
[16 21]
[33 50]
[34 49]
[35 48]
[36 47]
[66 84]
[67 83]
[68 82]
[69 81]
[70 80]
[108 129]
[109 128]
[110 127]
[111 126]
[112 125]
[114 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
