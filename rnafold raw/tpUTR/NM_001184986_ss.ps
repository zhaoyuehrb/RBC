%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 13:51:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUUUGAAACACUAAUGUAGUAUGCUCCGUAUAGUGAUUGUAGCUGUUCCUCUGGAUUCACCAUCUGUUGAGUUGUAAAUGUGAGAGAAAAAGUUAUAUGUGAAUAUAUAUCAAGCCAGCAUUUGUAUUUUGCAUCAUUAAAUAAAAAGAAAUAAAAAUACUUCUGUAUUCUUCAGAUAAAGCAUAUUGUGACAA\
) } def
/len { sequence length } bind def

/coor [
[106.66040039 350.40240479]
[96.78287506 361.78359985]
[84.54656982 370.57958984]
[70.61136627 376.31604004]
[55.72877502 378.68359375]
[40.70140076 377.55456543]
[26.33964729 372.98983765]
[13.41802311 365.23556519]
[2.63337803 354.70999146]
[-5.43268633 341.98068237]
[-10.34517670 327.73413086]
[-11.83916950 312.73864746]
[-9.83409595 297.80288696]
[-4.43808556 283.73236084]
[4.05786037 271.28585815]
[15.19556713 261.13458252]
[28.37439156 253.82600403]
[42.88361359 249.75425720]
[57.94077682 249.13893127]
[60.79377747 234.41275024]
[63.64678192 219.68656921]
[66.49978638 204.96038818]
[69.35278320 190.23420715]
[72.20578766 175.50802612]
[75.05879211 160.78184509]
[77.91179657 146.05566406]
[80.76480103 131.32949829]
[67.03989410 109.23191071]
[71.79998016 85.53382874]
[90.00843811 72.60578918]
[78.17520142 63.38763428]
[66.34196472 54.16947556]
[54.50872040 44.95131683]
[42.67547989 35.73316193]
[27.03385353 33.35617065]
[21.74843979 19.43088341]
[6.10681295 17.05389404]
[0.82139862 3.12860560]
[-11.01184177 -6.08955193]
[-22.91820717 -15.21306419]
[-34.89693832 -24.24135017]
[-46.87567139 -33.26963806]
[-58.85440445 -42.29792404]
[-70.83313751 -51.32621002]
[-82.81187439 -60.35449600]
[-94.79060364 -69.38278198]
[-113.10968781 -71.19831848]
[-119.34025574 -87.59875488]
[-131.46144104 -96.43487549]
[-143.58261108 -105.27099609]
[-155.77386475 -114.01018524]
[-168.03440857 -122.65189362]
[-180.29495239 -131.29359436]
[-202.03694153 -125.59513855]
[-220.66915894 -137.66702271]
[-224.26322937 -159.29632568]
[-237.29328918 -166.72715759]
[-250.32336426 -174.15800476]
[-263.35342407 -181.58885193]
[-276.38348389 -189.01968384]
[-289.41354370 -196.45053101]
[-303.49938965 -189.94140625]
[-318.71447754 -192.98789978]
[-329.20828247 -204.41854858]
[-330.94570923 -219.83804321]
[-323.25872803 -233.31727600]
[-309.10308838 -239.67320251]
[-293.92196655 -236.46185303]
[-283.55279541 -224.91802979]
[-281.98272705 -209.48059082]
[-268.95263672 -202.04975891]
[-255.92259216 -194.61891174]
[-242.89251709 -187.18806458]
[-229.86245728 -179.75723267]
[-216.83238220 -172.32638550]
[-210.36549377 -177.09831238]
[-202.74977112 -179.76979065]
[-194.65148926 -180.08604431]
[-186.78532410 -177.99931335]
[-179.85136414 -173.67475891]
[-174.47268677 -167.47761536]
[-171.13948059 -159.94238281]
[-170.16438293 -151.72671509]
[-171.65324402 -143.55413818]
[-159.39270020 -134.91244507]
[-147.13215637 -126.27072906]
[-139.84529114 -124.98535919]
[-134.74649048 -117.39217377]
[-122.62531281 -108.55606079]
[-110.50413513 -99.71994019]
[-98.50152588 -101.28171539]
[-88.32884979 -94.00946808]
[-85.76231384 -81.36151886]
[-73.78358459 -72.33322906]
[-61.80485153 -63.30494308]
[-49.82611847 -54.27665710]
[-37.84738541 -45.24837112]
[-25.86865234 -36.22008514]
[-13.88992023 -27.19179726]
[-6.64774513 -25.67470741]
[-1.79368401 -17.92279243]
[10.03955650 -8.70463467]
[24.83479118 -6.98699045]
[30.96659660 7.59764290]
[45.76183319 9.31528664]
[51.89363861 23.89991951]
[63.72687912 33.11807632]
[75.56011963 42.33623505]
[87.39335632 51.55439377]
[99.22660065 60.77254868]
[87.96437836 50.86485672]
[80.89883423 37.63314819]
[78.92999268 22.76292229]
[82.30866241 8.14838696]
[90.60444641 -4.34881258]
[102.76060486 -13.13674545]
[117.22865295 -17.09597969]
[132.16560364 -15.72217751]
[145.66876221 -9.19033527]
[156.01803589 1.66749930]
[161.89509583 15.46822453]
[162.55134583 30.45386314]
[157.90313721 44.71549988]
[148.54261780 56.43644333]
[135.66213989 64.12364960]
[120.90481567 66.79789734]
[135.79765320 65.00811768]
[150.69049072 63.21833420]
[165.58334351 61.42855072]
[180.47618103 59.63876724]
[195.36901855 57.84898758]
[210.26185608 56.05920410]
[212.23332214 41.10713959]
[217.86203003 27.11541367]
[226.79415894 14.96355438]
[238.46824646 5.41543722]
[252.15043640 -0.92873353]
[266.98065186 -3.67015862]
[282.02667236 -2.63650942]
[296.34265137 2.10723758]
[309.02871704 10.26288700]
[319.28741455 21.31776619]
[326.47381592 34.57695770]
[330.13623047 49.20698166]
[330.04443359 64.28816986]
[326.20419312 78.87252045]
[318.85687256 92.04324341]
[308.46438599 102.97241211]
[295.67996216 110.97301483]
[281.30728149 115.54212952]
[266.24981689 116.39252472]
[251.45405579 113.47075653]
[237.85011292 106.96048737]
[226.29313660 97.27095795]
[217.50959778 85.01126099]
[212.05163574 70.95204163]
[197.15879822 72.74182892]
[182.26596069 74.53160858]
[167.37312317 76.32138824]
[152.48028564 78.11117554]
[137.58744812 79.90095520]
[122.69460297 81.69073486]
[132.59959412 95.13024902]
[134.10940552 113.71418762]
[145.17080688 123.84558868]
[156.23220825 133.97698975]
[167.29360962 144.10839844]
[182.77226257 141.88461304]
[196.03169250 150.17445374]
[200.81120300 165.06372070]
[194.85404968 179.52215576]
[180.97302246 186.72293091]
[165.72232056 183.26605225]
[156.30285645 170.78375244]
[157.16221619 155.16979980]
[146.10079956 145.03839111]
[135.03939819 134.90699768]
[123.97799683 124.77558899]
[116.85623932 127.12731934]
[113.80809784 141.81434631]
[102.61273193 131.83076477]
[95.49097443 134.18249512]
[92.63797760 148.90867615]
[89.78497314 163.63485718]
[86.93196869 178.36103821]
[84.07896423 193.08721924]
[81.22596741 207.81340027]
[78.37296295 222.53956604]
[75.51995850 237.26574707]
[72.66695404 251.99192810]
[86.40489960 258.18594360]
[98.34372711 267.38165283]
[107.83959961 279.08316040]
[114.38041687 292.65939331]
[117.61343384 307.37823486]
[117.36430359 322.44589233]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 190]
[20 189]
[21 188]
[22 187]
[23 186]
[24 185]
[25 184]
[26 183]
[27 182]
[30 110]
[31 109]
[32 108]
[33 107]
[34 106]
[36 104]
[38 102]
[39 101]
[40 99]
[41 98]
[42 97]
[43 96]
[44 95]
[45 94]
[46 93]
[48 90]
[49 89]
[50 88]
[51 86]
[52 85]
[53 84]
[56 75]
[57 74]
[58 73]
[59 72]
[60 71]
[61 70]
[126 162]
[127 161]
[128 160]
[129 159]
[130 158]
[131 157]
[132 156]
[164 178]
[165 177]
[166 176]
[167 175]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
