%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 10:38:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGUCUGAAAGGUUGGGGGAGGCUGGGAGAGGGGAACGUGGGAAUAGCACAGGAAUCUGAGAGACUAAGGAAGAGAAGGGGAACGGAGGGAGGGGGCACACUUACACAACUCUCUCUGCAAUAUGUGCAAUAGCAAAAUGCAGUGAUGCAUGAAUUUUA\
) } def
/len { sequence length } bind def

/coor [
[10.38856411 158.71867371]
[2.50607777 144.41877747]
[-3.11175489 129.08709717]
[-17.79801559 132.13893127]
[-32.48427582 135.19076538]
[-47.17053986 138.24261475]
[-61.85680008 141.29444885]
[-68.30610657 155.28417969]
[-81.60096741 162.70710754]
[-96.54074097 160.89958191]
[-107.42121124 150.76284790]
[-122.10746765 153.81468201]
[-136.79373169 156.86651611]
[-151.47999573 159.91836548]
[-166.16625977 162.97019958]
[-170.89367676 175.94827271]
[-181.34216309 184.81535339]
[-194.70326233 187.32876587]
[-207.45457458 182.93508911]
[-216.28828430 172.88754272]
[-224.22779846 183.09439087]
[-236.60050964 185.07144165]
[-246.65884399 178.29479980]
[-261.45300293 180.77131653]
[-276.24713135 183.24783325]
[-291.04129028 185.72434998]
[-296.65527344 201.25120544]
[-309.25177002 211.77938843]
[-325.34365845 214.51736450]
[-340.53771973 208.81333923]
[-350.73388672 196.30732727]
[-362.87152100 206.45562744]
[-376.80682373 201.19670105]
[-388.89526367 212.27830505]
[-404.45297241 207.09284973]
[-407.47555542 190.97465515]
[-394.85363770 180.50476074]
[-379.57153320 186.45368958]
[-368.48840332 176.50312805]
[-353.49856567 181.56431580]
[-349.81408691 168.38562012]
[-340.75930786 158.03755188]
[-328.06442261 152.58427429]
[-314.19293213 153.14627075]
[-301.86364746 159.67062378]
[-293.51782227 170.93020630]
[-278.72366333 168.45368958]
[-263.92950439 165.97717285]
[-249.13536072 163.50065613]
[-236.24790955 151.62103271]
[-219.05299377 158.14453125]
[-212.51502991 143.11213684]
[-198.17077637 134.84013367]
[-181.55564880 136.74855042]
[-169.21809387 148.28393555]
[-154.53182983 145.23210144]
[-139.84556580 142.18026733]
[-125.15930939 139.12841797]
[-110.47304535 136.07658386]
[-104.53185272 122.44425964]
[-91.54904938 114.83435059]
[-76.39753723 116.34605408]
[-64.90863800 126.60819244]
[-50.22237778 123.55635071]
[-35.53611755 120.50450897]
[-20.84985733 117.45266724]
[-6.16359520 114.40082550]
[-7.13548374 99.71564484]
[-6.08565521 85.03582764]
[-3.03391957 70.63838959]
[1.96213448 56.79502869]
[8.80822849 43.76697159]
[17.37517166 31.80006981]
[27.50129890 21.12014771]
[38.99552536 11.92873955]
[51.64094925 4.39929485]
[65.19893646 -1.32610118]
[79.41364288 -5.13940620]
[94.01683044 -6.96866131]
[108.73292542 -6.77934647]
[123.28421783 -4.57503462]
[137.39613342 -0.39732215]
[150.80235291 5.67495441]
[163.24989319 13.52720642]
[174.50387573 23.01125908]
[185.66409302 12.98880863]
[196.82431030 2.96635914]
[207.98452759 -7.05609035]
[219.14474487 -17.07854080]
[230.30496216 -27.10099030]
[241.46517944 -37.12343979]
[252.62541199 -47.14588928]
[263.78561401 -57.16833878]
[264.78948975 -72.71279144]
[276.25030518 -82.71800232]
[291.06338501 -81.66516876]
[287.23846436 -96.48503876]
[290.75006104 -111.38225555]
[300.79129028 -122.93355560]
[315.05471802 -128.48452759]
[330.26272583 -126.75960541]
[342.92059326 -118.15515900]
[350.11968994 -104.64842987]
[350.20565796 -89.34316254]
[343.15881348 -75.75640106]
[330.59838867 -67.01027679]
[315.41073608 -65.11458588]
[301.08584595 -70.50495148]
[300.54589844 -55.66432953]
[289.37063599 -45.34115601]
[273.80807495 -46.00811768]
[262.64785767 -35.98566818]
[251.48764038 -25.96322060]
[240.32742310 -15.94077015]
[229.16719055 -5.91832066]
[218.00697327 4.10412931]
[206.84675598 14.12657928]
[195.68653870 24.14902878]
[184.52632141 34.17147827]
[192.15017700 45.35169220]
[198.30387878 57.40375900]
[202.88925171 70.13540649]
[205.83314514 83.34350586]
[207.08857727 96.81734467]
[206.63552856 110.34195709]
[204.48123169 123.70157623]
[200.66004944 136.68305969]
[214.35925293 142.79302979]
[228.05847168 148.90298462]
[244.30380249 146.66218567]
[254.15203857 159.77493286]
[247.47216797 174.75196838]
[231.13586426 176.18618774]
[221.94851685 162.60220337]
[208.24929810 156.49223328]
[194.55009460 150.38227844]
[186.88293457 162.68531799]
[177.62506104 173.84065247]
[166.94596863 183.64407349]
[175.47619629 195.98242188]
[184.00643921 208.32078552]
[192.53666687 220.65914917]
[201.06690979 232.99751282]
[216.11151123 239.52374268]
[217.71287537 255.84451294]
[204.22363281 265.17041016]
[189.52037048 257.90774536]
[188.72854614 241.52774048]
[180.19830322 229.18937683]
[171.66807556 216.85101318]
[163.13784790 204.51266479]
[154.60760498 192.17430115]
[139.96598816 199.40228271]
[124.39601135 204.32127380]
[108.25934601 206.81701660]
[91.93082428 206.83155823]
[75.78974152 204.36453247]
[60.21102905 199.47326660]
[45.55656433 192.27136230]
[32.16674423 182.92613220]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 67]
[4 66]
[5 65]
[6 64]
[7 63]
[11 59]
[12 58]
[13 57]
[14 56]
[15 55]
[20 51]
[23 49]
[24 48]
[25 47]
[26 46]
[31 40]
[33 38]
[85 119]
[86 118]
[87 117]
[88 116]
[89 115]
[90 114]
[91 113]
[92 112]
[93 111]
[96 108]
[127 136]
[128 135]
[129 134]
[139 152]
[140 151]
[141 150]
[142 149]
[143 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
