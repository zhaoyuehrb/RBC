%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:16:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCACCACAUGCCUCUGUCUCCCCGCUGAGCCCAGGCACUUGCCCAGGCCGCCCUGCAGGACCACUGCAAUAAACGCCUUCUCCUGCCA\
) } def
/len { sequence length } bind def

/coor [
[158.34931946 123.59398651]
[154.78617859 117.23464966]
[152.68470764 110.24076080]
[137.70481873 109.46434021]
[122.72492218 108.68791962]
[116.92289734 117.47905731]
[107.94880676 122.99388123]
[97.48477173 124.19866943]
[87.49219513 120.86759949]
[79.84410858 113.62505341]
[75.97409821 103.82859802]
[61.15474701 101.50765991]
[46.33539581 99.18671417]
[31.51604080 96.86577606]
[16.69668770 94.54483795]
[4.01193285 103.58556366]
[-10.98393631 101.02069092]
[-19.52471733 88.87200165]
[-28.70777702 90.65586090]
[-34.81192398 86.20668030]
[-49.54233932 83.37561798]
[-64.27275085 80.54454803]
[-77.21419525 89.61619568]
[-92.76510620 86.79758453]
[-101.69941711 73.76095581]
[-98.71655273 58.24071121]
[-85.58619690 49.44473267]
[-70.09835815 52.59151840]
[-61.44168854 65.81414032]
[-46.71127319 68.64520264]
[-31.98086166 71.47626495]
[-17.20377731 74.05265045]
[-5.35770750 65.09685516]
[9.70428658 67.23950958]
[19.01762772 79.72548676]
[33.83697891 82.04642487]
[48.65633392 84.36736298]
[63.47568893 86.68830109]
[78.29504395 89.00924683]
[92.84959412 76.74546051]
[111.78008270 78.71311188]
[123.50134277 93.70802307]
[138.48123169 94.48444366]
[153.46112061 95.26086426]
[169.01312256 75.72278595]
[193.56216431 72.50159454]
[213.28668213 87.11304474]
[227.48716736 82.28124237]
[241.68763733 77.44943237]
[255.88812256 72.61763000]
[257.68035889 56.54822540]
[266.22631836 42.89025879]
[279.79663086 34.31335068]
[295.68569946 32.46835709]
[310.75115967 37.66979980]
[322.03527832 48.84359741]
[336.06051636 43.52452469]
[350.08578491 38.20545197]
[364.11102295 32.88637924]
[378.13626099 27.56730461]
[386.00521851 13.58664513]
[401.86437988 11.16439247]
[413.54791260 22.15869331]
[412.09323120 38.13565826]
[398.61624146 46.83913040]
[383.45532227 41.59254837]
[369.43008423 46.91162109]
[355.40484619 52.23069382]
[341.37960815 57.54977036]
[327.35437012 62.86884308]
[326.81710815 76.84284210]
[320.93963623 89.58010101]
[310.59176636 99.11574554]
[297.33566284 103.96468353]
[283.19021606 103.35282135]
[270.32333374 97.34044647]
[260.71994019 86.81810760]
[246.51945496 91.64990997]
[232.31896973 96.48171997]
[218.11848450 101.31352997]
[218.08312988 108.44364929]
[216.49781799 115.40900421]
[213.43257141 121.87611389]
[209.02835083 127.53404999]
[203.49067688 132.10943604]
[197.07998657 135.37959290]
[190.09942627 137.18344116]
[182.88046265 137.42935181]
[175.76724243 136.09983826]
[169.10003662 133.25263977]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 44]
[4 43]
[5 42]
[11 39]
[12 38]
[13 37]
[14 36]
[15 35]
[18 32]
[20 31]
[21 30]
[22 29]
[47 80]
[48 79]
[49 78]
[50 77]
[56 70]
[57 69]
[58 68]
[59 67]
[60 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
