%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 22:32:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCCAGUCUCCCAAGAAAGGCCAACCACCCUAGUUCUGGCAAAGGGAUCUGCCCCAGGGUCACGAUGACACCAGUGUGACCCGAGGAGAACUAGUAACUACAACCUACACAACUGUAGAACAAUAAACAGAAACCAGCAGACAGCGGAGCAUAA\
) } def
/len { sequence length } bind def

/coor [
[98.44911957 256.37423706]
[109.70687103 245.52079773]
[108.49987030 230.56944275]
[107.29287720 215.61807251]
[106.08587646 200.66671753]
[93.94050598 185.66386414]
[102.70638275 167.55302429]
[100.89833832 152.66238403]
[99.09028625 137.77175903]
[97.28223419 122.88112640]
[90.41233826 119.87204742]
[84.86009979 133.80664062]
[79.30786896 147.74122620]
[76.96134949 162.55654907]
[62.24856949 165.47789001]
[54.41980743 152.68295288]
[63.71805954 140.91275024]
[70.19530487 127.38332367]
[76.67254639 113.85389709]
[69.80265045 110.84482574]
[57.63198471 119.61265564]
[51.39864349 134.78096008]
[35.11198044 136.69842529]
[25.52631950 123.39251709]
[32.50256348 108.55122375]
[48.86415482 107.44198608]
[61.03482056 98.67415619]
[67.76779938 92.13139343]
[75.29416656 88.22179413]
[82.83959961 86.94669342]
[89.67189789 88.10671997]
[81.15092468 75.76196289]
[72.62995148 63.41720581]
[64.10897827 51.07244492]
[55.58800888 38.72768784]
[47.06703949 26.38293076]
[38.54606628 14.03817177]
[30.02509689 1.69341409]
[17.94332886 -7.19651890]
[3.62251616 -11.65906429]
[-10.69829655 -16.12161064]
[-25.01910973 -20.58415604]
[-37.38063431 -11.20479870]
[-52.89502716 -10.91632175]
[-65.59668732 -19.82964897]
[-70.60157013 -34.51742554]
[-65.98519135 -49.33190155]
[-53.52264786 -58.57660675]
[-38.00603867 -58.69676590]
[-25.40181732 -49.64617538]
[-20.55656433 -34.90496826]
[-6.23575115 -30.44242287]
[8.08506203 -25.97987747]
[22.40587425 -21.51733208]
[33.11873627 -32.01659775]
[28.94547462 -46.42436981]
[15.37568569 -58.83263779]
[20.16771507 -75.68926239]
[15.70516872 -90.01007843]
[11.24262238 -104.33088684]
[6.78007698 -118.65170288]
[2.31753111 -132.97251892]
[-2.14501476 -147.29331970]
[-6.60756063 -161.61413574]
[-11.07010651 -175.93495178]
[-22.56266212 -186.80839539]
[-18.96210289 -201.26126099]
[-23.42464828 -215.58207703]
[-35.83843994 -226.29794312]
[-32.49975586 -242.35362244]
[-16.84314728 -247.23242188]
[-4.97479105 -235.91543579]
[-9.10383511 -220.04461670]
[-4.64128923 -205.72380066]
[6.53207541 -195.87467957]
[3.25070667 -180.39749146]
[7.71325254 -166.07669067]
[12.17579842 -151.75587463]
[16.63834381 -137.43505859]
[21.10088921 -123.11425018]
[25.56343651 -108.79343414]
[30.02598190 -94.47261810]
[34.48852921 -80.15180969]
[45.07659912 -74.22817230]
[48.89016342 -62.28836823]
[43.35324860 -50.59762955]
[47.52650833 -36.18986130]
[42.36985397 -6.82755709]
[50.89082336 5.51720095]
[59.41179657 17.86195946]
[67.93276978 30.20671654]
[76.45373535 42.55147552]
[84.97470856 54.89623260]
[93.49568176 67.24098969]
[102.01665497 79.58574677]
[94.23310089 66.76325226]
[93.57704926 51.77760696]
[100.21026611 38.32396317]
[112.49712372 29.71972084]
[127.40795135 28.08650398]
[141.26602173 33.82703781]
[150.65423584 45.52581787]
[153.25764465 60.29816437]
[148.43429565 74.50151825]
[137.37353516 84.63362885]
[122.80393982 88.19612885]
[137.55824280 85.49230194]
[152.31254578 82.78847504]
[167.06683350 80.08464813]
[181.82113647 77.38082123]
[193.95518494 66.34919739]
[209.49137878 71.59883881]
[212.44741821 87.72937012]
[199.78236389 98.14707947]
[184.52496338 92.13512421]
[169.77066040 94.83895111]
[155.01635742 97.54277039]
[140.26206970 100.24659729]
[125.50776672 102.95042419]
[139.75216675 107.65118408]
[153.99656677 112.35193634]
[168.24096680 117.05269623]
[183.03749084 114.59043121]
[197.81181335 117.18259430]
[210.88638306 124.53485107]
[220.77664185 135.81239319]
[226.35958862 149.73469543]
[227.00131226 164.72096252]
[222.62895203 179.06956482]
[213.73896790 191.15129089]
[201.34077454 199.59432983]
[186.84211731 203.43998718]
[171.88926697 202.25161743]
[158.18003845 196.16416931]
[147.27105713 185.86883545]
[140.40097046 172.53459167]
[138.34985352 157.67587280]
[129.62419128 145.47494507]
[120.89852905 133.27400208]
[112.17286682 121.07307434]
[113.98091888 135.96371460]
[115.78897095 150.85433960]
[117.59701538 165.74497986]
[126.58853149 171.99296570]
[130.54536438 181.96554565]
[128.37420654 192.24737549]
[121.03723145 199.45971680]
[122.24423218 214.41107178]
[123.45123291 229.36244202]
[124.65823364 244.31379700]
[137.51121521 253.22080994]
[141.58195496 268.31927490]
[134.94836426 282.48010254]
[120.74265289 289.01705933]
[105.67229462 284.84353638]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[7 143]
[8 142]
[9 141]
[10 140]
[20 27]
[21 26]
[31 95]
[32 94]
[33 93]
[34 92]
[35 91]
[36 90]
[37 89]
[38 88]
[39 54]
[40 53]
[41 52]
[42 51]
[55 87]
[56 86]
[58 83]
[59 82]
[60 81]
[61 80]
[62 79]
[63 78]
[64 77]
[65 76]
[67 74]
[68 73]
[106 119]
[107 118]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
