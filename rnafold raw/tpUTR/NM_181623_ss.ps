%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 19:56:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGCCUUUGGGUCUCGCCUUUUUGGAUCAUCUUACUGAAUAUUCUCCAUUCUCUCAUGAUUAUUUCUGUACUCUAUGGAACUGCAACACUCAGCCUGUCCAAUAUCUGUGAUUGUUGACCAUCUACA\
) } def
/len { sequence length } bind def

/coor [
[114.61706543 520.96575928]
[99.52946472 519.86151123]
[85.52230835 514.14703369]
[73.96786499 504.38232422]
[65.99813843 491.52389526]
[62.39391327 476.83157349]
[63.50829315 461.74472046]
[69.23210144 447.74139404]
[79.00458527 436.19348145]
[91.86833191 428.23239136]
[106.56307983 424.63800049]
[107.65800476 409.67800903]
[108.75293732 394.71804810]
[109.84786224 379.75805664]
[110.03050995 364.75915527]
[109.30020142 349.77694702]
[108.56988525 334.79473877]
[107.83956909 319.81253052]
[93.32781219 312.81375122]
[84.24883270 299.39108276]
[83.14161682 283.13037109]
[90.40010834 268.43313599]
[104.14102936 259.32510376]
[103.04610443 244.36511230]
[101.95117188 229.40512085]
[100.85624695 214.44514465]
[99.76131439 199.48515320]
[98.66638184 184.52517700]
[85.93328094 176.84362793]
[80.09592438 162.97319031]
[83.58609772 148.15184021]
[95.26934052 138.11152649]
[94.17441559 123.15155029]
[81.72034454 115.35532379]
[76.19044495 101.74263763]
[79.67938995 87.46985626]
[90.86560059 77.94338226]
[89.77067566 62.98339844]
[75.21843719 58.80514908]
[62.99668884 49.91690826]
[54.56916428 37.40702820]
[50.93700409 22.79615974]
[52.51985550 7.85239553]
[59.10748291 -5.62267923]
[69.88746643 -16.01118660]
[83.54533386 -22.07319832]
[82.45040131 -37.03318405]
[81.35547638 -51.99316788]
[80.26054382 -66.95314789]
[79.16561127 -81.91313171]
[64.02323914 -87.73184967]
[52.95551682 -99.51221466]
[48.12656021 -114.87717438]
[50.44854355 -130.75625610]
[59.40986252 -143.99914551]
[73.18679810 -152.00070190]
[71.72789764 -166.92959595]
[67.74275208 -175.26649475]
[70.41979218 -182.23910522]
[69.32485962 -197.19908142]
[58.17156982 -208.73094177]
[60.37637711 -224.62176514]
[74.24794769 -232.68148804]
[89.14519501 -226.72737122]
[93.64023590 -211.32690430]
[84.28484344 -198.29402161]
[85.37977600 -183.33403015]
[86.65678406 -168.38848877]
[88.11567688 -153.45960999]
[101.40895844 -149.30645752]
[112.13683319 -140.35743713]
[118.64706421 -127.94757843]
[119.92047119 -113.94807434]
[115.73037720 -100.48427582]
[106.68206024 -89.61293030]
[94.12559509 -83.00806427]
[95.22052765 -68.04808044]
[96.31546021 -53.08809662]
[97.41038513 -38.12811279]
[98.50531769 -23.16812897]
[112.90026855 -19.15931892]
[125.07795715 -10.45109558]
[133.55737305 1.92121410]
[137.29917908 16.47526169]
[135.83308411 31.45927429]
[129.31681824 45.06289673]
[118.51945496 55.63592529]
[104.73065948 61.88846588]
[105.82558441 76.84844971]
[118.27965546 84.64467621]
[123.80955505 98.25736237]
[120.32061005 112.53014374]
[109.13439941 122.05661774]
[110.22932434 137.01660156]
[123.24995422 145.24882507]
[128.86093140 159.40403748]
[125.10533905 173.97660828]
[113.62636566 183.43023682]
[114.72129822 198.39022827]
[115.81623077 213.35020447]
[116.91115570 228.31019592]
[118.00608826 243.27017212]
[119.10101318 258.23016357]
[132.04042053 263.68975830]
[141.30403137 274.15692139]
[145.11410522 287.53628540]
[142.77697754 301.18255615]
[134.80853271 312.42321777]
[122.82177734 319.08221436]
[123.55209351 334.06442261]
[124.28240967 349.04663086]
[125.01272583 364.02883911]
[137.22555542 355.31982422]
[151.71562195 359.19769287]
[157.94604492 372.84255981]
[151.38619995 386.33212280]
[136.80625916 389.85705566]
[124.80784607 380.85296631]
[123.71292114 395.81295776]
[122.61798859 410.77294922]
[121.52306366 425.73294067]
[135.53787231 431.42858887]
[147.10537720 441.17782593]
[155.09233093 454.02554321]
[158.71624756 468.71304321]
[157.62208557 483.80139160]
[151.91703796 497.81234741]
[142.16004944 509.37335205]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 121]
[12 120]
[13 119]
[14 118]
[15 112]
[16 111]
[17 110]
[18 109]
[23 103]
[24 102]
[25 101]
[26 100]
[27 99]
[28 98]
[32 94]
[33 93]
[37 89]
[38 88]
[46 80]
[47 79]
[48 78]
[49 77]
[50 76]
[56 69]
[57 68]
[59 67]
[60 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
