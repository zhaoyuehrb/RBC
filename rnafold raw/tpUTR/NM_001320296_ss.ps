%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 21:04:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUGUCAUCCCUUGAUAUGUCUGCAUGCAAGGUCCACACCCAAAAGUGUCAAUGUUUGCCCCCCAAAUAAAAUUGUCUGGCUUCUGAA\
) } def
/len { sequence length } bind def

/coor [
[79.22536469 135.92770386]
[69.49371338 147.34237671]
[59.76206589 158.75706482]
[50.03041458 170.17173767]
[40.29876328 181.58642578]
[30.56711006 193.00109863]
[20.83545876 204.41578674]
[20.66983414 220.45799255]
[7.93611526 230.21667480]
[-7.59748030 226.20581055]
[-14.01490688 211.50219727]
[-6.39326334 197.38519287]
[9.42077732 194.68414307]
[19.15242767 183.26945496]
[28.88407898 171.85476685]
[38.61573029 160.44009399]
[48.34738159 149.02540588]
[58.07903290 137.61073303]
[67.81068420 126.19604492]
[59.56149292 109.33337402]
[59.58599091 90.56110382]
[67.87917328 73.72002411]
[82.74424744 62.25580978]
[79.07547760 47.71139145]
[75.40670013 33.16697311]
[64.52908325 21.67836952]
[68.91848755 7.44522476]
[65.24971771 -7.09919357]
[61.58094406 -21.64361191]
[48.29428482 -29.77395630]
[44.78081894 -44.57632828]
[52.61374283 -57.19301987]
[41.85724258 -64.57073975]
[39.18994522 -76.92575836]
[45.52735519 -87.39250946]
[42.37416458 -102.05734253]
[39.22097015 -116.72217560]
[24.97665215 -122.87677765]
[17.09932899 -136.24568176]
[18.61798859 -151.68826294]
[28.94867706 -163.26652527]
[44.11903381 -166.52842712]
[58.29574585 -160.21966553]
[66.02758026 -146.76609802]
[64.34148407 -131.34089661]
[53.88580322 -119.87537384]
[57.03899765 -105.21054077]
[60.19219208 -90.54570770]
[72.65470123 -78.32726288]
[67.15815735 -60.86179352]
[80.03817749 -53.46986008]
[83.96602631 -38.77201462]
[76.12535858 -25.31238556]
[79.79413605 -10.76796627]
[83.46290588 3.77645159]
[94.07810974 14.22474289]
[89.95111847 29.49820137]
[93.61989594 44.04261780]
[97.28866577 58.58703613]
[115.47363281 61.49089050]
[130.61195374 71.97691345]
[139.72299194 87.98048401]
[141.01286316 106.35060883]
[155.17733765 111.28694153]
[169.34182739 116.22327423]
[184.91957092 113.45843506]
[194.39166260 124.95316315]
[208.55615234 129.88949585]
[222.72062683 134.82583618]
[238.72000122 131.22686768]
[249.63601685 143.46502686]
[244.23924255 158.95072937]
[228.08140564 161.75360107]
[217.78430176 148.99031067]
[203.61981201 144.05398560]
[189.45533752 139.11764526]
[174.89071655 142.23556519]
[164.40548706 130.38775635]
[150.24101257 125.45143127]
[136.07652283 120.51509857]
[132.40440369 125.92949677]
[127.92707062 130.69956970]
[122.75575256 134.70677185]
[117.01897430 137.85154724]
[110.85928345 140.05572510]
[104.42974854 141.26454163]
[97.89013672 141.44795227]
[91.40294647 140.60142517]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[3 17]
[4 16]
[5 15]
[6 14]
[7 13]
[23 59]
[24 58]
[25 57]
[27 55]
[28 54]
[29 53]
[32 50]
[35 48]
[36 47]
[37 46]
[63 80]
[64 79]
[65 78]
[67 76]
[68 75]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
