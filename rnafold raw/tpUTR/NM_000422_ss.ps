%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 06:11:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACUCAGCUACCCCGGCCGGCCACCCAGGAGGCAGGGAGGCAGCCGCCCCAUCUGCCCCACAGUCUCCGGCCUCUCCAGCCUCAGCCCCCUGCUUCAGUCCCUUCCCCAUGCUUCCUUGCCUGAUGACAAUAAAGCUUGUUGACUCAGCUAUG\
) } def
/len { sequence length } bind def

/coor [
[56.03070450 83.63566589]
[42.98994827 76.22360229]
[29.94919586 68.81153870]
[16.90843964 61.39947128]
[3.86768508 53.98740768]
[-14.51024532 54.56341934]
[-22.83671570 39.14402390]
[-36.02501297 31.99777603]
[-49.21331024 24.85153008]
[-63.37699509 37.81993866]
[-81.24394226 44.78208923]
[-100.39098358 44.81580734]
[-118.22930908 37.93707275]
[-132.35449219 25.09508133]
[-140.87054443 8.04133415]
[-142.64443970 -10.90924263]
[-157.23881531 -14.37395859]
[-171.83319092 -17.83867455]
[-186.42755127 -21.30339050]
[-201.02192688 -24.76810646]
[-215.61630249 -28.23282433]
[-228.96481323 -20.20442009]
[-243.71621704 -23.92603683]
[-251.28781128 -36.70126724]
[-265.88220215 -40.16598511]
[-277.65585327 -30.23186874]
[-292.84396362 -29.14797211]
[-305.60705566 -37.12091446]
[-311.16149902 -50.91533279]
[-325.75588989 -54.38005066]
[-334.88882446 -53.31663132]
[-340.60946655 -58.06570435]
[-355.13061523 -61.82549286]
[-369.65179443 -65.58528137]
[-384.17294312 -69.34506989]
[-398.69409180 -73.10485840]
[-413.28848267 -76.56957245]
[-427.95007324 -79.73779297]
[-437.05957031 -78.48949432]
[-442.87530518 -83.12165070]
[-457.46966553 -86.58637238]
[-472.06405640 -90.05108643]
[-487.61248779 -84.83779907]
[-499.72070312 -95.89778137]
[-495.93280029 -111.85346222]
[-480.14544678 -116.29101562]
[-468.59933472 -104.64546204]
[-454.00494385 -101.18074036]
[-439.41058350 -97.71602631]
[-424.78186035 -94.39939117]
[-410.12023926 -91.23117065]
[-405.64791870 -93.05377197]
[-399.97988892 -92.04434204]
[-394.93429565 -87.62601471]
[-380.41314697 -83.86622620]
[-365.89199829 -80.10643768]
[-351.37084961 -76.34664917]
[-336.84967041 -72.58686066]
[-322.29116821 -68.97442627]
[-307.69680786 -65.50970459]
[-296.53485107 -75.33563232]
[-281.55004883 -76.72120667]
[-268.46975708 -68.92637634]
[-262.41748047 -54.76035690]
[-247.82310486 -51.29564285]
[-235.31735229 -59.30449677]
[-220.46722412 -55.99868393]
[-212.15159607 -42.82719803]
[-197.55722046 -39.36248016]
[-182.96284485 -35.89776611]
[-168.36846924 -32.43304825]
[-153.77409363 -28.96833229]
[-139.17971802 -25.50361633]
[-134.86293030 -33.98640823]
[-129.06489563 -41.53461456]
[-121.98196411 -47.89264297]
[-113.85395050 -52.84521103]
[-104.95608521 -56.22462463]
[-95.58964539 -57.91645432]
[-86.07178497 -57.86341095]
[-82.45934296 -72.42192078]
[-87.51479340 -88.02238464]
[-76.33267975 -100.01789856]
[-60.41619873 -96.06850433]
[-56.13886642 -80.23700714]
[-67.90083313 -68.80948639]
[-71.51326752 -54.25097275]
[-59.98711014 -47.80603027]
[-50.44998550 -38.63865662]
[-43.53054810 -27.33698082]
[-39.68897247 -14.63034153]
[-39.18636322 -1.34219420]
[-42.06706238 11.66323280]
[-28.87876511 18.80947876]
[-15.69046974 25.95572472]
[-3.97132516 22.81249237]
[7.09126282 28.70690536]
[11.27974987 40.94665146]
[24.32050514 48.35871506]
[37.36125946 55.77078247]
[50.40201569 63.18284607]
[63.44277191 70.59490967]
[71.31603241 62.28825760]
[81.05499268 56.06458664]
[92.11412048 52.33694077]
[103.85810852 51.37672806]
[115.59836578 53.29470825]
[126.63339233 58.03127289]
[136.29067993 65.35682678]
[143.96762085 74.88240051]
[149.16908264 86.08007812]
[151.53894043 98.31212616]
[166.53816223 98.46413422]
[177.64932251 87.22502136]
[193.45361328 87.21808624]
[204.57463074 98.44744873]
[204.41447449 114.25093079]
[193.06814575 125.25259399]
[177.26725769 124.92536163]
[166.38615417 113.46336365]
[151.38693237 113.31135559]
[145.61158752 127.15496063]
[156.27178955 137.70768738]
[166.93200684 148.26040649]
[177.59220886 158.81312561]
[185.94471741 162.65721130]
[188.35882568 169.68939209]
[203.52117920 174.20748901]
[206.82925415 188.73008728]
[217.27340698 199.49670410]
[227.71755981 210.26330566]
[238.16169739 221.02990723]
[248.60585022 231.79650879]
[259.04998779 242.56311035]
[274.41833496 249.72209167]
[271.79348755 266.47161865]
[254.97190857 268.58609009]
[248.28340149 253.00726318]
[237.83924866 242.24066162]
[227.39509583 231.47406006]
[216.95095825 220.70745850]
[206.50680542 209.94084167]
[196.06265259 199.17424011]
[181.64732361 195.42623901]
[177.59220886 180.13354492]
[167.03948975 169.47332764]
[156.37928772 158.92060852]
[145.71907043 148.36788940]
[135.05886841 137.81517029]
[118.19306946 147.53991699]
[99.16600800 150.23085022]
[80.75463104 145.68518066]
[65.57563019 134.74263000]
[55.71364594 119.13787079]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 102]
[2 101]
[3 100]
[4 99]
[5 98]
[7 95]
[8 94]
[9 93]
[16 73]
[17 72]
[18 71]
[19 70]
[20 69]
[21 68]
[24 65]
[25 64]
[29 60]
[30 59]
[32 58]
[33 57]
[34 56]
[35 55]
[36 54]
[37 51]
[38 50]
[40 49]
[41 48]
[42 47]
[80 87]
[81 86]
[112 121]
[113 120]
[122 149]
[123 148]
[124 147]
[125 146]
[127 145]
[129 143]
[130 142]
[131 141]
[132 140]
[133 139]
[134 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
