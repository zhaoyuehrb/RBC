%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 00:56:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGUCAGAAAUAUUAACAAAAAUUCUCAGCAUUAAAGAAAACAUUGAUUUUCCUUUCCUGACUAUAAAACUAAUUGUGCAUUAUAGAAAAGUUUAAAUCACAGAA\
) } def
/len { sequence length } bind def

/coor [
[173.31170654 183.70703125]
[163.19880676 168.77510071]
[158.62283325 151.30810547]
[160.11920166 133.29144287]
[146.28218079 127.50036621]
[132.44514465 121.70929718]
[118.60810852 115.91822052]
[104.77108002 110.12714386]
[90.85052490 104.53982544]
[76.84944916 99.15744781]
[62.84837341 93.77507782]
[50.89264679 103.31488037]
[35.86632156 105.57459259]
[21.81978989 100.04636383]
[12.48876572 88.30805206]
[10.30084324 73.57446289]
[-3.70023108 68.19209290]
[-17.77880859 63.01583481]
[-31.93185616 58.04680634]
[-46.08490372 53.07777405]
[-59.78599167 62.86634827]
[-76.45752716 62.62090302]
[-89.60144806 52.63307953]
[-94.21087646 36.95360565]
[-108.50370026 32.40219879]
[-122.79651642 27.85079575]
[-137.08934021 23.29939079]
[-148.90893555 33.21406937]
[-164.21536255 35.14200211]
[-178.12438965 28.46799660]
[-186.19770813 15.32170200]
[-185.85914612 -0.10194659]
[-177.21673584 -12.88131809]
[-163.02824402 -18.93856239]
[-147.82116699 -16.34083557]
[-136.44801331 -5.91706181]
[-132.53793335 9.00657082]
[-118.24511719 13.55797482]
[-103.95229340 18.10937881]
[-89.65947723 22.66078377]
[-79.60804749 13.74202824]
[-66.34774017 10.97170925]
[-53.35939789 15.18739986]
[-44.10743713 25.37821388]
[-41.11587524 38.92472839]
[-26.96282578 43.89375687]
[-12.80977917 48.86278534]
[-5.33847761 48.09687424]
[1.68214011 54.19101715]
[15.68321419 59.57339096]
[27.17712975 50.09945297]
[41.96831512 47.63433456]
[56.10084534 52.93885422]
[65.74405670 64.68216705]
[68.23074341 79.77400208]
[82.23181915 85.15637970]
[96.23289490 90.53874969]
[104.42729950 90.27077484]
[110.56214905 96.29011536]
[124.39918518 102.08118439]
[138.23622131 107.87226105]
[152.07324219 113.66333771]
[165.91027832 119.45440674]
[173.44810486 109.65377045]
[183.02429199 101.84758759]
[194.12631226 96.44813538]
[206.16119385 93.73900604]
[218.48727417 93.86026764]
[230.44834900 96.80116272]
[241.40866089 102.40095520]
[250.78660583 110.35769653]
[258.08569336 120.24449921]
[262.92077637 131.53244019]
[265.03836060 143.61886597]
[264.32995605 155.85955811]
[260.83755493 167.60305786]
[273.67864990 175.35588074]
[286.51974487 183.10870361]
[299.36083984 190.86152649]
[308.48074341 192.66572571]
[312.46038818 199.03514099]
[325.06835938 207.16157532]
[337.67633057 215.28802490]
[346.73931885 217.35917664]
[350.53027344 223.84268188]
[362.89422607 232.33575439]
[375.25820923 240.82881165]
[387.62216187 249.32188416]
[404.00448608 250.06442261]
[411.31137085 264.74575806]
[402.02609253 278.26300049]
[385.70056152 276.71075439]
[379.12908936 261.68585205]
[366.76513672 253.19279480]
[354.40115356 244.69972229]
[342.03720093 236.20664978]
[329.54986572 227.89599609]
[316.94189453 219.76954651]
[304.33392334 211.64311218]
[291.60803223 203.70262146]
[278.76693726 195.94979858]
[265.92584229 188.19697571]
[253.08473206 180.44416809]
[239.60932922 192.26142883]
[222.94985962 198.93182373]
[204.99803162 199.68199158]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 63]
[5 62]
[6 61]
[7 60]
[8 59]
[9 57]
[10 56]
[11 55]
[16 50]
[17 49]
[18 47]
[19 46]
[20 45]
[24 40]
[25 39]
[26 38]
[27 37]
[76 103]
[77 102]
[78 101]
[79 100]
[81 99]
[82 98]
[83 97]
[85 96]
[86 95]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
