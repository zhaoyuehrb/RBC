%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 09:13:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUAAAUAGGGAAGAUGGAGACACCCUCUGGGGGUCCUCUCUGAGUCAAAUCCAGUGGUGGGUAAUUGUACAAUAAAUUUUUUUUGGUCAAAUUU\
) } def
/len { sequence length } bind def

/coor [
[106.54217529 152.35368347]
[98.93858337 152.75018311]
[91.35709381 152.04814148]
[83.95559692 150.26216125]
[76.88822937 147.42947388]
[70.30216980 143.60902405]
[64.33458710 138.88041687]
[59.10974884 133.34210205]
[54.73646545 127.10942841]
[51.30581665 120.31218719]
[48.88924026 113.09193420]
[47.53706741 105.59903717]
[47.27745819 97.98954010]
[48.11581421 90.42191315]
[50.03467941 83.05374908]
[36.65857315 76.26554871]
[23.28246498 69.47734070]
[9.69355679 63.12583923]
[-4.09389877 57.21770096]
[-17.88135338 51.30956650]
[-31.66880989 45.40142822]
[-45.45626450 39.49329376]
[-63.58520126 42.16660309]
[-73.67277527 27.90723419]
[-87.64431000 22.44865990]
[-101.61585236 16.99008560]
[-115.58739471 11.53151131]
[-129.55894470 6.07293701]
[-146.51237488 5.94077778]
[-151.07855225 -10.38669395]
[-136.65321350 -19.29432106]
[-124.10036469 -7.89860439]
[-110.12882233 -2.44003010]
[-96.15727997 3.01854396]
[-82.18573761 8.47711754]
[-68.21419525 13.93569183]
[-56.88891220 9.35647583]
[-45.13158035 13.94066715]
[-39.54813004 25.70583725]
[-25.76067352 31.61397362]
[-11.97321796 37.52210999]
[1.81423771 43.43024826]
[15.60169315 49.33838272]
[20.45276451 48.34492493]
[25.96262550 50.52779388]
[30.07067108 56.10123444]
[43.44677734 62.88943863]
[56.82288742 69.67764282]
[75.06478882 53.50329208]
[98.63085175 47.25690842]
[122.48925781 52.27221298]
[130.74691772 39.74979019]
[139.00457764 27.22736931]
[147.26223755 14.70494938]
[155.51989746 2.18252850]
[155.95240784 -14.21091461]
[170.49288940 -21.79419899]
[184.18336487 -12.76629162]
[182.94023132 3.58567047]
[168.04232788 10.44019032]
[159.78466797 22.96261024]
[151.52700806 35.48503113]
[143.26933289 48.00745392]
[135.01167297 60.52987289]
[147.15267944 76.32865143]
[152.56889343 95.50337219]
[150.48786926 115.31938934]
[164.07678223 121.67089081]
[177.66567993 128.02239990]
[192.36460876 122.86685944]
[206.05520630 129.50177002]
[210.87963867 143.54670715]
[224.46855164 149.89820862]
[238.05744934 156.24971008]
[250.60050964 147.38589478]
[265.89648438 145.99710083]
[279.83084106 152.45692444]
[288.65530396 165.02769470]
[289.99612427 180.32795715]
[283.49267578 194.24198914]
[270.89428711 203.02700806]
[255.58992004 204.31987000]
[241.69633484 197.77282715]
[232.95085144 185.14697266]
[231.70594788 169.83862305]
[218.11705017 163.48712158]
[204.52813721 157.13562012]
[190.65843201 162.44285583]
[176.78686523 156.19511414]
[171.31417847 141.61129761]
[157.72528076 135.25979614]
[144.13636780 128.90829468]
[139.51589966 134.96000671]
[134.07250977 140.28366089]
[127.91953278 144.76838684]
[121.18511963 148.32078552]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 48]
[16 47]
[17 46]
[18 43]
[19 42]
[20 41]
[21 40]
[22 39]
[24 36]
[25 35]
[26 34]
[27 33]
[28 32]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
[67 92]
[68 91]
[69 90]
[72 87]
[73 86]
[74 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
