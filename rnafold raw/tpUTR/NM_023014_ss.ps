%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 23:45:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGGCGUGCCCAGUGGGGUAGAGAAAUCCAAAGUUCUCUUCCAGGCACUUGGACACUAAAAUCUACUAUGUAGGUGCAAACUAUUUUUCUCUUUUCUUAUUUAUUUCAUUUUUUAAUAAUUCCAAAAU\
) } def
/len { sequence length } bind def

/coor [
[100.27506256 154.41839600]
[98.48075104 139.52610779]
[96.68643188 124.63381195]
[94.89212036 109.74152374]
[91.49994659 111.54357147]
[87.49090576 112.48210144]
[83.05693817 112.41957855]
[78.41613007 111.25792694]
[63.41720963 111.07807159]
[48.41828918 110.89820862]
[33.41828918 110.89820862]
[18.41936684 111.07807159]
[4.71296072 118.98028564]
[-8.10617065 111.39614868]
[-23.10509300 111.57600403]
[-38.10401535 111.75586700]
[-53.10293579 111.93572235]
[-69.84677887 123.04238129]
[-86.35832977 113.09239960]
[-101.33137512 113.99117279]
[-114.64315033 122.54145050]
[-127.81115723 115.58064270]
[-142.78421021 116.47941589]
[-157.75726318 117.37818909]
[-172.73030090 118.27696228]
[-187.70335388 119.17573547]
[-202.67640686 120.07450867]
[-210.91473389 133.22401428]
[-225.32130432 138.98858643]
[-240.35650635 135.15161133]
[-250.23899841 123.18849945]
[-251.16874695 107.69930267]
[-242.78825378 94.63993835]
[-228.31999207 89.03199768]
[-213.32730103 93.03184509]
[-203.57518005 105.10145569]
[-188.60212708 104.20268250]
[-173.62907410 103.30391693]
[-158.65603638 102.40514374]
[-143.68298340 101.50637054]
[-128.70993042 100.60759735]
[-116.46913147 92.12160492]
[-102.23014832 99.01811981]
[-87.25709534 98.11934662]
[-81.10710907 89.80771637]
[-71.17161560 86.22908020]
[-60.70537949 88.81587982]
[-53.28279495 96.93679810]
[-38.28387070 96.75694275]
[-23.28495026 96.57708740]
[-8.28602886 96.39722443]
[4.34755421 88.50787354]
[18.23950958 96.07914734]
[33.23843002 95.89929199]
[39.95568085 92.64104462]
[48.59814453 95.89929199]
[63.59706879 96.07914734]
[78.59599304 96.25900269]
[65.91833496 88.24170685]
[65.11181641 73.26340485]
[76.85526276 63.93113327]
[91.26438904 68.09973907]
[96.21120453 82.26064301]
[99.42364502 67.60867310]
[102.63608551 52.95669937]
[105.84852600 38.30472946]
[109.06096649 23.65275955]
[112.27340698 9.00078964]
[109.75950623 -7.76574326]
[125.17488098 -14.82283783]
[136.22358704 -1.96350074]
[126.92537689 12.21323109]
[123.71293640 26.86520195]
[120.50049591 41.51716995]
[117.28805542 56.16913986]
[114.07561493 70.82111359]
[110.86317444 85.47308350]
[114.09207916 70.82472992]
[119.26480103 56.74485397]
[126.28704834 43.49011612]
[135.03080750 31.30214691]
[145.33668518 20.40311813]
[157.01683044 10.99171543]
[169.85829163 3.23950100]
[183.62698364 -2.71220756]
[198.07194519 -6.75491476]
[212.92980957 -8.81492424]
[227.92976379 -8.85468483]
[242.79833984 -6.87347031]
[257.26452637 -2.90739727]
[271.06457520 2.97123528]
[283.94696045 10.65526390]
[295.67681885 20.00461388]
[306.04034424 30.84885406]
[314.84857178 42.99029922]
[321.94100952 56.20762253]
[327.18829346 70.25988007]
[330.49481201 84.89090729]
[331.80026245 99.83399200]
[331.08090210 114.81672668]
[328.34976196 129.56599426]
[323.65667725 143.81292725]
[317.08721924 157.29780579]
[308.76107788 169.77482605]
[298.83010864 181.01651001]
[287.47531128 190.81796265]
[274.90365601 199.00048828]
[261.34436035 205.41493225]
[247.04455566 209.94436646]
[232.26493835 212.50621033]
[217.27493286 213.05377197]
[202.34779358 211.57708740]
[187.75564575 208.10304260]
[173.76446533 202.69499207]
[160.62931824 195.45150757]
[148.58966064 186.50463867]
[137.86494446 176.01748657]
[128.65069580 164.18119812]
[121.11486053 151.21157837]
[115.39482880 137.34503174]
[111.59486389 122.83432770]
[109.78441620 107.94720459]
[111.57872772 122.83950043]
[113.37303925 137.73179626]
[115.16735840 152.62408447]
[127.75242615 162.18399048]
[129.80873108 177.85392761]
[120.11631775 190.33721924]
[104.42551422 192.22773743]
[92.04538727 182.40388489]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 125]
[2 124]
[3 123]
[4 122]
[8 58]
[9 57]
[10 56]
[11 54]
[12 53]
[14 51]
[15 50]
[16 49]
[17 48]
[19 44]
[20 43]
[22 41]
[23 40]
[24 39]
[25 38]
[26 37]
[27 36]
[63 77]
[64 76]
[65 75]
[66 74]
[67 73]
[68 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
