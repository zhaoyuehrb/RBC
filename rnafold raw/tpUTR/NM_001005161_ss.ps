%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 15:53:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUGGUUUAAGAACUGAGUUUUCAGAAUCUCUAGCUAUCUGGUAAGUGGGUAUGAAAGUGGUAGAUGGGAGAGGUCAGCUGAUACCG\
) } def
/len { sequence length } bind def

/coor [
[-10.71268177 299.33416748]
[-20.95327187 295.80078125]
[-31.08170128 306.86489868]
[-41.21013260 317.92901611]
[-51.33856201 328.99316406]
[-61.46699142 340.05728149]
[-71.59542084 351.12139893]
[-81.72385406 362.18554688]
[-84.73518372 378.30584717]
[-100.28929138 383.50216675]
[-112.38543701 372.42898560]
[-108.58014679 356.47744751]
[-92.78797913 352.05709839]
[-82.65954590 340.99298096]
[-72.53112030 329.92886353]
[-62.40268707 318.86471558]
[-52.27425766 307.80059814]
[-42.14582825 296.73648071]
[-32.01739883 285.67233276]
[-37.37836456 267.13720703]
[-30.74526596 248.87110901]
[-14.51072598 237.94021606]
[5.18544006 238.67500305]
[13.65606117 226.29563904]
[22.12668228 213.91627502]
[30.59730339 201.53691101]
[30.42434692 182.33564758]
[48.33915710 173.42680359]
[55.91545105 160.48075867]
[63.49174500 147.53472900]
[71.06803894 134.58869934]
[78.64433289 121.64266205]
[86.22062683 108.69663239]
[83.96057892 97.12953949]
[90.09202576 87.06420898]
[101.40711975 83.76661682]
[109.43557739 71.09603119]
[117.46403503 58.42544174]
[125.49249268 45.75485229]
[133.52095032 33.08425903]
[141.54940796 20.41367149]
[149.57786560 7.74308109]
[150.42840576 -8.05524731]
[163.77616882 -14.66481018]
[171.80462646 -27.33539963]
[168.56072998 -42.57071686]
[176.88322449 -55.30612564]
[191.42774963 -58.30480576]
[185.58039856 -72.67797852]
[189.33079529 -87.73500061]
[201.23686218 -97.68615723]
[216.72044373 -98.70500946]
[229.82781982 -90.39979553]
[235.51890564 -75.96404266]
[231.60539246 -60.94858170]
[219.59207153 -51.12717438]
[204.09834290 -50.27634430]
[207.59820557 -35.84420776]
[199.63670349 -22.88006020]
[184.47521973 -19.30694199]
[176.44676208 -6.63635159]
[176.17048645 8.25569153]
[162.24845886 15.77153969]
[154.22000122 28.44212914]
[146.19154358 41.11272049]
[138.16308594 53.78330994]
[130.13462830 66.45390320]
[122.10617065 79.12448883]
[114.07770538 91.79508209]
[113.91562653 108.47691345]
[99.16665649 116.27292633]
[91.59036255 129.21896362]
[84.01406860 142.16499329]
[76.43777466 155.11102295]
[68.86148071 168.05705261]
[61.28518677 181.00309753]
[64.70576477 191.62316895]
[61.65384674 202.12358093]
[53.41551208 208.97111511]
[42.97666550 210.00753784]
[34.50604248 222.38690186]
[26.03542137 234.76626587]
[17.56480026 247.14561462]
[23.35617256 256.62133789]
[25.53700829 267.47079468]
[23.86869431 278.37142944]
[18.58017921 288.00378418]
[10.33697128 295.21118164]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 19]
[3 18]
[4 17]
[5 16]
[6 15]
[7 14]
[8 13]
[23 83]
[24 82]
[25 81]
[26 80]
[28 76]
[29 75]
[30 74]
[31 73]
[32 72]
[33 71]
[36 69]
[37 68]
[38 67]
[39 66]
[40 65]
[41 64]
[42 63]
[44 61]
[45 60]
[48 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
