%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 07:59:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCAGUCUAAUGAGAACUCCAGAAAGCUGGAGCAGCCCACCUAGAGCUGGCCGCGGCCGCCCAGUCUAAUAAAAAGAACUCCAGAACA\
) } def
/len { sequence length } bind def

/coor [
[78.79289246 308.33514404]
[63.56999969 309.92324829]
[49.35706711 304.24426270]
[39.42011642 292.60314941]
[36.04259109 277.67495728]
[40.00062180 262.89007568]
[50.38467789 251.64596558]
[64.80858612 246.52644348]
[66.87339020 231.66923523]
[68.93819427 216.81202698]
[61.91982269 209.02937317]
[60.42913818 198.43156433]
[65.22305298 188.61518860]
[74.88251495 183.05245972]
[77.96741486 168.37310791]
[81.05231476 153.69375610]
[59.47190094 139.99385071]
[46.05954742 118.23354340]
[43.51839066 92.79844666]
[29.01839447 88.95786285]
[14.51839733 85.11727142]
[0.01840086 81.27668762]
[-14.48159599 77.43610382]
[-28.98159218 73.59551239]
[-44.65951157 78.40538788]
[-56.47796631 67.03630066]
[-52.27914429 51.18379593]
[-36.38243103 47.15557098]
[-25.14100647 59.09552002]
[-10.64100933 62.93610382]
[3.85898709 66.77668762]
[18.35898399 70.61727905]
[32.85897827 74.45786285]
[47.35897827 78.29844666]
[52.22341156 69.02529907]
[58.70377731 60.79978943]
[66.58088684 53.90013504]
[75.58832550 48.55969620]
[85.42142487 44.95911026]
[95.74761200 43.22014618]
[106.21762085 43.40162659]
[116.47734070 45.49741364]
[126.17974854 49.43662262]
[134.99668884 55.08601379]
[145.69444275 44.57135010]
[156.39219666 34.05668640]
[167.08993530 23.54202080]
[171.13201904 15.10565472]
[178.34309387 12.85702038]
[189.39739990 2.71786618]
[200.45169067 -7.42128849]
[211.50599670 -17.56044388]
[216.44609070 -32.59061050]
[231.05548096 -35.49150085]
[242.10978699 -45.63065338]
[246.51480103 -61.42710495]
[262.46264648 -65.24786377]
[273.54754639 -53.16245270]
[268.36630249 -37.60331726]
[252.24893188 -34.57635498]
[241.19464111 -24.43720055]
[237.04521179 -10.13225269]
[221.64514160 -6.50614357]
[210.59085083 3.63301134]
[199.53654480 13.77216625]
[188.48225403 23.91131973]
[177.60459900 34.23976898]
[166.90686035 44.75443268]
[156.20910645 55.26910019]
[145.51135254 65.78376007]
[151.60162354 75.93121338]
[155.46261597 87.11847687]
[156.92750549 98.86225128]
[155.93301392 110.65517426]
[152.52210999 121.98777771]
[146.84214783 132.37046814]
[139.13853455 141.35469055]
[129.74404907 148.55230713]
[119.06455994 153.65237427]
[107.56144714 156.43455505]
[95.73166656 156.77865601]
[92.64676666 171.45800781]
[89.56186676 186.13735962]
[96.84160614 204.78007507]
[83.79539490 218.87683105]
[81.73059845 233.73403931]
[79.66579437 248.59124756]
[92.14705658 257.44995117]
[99.07147217 271.09951782]
[98.84787750 286.40341187]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 87]
[9 86]
[10 85]
[14 83]
[15 82]
[16 81]
[19 34]
[20 33]
[21 32]
[22 31]
[23 30]
[24 29]
[44 70]
[45 69]
[46 68]
[47 67]
[49 66]
[50 65]
[51 64]
[52 63]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
