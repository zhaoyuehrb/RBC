%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:42:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUAUAUUCCUUUGUAUAUUGAAGAGAAAAUAUACUCGGGAAAAAUGAGUGUUAAAUCUAAGGGUAGAAUACCUAAUAAAGAAGAUAAAAAGUUUUGAAUCAAUUUUUAAAAUAAGUUAAAUAAAGUAUUUCAACUGAUAA\
) } def
/len { sequence length } bind def

/coor [
[83.35776520 183.06988525]
[73.60123444 180.50263977]
[64.21903992 176.79383850]
[55.34424210 171.99606323]
[47.10267639 166.17736816]
[39.61121750 159.42024231]
[32.97609329 151.82052612]
[27.29139137 143.48596191]
[13.78708839 150.01541138]
[0.28278479 156.54487610]
[-13.22151852 163.07432556]
[-26.72582245 169.60379028]
[-32.00646210 184.25822449]
[-45.79476166 190.68765259]
[-59.73298645 185.56304932]
[-73.23728943 192.09251404]
[-86.74159241 198.62196350]
[-100.24589539 205.15141296]
[-113.75019836 211.68087769]
[-127.25450134 218.21032715]
[-140.75880432 224.73979187]
[-143.37287903 240.03507996]
[-154.50155640 250.84860229]
[-169.86561584 253.02233887]
[-183.55728149 245.72041321]
[-190.31182861 231.75059509]
[-187.53198242 216.48455811]
[-176.28665161 205.79238892]
[-160.89990234 203.78546143]
[-147.28826904 211.23547363]
[-133.78396606 204.70602417]
[-120.27965546 198.17657471]
[-106.77535248 191.64710999]
[-93.27104950 185.11766052]
[-79.76674652 178.58821106]
[-66.26244354 172.05874634]
[-61.62292099 157.95164490]
[-48.02064896 151.13746643]
[-33.25527573 156.09947205]
[-19.75097466 149.57002258]
[-6.24667072 143.04057312]
[7.25763273 136.51110840]
[20.76193619 129.98165894]
[16.37624168 113.58813477]
[15.34573746 96.64942932]
[17.71177101 79.84515381]
[23.37940979 63.84954071]
[32.12125778 49.30437088]
[43.58656693 36.79323578]
[57.31531906 26.81811142]
[50.93459320 13.24290180]
[44.55387115 -0.33230901]
[38.17314529 -13.90751934]
[31.79241943 -27.48273087]
[17.19686890 -32.92402267]
[10.91928959 -46.78211212]
[16.19667625 -60.66320419]
[9.81595135 -74.23841858]
[3.43522573 -87.81362915]
[-10.32847786 -96.72948456]
[-9.21886063 -113.09104919]
[5.62259817 -120.06694794]
[18.92827797 -110.48097229]
[17.01043701 -94.19435120]
[23.39116096 -80.61914062]
[29.77188683 -67.04393005]
[43.82717896 -62.24973297]
[50.49152756 -48.57343292]
[45.36763000 -33.86345673]
[51.74835587 -20.28824425]
[58.12908173 -6.71303415]
[64.50980377 6.86217642]
[70.89053345 20.43738747]
[77.62005615 18.28886986]
[84.50518036 16.70845604]
[91.49803162 15.70713425]
[98.54999542 15.29186535]
[105.61204529 15.46553612]
[112.63507080 16.22694016]
[119.57025146 17.57078362]
[126.36936951 19.48772240]
[132.98515320 21.96442795]
[139.37159729 24.98368454]
[145.48431396 28.52449608]
[151.28079224 32.56224823]
[156.72074890 37.06886673]
[161.76634216 42.01301956]
[166.38249207 47.36032867]
[170.53712463 53.07362366]
[174.20133972 59.11317444]
[177.34965515 65.43699646]
[179.96020508 72.00112152]
[182.01481628 78.75991058]
[196.81166077 76.29954529]
[211.60850525 73.83917999]
[226.40534973 71.37881470]
[241.20219421 68.91844940]
[255.99903870 66.45808411]
[270.79586792 63.99771881]
[285.59271240 61.53735352]
[294.57861328 48.53622818]
[310.14056396 45.77925491]
[323.04595947 54.90209961]
[325.63824463 70.49234009]
[316.37948608 83.30056763]
[300.76269531 85.72787476]
[288.05310059 76.33419800]
[273.25625610 78.79456329]
[258.45941162 81.25492859]
[243.66255188 83.71529388]
[228.86570740 86.17565918]
[214.06886292 88.63602448]
[199.27201843 91.09638977]
[184.47517395 93.55675507]
[179.85592651 128.29492188]
[161.57336426 158.19184875]
[171.52021790 169.41950989]
[181.46705627 180.64717102]
[191.41389465 191.87483215]
[201.48345947 202.99255371]
[211.67454529 213.99899292]
[221.86561584 225.00544739]
[232.05670166 236.01188660]
[242.24778748 247.01832581]
[257.44555664 254.53259277]
[254.43212891 271.21658325]
[237.56594849 272.93951416]
[231.24134827 257.20941162]
[221.05026245 246.20297241]
[210.85917664 235.19651794]
[200.66809082 224.19007874]
[190.47702026 213.18363953]
[183.57118225 210.39103699]
[180.18623352 201.82167053]
[170.23939514 190.59400940]
[160.29255676 179.36634827]
[150.34570312 168.13868713]
[141.88909912 173.64016724]
[132.83847046 178.09741211]
[123.32219696 181.44718933]
[113.47519684 183.64202881]
[103.43711090 184.65078735]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 43]
[9 42]
[10 41]
[11 40]
[12 39]
[15 36]
[16 35]
[17 34]
[18 33]
[19 32]
[20 31]
[21 30]
[50 73]
[51 72]
[52 71]
[53 70]
[54 69]
[57 66]
[58 65]
[59 64]
[93 114]
[94 113]
[95 112]
[96 111]
[97 110]
[98 109]
[99 108]
[100 107]
[116 137]
[117 136]
[118 135]
[119 134]
[120 132]
[121 131]
[122 130]
[123 129]
[124 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
