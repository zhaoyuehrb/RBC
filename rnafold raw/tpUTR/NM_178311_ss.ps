%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 07:10:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGCUCCAGGCGGACAAGGCUGACAAGCAAUCCAGGAACAAAAUACUCACCAGGACGAGGAAGAGGACUUUGGGGGACAGGCUUCUCCUGUGAGCAGCAGAGCAGCACAAUAAAUGAGGCCACUGUGCCAGGCUCCAGGUGGCCUCCCUGGCCUGUCUCCCCA\
) } def
/len { sequence length } bind def

/coor [
[91.43722534 126.86901093]
[83.04404449 139.30101013]
[74.65085602 151.73300171]
[66.25766754 164.16499329]
[57.86448288 176.59698486]
[57.40630341 196.71958923]
[39.74318695 204.52046204]
[31.83234024 217.26481628]
[23.92149162 230.00917053]
[23.21721268 245.81469727]
[9.93118668 252.54751587]
[13.77583599 267.87704468]
[5.58324575 281.39208984]
[-9.78606606 285.07446289]
[-23.21376038 276.73944092]
[-26.73342323 261.33206177]
[-18.25690079 247.99322510]
[-2.81316447 244.63665771]
[-2.67472148 229.74269104]
[11.17714119 222.09832764]
[19.08798981 209.35397339]
[26.99883652 196.60961914]
[23.77470207 186.85337830]
[26.53492546 176.72749329]
[34.59510040 169.66664124]
[45.43249130 168.20379639]
[53.82567596 155.77180481]
[62.21886444 143.33981323]
[70.61205292 130.90782166]
[79.00523376 118.47583008]
[72.47849274 104.97021484]
[57.52250671 103.82197571]
[42.56652069 102.67373657]
[28.21455574 109.33193970]
[16.11691284 100.64307404]
[1.16092575 99.49484253]
[-6.04288197 112.91217804]
[-18.08518791 122.23434448]
[-32.87958908 125.84621429]
[-47.86286545 123.12200928]
[-60.43907547 114.53370667]
[-68.42931366 101.56929779]
[-70.44921875 86.47492981]
[-66.14884186 71.86580658]
[-56.27323914 60.27303314]
[-42.53341675 53.70513916]
[-27.30989075 53.30004501]
[-13.24022293 59.12793732]
[-2.76207018 70.17910004]
[2.30916452 84.53884888]
[17.26515198 85.68708801]
[30.54736328 78.94675446]
[43.71475983 87.71774292]
[58.67074585 88.86598206]
[73.62673187 90.01422119]
[81.39624786 81.19747162]
[91.49945068 76.80799866]
[81.73589325 65.42058563]
[71.97234344 54.03318024]
[56.51686859 55.41445160]
[43.21855164 47.41854858]
[37.19087219 33.12006378]
[40.75159073 18.01705360]
[52.53153992 7.91693449]
[68.00109100 6.70340872]
[81.21188354 14.84310150]
[87.08409882 29.20613480]
[83.35974884 44.26963043]
[93.12330627 55.65703583]
[102.88685608 67.04444122]
[117.14379883 71.70701599]
[131.74922180 68.28921509]
[146.35466003 64.87141418]
[160.96009827 61.45360947]
[175.56552124 58.03580856]
[190.13754272 54.47827148]
[204.67483521 50.78133011]
[219.21211243 47.08438873]
[233.74940491 43.38744736]
[248.28668213 39.69050980]
[262.82397461 35.99356842]
[277.36126709 32.29662704]
[291.89852905 28.59968567]
[292.44522095 15.31042099]
[297.98849487 2.64696145]
[308.11709595 -7.51389980]
[321.71881104 -13.52378178]
[337.09689331 -14.22174358]
[352.18066406 -9.13715267]
[361.27404785 -21.06654549]
[370.36743164 -32.99593735]
[379.46081543 -44.92533112]
[381.35946655 -63.21966934]
[397.76562500 -69.39282227]
[406.62884521 -81.49420929]
[403.96893311 -97.07305145]
[413.17205811 -109.92132568]
[428.77816772 -112.41637421]
[441.52841187 -103.07792664]
[443.85830688 -87.44632721]
[434.38558960 -74.79551697]
[418.73022461 -72.63100433]
[409.86703491 -60.52961349]
[411.39862061 -48.50098038]
[404.07351685 -38.33864212]
[391.39019775 -35.83195114]
[382.29684448 -23.90255737]
[373.20346069 -11.97316456]
[364.11007690 -0.04377118]
[366.37298584 7.10670185]
[376.49499512 -3.96329904]
[391.14291382 -0.73247194]
[395.66897583 13.56838989]
[385.54718018 24.63857841]
[370.89877319 21.40764809]
[373.16168213 28.55812073]
[387.46261597 33.08393097]
[401.76358032 37.60973740]
[416.06451416 42.13554764]
[430.36547852 46.66135788]
[444.66641235 51.18716431]
[458.96734619 55.71297455]
[473.26831055 60.23878479]
[487.56924438 64.76459503]
[503.99090576 55.39096451]
[521.75970459 60.85684586]
[529.79394531 77.26813507]
[544.25775146 81.24285126]
[561.13281250 79.60972595]
[567.37365723 95.37325287]
[553.95379639 105.73394012]
[540.28302002 95.70665741]
[525.81921387 91.73193359]
[517.31567383 99.41949463]
[506.03567505 102.05402374]
[494.77539062 98.86298370]
[486.38409424 90.53289795]
[483.04345703 79.06553650]
[468.74249268 74.53972626]
[454.44155884 70.01392365]
[440.14059448 65.48811340]
[425.83966064 60.96230316]
[411.53872681 56.43649292]
[397.23776245 51.91068268]
[382.93682861 47.38487625]
[368.63586426 42.85906601]
[352.09960938 61.19758987]
[329.38183594 67.06422424]
[308.36300659 59.81583023]
[295.59548950 43.13697052]
[281.05819702 46.83391190]
[266.52090454 50.53085327]
[251.98362732 54.22779083]
[237.44633484 57.92473221]
[222.90905762 61.62167358]
[208.37178040 65.31861115]
[193.83448792 69.01555634]
[188.10026550 73.73378754]
[178.98332214 72.64123535]
[164.37789917 76.05904388]
[149.77246094 79.47684479]
[135.16703796 82.89464569]
[120.56159973 86.31244659]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[4 27]
[5 26]
[7 22]
[8 21]
[9 20]
[11 18]
[31 55]
[32 54]
[33 53]
[35 51]
[36 50]
[57 70]
[58 69]
[59 68]
[71 163]
[72 162]
[73 161]
[74 160]
[75 159]
[76 157]
[77 156]
[78 155]
[79 154]
[80 153]
[81 152]
[82 151]
[83 150]
[89 109]
[90 108]
[91 107]
[92 106]
[94 103]
[95 102]
[116 146]
[117 145]
[118 144]
[119 143]
[120 142]
[121 141]
[122 140]
[123 139]
[124 138]
[127 133]
[128 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
