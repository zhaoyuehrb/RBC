%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 17:30:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAUAUUAGGGAUGAGAUGGAAGAGGAGAGGGUGUUUUUGUAAAAUUGAAUUCAGGACUGAUUUGUUAGCCUGGUGCUUUUCGUAUCAGACCUUUUAAUGAAUUUUCAUGGAUGCUGAUUAAAAGACAAACCUGUGACUCAG\
) } def
/len { sequence length } bind def

/coor [
[22.14350700 418.53829956]
[21.66437721 433.60040283]
[17.72401810 448.14584351]
[10.53492832 461.39022827]
[0.48480645 472.61929321]
[-11.88435745 481.22744751]
[-25.90550995 486.75051880]
[-40.82250595 488.89056396]
[-55.83089447 487.53225708]
[-70.12129211 482.74880981]
[-82.92302704 474.79821777]
[-93.54573059 464.10919189]
[-101.41652679 451.25823975]
[-106.11094666 436.93835449]
[-107.37584686 421.92181396]
[-105.14299011 407.01840210]
[-99.53280640 393.03189087]
[-90.84783173 380.71655273]
[-79.55645752 370.73648071]
[-66.26759338 363.62994385]
[-51.69789505 359.78018188]
[-36.63309860 359.39477539]
[-21.88561630 362.49456787]
[-15.50489140 348.91934204]
[-9.12416649 335.34414673]
[-11.57194042 318.00006104]
[3.54661465 307.55056763]
[1.63325083 292.77935791]
[14.30079365 283.30075073]
[20.38176727 269.58865356]
[26.46273994 255.87655640]
[23.63455200 238.59042358]
[38.51990891 227.81135559]
[44.29819870 213.96897888]
[50.07648468 200.12660217]
[55.85477066 186.28422546]
[61.63305664 172.44183350]
[67.41134644 158.59945679]
[73.18962860 144.75708008]
[62.46237564 136.23423767]
[54.32378006 125.21260834]
[49.33508682 112.45227814]
[47.84032822 98.83322144]
[49.94258499 85.29463196]
[55.49687958 72.77014160]
[64.12017822 62.12347031]
[75.21781158 54.08882523]
[88.02446747 49.22028732]
[101.65696716 47.85359955]
[115.17520142 50.08300781]
[121.55593109 36.50779724]
[127.93665314 22.93258858]
[134.31738281 9.35737705]
[140.69810486 -4.21783352]
[139.56608582 -19.99848938]
[151.98239136 -28.22554207]
[158.36311340 -41.80075455]
[154.72668457 -54.22834396]
[160.38073730 -65.42899323]
[171.78483582 -69.60594177]
[178.46223450 -83.03771210]
[185.13963318 -96.46947479]
[191.81703186 -109.90124512]
[198.49443054 -123.33300781]
[205.17182922 -136.76478577]
[211.84922791 -150.19654846]
[218.52662659 -163.62831116]
[225.20402527 -177.06007385]
[231.88142395 -190.49185181]
[228.67713928 -212.63002014]
[246.91587830 -224.23136902]
[252.38868713 -238.19734192]
[257.86148071 -252.16331482]
[263.33432007 -266.12927246]
[268.80712891 -280.09524536]
[274.27993774 -294.06121826]
[279.75274658 -308.02719116]
[274.67300415 -323.24481201]
[283.52398682 -336.62539673]
[299.51596069 -337.90447998]
[310.38125610 -326.10089111]
[307.78497314 -310.26931763]
[293.71871948 -302.55438232]
[288.24591064 -288.58840942]
[282.77310181 -274.62243652]
[277.30026245 -260.65646362]
[271.82745361 -246.69050598]
[266.35464478 -232.72453308]
[260.88183594 -218.75856018]
[265.59817505 -212.23817444]
[267.32904053 -204.28240967]
[265.71084595 -196.20651245]
[260.94015503 -189.37675476]
[253.75325012 -184.97927856]
[245.31318665 -183.81445312]
[238.63578796 -170.38267517]
[231.95838928 -156.95091248]
[225.28099060 -143.51914978]
[218.60359192 -130.08738708]
[211.92619324 -116.65561676]
[205.24879456 -103.22384644]
[198.57139587 -89.79208374]
[191.89401245 -76.36031342]
[185.21661377 -62.92854691]
[187.28279114 -45.53487396]
[171.93832397 -35.42002869]
[165.55760193 -21.84481812]
[167.14602661 -7.03515196]
[154.27331543 2.16289186]
[147.89259338 15.73810291]
[141.51187134 29.31331253]
[135.13113403 42.88852310]
[128.75041199 56.46373367]
[140.73056030 67.39609528]
[148.77468872 81.47914886]
[152.10548401 97.35196686]
[150.40103149 113.48067474]
[143.82608032 128.30668640]
[133.01597595 140.39726257]
[119.01536560 148.58404541]
[103.17720032 152.07588196]
[87.03200531 150.53536987]
[81.25372314 164.37774658]
[75.47543335 178.22012329]
[69.69714355 192.06250000]
[63.91886139 205.90487671]
[58.14057541 219.74725342]
[52.36228943 233.58963013]
[56.54108429 245.84550476]
[51.38446426 257.28369141]
[40.17484283 261.95751953]
[34.09386826 275.66964722]
[28.01289558 289.38174438]
[29.49130821 305.13372803]
[17.25871658 313.63153076]
[21.16727829 325.97625732]
[15.76063442 337.29840088]
[4.45104408 341.72485352]
[-1.92968106 355.30007935]
[-8.31040668 368.87527466]
[3.48664808 378.25216675]
[12.80277538 390.09729004]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[23 140]
[24 139]
[25 138]
[27 135]
[29 133]
[30 132]
[31 131]
[33 128]
[34 127]
[35 126]
[36 125]
[37 124]
[38 123]
[39 122]
[50 113]
[51 112]
[52 111]
[53 110]
[54 109]
[56 107]
[57 106]
[60 104]
[61 103]
[62 102]
[63 101]
[64 100]
[65 99]
[66 98]
[67 97]
[68 96]
[69 95]
[71 89]
[72 88]
[73 87]
[74 86]
[75 85]
[76 84]
[77 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
