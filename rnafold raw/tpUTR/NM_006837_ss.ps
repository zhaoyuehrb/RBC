%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 23:25:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGUCUCUGAGAAGUACUUUACCUGAAAGACAGUAUGAGAAAAAUAUUCAAGUAACACUUUAAAACCAGUUACCCAAAAUCUGAUUAGAAGUAUAAGGUGCUCUGAAGUGUCCUAAAUAUUAAUAUCCUGUAAUAAAGCUCUUUAAAAUGAA\
) } def
/len { sequence length } bind def

/coor [
[64.05066681 500.23431396]
[48.97342682 499.31042480]
[34.76767731 494.17492676]
[22.58501625 485.24411011]
[13.41303349 473.24197388]
[7.99526215 459.14144897]
[6.77089691 444.08563232]
[9.83919144 429.29501343]
[16.95141411 415.96862793]
[27.53100586 405.18673706]
[40.72032928 397.82342529]
[55.45018387 394.47558594]
[56.36761093 379.50366211]
[57.28503418 364.53173828]
[58.20246124 349.55984497]
[48.17263031 338.60821533]
[48.88974762 323.41146851]
[60.44482422 312.96551514]
[61.36225128 297.99362183]
[62.27967453 283.02169800]
[63.19710159 268.04977417]
[64.11452484 253.07785034]
[56.84357452 249.31159973]
[50.99635696 243.53077698]
[47.11544037 236.24343872]
[45.56932449 228.09864807]
[46.51752853 219.82868958]
[49.89438629 212.18316650]
[55.41317749 205.86114502]
[62.59037781 201.44714355]
[70.78796387 199.35723877]
[73.52651215 184.60934448]
[76.26506042 169.86145020]
[79.00360107 155.11355591]
[77.26935577 151.97833252]
[77.00326538 147.83306885]
[78.66954041 143.39390564]
[82.38719177 139.55947876]
[86.02261353 125.00668335]
[75.41001892 114.69810486]
[71.35595703 100.46930695]
[74.94171143 86.11533356]
[85.21091461 75.46463013]
[99.42459869 71.35788727]
[103.06002045 56.80509949]
[106.69544983 42.25231171]
[110.33087158 27.69952202]
[113.96630096 13.14673233]
[117.60173035 -1.40605724]
[111.63403320 -12.88498306]
[115.00364685 -24.95949173]
[125.36738586 -31.27082253]
[129.29891968 -45.74642563]
[123.56661987 -57.34469604]
[127.18183136 -69.34795380]
[137.67216492 -75.44657135]
[141.89814758 -89.83896637]
[146.12413025 -104.23135376]
[150.35012817 -118.62374878]
[154.57611084 -133.01614380]
[158.80209351 -147.40853882]
[163.02809143 -161.80093384]
[167.25407410 -176.19332886]
[157.53721619 -192.40177917]
[162.60585022 -210.27723694]
[178.82019043 -218.68026733]
[182.45562744 -233.23304749]
[186.09104919 -247.78584290]
[176.29551697 -259.67507935]
[175.38960266 -274.87484741]
[183.51148987 -287.54364014]
[197.37002563 -292.93615723]
[201.00544739 -307.48895264]
[204.64088440 -322.04171753]
[191.92640686 -330.26492310]
[182.57286072 -342.17248535]
[177.59486389 -356.47277832]
[177.53237915 -371.61459351]
[182.39216614 -385.95547485]
[191.64710999 -397.93984985]
[204.29327393 -406.26770020]
[218.95890808 -410.03570557]
[234.05319214 -408.83517456]
[247.93879700 -402.79626465]
[259.10955811 -392.57406616]
[266.35369873 -379.27740479]
[268.88546753 -364.34863281]
[266.43023682 -349.40704346]
[259.25430298 -336.07345581]
[248.13609314 -325.79415894]
[234.28160095 -319.68417358]
[219.19366455 -318.40631104]
[215.55824280 -303.85351562]
[211.92282104 -289.30072021]
[221.61732483 -278.02444458]
[222.82728577 -263.02444458]
[214.87977600 -250.03636169]
[200.64382935 -244.15042114]
[197.00840759 -229.59762573]
[193.37298584 -215.04483032]
[201.26658630 -206.71038818]
[204.15994263 -195.47758484]
[201.21467590 -184.13398743]
[193.05645752 -175.55328369]
[181.64646912 -171.96734619]
[177.42048645 -157.57495117]
[173.19448853 -143.18255615]
[168.96850586 -128.79016113]
[164.74252319 -114.39776611]
[160.51652527 -100.00537109]
[156.29054260 -85.61297607]
[152.06455994 -71.22058105]
[157.13459778 -54.44675827]
[143.77452087 -41.81489944]
[139.84298706 -27.33929634]
[145.25415039 -10.67238808]
[132.15451050 2.22936893]
[128.51908875 16.78215790]
[124.88366699 31.33494759]
[121.24823761 45.88773727]
[117.61280823 60.44052505]
[113.97738647 74.99331665]
[124.58998108 85.30189514]
[128.64404297 99.53069305]
[125.05828857 113.88466644]
[114.78908539 124.53536987]
[100.57540131 128.64210510]
[96.93997955 143.19490051]
[93.75149536 157.85209656]
[91.01294708 172.59999084]
[88.27440643 187.34788513]
[85.53585815 202.09577942]
[99.86154175 219.36735535]
[96.96061707 241.34533691]
[79.08644104 253.99528503]
[78.16902161 268.96719360]
[77.25159454 283.93911743]
[76.33416748 298.91104126]
[75.41674042 313.88296509]
[85.60997772 325.66156006]
[84.46630096 340.83215332]
[73.17437744 350.47726440]
[72.25695038 365.44918823]
[71.33953094 380.42108154]
[70.42210388 395.39300537]
[84.63300323 400.51425171]
[96.82463074 409.43280029]
[106.00866699 421.42572021]
[111.44060516 435.52078247]
[112.68009186 450.57537842]
[109.62665558 465.36904907]
[102.52782440 478.70260620]
[91.95906830 489.49508667]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 145]
[13 144]
[14 143]
[15 142]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[31 132]
[32 131]
[33 130]
[34 129]
[38 128]
[39 127]
[44 122]
[45 121]
[46 120]
[47 119]
[48 118]
[49 117]
[52 115]
[53 114]
[56 112]
[57 111]
[58 110]
[59 109]
[60 108]
[61 107]
[62 106]
[63 105]
[66 100]
[67 99]
[68 98]
[72 94]
[73 93]
[74 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
