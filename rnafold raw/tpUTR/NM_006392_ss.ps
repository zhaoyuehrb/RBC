%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:40:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGCAAAUGGACAUUCUCUGGGAGGUGGGGCAUACCAUAGCCCAAGGUGACAUUUCCCACCCUGUGCCGUGUUCCCCAAUAAAAACAAAUUCACAAGA\
) } def
/len { sequence length } bind def

/coor [
[140.06768799 295.46524048]
[136.40270996 280.88381958]
[135.18788147 265.89801025]
[136.45635986 250.91665649]
[140.17352295 236.34846497]
[146.23799133 222.59083557]
[154.48429871 210.01911926]
[164.68748474 198.97625732]
[155.49388123 187.12393188]
[146.30027771 175.27160645]
[137.10667419 163.41928101]
[130.39938354 160.00215149]
[127.81743622 151.04718018]
[119.00065613 138.91192627]
[110.18388367 126.77667236]
[95.46608734 128.28683472]
[81.95755768 122.25245667]
[73.26123047 110.28299713]
[71.69656372 95.57089233]
[77.68086243 82.04010773]
[68.86408234 69.90485382]
[60.04730606 57.76959610]
[51.23052597 45.63434219]
[42.41374969 33.49908829]
[33.59696960 21.36383247]
[24.78019142 9.22857761]
[15.96341228 -2.90667748]
[7.14663363 -15.04193211]
[-2.94855380 -26.13639832]
[-14.20022011 -36.05607605]
[-25.45188522 -45.97575378]
[-36.70355225 -55.89543152]
[-51.81697845 -52.37919235]
[-66.09765625 -58.44894409]
[-74.05437469 -71.77074432]
[-72.62760925 -87.22208405]
[-62.36598206 -98.86161041]
[-47.21530151 -102.21369171]
[-33.00130844 -95.98937988]
[-25.18957520 -82.58205414]
[-26.78387451 -67.14710236]
[-15.53220844 -57.22742081]
[-4.28054190 -47.30774307]
[6.97112417 -37.38806534]
[7.28923178 -52.38469315]
[16.97314835 -63.83989716]
[31.70771980 -66.64923859]
[44.92721939 -59.56087875]
[50.74103165 -45.73338699]
[46.55852509 -31.32829666]
[34.24342346 -22.76451874]
[19.28188896 -23.85871124]
[28.09866714 -11.72345638]
[36.91544724 0.41179866]
[45.73222351 12.54705334]
[54.54900360 24.68230820]
[63.36578369 36.81756210]
[72.18256378 48.95281982]
[80.99934387 61.08807373]
[89.81611633 73.22332764]
[104.53391266 71.71316528]
[118.04244232 77.74754333]
[126.73876953 89.71700287]
[128.30343628 104.42910767]
[122.31913757 117.95989227]
[131.13591003 130.09515381]
[139.95269775 142.23040771]
[148.95899963 154.22567749]
[158.15260315 166.07800293]
[167.34620667 177.93032837]
[176.53981018 189.78265381]
[189.77317810 182.64625549]
[204.00070190 177.78547668]
[218.83427429 175.33293152]
[233.86921692 175.35549927]
[248.69535828 177.85258484]
[262.90823364 182.75605774]
[276.12011719 189.93215942]
[287.97055054 199.18510437]
[298.13626099 210.26246643]
[306.33993530 222.86206055]
[312.35772705 236.64015198]
[316.02554321 251.22085571]
[317.24325562 266.20642090]
[315.97766113 281.18801880]
[312.26330566 295.75692749]
[306.20147705 309.51571655]
[297.95758057 322.08901978]
[287.75653076 333.13385010]
[275.87658691 342.34887695]
[262.64184570 349.48272705]
[248.41337585 354.34075928]
[233.57933044 356.79046631]
[218.54440308 356.76498413]
[203.71875000 354.26504517]
[189.50682068 349.35882568]
[176.29632568 342.18020630]
[164.44767761 332.92495728]
[154.28408813 321.84564209]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 71]
[9 70]
[10 69]
[11 68]
[13 67]
[14 66]
[15 65]
[20 60]
[21 59]
[22 58]
[23 57]
[24 56]
[25 55]
[26 54]
[27 53]
[28 52]
[29 44]
[30 43]
[31 42]
[32 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
