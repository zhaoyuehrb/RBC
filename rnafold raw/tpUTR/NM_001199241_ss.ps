%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 22:57:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGUGUUUUCUAGAACAACUUAAGCAAAUUAUACUGAAAGCUGCUGUGGUUAUUUCAGUAUUAUUCGAUUUUUAAUUAUUGAAAGUAUGUCACCAUUGACCACAUGUAACUAACAAUAAAUAAUAUACCUUACAGAAAAUCUGA\
) } def
/len { sequence length } bind def

/coor [
[68.90219879 111.24395752]
[58.12465286 121.67681885]
[47.34710693 132.10966492]
[36.56955719 142.54252625]
[25.79201126 152.97538757]
[15.01446533 163.40823364]
[22.61009598 176.43013000]
[26.86799431 190.89160156]
[27.54060936 205.95184326]
[24.58883667 220.73529053]
[18.18428993 234.38246155]
[8.69931984 246.09991455]
[-3.31463003 255.20642090]
[-17.15908432 261.17254639]
[-32.02914429 263.65139771]
[-47.06028366 262.49890137]
[-61.37861252 257.78201294]
[-74.15167999 249.77500916]
[-84.63687897 238.94338989]
[-92.22461700 225.91690063]
[-96.47374725 211.45286560]
[-97.13722992 196.39221191]
[-94.17649841 181.61054993]
[-87.76367950 167.96726990]
[-78.27160645 156.25555420]
[-66.25213623 147.15634155]
[-52.40406799 141.19862366]
[-37.53250885 138.72877502]
[-22.50206947 139.89039612]
[-8.18660355 144.61595154]
[4.58160925 152.63069153]
[15.35915661 142.19783020]
[26.13670349 131.76498413]
[36.91424942 121.33212280]
[47.69179916 110.89926910]
[58.46934509 100.46641541]
[70.71749115 88.82040405]
[84.38697815 85.72557831]
[95.18872070 90.14630890]
[96.81050873 75.23424530]
[90.61062622 60.67841721]
[99.67862701 48.86230087]
[101.30041504 33.95023346]
[102.92219543 19.03816414]
[104.38234711 4.10940075]
[105.68068695 -10.83430386]
[106.97903442 -25.77800941]
[108.27737427 -40.72171402]
[109.57572174 -55.66541672]
[110.87406158 -70.60912323]
[112.17240143 -85.55282593]
[113.47074890 -100.49652863]
[97.83658600 -109.15522003]
[87.54926300 -123.70503235]
[84.61602783 -141.22798157]
[89.57482147 -158.23399353]
[101.39631653 -171.35607910]
[117.69719696 -178.01687622]
[118.02216339 -193.01335144]
[118.34712982 -208.00982666]
[118.67209625 -223.00631714]
[118.99706268 -238.00279236]
[116.03728485 -246.72454834]
[119.49502563 -253.31968689]
[120.14480591 -268.30560303]
[120.79458618 -283.29153442]
[121.44436646 -298.27743530]
[122.09415436 -313.26336670]
[122.74393463 -328.24926758]
[110.51389313 -337.79943848]
[106.26540375 -352.72360229]
[111.63210297 -367.28308105]
[124.55036926 -375.87945557]
[140.05288696 -375.20727539]
[152.17860413 -365.52499390]
[156.26493835 -350.55563354]
[150.74061584 -336.05523682]
[137.72985840 -327.59948730]
[137.08006287 -312.61358643]
[136.43028259 -297.62765503]
[135.78050232 -282.64175415]
[135.13072205 -267.65582275]
[134.48094177 -252.66990662]
[133.99354553 -237.67782593]
[133.66857910 -222.68133545]
[133.34361267 -207.68486023]
[133.01864624 -192.68838501]
[132.69367981 -177.69190979]
[144.23768616 -173.29679871]
[153.87762451 -165.53407288]
[160.66032410 -155.15176392]
[163.90910339 -143.15791321]
[163.29130554 -130.72261047]
[158.85223389 -119.06391144]
[151.01223755 -109.32847595]
[140.52694702 -102.47882843]
[128.41444397 -99.19818878]
[127.11611176 -84.25448608]
[125.81776428 -69.31077576]
[124.51942444 -54.36707306]
[123.22107697 -39.42337036]
[121.92273712 -24.47966576]
[120.62439728 -9.53596115]
[119.32604980 5.40774345]
[121.89968109 12.39545345]
[117.83426666 20.65994835]
[116.21247864 35.57201767]
[114.59069824 50.48408890]
[120.90657806 63.97330093]
[111.72257233 76.85602570]
[110.10079193 91.76809692]
[113.62836456 77.18878937]
[120.88156128 64.05900574]
[131.34519958 53.31134796]
[144.27606201 45.70919418]
[158.75569153 41.79251862]
[173.75563049 41.83951569]
[188.21041870 45.84684753]
[201.09339905 53.52988434]
[211.48948669 64.34290314]
[218.66026306 77.51787567]
[222.09640503 92.11900330]
[221.55384827 107.10918427]
[217.07113647 121.42369843]
[208.96665955 134.04579163]
[197.81607056 144.07896423]
[184.41137695 150.81053162]
[169.70468140 153.76240540]
[154.74061584 152.72488403]
[140.58201599 147.77166748]
[128.23457336 139.25459290]
[118.57529449 127.77861023]
[112.29101562 114.16123962]
[116.77146149 128.47647095]
[121.25189972 142.79168701]
[125.73234558 157.10691833]
[136.23374939 170.41694641]
[126.35095215 184.19252014]
[110.37789154 178.50941467]
[111.41712189 161.58735657]
[106.93667603 147.27212524]
[102.45623779 132.95690918]
[97.97579193 118.64168549]
[90.70738983 116.79225159]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 34]
[4 33]
[5 32]
[6 31]
[39 111]
[40 110]
[42 108]
[43 107]
[44 106]
[45 104]
[46 103]
[47 102]
[48 101]
[49 100]
[50 99]
[51 98]
[52 97]
[58 88]
[59 87]
[60 86]
[61 85]
[62 84]
[64 83]
[65 82]
[66 81]
[67 80]
[68 79]
[69 78]
[133 143]
[134 142]
[135 141]
[136 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
