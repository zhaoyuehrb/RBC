%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 16:04:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGUUGCUGGGAGCGGCGGCAGCGAGUCCCUGCAACAGCAAUAAACUUCCUUCUCCUCGGGCCACCUG\
) } def
/len { sequence length } bind def

/coor [
[229.08200073 185.85960388]
[216.20527649 178.16610718]
[203.32853699 170.47262573]
[190.45181274 162.77912903]
[177.57507324 155.08564758]
[164.69834900 147.39215088]
[151.82160950 139.69866943]
[138.94488525 132.00517273]
[126.06815338 124.31168365]
[113.19142151 116.61819458]
[101.16580200 121.18534851]
[88.71166229 117.96528625]
[80.40683746 108.14162445]
[79.30397797 95.32530212]
[66.78538513 87.06185150]
[54.26678467 78.79839325]
[41.74818420 70.53494263]
[25.96847343 69.38980865]
[19.60908890 55.92105103]
[7.09048986 47.65759659]
[-5.42810917 39.39414215]
[-21.37026215 41.19061279]
[-32.61222839 29.74518585]
[-30.53013039 13.83781528]
[-16.72117805 5.67127466]
[-1.77841663 11.51023483]
[2.83534551 26.87554359]
[15.35394478 35.13899994]
[27.87254333 43.40245438]
[42.75683975 43.95652390]
[50.01163864 58.01634216]
[62.53023911 66.27980042]
[75.04883575 74.54325104]
[87.56743622 82.80670929]
[103.49150848 79.07185364]
[117.34069824 87.77387238]
[120.88491058 103.74146271]
[133.76164246 111.43495178]
[146.63836670 119.12844086]
[159.51510620 126.82192993]
[172.39183044 134.51542664]
[185.26856995 142.20890808]
[198.14529419 149.90240479]
[211.02203369 157.59588623]
[223.89875793 165.28938293]
[236.77549744 172.98286438]
[243.67608643 166.87158203]
[251.77572632 162.49559021]
[260.64730835 160.07966614]
[269.82437134 159.74543762]
[278.82559204 161.50517273]
[287.18008423 165.26148987]
[294.45202637 170.81266785]
[300.26333618 177.86352539]
[304.31341553 186.04107666]
[306.39462280 194.91429138]
[306.40295410 204.01679993]
[304.34320068 212.87138367]
[300.32849121 221.01501465]
[294.57394409 228.02308655]
[302.83740234 240.54168701]
[317.73849487 247.38931274]
[318.98919678 263.74069214]
[305.30288696 272.77493286]
[290.75891113 265.19839478]
[290.31881714 248.80514526]
[282.05535889 236.28654480]
[259.55651855 238.79167175]
[239.26177979 228.53712463]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 46]
[2 45]
[3 44]
[4 43]
[5 42]
[6 41]
[7 40]
[8 39]
[9 38]
[10 37]
[14 34]
[15 33]
[16 32]
[17 31]
[19 29]
[20 28]
[21 27]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
