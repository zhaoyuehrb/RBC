%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 15:58:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCCGUGCUCAACCCCCAGCCCACCCCACCCUCCCUGGGCAGGGUCUUGAGGCAGCCACUGUGAUGCUCAUACCUUACCUUGCCUCCUACCCUCUUCUCUUUCCUGCCUACUCCCCACUCCUCCCUGACAAAAAACACCCAGGGAUUUGUACUCAUUUUCCAAGUUGAAUAAAAUACAUUUUUAAAAUGAUAA\
) } def
/len { sequence length } bind def

/coor [
[102.48416901 201.40599060]
[97.04914856 187.42527771]
[99.92246246 172.70304871]
[110.21556854 161.79194641]
[124.74547577 158.06611633]
[139.02102661 162.67906189]
[130.80084229 150.13200378]
[122.58065033 137.58496094]
[114.36046600 125.03790283]
[107.01203156 123.53771210]
[108.21054840 138.48974609]
[114.27824402 152.20773315]
[109.65798950 166.47845459]
[96.70175171 174.03729248]
[82.00500488 171.03637695]
[73.04920959 159.00335693]
[74.39337921 144.06370544]
[85.35186005 133.82312012]
[92.31517792 120.53732300]
[84.96674347 119.03713226]
[72.48631287 127.35812378]
[60.00588608 135.67910767]
[47.52545929 144.00010681]
[35.04502869 152.32109070]
[37.21445465 167.42924500]
[32.60567093 181.97991943]
[22.13375473 193.08404541]
[7.87791204 198.53691101]
[-7.33134842 197.25582886]
[-20.47421646 189.49517822]
[-28.94116783 176.79582214]
[-31.05108261 161.67924500]
[-26.38503265 147.14685059]
[-15.86947060 136.08404541]
[-1.59226525 130.68736267]
[13.61183262 132.02832031]
[26.72403717 139.84066772]
[39.20446777 131.51966858]
[51.68489456 123.19868469]
[64.16532898 114.87769318]
[76.64575195 106.55670166]
[76.88740540 91.55864716]
[64.68151855 82.83991241]
[52.47563934 74.12117004]
[40.26975632 65.40242767]
[28.06387329 56.68368912]
[15.11316967 60.41319275]
[2.56365991 56.06229401]
[-5.07195997 45.43288803]
[-5.18533230 32.54039764]
[-17.24917221 23.62615204]
[-29.31301117 14.71190643]
[-41.37685013 5.79766130]
[-53.44068909 -3.11658430]
[-65.50453186 -12.03083038]
[-77.56836700 -20.94507599]
[-94.21584320 -12.99964333]
[-112.50868225 -14.58477783]
[-127.40277100 -25.17690086]
[-134.83506775 -41.78078461]
[-132.83180237 -59.77607346]
[-145.31222534 -68.09706116]
[-157.79266357 -76.41805267]
[-170.27308655 -84.73904419]
[-182.75350952 -93.06003571]
[-199.28622437 -96.81579590]
[-200.25395203 -113.74210358]
[-184.25703430 -119.35768127]
[-174.43252563 -105.54046631]
[-161.95210266 -97.21947479]
[-149.47166443 -88.89848328]
[-136.99124146 -80.57749176]
[-124.51081085 -72.25650024]
[-114.76692200 -78.90911865]
[-103.31549835 -81.88971710]
[-91.49569702 -80.82556915]
[-80.69795227 -75.81836700]
[-72.20037079 -67.43502808]
[-67.01749420 -56.64358902]
[-65.77917480 -44.70145798]
[-68.65412140 -33.00891495]
[-56.59028625 -24.09466934]
[-44.52644348 -15.18042374]
[-32.46260452 -6.26617813]
[-20.39876556 2.64806724]
[-8.33492661 11.56231308]
[3.72891331 20.47655869]
[20.23177910 17.26844215]
[34.22805405 27.17837143]
[36.78261185 44.47780609]
[48.98849487 53.19654846]
[61.19437790 61.91528702]
[73.40026093 70.63402557]
[85.60614777 79.35276794]
[79.07446289 65.84954071]
[72.54277802 52.34631348]
[60.51895523 43.37816620]
[50.72457504 32.01726532]
[43.62522125 18.80366707]
[39.55837631 4.36549568]
[38.71735764 -10.61090851]
[41.14215088 -25.41362381]
[46.71748352 -39.33898544]
[55.17832947 -51.72502899]
[66.12248993 -61.98296738]
[79.02972412 -69.62518311]
[93.28646088 -74.28838348]
[108.21498871 -75.75090790]
[123.10566711 -73.94322205]
[137.25064087 -68.95126343]
[149.97752380 -61.01232910]
[160.68130493 -50.50381088]
[168.85317993 -37.92523956]
[174.10469055 -23.87455559]
[176.18618774 -9.01967907]
[174.99873352 5.93324566]
[170.59877014 20.27341080]
[163.19546509 33.31913757]
[153.14073181 44.45028305]
[140.91253662 53.13770676]
[127.08892822 58.96941757]
[117.51551056 70.51712799]
[107.94209290 82.06484222]
[121.87982941 76.52051544]
[135.81756592 70.97618103]
[149.75529480 65.43185425]
[163.69302368 59.88751984]
[177.63075256 54.34318924]
[178.64990234 39.11413574]
[186.18322754 25.83965874]
[198.73498535 17.15541267]
[213.81301880 14.78566456]
[228.42356873 19.20092773]
[239.66571045 29.52454948]
[245.30728149 43.70676804]
[244.22817993 58.93169022]
[236.64263916 72.17639923]
[224.05677795 80.81114960]
[208.96952820 83.12150574]
[194.37648010 78.64873505]
[183.17509460 68.28092194]
[169.23735046 73.82525635]
[155.29962158 79.36958313]
[141.36189270 84.91391754]
[127.42415619 90.45824432]
[113.48642731 96.00257874]
[118.42850494 98.58816528]
[122.68958282 103.08714294]
[125.68746185 109.28713226]
[126.90751648 116.81771851]
[135.12770081 129.36476135]
[143.34788513 141.91181946]
[151.56808472 154.45887756]
[160.67552185 166.37753296]
[170.62236023 177.60519409]
[180.56919861 188.83285522]
[190.51603699 200.06051636]
[200.46287537 211.28817749]
[210.40971375 222.51583862]
[220.35655212 233.74349976]
[235.89387512 234.85234070]
[245.82144165 246.38047791]
[244.66857910 261.18609619]
[254.61541748 272.41375732]
[264.56225586 283.64141846]
[274.50909424 294.86907959]
[289.17965698 290.65750122]
[304.22326660 293.23678589]
[316.65301514 302.09478760]
[324.00094604 315.47277832]
[324.80813599 330.71453857]
[318.91430664 344.79382324]
[307.48968506 354.91513062]
[292.80267334 359.06890869]
[277.76931763 356.43041992]
[265.37457275 347.52352905]
[258.07937622 334.11669922]
[257.33221436 318.87188721]
[263.28143311 304.81591797]
[253.33459473 293.58825684]
[243.38775635 282.36059570]
[233.44091797 271.13293457]
[218.60427856 270.49276733]
[208.35682678 259.24804688]
[209.12889099 243.69033813]
[199.18205261 232.46267700]
[189.23521423 221.23501587]
[179.28837585 210.00735474]
[169.34153748 198.77969360]
[159.39469910 187.55203247]
[149.44786072 176.32437134]
[150.14904785 191.30798340]
[142.73815918 204.34939575]
[129.50688171 211.41574097]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 153]
[7 152]
[8 151]
[9 150]
[20 41]
[21 40]
[22 39]
[23 38]
[24 37]
[42 94]
[43 93]
[44 92]
[45 91]
[46 90]
[50 87]
[51 86]
[52 85]
[53 84]
[54 83]
[55 82]
[56 81]
[61 73]
[62 72]
[63 71]
[64 70]
[65 69]
[123 146]
[124 145]
[125 144]
[126 143]
[127 142]
[128 141]
[154 191]
[155 190]
[156 189]
[157 188]
[158 187]
[159 186]
[160 185]
[163 182]
[164 181]
[165 180]
[166 179]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
