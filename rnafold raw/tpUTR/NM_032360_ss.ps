%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:16:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAAAAGACUGGAAAACUGCAGUCUGUAAUAGCAUAAGGCUUCCAUUAUGAAAGAAAACUACAAAAAUAAUACUUCUUUUCCACCCGUCUUUGGUAUGUAUUGGCUAAUAAAAUCAGUUCUGUGGAACUGGGAUUUUGAAGUCUCA\
) } def
/len { sequence length } bind def

/coor [
[108.30028534 145.18841553]
[102.09515381 145.89660645]
[95.85131073 145.75669861]
[89.68412781 144.77131653]
[83.70755768 142.95863342]
[78.03205109 140.35215759]
[68.80554962 152.17889404]
[59.57904816 164.00563049]
[50.35255051 175.83236694]
[41.12605286 187.65910339]
[31.89955139 199.48583984]
[36.31652451 214.36099243]
[31.11480522 228.98022461]
[18.29456329 237.72213745]
[2.78544497 237.22529602]
[-9.44897938 227.68074036]
[-13.70432377 212.75854492]
[-8.34432125 198.19660950]
[4.56999826 189.59428406]
[20.07281494 190.25935364]
[29.29931450 178.43261719]
[38.52581406 166.60586548]
[47.75231171 154.77912903]
[56.97881317 142.95239258]
[66.20531464 131.12565613]
[56.36957169 114.39700317]
[54.31765747 95.09986115]
[60.41563416 76.67692566]
[73.57559967 62.41490936]
[67.06734467 48.90037537]
[60.55908966 35.38584518]
[47.60035324 26.30940628]
[49.04926300 11.48544216]
[42.54100800 -2.02909064]
[35.95133209 -8.45908260]
[36.04153824 -15.90268421]
[29.82357025 -29.55321121]
[23.60560417 -43.20373917]
[17.38763618 -56.85426331]
[11.16966820 -70.50479126]
[-1.60768151 -69.07102966]
[-14.25088024 -71.30790710]
[-25.72846413 -77.02258301]
[-35.10698700 -85.73893738]
[-41.62693787 -96.73718262]
[-44.76424789 -109.11331940]
[-44.27239227 -121.85343933]
[-40.20173264 -133.91676331]
[-32.89458847 -144.32070923]
[-22.95644760 -152.22087097]
[-28.28704834 -166.24174500]
[-33.61764908 -180.26260376]
[-38.94824600 -194.28347778]
[-44.27884674 -208.30433655]
[-49.60944748 -222.32521057]
[-54.94004822 -236.34606934]
[-70.07324219 -235.83105469]
[-84.55297089 -240.26005554]
[-96.80859375 -249.15266418]
[-105.51070404 -261.54428101]
[-109.71536255 -276.09072876]
[-108.96648407 -291.21417236]
[-103.34529114 -305.27407837]
[-93.46154785 -316.74533081]
[-80.38735199 -324.38366699]
[-65.54089355 -327.36050415]
[-50.53261566 -325.35293579]
[-36.99050140 -318.57873535]
[-26.38349342 -307.77270508]
[-19.86216354 -294.10702515]
[-18.13389778 -279.06402588]
[-21.38616371 -264.27548218]
[-29.26617813 -251.34550476]
[-40.91918182 -241.67668152]
[-35.58858109 -227.65580750]
[-30.25798035 -213.63494873]
[-24.92738152 -199.61407471]
[-19.59678078 -185.59320068]
[-14.26618099 -171.57234192]
[-8.93558121 -157.55146790]
[8.34423351 -157.60108948]
[24.36807823 -151.04057312]
[36.70135498 -138.83784485]
[43.45920944 -122.82028198]
[43.59455872 -105.40105438]
[37.06024170 -89.21556854]
[24.82019424 -76.72275543]
[31.03816223 -63.07223129]
[37.25613022 -49.42170715]
[43.47409821 -35.77117920]
[49.69206619 -22.12065125]
[56.05554199 -8.53734684]
[62.56379700 4.97718620]
[75.05702209 13.08697319]
[74.07362366 28.87758827]
[80.58187866 42.39212036]
[87.09013367 55.90665436]
[104.03537750 54.23316193]
[120.42633820 58.84598923]
[134.01162720 69.11154175]
[142.92524719 83.61978912]
[145.94284058 100.37794495]
[142.64994812 117.08418274]
[155.47709656 124.86007690]
[168.30422974 132.63595581]
[181.13137817 140.41184998]
[193.86865234 138.10530090]
[204.40946960 144.90304565]
[207.36621094 156.67839050]
[220.02424622 164.72662354]
[232.68229675 172.77484131]
[245.34034729 180.82307434]
[257.99838257 188.87129211]
[270.65643311 196.91952515]
[283.31448364 204.96774292]
[296.14160156 212.74363708]
[309.13198853 220.24363708]
[322.12237549 227.74363708]
[335.11276245 235.24363708]
[348.10314941 242.74363708]
[364.49334717 242.20256042]
[372.92614746 256.26739502]
[364.72656250 270.46948242]
[348.32965088 270.19891357]
[340.60314941 255.73402405]
[327.61276245 248.23402405]
[314.62237549 240.73402405]
[301.63198853 233.23402405]
[288.64160156 225.73402405]
[283.81539917 226.10557556]
[278.71627808 223.39988708]
[275.26623535 217.62579346]
[262.60821533 209.57756042]
[249.95016479 201.52934265]
[237.29211426 193.48110962]
[224.63407898 185.43289185]
[211.97602844 177.38465881]
[199.31797791 169.33644104]
[181.80072021 169.56541443]
[173.35548401 153.23899841]
[160.52835083 145.46310425]
[147.70120239 137.68721008]
[134.87406921 129.91133118]
[130.49530029 134.36459351]
[125.55303192 138.18286133]
[120.13859558 141.29557800]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 25]
[7 24]
[8 23]
[9 22]
[10 21]
[11 20]
[29 97]
[30 96]
[31 95]
[33 93]
[34 92]
[36 91]
[37 90]
[38 89]
[39 88]
[40 87]
[50 80]
[51 79]
[52 78]
[53 77]
[54 76]
[55 75]
[56 74]
[103 143]
[104 142]
[105 141]
[106 140]
[109 138]
[110 137]
[111 136]
[112 135]
[113 134]
[114 133]
[115 132]
[116 129]
[117 128]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
