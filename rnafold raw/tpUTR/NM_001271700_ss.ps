%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 16:50:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAAGACCUCCCAGUUUCACAGCAGAGGGACUUUCAGCCACUCAAACUGCAUUUUCUGGCUAGACAUGUCCCAGAAAAUGCUUCACCUAUCACCUGUGACAUCCCAAAUGUACAAACUACUGAUUCUUGAACAUGUUCCAAAAUACAAAGUGAUUUGUCUAUUAA\
) } def
/len { sequence length } bind def

/coor [
[273.12826538 268.01168823]
[264.18597412 271.53799438]
[254.81385803 273.68814087]
[245.22247314 274.41290283]
[235.62744141 273.69500732]
[226.24458313 271.54971313]
[217.28512573 268.02429199]
[208.95086670 263.19720459]
[201.42970276 257.17614746]
[194.89135742 250.09580994]
[189.48352051 242.11477661]
[185.32859802 233.41200256]
[182.52085876 224.18276978]
[181.12434387 214.63435364]
[181.17137146 204.98135376]
[182.66181946 195.44082642]
[185.56311035 186.22746277]
[189.81088257 177.54872131]
[177.86065674 168.48272705]
[165.91043091 159.41674805]
[153.96020508 150.35075378]
[142.00999451 141.28475952]
[130.05976868 132.21876526]
[105.21221161 143.75466919]
[78.35004425 138.37861633]
[59.85597229 118.16854095]
[45.33710098 121.93714142]
[30.81822777 125.70574188]
[16.33544350 129.61073303]
[1.89003122 133.65177917]
[-3.38504457 148.24468994]
[-16.24902916 156.92210388]
[-31.75545692 156.34738159]
[-43.94179153 146.74150085]
[-48.12213516 131.79814148]
[-42.68906784 117.26329803]
[-29.73170662 108.72594452]
[-14.23242474 109.46885681]
[-2.15101314 119.20636749]
[12.29440022 115.16532135]
[17.91289139 110.31419373]
[27.04962921 111.18686676]
[41.56850052 107.41826630]
[56.08737183 103.64967346]
[56.00128555 97.60166931]
[56.74425507 91.59885406]
[58.30227661 85.75434113]
[60.64599991 80.17826080]
[63.73125458 74.97566986]
[67.49991608 70.24460602]
[58.32192612 58.38018799]
[49.14393616 46.51576614]
[39.96594620 34.65134430]
[30.78795433 22.78692245]
[21.60996437 10.92250156]
[12.43197346 -0.94192016]
[3.25398350 -12.80634117]
[-5.92400694 -24.67076302]
[-15.10199738 -36.53518295]
[-24.27998734 -48.39960480]
[-39.34022903 -45.67056656]
[-53.94018555 -50.26403046]
[-64.72489166 -61.12445450]
[-69.21609497 -75.75618744]
[-66.38175964 -90.79696655]
[-56.87318420 -102.79053497]
[-42.87538147 -108.98085785]
[-27.60493469 -107.94543457]
[-14.57088661 -99.92221069]
[-6.76836252 -86.75485992]
[-5.99032688 -71.46913910]
[-12.41556644 -57.57759476]
[-3.23757577 -45.71317291]
[5.94041443 -33.84875488]
[15.11840439 -21.98433113]
[24.29639435 -10.11991024]
[33.47438431 1.74451089]
[42.65237427 13.60893250]
[51.83036423 25.47335434]
[61.00835800 37.33777618]
[70.18634796 49.20219803]
[79.36433411 61.06661606]
[87.30313873 57.80487442]
[95.72364044 56.14396667]
[104.30638885 56.14690781]
[112.72575378 57.81357956]
[120.66232300 61.08076096]
[127.81497955 65.82448578]
[133.91236877 71.86479950]
[138.72317505 78.97252655]
[142.06484985 86.87800598]
[143.81065369 95.28132629]
[143.89431763 103.86366272]
[142.31268311 112.29942322]
[139.12576294 120.26854706]
[151.07597351 129.33453369]
[163.02619934 138.40052795]
[174.97642517 147.46652222]
[186.92665100 156.53250122]
[198.87687683 165.59849548]
[216.04533386 152.91749573]
[236.39768982 146.54794312]
[257.69604492 147.17776489]
[277.60253906 154.72601318]
[293.93594360 168.35289001]
[304.91073608 186.55329895]
[309.33218384 207.32301331]
[306.72650146 228.37939453]
[320.51623535 234.28218079]
[334.30596924 240.18496704]
[348.09573364 246.08775330]
[363.82723999 244.40536499]
[372.48284912 256.52682495]
[386.27258301 262.42959595]
[400.06231689 268.33239746]
[413.85208130 274.23516846]
[427.64181519 280.13796997]
[443.37332153 278.45556641]
[452.02893066 290.57702637]
[465.81869507 296.47982788]
[479.60842896 302.38259888]
[493.39816284 308.28540039]
[502.15750122 296.03433228]
[513.34594727 285.95303345]
[526.44024658 278.51300049]
[540.82788086 274.06222534]
[555.83599854 272.80889893]
[570.76257324 274.81161499]
[584.90954590 279.97668457]
[597.61511230 288.06259155]
[608.28515625 298.69107056]
[616.42047119 311.36508179]
[621.64068604 325.49176025]
[623.70159912 340.41043091]
[622.50677490 355.42330933]
[618.11212158 369.82821655]
[610.72320557 382.95138550]
[600.68560791 394.17907715]
[588.46875000 402.98608398]
[574.64416504 408.96051025]
[559.85833740 411.82296753]
[544.80285645 411.43948364]
[530.18194580 407.82809448]
[516.67938232 401.15762329]
[504.92672729 391.74011230]
[495.47369385 380.01605225]
[488.76239014 366.53372192]
[485.10675049 351.92379761]
[484.67773438 336.86956787]
[487.49539185 322.07513428]
[473.70562744 316.17236328]
[459.91589355 310.26956177]
[446.12615967 304.36676025]
[431.38098145 306.47137451]
[421.73904419 293.92770386]
[407.94927979 288.02493286]
[394.15954590 282.12213135]
[380.36981201 276.21936035]
[366.58004761 270.31655884]
[351.83489990 272.42117310]
[342.19293213 259.87750244]
[328.40319824 253.97471619]
[314.61343384 248.07192993]
[300.82369995 242.16914368]
[295.44454956 250.12049866]
[288.93475342 257.18038940]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 100]
[19 99]
[20 98]
[21 97]
[22 96]
[23 95]
[26 44]
[27 43]
[28 42]
[29 40]
[30 39]
[50 82]
[51 81]
[52 80]
[53 79]
[54 78]
[55 77]
[56 76]
[57 75]
[58 74]
[59 73]
[60 72]
[108 164]
[109 163]
[110 162]
[111 161]
[113 159]
[114 158]
[115 157]
[116 156]
[117 155]
[119 153]
[120 152]
[121 151]
[122 150]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
