%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 00:18:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUAUUCCUGGGGCCAUAACUCAUGGGAAAACAGAAUUAUCCCCUAGGACUCCUUUCUAAGCCCCUAAUAAAAUGUCUGAGGGUGUCUCAUGA\
) } def
/len { sequence length } bind def

/coor [
[238.44371033 202.02290344]
[228.17134094 192.16131592]
[220.21359253 180.34484863]
[214.93280029 167.10664368]
[212.57041931 153.04469299]
[213.23599243 138.79484558]
[198.76895142 134.83190918]
[184.30192566 130.86897278]
[169.83488464 126.90605164]
[155.36784363 122.94311523]
[140.90080261 118.98018646]
[126.43376923 115.01725769]
[111.96672821 111.05432129]
[101.39308929 116.23145294]
[90.09191132 112.93177032]
[83.96519470 102.87851715]
[69.63865662 98.43438721]
[55.31212234 93.99024963]
[40.98558426 89.54611969]
[25.51263237 92.84737396]
[15.64915657 81.68668365]
[1.32261884 77.24254608]
[-8.00956917 77.67742157]
[-13.40389633 72.40313721]
[-27.57393265 67.48276520]
[-41.68562317 74.59864807]
[-56.66942215 69.57258606]
[-63.63570786 55.38645172]
[-58.45150757 40.45663071]
[-44.19251633 33.64071655]
[-29.31833839 38.98247528]
[-22.65356064 53.31273270]
[-8.48352432 58.23310471]
[5.76675272 62.91601181]
[20.09329033 67.36014557]
[34.54151154 63.74100876]
[45.42971802 75.21958160]
[59.75625610 79.66371155]
[74.08279419 84.10784912]
[88.40933228 88.55197906]
[104.56598663 84.36182404]
[115.92966461 96.58728790]
[130.39669800 100.55021667]
[144.86373901 104.51315308]
[159.33078003 108.47608185]
[173.79782104 112.43901062]
[188.26484680 116.40193939]
[202.73188782 120.36487579]
[217.19892883 124.32780457]
[224.82159424 110.38623810]
[235.50476074 98.63555908]
[248.64576721 89.73281097]
[263.50466919 84.17456818]
[279.24594116 82.26921844]
[294.98538208 84.11984253]
[309.83981323 89.61866760]
[322.97668457 98.45332336]
[333.66064453 110.12458038]
[341.29479980 123.97457886]
[345.45397949 139.22389221]
[345.90844727 155.01538086]
[360.60784912 158.00315857]
[375.35516357 160.74491882]
[390.14620972 163.23985291]
[404.93725586 165.73478699]
[419.72833252 168.22973633]
[428.11502075 155.51820374]
[440.95040894 147.32229614]
[456.01065063 145.06199646]
[470.68649292 149.12892151]
[482.43521118 158.81845093]
[489.22134399 172.45182800]
[489.86907959 187.66696167]
[484.26623535 201.82774353]
[473.38351440 212.48075867]
[459.10644531 217.78027344]
[443.90859985 216.80813599]
[430.42306519 209.73277283]
[420.98635864 197.78002930]
[417.23336792 183.02078247]
[402.44232178 180.52584839]
[387.65127563 178.03091431]
[372.86022949 175.53596497]
[365.59494019 177.56883240]
[357.62005615 172.70259094]
[342.92065430 169.71479797]
[337.16702271 182.67759705]
[328.79809570 194.13534546]
[318.19027710 203.56800842]
[305.82183838 210.54678345]
[292.25100708 214.75352478]
[278.09109497 215.99531555]
[263.98254395 214.21327209]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 49]
[7 48]
[8 47]
[9 46]
[10 45]
[11 44]
[12 43]
[13 42]
[16 40]
[17 39]
[18 38]
[19 37]
[21 35]
[22 34]
[24 33]
[25 32]
[61 86]
[62 85]
[63 83]
[64 82]
[65 81]
[66 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
