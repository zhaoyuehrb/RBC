%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 15:26:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGACUGGUGGCCUCAGCCCGCCUGGCUCUGGGGCCUGUCAUUGGUAUUUGGCCAAGGCCUGCAUCGGGAAUAAAGUCCAGAGAAUUUC\
) } def
/len { sequence length } bind def

/coor [
[104.68553162 232.58471680]
[111.43544769 218.93339539]
[123.15843964 209.21272278]
[119.06814575 194.78118896]
[114.97785187 180.34963989]
[110.88755798 165.91809082]
[106.79727173 151.48654175]
[85.66793823 149.91651917]
[66.92411041 140.03814697]
[53.68559647 123.49560547]
[48.15589142 103.04234314]
[33.21172333 101.74933624]
[18.26755714 100.45632935]
[3.32338977 99.16332245]
[-11.62077713 97.87032318]
[-26.56494522 96.57731628]
[-41.50911331 95.28430939]
[-56.45327759 93.99130249]
[-72.81872559 102.21161652]
[-86.87202454 91.85602570]
[-101.85191345 91.07960510]
[-116.20549774 99.01097870]
[-130.10948181 90.31550598]
[-129.26063538 73.93833923]
[-114.53218842 66.72690582]
[-101.07550049 76.09970856]
[-86.09560394 76.87612915]
[-76.77727509 68.95431519]
[-64.16022491 69.61367035]
[-55.16027451 79.04713440]
[-40.21610641 80.34014130]
[-25.27193832 81.63314819]
[-10.32777214 82.92615509]
[4.61639547 84.21915436]
[19.56056213 85.51216125]
[34.50473022 86.80516815]
[49.44889832 88.09817505]
[53.98641968 75.92059326]
[61.40518188 65.25079346]
[71.24064636 56.75688553]
[82.87693024 50.97074509]
[95.58541870 48.25467300]
[108.57033539 48.77874756]
[113.15631104 34.49698257]
[117.74228668 20.21521759]
[122.32826996 5.93345213]
[126.91424561 -8.34831333]
[120.88994598 -23.21732140]
[128.88417053 -37.12674332]
[144.76441956 -39.40646362]
[156.34873962 -28.30767250]
[154.75062561 -12.34441566]
[141.19601440 -3.76233554]
[136.61003113 10.51942921]
[132.02404785 24.80119514]
[127.43807983 39.08295822]
[122.85209656 53.36472321]
[133.62464905 60.42158508]
[142.32955933 69.91218567]
[148.43154907 81.25293732]
[163.05546570 77.91512299]
[177.67938232 74.57730865]
[192.30329895 71.23949432]
[206.39988708 61.82021332]
[219.35337830 72.75836945]
[212.42857361 88.23361969]
[195.64111328 85.86341858]
[181.01719666 89.20122528]
[166.39328003 92.53903961]
[151.76936340 95.87685394]
[151.52560425 106.49457550]
[149.12696838 116.84067535]
[144.67376709 126.48248291]
[138.35224915 135.01675415]
[130.42677307 142.08656311]
[121.22881317 147.39625549]
[125.31910706 161.82780457]
[129.40939331 176.25933838]
[133.49969482 190.69088745]
[137.58998108 205.12243652]
[152.67005920 207.24638367]
[165.57907104 215.32582092]
[174.08044434 227.96095276]
[176.70126343 242.96266174]
[172.98747253 257.73181152]
[163.58248901 269.70953369]
[150.11579895 276.82064819]
[134.92057800 277.83309937]
[120.62948608 272.57147217]
[109.71855164 261.94738770]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 80]
[4 79]
[5 78]
[6 77]
[7 76]
[11 37]
[12 36]
[13 35]
[14 34]
[15 33]
[16 32]
[17 31]
[18 30]
[20 27]
[21 26]
[43 57]
[44 56]
[45 55]
[46 54]
[47 53]
[60 70]
[61 69]
[62 68]
[63 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
