%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 14:17:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAUUCCUUCAGAAGGCAACGGAUAACAUCGAGAGUCUCGCUAAGAAAUGAAAAUUCUGUCUUUCCUUCCGUGGUCACAGCUGAAAGAAACAAUAAAUUGAGUGUGGAUCAAUUUGCA\
) } def
/len { sequence length } bind def

/coor [
[208.04232788 243.70587158]
[198.53599548 232.10287476]
[184.48495483 227.16145325]
[181.72409058 211.58300781]
[172.21775818 199.97999573]
[162.71142578 188.37699890]
[148.66038513 183.43557739]
[145.89952087 167.85713196]
[136.39318848 156.25411987]
[126.88685608 144.65112305]
[117.38052368 133.04811096]
[107.87419891 121.44511414]
[89.96662140 120.52381897]
[78.24041748 106.95820618]
[79.91986847 89.10577393]
[69.81443787 78.02063751]
[59.70899963 66.93550110]
[44.69395065 61.94963837]
[41.83757782 47.33148575]
[31.73214340 36.24635315]
[21.62670708 25.16121674]
[11.52127361 14.07608414]
[1.41583860 2.99095011]
[-12.90870476 9.56236458]
[-28.54129982 11.40314865]
[-43.96251678 8.34637833]
[-57.67715836 0.70057243]
[-68.35923004 -10.78140068]
[-74.98015594 -24.97644615]
[-76.90778351 -40.50108337]
[-73.96675110 -55.84629059]
[-66.45435333 -69.52418518]
[-76.84887695 -80.33869934]
[-87.24340057 -91.15322113]
[-97.63793182 -101.96774292]
[-108.03245544 -112.78225708]
[-125.79244995 -117.42068481]
[-129.45849609 -134.52740479]
[-140.13487244 -145.06376648]
[-150.81123352 -155.60014343]
[-166.09840393 -152.93885803]
[-180.01536560 -159.80162048]
[-187.21080017 -173.54956055]
[-184.91789246 -188.89628601]
[-174.01831055 -199.94068909]
[-158.70318604 -202.43597412]
[-144.86148071 -195.42263794]
[-137.81561279 -181.59747314]
[-140.27487183 -166.27650452]
[-129.59849548 -155.74014282]
[-118.92212677 -145.20378113]
[-106.74962616 -144.94627380]
[-97.76371002 -136.14555359]
[-97.21793365 -123.17678833]
[-86.82341003 -112.36226654]
[-76.42888641 -101.54774475]
[-66.03435516 -90.73323059]
[-55.63983154 -79.91870880]
[-42.91225815 -86.47371674]
[-28.83432007 -89.16233826]
[-14.55506039 -87.75592804]
[-1.24255645 -82.36044312]
[10.01162529 -73.40853119]
[18.28193474 -61.62485886]
[22.88495064 -47.96742249]
[23.43585587 -33.54970169]
[19.88058090 -19.54986382]
[12.50097275 -7.11448479]
[22.60640717 3.97064900]
[32.71184158 15.05578327]
[42.81727600 26.14091682]
[52.92271042 37.22605133]
[67.21495056 41.41903305]
[70.79413605 56.83006668]
[80.89956665 67.91519928]
[91.00500488 79.00033569]
[102.28936768 77.26995850]
[113.00202179 81.21587372]
[120.46772003 89.85267639]
[122.82209778 101.02352905]
[119.47720337 111.93878174]
[128.98353577 123.54178619]
[138.48985291 135.14479065]
[147.99618530 146.74778748]
[157.50251770 158.35079956]
[172.23352051 164.12213135]
[174.31442261 178.87066650]
[183.82075500 190.47366333]
[193.32708740 202.07667542]
[208.05809021 207.84800720]
[210.13899231 222.59654236]
[219.64532471 234.19953918]
[238.76695251 240.31181335]
[241.36811829 259.39727783]
[251.47355652 270.48239136]
[261.57897949 281.56753540]
[271.68441772 292.65267944]
[281.78985596 303.73779297]
[291.89529419 314.82293701]
[302.00073242 325.90808105]
[312.10617065 336.99319458]
[327.72207642 336.17047119]
[340.18225098 345.61917114]
[343.60336304 360.87796021]
[336.37005615 374.74206543]
[321.89767456 380.66528320]
[307.01965332 375.85086060]
[298.76095581 362.57205200]
[301.02102661 347.09863281]
[290.91558838 336.01351929]
[280.81015015 324.92837524]
[270.70471191 313.84323120]
[260.59927368 302.75811768]
[250.49385071 291.67297363]
[240.38841248 280.58782959]
[230.28297424 269.50271606]
[219.92030334 269.93594360]
[210.87661743 264.42037964]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 92]
[2 91]
[4 89]
[5 88]
[6 87]
[8 85]
[9 84]
[10 83]
[11 82]
[12 81]
[15 76]
[16 75]
[17 74]
[19 72]
[20 71]
[21 70]
[22 69]
[23 68]
[32 58]
[33 57]
[34 56]
[35 55]
[36 54]
[38 51]
[39 50]
[40 49]
[94 116]
[95 115]
[96 114]
[97 113]
[98 112]
[99 111]
[100 110]
[101 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
