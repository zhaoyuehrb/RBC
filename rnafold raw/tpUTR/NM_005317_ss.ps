%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:38:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCCUGGGGUGAUGGGGACCCCCUCGCUGUCUCCACAGGACCCUUCCCCUCCAGGGGUGCAGUGGGGUGGGUGAGGACGGGUGGGAGGGACAGGGAGGGACCAAUAAAUCAUAAUGAAGAAACGCUCA\
) } def
/len { sequence length } bind def

/coor [
[141.65492249 318.83209229]
[137.90217590 304.30911255]
[136.84158325 289.34933472]
[129.55183411 302.45886230]
[122.26208496 315.56838989]
[114.97233582 328.67791748]
[107.68258667 341.78741455]
[112.25891113 356.91464233]
[104.72474670 370.80752563]
[89.54998779 375.22366333]
[75.73754883 367.54302979]
[71.48209381 352.32241821]
[79.30831909 338.59194946]
[94.57306671 334.49768066]
[101.86281586 321.38815308]
[109.15256500 308.27862549]
[116.44231415 295.16909790]
[123.73207092 282.05960083]
[123.06409454 279.21179199]
[123.11956787 276.12445068]
[123.97108459 272.98687744]
[125.64081573 270.00823975]
[122.75891113 255.28770447]
[119.87701416 240.56715393]
[116.99510956 225.84660339]
[114.11321259 211.12605286]
[104.07480621 200.12242126]
[109.01657867 185.09280396]
[106.13468170 170.37225342]
[103.25277710 155.65170288]
[100.37088013 140.93115234]
[97.48897552 126.21059418]
[94.60707855 111.49004364]
[91.19358063 96.88360596]
[87.25296783 82.41047668]
[83.31235504 67.93733978]
[79.37174225 53.46420670]
[65.62712860 50.58500290]
[54.53034210 42.08758163]
[48.22723007 29.68738937]
[47.90531540 15.84728622]
[53.57050705 3.28844452]
[64.05718994 -5.54467678]
[60.46745682 -20.10880470]
[56.87771988 -34.67293167]
[53.28798676 -49.23706055]
[49.52253723 -63.75674820]
[45.58192825 -78.22988129]
[41.64131546 -92.70301819]
[37.52611923 -107.12747955]
[33.23693466 -121.50116730]
[28.94774818 -135.87484741]
[24.65856361 -150.24853516]
[20.36937714 -164.62222290]
[5.51976967 -168.80465698]
[-4.69421196 -180.36657715]
[-7.01332235 -195.61863708]
[-0.69754207 -209.69395447]
[12.23778629 -218.10113525]
[27.66504669 -218.15750122]
[40.66145706 -209.84504700]
[47.07991028 -195.81625366]
[44.87229919 -180.54765320]
[34.74306488 -168.91140747]
[39.03224945 -154.53771973]
[43.32143402 -140.16403198]
[47.61062241 -125.79035187]
[51.89980698 -111.41666412]
[56.87746048 -105.85038757]
[56.11444855 -96.64362335]
[60.05506134 -82.17049408]
[63.99567032 -67.69735718]
[68.83737183 -62.01242828]
[67.85211182 -52.82679367]
[71.44184875 -38.26266479]
[75.03158569 -23.69853973]
[78.62131500 -9.13441181]
[94.20667267 -5.04771996]
[105.69110107 6.38622999]
[109.89467621 22.13418198]
[105.58688354 37.95091248]
[93.84487915 49.52359772]
[97.78549194 63.99673080]
[101.72609711 78.46986389]
[105.66670990 92.94299316]
[108.81536102 95.36178589]
[110.84151459 99.19120026]
[111.12557983 103.87829590]
[109.32762909 108.60814667]
[112.20952606 123.32869720]
[115.09143066 138.04925537]
[117.97332764 152.76980591]
[120.85523224 167.49035645]
[123.73712921 182.21090698]
[133.98167419 194.26744080]
[128.83375549 208.24414062]
[131.71566772 222.96469116]
[134.59756470 237.68524170]
[137.47946167 252.40580750]
[140.36135864 267.12634277]
[145.99409485 253.22410583]
[154.05143738 240.57186890]
[164.26690674 229.58804321]
[176.30265808 220.63592529]
[189.76065063 214.01153564]
[204.19580078 209.93399048]
[219.13070679 208.53813171]
[234.07145691 209.87011719]
[248.52391052 213.88589478]
[262.01010132 220.45265198]
[274.08404541 229.35324097]
[284.34637451 240.29327393]
[292.45776367 252.91093445]
[298.14990234 266.78897095]
[301.23452759 281.46838379]
[301.60968018 296.46368408]
[299.26293945 311.27896118]
[294.27188110 325.42425537]
[286.80157471 338.43176270]
[277.09912109 349.87124634]
[265.48538208 359.36444092]
[252.34440613 366.59735107]
[238.11083984 371.33081055]
[223.25538635 373.40823364]
[208.26936340 372.76092529]
[193.64837646 369.41027832]
[179.87597656 363.46713257]
[167.40763855 355.12805176]
[156.65570068 344.66879272]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 18]
[4 17]
[5 16]
[6 15]
[7 14]
[22 100]
[23 99]
[24 98]
[25 97]
[26 96]
[28 94]
[29 93]
[30 92]
[31 91]
[32 90]
[33 89]
[34 85]
[35 84]
[36 83]
[37 82]
[43 77]
[44 76]
[45 75]
[46 74]
[47 72]
[48 71]
[49 70]
[50 68]
[51 67]
[52 66]
[53 65]
[54 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
