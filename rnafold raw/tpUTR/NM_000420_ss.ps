%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 18:41:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGGUUACCAAAGAUGCCACAGCACAGAAAUAUCGACCAACACCUCCCUGGUCACAUCCAUGGAAUCAGAGCAAGAUUUCCUUUCUGCUUCUGUUCCAAAAAUAAAAGCUGGCACUUGGCUUCCGCUUGUCUCUUAA\
) } def
/len { sequence length } bind def

/coor [
[130.43632507 435.96063232]
[139.09703064 423.49642944]
[151.67768860 415.00576782]
[148.31626892 400.38726807]
[144.95484924 385.76873779]
[131.20005798 380.11688232]
[123.31758118 367.29772949]
[124.50885773 352.11767578]
[134.52598572 340.41452026]
[131.16456604 325.79602051]
[127.80315399 311.17752075]
[124.44173431 296.55899048]
[119.83845520 290.69583130]
[121.17349243 281.57220459]
[116.70389557 275.60650635]
[118.24478149 266.51538086]
[115.54737091 251.75990295]
[112.84996033 237.00444031]
[110.15254211 222.24896240]
[107.45513153 207.49348450]
[104.03549957 204.05023193]
[102.79657745 198.39477539]
[104.98505402 192.01130676]
[102.95716095 177.14901733]
[90.27610779 176.59088135]
[77.85790253 173.96244812]
[66.03820038 169.33479309]
[55.13650131 162.83297729]
[45.44747925 154.63276672]
[37.23303604 144.95581055]
[30.71520996 134.06367493]
[26.07017708 122.25079346]
[23.42350006 109.83645630]
[22.84671402 97.15624237]
[24.35541534 84.55289459]
[27.90881920 72.36708832]
[14.49027061 65.66316223]
[1.07172179 58.95924377]
[-12.34682655 52.25532150]
[-25.76537514 45.55140305]
[-38.97422409 53.52196121]
[-54.39476395 53.06313705]
[-67.10635376 44.32134247]
[-73.05277252 30.08604622]
[-70.33654022 14.89968204]
[-59.82439804 3.60816503]
[-44.87072754 -0.18542431]
[-30.24719429 4.72943497]
[-20.62011528 16.78442955]
[-19.06145477 32.13285446]
[-5.64290571 38.83677292]
[7.77564287 45.54069519]
[21.19419098 52.24461746]
[34.61273956 58.94853592]
[42.82431030 48.11881638]
[52.80766296 38.89680862]
[64.25342560 31.56828880]
[76.80692291 26.36035347]
[90.07912445 23.43438911]
[103.65876770 22.88106728]
[117.12502289 24.71753311]
[130.06060791 28.88687706]
[137.21549988 15.70327282]
[144.37040710 2.51966834]
[151.52529907 -10.66393566]
[158.68020630 -23.84753990]
[160.04464722 -32.96680450]
[166.14868164 -37.24556351]
[173.59970093 -50.26410675]
[181.05072021 -63.28264618]
[188.50172424 -76.30118561]
[195.80514526 -89.40309906]
[202.96005249 -102.58670044]
[210.11494446 -115.77030182]
[211.47940063 -124.88956451]
[217.58343506 -129.16833496]
[225.03445435 -142.18687439]
[219.46133423 -156.79763794]
[224.63252258 -171.55543518]
[238.10633850 -179.49209595]
[253.52084351 -176.86016846]
[263.59777832 -164.90235901]
[263.57913208 -149.26478577]
[253.47372437 -137.33103943]
[238.05299377 -134.73585510]
[230.60197449 -121.71731567]
[223.29855347 -108.61540985]
[216.14366150 -95.43180084]
[208.98875427 -82.24819946]
[208.55929565 -74.80625153]
[201.52026367 -68.85017395]
[194.06925964 -55.83163071]
[186.61824036 -42.81309128]
[179.16723633 -29.79455185]
[171.86380005 -16.69264221]
[164.70890808 -3.50903773]
[157.55401611 9.67456722]
[150.39910889 22.85817146]
[143.24421692 36.04177475]
[156.76063538 47.66505814]
[167.25088501 62.07857132]
[174.15565491 78.51385498]
[177.10684204 96.09467316]
[175.94708252 113.88370514]
[170.73822021 130.93252563]
[161.75794983 146.33218384]
[149.48507690 159.26164246]
[134.57391357 169.03158569]
[117.81945038 175.12112427]
[119.84734344 189.98341370]
[122.21060181 204.79608154]
[124.90802002 219.55154419]
[127.60543060 234.30702209]
[130.30284119 249.06250000]
[133.00025940 263.81796265]
[135.86424255 278.54202271]
[139.06024170 293.19757080]
[142.42166138 307.81610107]
[145.78308105 322.43460083]
[149.14450073 337.05310059]
[163.26736450 343.20544434]
[170.96949768 356.34051514]
[169.47798157 371.31515503]
[159.57336426 382.40731812]
[162.93478394 397.02584839]
[166.29620361 411.64434814]
[181.32194519 413.78713989]
[194.55705261 421.21655273]
[204.21159363 432.92785645]
[208.97985840 447.33715820]
[208.21699524 462.49572754]
[202.02615356 476.35351562]
[191.24461365 487.03631592]
[177.33047485 493.09945679]
[162.16552734 493.72283936]
[147.80068970 488.82223511]
[136.17869568 479.06039429]
[128.87132263 465.75750732]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 126]
[4 125]
[5 124]
[9 120]
[10 119]
[11 118]
[12 117]
[14 116]
[16 115]
[17 114]
[18 113]
[19 112]
[20 111]
[23 110]
[24 109]
[36 54]
[37 53]
[38 52]
[39 51]
[40 50]
[62 99]
[63 98]
[64 97]
[65 96]
[66 95]
[68 94]
[69 93]
[70 92]
[71 91]
[72 89]
[73 88]
[74 87]
[76 86]
[77 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
