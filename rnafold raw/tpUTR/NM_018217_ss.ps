%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 02:26:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACUGGAUAAUUUUUUUAUUUUUAUUUUUUUGAGGCUAAACUAUAAUAAAUUGCUUUUGGCUAUCAUAUUUUGGU\
) } def
/len { sequence length } bind def

/coor [
[97.31530762 165.35379028]
[84.55753326 163.55986023]
[72.39886475 159.30010986]
[61.31098175 152.73979187]
[51.72405243 144.13340759]
[44.01000214 133.81486511]
[30.36552238 140.04609680]
[16.72104263 146.27731323]
[3.07656193 152.50854492]
[-10.56791782 158.73976135]
[-24.21239853 164.97099304]
[-31.14352036 179.43954468]
[-46.80869675 182.90101624]
[-59.19094467 172.70007324]
[-58.79166412 156.66198730]
[-45.91714859 147.08981323]
[-30.44362259 151.32650757]
[-16.79914284 145.09529114]
[-3.15466332 138.86405945]
[10.48981667 132.63284302]
[24.13429642 126.40161133]
[37.77877808 120.17038727]
[34.66267014 103.05915833]
[36.16632080 85.73162842]
[42.18340683 69.41296387]
[52.28849030 55.25698853]
[65.76707458 44.26462555]
[81.66613770 37.21310043]
[98.86151886 34.60100174]
[116.13739777 36.61301804]
[132.27226257 43.10688782]
[146.12527466 53.62345505]
[157.85275269 44.27111053]
[169.58023071 34.91876221]
[181.11448669 25.32913780]
[192.45072937 15.50622749]
[203.78697205 5.68331623]
[215.12321472 -4.13959455]
[226.45945740 -13.96250534]
[237.79570007 -23.78541756]
[249.13194275 -33.60832596]
[243.97985840 -47.88489532]
[244.33688354 -63.05845642]
[250.15472412 -77.07691193]
[260.64657593 -88.04438019]
[274.39352417 -94.47760010]
[289.53634644 -95.50653076]
[304.02716064 -90.99201965]
[315.90618896 -81.54461670]
[323.56686401 -68.44200897]
[325.97317505 -53.45621109]
[322.79965210 -38.61392975]
[314.47552490 -25.92246437]
[302.12655640 -17.09823036]
[287.42282104 -13.33463383]
[272.35290527 -15.14066887]
[258.95486450 -22.27208328]
[247.61860657 -12.44917297]
[236.28236389 -2.62626219]
[224.94612122 7.19664907]
[213.60987854 17.01955986]
[202.27363586 26.84247017]
[190.93739319 36.66538239]
[187.85929871 43.62088013]
[178.93257141 46.64623642]
[167.20509338 55.99858093]
[155.47763062 65.35092926]
[161.19297791 76.89707947]
[164.53433228 89.33952332]
[165.37205505 102.19553375]
[163.67364502 114.96637726]
[159.50500488 127.15658569]
[153.02784729 138.29325867]
[144.49345398 147.94432068]
[134.23292542 155.73536682]
[122.64432526 161.36415100]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 22]
[7 21]
[8 20]
[9 19]
[10 18]
[11 17]
[32 67]
[33 66]
[34 65]
[35 63]
[36 62]
[37 61]
[38 60]
[39 59]
[40 58]
[41 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
