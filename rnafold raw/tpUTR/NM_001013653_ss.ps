%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 00:21:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCGGCCGCCUGGAGCGCUCGAAGCUUCCCCCAUGCCUUUGCCCUCCCUUUACACUGUCUGCCGGCGUCAACAAGCGACACAGACCGAA\
) } def
/len { sequence length } bind def

/coor [
[84.04851532 145.23381042]
[76.90930939 158.42590332]
[69.77009583 171.61801147]
[62.63088608 184.81011963]
[55.49167252 198.00222778]
[56.48417282 214.37130737]
[42.65702057 223.18844604]
[28.23439980 215.38331604]
[28.05307007 198.98516846]
[42.29956818 190.86302185]
[49.43877792 177.67091370]
[56.57798767 164.47880554]
[63.71720123 151.28669739]
[70.85640717 138.09458923]
[56.34592438 119.87129211]
[52.13236618 96.96084595]
[59.20961380 74.76725769]
[47.84389114 64.97846985]
[36.47816849 55.18968582]
[25.11244583 45.40089798]
[9.60659885 42.25777054]
[5.01220751 28.08946609]
[-6.35351562 18.30068016]
[-19.38028717 18.45414352]
[-28.66535187 9.90095520]
[-29.52190399 -2.28965616]
[-40.55776215 -12.44888020]
[-55.95121002 -16.10296440]
[-60.07463837 -30.41542816]
[-71.11049652 -40.57465363]
[-86.01058197 -36.57576370]
[-100.70032501 -41.28903961]
[-110.49228668 -53.21049118]
[-112.26188660 -68.53602600]
[-105.44445038 -82.37532806]
[-92.21540070 -90.31231689]
[-76.79608154 -89.81433105]
[-64.10672760 -81.04027557]
[-58.19648361 -66.78992462]
[-60.95127487 -51.61051178]
[-49.91541672 -41.45128632]
[-35.31132507 -38.52385712]
[-30.39854050 -23.48473930]
[-19.36268044 -13.32551479]
[-2.12560272 -10.52221680]
[3.43527079 6.93495655]
[14.80099392 16.72374344]
[29.49388885 19.16671181]
[34.90123367 34.03517532]
[46.26695633 43.82396317]
[57.63267899 53.61274719]
[68.99840546 63.40153503]
[78.71854401 57.01574326]
[89.68991089 53.15718842]
[101.26745605 52.05273438]
[112.77048492 53.76731110]
[123.52268219 58.20011520]
[132.89187622 65.09052277]
[140.32719421 74.03341675]
[145.39151001 84.50299835]
[147.78706360 95.88371277]
[147.37298584 107.50644684]
[161.63883972 112.14170837]
[175.90467834 116.77696228]
[190.17053223 121.41221619]
[204.43638611 126.04747009]
[217.88317871 115.94499207]
[234.53633118 115.77590942]
[247.91775513 125.41057587]
[252.93785095 140.94366455]
[267.34915161 145.10470581]
[279.51113892 135.46801758]
[295.01605225 134.85403442]
[307.90197754 143.49885559]
[313.21395874 158.07836914]
[308.90948486 172.98646545]
[296.64367676 182.49066162]
[281.13299561 182.93640137]
[268.34164429 174.15229797]
[263.18811035 159.51602173]
[248.77680969 155.35496521]
[238.95220947 164.55554199]
[225.74690247 167.67590332]
[212.63442993 163.78395081]
[203.11946106 153.80696106]
[199.80111694 140.31332397]
[185.53527832 135.67807007]
[171.26942444 131.04280090]
[157.00358582 126.40755463]
[142.73773193 121.77230072]
[136.34446716 131.29898071]
[127.87166595 139.03482056]
[117.80410767 144.53718567]
[106.71784973 147.49122620]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[4 11]
[5 10]
[17 52]
[18 51]
[19 50]
[20 49]
[22 47]
[23 46]
[26 44]
[27 43]
[29 41]
[30 40]
[62 90]
[63 89]
[64 88]
[65 87]
[66 86]
[70 81]
[71 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
