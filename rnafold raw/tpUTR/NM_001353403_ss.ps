%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 22:58:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCUGUUUUUUCUUAACAAGUUGAGGCGUGGGUAGAGCAGGAAUUGGUUUUCCAGCAUUGUGUCCGUAAACCUGAGUUAGAAUAAGAUGUAACGGAAGCCACGAUAAAGACUCGGUCAAAUCCUGCAGCCUGGGGCUUACUGUG\
) } def
/len { sequence length } bind def

/coor [
[28.65464020 423.93966675]
[15.66144943 431.43481445]
[0.72770244 430.02655029]
[-10.63530350 420.23458862]
[-14.23395634 405.67123413]
[-21.64058876 418.71505737]
[-29.04722214 431.75891113]
[-36.45385742 444.80276489]
[-30.83102226 459.39443970]
[-35.95191956 474.16979980]
[-49.39861679 482.15228271]
[-64.82199860 479.57287598]
[-74.93960571 467.64944458]
[-74.97422791 452.01190186]
[-64.90950012 440.04379272]
[-49.49769592 437.39611816]
[-42.09106445 424.35226440]
[-34.68442917 411.30844116]
[-27.27779770 398.26458740]
[-21.01989365 384.63232422]
[-15.95704937 370.51257324]
[-10.89420605 356.39282227]
[-11.60242558 348.98120117]
[-5.56754446 342.02569580]
[-0.20207094 328.01815796]
[5.16340256 314.01058960]
[2.49054623 299.35778809]
[14.65222263 289.23828125]
[11.97936630 274.58544922]
[24.14104271 264.46597290]
[29.50651550 250.45840454]
[34.87199020 236.45085144]
[40.23746490 222.44328308]
[45.60293579 208.43572998]
[40.58525848 199.43292236]
[41.40743256 188.93792725]
[48.03763199 180.47904968]
[58.45099640 177.03492737]
[64.41413879 163.27117920]
[70.37728119 149.50741577]
[76.34042358 135.74366760]
[82.30356598 121.97991180]
[88.26670837 108.21616364]
[86.85658264 94.30561829]
[97.96953583 85.82069397]
[103.93267822 72.05694580]
[109.89582062 58.29319000]
[115.85896301 44.52943420]
[115.17000580 40.07414627]
[115.90443420 36.05460739]
[117.73877716 32.87505722]
[120.24930573 30.78788948]
[122.97230530 29.87384796]
[130.09657288 16.67366409]
[137.07839966 3.39759779]
[143.91700745 -9.95281601]
[150.61157227 -23.37603188]
[156.72245789 -37.07483292]
[162.38807678 -50.96370316]
[168.05369568 -64.85257721]
[173.71931458 -78.74144745]
[179.38493347 -92.63031769]
[185.05055237 -106.51918793]
[190.26501465 -120.58366394]
[195.02288818 -134.80908203]
[199.78074646 -149.03451538]
[204.53862000 -163.25993347]
[209.29649353 -177.48536682]
[198.22627258 -189.72082520]
[194.83552551 -205.77317810]
[199.95309448 -221.26257324]
[212.09939575 -232.01115417]
[227.91262817 -235.16979980]
[232.36332703 -249.49430847]
[221.48677063 -260.26272583]
[216.87145996 -274.85580444]
[219.57795715 -289.92010498]
[228.98432922 -301.99401855]
[242.92904663 -308.30297852]
[258.20773315 -307.39727783]
[271.30944824 -299.48504639]
[279.22354126 -286.38442993]
[280.13134766 -271.10586548]
[273.82434082 -257.16027832]
[261.75177002 -247.75221252]
[246.68782043 -245.04360962]
[242.23713684 -230.71911621]
[252.16996765 -221.28981018]
[257.08016968 -208.43354797]
[255.95120239 -194.65136719]
[248.94741821 -182.65101624]
[237.39299011 -174.81497192]
[223.52191162 -172.72749329]
[218.76403809 -158.50205994]
[214.00617981 -144.27664185]
[209.24830627 -130.05122375]
[204.49043274 -115.82579803]
[205.78221130 -112.47138977]
[205.46830750 -108.31357574]
[203.18440247 -104.13516998]
[198.93942261 -100.85356903]
[193.27380371 -86.96469879]
[187.60818481 -73.07582855]
[181.94256592 -59.18695831]
[176.27694702 -45.29808426]
[170.61132812 -31.40921402]
[171.68403625 -27.97846794]
[171.10255432 -23.84956169]
[168.55386353 -19.82719231]
[164.10604858 -16.82626343]
[164.01429749 -9.38146877]
[157.26742554 -3.11421537]
[150.42881775 10.23619843]
[150.17691040 17.67729568]
[143.29675293 23.79792976]
[136.17248535 36.99811554]
[129.62271118 50.49257660]
[123.65957642 64.25633240]
[117.69643402 78.02008820]
[111.73329163 91.78383636]
[113.14341736 105.69438171]
[102.03046417 114.17930603]
[96.06732178 127.94305420]
[90.10417938 141.70681763]
[84.14103699 155.47056580]
[78.17789459 169.23431396]
[72.21475220 182.99807739]
[75.48860931 202.84048462]
[59.61049652 213.80120850]
[54.24502182 227.80876160]
[48.87954712 241.81631470]
[43.51407623 255.82388306]
[38.14860153 269.83145142]
[40.43768311 285.48617554]
[28.65978050 294.60375977]
[30.94886208 310.25848389]
[19.17096138 319.37606812]
[13.80548763 333.38363647]
[8.44001389 347.39117432]
[3.22555351 361.45565796]
[-1.83728993 375.57540894]
[-6.90013361 389.69519043]
[6.48786163 382.93045044]
[21.32081223 385.16284180]
[32.12461853 395.56851196]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 19]
[6 18]
[7 17]
[8 16]
[20 142]
[21 141]
[22 140]
[24 139]
[25 138]
[26 137]
[28 135]
[30 133]
[31 132]
[32 131]
[33 130]
[34 129]
[38 127]
[39 126]
[40 125]
[41 124]
[42 123]
[43 122]
[45 120]
[46 119]
[47 118]
[48 117]
[53 116]
[54 115]
[55 113]
[56 112]
[57 110]
[58 106]
[59 105]
[60 104]
[61 103]
[62 102]
[63 101]
[64 97]
[65 96]
[66 95]
[67 94]
[68 93]
[73 87]
[74 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
