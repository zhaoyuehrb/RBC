%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 00:57:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCACUUCUGUCAGAUGCUCCCAUCCACUAUUAAUGCACUAGGUGGGAGGAGAGGGCGGCAAUGACACUGCACCUCUCCUUUCCCACCGCAUUCCCUGGAGCUCCCUAAAUAAAACUUUUUUUAACGUGA\
) } def
/len { sequence length } bind def

/coor [
[131.33985901 216.41725159]
[125.43509674 230.20616150]
[119.53034973 243.99507141]
[121.21050262 259.72680664]
[109.08781433 268.38070679]
[103.18305969 282.16958618]
[105.66615295 298.37966919]
[92.70189667 308.42257690]
[77.62680817 301.96704102]
[75.94885254 285.65396118]
[89.39415741 276.26483154]
[95.29891205 262.47595215]
[93.19641113 247.73046875]
[105.74143982 238.09031677]
[111.64619446 224.30140686]
[117.55094910 210.51249695]
[116.28451538 204.36750793]
[118.45610046 197.85687256]
[114.57381439 183.36798096]
[110.69152832 168.87908936]
[106.80924225 154.39021301]
[102.92695618 139.90132141]
[93.19066620 139.42480469]
[83.85859680 136.60789490]
[75.48474884 131.61779785]
[68.56621552 124.75074768]
[63.51370621 116.41440582]
[60.62715912 107.10364532]
[60.07793045 97.37117767]
[61.89862442 87.79477692]
[65.98115540 78.94291687]
[72.08317566 71.34108734]
[79.84243774 65.44055939]
[88.79832458 61.59160233]
[87.37248993 46.65952301]
[85.94664764 31.72744560]
[84.52080536 16.79536629]
[83.09496307 1.86328769]
[80.30043030 -1.74835801]
[78.99636841 -5.67284822]
[79.09080505 -9.38302135]
[80.32378387 -12.44072151]
[82.31331635 -14.54556274]
[82.31331635 -29.54556274]
[82.31331635 -44.54556274]
[82.31331635 -59.54556274]
[82.31331635 -74.54556274]
[82.31331635 -89.54556274]
[82.31331635 -104.54556274]
[81.95635223 -119.54131317]
[81.24262238 -134.52432251]
[80.52889252 -149.50733948]
[79.81516266 -164.49034119]
[79.10143280 -179.47335815]
[78.38770294 -194.45635986]
[77.67398071 -209.43937683]
[76.78200531 -224.41282654]
[75.71192169 -239.37461853]
[74.64183044 -254.33639526]
[73.57173920 -269.29818726]
[60.32880020 -277.38546753]
[54.39972305 -291.72509766]
[58.06435394 -306.80325317]
[69.91357422 -316.82202148]
[85.39111328 -317.92898560]
[98.54553986 -309.69851685]
[104.31871796 -295.29537964]
[100.49073029 -280.25790405]
[88.53352356 -270.36825562]
[89.60361481 -255.40647888]
[90.67369843 -240.44470215]
[91.74378967 -225.48292542]
[95.39434814 -218.97225952]
[92.65699005 -210.15310669]
[93.37071991 -195.17008972]
[94.08444214 -180.18708801]
[94.79817200 -165.20407104]
[95.51190186 -150.22106934]
[96.22563171 -135.23805237]
[96.93936157 -120.25504303]
[99.88133240 -116.38056183]
[100.35437775 -110.59362030]
[97.31331635 -104.54556274]
[97.31331635 -89.54556274]
[97.31331635 -74.54556274]
[97.31331635 -59.54556274]
[97.31331635 -44.54556274]
[97.31331635 -29.54556274]
[97.31331635 -14.54556274]
[98.02704620 0.43744707]
[99.45288086 15.36952591]
[100.87872314 30.30160522]
[102.30456543 45.23368454]
[103.73040771 60.16576385]
[123.01603699 67.27471161]
[136.22697449 83.02093506]
[139.87643433 103.24849701]
[133.00119019 122.61866760]
[117.41584015 136.01902771]
[121.29812622 150.50791931]
[125.18041229 164.99681091]
[129.06269836 179.48570251]
[132.94499207 193.97457886]
[137.67799377 179.74087524]
[145.13725281 166.72705078]
[155.02702332 155.44908142]
[166.95520020 146.35411072]
[180.44886780 139.80270386]
[194.97305298 136.05461121]
[209.95190430 135.25843811]
[224.79156494 137.44575500]
[238.90370178 142.52983093]
[251.72879028 150.30909729]
[262.75836182 160.47514343]
[271.55514526 172.62490845]
[277.77035522 186.27668762]
[281.15759277 200.88923645]
[281.58255005 215.88322449]
[279.02838135 230.66416931]
[273.59637451 244.64605713]
[265.50186157 257.27453613]
[255.06578064 268.04898071]
[242.70188904 276.54214478]
[228.90036011 282.41735840]
[214.20840454 285.44165039]
[199.20849609 285.49514771]
[184.49534607 282.57571411]
[170.65228271 276.79907227]
[158.22811890 268.39428711]
[147.71546936 257.69458008]
[139.53109741 245.12413025]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[5 12]
[6 11]
[18 103]
[19 102]
[20 101]
[21 100]
[22 99]
[34 94]
[35 93]
[36 92]
[37 91]
[38 90]
[43 89]
[44 88]
[45 87]
[46 86]
[47 85]
[48 84]
[49 83]
[50 80]
[51 79]
[52 78]
[53 77]
[54 76]
[55 75]
[56 74]
[57 72]
[58 71]
[59 70]
[60 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
