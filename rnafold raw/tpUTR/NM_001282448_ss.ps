%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 00:01:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCUGGGGAGUCGGAACAGGGCUAAGGAGGGGGAAGCAAAAGGCUGCCUCGGGUGUUUUAAUAAAGUUGUUGUUUAUUUCCA\
) } def
/len { sequence length } bind def

/coor [
[189.85194397 180.75013733]
[191.96946716 166.64590454]
[179.26860046 158.66543579]
[166.56773376 150.68495178]
[153.86688232 142.70446777]
[141.16601562 134.72398376]
[128.46514893 126.74350739]
[115.76428986 118.76302338]
[103.06342316 110.78253937]
[90.21555328 103.04094696]
[77.22517395 95.54094696]
[64.23479462 88.04094696]
[51.24441147 80.54094696]
[42.04383850 87.92661285]
[31.01265335 92.03419495]
[19.27648735 92.46275330]
[8.02719498 89.18584442]
[-1.59818649 82.55246735]
[-8.63235664 73.24996948]
[-12.37495422 62.23284912]
[-12.46225929 50.62484741]
[-8.90247726 39.60431671]
[-20.62994957 30.25196838]
[-32.35742188 20.89962196]
[-46.34241104 27.11883736]
[-61.61496353 26.11495972]
[-74.66555786 18.11867142]
[-82.49525452 4.96746111]
[-83.30486298 -10.31661987]
[-76.90832520 -24.22140121]
[-64.77553558 -33.55166626]
[-49.69449997 -36.16338730]
[-35.13074493 -31.45641136]
[-24.43091011 -20.51236534]
[-20.05373955 -5.84611320]
[-23.00507545 9.17214966]
[-11.27760315 18.52449608]
[0.44986945 27.87684250]
[17.25504684 19.97554779]
[35.84860992 21.40227509]
[51.38136673 31.86236763]
[59.76419449 48.69520569]
[58.74441147 67.55056763]
[71.73479462 75.05056763]
[84.72517395 82.55056763]
[97.71555328 90.05056763]
[105.92730713 91.08117676]
[111.04390717 98.08168030]
[123.74476624 106.06216431]
[136.44563293 114.04264069]
[149.14649963 122.02312469]
[161.84735107 130.00360107]
[174.54821777 137.98408508]
[187.24908447 145.96456909]
[199.94995117 153.94505310]
[213.54121399 145.21409607]
[229.51507568 143.23222351]
[244.71858215 148.34028625]
[256.17257690 159.48472595]
[261.65545654 174.43431091]
[260.13397217 190.22685242]
[273.12435913 197.72685242]
[286.11471558 205.22685242]
[299.10510254 212.72685242]
[312.09548950 220.22685242]
[325.08587646 227.72685242]
[339.71752930 222.20881653]
[354.45574951 227.43556213]
[362.34158325 240.93916321]
[359.65161133 256.34365845]
[347.65594482 266.37548828]
[332.01855469 266.29794312]
[320.12295532 256.14764404]
[317.58587646 240.71722412]
[304.59548950 233.21722412]
[291.60510254 225.71722412]
[278.61471558 218.21722412]
[265.62435913 210.71722412]
[252.63395691 203.21722412]
[241.45530701 211.64643860]
[227.85392761 215.14505005]
[213.90905762 213.14363098]
[201.76571655 205.91618347]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 55]
[3 54]
[4 53]
[5 52]
[6 51]
[7 50]
[8 49]
[9 48]
[10 46]
[11 45]
[12 44]
[13 43]
[22 38]
[23 37]
[24 36]
[61 79]
[62 78]
[63 77]
[64 76]
[65 75]
[66 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
