%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 16:21:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGCCGACACGCUCCCUCCCCCUGCCCCUUCUACACUCUCCUGGGCCCCUCCCUACCUCAACCUGUAAAUUAUUUUAAAUUAUAAGGACUGCAUGGUAAUUUAUAGUUUAUACAGUUUUAAAGAAUCAUUAUUUAUUAAAUUUUUGGAAGCAU\
) } def
/len { sequence length } bind def

/coor [
[112.07734680 245.03630066]
[103.82167816 257.80001831]
[91.30713654 266.42874146]
[76.44210052 269.60662842]
[61.49337006 266.84909058]
[48.74052811 258.57666016]
[40.12828064 246.05078125]
[36.96994400 231.18156433]
[39.74713135 216.23648071]
[48.03635025 203.49452209]
[60.57354736 194.89877319]
[75.44689941 191.75999451]
[78.16797638 177.00886536]
[80.88904572 162.25773621]
[75.58891296 148.33804321]
[85.70126343 136.17042542]
[88.42234039 121.41929626]
[83.31044006 115.93126678]
[73.85040283 127.57204437]
[65.06261444 139.72831726]
[50.46556091 136.27490234]
[48.05640030 121.46963501]
[60.80461884 113.56635284]
[73.08663940 104.95520782]
[67.97474670 99.46717072]
[53.06784821 101.13584900]
[38.16095352 102.80452728]
[23.25405884 104.47320557]
[19.40805626 119.15559387]
[10.51470280 131.45489502]
[-2.22324729 139.70771790]
[-17.08309174 142.79792786]
[-32.05516052 140.30761719]
[-45.11459732 132.57357788]
[-54.49523163 120.64176178]
[-58.92839813 106.12586212]
[-57.81455612 90.98902130]
[-51.30434036 77.27838898]
[-40.27820206 66.84820557]
[-26.22733879 61.10906982]
[-11.05201340 60.83715439]
[3.19543576 66.06922913]
[14.58815861 76.09770203]
[21.58538246 89.56630707]
[36.49227905 87.89762878]
[51.39917374 86.22895813]
[66.30606842 84.56027985]
[52.42403030 78.87792969]
[37.46106339 77.82451630]
[23.79596710 71.63863373]
[13.13089943 61.09082031]
[6.79433012 47.49494553]
[5.57555962 32.54454041]
[9.62640190 18.10187149]
[18.44227219 5.96595669]
[30.92504311 -2.35152125]
[45.51982498 -5.81451464]
[60.40865326 -3.99166393]
[73.73693848 2.88997173]
[83.84446716 13.97319698]
[89.47221375 27.87745476]
[89.91918182 42.87079620]
[85.13057709 57.08399200]
[85.02995300 72.08365631]
[92.30948639 58.96845627]
[99.58901215 45.85325623]
[106.86854553 32.73806000]
[114.14807129 19.62285995]
[99.87671661 24.24112129]
[85.56867218 19.73779488]
[76.51504517 7.77820492]
[76.06384277 -7.21500731]
[84.38193512 -19.69737244]
[98.39328766 -25.05292702]
[112.91652679 -21.30119324]
[122.58097839 -9.82955837]
[123.81303406 5.11847353]
[133.11436462 -6.64950705]
[142.41567993 -18.41748810]
[151.71701050 -30.18546867]
[161.01834106 -41.95344925]
[170.31965637 -53.72143173]
[179.62098694 -65.48941040]
[188.92230225 -77.25739288]
[198.22363281 -89.02537537]
[207.52494812 -100.79335022]
[216.82627869 -112.56133270]
[219.03984070 -130.81455994]
[235.54228210 -136.71008301]
[244.60319519 -148.66415405]
[253.66410828 -160.61824036]
[255.17048645 -176.94804382]
[270.17687988 -183.56169128]
[283.24600220 -173.65560913]
[280.93344116 -157.42033386]
[265.61816406 -151.55732727]
[256.55725098 -139.60324097]
[247.49635315 -127.64917755]
[248.82873535 -115.58920288]
[241.32711792 -105.54676056]
[228.59425354 -103.26000977]
[219.29293823 -91.49202728]
[209.99160767 -79.72404480]
[200.69029236 -67.95606995]
[191.38896179 -56.18808746]
[182.08763123 -44.42010498]
[172.78631592 -32.65212631]
[163.48498535 -20.88414383]
[154.18367004 -9.11616421]
[144.88233948 2.65181684]
[135.58102417 14.41979790]
[127.26326752 26.90238762]
[119.98374176 40.01758957]
[112.70420837 53.13278580]
[105.42468262 66.24798584]
[98.14514923 79.36318207]
[119.54807281 77.96764374]
[138.17160034 98.86553955]
[151.05946350 106.54037476]
[163.94731140 114.21521759]
[176.83517456 121.89005280]
[189.72303772 129.56489563]
[205.53884888 129.97802734]
[212.51515198 143.13781738]
[225.40301514 150.81265259]
[238.29087830 158.48750305]
[251.17872620 166.16233826]
[267.57476807 165.84275818]
[275.81674194 180.02027893]
[267.42602539 194.11026001]
[251.03425598 193.61816406]
[243.50389099 179.05018616]
[230.61602783 171.37535095]
[217.72817993 163.70051575]
[204.84031677 156.02568054]
[189.94633484 156.16149902]
[182.04818726 142.45275879]
[169.16033936 134.77790833]
[156.27247620 127.10307312]
[143.38462830 119.42823792]
[130.49676514 111.75339508]
[123.66593933 114.85014343]
[133.77796936 125.92926788]
[126.36585999 138.97000122]
[111.67292023 135.95043945]
[110.00428772 121.04363251]
[103.17346954 124.14037323]
[100.45239258 138.89149475]
[105.55789185 153.86628723]
[95.64017487 164.97882080]
[92.91909790 179.72993469]
[90.19802094 194.48106384]
[102.97258759 202.71994019]
[111.61775970 215.22311401]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 152]
[13 151]
[14 150]
[16 148]
[17 147]
[25 47]
[26 46]
[27 45]
[28 44]
[64 116]
[65 115]
[66 114]
[67 113]
[68 112]
[77 111]
[78 110]
[79 109]
[80 108]
[81 107]
[82 106]
[83 105]
[84 104]
[85 103]
[86 102]
[87 101]
[89 98]
[90 97]
[91 96]
[118 141]
[119 140]
[120 139]
[121 138]
[122 137]
[124 135]
[125 134]
[126 133]
[127 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
