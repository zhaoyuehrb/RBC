%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 08:32:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGUGUAUGACUGCCUUUGAGCUGUAGUUCCCGUUUAUUUACACAUGUGGAUCCUCGUUUUCCAAGCA\
) } def
/len { sequence length } bind def

/coor [
[173.28143311 191.51448059]
[168.96716309 181.69181824]
[167.99417114 170.97720337]
[170.48245239 160.47900391]
[158.34719849 151.66223145]
[146.21194458 142.84544373]
[134.07669067 134.02867126]
[121.94142914 125.21189117]
[108.85022736 132.22947693]
[94.01104736 132.88157654]
[80.35472870 127.03939819]
[70.57844543 115.85679626]
[66.61306763 101.54239655]
[69.24179077 86.92336273]
[57.10653305 78.10658264]
[45.57230377 82.31167603]
[33.58678818 80.28964996]
[24.25966263 72.68732452]
[19.95037651 61.58326721]
[21.67190170 49.92070007]
[10.37582970 40.05162048]
[-0.92024207 30.18253899]
[-12.21631432 20.31345749]
[-28.40211868 17.67683601]
[-33.95781708 2.24743938]
[-23.16818237 -10.10229111]
[-7.13266659 -6.66801119]
[-2.34723306 9.01738548]
[8.94883919 18.88646698]
[20.24491119 28.75554657]
[31.54098320 38.62462616]
[49.42455292 36.11097717]
[63.91657257 47.39936447]
[65.92330933 65.97132874]
[78.05857086 74.78810883]
[91.14977264 67.77051544]
[105.98895264 67.11841583]
[119.64527130 72.96060181]
[129.42155457 84.14320374]
[133.38693237 98.45760345]
[130.75820923 113.07663727]
[142.89346313 121.89341736]
[155.02871704 130.71018982]
[167.16397095 139.52697754]
[179.29922485 148.34375000]
[197.96435547 140.46125793]
[217.63104248 144.76866150]
[231.11938477 159.54165649]
[233.59277344 179.26312256]
[247.38568115 185.15850830]
[261.17861938 191.05387878]
[274.97152710 196.94924927]
[287.68380737 188.20849609]
[303.10440063 187.75091553]
[316.31259155 195.72254944]
[323.09375000 209.57966614]
[321.28399658 224.90051270]
[311.46081543 236.79626465]
[296.75875854 241.47102356]
[281.86920166 237.43310547]
[271.54336548 225.97097778]
[269.07614136 210.74217224]
[255.28323364 204.84680176]
[241.49031067 198.95141602]
[227.69740295 193.05604553]
[220.22058105 200.49388123]
[210.74101257 205.18457031]
[200.23226929 206.62486267]
[189.78056335 204.64639282]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 45]
[5 44]
[6 43]
[7 42]
[8 41]
[14 35]
[15 34]
[20 31]
[21 30]
[22 29]
[23 28]
[49 65]
[50 64]
[51 63]
[52 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
