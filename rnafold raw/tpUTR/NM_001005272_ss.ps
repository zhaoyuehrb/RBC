%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 22:10:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAGGAGGUAUGUAGUCAAGGUCUUCCCAGUGAAGUUUUCAGGUUUCUAAGGGCAAGUCAAGGAUCCCA\
) } def
/len { sequence length } bind def

/coor [
[71.94394684 261.86303711]
[59.97409439 271.07711792]
[45.89270020 276.54437256]
[30.84127808 277.82162476]
[16.03997803 274.80529785]
[2.68867707 267.73992920]
[-8.13029575 257.19827271]
[-15.53989410 244.03489685]
[-18.93945503 229.31689453]
[-18.05339241 214.23738098]
[-12.95353413 200.01879883]
[-4.05330276 187.81378174]
[7.92579889 178.61172485]
[22.01267815 173.15859985]
[37.06537628 171.89648438]
[51.86363983 174.92767334]
[58.87965393 161.66964722]
[65.89566803 148.41160583]
[59.18497086 135.14115906]
[61.60384369 120.28811646]
[72.43151093 109.58227539]
[87.66298676 107.27828979]
[87.33950806 93.30020142]
[99.07897949 85.70569611]
[106.09499359 72.44766235]
[113.11100769 59.18962097]
[119.83200836 45.77962112]
[126.25470734 32.22422028]
[132.67739868 18.66881752]
[125.40761566 5.08734751]
[127.50447083 -9.99431610]
[137.95626831 -20.82132149]
[152.60395813 -23.38707924]
[159.02665710 -36.94248199]
[165.44935608 -50.49788284]
[171.87205505 -64.05328369]
[164.31488037 -77.60572815]
[166.20033264 -93.00782776]
[176.80343628 -104.33716583]
[192.04705811 -107.23737335]
[206.06974792 -100.59327698]
[213.47946167 -86.95964813]
[211.42703247 -71.57891083]
[200.70166016 -60.36526489]
[185.42745972 -57.63058472]
[179.00476074 -44.07518387]
[172.58206177 -30.51978111]
[166.15936279 -16.96437836]
[173.45048523 -4.00376606]
[171.69097900 10.94173908]
[161.34745789 22.11604691]
[146.23280334 25.09151649]
[139.81010437 38.64691925]
[133.38740540 52.20232010]
[133.37055969 59.83747864]
[126.36904144 66.20563507]
[119.35302734 79.46367645]
[112.33701324 92.72171021]
[112.66049194 106.69979858]
[100.92102051 114.29430389]
[107.58294678 128.18405151]
[104.82102966 143.15820312]
[93.90055084 153.51228333]
[79.15370178 155.42761230]
[72.13768768 168.68565369]
[65.12167358 181.94369507]
[75.95123291 192.47447205]
[83.37405396 205.63040161]
[86.78839874 220.34498596]
[85.91748047 235.42536926]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 66]
[17 65]
[18 64]
[22 60]
[24 58]
[25 57]
[26 56]
[27 54]
[28 53]
[29 52]
[33 48]
[34 47]
[35 46]
[36 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
