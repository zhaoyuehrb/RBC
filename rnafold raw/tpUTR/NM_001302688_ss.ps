%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 04:40:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCCGAAGCCUGCAGCCAUGCGACCCCACGCCACCCCGUGCCUCCUGCCUCCGCGCAGCCUGCAGCGGGAGACCCUGUCCCCGCCCCAGCCGUCCUCCUGGGGUGGACCCUAGUUUAAUAAAGAUUCACCAAGUUUCACGCAUC\
) } def
/len { sequence length } bind def

/coor [
[109.59154510 260.52276611]
[109.41857147 244.71940613]
[120.53047180 233.48103333]
[120.20773315 218.48451233]
[110.30221558 204.03584290]
[119.20223999 187.95367432]
[118.55690765 172.96755981]
[117.91157532 157.98144531]
[117.26624298 142.99533081]
[116.62091064 128.00923157]
[96.19771576 134.75679016]
[74.43965149 127.24611664]
[64.18086243 138.18948364]
[53.92206955 149.13284302]
[43.66327667 160.07620239]
[40.46118546 176.15969849]
[24.84661484 181.17140198]
[12.88249207 169.95570374]
[16.87648392 154.05035400]
[32.71991348 149.81741333]
[42.97870636 138.87405396]
[53.23749542 127.93068695]
[63.49628830 116.98731995]
[63.09302521 109.49816895]
[48.84355927 114.18354797]
[34.59409714 118.86892700]
[21.65512848 126.45728302]
[6.82818747 124.18532562]
[-3.24489975 113.07078552]
[-4.05182409 98.09250641]
[4.76888132 85.96010590]
[19.26592064 82.10837555]
[32.94610596 88.26354980]
[47.61630249 91.39170837]
[62.28649902 94.51986694]
[61.88323212 87.03071594]
[50.50864792 77.25223541]
[39.13405991 67.47374725]
[27.75947189 57.69526291]
[16.28034019 48.03971863]
[4.69799137 38.50823593]
[-6.88435745 28.97675133]
[-21.82767105 32.71888351]
[-35.94413376 27.01109695]
[-43.89874268 14.23658276]
[-42.81881714 -0.59486234]
[-54.40116501 -10.12634659]
[-65.98351288 -19.65783119]
[-77.56586456 -29.18931580]
[-93.26991272 -27.41211128]
[-105.57878876 -37.32508469]
[-107.18986511 -53.04704285]
[-97.14730835 -65.25042725]
[-81.40919495 -66.69519043]
[-69.31266785 -56.52417374]
[-68.03437805 -40.77166367]
[-56.45203018 -31.24018097]
[-44.86968231 -21.70869637]
[-33.28733063 -12.17721081]
[-18.94097328 -16.09128380]
[-4.87438297 -10.74385166]
[3.44344234 2.01025271]
[2.64712691 17.39440155]
[14.22947598 26.92588615]
[25.81182480 36.45737076]
[33.02753067 38.29229736]
[37.53795624 46.32067490]
[48.91254425 56.09916306]
[60.28713226 65.87764740]
[71.66172028 75.65612793]
[84.38390350 71.87034607]
[95.90025330 73.32485199]
[97.83148193 58.44969177]
[99.76270294 43.57453537]
[95.80593872 27.08876991]
[110.55209351 18.72292900]
[122.67314148 30.57690239]
[114.63786316 45.50575638]
[112.70663452 60.38091660]
[110.77541351 75.25607300]
[123.58801270 81.82337952]
[132.18896484 95.03598022]
[144.17065430 86.01161957]
[156.15234375 76.98725891]
[168.13403320 67.96289825]
[180.11573792 58.93853378]
[192.09742737 49.91417313]
[204.07911682 40.88981247]
[216.06080627 31.86544991]
[228.04249573 22.84108925]
[227.64076233 7.32921600]
[236.46112061 -5.43718147]
[251.11196899 -10.54916191]
[265.95974731 -6.04106426]
[275.29519653 6.35365534]
[275.52862549 21.86897469]
[266.57031250 34.53893661]
[251.86486816 39.49168396]
[237.06684875 34.82278061]
[225.08515930 43.84714127]
[213.10346985 52.87150192]
[201.12178040 61.89586258]
[189.14009094 70.92022705]
[177.15840149 79.94458771]
[165.17671204 88.96894836]
[153.19502258 97.99330902]
[141.21333313 107.01766968]
[156.05476379 104.84237671]
[170.89619446 102.66708374]
[183.57449341 94.65079498]
[197.76676941 89.79493713]
[212.69841003 88.36451721]
[227.55445862 90.43762207]
[241.52407837 95.90109253]
[253.84483337 104.45674896]
[263.84423828 115.63761902]
[270.97656250 128.83345032]
[274.85247803 143.32403564]
[275.26049805 158.31849670]
[272.17831421 172.99841309]
[265.77416992 186.56259155]
[256.39758301 198.27069092]
[244.56034851 207.48370361]
[230.90849304 213.69879150]
[216.18716431 216.57672119]
[201.19982910 215.96041870]
[186.76449585 211.88354492]
[173.66902161 204.56858826]
[162.62815857 194.41481018]
[154.24450684 181.97637939]
[148.97564697 167.93218994]
[147.10913086 153.04821777]
[139.35807800 140.20605469]
[131.60702515 127.36389160]
[132.25234985 142.35000610]
[132.89768982 157.33612061]
[133.54301453 172.32221985]
[134.18835449 187.30833435]
[143.17347717 196.62782288]
[143.36360168 209.17005920]
[135.20425415 218.16175842]
[135.52700806 233.15829468]
[147.11212158 243.90820312]
[147.61920166 259.70434570]
[136.74740601 271.17517090]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 142]
[4 141]
[6 138]
[7 137]
[8 136]
[9 135]
[10 134]
[12 23]
[13 22]
[14 21]
[15 20]
[36 70]
[37 69]
[38 68]
[39 67]
[40 65]
[41 64]
[42 63]
[46 59]
[47 58]
[48 57]
[49 56]
[72 80]
[73 79]
[74 78]
[82 107]
[83 106]
[84 105]
[85 104]
[86 103]
[87 102]
[88 101]
[89 100]
[90 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
