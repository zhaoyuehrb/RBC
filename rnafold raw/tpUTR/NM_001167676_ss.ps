%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 08:30:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGCCUGCUCCCUGCGGCUCCGCGGGAGCUGGGCGGGAACGAGGCCCCCAGCGGGCCACCACGCUGAGGUCGCAUGCGCCGAGCACGAGACAAUGAUGCACAUUUUAAAAUAAAAGAAUGAUGCACAUUUUAAUAAAGCACAGCACAAACUGUUCUUUCCA\
) } def
/len { sequence length } bind def

/coor [
[55.03700256 216.85742188]
[41.16926193 222.57456970]
[27.95882034 215.46934509]
[25.08420563 200.74755859]
[14.47760391 211.35417175]
[3.87100196 221.96076965]
[-6.73559952 232.56736755]
[-17.34220123 243.17396545]
[-27.84672737 253.88166809]
[-38.24821472 264.68951416]
[-48.64970398 275.49731445]
[-59.05118942 286.30514526]
[-69.45267487 297.11297607]
[-79.85416412 307.92080688]
[-83.57396698 316.31576538]
[-90.55991364 318.83361816]
[-101.16651917 329.44021606]
[-111.77311707 340.04681396]
[-115.49256897 356.01858521]
[-131.26074219 360.52377319]
[-142.85668945 348.92782593]
[-138.35150146 333.15966797]
[-122.37972260 329.44021606]
[-111.77311707 318.83361816]
[-101.16651917 308.22702026]
[-90.66198730 297.51931763]
[-80.26049805 286.71148682]
[-69.85901642 275.90365601]
[-59.45752716 265.09582520]
[-49.05603790 254.28800964]
[-38.65455246 243.48019409]
[-36.27096939 236.44729614]
[-27.94880295 232.56736755]
[-17.34220123 221.96076965]
[-6.73559952 211.35417175]
[3.87100196 200.74755859]
[14.47760391 190.14096069]
[24.56428719 179.03875732]
[34.10792542 167.46643066]
[43.65156174 155.89408875]
[53.19519806 144.32174683]
[55.32358551 129.58000183]
[70.07308197 123.85611725]
[79.61672211 112.28377533]
[76.19891357 97.67834473]
[62.51136398 91.54231262]
[48.82381058 85.40628815]
[35.13625336 79.27025604]
[21.44869995 73.13422394]
[6.00506306 77.47860718]
[-6.93581820 67.99635315]
[-7.44680738 51.96144104]
[4.86408329 41.67448044]
[20.55299187 45.02674866]
[27.58473015 59.44667435]
[41.27228546 65.58270264]
[54.95983887 71.71873474]
[68.64739227 77.85475922]
[82.33494568 83.99079132]
[87.75675201 81.25160217]
[93.36263275 80.13571930]
[98.70558929 80.54730225]
[103.40110779 82.27577209]
[107.15458679 85.02152252]
[109.77981567 88.42765808]
[120.58763885 78.02616882]
[131.39546204 67.62467957]
[125.11189270 49.65198898]
[129.18528748 30.41895294]
[143.06271362 15.63071632]
[163.19268799 10.00893593]
[163.19268799 -4.99106407]
[163.19268799 -19.99106407]
[155.45538330 -33.79123688]
[163.19268799 -46.51850891]
[155.45538330 -60.31867981]
[163.19268799 -73.04595184]
[163.19268799 -88.04595184]
[163.19268799 -103.04595184]
[152.91091919 -115.36117554]
[156.26979065 -131.04867554]
[170.69268799 -138.07432556]
[185.11557007 -131.04867554]
[188.47445679 -115.36117554]
[178.19268799 -103.04595184]
[178.19268799 -88.04595184]
[178.19268799 -73.04595184]
[185.92997742 -60.31867981]
[178.19268799 -46.51850891]
[185.92997742 -33.79123688]
[178.19268799 -19.99106407]
[178.19268799 -4.99106407]
[178.19268799 10.00893593]
[190.70449829 18.28266525]
[204.50708008 12.40994453]
[218.30964661 6.53722477]
[232.11222839 0.66450429]
[238.82183838 -5.60394335]
[246.23588562 -5.18570614]
[260.14843750 -10.79296207]
[274.06097412 -16.40021896]
[287.97351074 -22.00747490]
[301.83169556 -27.74772644]
[315.63427734 -33.62044525]
[329.43685913 -39.49316788]
[343.23941040 -45.36588669]
[357.04199219 -51.23860550]
[370.84457397 -57.11132812]
[374.19091797 -72.26328278]
[385.82656860 -82.52931976]
[401.27734375 -83.96193695]
[414.60217285 -76.01026917]
[420.67733765 -61.73189545]
[417.16680908 -46.61713791]
[405.42050171 -36.47792816]
[389.95507812 -35.21300125]
[376.71728516 -43.30875015]
[362.91473389 -37.43602753]
[349.11215210 -31.56330872]
[335.30957031 -25.69058800]
[321.50698853 -19.81786728]
[307.70440674 -13.94514751]
[302.75762939 -8.40688515]
[293.58074951 -8.09493732]
[279.66821289 -2.48768139]
[265.75567627 3.11957455]
[251.84313965 8.72683048]
[237.98495483 14.46708202]
[224.18237305 20.33980179]
[210.37979126 26.21252251]
[196.57720947 32.08524323]
[199.69395447 44.45608521]
[198.68278503 56.98468018]
[193.77142334 68.35015106]
[185.59234619 77.39318085]
[175.10394287 83.23406982]
[163.47927856 85.35769653]
[151.97529602 83.65713501]
[141.79695129 78.43250275]
[130.98912048 88.83399200]
[120.18130493 99.23548126]
[118.60385132 114.15230560]
[126.99703979 126.58429718]
[135.39022827 139.01628113]
[143.78341675 151.44827271]
[159.34437561 154.21084595]
[168.32559204 167.21520996]
[165.39866638 182.74609375]
[152.30007935 191.58932495]
[136.80099487 188.49835205]
[128.09675598 175.30699158]
[131.35142517 159.84146118]
[122.95823669 147.40946960]
[114.56504822 134.97747803]
[106.17185974 122.54549408]
[91.18905640 121.82741547]
[81.64542389 133.39974976]
[78.83441162 148.96923828]
[64.76753235 153.86538696]
[55.22389984 165.43772888]
[45.68026352 177.01005554]
[36.13662338 188.58239746]
[51.06602097 190.03605652]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 37]
[5 36]
[6 35]
[7 34]
[8 33]
[9 31]
[10 30]
[11 29]
[12 28]
[13 27]
[14 26]
[16 25]
[17 24]
[18 23]
[38 162]
[39 161]
[40 160]
[41 159]
[43 157]
[44 156]
[45 59]
[46 58]
[47 57]
[48 56]
[49 55]
[65 141]
[66 140]
[67 139]
[71 93]
[72 92]
[73 91]
[75 89]
[77 87]
[78 86]
[79 85]
[94 131]
[95 130]
[96 129]
[97 128]
[99 127]
[100 126]
[101 125]
[102 124]
[103 122]
[104 121]
[105 120]
[106 119]
[107 118]
[108 117]
[142 155]
[143 154]
[144 153]
[145 152]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
