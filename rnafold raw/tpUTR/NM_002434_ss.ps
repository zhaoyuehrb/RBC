%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 13:30:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAAAGGGCCUGCCCAGACAAGAUUUUUUAAUUGUUUAAAAACCGAAUAAAUGUUUUAUUUCUAGAAAACUGUG\
) } def
/len { sequence length } bind def

/coor [
[91.43224335 145.74700928]
[82.76818085 143.62603760]
[74.60269928 139.86700439]
[67.24485779 134.58325195]
[60.97858429 127.94626617]
[56.05171967 120.18021393]
[44.49401855 129.74157715]
[32.93632126 139.30293274]
[27.73029709 154.85379028]
[11.60812855 157.85507202]
[1.15491879 145.21931458]
[7.12403440 129.94509888]
[23.37495995 127.74523163]
[34.93265915 118.18387604]
[46.49035645 108.62251282]
[46.17621994 93.62580109]
[34.22827148 84.55681610]
[22.28032494 75.48783112]
[10.33237553 66.41883850]
[-1.61557329 57.34985352]
[-13.56352234 48.28086853]
[-27.69103241 54.30656433]
[-42.93672562 52.44528580]
[-55.19959259 43.19770813]
[-61.18097687 29.05137825]
[-59.27191925 13.81159210]
[-49.98594666 1.57777512]
[-35.82093811 -4.35923815]
[-20.58721161 -2.40242076]
[-8.38256073 6.92185354]
[-2.48997712 21.10540199]
[-4.49453545 36.33292007]
[7.45341349 45.40190506]
[19.40136147 54.47089386]
[31.34931183 63.53987885]
[43.29726028 72.60886383]
[55.24520874 81.67785645]
[59.69215393 73.73481750]
[65.52241516 66.80522156]
[72.51464081 61.12466049]
[80.40842438 56.88188553]
[88.91400909 54.21253586]
[97.72290039 53.19486618]
[106.51907349 53.84756851]
[114.99028015 56.12972260]
[122.83913422 59.94288254]
[129.79359436 65.13518524]
[135.61631775 71.50735474]
[140.11279297 78.82028198]
[143.13780212 86.80398560]
[144.60008240 95.16757202]
[144.46490479 103.60980988]
[142.75480652 111.83000183]
[156.32720947 118.21669769]
[169.89961243 124.60338593]
[183.47201538 130.99006653]
[197.04441833 137.37675476]
[210.57675171 129.78363037]
[225.98381042 131.62818909]
[237.34124756 142.20117188]
[240.28192139 157.43705750]
[233.67507935 171.47732544]
[220.06117249 178.92321777]
[204.67503357 176.91162109]
[193.43295288 166.21604919]
[190.65773010 150.94917297]
[177.08532715 144.56248474]
[163.51292419 138.17579651]
[149.94052124 131.78909302]
[136.36810303 125.40241241]
[131.13618469 132.10678101]
[124.67226410 137.73904419]
[117.19510651 142.07371521]
[108.96450806 144.92977905]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 15]
[7 14]
[8 13]
[16 37]
[17 36]
[18 35]
[19 34]
[20 33]
[21 32]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
