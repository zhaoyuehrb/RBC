%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 19:23:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCACUGCCCAUGAUGCAGAGCUUUCAAGGAUAGGCUUUAUUCUGCAAGCAAUCAAAUAAUAAAUCUAUUCUGCUAAGAGAUCAC\
) } def
/len { sequence length } bind def

/coor [
[67.69108582 137.28385925]
[56.25865936 146.99465942]
[44.82622910 156.70544434]
[33.39379883 166.41624451]
[30.66742706 172.85398865]
[25.75646973 176.26461792]
[20.76798439 176.37887573]
[8.66464520 185.23942566]
[-3.43869281 194.09996033]
[-4.29257393 209.71421814]
[-15.02100277 221.09115601]
[-30.55834389 222.85894775]
[-43.56833649 214.18289185]
[-47.90806580 199.15954590]
[-41.52843857 184.88249207]
[-27.44172287 178.09289551]
[-12.29923439 181.99662781]
[-0.19589651 173.13607788]
[11.90744209 164.27554321]
[23.68300247 154.98381042]
[35.11543274 145.27302551]
[46.54786301 135.56222534]
[57.98029709 125.85143280]
[51.10043335 106.54099274]
[52.66315842 86.10124207]
[62.39865875 68.06113434]
[78.62609100 55.53531647]
[98.54375458 50.68639755]
[118.71284485 54.35154343]
[126.44615173 41.49868774]
[134.17945862 28.64583015]
[141.91276550 15.79297161]
[149.64607239 2.94011402]
[157.37937927 -9.91274357]
[165.11270142 -22.76560211]
[172.84600830 -35.61845779]
[174.65872192 -44.81408691]
[181.09767151 -48.78858185]
[189.28994751 -61.35387039]
[197.48223877 -73.91915894]
[205.67453003 -86.48444366]
[213.86680603 -99.04972839]
[222.05909729 -111.61502075]
[222.00885010 -131.61643982]
[239.24655151 -140.06427002]
[246.51080322 -153.18794250]
[239.82278442 -167.18972778]
[242.67518616 -182.44238281]
[253.97123718 -193.08094788]
[269.36734009 -195.01467896]
[282.94342041 -187.50001526]
[289.47915649 -173.42651367]
[286.46145630 -158.20570374]
[275.05065918 -147.69029236]
[259.63449097 -145.92369080]
[252.37022400 -132.80003357]
[256.12896729 -122.99481964]
[253.69572449 -112.55107880]
[245.66400146 -105.11430359]
[234.62438965 -103.42273712]
[226.43209839 -90.85744476]
[218.23980713 -78.29216003]
[210.04753113 -65.72686768]
[201.85523987 -53.16158295]
[193.66294861 -40.59629440]
[185.69885254 -27.88515091]
[177.96554565 -15.03229332]
[170.23223877 -2.17943573]
[162.49893188 10.67342186]
[154.76562500 23.52627945]
[147.03231812 36.37913895]
[139.29901123 49.23199463]
[131.56570435 62.08485413]
[138.79910278 69.52736664]
[144.31547546 78.31843567]
[147.87069702 88.06900024]
[149.30741882 98.34757233]
[148.56207275 108.69927216]
[145.66763306 118.66598511]
[140.75221252 127.80664825]
[134.03330994 135.71675110]
[125.80828857 142.04621887]
[116.44113922 146.51495361]
[106.34639740 148.92520142]
[95.97079468 149.17028809]
[85.77349854 147.23937988]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[4 20]
[7 19]
[8 18]
[9 17]
[29 73]
[30 72]
[31 71]
[32 70]
[33 69]
[34 68]
[35 67]
[36 66]
[38 65]
[39 64]
[40 63]
[41 62]
[42 61]
[43 60]
[45 56]
[46 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
