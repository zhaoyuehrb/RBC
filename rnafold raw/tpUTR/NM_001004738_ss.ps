%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 09:02:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGAUUUUAUUAGCACAAUUCAGGAUUCCCAAGUAGUGGCAGGCGGGGGUUCACGGGAGAGGCACAGUGUUG\
) } def
/len { sequence length } bind def

/coor [
[85.64719391 269.09869385]
[70.57978058 269.58505249]
[55.83395004 266.45071411]
[42.26700974 259.87792969]
[30.66771698 250.24882507]
[21.71044159 238.12319946]
[15.91594982 224.20603943]
[13.62112331 209.30647278]
[14.95938206 194.29072571]
[19.85292053 180.03181458]
[28.01723480 167.35871887]
[38.97766113 157.00823975]
[52.09697723 149.58213806]
[66.61244202 145.51216125]
[81.68014526 145.03492737]
[84.79882050 130.36271667]
[83.05707550 122.94926453]
[88.36755371 115.14735413]
[81.08232117 102.62251282]
[84.68571472 88.58821106]
[97.10369873 81.12229919]
[100.83405304 66.59355164]
[104.56439972 52.06480026]
[98.05842590 33.19839096]
[111.53868103 19.58781242]
[114.04021454 4.79787254]
[116.54174805 -9.99206829]
[119.04327393 -24.78200912]
[121.54480743 -39.57194901]
[124.04634094 -54.36188889]
[126.54786682 -69.15183258]
[129.04940796 -83.94177246]
[126.96183777 -90.72436523]
[128.59031677 -96.56286621]
[132.42927551 -99.84280396]
[136.15962219 -114.37155151]
[126.16527557 -126.24137115]
[125.09017181 -141.72116089]
[133.34770203 -154.85861206]
[147.76269531 -160.60211182]
[162.79226685 -156.74317932]
[172.65725708 -144.76564026]
[173.56437683 -129.27510071]
[165.16481018 -116.22799683]
[150.68836975 -110.64120483]
[146.95802307 -96.11245728]
[143.83934021 -81.44023895]
[141.33781433 -66.65029907]
[138.83627319 -51.86035919]
[136.33474731 -37.07041931]
[133.83322144 -22.28047752]
[131.33168030 -7.49053669]
[128.83015442 7.29940367]
[126.32862091 22.08934402]
[133.16720581 30.15919113]
[134.29646301 40.90102386]
[129.07431030 50.61003113]
[119.09314728 55.79515076]
[115.36280060 70.32389832]
[111.63244629 84.85264587]
[118.91767883 97.37748718]
[115.31428528 111.41178894]
[102.89630127 118.87770081]
[99.47103882 133.48138428]
[96.35236359 148.15359497]
[109.92328644 154.71815491]
[121.52841187 164.34024048]
[130.49304199 176.46043396]
[136.29595947 190.37406921]
[138.59982300 205.27224731]
[137.27067566 220.28880310]
[132.38577271 234.55067444]
[124.22914886 247.22872925]
[113.27499390 257.58584595]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 65]
[16 64]
[18 63]
[21 60]
[22 59]
[23 58]
[25 54]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[35 46]
[36 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
