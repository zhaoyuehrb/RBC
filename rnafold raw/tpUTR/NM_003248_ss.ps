%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 10:49:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAAGGAAGCAAUCUGUAACUGCUUUUCGGAACACUAAAACCAUAUAUAUUUUAACUUCAAUUUUCUUUAGCUUUUACCAACCCAAAUAUAUCAAAACGUUUUAUGUGAAUGUGGCAAUAAAGGAGAAGAGAUCAUUUUUAA\
) } def
/len { sequence length } bind def

/coor [
[-139.11772156 278.97680664]
[-156.57402039 268.26596069]
[-166.46420288 279.54357910]
[-166.41091919 292.49105835]
[-174.94393921 301.68798828]
[-187.05757141 302.54534912]
[-197.19142151 313.60449219]
[-207.32528687 324.66366577]
[-217.45913696 335.72280884]
[-227.59298706 346.78198242]
[-237.72683716 357.84112549]
[-247.86068726 368.90029907]
[-243.82759094 383.79116821]
[-248.50712585 398.49166870]
[-260.40606689 408.31100464]
[-275.72747803 410.11578369]
[-289.58239746 403.33013916]
[-297.54974365 390.11935425]
[-297.08718872 374.69894409]
[-288.34228516 361.98947144]
[-274.10556030 356.04650879]
[-258.91986084 358.76644897]
[-248.78599548 347.70727539]
[-238.65214539 336.64813232]
[-228.51829529 325.58895874]
[-218.38444519 314.52981567]
[-208.25059509 303.47064209]
[-198.11672974 292.41146851]
[-195.28759766 275.12478638]
[-177.74180603 269.65338135]
[-167.85162354 258.37579346]
[-175.05265808 250.28811646]
[-181.37518311 241.49552917]
[-186.75064087 232.09304810]
[-191.12072754 222.18229675]
[-194.43800354 211.87042236]
[-196.66641235 201.26892090]
[-197.78167725 190.49246216]
[-197.77154541 179.65760803]
[-196.63597107 168.88156128]
[-194.38705444 158.28091431]
[-191.04895020 147.97039795]
[-186.65760803 138.06161499]
[-181.26036072 128.66181946]
[-174.91545105 119.87278748]
[-167.69137573 111.78971100]
[-159.66616821 104.50014496]
[-150.92649841 98.08309174]
[-141.56683350 92.60810852]
[-131.68833923 88.13458252]
[-121.39781189 84.71106720]
[-110.80651093 82.37476349]
[-100.02897644 81.15112305]
[-89.18179321 81.05355072]
[-78.38230896 82.08329773]
[-67.74736023 84.22937775]
[-57.39203644 87.46875763]
[-47.42842484 91.76657104]
[-37.96437836 97.07646179]
[-29.10237122 103.34116364]
[-20.93837547 110.49303436]
[-13.56082726 118.45483398]
[-7.04966879 127.14056396]
[-1.47548103 136.45634460]
[12.25419140 130.41514587]
[25.98386383 124.37394714]
[39.71353531 118.33274841]
[53.44320679 112.29154968]
[67.17288208 106.25034332]
[80.90254974 100.20914459]
[86.25178528 86.74319458]
[99.51421356 80.90758514]
[113.05624390 86.06118011]
[126.78591919 80.01998138]
[140.51559448 73.97878265]
[154.24526978 67.93758392]
[160.36680603 50.07152557]
[177.28169250 42.41179657]
[194.16029358 49.35541534]
[207.61338806 42.72108459]
[221.06648254 36.08675385]
[220.39884949 21.92942238]
[225.17652893 8.63202190]
[234.64331055 -1.79881728]
[247.33804321 -7.80253553]
[261.32015991 -8.49807167]
[274.46627808 -3.81300998]
[284.79263306 5.51045322]
[298.38723755 -0.82882077]
[311.98187256 -7.16809464]
[325.57647705 -13.50736904]
[339.17108154 -19.84664345]
[339.82632446 -35.13811874]
[347.52279663 -48.36772919]
[360.49197388 -56.49539948]
[375.75363159 -57.65345383]
[389.80068970 -51.57578278]
[399.40530396 -39.65898514]
[402.36038208 -24.64145660]
[397.98684692 -9.97411633]
[387.28973389 0.97259021]
[372.72717285 5.68318939]
[357.64547729 3.07522011]
[345.51037598 -6.25202560]
[331.91574097 0.08724821]
[318.32113647 6.42652225]
[304.72650146 12.76579571]
[291.13189697 19.10507011]
[291.24880981 35.04946899]
[284.39215088 49.50898361]
[271.88223267 59.58144379]
[256.17956543 63.22093964]
[240.40095520 59.65324402]
[227.70080566 49.53984451]
[214.24771118 56.17417526]
[200.79461670 62.80850601]
[199.53448486 74.23645782]
[192.81666565 83.71479034]
[182.23439026 88.79360962]
[170.39694214 88.09109497]
[160.28646851 81.66725159]
[146.55679321 87.70845032]
[132.82711792 93.74965668]
[119.09745026 99.79085541]
[113.74821472 113.25680542]
[100.48578644 119.09241486]
[86.94375610 113.93881989]
[73.21408081 119.98001862]
[59.48440933 126.02121735]
[45.75473404 132.06242371]
[32.02506256 138.10362244]
[18.29539108 144.14482117]
[4.56571913 150.18601990]
[9.50708675 170.11180115]
[10.45226765 190.61526489]
[7.36628866 210.90307617]
[0.37012923 230.19050598]
[-10.26401901 247.73182678]
[-24.12334442 262.84921265]
[-40.67043686 274.95880127]
[-59.26412582 283.59335327]
[-79.18433380 288.42028809]
[-99.65994263 289.25433350]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[6 28]
[7 27]
[8 26]
[9 25]
[10 24]
[11 23]
[12 22]
[64 133]
[65 132]
[66 131]
[67 130]
[68 129]
[69 128]
[70 127]
[73 124]
[74 123]
[75 122]
[76 121]
[79 116]
[80 115]
[81 114]
[88 108]
[89 107]
[90 106]
[91 105]
[92 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
