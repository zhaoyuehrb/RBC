%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:40:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCCAGUCCGUGUCUCCCCUACCUCCCUCAGUUGUUGCACAGGGACCCCCAAGCAUCCCCAGCACCCCCCGUGAGUGACCAGACCCUCCCCUGCUGCCCCUGCUGCCCCUGCUGCCCCUGCUCUGUCCCGGGACCCCCUGGCCUGGCGCUGUCCCCUGAGCUGUCCCAUUAAACAUGGCCCUGUCUC\
) } def
/len { sequence length } bind def

/coor [
[49.71611786 665.53167725]
[36.55197906 657.61962891]
[29.12157631 644.17773438]
[29.42365456 628.82177734]
[37.37695312 615.68249512]
[50.84207916 608.29425049]
[51.09008789 593.29632568]
[51.33809662 578.29840088]
[41.99870682 563.45001221]
[51.57565689 547.73193359]
[51.57565689 532.73193359]
[51.57565689 517.73193359]
[51.57565689 502.73193359]
[51.57565689 487.73193359]
[51.57565689 472.73193359]
[37.39067841 469.68310547]
[24.14797783 463.74035645]
[12.43103886 455.16278076]
[2.75669718 444.32556152]
[-4.44765806 431.70370483]
[-8.86296082 417.85104370]
[-10.29260349 403.37609863]
[-8.67118454 388.91528320]
[-4.06750011 375.10485840]
[3.31837106 362.55310059]
[13.16376495 351.81329346]
[25.03752327 343.35955811]
[38.41888046 337.56573486]
[52.72030258 334.68899536]
[52.96831131 319.69104004]
[53.21632004 304.69308472]
[53.46432877 289.69515991]
[53.71233749 274.69720459]
[44.52309418 286.55291748]
[30.67899513 292.32705688]
[15.78891468 290.51446533]
[3.73439646 281.58761597]
[-2.34219074 267.87356567]
[-0.85680443 252.94729614]
[7.80334568 240.69976807]
[21.38073349 234.32368469]
[36.33600998 235.48114014]
[48.77063751 243.87042236]
[55.44339371 257.30575562]
[58.15660477 242.55317688]
[60.86981201 227.80059814]
[63.58301926 213.04803467]
[66.29622650 198.29545593]
[52.61027908 204.43505859]
[39.20011902 197.71438599]
[35.92747498 183.07574463]
[45.19902802 171.28428650]
[60.19654465 171.01136780]
[69.89121246 182.45860291]
[73.81340790 167.98046875]
[77.73561096 153.50234985]
[73.59542084 139.19471741]
[84.67200470 127.89781952]
[88.59420013 113.41968536]
[82.92698669 95.67652893]
[96.35596466 82.76918030]
[99.79732513 68.16928101]
[103.23867798 53.56938171]
[106.68003845 38.96948242]
[94.89670563 29.33027077]
[88.49311829 15.58687210]
[88.69083405 0.48782969]
[95.39707947 -12.97275162]
[107.23377228 -22.14892387]
[121.82034302 -25.26297569]
[125.26170349 -39.86287308]
[128.70306396 -54.46277237]
[132.14442444 -69.06267548]
[127.77959442 -84.26986694]
[138.23045349 -94.88253784]
[141.67181396 -109.48243713]
[133.62205505 -122.81807709]
[137.32006836 -137.57542419]
[150.08316040 -145.16744995]
[153.52452087 -159.76734924]
[149.15969849 -174.97454834]
[159.61054993 -185.58721924]
[163.05191040 -200.18711853]
[166.49327087 -214.78701782]
[152.68995667 -222.14936829]
[141.26475525 -232.81953430]
[132.98910522 -246.06916809]
[128.41973877 -260.99609375]
[127.86125183 -276.58560181]
[131.34579468 -291.77951050]
[138.63130188 -305.54803467]
[149.21827698 -316.95944214]
[162.38400269 -325.24322510]
[177.23194885 -329.84207153]
[192.75279236 -330.44940186]
[195.95228577 -345.10421753]
[191.33662415 -360.23715210]
[201.61058044 -371.02117920]
[204.81007385 -385.67599487]
[199.31570435 -401.12731934]
[210.15428162 -413.43411255]
[226.17604065 -409.93615723]
[230.89913940 -394.23190308]
[219.46487427 -382.47647095]
[216.26538086 -367.82168579]
[221.10990906 -353.73693848]
[210.60708618 -341.90472412]
[207.40759277 -327.24990845]
[220.32044983 -320.85974121]
[231.33070374 -311.55261230]
[239.79254150 -299.86846924]
[245.20819092 -286.48693848]
[247.25720215 -272.18765259]
[245.81544495 -257.80490112]
[240.96258545 -244.17900085]
[232.97770691 -232.10708618]
[222.32327271 -222.29655457]
[209.61833191 -215.32359314]
[195.60255432 -211.59934998]
[181.09317017 -211.34565735]
[177.65180969 -196.74575806]
[174.21044922 -182.14585876]
[178.82142639 -167.98294067]
[168.12442017 -156.32598877]
[164.68305969 -141.72608948]
[172.71191406 -129.23316956]
[169.42987061 -114.37777710]
[156.27171326 -106.04107666]
[152.83035278 -91.44117737]
[157.44132996 -77.27826691]
[146.74432373 -65.62131500]
[143.30296326 -51.02141571]
[139.86160278 -36.42151642]
[136.42024231 -21.82161713]
[148.08052063 -12.52089119]
[154.57299805 0.97567117]
[154.56166077 16.01431656]
[147.99519348 29.61217499]
[136.12779236 39.04889679]
[121.27993774 42.41084290]
[117.83857727 57.01074219]
[114.39722443 71.61064148]
[110.95586395 86.21054077]
[116.68604279 94.36474609]
[117.07301331 104.32347107]
[111.99285126 112.89773560]
[103.07233429 117.34188080]
[99.15013885 131.82002258]
[103.00978088 147.16320801]
[92.21374512 157.42454529]
[88.29154205 171.90267944]
[84.36934662 186.38081360]
[81.04880524 201.00866699]
[78.33559418 215.76123047]
[75.62239075 230.51380920]
[72.90917969 245.26638794]
[70.19596863 260.01895142]
[68.71028900 274.94522095]
[68.46228027 289.94314575]
[68.21427155 304.94110107]
[67.96626282 319.93905640]
[67.71825409 334.93701172]
[82.80836487 338.60424805]
[96.70253754 345.52493286]
[108.70961761 355.35131836]
[118.23307037 367.59124756]
[124.80064392 381.63272095]
[128.08779907 396.77453613]
[127.93368530 412.26132202]
[124.34909058 427.32116699]
[117.51568604 441.20419312]
[107.77684784 453.21969604]
[95.62040710 462.77078247]
[81.65419006 469.38381958]
[66.57565308 472.73193359]
[66.57565308 487.73193359]
[66.57565308 502.73193359]
[66.57565308 517.73193359]
[66.57565308 532.73193359]
[66.57565308 547.73193359]
[75.13346100 557.39782715]
[74.81454468 569.90264893]
[66.33604431 578.54638672]
[66.08803558 593.54431152]
[65.84002686 608.54229736]
[79.05351257 616.37170410]
[86.56803894 629.76672363]
[86.36222839 645.12426758]
[78.49145508 658.31311035]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 185]
[7 184]
[8 183]
[10 180]
[11 179]
[12 178]
[13 177]
[14 176]
[15 175]
[29 162]
[30 161]
[31 160]
[32 159]
[33 158]
[44 157]
[45 156]
[46 155]
[47 154]
[48 153]
[54 152]
[55 151]
[56 150]
[58 148]
[59 147]
[61 143]
[62 142]
[63 141]
[64 140]
[70 134]
[71 133]
[72 132]
[73 131]
[75 129]
[76 128]
[79 125]
[80 124]
[82 122]
[83 121]
[84 120]
[95 108]
[96 107]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
