%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 21:22:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGCCUCCUCCCUCCCGAGACAAGAUCAUCUGCCUGGCCUCUCACCACCACCAUCCCACCCCUGCCCUGCCCCACUUCCCCAGGGUCUCCCUUCUGACUCAGUAAAGAUCACCGCUGCCUCCCCCCGCA\
) } def
/len { sequence length } bind def

/coor [
[107.93303680 171.04608154]
[107.77416229 166.90969849]
[109.12340546 162.54214478]
[105.21216583 148.06103516]
[101.30093384 133.57994080]
[97.02794647 133.47344971]
[92.80303192 132.82542419]
[88.69455719 131.64634705]
[84.76897430 129.95530701]
[75.15781403 141.47163391]
[65.54665375 152.98794556]
[67.21547699 168.70387268]
[57.21782303 180.94407654]
[41.48512268 182.44665527]
[29.35130882 172.32014465]
[28.01515579 156.57243347]
[38.26938248 144.54637146]
[54.03033447 143.37678528]
[63.64149475 131.86045837]
[73.25265503 120.34414673]
[67.25756073 107.56554413]
[67.03894806 93.45220947]
[72.63537598 80.49404907]
[83.05952454 70.97716522]
[96.47233582 66.58053589]
[98.26665497 51.68824387]
[100.06096649 36.79595184]
[101.85528564 21.90365601]
[81.33917999 11.46951675]
[66.88967133 -6.39194155]
[60.99271393 -28.55243492]
[64.64025116 -51.14894867]
[77.16357422 -70.25712585]
[68.11561584 -82.22100067]
[52.71073151 -84.52912903]
[43.70524597 -96.79109955]
[46.00062561 -111.46307373]
[36.95266342 -123.42694855]
[27.90470314 -135.39082336]
[14.11593628 -129.31080627]
[-0.70341092 -126.57518005]
[-15.75414944 -127.33147430]
[-30.22461319 -131.53889465]
[-43.33442688 -138.97055054]
[-54.37659454 -149.22566223]
[-62.75562668 -161.75117493]
[-68.01965332 -175.87161255]
[-69.88478851 -190.82546997]
[-68.25045776 -205.80632019]
[-63.20478439 -220.00624084]
[-55.01988602 -232.65946960]
[-44.13715744 -243.08361816]
[-31.14349556 -250.71653748]
[-16.73962975 -255.14659119]
[-1.70234072 -256.13485718]
[13.15742683 -253.62806702]
[27.03830528 -247.76139832]
[39.19171524 -238.85121155]
[48.96224213 -227.37805176]
[55.82296753 -213.96063232]
[59.40390778 -199.32254028]
[59.51194382 -184.25320435]
[56.14125061 -169.56527710]
[49.47360611 -156.05085754]
[39.86858368 -144.43879700]
[48.91654205 -132.47491455]
[57.96450424 -120.51103210]
[72.70707703 -118.72440338]
[82.05342865 -106.72022247]
[80.07949066 -91.26896667]
[89.12744904 -79.30508423]
[95.45748138 -82.33091736]
[102.12258148 -84.52212524]
[109.01322174 -85.84269714]
[116.01618958 -86.27094269]
[123.01640320 -85.79981995]
[129.89883423 -84.43706512]
[136.55038452 -82.20507812]
[142.86175537 -79.14054108]
[148.72924805 -75.29379272]
[154.05644226 -70.72805786]
[158.75579834 -65.51836395]
[162.75010681 -59.75030136]
[165.97370911 -53.51866531]
[180.40687561 -57.60325623]
[194.84002686 -61.68784332]
[209.27319336 -65.77243042]
[223.70635986 -69.85701752]
[228.93739319 -84.46577454]
[241.77516174 -93.18194580]
[257.28323364 -92.65398407]
[269.49850464 -83.08489990]
[273.72387695 -68.15419769]
[268.33468628 -53.60305023]
[255.40312195 -45.02665710]
[239.90165710 -45.72282410]
[227.79093933 -55.42385864]
[213.35778809 -51.33927155]
[198.92462158 -47.25468063]
[184.49145508 -43.17009354]
[170.05830383 -39.08550644]
[170.36082458 -25.87592316]
[167.48712158 -12.96110535]
[161.59622192 -1.09457016]
[153.02340698 9.02925396]
[142.26123047 16.81567192]
[129.93112183 21.80464363]
[116.74757385 23.69797134]
[114.95326233 38.59026718]
[113.15895081 53.48255920]
[111.36463165 68.37485504]
[126.77528381 79.69264221]
[133.51818848 97.58436584]
[129.41053772 116.25808716]
[115.78203583 129.66870117]
[119.69326782 144.14981079]
[123.60449982 158.63090515]
[128.20553589 172.90782166]
[133.48577881 186.94773865]
[148.48165894 190.93560791]
[158.24342346 202.99743652]
[159.01747131 218.49519348]
[150.50616455 231.46968079]
[135.98228455 236.93193054]
[121.03054047 232.78163147]
[111.40019989 220.61460876]
[110.79431915 205.10937500]
[119.44586945 192.22798157]
[114.16562653 178.18806458]
[111.56024170 176.91854858]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 117]
[4 116]
[5 115]
[9 20]
[10 19]
[11 18]
[25 111]
[26 110]
[27 109]
[28 108]
[33 71]
[34 70]
[37 67]
[38 66]
[39 65]
[84 101]
[85 100]
[86 99]
[87 98]
[88 97]
[118 129]
[119 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
