%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 10:31:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCUGCAGAUCCAGUGGGGUCCGGACACUGGGCCCCGCAGGCGAAAGCACGUUCCAGCCACCAGGAGGCCACCUAUUGUUUCAAAAUAAAGACUGGGUUCCUCUCUUGGUUUCA\
) } def
/len { sequence length } bind def

/coor [
[61.23064041 113.95603180]
[46.42824173 116.38276672]
[31.62584496 118.80949402]
[16.82344818 121.23622131]
[2.02104974 123.66295624]
[-1.42696941 136.26049805]
[-9.39204693 146.55213928]
[-20.64058304 153.00260925]
[-33.45268250 154.66699219]
[-45.88509750 151.32907104]
[-56.06595993 143.52859497]
[-62.47661209 132.47433472]
[-77.38867950 134.09613037]
[-90.27140808 143.28013611]
[-103.76062012 136.96424866]
[-118.67269135 138.58602905]
[-133.58476257 140.20780945]
[-148.49682617 141.82960510]
[-163.40890503 143.45138550]
[-178.32096863 145.07316589]
[-193.23303223 146.69496155]
[-208.14511108 148.31674194]
[-223.05717468 149.93852234]
[-237.96923828 151.56031799]
[-252.88131714 153.18209839]
[-267.97387695 160.90550232]
[-279.57348633 148.54081726]
[-270.90310669 133.97164917]
[-254.50309753 138.27003479]
[-239.59103394 136.64823914]
[-224.67895508 135.02645874]
[-209.76689148 133.40467834]
[-194.85482788 131.78288269]
[-179.94274902 130.16110229]
[-165.03068542 128.53932190]
[-150.11860657 126.91753387]
[-135.20654297 125.29574585]
[-120.29447174 123.67396545]
[-105.38240814 122.05217743]
[-93.56629181 112.98416901]
[-79.01046753 119.18405151]
[-64.09839630 117.56227112]
[-57.81597137 101.65097809]
[-44.32054138 90.99574280]
[-27.21140671 88.55118561]
[-11.10867786 95.06684113]
[-0.40568012 108.86055756]
[14.39671803 106.43382263]
[29.19911575 104.00709534]
[44.00151443 101.58036804]
[58.80391312 99.15363312]
[60.74583435 87.47225189]
[65.92979431 76.82554626]
[73.92765045 68.09284210]
[84.07884216 61.99538422]
[95.54498291 59.03676224]
[107.37905884 59.46133423]
[118.60369873 63.23403168]
[128.29183960 70.04326630]
[135.64332581 79.32666016]
[140.05101013 90.31748199]
[155.02900696 89.50540161]
[170.00700378 88.69331360]
[184.98500061 87.88123322]
[199.96301270 87.06914520]
[214.94100952 86.25706482]
[229.91900635 85.44497681]
[244.89701843 84.63289642]
[259.86264038 83.61807251]
[270.07485962 71.85590363]
[285.25415039 70.83428192]
[296.40463257 80.64255524]
[311.35516357 79.42517090]
[326.30566406 78.20779419]
[341.25619507 76.99040985]
[356.20669556 75.77303314]
[362.03805542 72.22037506]
[367.89001465 72.24646759]
[371.99591064 74.91696167]
[386.99038696 74.51077271]
[401.98489380 74.10458374]
[416.97940063 73.69839478]
[425.64544678 60.82674408]
[440.23367310 55.53876877]
[455.13467407 59.86780167]
[464.61865234 72.14924622]
[465.03881836 87.66062927]
[456.23367310 100.43751526]
[441.58892822 105.56692505]
[426.73577881 101.07649231]
[417.38558960 88.69289398]
[402.39108276 89.09908295]
[387.39660645 89.50527191]
[372.40209961 89.91146088]
[357.42410278 90.72354889]
[342.47357178 91.94092560]
[327.52304077 93.15830994]
[312.57254028 94.37569427]
[297.62200928 95.59307098]
[288.20523071 107.07608032]
[273.06060791 108.52365112]
[261.08001709 98.56858826]
[254.58239746 102.29734039]
[245.70909119 99.61090088]
[230.73109436 100.42298126]
[215.75309753 101.23506165]
[200.77508545 102.04714966]
[185.79708862 102.85923004]
[170.81909180 103.67131805]
[155.84109497 104.48339844]
[140.86308289 105.29548645]
[134.61447144 122.35336304]
[121.63764954 135.06631470]
[104.45501709 140.96324158]
[86.40644073 138.89793396]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 51]
[2 50]
[3 49]
[4 48]
[5 47]
[12 42]
[13 41]
[15 39]
[16 38]
[17 37]
[18 36]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[25 29]
[61 111]
[62 110]
[63 109]
[64 108]
[65 107]
[66 106]
[67 105]
[68 104]
[69 102]
[72 99]
[73 98]
[74 97]
[75 96]
[76 95]
[79 94]
[80 93]
[81 92]
[82 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
