%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 18:57:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCCAGCGGGACACCCUGGUUCCCACCAUUCCCUGCCUUGCUGACAAUAAAGAUAUUUCCAAGAACCCGGCCCA\
) } def
/len { sequence length } bind def

/coor [
[183.57196045 229.64151001]
[179.19538879 215.25950623]
[177.18266296 200.36169434]
[177.58592224 185.33393860]
[180.39471436 170.56549072]
[185.53628540 156.43890381]
[172.44509888 149.11625671]
[159.35392761 141.79362488]
[146.26275635 134.47097778]
[133.17156982 127.14833069]
[120.08039856 119.82569122]
[106.98921967 112.50304413]
[93.00739288 112.50115204]
[85.68813324 100.58812714]
[72.59695435 93.26548767]
[56.64315796 101.36262512]
[39.13782501 98.50263977]
[26.80599403 85.96795654]
[24.27657127 68.72216034]
[10.63209057 62.49093628]
[-3.01238942 56.25971222]
[-16.65686989 50.02848434]
[-32.92144012 52.12511063]
[-42.65298843 38.92552948]
[-35.84053802 24.00833893]
[-19.49214935 22.71906662]
[-10.42564392 36.38400650]
[3.21883583 42.61523056]
[16.86331558 48.84645462]
[30.50779533 55.07768250]
[40.35185623 47.44655991]
[52.60232925 44.82053757]
[64.85178375 47.78061676]
[74.66477966 55.80359650]
[80.06206512 67.35327911]
[79.91960144 80.17430878]
[93.01078033 87.49695587]
[106.99260712 87.49884796]
[114.31186676 99.41187286]
[127.40304565 106.73451233]
[140.49421692 114.05715942]
[153.58538818 121.37979889]
[166.67657471 128.70243835]
[179.76774597 136.02508545]
[192.85891724 143.34773254]
[202.20535278 131.57316589]
[213.31961060 121.45043945]
[225.91381836 113.24177551]
[239.66174316 107.15979004]
[254.20729065 103.36201477]
[269.17370605 101.94683838]
[284.17330933 102.95089722]
[298.81756592 106.34819794]
[312.72717285 112.05073547]
[325.54183960 119.91079712]
[336.92962646 129.72479248]
[346.59555054 141.23852539]
[354.28927612 154.15374756]
[359.81146240 168.13592529]
[363.01913452 182.82290649]
[363.82916260 197.83422852]
[362.22058105 212.78109741]
[358.23504639 227.27632141]
[351.97579956 240.94445801]
[343.60498047 253.43147278]
[333.33938599 264.41390991]
[321.44494629 273.60729980]
[308.22973633 280.77352905]
[294.03610229 285.72695923]
[279.23162842 288.33926392]
[264.19985962 288.54281616]
[249.33007812 286.33233643]
[235.00750732 281.76504517]
[221.60310364 274.95932007]
[209.46409607 266.09136963]
[198.90489197 255.39091492]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 45]
[7 44]
[8 43]
[9 42]
[10 41]
[11 40]
[12 39]
[14 37]
[15 36]
[19 30]
[20 29]
[21 28]
[22 27]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
