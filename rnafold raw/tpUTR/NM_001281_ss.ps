%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 13:31:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCUAAGGAAUUCCCCUGCUUCAGCUCCUAGCUCAGCCACUGACUGCCCCUCCUGUGUGUGCCCAUGGCCCUUUUCUCCUGACCCCAUUUUAAUUUUAUUCAUUUUUUCCUUUGCCAUUGAUUUUUGAGACUCAUGCAUUAAAUUCACUAGAAACCCAGAAAGU\
) } def
/len { sequence length } bind def

/coor [
[143.19430542 561.79742432]
[148.95855713 547.79553223]
[158.95875549 536.42565918]
[172.11015320 528.92102051]
[169.28828430 514.18884277]
[166.46640015 499.45666504]
[154.03523254 491.33255005]
[150.96357727 476.43222046]
[159.56919861 463.44833374]
[156.74732971 448.71615601]
[153.92544556 433.98397827]
[151.10357666 419.25180054]
[148.28170776 404.51962280]
[135.70162964 399.97711182]
[126.94715881 389.72219849]
[124.39379883 376.37231445]
[128.81593323 363.40536499]
[139.15635681 354.25363159]
[136.61376953 339.47070312]
[134.07119751 324.68774414]
[120.65230560 318.27908325]
[113.49552155 305.04107666]
[115.52984619 289.95086670]
[126.18281555 278.82339478]
[123.64024353 264.04046631]
[120.95790100 249.28222656]
[118.13602448 234.55006409]
[115.31415558 219.81788635]
[102.88297272 211.69375610]
[99.81133270 196.79342651]
[108.41694641 183.80955505]
[105.59506989 169.07737732]
[95.60160065 158.03292847]
[100.60459900 143.02357483]
[97.78273010 128.29139709]
[94.96085358 113.55921936]
[85.07955933 102.27382660]
[70.84921265 97.53071594]
[56.57461929 92.92247009]
[42.25705719 88.44950104]
[27.93949509 83.97653198]
[18.76306725 96.04172516]
[6.01182461 104.23816681]
[-8.77445507 107.57608795]
[-23.81025696 105.65243530]
[-37.27993393 98.69947815]
[-47.55696106 87.55683136]
[-53.40033340 73.57002258]
[-54.10443497 58.42802811]
[-49.58424377 43.95931244]
[-40.38559341 31.91104889]
[-27.61927032 23.73812103]
[-12.82686424 20.42745018]
[2.20536709 22.37881470]
[15.66220856 29.35658073]
[25.91868210 40.51814651]
[31.73626900 54.51570129]
[32.41246414 69.65896606]
[46.73002625 74.13193512]
[61.04758835 78.60490417]
[68.40229797 77.59349823]
[75.59233093 83.30036163]
[89.82267761 88.04347992]
[92.50543213 88.42261505]
[94.89813232 89.26969147]
[96.92826843 90.51349640]
[102.20648193 76.47282410]
[107.48470306 62.43215561]
[112.76291656 48.39148331]
[118.04113007 34.35081482]
[105.30017853 25.29389191]
[95.33533478 13.26417637]
[88.81731415 -0.91962785]
[86.18252563 -16.29413986]
[87.60380554 -31.81673431]
[92.97915649 -46.43624115]
[101.93899536 -59.16413498]
[113.87158203 -69.14138031]
[127.96476746 -75.69639587]
[143.26129150 -78.39027405]
[158.72377014 -77.04615021]
[163.73533630 -91.18419647]
[168.74690247 -105.32223511]
[156.87782288 -114.72456360]
[148.70687866 -127.47267914]
[145.12037659 -142.18374634]
[146.50738525 -157.26205444]
[152.71740723 -171.07197571]
[163.07687378 -182.11555481]
[176.46202087 -189.19483948]
[191.42095947 -191.54193115]
[206.33105469 -188.90223694]
[219.57495117 -181.56207275]
[229.71606445 -170.31768799]
[235.65437317 -156.38874817]
[236.74569702 -141.28616333]
[232.87170410 -126.64817810]
[224.45257568 -114.06258392]
[212.40158081 -104.89458466]
[198.02590942 -100.13864899]
[182.88493347 -100.31067657]
[177.87338257 -86.17263031]
[172.86181641 -72.03459167]
[184.88140869 -64.06778717]
[194.64335632 -53.44148636]
[201.57334900 -40.77410507]
[205.26208496 -26.80434990]
[205.48942566 -12.34810448]
[202.23753357 1.74919498]
[195.69215393 14.66201401]
[186.23207092 25.63306236]
[174.40711975 34.01770401]
[160.90628052 39.32183456]
[146.51751709 41.23099899]
[132.08180237 39.62902832]
[126.80358887 53.66970062]
[121.52537537 67.71037292]
[116.24715424 81.75104523]
[110.96894073 95.79170990]
[109.69303131 110.73735046]
[112.51490021 125.46952820]
[115.33677673 140.20170593]
[125.53208160 152.29989624]
[120.32724762 166.25550842]
[123.14912415 180.98768616]
[135.94357300 189.87248230]
[138.59548950 204.85321045]
[130.04632568 216.99600220]
[132.86820984 231.72817993]
[135.69007874 246.46035767]
[140.39721680 254.34120178]
[138.42318726 261.49786377]
[140.96575928 276.28082275]
[154.72430420 283.20965576]
[161.68342590 296.75305176]
[159.36077881 311.62145996]
[148.85414124 322.14517212]
[151.39671326 336.92810059]
[153.93928528 351.71105957]
[169.19572449 358.96539307]
[177.05853271 373.72961426]
[174.61241150 390.10946655]
[163.01388550 401.69775391]
[165.83575439 416.42993164]
[168.65762329 431.16210938]
[171.47950745 445.89428711]
[174.30137634 460.62646484]
[187.09582520 469.51126099]
[189.74774170 484.49200439]
[181.19857788 496.63479614]
[184.02046204 511.36697388]
[186.84233093 526.09912109]
[201.83604431 528.21270752]
[215.32995605 535.08245850]
[225.86033630 545.96313477]
[232.28494263 559.67456055]
[233.90686035 574.72943115]
[230.55017090 589.49462891]
[222.57897949 602.36859131]
[210.85794067 611.95483398]
[196.65847778 617.21350098]
[181.52081299 617.57421875]
[167.08699036 612.99780273]
[154.92268372 603.98071289]
[146.34738159 591.50097656]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 152]
[5 151]
[6 150]
[9 147]
[10 146]
[11 145]
[12 144]
[13 143]
[18 139]
[19 138]
[20 137]
[24 133]
[25 132]
[26 130]
[27 129]
[28 128]
[31 125]
[32 124]
[34 122]
[35 121]
[36 120]
[37 63]
[38 62]
[39 60]
[40 59]
[41 58]
[66 119]
[67 118]
[68 117]
[69 116]
[70 115]
[81 103]
[82 102]
[83 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
