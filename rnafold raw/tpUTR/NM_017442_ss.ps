%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 15:06:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGUGAGCCGGAAUCCUGCACGGUGCCACCUCCACACUCACCUCACCUCUGCCUGCCUGGUCUGACCCUCCCCUGCUCGCCUCCCUCACCCCACACCUGACACAGAGCAGGCACUCAAUAAAUGCUACCGAAGGCUA\
) } def
/len { sequence length } bind def

/coor [
[67.81199646 158.72871399]
[57.09182739 151.42001343]
[47.98212051 142.18139648]
[35.34655762 150.26487732]
[22.71100044 158.34835815]
[10.07544041 166.43182373]
[-2.56011844 174.51530457]
[-5.96872807 191.63136292]
[-20.39460564 200.84199524]
[-36.70145035 196.88993835]
[-49.14973068 205.25894165]
[-61.59800720 213.62796021]
[-59.92247391 227.56224060]
[-64.41054535 240.78990173]
[-74.12688446 250.73263550]
[-87.12306976 255.47860718]
[-100.82813263 254.14999390]
[-112.55712128 247.06463623]
[-125.19268036 255.14811707]
[-137.82824707 263.23159790]
[-147.91229248 276.86053467]
[-163.80015564 270.94345093]
[-162.51249695 254.03846741]
[-145.91172791 250.59603882]
[-133.27615356 242.51255798]
[-120.64060211 234.42907715]
[-121.78201294 218.35021973]
[-114.64016724 203.79504395]
[-101.06877136 194.75517273]
[-84.69874573 193.76222229]
[-69.96701813 201.17967224]
[-57.51874161 192.81066895]
[-45.07046127 184.44165039]
[-44.37164307 171.52542114]
[-36.21853638 161.23318481]
[-23.43059540 157.48703003]
[-10.64359760 161.87974548]
[1.99196124 153.79626465]
[14.62752056 145.71279907]
[27.26308060 137.62931824]
[39.89863968 129.54583740]
[34.12096024 112.04499817]
[33.33232880 93.63199615]
[37.59246445 75.70124817]
[46.57875061 59.61064529]
[59.61064529 46.57875061]
[75.70124817 37.59246445]
[93.63199615 33.33232880]
[112.04499817 34.12096024]
[129.54583740 39.89863968]
[137.62931824 27.26308060]
[145.71279907 14.62752056]
[153.79626465 1.99196124]
[161.87974548 -10.64359760]
[169.96322632 -23.27915764]
[178.04670715 -35.91471481]
[185.98583984 -48.64146805]
[193.77960205 -61.45775604]
[201.57336426 -74.27404785]
[209.22073364 -87.17822266]
[216.72073364 -100.16860199]
[224.22073364 -113.15898132]
[212.61326599 -122.71494293]
[202.73707581 -134.05119324]
[194.86158752 -146.85848999]
[189.20167542 -160.78742981]
[185.91174316 -175.45800781]
[185.08151245 -190.47003174]
[186.73367310 -205.41392517]
[190.82312012 -219.88204956]
[197.23829651 -233.47966003]
[205.80421448 -245.83583069]
[216.28717041 -256.61349487]
[228.40116882 -265.51858521]
[241.81576538 -272.30816650]
[256.16497803 -276.79705811]
[271.05734253 -278.86276245]
[286.08660889 -278.44894409]
[300.84274292 -275.56689453]
[314.92318726 -270.29519653]
[327.94384766 -262.77774048]
[339.54946899 -253.21952820]
[349.42349243 -241.88137817]
[357.29650879 -229.07255554]
[362.95373535 -215.14253235]
[366.24084473 -200.47131348]
[367.06817627 -185.45913696]
[365.41314697 -170.51554871]
[361.32089233 -156.04823303]
[354.90310669 -142.45184326]
[346.33480835 -130.09732056]
[335.84979248 -119.32170105]
[323.73406982 -110.41894531]
[310.31817627 -103.63192749]
[295.96807861 -99.14581299]
[281.07531738 -97.08296967]
[266.04614258 -97.49968719]
[251.29055786 -100.38459015]
[237.21112061 -105.65898132]
[229.71112061 -92.66860199]
[222.21112061 -79.67822266]
[221.58552551 -72.24882507]
[214.38964844 -66.48028564]
[206.59590149 -53.66399765]
[198.80213928 -40.84770584]
[198.00758362 -33.43447876]
[190.68226624 -27.83123779]
[182.59878540 -15.19567776]
[174.51530457 -2.56011844]
[166.43182373 10.07544041]
[158.34835815 22.71100044]
[150.26487732 35.34655762]
[142.18139648 47.98212051]
[150.73724365 56.28658676]
[157.68484497 65.97665405]
[162.80400085 76.74517059]
[165.93243408 88.25080109]
[166.97099304 100.12884521]
[165.88673401 112.00281525]
[162.71405029 123.49632263]
[157.55349731 134.24505615]
[150.56866455 143.90832520]
[141.98092651 152.17980957]
[132.06250000 158.79733276]
[137.72378540 172.68797302]
[143.38507080 186.57859802]
[158.04707336 192.47787476]
[164.16632080 207.04942322]
[158.11236572 221.64823914]
[143.47692871 227.61308289]
[128.94293213 221.40512085]
[123.13316345 206.70742798]
[129.49444580 192.23989868]
[123.83315277 178.34925842]
[118.17186737 164.45861816]
[105.40177155 166.75291443]
[92.42893982 166.54177856]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 41]
[4 40]
[5 39]
[6 38]
[7 37]
[10 33]
[11 32]
[12 31]
[18 26]
[19 25]
[20 24]
[50 113]
[51 112]
[52 111]
[53 110]
[54 109]
[55 108]
[56 107]
[57 105]
[58 104]
[59 103]
[60 101]
[61 100]
[62 99]
[124 135]
[125 134]
[126 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
