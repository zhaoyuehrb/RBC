%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 23:25:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUCCUGCUCCUCUGCUCUCAGGGAAACUGGGCUGUGAGCCACACACUUCUCCCCCCAGACAGGGACACAGGGUCACUGAGCUUUGUGUCCCCAGGAACUGGUAUAGGGCACCUAGAGGUGUUCAAUAAAUGUUUGUCAAAUUGAA\
) } def
/len { sequence length } bind def

/coor [
[135.68544006 151.84556580]
[147.90626526 143.14776611]
[162.26234436 138.80000305]
[177.25433350 139.25584412]
[164.82669067 130.85621643]
[152.39904785 122.45659637]
[139.97140503 114.05697632]
[127.54375458 105.65734863]
[111.54799652 122.95989227]
[90.16361237 121.10221100]
[79.78453064 131.93154907]
[69.40544128 142.76089478]
[65.69149017 151.18380737]
[58.68927002 153.70698547]
[48.08266830 164.31359863]
[37.47606659 174.92019653]
[33.75661469 190.89196777]
[17.98844337 195.39717102]
[6.39249468 183.80122375]
[10.89768791 168.03305054]
[26.86946678 164.31359863]
[37.47606659 153.70698547]
[48.08266830 143.10038757]
[58.57610321 132.38180542]
[68.95518494 121.55246735]
[79.33426666 110.72312927]
[77.91658020 107.37430573]
[77.03765106 103.84558105]
[76.71893311 100.22303009]
[62.47288895 95.52725220]
[48.22684860 90.83147430]
[33.98080826 86.13569641]
[19.73476791 81.43991852]
[5.75067806 88.30162811]
[-8.62994003 83.33650208]
[-15.08534718 69.96252441]
[-30.61404419 72.99074554]
[-40.27941895 61.65805817]
[-54.52545929 56.96228027]
[-68.77149963 52.26650238]
[-81.28452301 61.44277573]
[-96.80155182 61.47789764]
[-109.35598755 52.35836792]
[-114.12038422 37.59083176]
[-109.26273346 22.85370636]
[-96.65090942 13.81371784]
[-81.13440704 13.94692516]
[-68.67964172 23.20211029]
[-64.07572174 38.02046204]
[-49.82968140 42.71623993]
[-35.58364105 47.41201782]
[-21.07391548 44.04792023]
[-10.38957024 55.71648026]
[2.75317025 48.80244064]
[17.26757431 53.36168671]
[24.43054581 67.19387817]
[38.67658615 71.88965607]
[52.92262650 76.58543396]
[67.16867065 81.28121185]
[81.41471100 85.97698975]
[87.24885559 79.08992004]
[95.63184357 74.67349243]
[105.50460815 73.65943146]
[115.47602844 76.52326965]
[118.32426453 61.79616928]
[121.17250824 47.06906891]
[124.02075195 32.34196854]
[126.86899567 17.61486626]
[129.71723938 2.88776469]
[132.56547546 -11.83933640]
[135.41372681 -26.56643867]
[138.26196289 -41.29354095]
[141.11019897 -56.02064133]
[143.95845032 -70.74774170]
[146.80668640 -85.47484589]
[137.75015259 -98.42685699]
[140.58688354 -113.97447205]
[153.63392639 -122.89356995]
[169.15068054 -119.89260864]
[177.93135071 -106.75199890]
[174.76649475 -91.26783752]
[161.53379822 -82.62660217]
[158.68554688 -67.89949799]
[155.83731079 -53.17239761]
[152.98905945 -38.44529724]
[150.14082336 -23.71819496]
[147.29258728 -8.99109459]
[144.44433594 5.73600721]
[141.59609985 20.46310806]
[138.74784851 35.19020844]
[135.89961243 49.91731262]
[133.05136108 64.64440918]
[130.20312500 79.37151337]
[135.94337463 93.22970581]
[148.37101746 101.62932587]
[160.79866028 110.02895355]
[173.22631836 118.42857361]
[185.65396118 126.82819366]
[199.38719177 132.86129761]
[213.98013306 136.33201599]
[225.75790405 126.40273285]
[240.94644165 125.32507324]
[253.70625305 133.30326843]
[259.25503540 147.09996033]
[273.84799194 150.57067871]
[288.44094849 154.04138184]
[303.65689087 149.70713806]
[314.24850464 160.17932129]
[328.84146118 163.65003967]
[343.43441772 167.12074280]
[358.02737427 170.59146118]
[372.62030029 174.06217957]
[387.21325684 177.53288269]
[401.80621338 181.00360107]
[417.35678101 175.79669189]
[429.46044922 186.86164856]
[425.66601562 202.81578064]
[409.87683105 207.24684143]
[398.33551025 195.59654236]
[383.74255371 192.12583923]
[369.14959717 188.65512085]
[354.55664062 185.18440247]
[339.96371460 181.71369934]
[325.37075806 178.24298096]
[310.77780151 174.77227783]
[296.60565186 179.35476685]
[284.97021484 168.63433838]
[270.37728882 165.16362000]
[255.78433228 161.69290161]
[244.61834717 171.51425171]
[229.63298035 172.89366150]
[216.55589294 165.09346008]
[210.50942993 150.92495728]
[195.91647339 147.45425415]
[206.39428711 158.18809509]
[212.90322876 171.70230103]
[214.76400757 186.58642578]
[211.78242493 201.28710938]
[204.26963806 214.27011108]
[193.00971985 224.18041992]
[179.17784119 229.98377991]
[164.21754456 231.07450867]
[149.69018555 227.33876038]
[137.11190796 219.16642761]
[127.79545593 207.41043091]
[122.71313477 193.29766846]
[122.39537048 178.30102539]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 98]
[5 97]
[6 96]
[7 95]
[8 94]
[10 26]
[11 25]
[12 24]
[14 23]
[15 22]
[16 21]
[29 60]
[30 59]
[31 58]
[32 57]
[33 56]
[36 53]
[38 51]
[39 50]
[40 49]
[64 93]
[65 92]
[66 91]
[67 90]
[68 89]
[69 88]
[70 87]
[71 86]
[72 85]
[73 84]
[74 83]
[75 82]
[99 134]
[100 133]
[104 129]
[105 128]
[106 127]
[108 125]
[109 124]
[110 123]
[111 122]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
