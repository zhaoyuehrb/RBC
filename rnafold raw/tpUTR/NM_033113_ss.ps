%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 15:00:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGAGGCAGUGAUUCCCCUCCCGCCCCGCACAGAGACCCCGACUCACUGCCAGCCGGGGCGGGGCAGGGUGCCGCAGGCUGGGCUUGCUAAUAAAGACCCGAGUCUCCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[103.73300934 237.06431580]
[102.50506592 222.11465454]
[93.75184631 210.06350708]
[100.33345032 195.67625427]
[99.10550690 180.72659302]
[97.87756348 165.77694702]
[96.64962006 150.82728577]
[95.42167664 135.87763977]
[87.47265625 133.92980957]
[80.16506195 130.24468994]
[73.87306213 125.01097870]
[68.91881561 118.49665070]
[65.55599976 111.03524780]
[63.95679092 103.00881958]
[64.20307159 94.82833099]
[66.28224182 86.91265106]
[70.08783722 79.66706085]
[59.70075989 68.84539032]
[49.31368256 58.02371216]
[38.92660522 47.20203781]
[28.24781418 36.66812134]
[17.28527451 26.42982483]
[6.32273579 16.19152832]
[-4.63980389 5.95323038]
[-15.60234356 -4.28506660]
[-26.56488228 -14.52336407]
[-37.52742386 -24.76166153]
[-48.48996353 -34.99995804]
[-59.45249939 -45.23825455]
[-70.55385590 -55.32586288]
[-90.40117645 -58.29347992]
[-96.04022980 -76.70510101]
[-107.80411530 -86.01160431]
[-119.56799316 -95.31811523]
[-135.19137573 -97.81216431]
[-140.37237549 -111.77664185]
[-152.13626099 -121.08315277]
[-167.41400146 -117.74784088]
[-181.23724365 -125.05892944]
[-187.07907104 -139.56434631]
[-182.18113708 -154.41508484]
[-168.85609436 -162.59906006]
[-153.39564514 -160.25207520]
[-143.09971619 -148.48228455]
[-142.82974243 -132.84703064]
[-131.06587219 -123.54051971]
[-116.28390503 -121.71213531]
[-110.26148224 -107.08200073]
[-98.49760437 -97.77548981]
[-86.73371887 -88.46897888]
[-76.56490326 -90.57180786]
[-66.74012756 -86.57868958]
[-60.67328644 -77.61167145]
[-60.61882401 -66.56397247]
[-53.42593384 -64.46292877]
[-49.21420288 -56.20079422]
[-38.25166321 -45.96249771]
[-27.28912544 -35.72420120]
[-16.32658577 -25.48590279]
[-5.36404610 -15.24760628]
[5.59849310 -5.00930929]
[16.56103325 5.22898817]
[27.52357292 15.46728516]
[38.48611069 25.70558167]
[43.33331299 26.42512131]
[47.73583603 30.28551483]
[49.74828339 36.81496429]
[60.13535690 47.63663864]
[70.52243042 58.45831299]
[80.90950775 69.27999115]
[106.76860046 61.55129242]
[132.94833374 74.09701538]
[145.65698242 66.12892914]
[158.36561584 58.16083908]
[168.57336426 44.62428284]
[184.40669250 50.68581390]
[182.96514893 67.57836151]
[166.33370972 70.86948395]
[153.62506104 78.83757019]
[140.91642761 86.80565643]
[142.95892334 101.66594696]
[157.34605408 105.90979767]
[171.73320007 110.15365601]
[186.12033081 114.39751434]
[200.56408691 118.44446564]
[215.06178284 122.29375458]
[229.55946350 126.14305115]
[242.24360657 116.99719238]
[257.83517456 118.19580841]
[268.97232056 129.17295837]
[270.39645386 144.74555969]
[261.43508911 157.56071472]
[246.31953430 161.56748962]
[232.18690491 154.87400818]
[225.71017456 140.64073181]
[211.21247864 136.79144287]
[196.71479797 132.94215393]
[189.34269714 134.28529358]
[181.87648010 128.78465271]
[167.48933411 124.54079437]
[153.10220337 120.29693604]
[138.71507263 116.05307770]
[126.15882111 128.97987366]
[110.37133789 134.64968872]
[111.59927368 149.59934998]
[112.82721710 164.54899597]
[114.05516052 179.49865723]
[115.28310394 194.44831848]
[124.12416077 207.56877136]
[117.45471954 220.88671875]
[118.68266296 235.83638000]
[128.45712280 249.00421143]
[121.69326782 263.94348145]
[105.34916687 265.28598022]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 111]
[2 110]
[4 108]
[5 107]
[6 106]
[7 105]
[8 104]
[17 70]
[18 69]
[19 68]
[20 67]
[21 64]
[22 63]
[23 62]
[24 61]
[25 60]
[26 59]
[27 58]
[28 57]
[29 56]
[30 54]
[32 50]
[33 49]
[34 48]
[36 46]
[37 45]
[72 80]
[73 79]
[74 78]
[81 102]
[82 101]
[83 100]
[84 99]
[85 97]
[86 96]
[87 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
