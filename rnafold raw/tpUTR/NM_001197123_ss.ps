%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 07:58:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCUCGCUCCUCAUGGUGUGCCUCCAACCCCCCUGUUCCCCACCACCUCAACCAAUAAACUGGUUCCUGCUAUGAUCA\
) } def
/len { sequence length } bind def

/coor [
[37.22069168 250.09497070]
[32.02893448 264.16784668]
[35.33787918 280.22970581]
[22.90426445 290.92254639]
[7.51872587 285.24652100]
[5.00858736 269.04061890]
[17.95606422 258.97607422]
[23.14781952 244.90321350]
[13.62076283 231.68647766]
[13.75422192 215.22998047]
[23.69101906 201.90574646]
[39.74048615 196.98791504]
[44.37574005 182.72206116]
[49.01099777 168.45620728]
[53.64625168 154.19036865]
[58.28150558 139.92451477]
[62.91676331 125.65866852]
[67.55201721 111.39282227]
[65.78895569 96.49679565]
[57.95147705 83.70719147]
[50.11399841 70.91758728]
[34.06940079 72.70838928]
[18.88292503 67.40275574]
[7.52579784 56.09154129]
[2.19715381 41.03533554]
[3.89831877 25.21280861]
[12.24505806 11.73143673]
[3.91150451 -0.74060780]
[-4.42204905 -13.21265221]
[-19.96961021 -16.04971123]
[-28.88844299 -29.09693146]
[-25.88716507 -44.61362839]
[-12.74637890 -53.39402008]
[2.73771882 -50.22885895]
[11.37868786 -36.99597549]
[8.04999542 -21.54620552]
[16.38354874 -9.07416153]
[24.71710205 3.39788294]
[38.48173141 0.78194046]
[52.23698807 3.66749907]
[63.86193085 11.64392757]
[71.55092621 23.51300240]
[74.09408569 37.46881866]
[71.06752777 51.37252045]
[62.90360260 63.08011246]
[70.74108124 75.86971283]
[78.57855988 88.65931702]
[87.97013092 80.20514679]
[99.81745911 77.91165924]
[110.61547089 81.86376953]
[117.46616364 90.38039398]
[132.36219788 88.61733246]
[147.25822449 86.85427094]
[162.15425110 85.09120941]
[177.05027771 83.32814789]
[186.63655090 70.76316833]
[202.31077576 68.73974609]
[214.77371216 78.45833588]
[216.63130188 94.15307617]
[206.78149414 106.51255798]
[191.06797791 108.20410919]
[178.81333923 98.22417450]
[163.91731262 99.98723602]
[149.02128601 101.75029755]
[134.12525940 103.51335907]
[119.22922516 105.27642059]
[114.55598450 115.15699768]
[104.97892761 121.52064514]
[92.92353058 122.05623627]
[81.81786346 116.02807617]
[77.18260956 130.29393005]
[72.54735565 144.55976868]
[67.91210175 158.82562256]
[63.27684402 173.09146118]
[58.64159012 187.35731506]
[54.00633621 201.62316895]
[62.99164963 212.27261353]
[65.45305634 225.87625122]
[60.84236145 238.79344177]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 8]
[2 7]
[12 76]
[13 75]
[14 74]
[15 73]
[16 72]
[17 71]
[18 70]
[19 47]
[20 46]
[21 45]
[27 38]
[28 37]
[29 36]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
