%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 09:10:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUUUUCCUGAGUCCAACGACCUUCCCAAAAUGGUUCUUAGAUCUGCAGUAGGACUUGCGAUCAAAAAGUAAAACACAUUCUGAAAGACUAUUGAGCCAUUGAUAGAAAAGCAAAUAAAACUAGAUAUACAUU\
) } def
/len { sequence length } bind def

/coor [
[207.96124268 501.39465332]
[192.98332214 500.58114624]
[178.31097412 497.46313477]
[164.29658508 492.11550903]
[151.27677917 484.66671753]
[139.56425476 475.29565430]
[129.44033813 464.22738647]
[121.14818573 451.72778320]
[114.88695526 438.09704590]
[110.80703735 423.66256714]
[109.00641632 408.77102661]
[109.52834320 393.78012085]
[112.35958099 379.05245972]
[101.44897461 389.34606934]
[90.53836823 399.63970947]
[86.35595703 415.49655151]
[70.46342468 419.54122925]
[59.20964432 407.61291504]
[64.17154694 391.98245239]
[80.24474335 388.72909546]
[91.15534973 378.43545532]
[102.06595612 368.14184570]
[102.91613770 363.29022217]
[105.80447388 358.88870239]
[105.10659027 343.90493774]
[104.40871429 328.92117310]
[91.11444855 322.20343018]
[82.91310883 309.64978027]
[82.09111786 294.57693481]
[88.96921539 281.02746582]
[101.78949738 272.68554688]
[101.09161377 257.70178223]
[100.39373779 242.71801758]
[99.69585419 227.73426819]
[98.99797821 212.75050354]
[98.30009460 197.76675415]
[97.60221863 182.78298950]
[96.90433502 167.79924011]
[86.63791656 153.61489868]
[95.10730743 137.31187439]
[94.06095886 122.34841919]
[93.01461029 107.38495636]
[89.32628632 100.12802124]
[92.12214661 92.06186676]
[91.42426300 77.07811737]
[90.72638702 62.09435654]
[80.42159271 46.88481522]
[88.97190094 31.60452271]
[87.92555237 16.64106178]
[86.87920380 1.67760098]
[71.26715088 -7.39214468]
[64.22075653 -23.84613228]
[68.35679626 -41.10058975]
[81.85753632 -52.37177658]
[69.74417114 -62.16484451]
[68.19038391 -77.29892731]
[77.60122681 -88.78681183]
[75.85983276 -103.68539429]
[74.11843872 -118.58396912]
[72.37704468 -133.48254395]
[58.47331619 -140.16758728]
[50.41044235 -153.32029724]
[50.76124954 -168.74366760]
[59.41380310 -181.51617432]
[73.60710144 -187.56214905]
[88.81211853 -184.95234680]
[100.17698669 -174.51954651]
[104.07521057 -159.59280396]
[99.26289368 -144.93521118]
[87.27561951 -135.22393799]
[89.01701355 -120.32536316]
[90.75840759 -105.42678833]
[92.49980164 -90.52820587]
[104.30626678 -81.52026367]
[106.28452301 -66.43579865]
[96.75611115 -54.11317062]
[108.19528961 -49.75165176]
[116.71877289 -40.86294556]
[120.64273071 -29.11334991]
[119.15377045 -16.74259377]
[112.47659302 -6.13690710]
[101.84266663 0.63125384]
[102.88901520 15.59471416]
[103.93535614 30.55817604]
[112.88729858 38.77883148]
[113.83135223 51.29920197]
[105.71014404 61.39647675]
[106.40802002 76.38023376]
[107.10590363 91.36399078]
[107.97807312 106.33861542]
[109.02442169 121.30207062]
[110.07077026 136.26553345]
[119.30928802 145.35171509]
[119.82514954 157.89703369]
[111.88809204 167.10136414]
[112.58597565 182.08511353]
[113.28385162 197.06887817]
[113.98173523 212.05262756]
[114.67961121 227.03639221]
[115.37749481 242.02014160]
[116.07537079 257.00390625]
[116.77325439 271.98764038]
[130.31341553 279.10180664]
[138.42115784 291.95333862]
[139.00373840 307.03732300]
[132.00476074 320.29891968]
[119.39247131 328.22329712]
[120.09034729 343.20706177]
[120.78823090 358.19082642]
[128.98393250 345.62774658]
[139.02236938 334.48190308]
[150.66241455 325.02096558]
[163.62449646 317.47219849]
[177.59730530 312.01684570]
[192.24523926 308.78601074]
[207.21644592 307.85723877]
[222.15138245 309.25286865]
[236.69131470 312.93939209]
[250.48703003 318.82821655]
[263.20718384 326.77792358]
[274.54623413 336.59759521]
[284.23184204 348.05136108]
[292.03140259 360.86410522]
[297.75756836 374.72811890]
[301.27282715 389.31042480]
[302.49270630 404.26074219]
[301.38790894 419.22000122]
[297.98501587 433.82891846]
[292.36572266 447.73657227]
[284.66500854 460.60900879]
[275.06784058 472.13696289]
[263.80468750 482.04360962]
[251.14610291 490.09100342]
[237.39613342 496.08581543]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 22]
[14 21]
[15 20]
[24 109]
[25 108]
[26 107]
[31 102]
[32 101]
[33 100]
[34 99]
[35 98]
[36 97]
[37 96]
[38 95]
[40 92]
[41 91]
[42 90]
[44 89]
[45 88]
[46 87]
[48 84]
[49 83]
[50 82]
[54 76]
[57 73]
[58 72]
[59 71]
[60 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
