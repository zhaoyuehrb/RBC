%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 13:36:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCUCCUAGCAGGUCCUGAAUCCAGAGACAAAAAUGCCGUGCCUUCUCCAGAGUCUUAUGCAGUGCCUGGGACACAGUAGGCACUCAGCAAACGUUCGUUGUUGAAGGCUGUUCUAUUUAUCUAUUGCUGUAUAACAAACCACCCCAGAAUUUAGUGGCUUAAAAUAAAUCCCAUUUUAUUAUGUCUCA\
) } def
/len { sequence length } bind def

/coor [
[14.53070641 264.45935059]
[9.91892242 278.73278809]
[5.30713797 293.00625610]
[10.47849464 304.83450317]
[6.33108377 316.63513184]
[-4.39334822 322.25399780]
[-9.23926926 336.44964600]
[-14.08519077 350.64532471]
[-13.48008060 367.58847046]
[-29.59357071 372.86026001]
[-39.11999512 358.83587646]
[-28.28086090 345.79940796]
[-23.43494034 331.60372925]
[-18.58901787 317.40808105]
[-22.91201210 300.40734863]
[-8.96631432 288.39447021]
[-4.35453033 274.12100220]
[0.25725362 259.84756470]
[-6.05441713 253.91815186]
[-10.11064243 246.21768188]
[-11.44388580 237.57292175]
[-9.88071156 228.92256165]
[-5.56375265 221.21524048]
[1.06080627 215.30554199]
[9.28920841 211.85923767]
[18.23483276 211.27841187]
[24.00356483 197.43205261]
[29.77229691 183.58567810]
[35.54103088 169.73931885]
[41.30976105 155.89295959]
[47.07849503 142.04660034]
[32.82961655 137.35943604]
[20.90876961 128.25485229]
[12.63696766 115.74177551]
[8.93084908 101.20682526]
[10.20110798 86.26070404]
[16.30698013 72.55967712]
[26.57184219 61.62200546]
[39.85819244 54.65975952]
[54.69370651 52.44446182]
[69.43437958 55.22159576]
[82.44416046 62.68130112]
[73.46846771 50.66310883]
[64.49277496 38.64491653]
[55.51707840 26.62672234]
[46.54138565 14.60853100]
[37.56569290 2.59033895]
[22.17500496 0.18941417]
[13.24357986 -12.12660408]
[15.62734222 -26.78447723]
[6.65164948 -38.80266953]
[-2.32404304 -50.82086182]
[-16.78100777 -57.24789429]
[-18.19752312 -72.07498932]
[-34.13323212 -68.83053589]
[-49.83334732 -72.84197235]
[-62.17071152 -83.25798798]
[-68.71081543 -97.95684052]
[-68.19207001 -113.97846222]
[-60.76889038 -128.12048340]
[-69.94104004 -139.98942566]
[-79.11318207 -151.85836792]
[-88.47930145 -163.57484436]
[-98.03685760 -175.13568115]
[-107.59441376 -186.69653320]
[-117.15196991 -198.25737000]
[-126.70953369 -209.81822205]
[-136.26708984 -221.37905884]
[-145.82464600 -232.93991089]
[-155.38220215 -244.50074768]
[-170.85998535 -243.39715576]
[-184.01261902 -251.63049316]
[-189.78263855 -266.03488159]
[-185.95137024 -281.07153320]
[-173.99201965 -290.95855713]
[-158.50317383 -291.89419556]
[-145.44062805 -283.51864624]
[-139.82719421 -269.05252075]
[-143.82136536 -254.05830383]
[-134.26380920 -242.49746704]
[-124.70624542 -230.93661499]
[-115.14868927 -219.37577820]
[-105.59113312 -207.81492615]
[-96.03356934 -196.25408936]
[-86.47601318 -184.69325256]
[-76.91845703 -173.13240051]
[-72.31684875 -171.79736328]
[-68.51173401 -167.54737854]
[-67.24423981 -161.03051758]
[-58.07209778 -149.16157532]
[-48.89995193 -137.29263306]
[-35.47807693 -140.83767700]
[-21.67566109 -138.99040222]
[-9.58335209 -131.99725342]
[-1.04547501 -120.88667297]
[2.62124658 -107.31787872]
[0.83067364 -93.33322144]
[-6.17932987 -81.05068207]
[7.63563251 -75.48326874]
[9.69414902 -59.79655457]
[18.66984177 -47.77836227]
[27.64553452 -35.76016998]
[42.37707520 -33.88472748]
[51.65090942 -21.82443237]
[49.58388519 -6.38535357]
[58.55957794 5.63283825]
[67.53527069 17.65102959]
[76.51096344 29.66922188]
[85.48665619 41.68741608]
[94.46234894 53.70560837]
[109.27960205 56.03993988]
[121.51556396 47.36346436]
[133.75152588 38.68698502]
[145.98748779 30.01051140]
[152.76921082 15.71649933]
[167.62673950 14.66619587]
[179.86270142 5.98971939]
[192.09866333 -2.68675637]
[189.49563599 -17.72627068]
[193.68405151 -32.40346146]
[203.83229065 -43.80416489]
[217.92541504 -49.66475677]
[233.16522217 -48.82161713]
[246.52584839 -41.44215012]
[255.35452271 -28.99155617]
[257.89831543 -13.94190788]
[253.65213013 0.71867603]
[243.45906067 12.07932568]
[229.34297180 17.88437462]
[214.10659790 16.98122787]
[200.77513123 9.54920578]
[188.53916931 18.22568130]
[176.30320740 26.90215683]
[170.39668274 40.57556915]
[154.66395569 42.24647141]
[142.42799377 50.92294693]
[130.19203186 59.59942627]
[117.95607758 68.27590179]
[119.42681122 75.63027954]
[122.36829376 90.33904266]
[123.83902740 97.69342804]
[138.47074890 100.99687195]
[153.10247803 104.30030823]
[167.73419189 107.60375214]
[177.60836792 95.90933990]
[191.79054260 90.15395355]
[207.02175903 91.66013336]
[219.80200195 100.08177948]
[227.19445801 113.48365021]
[227.50038147 128.78610229]
[220.64950562 142.47273254]
[208.21609497 151.39846802]
[193.05725098 153.51223755]
[178.65635681 148.32829285]
[168.32266235 137.03788757]
[164.43075562 122.23547363]
[149.79902649 118.93202972]
[135.16731262 115.62859344]
[120.53558350 112.32514954]
[116.24781036 118.47859955]
[130.60231018 122.83157349]
[130.89797974 137.82865906]
[116.72621155 142.74403381]
[107.67225647 130.78550720]
[103.38447571 136.93894958]
[111.55061340 149.52125549]
[119.71675110 162.10354614]
[127.88288879 174.68585205]
[136.04902649 187.26814270]
[144.21516418 199.85044861]
[159.72341919 202.89501953]
[168.46710205 216.06027222]
[165.25872803 231.53546143]
[152.00177002 240.13946533]
[136.56135559 236.76765442]
[128.09800720 223.42048645]
[131.63285828 208.01658630]
[123.46672821 195.43428040]
[115.30059052 182.85198975]
[107.13445282 170.26968384]
[98.96831512 157.68739319]
[90.80217743 145.10508728]
[83.33284760 145.78265381]
[60.92485428 147.81533813]
[55.15612411 161.66169739]
[49.38739014 175.50805664]
[43.61865997 189.35441589]
[37.84992599 203.20077515]
[32.08119583 217.04713440]
[41.89797592 236.50903320]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[3 16]
[6 14]
[7 13]
[8 12]
[26 189]
[27 188]
[28 187]
[29 186]
[30 185]
[31 184]
[42 110]
[43 109]
[44 108]
[45 107]
[46 106]
[47 105]
[50 102]
[51 101]
[52 100]
[54 98]
[60 91]
[61 90]
[62 89]
[63 86]
[64 85]
[65 84]
[66 83]
[67 82]
[68 81]
[69 80]
[70 79]
[111 138]
[112 137]
[113 136]
[114 135]
[116 133]
[117 132]
[118 131]
[141 159]
[142 158]
[143 157]
[144 156]
[165 182]
[166 181]
[167 180]
[168 179]
[169 178]
[170 177]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
