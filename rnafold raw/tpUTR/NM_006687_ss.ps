%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 15:54:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGCGACGAGGAUGGACACUGCACUGGCAGUGCCUACCCUCGACAGGGUGAGCGCACUCCUACACACAGGGGGUGGAGCCGGCGCUUAUUCCUGUAGCAUUAAACACCCCUCAUAUGCCCCUCC\
) } def
/len { sequence length } bind def

/coor [
[75.48165131 192.59727478]
[63.10000229 184.13000488]
[54.99742126 171.50668335]
[52.45531464 156.72366333]
[55.87571335 142.11885071]
[64.71768951 130.00193787]
[77.58312225 122.28911591]
[88.04233551 111.53714752]
[73.70874786 115.95847321]
[59.37515259 120.37979889]
[45.04156113 124.80113220]
[30.70796967 129.22245789]
[19.80150795 140.68368530]
[5.35906458 137.04156494]
[-8.97452736 141.46289062]
[-23.30811882 145.88421631]
[-34.21458054 157.34544373]
[-48.65702438 153.70330811]
[-62.99061584 158.12464905]
[-77.32421112 162.54597473]
[-91.65779877 166.96730042]
[-105.99139404 171.38862610]
[-120.32498169 175.80995178]
[-131.07652283 188.19287109]
[-147.12254333 184.80799866]
[-151.95626831 169.13742065]
[-140.60519409 157.30168152]
[-124.74631500 161.47636414]
[-110.41271973 157.05503845]
[-96.07912445 152.63371277]
[-81.74553680 148.21237183]
[-67.41194153 143.79104614]
[-53.07835007 139.36972046]
[-43.19712448 128.22474670]
[-27.72944641 131.55062866]
[-13.39585495 127.12929535]
[0.93773693 122.70796204]
[10.81896210 111.56298065]
[26.28664207 114.88886261]
[40.62023163 110.46753693]
[54.95382690 106.04621124]
[69.28741455 101.62487793]
[83.62100983 97.20355225]
[94.48874664 86.86467743]
[99.61904907 72.76928711]
[104.74935150 58.67390060]
[109.87965393 44.57851028]
[115.00995636 30.48312187]
[120.14025879 16.38773155]
[125.09444427 2.22948241]
[129.87173462 -11.98942757]
[134.64904785 -26.20833778]
[139.42634583 -40.42724991]
[144.20364380 -54.64616013]
[148.98094177 -68.86506653]
[153.75823975 -83.08397675]
[148.78738403 -102.54479218]
[163.60539246 -114.86630249]
[167.66799927 -129.30566406]
[171.73060608 -143.74502563]
[175.79321289 -158.18440247]
[175.10816956 -167.40591431]
[180.14128113 -172.93070984]
[184.56260681 -187.26431274]
[184.10768127 -196.50003052]
[189.27696228 -201.89764404]
[182.01921082 -215.93688965]
[186.89398193 -230.97058105]
[201.00918579 -238.07949829]
[215.99050903 -233.04605103]
[222.94979858 -218.85647583]
[217.75822449 -203.92921448]
[203.49586487 -197.12033081]
[198.89619446 -182.84297180]
[194.47486877 -168.50938416]
[190.23257446 -154.12179565]
[186.16996765 -139.68241882]
[182.10736084 -125.24306488]
[178.04475403 -110.80369568]
[183.88475037 -102.25605011]
[183.99877930 -91.68350983]
[178.10339355 -82.64154053]
[167.97714233 -78.30667877]
[163.19984436 -64.08776855]
[158.42254639 -49.86885834]
[153.64524841 -35.64994812]
[148.86795044 -21.43103790]
[144.09065247 -7.21212816]
[139.31335449 7.00678205]
[140.17486572 14.43062019]
[134.23564148 21.51803398]
[129.10534668 35.61342239]
[123.97503662 49.70881271]
[118.84474182 63.80420303]
[113.71443939 77.89958954]
[108.58413696 91.99497986]
[115.44138336 95.84163666]
[119.73802948 104.50476837]
[131.22869873 114.14658356]
[142.71936035 123.78839874]
[154.21003723 133.43020630]
[167.67723083 126.38018036]
[182.81768799 125.02545166]
[197.32257080 129.57261658]
[208.97999573 139.32826233]
[216.01231384 152.80473328]
[217.34712219 167.94694519]
[212.78088379 182.44583130]
[203.00990295 194.09042358]
[189.52420044 201.10501099]
[174.38024902 202.41989136]
[159.88737488 197.83457947]
[148.25564575 188.04829407]
[141.25881958 174.55337524]
[139.96385193 159.40769958]
[144.56822205 144.92088318]
[133.07754517 135.27906799]
[121.58688354 125.63724518]
[110.09622192 115.99543762]
[115.55769348 129.96583557]
[124.41686249 142.07019043]
[127.85799408 156.67013550]
[125.33688354 171.45675659]
[117.25222778 184.09156799]
[104.88261414 192.57640076]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 43]
[9 42]
[10 41]
[11 40]
[12 39]
[14 37]
[15 36]
[16 35]
[18 33]
[19 32]
[20 31]
[21 30]
[22 29]
[23 28]
[44 96]
[45 95]
[46 94]
[47 93]
[48 92]
[49 91]
[50 89]
[51 88]
[52 87]
[53 86]
[54 85]
[55 84]
[56 83]
[58 79]
[59 78]
[60 77]
[61 76]
[63 75]
[64 74]
[66 73]
[98 119]
[99 118]
[100 117]
[101 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
