%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 23:08:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCUGCUGAUCCGCACCCCAUUCCUCCCCUCCCAUGGCCAAAAACCCCACUGUCUCCUUCUCCAAUAAAGAUGUAGCUCAAA\
) } def
/len { sequence length } bind def

/coor [
[51.25275040 108.40222931]
[36.25531006 108.67941284]
[21.25787354 108.95659637]
[6.26043415 109.23377991]
[0.88592756 112.98986816]
[-5.09850645 113.63425446]
[-16.36848450 123.53312683]
[-27.63846397 133.43199158]
[-28.40973282 149.21745300]
[-40.17306519 159.77204895]
[-55.94948959 158.83392334]
[-66.37912750 146.95967102]
[-65.27426147 131.19404602]
[-53.29039001 120.89052582]
[-37.53733063 122.16201782]
[-26.26735306 112.26314545]
[-14.99737453 102.36428070]
[-29.99444771 102.66063690]
[-44.49252319 98.81281281]
[-57.36893082 91.11877441]
[-67.62656403 80.17432404]
[-74.47109985 66.82695770]
[-77.37253571 52.11024475]
[-76.10619354 37.16379166]
[-70.77012634 23.14500618]
[-61.77754593 11.13944530]
[-49.82480240 2.07677889]
[-35.83747482 -3.34121346]
[-20.89868927 -4.69498205]
[-6.16525173 -1.87969589]
[7.22193241 4.88663960]
[18.22620964 15.08006382]
[25.99544716 27.91123390]
[29.92802429 42.38655090]
[29.71941566 57.38510132]
[25.38577652 71.74544525]
[17.26268768 84.35558319]
[5.98325062 94.23634338]
[20.98069000 93.95915985]
[35.97812653 93.68197632]
[50.97556686 93.40479279]
[54.47216034 80.65814209]
[61.21934891 69.29245758]
[70.73540497 60.11923981]
[82.34088898 53.79342270]
[95.20720673 50.76667023]
[108.41571045 51.25507736]
[121.02336121 55.22377777]
[132.12997437 62.38941193]
[140.94258118 72.24036407]
[146.83195496 84.07330322]
[149.37762451 97.04338074]
[164.31364441 98.42740631]
[179.24964905 99.81143188]
[188.32957458 97.44921875]
[194.70851135 101.53256226]
[207.15399170 92.16519928]
[222.21145630 94.33944702]
[231.06510925 106.26205444]
[245.93978882 108.19704437]
[260.81445312 110.13203430]
[271.38012695 98.76778412]
[286.61410522 95.81730652]
[300.65863037 102.41512299]
[308.11328125 116.02423859]
[306.11157227 131.41166687]
[295.42324829 142.66061401]
[280.15814209 145.44566345]
[266.18603516 138.69587708]
[258.87945557 125.00669861]
[244.00479126 123.07171631]
[229.13012695 121.13672638]
[217.52082825 130.39738464]
[202.40823364 128.64692688]
[192.77351379 116.40723419]
[177.86563110 114.74744415]
[162.92961121 113.36341858]
[147.99360657 111.97939301]
[141.22970581 127.33135986]
[129.72370911 139.53976440]
[114.79899597 147.20043945]
[98.17215729 149.43228149]
[81.75554657 145.97860718]
[67.43734741 137.23661804]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 41]
[2 40]
[3 39]
[4 38]
[6 17]
[7 16]
[8 15]
[52 78]
[53 77]
[54 76]
[56 75]
[59 72]
[60 71]
[61 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
