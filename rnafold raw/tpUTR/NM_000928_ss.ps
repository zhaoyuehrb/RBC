%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 16:34:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUCACCUCUCAAAAGCAUCACCUCUAUCUGCCUCAUCUCACACUGUACUCUCCAAUAAAGCACCUUGUUGAAAGACCUCA\
) } def
/len { sequence length } bind def

/coor [
[139.44638062 194.38458252]
[126.04424286 198.92503357]
[112.14376068 201.57261658]
[98.01091003 202.27662659]
[83.91612244 201.02363586]
[70.12909698 197.83760071]
[56.91363525 192.77947998]
[44.52260971 185.94606018]
[33.19312286 177.46810913]
[23.14195633 167.50782776]
[14.56143475 156.25582886]
[7.61574364 143.92738342]
[2.43778467 130.75842285]
[-0.87336385 117.00090027]
[-2.25434422 102.91807556]
[-1.67873228 88.77941895]
[0.84245801 74.85546112]
[-13.38789177 70.11234283]
[-27.61824226 65.36923218]
[-38.60716629 76.02296448]
[-53.29168701 80.33845520]
[-68.29740906 77.32402039]
[-80.17613220 67.67235565]
[-86.19821167 53.60135269]
[-84.97981262 38.34441757]
[-76.80091858 25.40748405]
[-63.54097366 17.76336288]
[-48.24702835 17.16861916]
[-34.43350601 23.75992203]
[-25.27466202 36.02263641]
[-22.87512779 51.13887787]
[-8.64477730 55.88199234]
[5.58557320 60.62510681]
[12.84246349 46.44601059]
[22.21247482 33.56531525]
[33.46843338 22.29532433]
[46.33743668 12.90926838]
[60.50748444 5.63471365]
[75.63501740 0.64803076]
[91.35327911 -1.92987943]
[107.28118134 -2.03651571]
[123.03254700 0.33070722]
[138.22549438 5.11439657]
[152.49166870 12.19857216]
[165.48519897 21.41147995]
[176.89103699 32.52975464]
[186.43267822 45.28383255]
[193.87876892 59.36449814]
[199.04876709 74.43036652]
[201.81736755 90.11615753]
[202.11741638 106.04158783]
[216.98597717 108.02293396]
[231.85453796 110.00428009]
[248.55992126 102.54096985]
[262.13375854 113.49221039]
[277.06668091 114.90948486]
[291.99957275 116.32675934]
[306.93246460 117.74404144]
[321.86535645 119.16131592]
[336.79824829 120.57859039]
[348.81823730 110.31726074]
[364.56674194 111.64410400]
[374.70040894 123.77192688]
[373.20715332 139.50550842]
[360.97286987 149.51039124]
[345.25595093 147.85086060]
[335.38095093 135.51148987]
[320.44805908 134.09420776]
[305.51516724 132.67692566]
[290.58227539 131.25965881]
[275.64938354 129.84237671]
[260.71649170 128.42509460]
[251.04559326 135.94934082]
[238.44744873 134.72615051]
[229.87319946 124.87284851]
[215.00463867 122.89150238]
[200.13606262 120.91015625]
[196.29251099 134.52853394]
[190.60643005 147.48620605]
[183.18664551 159.53526306]
[174.17510986 170.44514465]
[163.74427795 180.00708008]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 33]
[18 32]
[19 31]
[51 77]
[52 76]
[53 75]
[55 72]
[56 71]
[57 70]
[58 69]
[59 68]
[60 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
