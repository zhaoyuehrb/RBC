%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 16:13:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGACUUCAUGUUGCCAAGGAAUCCCUGUCUCUACGUGAACUUGGGAUUCCAAAGCCAGCUAACAGCAUGAUCUUUUCUCACUUCAAUCCUUACUCCUGCUCAUUAAAACUUAAUCAAACUUCACA\
) } def
/len { sequence length } bind def

/coor [
[259.99633789 204.09211731]
[261.84158325 189.19050598]
[265.31497192 174.58232117]
[251.19180298 169.52897644]
[237.06864929 164.47563171]
[232.35839844 165.72189331]
[226.81939697 163.94639587]
[222.38685608 158.81224060]
[208.52865601 153.07199097]
[194.67047119 147.33172607]
[180.81227112 141.59147644]
[166.95408630 135.85122681]
[153.09588623 130.11097717]
[139.23770142 124.37072754]
[125.37950134 118.63047791]
[113.54464722 128.42105103]
[98.48602295 131.44712830]
[83.78774261 126.98844910]
[72.94815063 116.10623932]
[68.54718018 101.39057922]
[53.83539963 98.46422577]
[39.12361908 95.53787231]
[24.41184044 92.61151123]
[9.70006180 89.68515778]
[-5.01171732 86.75880432]
[-19.72349548 83.83245087]
[-34.43527603 80.90609741]
[-51.66863632 87.25367737]
[-64.45036316 75.29486847]
[-79.22952271 72.73043823]
[-88.32823181 74.35475159]
[-94.33803558 69.91745758]
[-109.04981232 66.99110413]
[-123.13427734 74.67272949]
[-137.86505127 68.31790924]
[-141.94195557 52.80151367]
[-132.23751831 40.02639771]
[-116.19617462 39.79253387]
[-106.12345886 52.27932358]
[-91.41168213 55.20567703]
[-76.66510010 57.95127487]
[-61.88593292 60.51570511]
[-51.75349808 53.78803635]
[-39.36356354 55.87692261]
[-31.50892067 66.19431305]
[-16.79714203 69.12067413]
[-2.08536243 72.04702759]
[12.62641716 74.97338104]
[27.33819580 77.89973450]
[42.04997635 80.82608795]
[56.76175308 83.75244141]
[71.47353363 86.67880249]
[74.83549500 81.08013153]
[79.28018188 76.29550934]
[84.61635590 72.53079224]
[80.61566162 58.07415390]
[68.55213928 46.96544647]
[72.40433502 31.02516365]
[88.20944214 26.65130043]
[99.70851898 38.34331512]
[95.07230377 54.07346344]
[99.07299805 68.53010559]
[116.58171844 73.23696136]
[128.59155273 86.81906891]
[131.11975098 104.77228546]
[144.97795105 110.51253510]
[158.83613586 116.25278473]
[172.69433594 121.99303436]
[186.55252075 127.73329163]
[200.41072083 133.47354126]
[214.26890564 139.21379089]
[228.12710571 144.95404053]
[242.12199402 150.35246277]
[256.24514771 155.40582275]
[270.36831665 160.45916748]
[276.95068359 146.96339417]
[284.97778320 134.27368164]
[294.35214233 122.54403687]
[304.95999146 111.91687012]
[316.67254639 102.52117157]
[329.34765625 94.47100067]
[342.83139038 87.86408234]
[356.96014404 82.78061676]
[371.56237793 79.28231812]
[386.46081543 77.41163635]
[401.47463989 77.19129181]
[416.42156982 78.62396240]
[431.12017822 81.69225311]
[445.39199829 86.35890961]
[459.06384277 92.56729126]
[471.96972656 100.24203491]
[483.95297241 109.28997040]
[494.86810303 119.60127258]
[504.58264160 131.05076599]
[512.97863770 143.49946594]
[519.95422363 156.79624939]
[525.42468262 170.77970886]
[529.32360840 185.28010559]
[531.60369873 200.12142944]
[532.23724365 215.12348938]
[531.21655273 230.10418701]
[528.55401611 244.88166809]
[524.28198242 259.27655029]
[518.45227051 273.11410522]
[511.13571167 286.22634888]
[502.42105103 298.45410156]
[492.41412354 309.64895630]
[481.23635864 319.67498779]
[469.02349854 328.41049194]
[455.92376709 335.74942017]
[442.09619141 341.60272217]
[427.70858765 345.89932251]
[412.93566895 348.58706665]
[397.95672607 349.63330078]
[382.95361328 349.02536011]
[368.10842896 346.77062988]
[353.60140991 342.89645386]
[339.60864258 337.44985962]
[326.29995728 330.49697876]
[313.83694458 322.12222290]
[302.37091064 312.42724609]
[292.04098511 301.52972412]
[282.97262573 289.56192017]
[275.27584839 276.66915894]
[269.04415894 263.00793457]
[264.35314941 248.74409485]
[261.25979614 234.05075073]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 75]
[4 74]
[5 73]
[8 72]
[9 71]
[10 70]
[11 69]
[12 68]
[13 67]
[14 66]
[15 65]
[20 52]
[21 51]
[22 50]
[23 49]
[24 48]
[25 47]
[26 46]
[27 45]
[29 42]
[30 41]
[32 40]
[33 39]
[55 62]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
