%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 21:14:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGUGUUUUGAGGCAUCCCUCCAACCUCUGUGACUACUUUAUCCAUGAAAAUGAAGCAAUGGCAGGUGGGAGGCUCUUCCCAAUGUGCUUUCUUCAUGCAUGCC\
) } def
/len { sequence length } bind def

/coor [
[-11.55708408 183.69174194]
[-32.44365692 173.83146667]
[-43.59082794 183.86842346]
[-54.73800278 193.90538025]
[-52.57897568 204.64538574]
[-55.14233017 215.21209717]
[-61.88056564 223.64138794]
[-71.47688293 228.39653015]
[-82.10207367 228.64813232]
[-91.76308441 224.41806030]
[-103.76509094 233.41539001]
[-115.76709747 242.41271973]
[-127.76909637 251.41004944]
[-133.71331787 266.69396973]
[-149.96064758 268.92031860]
[-159.79721069 255.79879761]
[-153.10400391 240.82772827]
[-136.76641846 239.40805054]
[-124.76441956 230.41072083]
[-112.76242065 221.41339111]
[-100.76041412 212.41606140]
[-99.61479187 193.11270142]
[-84.57881927 180.48422241]
[-64.77496338 182.75820923]
[-53.62778854 172.72125244]
[-42.48061752 162.68429565]
[-46.49227905 155.15927124]
[-49.10401535 147.03540039]
[-50.23064804 138.57086182]
[-49.83423615 130.03507996]
[-47.92535400 121.70009613]
[-44.56280136 113.83190155]
[-39.85181046 106.68199158]
[-33.94075012 100.47930145]
[-27.01645088 95.42286682]
[-19.29829597 91.67544556]
[-11.03128624 89.35829163]
[-2.47824478 88.54721069]
[6.08852577 89.27010345]
[14.39591885 91.50598145]
[22.17872810 95.18562317]
[29.18811607 100.19364166]
[35.19956589 106.37217712]
[40.02007675 113.52582550]
[54.14087296 108.46587372]
[68.26167297 103.40592194]
[82.38246918 98.34597015]
[86.18675232 88.94072723]
[94.53194427 83.17105103]
[104.67466736 82.93363953]
[113.28067017 88.30654144]
[127.67880249 84.10012817]
[142.07693481 79.89371490]
[156.47505188 75.68730927]
[170.87318420 71.48089600]
[185.27131653 67.27448273]
[188.92218018 55.75545502]
[197.64572144 47.56956863]
[209.13870239 44.71619034]
[220.44462585 47.80767059]
[228.71418762 55.94249344]
[243.33811951 52.60467911]
[257.96203613 49.26686478]
[272.58593750 45.92905045]
[284.31842041 35.31491470]
[298.44830322 40.02613831]
[313.07220459 36.68832397]
[327.64456177 33.13211823]
[342.16207886 29.35831833]
[356.67959595 25.58451653]
[371.19714355 21.81071472]
[385.71466064 18.03691292]
[397.01092529 6.14883614]
[412.88891602 10.25019169]
[417.01473999 26.12185669]
[405.14407349 37.43642044]
[389.48846436 32.55443573]
[374.97091675 36.32823563]
[360.45339966 40.10203552]
[345.93588257 43.87583923]
[331.41836548 47.64963913]
[325.64224243 52.45726013]
[316.41003418 51.31224442]
[301.78610229 54.65005875]
[291.09963989 65.02545166]
[275.92376709 60.55297089]
[261.29983521 63.89078140]
[246.67593384 67.22859955]
[232.05200195 70.56641388]
[223.41841125 86.57142639]
[205.56684875 91.42652893]
[189.47772217 81.67261505]
[175.07958984 85.87902069]
[160.68147278 90.08543396]
[146.28334045 94.29184723]
[131.88520813 98.49825287]
[117.48708344 102.70466614]
[105.46805573 116.82894897]
[87.44241333 112.46677399]
[73.32161713 117.52671814]
[59.20082092 122.58666992]
[45.08002472 127.64662170]
[43.67044449 150.92721558]
[31.54255676 170.78300476]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 26]
[3 25]
[4 24]
[10 21]
[11 20]
[12 19]
[13 18]
[44 102]
[45 101]
[46 100]
[47 99]
[51 97]
[52 96]
[53 95]
[54 94]
[55 93]
[56 92]
[61 89]
[62 88]
[63 87]
[64 86]
[66 84]
[67 83]
[68 81]
[69 80]
[70 79]
[71 78]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
