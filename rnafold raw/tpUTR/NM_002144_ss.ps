%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 14:18:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGAACCUAGCCACCAAUGGGGCUUCCAGGCACUGGAGCGCCCCAGUCCAGCCCUAUCCCAGGCUCUCCCCAACCCCAGGCCUGGGCUUCACUGGCCUGGG\
) } def
/len { sequence length } bind def

/coor [
[203.87771606 240.59022522]
[189.46372986 241.47285461]
[175.30555725 238.56761169]
[162.38217163 232.06893921]
[151.58883667 222.41989136]
[143.67515564 210.28207397]
[139.19290161 196.49018860]
[138.45767212 181.99465942]
[141.52655029 167.79618835]
[148.19384766 154.87658691]
[137.19065857 144.68197632]
[126.18747711 134.48738098]
[115.18429565 124.29277039]
[101.03894806 128.62904358]
[86.61650085 125.32949829]
[75.76364136 115.27416992]
[71.37500000 101.14498901]
[74.62110138 86.71041107]
[63.61791992 76.51580811]
[52.61473465 66.32120514]
[41.61154938 56.12660217]
[30.60836411 45.93199921]
[19.60518074 35.73739624]
[8.60199642 25.54279327]
[-2.40118837 15.34819031]
[-7.06514645 14.49605274]
[-10.76274490 12.33414841]
[-13.18606567 9.36476040]
[-14.23740578 6.13917923]
[-14.02572441 3.17926764]
[-23.70642471 -8.27865696]
[-31.77815628 -12.91690063]
[-33.50116348 -20.23680496]
[-42.82793808 -31.98462486]
[-52.15471268 -43.73244476]
[-61.48148727 -55.48026276]
[-70.80826569 -67.22808075]
[-86.53591919 -68.78259277]
[-96.49310303 -81.05573273]
[-94.77239990 -96.76606750]
[-82.39466858 -106.59294128]
[-66.70339966 -104.70623779]
[-57.00794601 -92.22530365]
[-59.06044388 -76.55485535]
[-49.73366928 -64.80703735]
[-40.40689468 -53.05921936]
[-31.08011818 -41.31139755]
[-21.75334358 -29.56357956]
[-12.24850082 -17.95935822]
[-2.56780005 -6.50143290]
[7.79341459 4.34500599]
[18.79659843 14.53960896]
[29.79978371 24.73421288]
[40.80296707 34.92881393]
[51.80615234 45.12341690]
[62.80933762 55.31801987]
[73.81252289 65.51262665]
[84.81570435 75.70722961]
[98.96105194 71.37095642]
[113.38349915 74.67050171]
[124.23635864 84.72583008]
[128.62500000 98.85501099]
[125.37889862 113.28958893]
[136.38208008 123.48419189]
[147.38526917 133.67878723]
[158.38845825 143.87339783]
[171.78991699 135.79504395]
[186.90335083 131.79600525]
[202.51751709 132.18843079]
[217.38345337 136.93283081]
[230.31430054 145.64193726]
[240.28005981 157.61227417]
[246.48962402 171.88101196]
[248.45365906 187.30335999]
[246.02302551 202.64447021]
[239.40019226 216.67825317]
[250.70915222 226.53256226]
[262.01812744 236.38687134]
[273.32708740 246.24118042]
[284.63604736 256.09548950]
[295.94500732 265.94979858]
[307.25396729 275.80410767]
[318.56292725 285.65841675]
[327.24560547 289.01660156]
[330.06060791 295.98980713]
[341.06378174 306.18441772]
[356.84506226 305.33163452]
[368.55114746 315.94967651]
[369.23703003 331.73907471]
[358.49578857 343.33224487]
[342.70001221 343.85116577]
[331.22106934 332.98797607]
[330.86917114 317.18759155]
[319.86599731 306.99298096]
[308.70861816 296.96737671]
[297.39965820 287.11306763]
[286.09069824 277.25875854]
[274.78173828 267.40444946]
[263.47277832 257.55014038]
[252.16381836 247.69583130]
[240.85485840 237.84153748]
[229.54588318 227.98722839]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 66]
[11 65]
[12 64]
[13 63]
[18 58]
[19 57]
[20 56]
[21 55]
[22 54]
[23 53]
[24 52]
[25 51]
[30 50]
[31 49]
[33 48]
[34 47]
[35 46]
[36 45]
[37 44]
[76 102]
[77 101]
[78 100]
[79 99]
[80 98]
[81 97]
[82 96]
[83 95]
[85 94]
[86 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
