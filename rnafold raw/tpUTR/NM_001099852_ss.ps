%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 13:46:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCUGCCUAUUUGGGUGGAUAUAUCAAACUCUUUUUUCUGAACACUUGAAAACUAAAACCUAGGUCUU\
) } def
/len { sequence length } bind def

/coor [
[91.07199860 224.88420105]
[75.84822083 222.85139465]
[63.69025421 213.46633911]
[57.86851883 199.25357056]
[59.94903564 184.03623962]
[69.37215424 171.90774536]
[83.60311127 166.13058472]
[85.58841705 151.26254272]
[87.57372284 136.39451599]
[89.55903625 121.52647400]
[91.54434204 106.65843964]
[90.21864319 91.71713257]
[85.64655304 77.43091583]
[81.07447052 63.14469910]
[76.50238037 48.85847855]
[71.93029785 34.57226181]
[67.35820770 20.28604317]
[62.78612137 5.99982548]
[58.21403503 -8.28639221]
[43.18956757 -7.11928511]
[28.30102921 -9.44911480]
[14.35133553 -15.15023518]
[2.09277844 -23.91519356]
[-7.81355429 -35.27130508]
[-14.83342648 -48.60615158]
[-18.58826637 -63.20059967]
[-18.87557793 -78.26758575]
[-15.67986774 -92.99457550]
[-9.17347717 -106.58735657]
[0.29271302 -118.31288147]
[12.20820236 -127.53881073]
[25.93040466 -133.76760864]
[40.71929932 -136.66336060]
[55.77733612 -136.06988525]
[70.29245758 -132.01921082]
[83.48188019 -124.72978210]
[94.63431549 -114.59470367]
[103.14833069 -102.16054535]
[108.56476593 -88.09786224]
[110.59152985 -73.16505432]
[109.11931610 -58.16740799]
[104.22751617 -43.91373825]
[96.17994690 -31.17272949]
[85.41059875 -20.63148308]
[72.50025177 -12.85847855]
[77.07234192 1.42773902]
[81.64442444 15.71395683]
[86.21651459 30.00017548]
[90.78859711 44.28639221]
[95.36068726 58.57261276]
[99.93276978 72.85882568]
[104.50485992 87.14505005]
[112.10049438 74.21035767]
[125.00145721 66.55755615]
[139.99426270 66.09288025]
[153.34437561 72.93206787]
[161.72644043 85.37155914]
[163.05259705 100.31282043]
[156.99249268 114.03416443]
[145.05564880 123.11775970]
[130.21539307 125.30100250]
[116.16823578 120.04005432]
[106.41237640 108.64374542]
[104.42707062 123.51177979]
[102.44176483 138.37982178]
[100.45645905 153.24786377]
[98.47114563 168.11589050]
[110.68771362 177.42454529]
[116.59843445 191.60055542]
[114.61335754 206.83062744]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 67]
[8 66]
[9 65]
[10 64]
[11 63]
[12 52]
[13 51]
[14 50]
[15 49]
[16 48]
[17 47]
[18 46]
[19 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
