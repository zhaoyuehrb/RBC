%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 07:11:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCCACCUGUGGCCCUGCUCCUUAGCAGAAAAAGCAUCUGGAGUUGAAUGCUGUUCCCAGAAGCAACAUGUGUAUCUGCCGAUUGUUCUCCAUGGUUCCAACAAAUUGCAAAUAAAACUGUAUGGAAACGAUGAGCAAG\
) } def
/len { sequence length } bind def

/coor [
[88.95581055 205.40913391]
[83.40909576 219.34591675]
[77.86237335 233.28269958]
[72.31565094 247.21948242]
[66.76893616 261.15625000]
[61.22221756 275.09304810]
[64.12306213 291.23358154]
[51.42246628 301.60791016]
[36.18571091 295.54382324]
[34.08706284 279.27951050]
[47.28543472 269.54632568]
[52.83215332 255.60954285]
[58.37887192 241.67276001]
[63.92559052 227.73597717]
[69.47231293 213.79919434]
[75.01902771 199.86241150]
[80.09695435 185.74806213]
[84.70040894 171.47192383]
[89.30387115 157.19578552]
[93.90732574 142.91964722]
[98.51078796 128.64350891]
[88.05629730 124.85607910]
[80.21903229 117.59098053]
[76.01001740 108.24054718]
[75.79103088 98.42125702]
[79.26342773 89.69729614]
[68.71607208 79.03177643]
[58.16871262 68.36625671]
[47.62135696 57.70074081]
[37.07400131 47.03522491]
[23.59446716 50.12599182]
[10.45815659 46.16386032]
[1.08509207 36.29265213]
[-2.14024806 23.17968178]
[1.52509618 10.29561710]
[-8.78202629 -0.60223746]
[-19.08914757 -11.50009251]
[-29.39627075 -22.39794731]
[-32.87142181 -7.80605459]
[-46.34780502 -1.21916926]
[-59.99636078 -7.44146585]
[-63.86244965 -21.93468475]
[-55.12631989 -34.12812805]
[-40.15901184 -35.12817764]
[-49.19068527 -47.10435867]
[-58.22235870 -59.08053589]
[-67.25403595 -71.05671692]
[-81.02525330 -69.79016876]
[-93.51625824 -75.46784973]
[-101.48998260 -86.50028992]
[-102.93875885 -99.92615509]
[-97.58883667 -112.20671844]
[-106.35145569 -124.38114166]
[-115.11406708 -136.55557251]
[-130.27970886 -142.79541016]
[-132.19018555 -159.08288574]
[-118.88017273 -168.66285706]
[-104.04187012 -161.68025208]
[-102.93964386 -145.31817627]
[-94.17703247 -133.14375305]
[-85.41441345 -120.96933746]
[-69.04241943 -121.43833923]
[-55.46432114 -111.98571014]
[-50.11498642 -96.15499878]
[-55.27785110 -80.08839417]
[-46.24618149 -68.11221313]
[-37.21450806 -56.13603210]
[-28.18283272 -44.15985107]
[-18.49841499 -32.70507050]
[-8.19129372 -21.80721474]
[2.11582875 -10.90935993]
[12.42295074 -0.01150492]
[28.58635712 -2.65849614]
[43.30321884 4.90000725]
[50.71484756 19.87646866]
[47.73951721 36.48786926]
[58.28687286 47.15338516]
[68.83422852 57.81890488]
[79.38158417 68.48442078]
[89.92894745 79.14994049]
[108.42342377 76.46463013]
[124.35799408 88.72782898]
[126.84104156 110.11071014]
[141.76571655 111.61215210]
[156.69038391 113.11358643]
[171.61505127 114.61502075]
[186.53971863 116.11645508]
[201.46438599 117.61788940]
[210.39846802 115.35105133]
[216.70352173 119.32264709]
[231.59104919 121.15621948]
[246.47856140 122.98978424]
[261.36605835 124.82335663]
[276.25357056 126.65692139]
[291.14108276 128.49049377]
[296.25711060 114.32102203]
[304.39834595 101.64551544]
[315.15634155 91.09976959]
[327.99157715 83.21276093]
[342.26016235 78.38008881]
[357.24645996 76.84416199]
[372.19869995 78.68202972]
[386.36694336 83.80149841]
[399.04046631 91.94577026]
[409.58361816 102.70635223]
[417.46752930 115.54347229]
[422.29672241 129.81324768]
[423.82901001 144.79991150]
[421.98754883 159.75170898]
[416.86462402 173.91870117]
[408.71728516 186.59027100]
[397.95416260 197.13079834]
[385.11511230 205.01159668]
[370.84417725 209.83734131]
[355.85714722 211.36599731]
[340.90579224 209.52088928]
[326.74005127 204.39456177]
[314.07046509 196.24414062]
[303.53253174 185.47845459]
[295.65484619 172.63751221]
[290.83255005 158.36540222]
[289.30752563 143.37800598]
[274.42001343 141.54443359]
[259.53250122 139.71087646]
[244.64498901 137.87730408]
[229.75747681 136.04373169]
[214.86996460 134.21015930]
[199.96295166 132.54255676]
[185.03828430 131.04112244]
[170.11361694 129.53968811]
[155.18894958 128.03825378]
[140.26428223 126.53681946]
[125.33960724 125.03537750]
[112.78692627 133.24696350]
[108.18346405 147.52310181]
[103.58000946 161.79924011]
[98.97654724 176.07537842]
[94.37309265 190.35153198]
[95.51417542 195.61163330]
[94.56555176 200.29219055]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[26 80]
[27 79]
[28 78]
[29 77]
[30 76]
[35 72]
[36 71]
[37 70]
[38 69]
[44 68]
[45 67]
[46 66]
[47 65]
[52 61]
[53 60]
[54 59]
[83 133]
[84 132]
[85 131]
[86 130]
[87 129]
[88 128]
[90 127]
[91 126]
[92 125]
[93 124]
[94 123]
[95 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
