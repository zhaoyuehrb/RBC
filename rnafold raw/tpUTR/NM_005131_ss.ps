%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 23:21:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUUUUUUUUUUCUUUUUAUUAAAACUGUGAUAGAUUUUGUUACCAAGCAGCAUUUGAUAAGAGGUCCACUGGUUUUGGUAAACAAUAAACAUUUUUAUAACAA\
) } def
/len { sequence length } bind def

/coor [
[105.24441528 503.58682251]
[91.51429749 497.47256470]
[78.87847900 489.33398438]
[67.63317871 479.36184692]
[58.04199600 467.78991699]
[50.32975769 454.88943481]
[44.67725372 440.96286011]
[41.21698761 426.33663940]
[40.03007507 411.35357666]
[41.14433289 396.36495972]
[44.53364182 381.72210693]
[50.11855698 367.76828003]
[57.76815796 354.83059692]
[67.30312347 343.21228027]
[78.49994659 333.18572998]
[91.09615326 324.98599243]
[104.79646301 318.80523682]
[119.27973938 314.78836060]
[117.52214813 299.89169312]
[115.76454926 284.99499512]
[114.00695801 270.09832764]
[112.24936676 255.20166016]
[110.49176788 240.30499268]
[108.73417664 225.40830994]
[106.97658539 210.51164246]
[105.21898651 195.61497498]
[103.46139526 180.71829224]
[101.70380402 165.82162476]
[99.94620514 150.92495728]
[97.97012329 136.05567932]
[95.77597046 121.21703339]
[93.58182526 106.37837219]
[90.68558502 103.56859589]
[89.11322784 99.44935608]
[89.43934631 94.67603302]
[91.90760803 90.14366913]
[91.02729034 75.16952515]
[90.14698029 60.19537735]
[89.26666260 45.22123337]
[88.38635254 30.24708557]
[87.50603485 15.27294064]
[83.82944489 6.73418427]
[86.82624817 -0.15248221]
[86.38589478 -15.14601707]
[85.94554901 -30.13955307]
[77.80646515 -43.70663834]
[85.16680145 -56.65556335]
[84.72645569 -71.64910126]
[84.28610229 -86.64263153]
[83.84575653 -101.63616943]
[73.20688629 -113.64424896]
[76.10379791 -129.42358398]
[90.31421661 -136.86962891]
[104.93713379 -130.27040100]
[108.75509644 -114.68827057]
[98.83929443 -102.07651520]
[99.27964020 -87.08297729]
[99.71998596 -72.08944702]
[100.16033173 -57.09590912]
[108.26792908 -44.60126495]
[100.93908691 -30.57989883]
[101.37943268 -15.58636379]
[101.81977844 -0.59282911]
[102.48017883 14.39262581]
[103.36049652 29.36677170]
[104.24081421 44.34091949]
[105.12112427 59.31506348]
[106.00144196 74.28920746]
[106.88175201 89.26335907]
[108.42047882 104.18422699]
[110.61462402 119.02288055]
[112.80877686 133.86154175]
[117.22225189 142.04376221]
[114.84288025 149.16735840]
[116.60047150 164.06402588]
[118.35807037 178.96070862]
[120.11566162 193.85737610]
[121.87325287 208.75404358]
[123.63085175 223.65072632]
[125.38844299 238.54739380]
[127.14603424 253.44407654]
[128.90362549 268.34072876]
[130.66122437 283.23742676]
[132.41882324 298.13409424]
[134.17640686 313.03076172]
[149.19683838 313.56661987]
[163.95941162 316.38916016]
[178.11808777 321.43222046]
[191.34094238 328.57760620]
[203.31803894 337.65777588]
[213.76860046 348.45993042]
[222.44764709 360.73080444]
[229.15174866 374.18276978]
[233.72373962 388.50051880]
[236.05644226 403.34835815]
[236.09518433 418.37829590]
[233.83905029 433.23797607]
[229.34092712 447.57910156]
[222.70625305 461.06542969]
[214.09057617 473.38088989]
[203.69583130 484.23675537]
[191.76570129 493.37857056]
[178.57984924 500.59201050]
[164.44737244 505.70797729]
[149.69953918 508.60659790]
[134.68206787 509.21987915]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 85]
[19 84]
[20 83]
[21 82]
[22 81]
[23 80]
[24 79]
[25 78]
[26 77]
[27 76]
[28 75]
[29 74]
[30 72]
[31 71]
[32 70]
[36 69]
[37 68]
[38 67]
[39 66]
[40 65]
[41 64]
[43 63]
[44 62]
[45 61]
[47 59]
[48 58]
[49 57]
[50 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
