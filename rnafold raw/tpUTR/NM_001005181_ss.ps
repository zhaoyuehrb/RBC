%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:13:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCAGCUUUAGGAAUCCAGUAAGAUGUUAGGAAAUGACAGAGGUUUUAGUUCUCAAUAGAUCAGGGUUAUAAUCUGCACUUACCACACUCCCUAGG\
) } def
/len { sequence length } bind def

/coor [
[67.08771515 388.50433350]
[56.66456223 399.78500366]
[41.99275970 404.32745361]
[27.01894760 400.90979004]
[15.77100468 390.45132446]
[11.27457047 375.76535034]
[14.73916435 360.80233765]
[25.23282814 349.58721924]
[39.93281937 345.13684082]
[43.27063370 330.51293945]
[46.60844421 315.88900757]
[49.94625854 301.26507568]
[53.28407288 286.64117432]
[40.27980423 277.73745728]
[31.63505936 264.51385498]
[28.68200302 248.95472717]
[31.89604378 233.40834045]
[40.81959534 220.23229980]
[54.12695312 211.43618774]
[69.82118988 208.37496948]
[72.68857574 193.65158081]
[75.55595398 178.92819214]
[78.42333221 164.20480347]
[81.29071045 149.48143005]
[79.44493103 142.17811584]
[84.49317169 134.33544922]
[87.83098602 119.71153259]
[91.16880035 105.08761597]
[89.73696899 96.98851013]
[94.85507202 90.05206299]
[98.65988922 75.54264069]
[102.46471405 61.03321838]
[94.75043488 47.50075150]
[98.81575012 32.84033585]
[111.76443481 25.56934738]
[115.56925201 11.05992413]
[119.37406921 -3.44949865]
[123.17888641 -17.95892143]
[126.98371124 -32.46834564]
[117.32743835 -44.47095490]
[116.59876251 -59.68024063]
[124.86778259 -72.25351715]
[138.78823853 -77.48410797]
[142.59304810 -91.99353027]
[146.39787292 -106.50295258]
[150.20268250 -121.01237488]
[154.00750732 -135.52180481]
[142.65968323 -145.79241943]
[137.39556885 -160.16418457]
[139.42481995 -175.33457947]
[148.28111267 -187.81753540]
[161.92935181 -194.74459839]
[177.23327637 -194.52394104]
[190.67614746 -187.20629883]
[199.16888428 -174.47320557]
[200.75993347 -159.25061035]
[195.08366394 -145.03657532]
[183.44447327 -135.09738159]
[168.51693726 -131.71697998]
[164.71211243 -117.20755768]
[160.90728760 -102.69813538]
[157.10247803 -88.18871307]
[153.29765320 -73.67929077]
[162.86006165 -62.29077148]
[163.89508057 -47.27768326]
[155.79670715 -34.38312149]
[141.49313354 -28.66352654]
[137.68830872 -14.15410328]
[133.88349915 0.35532013]
[130.07867432 14.86474323]
[126.27385712 29.37416649]
[133.98828125 42.06365967]
[130.33634949 56.83247757]
[116.97413635 64.83803558]
[113.16931152 79.34746552]
[109.36449432 93.85688782]
[105.79272461 108.42543030]
[102.45491028 123.04934692]
[99.11709595 137.67326355]
[96.01409912 152.34880066]
[93.14672089 167.07218933]
[90.27934265 181.79557800]
[87.41195679 196.51896667]
[84.54457855 211.24235535]
[96.71809387 218.81935120]
[105.53108978 230.09214783]
[109.92807770 243.67716980]
[109.39397430 257.91601562]
[104.01432800 271.07785034]
[94.46245575 281.56988525]
[81.91520691 288.13009644]
[67.90798950 289.97897339]
[64.57017517 304.60290527]
[61.23236465 319.22683716]
[57.89455032 333.85073853]
[54.55673599 348.47467041]
[65.87002563 358.86239624]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 96]
[10 95]
[11 94]
[12 93]
[13 92]
[20 84]
[21 83]
[22 82]
[23 81]
[24 80]
[26 79]
[27 78]
[28 77]
[30 76]
[31 75]
[32 74]
[35 71]
[36 70]
[37 69]
[38 68]
[39 67]
[43 63]
[44 62]
[45 61]
[46 60]
[47 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
