%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 11:38:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUCUGUCGGAAGGGGGCGCCCACGUCUUUUUAAUGGUCCUAACACACCAGUGGAAUAAAUCUCUAAGAUUCCA\
) } def
/len { sequence length } bind def

/coor [
[80.42808533 128.21125793]
[69.39222717 138.37048340]
[58.35636902 148.52970886]
[47.32051086 158.68891907]
[36.28465271 168.84814453]
[25.24879456 179.00737000]
[26.14746475 194.61911011]
[16.75945854 207.12509155]
[1.51750600 210.62036133]
[-12.38160896 203.45455933]
[-18.37514877 189.01116943]
[-13.63314819 174.10990906]
[-0.39463463 165.78671265]
[15.08957100 167.97151184]
[26.12542915 157.81228638]
[37.16128922 147.65306091]
[48.19714737 137.49385071]
[59.23300552 127.33461761]
[70.26886749 117.17539978]
[65.89015198 96.06899261]
[74.95514679 76.51192474]
[93.89105988 66.21219635]
[94.51093292 51.22501373]
[95.13081360 36.23782730]
[95.75068665 21.25063896]
[84.36933899 31.02125359]
[69.67962646 34.05644989]
[55.35797501 29.59660530]
[44.98868179 18.75788879]
[41.16688919 4.25292778]
[44.84908295 -10.28809834]
[55.11371613 -21.22598267]
[69.39183807 -25.82328224]
[84.11004639 -22.92942238]
[95.58478546 -13.26865578]
[100.94429016 0.74156088]
[107.53224182 -12.73430347]
[114.12018585 -26.21016884]
[120.70813751 -39.68603516]
[113.31721497 -53.32985687]
[115.39083862 -68.70774841]
[126.13166046 -79.90660858]
[141.40960693 -82.62023926]
[155.35000610 -75.80519104]
[162.59248352 -62.08199310]
[160.35217285 -46.72749710]
[149.49049377 -35.64581680]
[134.18400574 -33.09808350]
[127.59605408 -19.62221909]
[121.00810242 -6.14635515]
[114.42015076 7.32950974]
[110.73786926 21.87051392]
[110.11799622 36.85770035]
[109.49812317 51.84488678]
[108.87825012 66.83206940]
[120.17771912 72.21881104]
[128.79531860 81.29801178]
[133.58566284 92.86293793]
[133.91206360 105.37646484]
[129.73114014 117.17539978]
[140.76699829 127.33461761]
[151.80285645 137.49385071]
[162.83871460 147.65306091]
[173.87457275 157.81228638]
[189.62287903 164.09140015]
[187.94871521 180.96249390]
[171.27349854 184.02413940]
[163.71534729 168.84814453]
[152.67948914 158.68891907]
[141.64363098 148.52970886]
[130.60777283 138.37048340]
[119.57191467 128.21125793]
[112.22131348 132.08697510]
[104.15489197 134.08329773]
[95.84510803 134.08329773]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[3 17]
[4 16]
[5 15]
[6 14]
[22 55]
[23 54]
[24 53]
[25 52]
[36 51]
[37 50]
[38 49]
[39 48]
[60 72]
[61 71]
[62 70]
[63 69]
[64 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
