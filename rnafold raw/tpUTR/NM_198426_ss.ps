%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 03:28:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCCCCUGCCACUCCGAGAUAACCAGUGGAUGCCCAGGAUCUUUUACCACAACCCCUCUGUAAUAAAAGAGAUUUGACACUA\
) } def
/len { sequence length } bind def

/coor [
[65.22077942 170.03640747]
[61.58848572 155.48283386]
[62.51489639 140.51145935]
[67.91371918 126.51672363]
[77.28211975 114.80207062]
[89.74822235 106.45826721]
[74.84253693 104.77880096]
[59.93685150 103.09933472]
[45.03116989 101.41986847]
[30.03379250 101.13938904]
[15.07573509 102.26033783]
[0.11767823 103.38128662]
[-14.84037876 104.50224304]
[-29.79843521 105.62319183]
[-35.82001495 119.69440460]
[-47.69839859 129.34648132]
[-62.70401764 132.36145020]
[-77.38868713 128.04647827]
[-88.37799072 117.39312744]
[-93.14665222 102.84945679]
[-90.59886932 87.75748444]
[-81.32011414 75.58525085]
[-67.44257355 69.12984467]
[-52.15519714 69.87465668]
[-38.97091675 77.64855194]
[-30.91938782 90.66513062]
[-15.96133041 89.54418182]
[-1.00327313 88.42323303]
[13.95478344 87.30227661]
[28.91283989 86.18132782]
[30.45011902 84.11729431]
[32.89498138 82.52848053]
[36.07423401 81.75506592]
[39.69865799 82.07039642]
[43.38858795 83.64402771]
[46.71063614 86.51418304]
[61.61632156 88.19364929]
[76.52200317 89.87312317]
[91.42768860 91.55258942]
[97.46778870 88.29302979]
[104.27388000 88.87222290]
[117.26425934 81.37222290]
[130.25463867 73.87222290]
[143.24502563 66.37222290]
[156.23541260 58.87221909]
[169.22578430 51.37221909]
[182.21617126 43.87221909]
[186.41046143 28.87069702]
[199.69139099 21.44968414]
[213.96720886 25.54074860]
[226.95758057 18.04074860]
[239.94796753 10.54074955]
[242.48504639 -4.88965130]
[254.38064575 -15.03995514]
[270.01803589 -15.11749840]
[282.01370239 -5.08566809]
[284.70370483 10.31881237]
[276.81784058 23.82241821]
[262.07962036 29.04916000]
[247.44796753 23.53112984]
[234.45758057 31.03112984]
[221.46720886 38.53113174]
[217.87226868 52.93987656]
[204.80500793 60.73099899]
[189.71617126 56.86259842]
[176.72578430 64.36260223]
[163.73541260 71.86260223]
[150.74502563 79.36260223]
[137.75463867 86.86260223]
[124.76425934 94.36260223]
[111.77388000 101.86260223]
[126.53573608 104.52487183]
[139.80715942 111.51552582]
[150.35206604 122.18346405]
[157.18832397 135.53507996]
[159.67918396 150.32682800]
[157.59268188 165.18099976]
[151.12312317 178.71409607]
[140.87309265 189.66566467]
[127.79726410 197.01568604]
[113.11351776 200.07957458]
[98.18946838 198.57197571]
[84.41513824 192.63330078]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 39]
[7 38]
[8 37]
[9 36]
[10 30]
[11 29]
[12 28]
[13 27]
[14 26]
[41 71]
[42 70]
[43 69]
[44 68]
[45 67]
[46 66]
[47 65]
[50 62]
[51 61]
[52 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
