%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 08:24:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUAGAAACAACCUCAGUGAACAUUAAUUAAGAAAGUAUUGACUAAAUAAUGGAAUAAUUGCAUUCUGGAAUACUAUCAAACUACCAGCAAUGAAUUUG\
) } def
/len { sequence length } bind def

/coor [
[81.63994598 113.64195251]
[77.32520294 103.00801086]
[62.63074493 99.99590302]
[47.93628311 96.98380280]
[33.24182129 93.97169495]
[26.31721497 106.69507599]
[16.08179092 116.92285919]
[3.38135552 123.82267761]
[-10.73821068 126.83666229]
[-25.11708450 125.72650146]
[-38.57676697 120.59229279]
[-50.01667404 111.86355591]
[-58.50413895 100.26333618]
[-63.35042953 86.74831390]
[-64.16664124 72.42990112]
[-78.76032257 68.96225739]
[-93.35399628 65.49461365]
[-107.94767761 62.02696991]
[-122.54135132 58.55932617]
[-137.13502502 55.09167862]
[-145.21130371 67.89997864]
[-157.01039124 77.38998413]
[-171.25242615 82.53229523]
[-186.39251709 82.76910400]
[-200.78840637 78.07472229]
[-212.87852478 68.95837402]
[-221.35142517 56.40892410]
[-225.28802490 41.78764343]
[-224.26132202 26.68053818]
[-218.38269043 12.72631741]
[-208.28977966 1.43862772]
[-195.07740784 -5.95812559]
[-180.17875671 -8.66159821]
[-165.20989990 -6.37853718]
[-151.79457092 0.64340758]
[-141.38795471 11.64254856]
[-135.11889648 25.42577934]
[-133.66738892 40.49800110]
[-119.07370758 43.96564484]
[-104.48003387 47.43329239]
[-89.88635254 50.90093613]
[-75.29267883 54.36857986]
[-60.69899750 57.83622742]
[-52.74230576 44.43953705]
[-41.03909683 34.12365341]
[-26.71425438 27.89594078]
[-11.14951706 26.37005234]
[4.14978695 29.70549393]
[17.70033836 37.59103012]
[28.18463326 49.27370071]
[34.57907867 63.63068771]
[36.25392532 79.27722931]
[50.94838715 82.28933716]
[65.64285278 85.30144501]
[80.33731079 88.31355286]
[94.76762390 77.73306274]
[112.40000916 80.77932739]
[122.44392395 95.58811951]
[137.29722595 97.68085480]
[152.15052795 99.77358246]
[167.00381470 101.86631012]
[176.11990356 99.94544983]
[182.28370667 104.26205444]
[197.06472778 106.81570435]
[211.84576416 109.36936188]
[226.62678528 111.92301178]
[241.44575500 114.24649048]
[256.29904175 116.33921814]
[271.15234375 118.43194580]
[286.00564575 120.52468109]
[293.38378906 107.26091003]
[305.05761719 97.56111145]
[319.44833374 92.73709869]
[334.60977173 93.44128418]
[348.49139404 99.57843018]
[359.21588135 110.31853485]
[365.33282471 124.20909882]
[366.01492310 139.37152100]
[361.16995239 153.75521851]
[351.45318604 165.41491699]
[338.17868042 172.77372742]
[323.14172363 174.83644104]
[308.37597656 171.32408142]
[295.87832642 162.71168518]
[287.33901978 150.16398621]
[283.91290283 135.37797546]
[269.05960083 133.28524780]
[254.20631409 131.19252014]
[239.35301208 129.09979248]
[232.16386414 131.32276917]
[224.07313538 126.70404816]
[209.29211426 124.15039062]
[194.51107788 121.59674072]
[179.73004150 119.04308319]
[164.91108704 116.71961212]
[150.05778503 114.62688446]
[135.20449829 112.53414917]
[120.35119629 110.44142151]
[112.71869659 119.01129150]
[101.88467407 122.79566956]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 55]
[3 54]
[4 53]
[5 52]
[15 43]
[16 42]
[17 41]
[18 40]
[19 39]
[20 38]
[58 98]
[59 97]
[60 96]
[61 95]
[63 94]
[64 93]
[65 92]
[66 91]
[67 89]
[68 88]
[69 87]
[70 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
