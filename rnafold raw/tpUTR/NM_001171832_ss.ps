%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 03:43:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCUCUCUUCCAACCUUGAGUCUCAACAUCAUGGGAUCCUGCAGUUCUAUUAAAUCAUUCUUGGCAA\
) } def
/len { sequence length } bind def

/coor [
[90.81382751 231.18986511]
[77.24291229 238.03813171]
[62.08393860 239.16676331]
[47.64852524 234.40364075]
[36.13797760 224.47511292]
[29.30756378 210.89520264]
[28.19887924 195.73475647]
[32.98098373 181.30561829]
[42.92464828 169.80813599]
[56.51353073 162.99560547]
[71.67542267 161.90686035]
[76.37558746 147.66226196]
[81.07574463 133.41766357]
[85.77590179 119.17307281]
[77.24224854 107.21223450]
[77.32902527 92.51946259]
[86.00336456 80.66025543]
[99.97949982 76.12677002]
[104.67965698 61.88217163]
[109.37982178 47.63757706]
[108.35618591 32.67254639]
[101.76016235 19.20063019]
[95.16413879 5.72871351]
[88.56812286 -7.74320173]
[81.97209930 -21.21511841]
[75.37608337 -34.68703461]
[60.34568024 -39.57197571]
[53.24630356 -53.69197464]
[58.28988266 -68.66988373]
[72.48415375 -75.61958313]
[87.40790558 -70.41793060]
[94.20713806 -56.15097427]
[88.84799194 -41.28305435]
[95.44401550 -27.81113815]
[102.04003906 -14.33922291]
[108.63605499 -0.86730713]
[115.23207855 12.60460854]
[121.82810211 26.07652473]
[127.27995300 12.10235977]
[136.82543945 0.53154200]
[149.50856018 -7.47710609]
[164.05909729 -11.12151527]
[179.01982117 -10.03669739]
[192.89239502 -4.33129644]
[204.28749084 5.42328930]
[212.06385803 18.25013351]
[215.44271851 32.86462402]
[214.08567810 47.80311203]
[208.12861633 61.56949997]
[198.16816711 72.78507996]
[185.20184326 80.32661438]
[170.52825928 83.43880463]
[155.61695862 81.80996704]
[141.96131897 75.60323334]
[130.92895508 65.44020844]
[123.62441254 52.33773422]
[118.92425537 66.58232880]
[114.22409821 80.82692719]
[122.75775146 92.78776550]
[122.67097473 107.48053741]
[113.99663544 119.33974457]
[100.02050018 123.87322998]
[95.32034302 138.11782837]
[90.62017822 152.36242676]
[85.92002106 166.60702515]
[97.45664978 176.50523376]
[104.32276917 190.06712341]
[105.47133636 205.22460938]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 65]
[12 64]
[13 63]
[14 62]
[18 58]
[19 57]
[20 56]
[21 38]
[22 37]
[23 36]
[24 35]
[25 34]
[26 33]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
