%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 15:32:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUCUCUGCCAACAUGAGGACAGAAGGACUGGUGCGACCCCCCACCCCCGCCCCUGGGCUACCAUCUGCAUGGGGCUGGGGUCCUCCUGUGCUAUUUGUACAAAUAAACCUGAGGCAGGA\
) } def
/len { sequence length } bind def

/coor [
[93.07312775 446.16162109]
[77.91287994 449.99581909]
[63.85747528 443.14163208]
[57.54344559 428.83544922]
[61.95208359 413.83218384]
[75.00176239 405.21591187]
[76.54407501 390.29544067]
[78.08639526 375.37493896]
[79.62870789 360.45443726]
[81.17102051 345.53393555]
[82.71334076 330.61343384]
[80.92782593 328.30685425]
[80.00533295 325.11282349]
[80.30483246 321.37844849]
[82.04450989 317.57977295]
[85.25936127 314.26614380]
[80.28904724 300.22531128]
[90.68560028 288.29962158]
[93.75388336 273.61679077]
[96.82216644 258.93392944]
[98.17224884 243.99482727]
[97.78603363 228.99980164]
[97.39981079 214.00477600]
[97.01359558 199.00973511]
[96.62737274 184.01470947]
[96.04812622 169.02590942]
[95.27594757 154.04579163]
[86.89372253 141.73370361]
[93.91034698 127.55352020]
[93.13816833 112.57341003]
[85.69504547 100.73738098]
[91.88172150 88.19876862]
[91.10954285 73.21865845]
[82.67208862 59.83509445]
[89.74394226 46.72639084]
[86.14101410 38.20029068]
[89.14978027 31.35161591]
[88.76355743 16.35658836]
[88.37734222 1.36156130]
[87.99111938 -13.63346577]
[87.60490417 -28.62849236]
[87.21868134 -43.62351990]
[76.40134430 -51.76693726]
[72.34517670 -64.48017120]
[76.32923126 -77.01139069]
[86.67066193 -84.81270599]
[86.67066193 -99.81270599]
[86.67066193 -114.81270599]
[86.67066193 -129.81271362]
[77.08140564 -145.46838379]
[86.30115509 -160.34060669]
[85.91493988 -175.33563232]
[73.29820251 -184.17442322]
[68.36292267 -198.57914734]
[72.80348206 -212.95779419]
[84.71669006 -221.85800171]
[84.33046722 -236.85302734]
[83.94425201 -251.84805298]
[74.92491150 -265.54415894]
[82.51729584 -280.07989502]
[98.91100311 -280.50213623]
[107.24160004 -266.37652588]
[98.93927765 -252.23426819]
[99.32549286 -237.23924255]
[99.71171570 -222.24421692]
[112.06729889 -213.96910095]
[117.24216461 -199.83810425]
[113.05496979 -185.19841003]
[100.90996552 -175.72186279]
[101.29618835 -160.72682190]
[109.88588715 -152.10446167]
[110.26179504 -139.53688049]
[101.67066193 -129.81271362]
[101.67066193 -114.81270599]
[101.67066193 -99.81270599]
[101.67066193 -84.81270599]
[114.04415894 -73.50204468]
[114.47471619 -56.40720749]
[102.21371460 -44.00973892]
[102.59992981 -29.01471138]
[102.98615265 -14.01968479]
[103.37236786 0.97534257]
[103.75858307 15.97036934]
[104.14480591 30.96539688]
[104.72405243 45.95420837]
[113.10627747 58.26629639]
[106.08965302 72.44647980]
[106.86183167 87.42658997]
[114.30495453 99.26261902]
[108.11827850 111.80123138]
[108.89045715 126.78134155]
[117.32791138 140.16490173]
[110.25605774 153.27360535]
[111.02823639 168.25372314]
[114.63117218 176.77981567]
[111.62240601 183.62849426]
[112.00862122 198.62351990]
[112.39483643 213.61854553]
[112.78105927 228.61357117]
[113.16727448 243.60859680]
[123.01515198 232.29403687]
[137.36462402 227.92454529]
[151.84718323 231.83038330]
[162.05377197 242.82244873]
[164.87712097 257.55435181]
[159.45768738 271.54110718]
[147.44535828 280.52465820]
[132.49714661 281.77001953]
[119.16386414 274.89810181]
[111.50499725 262.00222778]
[108.43672180 276.68505859]
[105.36843872 291.36788940]
[110.11928558 306.45895386]
[99.94219208 317.33444214]
[97.63383484 332.15576172]
[96.09152222 347.07626343]
[94.54920959 361.99673462]
[93.00688934 376.91723633]
[91.46457672 391.83773804]
[89.92226410 406.75823975]
[100.93354034 417.86166382]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 120]
[7 119]
[8 118]
[9 117]
[10 116]
[11 115]
[16 114]
[18 112]
[19 111]
[20 110]
[21 100]
[22 99]
[23 98]
[24 97]
[25 96]
[26 94]
[27 93]
[29 91]
[30 90]
[32 88]
[33 87]
[35 85]
[37 84]
[38 83]
[39 82]
[40 81]
[41 80]
[42 79]
[46 76]
[47 75]
[48 74]
[49 73]
[51 70]
[52 69]
[56 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
