%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 12:13:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGGGGUACCUAGUCCCCAGCCUGCUCCCUAGCCAGAGGCUCUAAUGUACAAUAAAGCAAUGUGGUAGUUCCAA\
) } def
/len { sequence length } bind def

/coor [
[103.70800018 139.50306702]
[93.41311646 128.59365845]
[100.60673523 115.43187714]
[93.23611450 114.04479218]
[81.02838135 122.76094818]
[68.82065582 131.47709656]
[56.61292267 140.19325256]
[56.61930466 155.71032715]
[47.47653580 168.24784851]
[32.70019913 172.98487854]
[17.97209740 168.09994507]
[8.95548439 155.47138977]
[9.11743355 139.95515442]
[18.39567184 127.51755524]
[33.22252655 122.94109344]
[47.89677048 127.98551941]
[60.10449982 119.26936340]
[72.31223297 110.55321503]
[84.51996613 101.83705902]
[87.29412842 87.09582520]
[79.08990479 74.53833008]
[70.88568878 61.98083496]
[62.68146133 49.42333603]
[54.47724152 36.86583710]
[45.51065445 24.84085083]
[35.81616592 13.39459038]
[26.12167740 1.94832933]
[10.51159954 -3.07735848]
[7.32391930 -19.16371155]
[19.83784676 -29.76246643]
[35.18012619 -23.97053528]
[37.56793594 -7.74615908]
[47.26242447 3.70010185]
[56.95691299 15.14636326]
[60.71920395 15.71542931]
[64.33417511 18.32479477]
[66.75124359 22.85123062]
[67.03473663 28.66161728]
[75.23896027 41.21911240]
[83.44318390 53.77661133]
[91.64740753 66.33410645]
[99.85162354 78.89160156]
[95.47852325 64.54322815]
[94.76834106 49.56004715]
[97.76471710 34.86236954]
[104.28359985 21.35296059]
[113.92458344 9.86159611]
[126.09549713 1.09410596]
[140.04876709 -4.41099072]
[154.92736816 -6.31555748]
[169.81741333 -4.50261164]
[183.80430603 0.91649169]
[196.02896118 9.60889816]
[205.74049377 21.04069901]
[212.34240723 34.50972748]
[215.42919922 49.18868256]
[214.81126404 64.17594910]
[210.52656555 78.55097198]
[202.83827209 91.43080902]
[192.21861267 102.02434540]
[179.31988525 109.68089294]
[164.93435669 113.93019104]
[149.94561768 114.51121521]
[135.27607727 111.38890839]
[143.48030090 123.94640350]
[151.68452454 136.50390625]
[167.02786255 141.19020081]
[172.79617310 156.16036987]
[164.56448364 169.93058777]
[148.64746094 171.93751526]
[137.25526428 160.64161682]
[139.12702942 144.70811462]
[130.92280579 132.15061951]
[122.71858215 119.59312439]
[115.34796906 118.20604706]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 19]
[5 18]
[6 17]
[7 16]
[20 42]
[21 41]
[22 40]
[23 39]
[24 38]
[25 34]
[26 33]
[27 32]
[64 74]
[65 73]
[66 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
