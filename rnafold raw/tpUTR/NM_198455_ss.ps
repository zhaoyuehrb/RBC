%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 11:23:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGCUCCGCUGGGUGAGUCCACAGCUGUCCCUCUUGUGAUCAUGGGACUCAGCAGCACUGACCACGUCCUUCCACGCUCUCUCACCUGCCCCCAACUGGGGGCCCAUGACUUGGCAUUAGCAUGUUCCAAAUAA\
) } def
/len { sequence length } bind def

/coor [
[103.47709656 129.61441040]
[110.22992706 116.22041321]
[122.04582977 106.97628021]
[107.04983521 107.32275391]
[99.63014221 110.66766357]
[91.70436859 107.50000000]
[76.70436859 107.50000000]
[59.81789017 118.40052032]
[43.43446732 108.23002625]
[28.45047188 108.92278290]
[13.46647644 109.61553192]
[-1.51751792 110.30828857]
[-10.81825161 119.32902527]
[-23.37102890 119.54953766]
[-32.38569641 111.39945984]
[-47.38169479 111.74592590]
[-62.37769318 112.09239197]
[-77.37369537 112.43885803]
[-92.36968994 112.78533173]
[-107.36569214 113.13179779]
[-122.36168671 113.47826385]
[-130.95783997 116.82968140]
[-137.70715332 113.65551758]
[-152.70715332 113.65551758]
[-161.11300659 124.24815369]
[-173.90650940 127.98297882]
[-186.32205200 123.70352936]
[-193.86938477 113.19592285]
[-208.86538696 112.84944916]
[-223.86138916 112.50298309]
[-237.83659363 119.91946411]
[-250.38174438 111.89025116]
[-264.50195312 120.23003387]
[-278.64959717 111.93691254]
[-278.27081299 95.54213715]
[-263.75524902 87.91125488]
[-250.03527832 96.89425659]
[-237.13269043 89.45299530]
[-223.51490784 97.50698090]
[-208.51892090 97.85345459]
[-193.52291870 98.19992065]
[-181.91415405 86.08741760]
[-164.80032349 86.07490540]
[-152.70715332 98.65551758]
[-137.70715332 98.65551758]
[-122.70815277 98.48226929]
[-107.71215820 98.13580322]
[-92.71615601 97.78932953]
[-77.72016144 97.44286346]
[-62.72416306 97.09639740]
[-47.72816467 96.74992371]
[-32.73216629 96.40345764]
[-18.30991364 86.47260284]
[-2.21026969 95.32428741]
[12.77372456 94.63153839]
[27.75771904 93.93878937]
[42.74171448 93.24603271]
[48.99700165 85.02812195]
[58.96726990 81.58372498]
[69.38851166 84.29903412]
[76.70436859 92.50000000]
[91.70436859 92.50000000]
[106.70336914 92.32675171]
[121.69936371 91.98028564]
[136.50369263 89.56534576]
[150.83241272 85.12825775]
[165.16113281 80.69116211]
[179.48985291 76.25407410]
[190.38369751 64.78085327]
[204.83013916 68.40708923]
[219.15885925 63.97000122]
[221.62158203 51.60998917]
[229.09179688 41.54976654]
[240.08361816 35.68634415]
[252.45477295 35.09217453]
[263.82400513 39.81951904]
[272.02947998 48.90229416]
[286.54782104 45.13168716]
[301.06616211 41.36108017]
[306.81945801 27.07102013]
[319.73309326 19.00306320]
[334.74368286 20.07347107]
[346.10961914 29.66269684]
[360.62799072 25.89208984]
[375.14633179 22.12148094]
[380.89962769 7.83142376]
[393.81323242 -0.23653382]
[408.82385254 0.83387423]
[420.18978882 10.42309952]
[434.70816040 6.65249205]
[449.22650146 2.88188434]
[463.74484253 -0.88872308]
[478.26321411 -4.65933084]
[492.78155518 -8.42993832]
[504.08044434 -20.31552887]
[519.95751953 -16.21068192]
[524.07983398 -0.33810952]
[512.20672607 10.97384548]
[496.55215454 6.08841276]
[482.03381348 9.85902023]
[467.51547241 13.62962818]
[452.99710083 17.40023613]
[438.47875977 21.17084312]
[423.96041870 24.94145012]
[418.69702148 38.84953308]
[406.10427856 47.08889389]
[390.89675903 46.32436752]
[378.91693115 36.63983154]
[364.39859009 40.41043854]
[349.88024902 44.18104935]
[344.61685181 58.08913040]
[332.02410889 66.32849121]
[316.81658936 65.56396484]
[304.83679199 55.87942886]
[290.31842041 59.65003586]
[275.80007935 63.42064667]
[270.17996216 80.08728027]
[255.59080505 90.18846893]
[237.70053101 89.57321167]
[223.59594727 78.29872131]
[209.26722717 82.73580933]
[199.39826965 93.89165497]
[183.92694092 90.58279419]
[169.59822083 95.01988220]
[155.26950073 99.45697784]
[140.94078064 103.89406586]
[155.07984924 108.90273285]
[165.73985291 119.45566559]
[170.89097595 133.54345703]
[169.55239868 148.48361206]
[161.97898865 161.43133545]
[149.61282349 169.92120361]
[134.80857849 172.33665466]
[120.38516998 168.21774292]
[109.08900452 158.34877014]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 64]
[4 63]
[6 62]
[7 61]
[9 57]
[10 56]
[11 55]
[12 54]
[15 52]
[16 51]
[17 50]
[18 49]
[19 48]
[20 47]
[21 46]
[23 45]
[24 44]
[28 41]
[29 40]
[30 39]
[32 37]
[65 126]
[66 125]
[67 124]
[68 123]
[70 121]
[71 120]
[77 116]
[78 115]
[79 114]
[83 110]
[84 109]
[85 108]
[89 104]
[90 103]
[91 102]
[92 101]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
