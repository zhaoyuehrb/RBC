%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:05:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUGGAGCACAGCCAUGAACCUGCUCACGACAAGACGCACCCAUGCUUCUCAGGGUCAAGGCUUUAUGUUAAAGCUUCCUGUCGGGGCUGCUAGGUCAGCAUUAAAGUAAGGCAACCAACAGUGUC\
) } def
/len { sequence length } bind def

/coor [
[27.85468102 188.37290955]
[21.14376831 202.84454346]
[9.43612576 213.62287903]
[-5.46783257 219.09031677]
[-21.29136467 218.44293213]
[-35.62919617 211.80853271]
[-46.49290085 222.15164185]
[-57.35660934 232.49475098]
[-68.22031403 242.83786011]
[-79.08402252 253.18096924]
[-89.42713165 264.04467773]
[-99.22472382 275.40280151]
[-101.75914001 291.60491943]
[-117.15316772 297.25790405]
[-129.57073975 286.54641724]
[-126.23773956 270.48956299]
[-110.58285522 265.60522461]
[-100.78526306 254.24708557]
[-100.92224884 251.34616089]
[-99.85630798 248.21519470]
[-97.49327087 245.33605957]
[-93.92396545 243.21557617]
[-89.42713165 242.31726074]
[-78.56342316 231.97415161]
[-67.69971466 221.63104248]
[-56.83600998 211.28793335]
[-45.97230148 200.94483948]
[-51.53152084 188.00099182]
[-52.32307434 173.90609741]
[-48.23072433 160.36386108]
[-39.72982788 149.01823425]
[-27.83220291 141.25389099]
[-13.96573544 138.02713013]
[0.19698241 139.74827576]
[12.94039631 146.22947693]
[24.05466270 136.15609741]
[35.16893005 126.08271027]
[46.28319550 116.00932312]
[57.39746475 105.93594360]
[57.94957352 90.94610596]
[47.60646439 80.08239746]
[37.26335526 69.21869659]
[26.92024803 58.35498810]
[18.64449501 54.23955154]
[16.46067238 47.09544754]
[6.38728762 35.98118210]
[-9.50140095 33.76101685]
[-17.54771042 19.88166237]
[-11.57920074 4.99017286]
[3.82559848 0.51002461]
[16.84944344 9.87800312]
[17.50155449 25.90779686]
[27.57493973 37.02206421]
[37.78395462 48.01187897]
[48.12706375 58.87558365]
[58.47016907 69.73928833]
[68.81327820 80.60299683]
[79.12535858 70.96837616]
[91.98835754 66.14723206]
[105.34157562 66.60607910]
[117.15886688 71.98876953]
[125.75605774 81.21355438]
[139.61424255 75.47329712]
[153.47244263 69.73304749]
[167.33062744 63.99279785]
[181.18882751 58.25254440]
[195.04701233 52.51229477]
[208.90521240 46.77204132]
[218.69396973 34.34261322]
[233.41337585 36.62042999]
[247.27156067 30.88017845]
[261.12976074 25.13992691]
[274.98794556 19.39967537]
[284.77670288 6.97024393]
[299.49612427 9.24806118]
[313.35430908 3.50780964]
[327.21249390 -2.23244190]
[338.01498413 -17.08460617]
[355.28656006 -14.24236584]
[368.99972534 -20.32098579]
[382.71286011 -26.39960480]
[396.42599487 -32.47822571]
[405.90676880 -45.14414215]
[420.67764282 -43.22824097]
[434.39080811 -49.30686188]
[443.60919189 -62.86980438]
[459.94216919 -61.39822769]
[466.58779907 -46.40596771]
[456.70959473 -33.31577301]
[440.46942139 -35.59371567]
[426.75625610 -29.51509476]
[418.25634766 -17.28396416]
[402.50460815 -18.76507950]
[388.79147339 -12.68645954]
[375.07833862 -6.60783958]
[361.36517334 -0.52921981]
[356.67807007 10.69391155]
[345.21569824 15.84054470]
[332.95275879 11.62575150]
[319.09457397 17.36600304]
[305.23635864 23.10625458]
[296.43884277 35.12510300]
[280.72821045 33.25786591]
[266.87002563 38.99811935]
[253.01182556 44.73836899]
[239.15362549 50.47862244]
[230.35609436 62.49747086]
[214.64546204 60.63023376]
[200.78727722 66.37048340]
[186.92907715 72.11074066]
[173.07089233 77.85099030]
[159.21269226 83.59123993]
[145.35449219 89.33148956]
[131.49630737 95.07174683]
[132.01708984 105.08338928]
[129.38127136 114.92934418]
[123.74630737 123.62301636]
[115.57502747 130.26089478]
[105.59886932 134.11607361]
[94.75283813 134.71673584]
[84.08799744 131.90144348]
[74.66961670 125.84485626]
[67.47084808 117.05020905]
[56.35658264 127.12359619]
[45.24231339 137.19697571]
[34.12804794 147.27035522]
[23.01378059 157.34375000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 27]
[7 26]
[8 25]
[9 24]
[10 23]
[11 18]
[12 17]
[35 127]
[36 126]
[37 125]
[38 124]
[39 123]
[40 57]
[41 56]
[42 55]
[43 54]
[45 53]
[46 52]
[62 114]
[63 113]
[64 112]
[65 111]
[66 110]
[67 109]
[68 108]
[70 106]
[71 105]
[72 104]
[73 103]
[75 101]
[76 100]
[77 99]
[79 96]
[80 95]
[81 94]
[82 93]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
