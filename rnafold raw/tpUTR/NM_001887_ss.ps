%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 17:39:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCACACCUCACUCUGCUACCUUGCCCCAACCCUUCUUCAUGUUCAAUUAUUUCCCCCAUUUUUCCCAGGCAAAUAAAAUUCCCUAAAGCC\
) } def
/len { sequence length } bind def

/coor [
[101.12869263 202.64872742]
[86.17120361 201.71922302]
[71.50843811 198.62184143]
[57.45289993 193.42259216]
[44.30413818 186.23228455]
[32.34238434 177.20416260]
[21.82257652 166.53063965]
[12.96891403 154.43919373]
[5.97008896 141.18753052]
[0.97526330 127.05804443]
[-1.90911138 112.35189819]
[-2.62156224 97.38249969]
[-1.14690554 82.46888733]
[2.48343039 67.92890930]
[8.19207478 54.07243347]
[15.85736275 41.19478989]
[25.31592941 29.57041931]
[36.36618805 19.44707108]
[48.77263641 11.04049492]
[62.27085876 4.52985716]
[76.57318115 0.05391268]
[91.37477875 -2.29194450]
[106.36020660 -2.45771885]
[108.38087463 -17.32099152]
[110.40155029 -32.18426514]
[112.42221832 -47.04753876]
[114.44289398 -61.91081238]
[99.99298096 -66.03160858]
[86.27664185 -72.16696930]
[73.57311249 -80.19200134]
[62.14101791 -89.94330597]
[52.21310806 -101.22237396]
[43.99149704 -113.79956818]
[37.64356995 -127.41884613]
[33.29856110 -141.80291748]
[31.04492760 -156.65896606]
[30.92855453 -171.68450928]
[32.95180893 -186.57366943]
[37.07349777 -201.02333069]
[43.20971298 -214.73928833]
[51.23552322 -227.44232178]
[60.98754120 -238.87380981]
[72.26721954 -248.80102539]
[84.84492493 -257.02185059]
[98.46459198 -263.36895752]
[112.84893799 -267.71307373]
[127.70511627 -269.96575928]
[142.73068237 -270.08120728]
[157.61972046 -268.05703735]
[172.06910706 -263.93444824]
[185.78469849 -257.79739380]
[198.48722839 -249.77079773]
[209.91812134 -240.01808167]
[219.84463501 -228.73777771]
[228.06468201 -216.15956116]
[234.41093445 -202.53950500]
[238.75415039 -188.15489197]
[241.00595093 -173.29856873]
[241.12046814 -158.27301025]
[239.09536743 -143.38409424]
[234.97189331 -128.93495178]
[228.83398438 -115.21974945]
[220.80659485 -102.51770782]
[211.05316162 -91.08742523]
[199.77224731 -81.16160583]
[187.19352722 -72.94233704]
[173.57307434 -66.59693909]
[159.18820190 -62.25459671]
[144.33174133 -60.00372314]
[129.30616760 -59.89014053]
[127.28549194 -45.02686691]
[125.26482391 -30.16359329]
[123.24414825 -15.30031967]
[121.22347260 -0.43704700]
[135.62075806 3.72332597]
[149.25888062 9.93558216]
[161.84716797 18.06732368]
[173.11735535 27.94524384]
[182.82923889 39.35882187]
[190.77584839 52.06480408]
[196.78779602 65.79240417]
[200.73696899 80.24903870]
[202.53919983 95.12662506]
[202.15606689 110.10806274]
[199.59576416 124.87408447]
[194.91284180 139.10997009]
[188.20709229 152.51234436]
[179.62144470 164.79554749]
[169.33886719 175.69779968]
[157.57853699 184.98675537]
[144.59104919 192.46444702]
[130.65322876 197.97149658]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[23 74]
[24 73]
[25 72]
[26 71]
[27 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
