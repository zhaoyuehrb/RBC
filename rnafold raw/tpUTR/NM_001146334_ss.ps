%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:48:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACUGACCGGAAGCUGGAGCCAUCCUACGCCUUCCCUCAGCUCUGCUACUCAAUAAAUCGGUGUCCCUUCA\
) } def
/len { sequence length } bind def

/coor [
[115.84918213 221.25047302]
[126.33157349 210.02484131]
[121.88088226 195.70033264]
[117.43019104 181.37583923]
[112.97949982 167.05133057]
[108.52880859 152.72682190]
[104.07811737 138.40232849]
[80.67091370 133.43286133]
[64.68486786 115.62725830]
[62.25762939 91.82176971]
[48.49387741 85.85862732]
[34.73012161 79.89548492]
[20.96636772 73.93234253]
[7.20261383 67.96920013]
[-6.68625784 62.30358505]
[-26.16086197 66.62210083]
[-38.16153717 51.70099258]
[-52.57848358 47.55953598]
[-66.99542999 43.41808319]
[-82.77003479 47.90070343]
[-94.34937286 36.28817368]
[-89.82161713 20.52646446]
[-73.84453583 16.82987213]
[-62.85397339 29.00113487]
[-48.43702698 33.14258957]
[-34.02008057 37.28404617]
[-25.22151756 31.38519096]
[-14.40546322 31.47495461]
[-5.33882093 37.77375793]
[-1.32078433 48.29602432]
[6.28306627 47.72901154]
[13.16575623 54.20544815]
[26.92951012 60.16859055]
[40.69326401 66.13173676]
[54.45701981 72.09487915]
[68.22077179 78.05802155]
[77.80219269 68.39893341]
[90.13870239 62.66202164]
[103.69914246 61.55931473]
[116.80046082 65.22768402]
[125.82482147 53.24599075]
[134.84918213 41.26429749]
[139.54869080 24.97470284]
[156.50263977 24.98114777]
[161.18977356 41.27431107]
[146.83087158 50.28866196]
[137.80651855 62.27035141]
[128.78215027 74.25204468]
[132.59954834 79.29640198]
[135.54220581 84.89630127]
[137.53114319 90.90148163]
[138.51301575 97.15080261]
[138.46145630 103.47657776]
[137.37785339 109.70906067]
[135.29129028 115.68102264]
[132.25775146 121.23221588]
[128.35864258 126.21368408]
[123.69858551 130.49174500]
[118.40261841 133.95162964]
[122.85330963 148.27613831]
[127.30400085 162.60063171]
[131.75468445 176.92514038]
[136.20538330 191.24963379]
[140.65608215 205.57414246]
[155.65435791 208.88281250]
[166.97807312 219.25918579]
[171.58119202 233.91206360]
[168.22552490 248.89988708]
[157.81372070 260.19104004]
[143.14648438 264.74819946]
[128.16925049 261.34558105]
[116.91080475 250.89842224]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 64]
[3 63]
[4 62]
[5 61]
[6 60]
[7 59]
[10 36]
[11 35]
[12 34]
[13 33]
[14 32]
[15 30]
[17 26]
[18 25]
[19 24]
[40 48]
[41 47]
[42 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
