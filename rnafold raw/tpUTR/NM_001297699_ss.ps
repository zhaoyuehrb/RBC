%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 06:25:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACAGGGCAGUCUUGGUGUGCAGCCCCUCUCCUCUCUGUCCCCUGACACUCCACAGUGUGCCUGCAACCCAAGUGGCCUUAUCCGUGCAGUGGUGGCAGUUCAGAAAUAAAGGGCCCAUUUGUGGGAUGCCGCAUUCA\
) } def
/len { sequence length } bind def

/coor [
[225.00849915 154.92727661]
[210.96496582 149.65666199]
[196.92144775 144.38603210]
[182.28703308 147.15792847]
[172.08552551 135.06495667]
[158.04200745 129.79434204]
[143.99848938 124.52371979]
[129.95495605 119.25309753]
[115.91143799 113.98247528]
[105.03070068 120.57608795]
[92.33509064 119.74671173]
[82.40466309 111.79354095]
[78.82190704 99.58575439]
[64.90017700 94.00134277]
[50.97845459 88.41693878]
[37.05672836 82.83253479]
[23.13500404 77.24813080]
[8.74621201 83.21473694]
[-5.29284525 77.35303497]
[-10.89241886 63.59875107]
[-24.81414413 58.01434708]
[-38.73587036 52.42994308]
[-52.65759277 46.84553528]
[-66.57931519 41.26113129]
[-82.26801300 43.30451965]
[-91.19983673 31.38513184]
[-106.88853455 33.42852020]
[-115.82035828 21.50913429]
[-131.50904846 23.55252075]
[-140.44087219 11.63313389]
[-154.36259460 6.04872942]
[-165.01889038 16.85239983]
[-178.96202087 22.73727798]
[-194.05520630 22.83529091]
[-207.99826050 17.16264153]
[-218.67820740 6.61259842]
[-224.48950195 -7.18502331]
[-224.57525635 -22.11559296]
[-238.49699402 -27.69999886]
[-252.41871643 -33.28440094]
[-266.34042358 -38.86880875]
[-282.48876953 -36.01163864]
[-292.82870483 -48.74025726]
[-286.72341919 -63.96055222]
[-270.45349121 -66.01519012]
[-260.75604248 -52.79053116]
[-246.83430481 -47.20612717]
[-232.91258240 -41.62172318]
[-218.99085999 -36.03731918]
[-208.61090088 -46.76978683]
[-194.87551880 -52.72667313]
[-179.86535645 -52.97167206]
[-165.86724854 -47.43631363]
[-155.02569580 -36.93513870]
[-149.01449585 -23.04599380]
[-148.77819824 -7.87299538]
[-134.85647583 -2.28859067]
[-120.16355133 -4.73141241]
[-110.23595428 7.58740854]
[-95.54302979 5.14458704]
[-85.61543274 17.46340752]
[-70.92251587 15.02058601]
[-60.99491501 27.33940697]
[-47.07318878 32.92381287]
[-33.15146255 38.50821686]
[-19.22973824 44.09262085]
[-5.30801392 49.67702484]
[8.24440193 43.60515594]
[22.44256210 49.07021713]
[28.71940994 63.32640839]
[42.64113617 68.91081238]
[56.56285858 74.49521637]
[70.48458099 80.07962036]
[84.40631104 85.66402435]
[99.38666534 78.82673645]
[114.73769379 84.78540802]
[121.18206024 99.93894958]
[135.22558594 105.20957184]
[149.26910400 110.48019409]
[163.31262207 115.75081635]
[177.35615540 121.02143860]
[192.99504089 118.62654114]
[202.19206238 130.34251404]
[216.23559570 135.61314392]
[230.27911377 140.88375854]
[238.95718384 130.50666809]
[250.40350342 123.34035492]
[263.48449707 120.07781219]
[276.90991211 121.02623749]
[289.35992432 126.07820129]
[299.61508179 134.72355652]
[306.67568970 146.10096741]
[309.85916138 159.08369446]
[308.86608887 172.39112854]
[322.65899658 178.28651428]
[336.45190430 184.18188477]
[350.24484253 190.07725525]
[364.03775024 195.97264099]
[377.83065796 201.86801147]
[393.56124878 200.17715454]
[402.22338867 212.29396057]
[416.01629639 218.18933105]
[429.80920410 224.08471680]
[443.60214233 229.98008728]
[459.33273315 228.28923035]
[467.99484253 240.40603638]
[481.78778076 246.30140686]
[495.58068848 252.19679260]
[509.37359619 258.09216309]
[522.08587646 249.35139465]
[537.50646973 248.89382935]
[550.71466064 256.86544800]
[557.49584961 270.72256470]
[555.68603516 286.04342651]
[545.86291504 297.93917847]
[531.16082764 302.61392212]
[516.27130127 298.57601929]
[505.94543457 287.11389160]
[503.47824097 271.88507080]
[489.68530273 265.98971558]
[475.89239502 260.09432983]
[462.09948730 254.19895935]
[447.35543823 256.31149292]
[437.70675659 243.77299500]
[423.91384888 237.87762451]
[410.12091064 231.98225403]
[396.32800293 226.08688354]
[381.58398438 228.19940186]
[371.93527222 215.66091919]
[358.14236450 209.76554871]
[344.34945679 203.87017822]
[330.55654907 197.97479248]
[316.76361084 192.07942200]
[302.97070312 186.18405151]
[291.40753174 198.06649780]
[276.14761353 204.64277649]
[259.49624634 204.88899231]
[243.98062134 198.73983765]
[231.96618652 187.10276794]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 85]
[2 84]
[3 83]
[5 81]
[6 80]
[7 79]
[8 78]
[9 77]
[13 74]
[14 73]
[15 72]
[16 71]
[17 70]
[20 67]
[21 66]
[22 65]
[23 64]
[24 63]
[26 61]
[28 59]
[30 57]
[31 56]
[38 49]
[39 48]
[40 47]
[41 46]
[94 134]
[95 133]
[96 132]
[97 131]
[98 130]
[99 129]
[101 127]
[102 126]
[103 125]
[104 124]
[106 122]
[107 121]
[108 120]
[109 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
