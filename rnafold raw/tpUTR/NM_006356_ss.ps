%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 18:32:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUGAGUCCAGGAGGAAGCUCUGGCCCUUGUAUUACACAUUCUGGACAUUAAAAAUAAUAAUUAUACAGUU\
) } def
/len { sequence length } bind def

/coor [
[179.88438416 235.76954651]
[184.57678223 221.42926025]
[192.82165527 208.79263306]
[182.80070496 197.63107300]
[172.77973938 186.46951294]
[162.75878906 175.30795288]
[152.50000000 164.36459351]
[142.00811768 153.64448547]
[131.51625061 142.92439270]
[121.02436829 132.20428467]
[110.53249359 121.48418427]
[100.04061890 110.76408386]
[87.15916443 103.07851410]
[72.74221039 98.93705750]
[58.32526779 94.79560852]
[43.90832138 90.65415192]
[36.91403198 91.97335052]
[31.28263474 89.68714905]
[28.45887756 85.48689270]
[14.45131969 80.12142181]
[-1.65023756 83.23139191]
[-12.18844509 70.66642761]
[-6.32249928 55.35229492]
[9.91321850 53.04285431]
[19.81679344 66.11386108]
[33.82435226 71.47933197]
[48.04977417 76.23720551]
[62.46672058 80.37866211]
[76.88366699 84.52011108]
[91.30061340 88.66156769]
[84.28826141 75.40159607]
[83.47986603 60.42339706]
[89.02433014 46.48571777]
[99.90044403 36.15566254]
[114.10501099 31.33586311]
[129.02175903 32.91405487]
[141.90325928 40.59955978]
[150.37693787 52.97682571]
[152.88208008 67.76615906]
[148.95727539 82.24358368]
[139.32542419 93.74259949]
[125.76053619 100.14525604]
[110.76071930 100.27220917]
[121.25259399 110.99230957]
[131.74447632 121.71240997]
[142.23634338 132.43251038]
[152.72822571 143.15261841]
[163.22009277 153.87271118]
[171.72996521 157.98341370]
[173.92034912 165.28700256]
[183.94129944 176.44856262]
[193.96226501 187.61010742]
[203.98321533 198.77166748]
[217.43212891 191.93141174]
[232.19337463 188.80601501]
[247.26049805 189.60858154]
[261.60620117 194.28436279]
[274.25238037 202.51460266]
[284.33679199 213.73811340]
[291.17187500 227.18966675]
[294.29156494 241.95210266]
[293.48318481 257.01892090]
[288.80184937 271.36282349]
[280.56674194 284.00582886]
[269.33932495 294.08590698]
[255.88514709 300.91577148]
[241.12149048 304.02975464]
[226.05499268 303.21557617]
[211.71289062 298.52868652]
[199.07307434 290.28869629]
[188.99734497 279.05740356]
[182.17266846 265.60058594]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 53]
[4 52]
[5 51]
[6 50]
[7 48]
[8 47]
[9 46]
[10 45]
[11 44]
[12 43]
[13 30]
[14 29]
[15 28]
[16 27]
[19 26]
[20 25]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
