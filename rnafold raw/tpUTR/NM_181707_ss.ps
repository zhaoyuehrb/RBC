%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 19:11:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGACCAACUGGGACAAAGGGCCCGCUUGUCCUGGCUCUCAGAGCACGGGGAAUGGAGACCAAAAAGGGAAAAGAAUUGUCCUUAUCAAAAAGAUUCUCAGGUCUUAAUUAGGAAUAAAUGAGGUGGGAAAUAAACAUUCUUAUGACAGUUCUACCUUA\
) } def
/len { sequence length } bind def

/coor [
[266.32641602 184.33686829]
[263.25314331 177.03044128]
[250.51350403 169.11201477]
[237.77386475 161.19358826]
[225.03422546 153.27516174]
[212.29458618 145.35671997]
[199.55494690 137.43829346]
[196.01210022 137.90704346]
[192.06599426 136.65090942]
[188.54473877 133.49945068]
[186.32070923 128.66534424]
[174.06616211 120.01512909]
[161.81161499 111.36492920]
[149.55706787 102.71472168]
[137.30252075 94.06451416]
[133.92044067 112.59065247]
[122.34181213 126.40896606]
[106.19863129 132.41438293]
[89.99186707 129.77471924]
[77.84373474 119.96083069]
[72.44940186 106.16387939]
[57.46724319 105.43243408]
[42.47866440 104.84719086]
[27.48151970 104.55451202]
[12.48223400 104.40816498]
[-2.51705265 104.26182556]
[-9.26147652 114.12508392]
[-19.83250046 119.43231964]
[-31.53122711 118.95880127]
[-41.43330383 112.93939972]
[-47.11994171 102.98071289]
[-62.10209656 102.24926758]
[-77.08425140 101.51781464]
[-92.06640625 100.78636932]
[-107.04856110 100.05492401]
[-122.03713989 99.46968079]
[-137.03071594 99.03070068]
[-152.02429199 98.59172058]
[-167.01786804 98.15274048]
[-183.02716064 103.73295593]
[-192.82110596 89.89406586]
[-182.23428345 76.65187836]
[-166.57888794 83.15916443]
[-151.58531189 83.59814453]
[-136.59173584 84.03712463]
[-121.59815979 84.47610474]
[-114.78570557 81.51345825]
[-106.31711578 85.07276917]
[-91.33496094 85.80421448]
[-76.35280609 86.53565979]
[-61.37064743 87.26710510]
[-46.38849258 87.99855804]
[-33.64319992 74.90914917]
[-15.05874634 75.24707031]
[-2.37070727 89.26253510]
[12.62857914 89.40888214]
[27.62786484 89.55522919]
[34.38121796 86.46022034]
[42.91764450 89.85361481]
[49.73009872 86.89096832]
[58.19868851 90.45027924]
[73.18084717 91.18172455]
[74.46797180 83.98381805]
[77.73727417 76.94726562]
[82.96958923 70.62384796]
[89.99216461 65.56087494]
[98.48101044 62.25876617]
[95.86027527 47.48948288]
[93.23954010 32.72019958]
[90.61880493 17.95091629]
[87.99806976 3.18163204]
[73.72280884 -2.66820669]
[64.89509583 -15.32027912]
[64.33181000 -30.73735619]
[72.21269226 -43.99990463]
[86.02299500 -50.87589264]
[101.35588837 -49.17121506]
[113.31870270 -39.42983246]
[118.09415436 -24.76018524]
[114.15840912 -9.84329987]
[102.76734924 0.56089705]
[105.38808441 15.33018112]
[108.00881958 30.09946442]
[110.62955475 44.86874771]
[113.25028992 59.63803101]
[128.14759827 61.39019394]
[134.12362671 47.63202286]
[140.09963989 33.87385559]
[135.57548523 18.48192215]
[144.90620422 5.43135786]
[160.93406677 4.73343754]
[171.36387634 16.92354584]
[168.19476318 32.65047455]
[153.85780334 39.84986877]
[147.88179016 53.60803986]
[141.90577698 67.36621094]
[145.95272827 81.80996704]
[158.20727539 90.46017456]
[170.46182251 99.11038208]
[182.71636963 107.76058197]
[194.97091675 116.41078949]
[207.47337341 124.69865417]
[220.21301270 132.61708069]
[232.95265198 140.53550720]
[245.69229126 148.45393372]
[258.43194580 156.37237549]
[271.17156982 164.29080200]
[265.35263062 150.46546936]
[265.45205688 135.46578979]
[271.45379639 121.71881866]
[282.38668823 111.44888306]
[296.48178101 106.31772614]
[311.45834351 107.15559387]
[324.89312744 113.82691193]
[334.61230469 125.25222778]
[339.04321289 139.58285522]
[337.46896362 154.50001526]
[330.14422607 167.59002686]
[318.25421143 176.73484802]
[303.72280884 180.45477295]
[288.89883423 178.14701843]
[299.65951538 188.59727478]
[310.42019653 199.04751587]
[321.18087769 209.49775696]
[331.94155884 219.94801331]
[342.70223999 230.39825439]
[353.46292114 240.84849548]
[364.22360229 251.29875183]
[374.98431396 261.74899292]
[385.74499512 272.19924927]
[397.83200073 267.49545288]
[410.75308228 267.72940063]
[422.57586670 272.83059692]
[431.54577637 282.00323486]
[436.34631348 293.85025024]
[436.29226685 306.58596802]
[431.42724609 318.30526733]
[441.77203369 329.16738892]
[452.11679077 340.02951050]
[467.99310303 344.13739014]
[472.11239624 360.01077271]
[460.23706055 371.32043457]
[444.58346558 366.43203735]
[441.25463867 350.37429810]
[430.90988159 339.51214600]
[420.56512451 328.65002441]
[404.03393555 333.31115723]
[387.32556152 328.96472168]
[375.03555298 316.71368408]
[370.59091187 299.84762573]
[375.29473877 282.95993042]
[364.53405762 272.50967407]
[353.77337646 262.05944824]
[343.01269531 251.60919189]
[332.25201416 241.15893555]
[321.49130249 230.70869446]
[310.73062134 220.25845337]
[299.96994019 209.80819702]
[289.20925903 199.35795593]
[278.44857788 188.90771484]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 107]
[3 106]
[4 105]
[5 104]
[6 103]
[7 102]
[11 101]
[12 100]
[13 99]
[14 98]
[15 97]
[21 62]
[22 61]
[23 59]
[24 57]
[25 56]
[26 55]
[31 52]
[32 51]
[33 50]
[34 49]
[35 48]
[36 46]
[37 45]
[38 44]
[39 43]
[67 85]
[68 84]
[69 83]
[70 82]
[71 81]
[86 96]
[87 95]
[88 94]
[121 160]
[122 159]
[123 158]
[124 157]
[125 156]
[126 155]
[127 154]
[128 153]
[129 152]
[130 151]
[137 146]
[138 145]
[139 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
