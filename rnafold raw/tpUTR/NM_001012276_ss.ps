%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 23:46:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCUGCCAUCAGGGUGGAUAUAUUUCAAGCUUUCUUCUGGUCAUUUCGGAGCUGAAACCUAGGCC\
) } def
/len { sequence length } bind def

/coor [
[78.91712189 222.17329407]
[71.62355042 207.48535156]
[80.92105865 193.97651672]
[81.61381531 178.99252319]
[82.30656433 164.00852966]
[82.99931335 149.02453613]
[83.69207001 134.04054260]
[71.72180939 125.00102234]
[57.49940109 129.76789856]
[43.27698898 134.53477478]
[29.05458069 139.30163574]
[18.60582733 151.94108582]
[2.48260117 148.94549561]
[-2.72890711 133.39646912]
[8.33245564 121.28951263]
[24.28770828 125.07923126]
[38.51011658 120.31235504]
[52.73252869 115.54548645]
[66.95494080 110.77861786]
[66.38420105 97.37625122]
[70.88179779 85.16919708]
[79.46149445 75.93604279]
[90.56929779 70.89307404]
[102.35791016 70.53810120]
[112.99190521 74.61592865]
[123.09734344 63.53079987]
[133.20277405 52.44566345]
[143.30821228 41.36053085]
[153.41365051 30.27539635]
[157.05036926 21.51372147]
[164.25096130 18.92546844]
[174.85755920 8.31886673]
[175.68345642 3.72283864]
[177.73291016 -0.00374544]
[180.58125305 -2.58230734]
[183.75730896 -3.90189314]
[186.80258179 -4.01956034]
[189.32595825 -3.14138460]
[202.07920837 -11.03786755]
[214.83247375 -18.93434906]
[227.58572388 -26.83083153]
[240.33897400 -34.72731400]
[245.39694214 -49.95218277]
[260.50292969 -55.35480499]
[274.06893921 -46.79075241]
[275.68829346 -30.82963181]
[264.11874390 -19.71545219]
[248.23545837 -21.97405815]
[235.48220825 -14.07757473]
[222.72894287 -6.18109274]
[209.97569275 1.71538997]
[197.22242737 9.61187267]
[185.46415710 18.92546844]
[174.85755920 29.53207016]
[164.49877930 40.38083267]
[154.39334106 51.46596527]
[144.28791809 62.55109787]
[134.18247986 73.63623047]
[124.07704163 84.72136688]
[130.20904541 104.85433960]
[120.71679688 125.27127075]
[98.67606354 134.73329163]
[97.98330688 149.71728516]
[97.29055786 164.70127869]
[96.59780884 179.68528748]
[95.90505219 194.66928101]
[103.91646576 208.97834778]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 66]
[4 65]
[5 64]
[6 63]
[7 62]
[8 19]
[9 18]
[10 17]
[11 16]
[25 59]
[26 58]
[27 57]
[28 56]
[29 55]
[31 54]
[32 53]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
