%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 21:13:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUGCCUCUGCUCCUGAGCAUACUCGGUGCUAUCCUCUGGGUGAACAGGCCUUGGAGGACUCCUUGGACAGAGUCAUGA\
) } def
/len { sequence length } bind def

/coor [
[82.86325836 322.11346436]
[79.50437927 306.42596436]
[89.78614807 294.11074829]
[89.78614807 279.11074829]
[89.78614807 264.11074829]
[82.04885101 251.38348389]
[89.78614807 237.58331299]
[89.78614807 222.58331299]
[89.78614807 207.58331299]
[89.78614807 192.58331299]
[89.78614807 177.58331299]
[86.55288696 170.71726990]
[90.08829498 162.00450134]
[90.66992950 147.01577759]
[91.25155640 132.02705383]
[77.41232300 124.33237457]
[68.71109772 111.10280609]
[67.12715912 95.34768677]
[53.13390350 89.94502258]
[39.14064789 84.54235840]
[25.14739037 79.13969421]
[11.15413570 73.73702240]
[-4.03780222 78.89305115]
[-17.46261406 70.10931396]
[-18.82193565 54.12395477]
[-7.07300997 43.19956589]
[8.77139187 45.71640396]
[16.55680084 59.74377060]
[30.55005646 65.14643860]
[44.54331207 70.54910278]
[58.53656769 75.95176697]
[72.52982330 81.35443115]
[88.64479065 68.80181122]
[109.05823517 68.05918121]
[116.30492401 54.92580414]
[123.55161285 41.79243088]
[130.79830933 28.65905762]
[138.04499817 15.52568436]
[145.29168701 2.39231062]
[152.53837585 -10.74106312]
[159.52902222 -24.01248932]
[166.26101685 -37.41698074]
[172.99299622 -50.82146835]
[167.78456116 -65.74285126]
[174.72779846 -79.94028473]
[189.70341492 -84.99067688]
[203.82662964 -77.89772034]
[208.71841431 -62.86954880]
[201.47654724 -48.82210159]
[186.39749146 -44.08948135]
[179.66549683 -30.68499184]
[172.93351746 -17.28050232]
[172.74137878 -9.69370079]
[165.67173767 -3.49437404]
[158.42504883 9.63899994]
[151.17835999 22.77237320]
[143.93167114 35.90574646]
[136.68498230 49.03911972]
[129.43829346 62.17249298]
[122.19161224 75.30587006]
[128.78689575 83.45967102]
[132.50987244 93.26384735]
[132.98907471 103.74014282]
[130.17668152 113.84324646]
[124.35330963 122.56510162]
[116.10001373 129.03544617]
[106.24028015 132.60868835]
[105.65864563 147.59741211]
[105.07701874 162.58613586]
[104.78614807 177.58331299]
[104.78614807 192.58331299]
[104.78614807 207.58331299]
[104.78614807 222.58331299]
[104.78614807 237.58331299]
[112.52344513 251.38348389]
[104.78614807 264.11074829]
[104.78614807 279.11074829]
[104.78614807 294.11074829]
[115.06791687 306.42596436]
[111.70903778 322.11346436]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 78]
[4 77]
[5 76]
[7 74]
[8 73]
[9 72]
[10 71]
[11 70]
[13 69]
[14 68]
[15 67]
[18 32]
[19 31]
[20 30]
[21 29]
[22 28]
[34 60]
[35 59]
[36 58]
[37 57]
[38 56]
[39 55]
[40 54]
[41 52]
[42 51]
[43 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
