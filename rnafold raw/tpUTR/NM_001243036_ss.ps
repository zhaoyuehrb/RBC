%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 15:06:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGCUCCGUCUCUUGUAGCCAAGUCAGCUGAAUUUAUUUUCUUAAGCAAUAUUUGUGGUUAUUUCUUCCUUUUUUUCUUACGAAUAAAAUAUACUCAGAUGUUUAA\
) } def
/len { sequence length } bind def

/coor [
[137.99060059 147.30879211]
[123.81425476 152.21095276]
[109.30592346 148.40196228]
[99.36682892 137.17045593]
[89.72501373 148.66111755]
[80.08320618 160.15177917]
[77.13973999 175.69676208]
[63.03169250 180.47297668]
[53.38987732 191.96365356]
[53.35009384 208.00665283]
[40.69331360 217.86492920]
[25.12873459 213.97604370]
[18.59617043 199.32321167]
[26.10684395 185.14685059]
[41.89920807 182.32183838]
[51.54102325 170.83117676]
[53.79484177 156.10807800]
[68.59253693 150.50996399]
[78.23435211 139.01930237]
[87.87616730 127.52863312]
[87.00547028 120.07934570]
[76.44314575 130.73004150]
[61.53057480 129.11283875]
[53.49699783 116.44548798]
[58.39172745 102.26657104]
[72.52901459 97.25287628]
[85.26407623 105.18077087]
[84.39337921 97.73148346]
[72.36152649 88.77410889]
[60.32968140 79.81672668]
[47.91857147 71.39269257]
[35.15182114 63.51804733]
[22.38506889 55.64339828]
[7.06652117 59.53153610]
[-6.47174025 51.37733459]
[-10.19770432 36.01853561]
[-1.90082300 22.56723976]
[13.49651146 19.00386620]
[26.85933495 27.44249916]
[30.25971794 42.87664795]
[43.02647018 50.75129700]
[55.79322052 58.62594604]
[59.42697144 58.08411026]
[63.50498962 59.37763214]
[67.11243439 62.69475555]
[69.28706360 67.78488159]
[81.31890869 76.74225616]
[93.35075378 85.69963837]
[108.08342743 88.51892853]
[122.57231140 84.63664246]
[137.06120300 80.75435638]
[151.55009460 76.87207031]
[166.03897095 72.98978424]
[180.52786255 69.10749817]
[195.01675415 65.22521210]
[209.50564575 61.34292984]
[220.83302307 50.29752350]
[235.12918091 54.47711945]
[243.06323242 41.07232666]
[257.81234741 37.34153366]
[270.54287720 44.98805237]
[285.03173828 41.10576630]
[299.52062988 37.22348404]
[314.00952148 33.34119797]
[328.49841309 29.45890999]
[341.11572266 16.14611816]
[357.86422729 21.15843582]
[372.23406982 16.85638809]
[386.60391235 12.55433941]
[388.50588989 -2.55533814]
[396.39465332 -15.58174801]
[408.90341187 -24.26798630]
[423.86495972 -27.10910797]
[438.68710327 -23.61287308]
[450.80184937 -14.38502502]
[458.11019897 -1.02434516]
[459.34597778 14.15434933]
[454.29504395 28.52125740]
[443.83251953 39.58722305]
[429.77111816 45.43500519]
[414.54702759 45.05143738]
[400.79794312 38.50297546]
[390.90594482 26.92418289]
[376.53610229 31.22623062]
[362.16625977 35.52827835]
[356.07910156 46.09375381]
[344.02056885 49.73551559]
[332.38070679 43.94779968]
[317.89181519 47.83008575]
[303.40292358 51.71236801]
[288.91403198 55.59465408]
[274.42514038 59.47694016]
[267.22344971 72.46428680]
[252.58496094 76.60787201]
[239.01147461 68.96601105]
[228.72042847 79.73372650]
[213.38792419 75.83181763]
[198.89903259 79.71410370]
[184.41015625 83.59638977]
[169.92126465 87.47867584]
[155.43237305 91.36096191]
[140.94348145 95.24324036]
[126.45459747 99.12552643]
[111.96571350 103.00781250]
[126.81959534 100.91925049]
[140.32643127 107.44345856]
[147.92425537 120.37686920]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 20]
[5 19]
[6 18]
[8 16]
[9 15]
[28 48]
[29 47]
[30 46]
[31 42]
[32 41]
[33 40]
[49 104]
[50 103]
[51 102]
[52 101]
[53 100]
[54 99]
[55 98]
[56 97]
[58 95]
[61 92]
[62 91]
[63 90]
[64 89]
[65 88]
[67 85]
[68 84]
[69 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
