%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:38:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGGGCCAGUGGAAAGGGGUCGGGUUGCCCUUCCUUCCCCCCAACCACAGGAAUGGAGGCGGGACACAGGGCCAGUAGGAGCAAUAGGAUUUUAAUAAACAGAACCCAUCCCAA\
) } def
/len { sequence length } bind def

/coor [
[152.83735657 465.42807007]
[150.38970947 450.62911987]
[147.94206238 435.83016968]
[145.49443054 421.03118896]
[133.27311707 412.59466553]
[130.58003235 397.62130737]
[139.51190186 384.85964966]
[129.80151367 373.56552124]
[135.18325806 358.68777466]
[132.73561096 343.88882446]
[118.39260864 339.79690552]
[107.20255280 329.84240723]
[101.42053986 315.95971680]
[102.24284363 300.88177490]
[109.55984497 287.60214233]
[121.96717072 278.78060913]
[119.51953125 263.98165894]
[117.07188416 249.18269348]
[114.62424469 234.38374329]
[112.17659760 219.58479309]
[109.72895813 204.78582764]
[97.50763702 196.34930420]
[94.81455994 181.37593079]
[103.74643707 168.61428833]
[101.29878998 153.81533813]
[98.85115051 139.01638794]
[96.40350342 124.21743011]
[93.95586395 109.41847229]
[91.30631256 94.65433502]
[88.45535278 79.92775726]
[85.60439301 65.20117950]
[81.75509644 50.70349503]
[76.92542267 36.50228882]
[72.09574890 22.30108261]
[67.26607513 8.09987736]
[61.85868835 -5.89155531]
[55.88267136 -19.64972496]
[49.90665817 -33.40789413]
[43.93064117 -47.16606522]
[37.76726151 -60.84132385]
[31.41767502 -74.43112946]
[20.83676720 -77.60902405]
[13.95257092 -85.96497345]
[12.90226746 -96.51808167]
[17.79617691 -105.67648315]
[12.19819164 -119.59275055]
[6.60020638 -133.50901794]
[-8.03478146 -139.47499084]
[-14.08761692 -154.07424927]
[-7.96725988 -168.64535522]
[6.69518995 -174.54348755]
[21.20076180 -168.26942444]
[26.94355583 -153.54544067]
[20.51647568 -139.10700989]
[26.11446190 -125.19074249]
[31.71244621 -111.27446747]
[47.77638626 -100.65672302]
[45.00747681 -80.78071594]
[51.35706711 -67.19091034]
[57.11740875 -62.39816284]
[57.68880844 -53.14207840]
[63.66482544 -39.38391113]
[69.64083862 -25.62574005]
[75.61685944 -11.86757183]
[78.88767242 -10.23580456]
[81.48068237 -6.86512089]
[82.55289459 -2.11668301]
[81.46727753 3.27020240]
[86.29695129 17.47140884]
[91.12663269 31.67261314]
[95.95630646 45.87381744]
[105.44236755 34.25424194]
[120.44198608 34.14653015]
[130.09393311 45.62868118]
[127.40926361 60.38647461]
[114.33193207 67.73381042]
[100.33096313 62.35021973]
[103.18193054 77.07679749]
[106.03289032 91.80337524]
[110.59139252 98.59448242]
[108.75481415 106.97083282]
[111.20246124 121.76978302]
[113.65010071 136.56874084]
[116.09774780 151.36769104]
[118.54538727 166.16664124]
[131.11058044 175.37281799]
[133.38201904 190.41593933]
[124.52790833 202.33819580]
[126.97555542 217.13714600]
[129.42320251 231.93609619]
[131.87083435 246.73504639]
[134.31848145 261.53399658]
[136.76612854 276.33294678]
[151.35307312 280.68984985]
[162.55616760 290.90637207]
[168.18945312 304.91659546]
[167.18527222 319.92169189]
[159.79626465 332.94903564]
[147.53456116 341.44116211]
[149.98220825 356.24011230]
[159.86767578 368.59277344]
[154.31086731 382.41201782]
[166.87605286 391.61819458]
[169.14749146 406.66131592]
[160.29338074 418.58355713]
[162.74102783 433.38250732]
[165.18865967 448.18145752]
[167.63630676 462.98040771]
[181.18624878 470.78637695]
[186.49993896 485.49349976]
[181.06842041 500.15747070]
[167.45626831 507.85446167]
[152.09075928 504.95016479]
[142.22698975 492.81591797]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 108]
[2 107]
[3 106]
[4 105]
[7 102]
[9 100]
[10 99]
[16 93]
[17 92]
[18 91]
[19 90]
[20 89]
[21 88]
[24 85]
[25 84]
[26 83]
[27 82]
[28 81]
[29 79]
[30 78]
[31 77]
[32 71]
[33 70]
[34 69]
[35 68]
[36 64]
[37 63]
[38 62]
[39 61]
[40 59]
[41 58]
[45 56]
[46 55]
[47 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
