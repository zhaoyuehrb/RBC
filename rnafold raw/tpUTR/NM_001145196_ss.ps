%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 14:16:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGGUCAGUCACAAAUUCUUUUUUAGCCUUCCCUGGAGAAAAACAAGUCCCCAAGAAAAAAUUCACUCUAUGUAGAGAAAAAAUAUUUUCUCUCAUGUUAGUAAAUGCAGAACAUUUAAUAUUCCACAAUAUAUAUGGUUUUUUAUUUAUAA\
) } def
/len { sequence length } bind def

/coor [
[75.31292725 130.47393799]
[70.21459198 144.58091736]
[65.11624908 158.68789673]
[60.01791000 172.79487610]
[68.83522797 185.56336975]
[68.42980194 201.07514954]
[58.95751953 213.36561584]
[44.06066895 217.70883179]
[29.46739578 212.43473816]
[20.78911018 199.57135010]
[21.36278915 184.06488037]
[30.96784210 171.87789917]
[45.91093063 167.69653320]
[51.00926971 153.58955383]
[56.10760880 139.48257446]
[61.20594788 125.37559509]
[56.17989349 119.80883789]
[45.04621506 129.86076355]
[34.99447250 118.72692108]
[46.12778473 108.67532349]
[41.10172653 103.10857391]
[26.54893875 106.74399567]
[11.99615002 110.37942505]
[-2.55663967 114.01484680]
[-17.10942841 117.65027618]
[-25.27020836 130.91825867]
[-40.08059311 134.39779663]
[-52.67929840 126.53596497]
[-67.23208618 130.17138672]
[-75.14984131 143.84928894]
[-90.44158173 147.84153748]
[-104.03500366 139.77961731]
[-107.86535645 124.44651794]
[-99.66017151 110.93909454]
[-84.28742981 107.27106476]
[-70.86751556 115.61860657]
[-56.31472397 111.98317719]
[-48.89328766 99.12013245]
[-34.18647766 95.22598267]
[-20.74485588 103.09748840]
[-6.19206572 99.46205902]
[8.36072350 95.82662964]
[22.91351318 92.19120789]
[37.46630096 88.55577850]
[22.95211220 84.76918793]
[8.43792152 80.98259735]
[-6.29354334 83.80818176]
[-21.27095413 82.98528290]
[-35.60419083 78.56280518]
[-48.44142151 70.80358124]
[-59.01971436 60.16874695]
[-66.71039581 47.29034042]
[-71.05640411 32.93373108]
[-71.79944611 17.95214653]
[-68.89537048 3.23595262]
[-62.51676559 -10.34025383]
[-53.04271317 -21.96962929]
[-41.03627014 -30.96103096]
[-27.21098328 -36.78009033]
[-12.38850307 -39.08098221]
[2.55025887 -37.72695541]
[16.71748161 -32.79848480]
[29.27119446 -24.58847427]
[39.46532059 -13.58484745]
[46.69401550 -0.44156224]
[50.52767563 14.06026745]
[50.73845673 29.05878639]
[47.31457901 43.66060638]
[50.50600433 58.31716537]
[53.69743347 72.97372437]
[57.92341995 58.58133316]
[62.14941025 44.18893814]
[66.37539673 29.79654312]
[65.79288483 20.61890793]
[70.83716583 15.15529728]
[75.35585785 0.85210150]
[79.87454987 -13.45109463]
[84.39324188 -27.75428963]
[88.91193390 -42.05748749]
[93.43062592 -56.36068344]
[97.94932556 -70.66387939]
[102.46801758 -84.96707153]
[98.40126801 -100.85397339]
[110.31392670 -112.12431335]
[125.95127106 -107.18413544]
[129.22694397 -91.11546326]
[116.77120972 -80.44837952]
[112.25251770 -66.14518738]
[107.73382568 -51.84199142]
[103.21513367 -37.53879166]
[98.69644165 -23.23559761]
[94.17774963 -8.93240166]
[89.65904999 5.37079430]
[85.14035797 19.67399025]
[80.76779175 34.02253342]
[76.54180145 48.41492844]
[72.31581879 62.80731964]
[68.08982849 77.19971466]
[90.09745789 64.81342316]
[113.25057983 68.80979156]
[127.50463867 85.22294617]
[128.08041382 105.19844055]
[141.59494019 111.70669556]
[155.10948181 118.21495056]
[168.62400818 124.72320557]
[182.13853455 131.23146057]
[195.65307617 137.73971558]
[209.16760254 144.24797058]
[224.95822144 143.26458740]
[233.06800842 155.75779724]
[246.58253479 162.26605225]
[260.09707642 168.77432251]
[273.61160278 175.28257751]
[287.12612915 181.79083252]
[299.07922363 172.36291504]
[313.88003540 169.07310486]
[328.58129883 172.52162170]
[340.27938843 181.97233582]
[346.68768311 195.50907898]
[346.58352661 210.42399597]
[360.09805298 216.93225098]
[373.61257935 223.44050598]
[387.12710571 229.94876099]
[400.64166260 236.45701599]
[416.94561768 234.69259644]
[426.40588379 248.08795166]
[419.29055786 262.86306763]
[402.91928101 263.81857300]
[394.13339233 249.97154236]
[380.61886597 243.46328735]
[367.10433960 236.95503235]
[353.58978271 230.44677734]
[340.07525635 223.93852234]
[328.47924805 233.31925964]
[313.90029907 236.74908447]
[299.21780396 233.49557495]
[287.35552979 224.15176392]
[280.69946289 210.52885437]
[280.61788940 195.30535889]
[267.10336304 188.79710388]
[253.58882141 182.28884888]
[240.07427979 175.78059387]
[226.55975342 169.27233887]
[211.73579407 170.72125244]
[202.65934753 157.76251221]
[189.14482117 151.25425720]
[175.63027954 144.74600220]
[162.11575317 138.23774719]
[148.60122681 131.72949219]
[135.08668518 125.22122955]
[121.57215118 118.71297455]
[114.19525909 127.80936432]
[102.96786499 133.75794983]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[21 44]
[22 43]
[23 42]
[24 41]
[25 40]
[28 37]
[29 36]
[70 98]
[71 97]
[72 96]
[73 95]
[75 94]
[76 93]
[77 92]
[78 91]
[79 90]
[80 89]
[81 88]
[82 87]
[102 151]
[103 150]
[104 149]
[105 148]
[106 147]
[107 146]
[108 145]
[110 143]
[111 142]
[112 141]
[113 140]
[114 139]
[120 133]
[121 132]
[122 131]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
