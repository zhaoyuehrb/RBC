%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 18:19:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGAAAAUUCCAAAAUAAAUUAUAUCACCACAAUGGUGUAUACUCAGGAAUGUGUACAUUGUAAAUUACUUGAUUAAAUAGCCUGGAAAUCUUUUGUGUAUUCUCAGCUUAUCUAAACUUAAUGAAAUUUCUUUUAUAUUUAA\
) } def
/len { sequence length } bind def

/coor [
[107.87234497 118.11802673]
[102.38666534 123.44839478]
[97.05606079 137.46926880]
[91.72546387 151.49012756]
[86.39485931 165.51100159]
[93.09712219 179.82376099]
[87.63719177 194.65496826]
[73.25436401 201.20553589]
[58.48171234 195.58911133]
[52.08358383 181.13783264]
[57.85587692 166.42538452]
[72.37399292 160.18040466]
[77.70459747 146.15953064]
[83.03519440 132.13865662]
[88.36579132 118.11779785]
[76.96578979 127.86663818]
[65.56578827 137.61547852]
[54.16578674 147.36431885]
[46.57728195 160.30320740]
[35.21767044 170.09909058]
[21.30368233 175.70272827]
[6.32563353 176.51394653]
[-8.11218071 172.44583130]
[-20.46333122 163.93414307]
[-29.40489388 151.89053345]
[-33.97913742 137.60499573]
[-33.69612122 122.60767365]
[-28.58615303 108.50489807]
[-19.19656372 96.80722046]
[-6.53306818 88.76757812]
[8.04795170 85.24708557]
[22.98472977 86.62283325]
[36.67743301 92.74748230]
[51.61977005 94.06148529]
[66.56210327 95.37549591]
[81.50444031 96.68949890]
[69.02127838 88.37261200]
[56.53811264 80.05572510]
[44.05494690 71.73883820]
[31.57178307 63.42195511]
[19.08861923 55.10506821]
[6.60545444 46.78818130]
[-5.87770987 38.47129440]
[-18.36087418 30.15440559]
[-30.84403801 21.83751869]
[-43.32720184 13.52063274]
[-57.83067322 19.03687477]
[-72.79774475 14.94219685]
[-82.47327423 2.81108832]
[-83.13681793 -12.69179344]
[-74.53323364 -25.60527229]
[-59.97077560 -30.96385574]
[-45.04900360 -26.70705414]
[-35.50564575 -14.47169876]
[-35.01031494 1.03746819]
[-22.52715111 9.35435486]
[-10.04398727 17.67124176]
[2.43917727 25.98812866]
[14.92234135 34.30501556]
[27.40550613 42.62190247]
[39.88867188 50.93878937]
[52.37183380 59.25567627]
[64.85499573 67.57256317]
[77.33816528 75.88945007]
[89.82132721 84.20633698]
[80.56455231 72.40328217]
[77.58058929 57.70307922]
[81.50258636 43.22489166]
[91.49835968 32.04077148]
[105.44695282 26.52381897]
[120.38868713 27.84465027]
[133.15315247 35.72300339]
[141.03192139 48.48720932]
[142.35324097 63.42890167]
[136.83674622 77.37767029]
[125.65294647 87.37380981]
[111.17507935 91.29627228]
[126.15367889 92.09732056]
[141.13227844 92.89836121]
[156.11087036 93.69940948]
[171.08946228 94.50045776]
[186.06805420 95.30149841]
[201.04666138 96.10254669]
[209.47665405 83.34001160]
[223.07319641 76.55538177]
[238.14001465 77.48115540]
[250.63688660 85.76874542]
[257.26293945 99.10895538]
[272.24151611 99.91000366]
[287.22012329 100.71104431]
[302.19873047 101.51209259]
[317.17730713 102.31314087]
[332.15591431 103.11418152]
[338.31814575 100.41794586]
[344.04049683 101.17729950]
[347.75326538 104.28304291]
[362.68395996 105.72338867]
[377.61462402 107.16373444]
[392.54531860 108.60408020]
[407.47601318 110.04442596]
[412.46463013 95.81849670]
[420.71337891 83.20018768]
[431.74264526 72.92310333]
[444.91125488 65.58475494]
[459.45358276 61.61177444]
[474.52410889 61.23514938]
[489.24673462 64.47676849]
[502.76544189 71.14817810]
[514.29431152 80.86151123]
[523.16302490 93.05204010]
[528.85601807 107.01102448]
[531.04229736 121.92691040]
[529.59472656 136.93251038]
[524.59747314 151.15541077]
[516.34112549 163.76872253]
[505.30557251 174.03910828]
[492.13253784 181.36947632]
[477.58782959 185.33363342]
[462.51702881 185.70112610]
[447.79638672 182.45057678]
[434.28173828 175.77098083]
[422.75875854 166.05065918]
[413.89739990 153.85475159]
[408.21289062 139.89231873]
[406.03567505 124.97511292]
[391.10498047 123.53476715]
[376.17428589 122.09442139]
[361.24359131 120.65407562]
[346.31292725 119.21372986]
[331.35485840 118.09278107]
[316.37625122 117.29173279]
[301.39767456 116.49068451]
[286.41906738 115.68964386]
[271.44049072 114.88859558]
[256.46188354 114.08754730]
[248.45085144 126.64498138]
[235.14135742 133.55245972]
[220.06173706 132.86602783]
[207.26635742 124.66997528]
[200.24560547 111.08113861]
[185.26701355 110.28009796]
[170.28842163 109.47904968]
[155.30982971 108.67800903]
[140.33122253 107.87696075]
[125.35263062 107.07591248]
[110.37403870 106.27487183]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[36 65]
[37 64]
[38 63]
[39 62]
[40 61]
[41 60]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[77 146]
[78 145]
[79 144]
[80 143]
[81 142]
[82 141]
[83 140]
[88 135]
[89 134]
[90 133]
[91 132]
[92 131]
[93 130]
[96 129]
[97 128]
[98 127]
[99 126]
[100 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
