%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 17:07:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAGCAGCUAUGGAGGCCAAGAACAUGCCAGACCAAUAUUCUACAGUUUGCAACAAUGAAGUGCUUUACCUAAGUGUGGAUUGUGCCUCUUGUAAAGCUAAUAA\
) } def
/len { sequence length } bind def

/coor [
[89.79280853 397.18579102]
[76.24745178 390.15115356]
[67.10260010 377.93090820]
[64.17396545 362.95141602]
[68.04302216 348.18682861]
[77.94158173 336.56866455]
[91.90426636 330.40374756]
[92.34877014 315.41033936]
[92.79326630 300.41693115]
[93.23777008 285.42352295]
[78.85660553 272.49203491]
[78.36081696 252.85969543]
[92.49397278 238.79766846]
[91.60536194 223.82402039]
[90.71675110 208.85035706]
[89.82814026 193.87670898]
[88.93953705 178.90304565]
[88.05092621 163.92939758]
[86.12099457 162.35682678]
[84.65709686 159.96539307]
[83.95314026 156.91484070]
[84.24528503 153.46072388]
[85.68281555 149.93374634]
[88.30610657 146.71049500]
[89.63804626 131.76974487]
[90.96998596 116.82899475]
[81.75534058 105.64701843]
[83.04195404 91.21472931]
[94.08927155 81.83906555]
[95.42120361 66.89831543]
[96.75314331 51.95757294]
[90.27180481 37.52487183]
[99.10867310 25.53491402]
[100.44061279 10.59416676]
[86.28908539 5.38173580]
[73.97861481 -3.30951428]
[64.34490967 -14.88222504]
[58.04004669 -28.54368019]
[55.48835373 -43.36010742]
[56.85784912 -58.32050323]
[62.04920578 -72.40561676]
[70.70290375 -84.65738678]
[82.22414398 -94.24411774]
[95.82373047 -100.51693726]
[110.57209778 -103.05368805]
[111.90403748 -117.99443817]
[105.42269897 -132.42713928]
[114.25955963 -144.41709900]
[115.59149933 -159.35784912]
[116.92343903 -174.29858398]
[105.14125824 -184.39610291]
[101.57720184 -199.49832153]
[107.60171509 -213.79814148]
[120.89826202 -221.79698181]
[136.35404968 -220.41912842]
[148.02600098 -210.19439697]
[151.42601013 -195.05439758]
[145.24671936 -180.82078552]
[131.86418152 -172.96664429]
[130.53224182 -158.02590942]
[129.20031738 -143.08515930]
[135.77691650 -129.72111511]
[126.84477997 -116.66249847]
[125.51284027 -101.72174835]
[139.57991028 -96.61615753]
[151.85543823 -88.03662872]
[161.49919128 -76.56307220]
[167.84921265 -62.97375107]
[170.46717834 -48.19245529]
[169.16873169 -33.22572327]
[164.03639221 -19.09431267]
[155.41438293 -6.76355982]
[143.88549805 2.92254686]
[130.23175049 9.29913902]
[115.38136292 11.92610550]
[114.04942322 26.86685371]
[120.62602997 40.23089218]
[111.69389343 53.28950882]
[110.36195374 68.23025513]
[109.03001404 83.17100525]
[118.24465942 94.35298157]
[116.95804596 108.78527069]
[105.91072845 118.16093445]
[104.57879639 133.10168457]
[103.24685669 148.04243469]
[103.02458191 163.04078674]
[103.91319275 178.01443481]
[104.80179596 192.98809814]
[105.69040680 207.96174622]
[106.57901764 222.93540955]
[107.46762848 237.90905762]
[117.20315552 242.92015076]
[123.85974884 251.51081848]
[126.24523926 262.02990723]
[123.98013306 272.49203491]
[117.55607605 280.95236206]
[108.23118591 285.86801147]
[107.78668213 300.86141968]
[107.34218597 315.85485840]
[106.89768219 330.84826660]
[120.47063446 337.82949829]
[129.66354370 350.01364136]
[132.65113831 364.98150635]
[128.84025574 379.76119995]
[118.98752594 391.41824341]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 100]
[8 99]
[9 98]
[10 97]
[13 91]
[14 90]
[15 89]
[16 88]
[17 87]
[18 86]
[24 85]
[25 84]
[26 83]
[29 80]
[30 79]
[31 78]
[33 76]
[34 75]
[45 64]
[46 63]
[48 61]
[49 60]
[50 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
