%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 21:02:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUUAGCACAGAGGACUUAUUCAACCUGUCCUUUCAGGGAGUUUAUUGGAGGAUCAAAGAACUGAAAGCACUAGAGCAGCCUUGGGGACUGCUAGGAUGAAGCCCUAAAGAAUGCAACCUAGUCAGGUUAGCUGAACCGACACUCAAAACGCUACUGAGUCACAAUAAAGAUUGUUUUAAAGAGUAA\
) } def
/len { sequence length } bind def

/coor [
[78.21617889 246.49710083]
[72.60820770 232.58483887]
[73.73434448 217.62718201]
[81.35991669 204.71377563]
[84.85644531 190.12699890]
[88.35298157 175.54020691]
[91.84951019 160.95343018]
[95.34603882 146.36663818]
[98.84256744 131.77986145]
[102.33910370 117.19306946]
[94.84564209 116.87983704]
[84.78387451 128.00462341]
[74.72209930 139.12940979]
[64.66033173 150.25418091]
[54.59856033 161.37896729]
[44.53678894 172.50375366]
[49.87656784 186.84757996]
[47.92729568 202.02844238]
[39.13690186 214.55792236]
[25.52535439 221.55679321]
[10.22048569 221.41679382]
[-3.26075578 214.17008972]
[-11.82047939 201.48191833]
[-13.49172401 186.26792908]
[-7.89045000 172.02418518]
[3.69621158 162.02378845]
[18.60573006 158.56477356]
[33.41200638 162.44197083]
[43.47377777 151.31719971]
[53.53554916 140.19241333]
[63.59732056 129.06762695]
[73.65908813 117.94284821]
[83.72086334 106.81806946]
[89.57669830 93.00832367]
[90.57859039 78.04181671]
[91.58048248 63.07531357]
[92.58236694 48.10881042]
[93.45917511 33.13446045]
[94.21083832 18.15330505]
[87.17479706 3.98274732]
[95.54015350 -8.34081268]
[96.29180908 -23.32196808]
[97.04347229 -38.30312347]
[97.79513550 -53.28427887]
[84.56175995 -66.81961060]
[85.38915253 -85.41187286]
[99.28808594 -97.30342865]
[99.53873444 -112.30133057]
[88.83173370 -123.61495209]
[89.29957581 -138.82139587]
[100.15136719 -148.95915222]
[100.40200806 -163.95706177]
[92.89639282 -177.88459778]
[100.84528351 -190.48080444]
[101.09592438 -205.47871399]
[101.34657288 -220.47660828]
[89.11640167 -229.84298706]
[84.79702759 -244.44424438]
[89.84394073 -258.62142944]
[102.12421417 -267.00790405]
[102.37486267 -282.00579834]
[102.62551117 -297.00372314]
[102.87615204 -312.00161743]
[94.36297607 -316.74780273]
[88.20881653 -324.23107910]
[85.23163605 -333.39019775]
[85.80268097 -342.94601440]
[89.80073547 -351.58013916]
[96.63471222 -358.11691284]
[105.33068085 -361.68334961]
[106.58251953 -376.63101196]
[107.83435822 -391.57870483]
[109.08618927 -406.52636719]
[110.33802795 -421.47402954]
[100.92490387 -439.28503418]
[112.58978271 -454.69192505]
[113.34144592 -469.67306519]
[114.09310913 -484.65423584]
[103.77013397 -496.31930542]
[104.74583435 -511.50161743]
[115.93032074 -521.27111816]
[116.68197632 -536.25225830]
[117.43363953 -551.23339844]
[118.06010437 -566.22033691]
[118.56133270 -581.21197510]
[119.06255341 -596.20355225]
[119.56378174 -611.19519043]
[116.71852875 -619.89660645]
[120.20071411 -626.43255615]
[120.95237732 -641.41369629]
[113.91633606 -655.58428955]
[122.28168488 -667.90783691]
[111.49586487 -679.45953369]
[112.12090302 -695.25146484]
[123.78598022 -705.91455078]
[139.57041931 -705.12255859]
[150.10957336 -693.34539795]
[149.15077209 -677.57025146]
[137.26284790 -667.15618896]
[144.35264587 -654.05712891]
[135.93353271 -640.66204834]
[135.18186951 -625.68090820]
[134.55540466 -610.69396973]
[134.05418396 -595.70233154]
[133.55294800 -580.71075439]
[133.05172729 -565.71911621]
[135.97630310 -558.91540527]
[132.41479492 -550.48175049]
[131.66313171 -535.50061035]
[130.91146851 -520.51947021]
[141.06190491 -509.67950439]
[140.51301575 -494.47576904]
[129.07426453 -483.90255737]
[128.32260132 -468.92141724]
[127.57093811 -453.94024658]
[135.09465027 -446.99014282]
[137.59286499 -436.83038330]
[134.00273132 -426.76956177]
[125.28569794 -420.22219849]
[124.03386688 -405.27453613]
[122.78202820 -390.32684326]
[121.53018951 -375.37918091]
[120.27835083 -360.43151855]
[134.75057983 -346.02087402]
[133.91178894 -325.32174683]
[117.87406158 -311.75097656]
[117.62341309 -296.75305176]
[117.37276459 -281.75515747]
[117.12211609 -266.75726318]
[129.11529541 -257.96511841]
[133.68565369 -243.62719727]
[128.88079834 -229.17843628]
[116.34448242 -220.22596741]
[116.09383392 -205.22805786]
[115.84318542 -190.23014832]
[123.36673737 -177.37536621]
[115.39991760 -163.70640564]
[115.14926910 -148.70851135]
[125.65624237 -138.21379089]
[125.61569977 -123.00021362]
[114.53663635 -112.05068970]
[114.28598785 -97.05278015]
[123.82408142 -90.75031281]
[129.18276978 -80.51611328]
[128.92393494 -68.84674835]
[122.99613953 -58.65273285]
[112.77629089 -52.53261566]
[112.02462769 -37.55146027]
[111.27296448 -22.57030487]
[110.52130890 -7.58915043]
[117.61111450 5.50985384]
[109.19199371 18.90496635]
[108.44033051 33.88611984]
[111.25080872 40.73776245]
[107.54887390 49.11069870]
[106.54698181 64.07720184]
[105.54509735 79.04370880]
[104.54320526 94.01020813]
[112.18967438 91.09102631]
[121.37743378 92.42845154]
[130.22180176 98.49810791]
[136.74514771 109.03453064]
[145.84339905 120.96021271]
[154.94163513 132.88589478]
[164.03988647 144.81158447]
[173.13812256 156.73727417]
[188.47163391 162.55236816]
[190.83494568 178.78033447]
[177.79687500 188.72721863]
[162.76988220 182.16053772]
[161.21243286 165.83551025]
[152.11419678 153.90982056]
[143.01596069 141.98414612]
[133.91770935 130.05845642]
[124.81946564 118.13276672]
[117.32601166 117.81953430]
[119.59299469 132.64724731]
[121.85997772 147.47494507]
[124.12695312 162.30264282]
[126.39393616 177.13035583]
[128.66091919 191.95805359]
[130.92790222 206.78576660]
[137.44987488 220.29367065]
[137.32231140 235.29313660]
[130.57153320 248.68817139]
[118.59092712 257.71395874]
[103.85336304 260.50756836]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 33]
[12 32]
[13 31]
[14 30]
[15 29]
[16 28]
[34 158]
[35 157]
[36 156]
[37 155]
[38 153]
[39 152]
[41 150]
[42 149]
[43 148]
[44 147]
[47 142]
[48 141]
[51 138]
[52 137]
[54 135]
[55 134]
[56 133]
[60 129]
[61 128]
[62 127]
[63 126]
[70 123]
[71 122]
[72 121]
[73 120]
[74 119]
[76 115]
[77 114]
[78 113]
[81 110]
[82 109]
[83 108]
[84 106]
[85 105]
[86 104]
[87 103]
[89 102]
[90 101]
[92 99]
[162 175]
[163 174]
[164 173]
[165 172]
[166 171]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
