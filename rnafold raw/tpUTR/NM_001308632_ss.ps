%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 22:19:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUGCAAGCAUCCCAUGGGGCGGGGGCGGGACCAGGGAGAAUUAAUAAAGUUCUGGACUUUUGCUAUAUG\
) } def
/len { sequence length } bind def

/coor [
[95.78439331 109.86410522]
[81.92619324 115.60435486]
[68.06800079 121.34460449]
[54.20981216 127.08486176]
[40.35161972 132.82510376]
[26.49342537 138.56536865]
[22.71889114 151.68940735]
[12.16398907 160.04124451]
[-1.08372939 160.67811584]
[-12.06085777 153.59036255]
[-26.15624809 158.72067261]
[-40.25163651 163.85096741]
[-53.06758118 174.94998169]
[-67.28063965 165.70739746]
[-62.33382416 149.49118042]
[-45.38193893 149.75558472]
[-31.28654861 144.62527466]
[-17.19116020 139.49497986]
[-10.88214493 124.06037903]
[4.89111757 117.69889832]
[20.75317383 124.70716858]
[34.61136627 118.96691895]
[48.46955872 113.22666931]
[62.32775116 107.48641205]
[76.18594360 101.74616241]
[90.04413605 96.00591278]
[102.86781311 88.22431183]
[114.35848236 78.58249664]
[125.84915161 68.94068146]
[137.33981323 59.29887009]
[148.83049011 49.65705490]
[160.32115173 40.01524353]
[171.38031006 29.88138962]
[181.98690796 19.27478790]
[192.59350586 8.66818523]
[203.20011902 -1.93841648]
[213.80671692 -12.54501820]
[224.41331482 -23.15161896]
[218.91638184 -37.35385895]
[219.67774963 -52.56373215]
[226.56549072 -66.14603424]
[238.38626099 -75.74755096]
[253.09205627 -79.70475769]
[268.13500977 -77.33205414]
[280.90881348 -69.04051208]
[289.20034790 -56.26670074]
[291.57305908 -41.22375870]
[287.61584473 -26.51796341]
[278.01434326 -14.69718552]
[264.43203735 -7.80944586]
[249.22216797 -7.04808664]
[235.01991272 -12.54501820]
[224.41331482 -1.93841648]
[213.80671692 8.66818523]
[203.20011902 19.27478790]
[192.59350586 29.88138962]
[181.98690796 40.48799133]
[181.11996460 45.48067856]
[176.90058899 49.86707687]
[169.96296692 51.50590897]
[158.47229004 61.14772415]
[146.98162842 70.78953552]
[135.49096680 80.43135071]
[124.00029755 90.07316589]
[112.50962830 99.71498108]
[127.08893585 103.24256134]
[136.27935791 115.09735870]
[136.06231689 130.09577942]
[126.53272247 141.67968750]
[111.85744476 144.78393555]
[98.45334625 138.05116272]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 26]
[2 25]
[3 24]
[4 23]
[5 22]
[6 21]
[10 18]
[11 17]
[12 16]
[27 65]
[28 64]
[29 63]
[30 62]
[31 61]
[32 60]
[33 57]
[34 56]
[35 55]
[36 54]
[37 53]
[38 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
