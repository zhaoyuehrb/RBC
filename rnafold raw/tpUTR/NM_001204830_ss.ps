%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 14:44:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCAAGUAAAUGUCUUAAUACAGUUUCAAUUAGAAAAUAAAAUGUCUCAUACUUGCACAUUGUAUGUCAA\
) } def
/len { sequence length } bind def

/coor [
[115.03709412 213.49493408]
[117.30235291 198.54969788]
[123.87365723 184.93685913]
[134.16668701 173.86686707]
[126.66668701 160.87648010]
[119.16668701 147.88609314]
[111.66668701 134.89572144]
[104.16668701 121.90533447]
[96.66668701 108.91495514]
[91.71894836 106.31100464]
[88.73939514 101.00953674]
[89.13622284 94.44906616]
[82.79695129 80.85444641]
[68.00669861 83.74132538]
[52.96442795 83.00482941]
[38.54431152 78.69211578]
[25.58332825 71.05804443]
[14.83267498 60.55009842]
[6.91423750 47.78220749]
[2.28461242 33.49882889]
[1.20878255 18.53157806]
[3.74495363 3.75079179]
[9.74142265 -9.98508167]
[18.84564400 -21.87933159]
[30.52495384 -31.24320412]
[24.18568039 -44.83782196]
[17.84640694 -58.43243790]
[11.50713253 -72.02705383]
[-3.01595378 -78.84317780]
[-6.60159397 -94.48040009]
[3.50080872 -106.94318390]
[19.54155540 -106.67115021]
[29.21555710 -93.87297821]
[25.10174942 -78.36632538]
[31.44102287 -64.77171326]
[37.78029633 -51.17709351]
[44.11957169 -37.58247757]
[58.80002975 -40.51036835]
[73.76363373 -39.83913040]
[88.14038086 -35.60344315]
[101.09333801 -28.04535484]
[111.86738586 -17.60045815]
[119.83322144 -4.87278175]
[124.52412415 9.40013695]
[125.66329193 24.38998985]
[123.18016815 39.22576904]
[117.21482849 53.04437637]
[108.11003113 65.04083252]
[96.39156342 74.51517487]
[102.73084259 88.10979462]
[109.65706635 101.41495514]
[117.15706635 114.40533447]
[124.65706635 127.39571381]
[132.15707397 140.38609314]
[139.65707397 153.37648010]
[147.15707397 166.36686707]
[161.89048767 162.98783875]
[176.96519470 164.10333252]
[191.04078674 169.61418152]
[202.86563110 179.03034973]
[211.38830566 191.51455688]
[215.85096741 205.95672607]
[215.85679626 221.07266235]
[211.40527344 235.51824951]
[202.89222717 248.00903320]
[191.07463074 257.43432617]
[177.00331116 262.95599365]
[161.92945862 264.08312988]
[147.19343567 260.71545410]
[134.10556030 253.15245056]
[123.82961273 242.06658936]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 56]
[5 55]
[6 54]
[7 53]
[8 52]
[9 51]
[12 50]
[13 49]
[25 37]
[26 36]
[27 35]
[28 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
