%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 13:16:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGUGGGGUGAGGGUCAGCAGGAAAACAUGAACAAAUGUCUCUGUGUCAUAAACAAGGUUAAGGAA\
) } def
/len { sequence length } bind def

/coor [
[129.49461365 240.14065552]
[134.90350342 225.95939636]
[145.07290649 214.69227600]
[138.29440308 201.31126404]
[125.41866302 198.96978760]
[116.18399811 189.42118835]
[114.21656799 176.08515930]
[120.48057556 163.92680359]
[114.33671570 150.24276733]
[108.19286346 136.55871582]
[102.04900360 122.87467957]
[90.53743744 120.92627716]
[81.47134399 113.56974792]
[77.19374847 102.70629120]
[78.81013489 91.14342499]
[85.90277863 81.86943054]
[81.06731415 67.67019653]
[76.23184967 53.47095871]
[70.30702209 46.05226517]
[71.51953888 38.49140549]
[67.35493469 24.08112717]
[63.43451309 20.67992973]
[61.27708435 16.54663849]
[60.87871170 12.42259026]
[61.96004105 8.95095539]
[64.03422546 6.58421087]
[62.62960434 -8.34987926]
[61.22497940 -23.28396797]
[59.82035828 -38.21805954]
[47.48934937 -48.10349274]
[45.84313583 -63.82181168]
[55.85838699 -76.04761505]
[71.59323120 -77.52754974]
[83.71246338 -67.38359833]
[85.02596283 -51.63398743]
[74.75444794 -39.62268066]
[76.15907288 -24.68859100]
[77.56369019 -9.75450134]
[78.96831512 5.17958832]
[81.76521301 19.91652679]
[85.92981720 34.32680511]
[90.43108368 48.63549423]
[95.26654816 62.83472824]
[100.10201263 77.03396606]
[116.45259094 83.97621918]
[122.96072388 100.50439453]
[115.73304749 116.73081970]
[121.87690735 130.41487122]
[128.02076721 144.09890747]
[134.16461182 157.78294373]
[150.49964905 163.55189514]
[157.62806702 178.97496033]
[151.67543030 194.53274536]
[158.45393372 207.91377258]
[173.55398560 206.37998962]
[188.18740845 210.40830994]
[200.37515259 219.45394897]
[208.46888733 232.29356384]
[211.37405396 247.19070435]
[208.69770813 262.13064575]
[200.80183411 275.09286499]
[188.75425720 284.32437134]
[174.18434143 288.57662964]
[159.06253052 287.27462769]
[145.43392944 280.59436035]
[135.14169312 269.43936157]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 54]
[4 53]
[8 50]
[9 49]
[10 48]
[11 47]
[16 44]
[17 43]
[18 42]
[20 41]
[21 40]
[26 39]
[27 38]
[28 37]
[29 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
