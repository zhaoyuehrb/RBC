%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:21:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGGGUCCACAAGAGACCUAGGAGUGAGCUAACAAGAGUUCAUUGGAGCCAACUAGGAGUGGCCAGGUUGGGCAA\
) } def
/len { sequence length } bind def

/coor [
[70.15497589 107.43434143]
[57.70421982 115.79967499]
[45.25346756 124.16500854]
[32.80271530 132.53033447]
[20.35196114 140.89566040]
[7.90120792 149.26100159]
[-4.54954529 157.62632751]
[-17.00029755 165.99165344]
[-29.27782059 174.60922241]
[-35.38797760 189.82756042]
[-51.65855789 191.87701416]
[-61.35178375 178.64926147]
[-54.49609756 163.75189209]
[-38.14403915 162.51004028]
[-34.50925446 155.82858276]
[-25.36562920 153.54090881]
[-12.91487503 145.17556763]
[-0.46412209 136.81024170]
[11.98663139 128.44491577]
[24.43738365 120.07958221]
[36.88813782 111.71424866]
[49.33889008 103.34892273]
[61.78964233 94.98358917]
[66.59915924 80.77554321]
[61.78964233 66.56750488]
[56.98012543 52.35945511]
[52.17060852 38.15141296]
[47.36109161 23.94336510]
[42.55157471 9.73532104]
[37.74205780 -4.47272444]
[32.93254089 -18.68076897]
[18.65479088 -25.45730209]
[13.42940426 -40.37276077]
[20.35651016 -54.57806778]
[35.32638168 -59.64546585]
[49.45765686 -52.56856155]
[54.36650085 -37.54595184]
[47.14058685 -23.49028587]
[51.95010376 -9.28224087]
[56.75962067 4.92580414]
[61.56913757 19.13384819]
[66.37865448 33.34189606]
[71.18817139 47.54993820]
[75.99768829 61.75798416]
[80.80720520 75.96602631]
[93.19032288 71.00620270]
[106.07573700 71.83952332]
[116.97042847 77.93769073]
[123.92383575 87.78922272]
[125.87489319 99.25583649]
[140.35049438 103.18736267]
[154.82609558 107.11888885]
[169.30171204 111.05041504]
[183.77731323 114.98194122]
[198.25291443 118.91345978]
[213.59858704 115.06370544]
[223.85296631 125.86634827]
[238.32856750 129.79788208]
[252.90812683 123.10339355]
[267.16680908 130.45657349]
[270.16659546 146.21667480]
[259.60629272 158.29389954]
[243.58686829 157.42364502]
[234.39704895 144.27348328]
[219.92143250 140.34194946]
[205.61114502 144.47291565]
[194.32138062 133.38906860]
[179.84577942 129.45753479]
[165.37017822 125.52601624]
[150.89457703 121.59449005]
[136.41897583 117.66296387]
[121.94336700 113.73143768]
[115.55402374 121.69859314]
[106.33065796 126.77107239]
[95.55751801 127.97071838]
[84.84131622 124.87888336]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[4 20]
[5 19]
[6 18]
[7 17]
[8 16]
[9 14]
[24 45]
[25 44]
[26 43]
[27 42]
[28 41]
[29 40]
[30 39]
[31 38]
[50 72]
[51 71]
[52 70]
[53 69]
[54 68]
[55 67]
[57 65]
[58 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
