%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:56:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAACAAAACAUCAGAACCAGCUAAGGGAAAAUAAAAUUUUGGAGGAAAUUGAAAGUGUGAAAGAAAAGACUGAUAAACUUCUAAGGGCUAUGCAAUUGAAUGAAGAAGCAUUAACGAAAACCAAUAUUUAAGUACAGUGGACAGCUUAGGAUUUUGA\
) } def
/len { sequence length } bind def

/coor [
[83.31099701 296.29736328]
[85.44233704 311.34814453]
[81.64691162 326.06762695]
[72.50350189 338.21121216]
[59.40640259 345.92706299]
[44.35283661 348.03860474]
[29.63835907 344.22381592]
[17.50682068 335.06445312]
[9.80819321 321.95721436]
[7.71646070 306.90087891]
[11.55059814 292.19143677]
[20.72592735 280.07196045]
[33.84327698 272.39056396]
[48.90234375 270.31866455]
[52.66670227 255.79867554]
[56.43106079 241.27870178]
[60.19541931 226.75872803]
[63.95977783 212.23875427]
[67.72413635 197.71879578]
[71.34664917 183.16278076]
[74.82698059 168.57212830]
[78.02196503 153.91633606]
[80.93037415 139.20100403]
[83.83878326 124.48566437]
[86.74719238 109.77032471]
[83.24351501 124.35539246]
[74.84101868 136.78109741]
[62.61005783 145.46461487]
[48.10863495 149.29981995]
[33.18399048 147.79815674]
[19.73726654 141.15093994]
[9.48134899 130.20487976]
[3.72266531 116.35433197]
[3.19477439 101.36362457]
[7.96492004 87.14231110]
[17.42546654 75.50195312]
[30.37130356 67.92532349]
[45.15335083 65.37755585]
[59.88862610 68.18320465]
[72.70011139 75.98486328]
[81.95472717 87.78664398]
[73.18537140 75.61707306]
[64.41602325 63.44750214]
[55.64666748 51.27793121]
[46.87731552 39.10836029]
[38.10796356 26.93878937]
[29.33860970 14.76921749]
[20.56925774 2.59964705]
[9.68736744 1.46791589]
[1.41297853 -5.34829378]
[-1.65247560 -15.39101315]
[1.27962208 -25.24393654]
[-7.00824451 -37.74638748]
[-15.29611111 -50.24883652]
[-30.52800941 -53.50875473]
[-38.75498199 -66.30608368]
[-35.55327988 -80.80727386]
[-43.84114838 -93.30973053]
[-52.12901306 -105.81217957]
[-66.20295715 -113.03952789]
[-66.78607178 -127.92271423]
[-82.29405212 -128.45407104]
[-94.50720215 -138.02583313]
[-98.72933197 -152.95744324]
[-93.33693695 -167.50741577]
[-80.40350342 -176.08097839]
[-64.90220642 -175.38142395]
[-52.79360580 -165.67774963]
[-48.73370743 -150.70120239]
[-54.28362274 -136.21058655]
[-40.80248260 -129.87748718]
[-39.62656403 -114.10004425]
[-31.33869743 -101.59759521]
[-23.05083084 -89.09514618]
[-8.44758701 -86.39683533]
[0.13559014 -73.83563232]
[-2.79366040 -58.53670502]
[5.49420595 -46.03425598]
[13.78207302 -33.53180313]
[31.66968346 -26.26653290]
[32.73882675 -6.16970587]
[41.50817871 5.99986506]
[50.27753448 18.16943550]
[59.04688644 30.33900642]
[67.81623840 42.50857925]
[76.58559418 54.67814636]
[85.35494232 66.84771729]
[94.12429810 79.01728821]
[108.98458862 81.05979156]
[108.42480469 65.66521454]
[116.93766785 53.04045868]
[131.08477783 47.90985107]
[145.36929321 52.04395294]
[157.09677124 42.69160461]
[168.82423401 33.33926010]
[180.55171204 23.98691177]
[176.30993652 9.38979626]
[177.98208618 -5.71888781]
[185.31318665 -19.03517532]
[197.18527222 -28.52842903]
[211.78796387 -32.75099564]
[226.89443970 -31.05896759]
[240.20106506 -23.71036339]
[249.67869568 -11.82579422]
[253.88204956 2.78243136]
[252.17015076 17.88666344]
[244.80404663 31.18361855]
[232.90701294 40.64560318]
[218.29327393 44.82973862]
[203.19131470 43.09797287]
[189.90405273 35.71438599]
[178.17658997 45.06673050]
[166.44911194 54.41907883]
[154.72163391 63.77142715]
[155.57348633 78.61771393]
[147.42349243 91.26846313]
[133.22096252 96.75862122]
[118.33692932 92.78726196]
[118.99465179 100.25836945]
[132.79905701 94.38993835]
[142.64604187 105.70527649]
[134.92736816 118.56693268]
[120.31008911 115.20057678]
[120.96780396 122.67168427]
[134.14889526 129.83120728]
[147.32998657 136.99073792]
[167.40061951 135.50914001]
[176.87022400 152.33404541]
[190.32061768 158.97384644]
[203.77101135 165.61364746]
[220.09140015 164.00839233]
[229.42053223 177.49539185]
[222.16140747 192.20039368]
[205.78157043 192.99613953]
[197.13121033 179.06404114]
[183.68081665 172.42424011]
[170.23042297 165.78443909]
[160.82754517 169.93933105]
[150.47772217 168.16885376]
[142.66960144 160.82315063]
[140.17047119 150.17182922]
[126.98937225 143.01229858]
[113.80828094 135.85276794]
[108.35070038 128.67640686]
[104.21601105 120.89406586]
[101.46253204 112.67873383]
[98.55412292 127.39407349]
[95.64571381 142.10940552]
[92.73729706 156.82475281]
[94.52729034 163.27421570]
[92.98730469 168.81080627]
[89.41764069 172.05245972]
[85.93730927 186.64311218]
[86.99085236 195.76866150]
[82.24411011 201.48313904]
[78.47975159 216.00311279]
[74.71539307 230.52308655]
[70.95103455 245.04306030]
[67.18667603 259.56304932]
[63.42231750 274.08300781]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 160]
[15 159]
[16 158]
[17 157]
[18 156]
[19 155]
[20 153]
[21 152]
[22 149]
[23 148]
[24 147]
[25 146]
[41 88]
[42 87]
[43 86]
[44 85]
[45 84]
[46 83]
[47 82]
[48 81]
[52 79]
[53 78]
[54 77]
[57 74]
[58 73]
[59 72]
[61 70]
[89 118]
[93 114]
[94 113]
[95 112]
[96 111]
[124 143]
[125 142]
[126 141]
[128 137]
[129 136]
[130 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
