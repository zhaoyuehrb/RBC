%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:20:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUUCCUAGAAGUACCUGCUGGGUUCUCAGUUCCAGUUCCCAUCCUUUGAUUGAUCACUCUCCCUGACAUCCACCUGUAUGACUUUGUCACCAAAUGCUGUCUUCUCUUUCUCCAAUCAAGAAAUAAUAAUCCCUCGAGUUUACAAAACA\
) } def
/len { sequence length } bind def

/coor [
[75.86632538 187.62699890]
[70.70366669 201.71057129]
[65.68682861 215.84674072]
[60.81633377 230.03399658]
[55.94584274 244.22125244]
[51.07535172 258.40850830]
[51.65112686 275.35269165]
[35.52853012 280.59655762]
[26.02640152 266.55569458]
[36.88809204 253.53802490]
[41.75858307 239.35076904]
[46.62907791 225.16349792]
[51.49956894 210.97624207]
[50.69166183 203.58192444]
[56.62009811 196.54791260]
[61.78275681 182.46434021]
[44.67138672 172.10873413]
[30.23931694 158.26124573]
[19.18543053 141.59243774]
[5.32723761 147.33268738]
[-8.53095531 153.07293701]
[-22.38914871 158.81318665]
[-36.24734116 164.55343628]
[-50.10553360 170.29368591]
[-53.59684372 185.41290283]
[-65.33027649 195.56701660]
[-80.79409027 196.85159302]
[-94.04212952 188.77265930]
[-99.98025513 174.43675232]
[-96.32514191 159.35630798]
[-84.48224640 149.33007812]
[-69.00540924 148.21333313]
[-55.84578705 156.43550110]
[-41.98759460 150.69525146]
[-28.12940025 144.95498657]
[-14.27120686 139.21473694]
[-0.41301391 133.47448730]
[13.44517899 127.73423767]
[9.34090519 106.46942902]
[10.38405514 84.83730316]
[16.51540184 64.06607819]
[27.38682175 45.33509827]
[42.38105774 29.70787621]
[60.64677048 18.07168770]
[81.14687347 11.08720684]
[102.71741486 9.15100098]
[124.13367462 12.37300110]
[129.29632568 -1.71056938]
[134.45898438 -15.79413986]
[139.62164307 -29.87771034]
[144.78430176 -43.96128082]
[149.94696045 -58.04485321]
[155.10961914 -72.12842560]
[160.27227783 -86.21199036]
[148.09957886 -94.22676086]
[138.03074646 -104.75344086]
[130.57257080 -117.25736237]
[126.09927368 -131.10449219]
[124.83389282 -145.59356689]
[126.83705139 -159.99157715]
[132.00411987 -173.57089233]
[140.07066345 -185.64602661]
[150.62596130 -195.60820007]
[163.13392639 -202.95608521]
[176.96034241 -207.32099915]
[191.40499878 -208.48542786]
[205.73715210 -206.39384460]
[211.18977356 -220.36772156]
[216.64239502 -234.34158325]
[222.09501648 -248.31544495]
[217.63182068 -260.46075439]
[222.50851440 -272.01119995]
[233.59211731 -276.95471191]
[239.33236694 -290.81292725]
[233.52757263 -305.26776123]
[239.54641724 -319.24014282]
[253.36267090 -324.68505859]
[259.10290527 -338.54324341]
[254.89167786 -350.77819824]
[260.00604248 -362.22540283]
[271.18945312 -366.93881226]
[277.21487427 -380.67538452]
[283.24029541 -394.41198730]
[289.26574707 -408.14859009]
[290.09115601 -425.08242798]
[306.59173584 -428.97702026]
[314.90191650 -414.19943237]
[303.00234985 -402.12316895]
[296.97689819 -388.38656616]
[290.95147705 -374.64996338]
[284.92605591 -360.91336060]
[287.81857300 -343.63171387]
[272.96112061 -332.80300903]
[267.22085571 -318.94479370]
[273.14028931 -305.32510376]
[267.51626587 -291.18917847]
[253.19055176 -285.07266235]
[247.45030212 -271.21447754]
[250.69938660 -253.99629211]
[236.06887817 -242.86282349]
[230.61627197 -228.88896179]
[225.16365051 -214.91510010]
[219.71102905 -200.94122314]
[232.41555786 -192.12246704]
[242.65750122 -180.52301025]
[249.84330750 -166.80880737]
[253.55499268 -151.76860046]
[253.57455444 -136.26847839]
[249.89672852 -121.20201874]
[242.72949219 -107.43882751]
[232.48236084 -95.77427673]
[219.74299622 -86.88359070]
[205.24345398 -81.28273773]
[189.81814575 -79.29847717]
[174.35585022 -81.04933167]
[169.19319153 -66.96576691]
[164.03053284 -52.88219452]
[158.86787415 -38.79862213]
[153.70521545 -24.71505165]
[148.54255676 -10.63148117]
[143.37989807 3.45208907]
[138.21723938 17.53565979]
[145.94662476 21.57913399]
[153.25279236 26.34495926]
[160.06843567 31.78923607]
[166.33076477 37.86181641]
[171.98211670 44.50676346]
[176.97042847 51.66287231]
[181.24975586 59.26422501]
[184.78065491 67.24079895]
[187.53063965 75.51913452]
[189.47434998 84.02295685]
[190.59390259 92.67395782]
[190.87896729 101.39243317]
[190.32691956 110.09808350]
[188.94287109 118.71071625]
[186.73954773 127.15100861]
[183.73722839 135.34120178]
[179.96360779 143.20585632]
[175.45341492 150.67253113]
[170.24821472 157.67247009]
[164.39593506 164.14115906]
[157.95050049 170.01902771]
[150.97126770 175.25193787]
[143.52252197 179.79170227]
[135.67288208 183.59646606]
[127.49465942 186.63122559]
[119.06317139 188.86799622]
[110.45609283 190.28617859]
[101.75270081 190.87272644]
[93.03315735 190.62222290]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 13]
[4 12]
[5 11]
[6 10]
[19 38]
[20 37]
[21 36]
[22 35]
[23 34]
[24 33]
[47 122]
[48 121]
[49 120]
[50 119]
[51 118]
[52 117]
[53 116]
[54 115]
[67 103]
[68 102]
[69 101]
[70 100]
[73 98]
[74 97]
[77 94]
[78 93]
[81 91]
[82 90]
[83 89]
[84 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
