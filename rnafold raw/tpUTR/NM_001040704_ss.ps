%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 15:18:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCAGAAGAUUUAGGUUUCCAGAGAAGCAUACAUAACCUAGCUUCUUUUUACUCUUGCCUCUGCUGUAGGCAGACACUUUAAUAAAAAUAAAUGACUGUC\
) } def
/len { sequence length } bind def

/coor [
[88.94238281 101.76696014]
[76.35809326 93.60389709]
[63.77379990 85.44083405]
[51.18950653 77.27777100]
[38.60521317 69.11471558]
[22.81685066 68.09583282]
[16.34994125 54.67836761]
[3.76564884 46.51530457]
[-8.81864357 38.35224152]
[-24.08767128 41.43356323]
[-36.73364639 32.97578812]
[-39.57711792 18.40011597]
[-52.16141129 10.23705292]
[-64.74570465 2.07398987]
[-77.32999420 -6.08907270]
[-90.37811279 1.75363004]
[-105.47591400 3.14770627]
[-119.62390900 -2.13001513]
[-130.03465271 -12.98254585]
[-134.68188477 -27.22026634]
[-132.69476318 -42.00258255]
[-145.27905273 -50.16564560]
[-157.86334229 -58.32870483]
[-170.44764709 -66.49176788]
[-183.03193665 -74.65483093]
[-195.61622620 -82.81789398]
[-208.20051575 -90.98095703]
[-220.78480530 -99.14402008]
[-233.79753113 -91.16706085]
[-248.98352051 -89.63462067]
[-263.32760620 -94.85096741]
[-273.98171997 -105.78038788]
[-278.83053589 -120.25283813]
[-276.91128540 -135.39480591]
[-268.60501099 -148.19984436]
[-255.56098938 -156.12548828]
[-240.36907959 -157.59811401]
[-226.04565430 -152.32533264]
[-215.43464661 -141.35403442]
[-210.64286804 -126.86260223]
[-212.62174988 -111.72830963]
[-200.03746033 -103.56524658]
[-187.45315552 -95.40218353]
[-174.86886597 -87.23912048]
[-162.28457642 -79.07606506]
[-149.70028687 -70.91300201]
[-137.11599731 -62.74993515]
[-124.53170013 -54.58687210]
[-111.84374237 -62.42786789]
[-96.94834900 -63.98885727]
[-82.79435730 -58.90696335]
[-72.20724487 -48.13973999]
[-67.32508087 -33.78524780]
[-69.16693115 -18.67336464]
[-56.58264160 -10.51030254]
[-43.99834824 -2.34723949]
[-31.41405678 5.81582355]
[-16.94543266 2.47000098]
[-4.06688547 10.56923962]
[-0.65558040 25.76794815]
[11.92871189 33.93101120]
[24.51300430 42.09407425]
[39.40125656 42.52907944]
[46.76827621 56.53041840]
[59.35256958 64.69348145]
[71.93685913 72.85654449]
[84.52115631 81.01960754]
[97.10544586 89.18267059]
[109.81516266 97.14904022]
[122.64723969 104.91677856]
[135.47930908 112.68452454]
[148.31138611 120.45227051]
[161.14346313 128.22001648]
[176.95588684 128.74739075]
[183.83694458 141.95724487]
[196.66902161 149.72499084]
[205.80564880 151.54560852]
[209.77406311 157.93913269]
[222.35835266 166.10220337]
[234.94264221 174.26525879]
[247.52693176 182.42832947]
[262.42486572 177.67588806]
[276.87243652 183.65931702]
[284.04797363 197.55342102]
[280.56338501 212.79782104]
[268.06396484 222.19456482]
[252.45161438 221.30682373]
[241.09796143 210.55375671]
[239.36387634 195.01261902]
[226.77957153 186.84954834]
[214.19528198 178.68649292]
[201.61099243 170.52342224]
[188.90127563 162.55706787]
[176.06919861 154.78932190]
[161.17462158 154.81755066]
[153.37571716 141.05209351]
[140.54364014 133.28434753]
[127.71157074 125.51660156]
[114.87949371 117.74885559]
[102.04742432 109.98110962]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 68]
[2 67]
[3 66]
[4 65]
[5 64]
[7 62]
[8 61]
[9 60]
[12 57]
[13 56]
[14 55]
[15 54]
[21 48]
[22 47]
[23 46]
[24 45]
[25 44]
[26 43]
[27 42]
[28 41]
[69 100]
[70 99]
[71 98]
[72 97]
[73 96]
[75 94]
[76 93]
[78 92]
[79 91]
[80 90]
[81 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
