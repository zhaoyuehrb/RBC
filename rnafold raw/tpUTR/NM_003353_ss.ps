%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 18:30:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGCCCGGUUUGGGGCUGCGAAAACGUUGACCCCUUUCCCCCACCCCAGAGUUGGGAUGCGGGGCAGAGCCACCAGGGCACUGUCUGCGUGACUAUUUUUUAAUAAAAGUACUGAAGACCC\
) } def
/len { sequence length } bind def

/coor [
[199.04211426 187.96890259]
[194.15592957 176.39476013]
[194.70555115 163.77084351]
[181.84584045 156.04895020]
[168.98611450 148.32705688]
[156.12640381 140.60516357]
[143.16831970 133.04948425]
[130.11404419 125.66126251]
[117.05976868 118.27304077]
[102.02201843 126.98430634]
[83.52126312 124.01023102]
[70.14691162 109.00713348]
[56.25205231 114.65805817]
[42.35719299 120.30897522]
[28.46233368 125.95989227]
[14.64138222 131.78924561]
[5.09448338 144.40539551]
[-9.66616344 142.41226196]
[-23.41091728 148.41906738]
[-37.15567017 154.42587280]
[-46.44487381 167.94041443]
[-62.76993942 166.38342285]
[-69.33704376 151.35661316]
[-59.39051056 138.31826782]
[-43.16247940 140.68112183]
[-29.41772461 134.67431641]
[-15.67297173 128.66751099]
[-7.10918951 116.48099518]
[8.63457394 118.04448700]
[13.56197548 112.41618347]
[22.81141663 112.06503296]
[36.70627594 106.41411591]
[50.60113525 100.76319885]
[64.49599457 95.11227417]
[69.60612488 81.00955963]
[62.55647659 67.76937866]
[55.50682449 54.52919769]
[48.28728867 41.38087845]
[40.89907074 28.32660103]
[33.51084900 15.27232170]
[26.12262726 2.21804309]
[18.56694412 -10.74003029]
[10.84505177 -23.59974861]
[-2.89247823 -31.44773293]
[-2.81108546 -46.34211731]
[-10.53297710 -59.20183563]
[-18.25486946 -72.06155396]
[-25.97676086 -84.92127228]
[-40.57215500 -92.39833832]
[-41.12416840 -108.78819275]
[-27.06493950 -117.23036194]
[-12.85739613 -109.04026031]
[-13.11704159 -92.64316559]
[-5.39515018 -79.78344727]
[2.32674193 -66.92372894]
[10.04863453 -54.06400681]
[23.23384285 -47.13583755]
[23.70477104 -31.32164192]
[31.42666435 -18.46192169]
[37.64104462 -14.29796982]
[39.17690659 -5.17017794]
[46.56512833 7.88410091]
[53.95334625 20.93837929]
[61.34156799 33.99265671]
[67.44667816 38.31523514]
[68.74700928 47.47954941]
[75.79665375 60.71973038]
[82.84630585 73.95991516]
[100.24906158 70.36463165]
[115.84497070 76.80484009]
[124.64525604 90.13943481]
[124.44799042 105.21875763]
[137.50227356 112.60697937]
[150.55654907 119.99520111]
[159.68434143 121.53105927]
[163.84829712 127.74544525]
[176.70800781 135.46733093]
[189.56773376 143.18922424]
[202.42744446 150.91111755]
[218.78338623 143.31805420]
[236.28919983 146.94116211]
[248.08033752 160.17018127]
[249.64633179 177.66563416]
[262.88650513 184.71528625]
[276.12670898 191.76493835]
[289.36688232 198.81459045]
[301.69155884 189.87794495]
[316.61334229 187.18959045]
[331.16308594 191.23002625]
[342.46926880 201.14624023]
[348.32470703 214.93113708]
[347.61724854 229.82963562]
[360.85742188 236.87928772]
[374.09762573 243.92892456]
[383.26193237 245.22926331]
[387.58450317 251.33436584]
[400.63879395 258.72259521]
[413.69305420 266.11080933]
[428.85430908 261.64846802]
[442.69006348 269.28698730]
[446.99185181 284.49456787]
[439.20748901 298.24880981]
[423.95529175 302.38958740]
[410.28411865 294.46020508]
[406.30484009 279.16510010]
[393.25054932 271.77685547]
[380.19628906 264.38864136]
[367.04797363 257.16912842]
[353.80776978 250.11946106]
[340.56759644 243.06980896]
[328.60159302 251.97375488]
[313.89581299 254.81098938]
[299.35696411 250.96617126]
[287.88241577 241.15013123]
[281.78289795 227.26910400]
[282.31723022 212.05477905]
[269.07705688 205.00512695]
[255.83686829 197.95547485]
[242.59667969 190.90582275]
[232.47161865 197.84143066]
[220.27926636 199.77906799]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 79]
[4 78]
[5 77]
[6 76]
[7 74]
[8 73]
[9 72]
[12 34]
[13 33]
[14 32]
[15 31]
[16 29]
[18 27]
[19 26]
[20 25]
[35 68]
[36 67]
[37 66]
[38 64]
[39 63]
[40 62]
[41 61]
[42 59]
[43 58]
[45 56]
[46 55]
[47 54]
[48 53]
[83 119]
[84 118]
[85 117]
[86 116]
[92 110]
[93 109]
[94 108]
[96 107]
[97 106]
[98 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
