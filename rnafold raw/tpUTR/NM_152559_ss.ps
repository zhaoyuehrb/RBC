%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 01:58:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUCCAGCCCCCAGCCCCCAGCUGGCCCCUGACUCCAUGUGGCCUUAGCUGGGCCCAUCUGCUGGGCCUCCUCUGCCUCCCCUGUAAAAUGGGACCUCCGAACCAACCCUGCCCCUCAGAAAUGCCCUGCCUAUUAAAUGAGCUCCCAGAAA\
) } def
/len { sequence length } bind def

/coor [
[87.04315948 101.74906921]
[72.08187866 100.67199707]
[60.19521332 110.73901367]
[45.03768921 109.43358612]
[35.51357651 98.03942871]
[20.55229568 96.96235657]
[5.59101534 95.88528442]
[-9.26983452 110.67771912]
[-29.93059921 109.84073639]
[-43.16899109 94.33628082]
[-58.16820145 94.49027252]
[-73.16741180 94.64427185]
[-88.16661835 94.79827118]
[-103.16582489 94.95226288]
[-118.16503906 95.10626221]
[-137.34422302 109.29166412]
[-157.46130371 97.84926605]
[-172.32789612 99.84532166]
[-187.19450378 101.84137726]
[-202.06109619 103.83744049]
[-216.92770386 105.83349609]
[-231.79429626 107.82955170]
[-246.66088867 109.82560730]
[-261.48336792 112.12648010]
[-276.25549316 114.73120880]
[-291.02761841 117.33592987]
[-305.79971313 119.94065094]
[-320.54431152 122.69689178]
[-332.58303833 132.96235657]
[-346.56866455 127.83874512]
[-361.28417969 130.74621582]
[-373.26461792 141.94448853]
[-388.87188721 136.91004944]
[-392.05056763 120.82192230]
[-379.53070068 110.23017883]
[-364.19165039 116.03070068]
[-349.47613525 113.12322235]
[-338.48999023 103.06571960]
[-323.45178223 107.98136902]
[-317.46246338 103.57227325]
[-308.40444946 105.16853333]
[-293.63232422 102.56381226]
[-278.86022949 99.95909119]
[-264.08810425 97.35437012]
[-260.63418579 93.97505188]
[-255.00096130 92.76900482]
[-248.65695190 94.95900726]
[-233.79035950 92.96295166]
[-218.92375183 90.96689606]
[-204.05715942 88.97084045]
[-189.19055176 86.97478485]
[-174.32395935 84.97872162]
[-159.45736694 82.98266602]
[-157.05212402 76.76494598]
[-152.78373718 71.57649231]
[-147.05859375 67.96249390]
[-140.43806458 66.31578064]
[-133.58358765 66.83439636]
[-127.19048309 69.49833679]
[-121.91753387 74.06834412]
[-118.31903839 80.10705566]
[-103.31982422 79.95305634]
[-88.32061768 79.79905701]
[-73.32140350 79.64506531]
[-58.32219696 79.49106598]
[-43.32298660 79.33706665]
[-39.08457565 70.84423065]
[-31.97762680 64.46524811]
[-22.96880150 61.12521744]
[-13.30478096 61.33195496]
[-4.33976460 65.09925842]
[2.65428686 71.93901825]
[6.66808510 80.92400360]
[21.62936592 82.00107574]
[36.59064484 83.07814789]
[47.64863205 73.16570282]
[62.83684158 74.04487610]
[73.15895081 85.71071625]
[88.12023163 86.78778839]
[100.95388031 79.02265167]
[106.94217682 65.26982117]
[112.93047333 51.51699066]
[104.94606018 38.21177673]
[106.34067535 22.75750160]
[116.57805634 11.09664631]
[131.72174072 7.71304846]
[145.94863892 13.90777206]
[153.78825378 27.29881859]
[152.22607422 42.73705673]
[141.86279297 54.28617096]
[126.68330383 57.50528717]
[120.69500732 71.25811768]
[114.70671082 85.01094818]
[126.55539703 75.81264496]
[138.40408325 66.61434937]
[146.54811096 54.01773071]
[159.07620239 45.76867676]
[173.86573792 43.26480103]
[188.41098022 46.93032837]
[200.24754333 56.14422226]
[207.36997986 69.34539032]
[208.57157898 84.29718781]
[203.64872742 98.46636200]
[193.43550110 109.45226288]
[179.66230774 115.39357758]
[164.66270447 115.28367615]
[150.97717285 109.14053345]
[136.03157043 107.86410522]
[121.08598328 106.58766937]
[133.59001160 114.87314606]
[146.09405518 123.15861511]
[161.82632446 117.02708435]
[177.95930481 121.41519165]
[188.21295166 134.41036987]
[188.71774292 150.79010010]
[201.38925171 158.81709290]
[214.06077576 166.84408569]
[226.73228455 174.87107849]
[243.69546509 170.71926880]
[258.14547729 179.91323853]
[261.43884277 196.37704468]
[274.27249146 204.14218140]
[287.10614014 211.90731812]
[299.93978882 219.67245483]
[314.68167114 214.45599365]
[329.30947876 219.98423767]
[336.91641235 233.64691162]
[333.91070557 248.99291992]
[321.71157837 258.77633667]
[306.07907104 258.37774658]
[294.39437866 247.98533630]
[292.17465210 232.50610352]
[279.34100342 224.74096680]
[266.50735474 216.97583008]
[253.67370605 209.21069336]
[241.67912292 214.01512146]
[228.92160034 210.96977234]
[220.13279724 200.97286987]
[218.70529175 187.54260254]
[206.03376770 179.51560974]
[193.36225891 171.48860168]
[180.69075012 163.46160889]
[168.75857544 169.52589417]
[155.28074646 168.88154602]
[143.79840088 161.59037781]
[137.38156128 149.47462463]
[137.80857849 135.66265869]
[125.30454254 127.37718201]
[112.80050659 119.09170532]
[103.86732483 120.64438629]
[95.84407806 118.56165314]
[90.02068329 113.81080627]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 79]
[2 78]
[5 75]
[6 74]
[7 73]
[10 66]
[11 65]
[12 64]
[13 63]
[14 62]
[15 61]
[17 53]
[18 52]
[19 51]
[20 50]
[21 49]
[22 48]
[23 47]
[24 44]
[25 43]
[26 42]
[27 41]
[28 39]
[30 37]
[31 36]
[80 93]
[81 92]
[82 91]
[109 149]
[110 148]
[111 147]
[115 142]
[116 141]
[117 140]
[118 139]
[121 135]
[122 134]
[123 133]
[124 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
