%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 13:44:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCUCCAAGUGGGAGUCCUAGCCCCUCCCCUGAUGAAAUAUACAUAUACUCAGUUCCUUGUUAUUCA\
) } def
/len { sequence length } bind def

/coor [
[95.17034912 113.24494934]
[83.32221222 122.44394684]
[77.16681671 137.01864624]
[62.36882401 138.71234131]
[50.52068710 147.91134644]
[38.67254639 157.11035156]
[26.82440948 166.30935669]
[23.40237808 181.98318481]
[8.95131397 188.95071411]
[-5.44316196 181.86701965]
[-8.73884010 166.16612244]
[1.59244215 153.89241028]
[17.62540817 154.46121216]
[29.47354698 145.26220703]
[41.32168579 136.06321716]
[53.16982269 126.86421204]
[58.47776031 112.94748688]
[74.12321472 110.59580994]
[85.97135162 101.39680481]
[96.69799042 90.91162109]
[106.16431427 79.27595520]
[115.63063049 67.64028168]
[125.09694672 56.00461197]
[117.90113831 43.51529694]
[115.46080017 29.34000969]
[118.05505371 15.22275066]
[125.34490967 2.89310670]
[136.41737366 -6.14565563]
[149.89979553 -10.79986095]
[164.12998962 -10.51772785]
[177.36112976 -5.35470772]
[187.34722900 -16.54746246]
[197.33334351 -27.74021912]
[207.31944275 -38.93297195]
[200.12030029 -52.27269363]
[197.92083740 -67.27062988]
[200.98666382 -82.11571503]
[208.94755554 -95.01533508]
[220.84219360 -104.41178131]
[235.23425293 -109.17040253]
[250.38581848 -108.71656799]
[264.46725464 -103.10507965]
[275.77816772 -93.01355743]
[282.95272827 -79.66059113]
[285.12454224 -64.65862274]
[282.03137207 -49.81921387]
[274.04672241 -36.93429184]
[262.13476562 -27.55977821]
[247.73397827 -22.82768631]
[232.58326721 -23.30944252]
[218.51219177 -28.94687271]
[208.52609253 -17.75411606]
[198.53999329 -6.56136131]
[188.55389404 4.63139391]
[195.62396240 18.63983536]
[196.84759521 34.32172394]
[192.01263428 49.32977295]
[181.81596375 61.40654755]
[167.76315308 68.72398376]
[151.94633484 70.16010284]
[136.73262024 65.47093201]
[127.26629639 77.10660553]
[117.79998016 88.74227142]
[108.33366394 100.37793732]
[108.71231842 103.25789642]
[108.04032898 106.37476349]
[106.22293091 109.33628845]
[103.31182098 111.72050476]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[4 16]
[5 15]
[6 14]
[7 13]
[20 64]
[21 63]
[22 62]
[23 61]
[31 54]
[32 53]
[33 52]
[34 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
