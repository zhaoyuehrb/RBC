%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 22:50:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGCAUCCCCAGCUGUCUCCCUGAGGCUCCGCCCUGGCUGGGAGCCUCUGGCGGCCCCUCCCCUCCCCUGCCCUUAACCCCAGUAAAGCUCC\
) } def
/len { sequence length } bind def

/coor [
[128.24319458 155.08663940]
[116.97888947 164.99195862]
[102.45112610 168.72615051]
[87.80649567 165.48042297]
[76.21687317 155.95779419]
[70.19246674 142.22073364]
[71.03810883 127.24459076]
[78.57064056 114.27304840]
[91.16053772 106.11491394]
[76.36948395 103.61997986]
[61.57843399 101.12503815]
[46.78738022 98.63009644]
[31.99632454 96.13515472]
[17.20527077 93.64021301]
[2.41421723 91.14527893]
[-12.57740593 90.64405060]
[-27.50207329 92.14548492]
[-42.42673874 93.64691925]
[-57.35140610 95.14835358]
[-72.27607727 96.64979553]
[-87.43045044 104.25119781]
[-98.92993164 91.79334259]
[-90.14231110 77.29457855]
[-73.77751160 81.72512817]
[-58.85284424 80.22368622]
[-43.92817688 78.72225189]
[-29.00350952 77.22081757]
[-14.07884121 75.71938324]
[-25.25608444 65.71591949]
[-28.66848946 51.10923004]
[-23.08027458 37.18903351]
[-10.51517773 28.99645424]
[4.47642183 29.49838829]
[16.46540260 38.51306152]
[21.11002541 52.77586365]
[16.72826385 67.12159729]
[4.90915775 76.35422516]
[19.70021057 78.84915924]
[34.49126434 81.34410095]
[49.28231812 83.83904266]
[64.07337189 86.33398438]
[78.86442566 88.82892609]
[93.65547943 91.32386017]
[108.65338898 91.07321930]
[123.35281372 88.08542633]
[138.05223083 85.09763336]
[147.70509338 68.98389435]
[165.71905518 64.90503693]
[180.84861755 74.94215393]
[195.31564331 70.97922516]
[209.78268433 67.01628876]
[224.24972534 63.05335999]
[231.88175964 57.66532516]
[239.26658630 59.20838165]
[253.85797119 55.73107910]
[254.11059570 40.65172195]
[258.10614014 26.10915375]
[265.59347534 13.01753044]
[276.10192871 2.19980359]
[288.97094727 -5.66401625]
[303.39154053 -10.07960129]
[318.45721436 -10.76938629]
[333.22097778 -7.69000864]
[346.75469971 -1.03504169]
[358.20770264 8.77717781]
[366.86001587 21.12984657]
[372.16775513 35.24646378]
[373.79724121 50.23964691]
[371.64605713 65.16691589]
[365.84945679 79.08992004]
[356.77178955 91.13346100]
[344.98370361 100.54046631]
[331.22619629 106.71959686]
[316.36407471 109.28243256]
[301.33157349 108.06787872]
[287.07366943 103.15226746]
[274.48663330 94.84461212]
[264.36169434 83.66713715]
[257.33526611 70.32245636]
[242.74389648 73.79975891]
[228.21266174 77.52040100]
[213.74562073 81.48332977]
[199.27857971 85.44625854]
[184.81153870 89.40919495]
[181.34391785 100.52525330]
[172.78854370 108.60198212]
[161.25636292 111.48339844]
[149.67375183 108.31602478]
[141.04002380 99.79706573]
[126.34059906 102.78485107]
[111.64117432 105.77264404]
[124.49516296 113.50406647]
[132.45774841 126.21615601]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 43]
[10 42]
[11 41]
[12 40]
[13 39]
[14 38]
[15 37]
[16 28]
[17 27]
[18 26]
[19 25]
[20 24]
[44 91]
[45 90]
[46 89]
[49 84]
[50 83]
[51 82]
[52 81]
[54 80]
[55 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
