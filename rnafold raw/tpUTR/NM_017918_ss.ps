%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 22:54:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUACAGUUUUAAAUGUCGUCAGAUUUUCCAUUAUGUAUUGAUUUUGCAACUUAGGAUGUUUUUGAGUCCCAUGGUUCAUUUUGAUUGUUUAAUCUUUGUUAUUAAAUUCUUGUAAAACAGAA\
) } def
/len { sequence length } bind def

/coor [
[89.59669495 148.59689331]
[77.03865051 140.39350891]
[74.62515259 125.58895111]
[83.92712402 113.82199860]
[70.69275665 120.88256073]
[57.45838928 127.94311523]
[44.22402191 135.00367737]
[47.25163651 149.79264832]
[45.99058914 164.82035828]
[40.55159378 178.86964417]
[31.38341331 190.80499268]
[19.23583603 199.66435242]
[5.09837055 204.73664856]
[-9.88036251 205.61885071]
[-24.48594666 202.24798584]
[-37.53663254 194.90557861]
[-47.97894669 184.19412231]
[-61.21331406 191.25468445]
[-74.44768524 198.31524658]
[-82.65449524 212.51313782]
[-99.05126953 212.23420715]
[-106.77040863 197.76538086]
[-97.87113190 183.99095154]
[-81.50823975 185.08087158]
[-68.27387238 178.02030945]
[-55.03950500 170.95976257]
[-58.12133026 156.32145691]
[-56.95229340 141.39280701]
[-51.61862564 127.38432312]
[-42.54458237 115.43431854]
[-30.45874596 106.51643372]
[-16.33550453 101.36027527]
[-1.31650960 100.39173126]
[13.38161182 103.69782257]
[26.56581306 111.01896667]
[37.16345978 121.76931000]
[50.39783096 114.70874786]
[63.63219833 107.64819336]
[76.86656952 100.58763123]
[82.85354614 90.68071747]
[91.69857025 86.45105743]
[99.67550659 87.73995209]
[104.48966217 73.53347778]
[109.30381775 59.32700348]
[114.11797333 45.12052917]
[107.37286377 31.07983017]
[112.45747375 16.74102402]
[125.88470459 10.39712238]
[130.69886780 -3.80935168]
[135.51301575 -18.01582718]
[140.32716370 -32.22230148]
[140.12678528 -41.46929932]
[145.44493103 -46.72264862]
[150.61457825 -60.80365753]
[155.78421021 -74.88466644]
[160.95385742 -88.96567535]
[166.12350464 -103.04667664]
[171.29315186 -117.12768555]
[176.46279907 -131.20869446]
[181.63243103 -145.28970337]
[170.93023682 -157.82359314]
[167.99363708 -173.94619751]
[173.52575684 -189.27270508]
[185.93945312 -199.68270874]
[201.81114197 -202.42788696]
[206.62530518 -216.63435364]
[200.83995056 -231.59796143]
[209.05593872 -245.37754822]
[224.97067261 -247.40260315]
[236.37571716 -236.11967468]
[234.52210999 -220.18406677]
[220.83177185 -211.82020569]
[216.01762390 -197.61373901]
[225.71914673 -187.91687012]
[230.29556274 -174.91571045]
[228.79273987 -161.14797974]
[221.44912720 -149.32751465]
[209.66018677 -141.80921936]
[195.71343994 -140.12005615]
[190.54379272 -126.03905487]
[185.37416077 -111.95804596]
[180.20451355 -97.87703705]
[175.03486633 -83.79602814]
[169.86521912 -69.71501923]
[164.69558716 -55.63401413]
[159.52593994 -41.55300522]
[154.53364563 -27.40814590]
[149.71948242 -13.20167255]
[144.90533447 1.00480235]
[140.09118652 15.21127701]
[146.89562988 28.41109276]
[142.21575928 42.88705826]
[128.32444763 49.93468475]
[123.51029205 64.14115906]
[118.69613647 78.34763336]
[113.88198090 92.55410767]
[117.06208801 107.21312714]
[127.33029175 118.14765930]
[137.59849548 129.08218384]
[147.86671448 140.01672363]
[158.13491821 150.95124817]
[168.40312195 161.88577271]
[176.65599060 166.06158447]
[178.78770447 173.22650146]
[188.77787781 184.41561890]
[198.76805115 195.60473633]
[214.19268799 193.91348267]
[227.64883423 201.64082336]
[233.96234131 215.81542969]
[230.70552063 230.98687744]
[219.13069153 241.32142639]
[203.68861389 242.84524536]
[190.31709290 234.97239685]
[184.15773010 220.73013306]
[187.57893372 205.59490967]
[177.58876038 194.40579224]
[167.59858704 183.21667480]
[157.46859741 172.15397644]
[147.20037842 161.21945190]
[136.93217468 150.28492737]
[126.66397095 139.35040283]
[116.39576721 128.41586304]
[106.12755585 117.48133850]
[111.16088104 131.61164856]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 39]
[5 38]
[6 37]
[7 36]
[17 26]
[18 25]
[19 24]
[42 96]
[43 95]
[44 94]
[45 93]
[48 90]
[49 89]
[50 88]
[51 87]
[53 86]
[54 85]
[55 84]
[56 83]
[57 82]
[58 81]
[59 80]
[60 79]
[65 73]
[66 72]
[97 123]
[98 122]
[99 121]
[100 120]
[101 119]
[102 118]
[104 117]
[105 116]
[106 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
