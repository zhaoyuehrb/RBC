%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 13:41:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGCAGUAAAGAGACCACCAGCAGUGACACCUGCCAAUGACAGAUGCAAGCCCAACACCCUUUUGGUACGCAAAACCUGCUCUCAAUAAAUUCCCCCAAAGCUCUGA\
) } def
/len { sequence length } bind def

/coor [
[-61.89039993 182.41006470]
[-75.09342194 189.52906799]
[-88.29644012 196.64807129]
[-101.49946594 203.76708984]
[-114.70248413 210.88609314]
[-127.90550232 218.00509644]
[-126.35571289 231.29469299]
[-129.45448303 244.27745056]
[-136.80372620 255.38081360]
[-147.49192810 263.26763916]
[-160.20707703 266.99728394]
[-173.39775085 266.13775635]
[-185.46243286 260.81549072]
[-194.94387817 251.69755554]
[-208.53848267 258.03683472]
[-211.36698914 273.29394531]
[-222.64633179 283.95019531]
[-238.03939819 285.90808105]
[-251.62722778 278.41470337]
[-258.18502808 264.35147095]
[-255.19117737 249.12593079]
[-243.79690552 238.59266663]
[-228.38349915 236.80189514]
[-214.87776184 244.44221497]
[-201.28314209 238.10295105]
[-201.60623169 221.34275818]
[-194.61787415 206.04544067]
[-181.65306091 195.24723816]
[-165.23809814 191.11386108]
[-148.59832764 194.50633240]
[-135.02450562 204.80207825]
[-121.82148743 197.68307495]
[-108.61846924 190.56405640]
[-95.41545105 183.44505310]
[-82.21242523 176.32604980]
[-69.00940704 169.20704651]
[-68.14591980 157.64974976]
[-61.68448639 147.88333130]
[-51.17066574 142.45764160]
[-39.22526169 142.85791016]
[-28.89127541 149.10014343]
[-15.29665756 142.76086426]
[-1.70204103 136.42160034]
[11.89257622 130.08232117]
[16.69879723 124.31402588]
[25.97603035 123.76280975]
[39.74927139 117.82161713]
[37.60819244 92.58229065]
[45.60731125 68.54852295]
[62.44657898 49.62638855]
[85.38919830 38.89120483]
[110.70642853 38.08770370]
[115.00847626 23.71785927]
[119.31052399 9.34801674]
[123.61257172 -5.02182579]
[114.86898804 -17.98653793]
[116.55597687 -33.53285980]
[127.87699127 -44.32028961]
[143.48658752 -45.25533676]
[156.01440430 -35.89649963]
[159.54518127 -20.66273499]
[152.41180420 -6.74695921]
[137.98242188 -0.71977741]
[133.68037415 13.65006542]
[129.37832642 28.01990700]
[125.07627106 42.38975143]
[134.61280823 47.56229019]
[143.11738586 54.29823685]
[150.33644104 62.39676285]
[156.05473328 71.61641693]
[170.15011597 66.48611450]
[184.24549866 61.35581207]
[192.30145264 47.48205185]
[208.19168091 45.27293015]
[219.72656250 56.42309570]
[218.05752563 72.37908936]
[204.46490479 80.90084839]
[189.37580872 75.45120239]
[175.28041077 80.58150482]
[161.18502808 85.71180725]
[162.55393982 94.10385132]
[162.77722168 102.60388947]
[161.85078430 111.05623627]
[159.79159546 119.30609131]
[156.63735962 127.20236969]
[152.44586182 134.60046387]
[147.29385376 141.36486816]
[141.27568054 147.37170410]
[134.50157166 152.51097107]
[127.09560394 156.68852234]
[119.19339752 159.82786560]
[110.93967438 161.87150574]
[102.48559570 162.78201294]
[93.98600006 162.54272461]
[85.59654236 161.15800476]
[77.47087097 158.65321350]
[69.75781250 155.07421875]
[62.59861374 150.48660278]
[56.12439728 144.97434998]
[50.45373154 138.63841248]
[45.69046783 131.59486389]
[31.91722679 137.53605652]
[18.23184967 143.67694092]
[4.63723278 150.01620483]
[-8.95738411 156.35548401]
[-22.55200005 162.69476318]
[-28.21387672 180.64518738]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 34]
[4 33]
[5 32]
[6 31]
[14 25]
[15 24]
[41 106]
[42 105]
[43 104]
[44 103]
[46 102]
[47 101]
[52 66]
[53 65]
[54 64]
[55 63]
[70 80]
[71 79]
[72 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
