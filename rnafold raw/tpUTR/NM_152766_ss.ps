%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 07:19:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCCCUUUUGCUUAAUUACUGGGUUUUCUGGGCAGUUUUUUUUUUAAAGAGUUGGAGUAAGAAGAGGAUUAAAAAGGAAAGGCAAAUAAAC\
) } def
/len { sequence length } bind def

/coor [
[141.28330994 247.95846558]
[137.27879333 233.50288391]
[133.27429199 219.04730225]
[118.48589325 206.78271484]
[123.26804352 187.34298706]
[118.29677582 173.19071960]
[113.32551575 159.03845215]
[108.35424805 144.88619995]
[103.38298798 130.73393250]
[98.41172028 116.58167267]
[85.95729828 108.22180176]
[70.97655487 108.98154449]
[55.99580383 109.74127960]
[41.01505661 110.50101471]
[26.03430939 111.26075745]
[20.96891785 125.59289551]
[10.80071735 136.89228821]
[-2.91971540 143.43583679]
[-18.10011482 144.22572327]
[-32.42557907 139.14147949]
[-43.71157837 128.95841980]
[-50.23708344 115.22940063]
[-51.00699997 100.04797363]
[-45.90391922 85.72920990]
[-35.70602417 74.45661163]
[-21.96842384 67.94917297]
[-6.78599834 67.19923401]
[7.52604055 72.32114410]
[18.78521156 82.53385925]
[25.27457237 96.28000641]
[40.25532150 95.52027130]
[55.23606873 94.76052856]
[70.21681213 94.00079346]
[85.19756317 93.24105835]
[97.65198517 84.88118744]
[104.02950287 71.30447388]
[110.40702057 57.72775269]
[116.78453827 44.15103531]
[123.16205597 30.57431793]
[129.53958130 16.99760056]
[135.91709900 3.42088342]
[142.29461670 -10.15583420]
[148.67213440 -23.73255157]
[155.04965210 -37.30926895]
[161.42716980 -50.88598633]
[167.80468750 -64.46270752]
[174.18220520 -78.03942108]
[164.88916016 -90.20074463]
[162.32365417 -105.28971100]
[167.07522583 -119.83897400]
[178.05200195 -130.50523376]
[192.73159790 -134.83744812]
[207.74075317 -131.84010315]
[219.63046265 -122.20198822]
[225.66856384 -108.13785553]
[224.46754456 -92.87953949]
[216.30340576 -79.93329620]
[203.05218506 -72.27407074]
[187.75892639 -71.66190338]
[181.38140869 -58.08518600]
[175.00389099 -44.50846863]
[168.62637329 -30.93175125]
[162.24885559 -17.35503387]
[155.87132263 -3.77831578]
[149.49380493 9.79840183]
[143.11628723 23.37512016]
[136.73876953 36.95183563]
[130.36125183 50.52855301]
[123.98374176 64.10527039]
[117.60622406 77.68199158]
[111.22869873 91.25870514]
[115.65462494 100.66175079]
[112.56398773 111.61040497]
[117.53524780 125.76267242]
[122.50651550 139.91493225]
[127.47777557 154.06719971]
[132.44903564 168.21945190]
[137.42030334 182.37171936]
[147.71315002 186.62371826]
[153.74424744 195.72033691]
[153.65711975 206.41213989]
[147.72987366 215.04278564]
[151.73437500 229.49838257]
[155.73889160 243.95396423]
[170.50300598 248.42880249]
[180.48667908 260.19018555]
[182.50415039 275.48504639]
[175.91165161 289.43292236]
[162.81282043 297.58300781]
[147.38746643 297.33471680]
[134.55773926 288.76724243]
[128.41757202 274.61444092]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 84]
[2 83]
[3 82]
[5 78]
[6 77]
[7 76]
[8 75]
[9 74]
[10 73]
[11 34]
[12 33]
[13 32]
[14 31]
[15 30]
[35 71]
[36 70]
[37 69]
[38 68]
[39 67]
[40 66]
[41 65]
[42 64]
[43 63]
[44 62]
[45 61]
[46 60]
[47 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
