%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 14:51:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCCCACAUCUGAGCUGGGGAAUUGUACACAUAGUAACCCAGCCUGUUCUGCAUCAUAAGGCUGCUGC\
) } def
/len { sequence length } bind def

/coor [
[98.43368530 164.92045593]
[86.89063263 163.60238647]
[75.76718140 160.24856567]
[65.41935730 154.96633911]
[56.17837143 147.92478943]
[48.34000778 139.34927368]
[42.15515137 129.51428223]
[37.82175827 118.73462677]
[35.47853851 107.35531616]
[35.20048523 95.74058533]
[36.99650192 84.26218414]
[40.80910110 73.28750610]
[46.51625061 63.16783524]
[53.93528366 54.22706604]
[62.82872772 46.75137329]
[55.72069931 33.54243851]
[48.61266708 20.33350754]
[41.50463867 7.12457371]
[34.39661026 -6.08435917]
[27.28857803 -19.29329300]
[12.41924477 -23.93448448]
[5.39885807 -37.43147659]
[9.91516018 -51.57851410]
[2.80713058 -64.78744507]
[-4.30089951 -77.99637604]
[-11.40892887 -91.20531464]
[-18.51696014 -104.41424561]
[-32.74423218 -112.57002258]
[-32.52416611 -128.96769714]
[-18.08315277 -136.73873901]
[-4.27686214 -127.88896942]
[-5.30802631 -111.52227783]
[1.80000365 -98.31333923]
[8.90803337 -85.10440826]
[16.01606369 -71.89547729]
[23.12409401 -58.68654251]
[37.41884613 -54.66217041]
[44.81556702 -41.36769104]
[40.49751282 -26.40132141]
[47.60554123 -13.19238949]
[54.71356964 0.01654383]
[61.82160187 13.22547722]
[68.92963409 26.43441010]
[76.03765869 39.64334106]
[95.07734680 35.24749374]
[114.56275177 36.71456528]
[132.72958374 43.91173172]
[147.93296814 56.18733215]
[158.79632568 72.42988586]
[164.33605957 91.16873932]
[164.05056763 110.70720673]
[157.96571350 129.27619934]
[170.48431396 137.53965759]
[183.00291443 145.80311584]
[195.70376587 153.78359985]
[208.58050537 161.47708130]
[224.97698975 161.18124390]
[233.19842529 175.37068176]
[224.78730774 189.44850159]
[208.39628601 188.93266296]
[200.88700867 174.35382080]
[188.01028442 166.66032410]
[180.40664673 165.91070557]
[174.73945618 158.32171631]
[162.22085571 150.05825806]
[149.70225525 141.79479980]
[141.45945740 149.98233032]
[131.88964844 156.57005310]
[121.29912567 161.34710693]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 44]
[16 43]
[17 42]
[18 41]
[19 40]
[20 39]
[23 36]
[24 35]
[25 34]
[26 33]
[27 32]
[52 66]
[53 65]
[54 64]
[55 62]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
