%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 22:56:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGGAUUUUUGUUUCUGCCUUAUCUUUCUGUGUUUUUUUCUGAAUAAAAUAUUCAGAGGAAAUGCUUUUACAGA\
) } def
/len { sequence length } bind def

/coor [
[24.70600700 177.41784668]
[3.93416786 184.15274048]
[-16.90022659 177.99981689]
[-27.50682831 188.60643005]
[-38.11343002 199.21302795]
[-48.72003174 209.81962585]
[-59.32663345 220.42622375]
[-63.04608536 236.39801025]
[-78.81426239 240.90319824]
[-90.41020966 229.30725098]
[-85.90501404 213.53907776]
[-69.93323517 209.81962585]
[-59.32663345 199.21302795]
[-48.72003174 188.60643005]
[-38.11343002 177.99981689]
[-27.50682831 167.39321899]
[-31.63525581 159.02264404]
[-33.51883316 149.86491394]
[-33.02742767 140.51225281]
[-30.18477821 131.57159424]
[-25.16745567 123.62519073]
[-18.29393196 117.19268799]
[-10.00437737 112.69718170]
[-0.83246535 110.43734741]
[8.62897301 110.56764984]
[17.76627159 113.08778381]
[25.98472977 117.84217834]
[32.74731827 124.52957153]
[46.22318649 117.94162750]
[59.69905090 111.35367584]
[73.17491150 104.76572418]
[86.65077972 98.17778015]
[99.53659058 90.49950409]
[111.74431610 81.78334808]
[123.76931000 72.81676483]
[135.60641479 63.60357285]
[147.44352722 54.39038086]
[159.28062439 45.17719269]
[171.11773682 35.96400070]
[182.95484924 26.75081062]
[194.79194641 17.53761864]
[206.62905884 8.32442856]
[218.46617126 -0.88876182]
[230.30326843 -10.10195255]
[242.14038086 -19.31514359]
[253.97749329 -28.52833366]
[265.81460571 -37.74152374]
[274.60015869 -52.24153137]
[290.96557617 -47.81331635]
[291.24081421 -30.86160278]
[275.02780151 -25.90441704]
[263.19067383 -16.69122696]
[251.35357666 -7.47803545]
[239.51646423 1.73515511]
[227.67935181 10.94834614]
[215.84225464 20.16153717]
[204.00514221 29.37472725]
[192.16802979 38.58791733]
[180.33093262 47.80110931]
[168.49382019 57.01429749]
[156.65670776 66.22749329]
[144.81961060 75.44068146]
[132.98249817 84.65386963]
[129.54096985 91.44196320]
[120.46047211 93.99108124]
[108.25273895 102.70722961]
[107.54103851 106.00994110]
[105.46826935 109.08119202]
[102.13847351 111.35842896]
[97.88488770 112.33547974]
[93.23873138 111.65364075]
[79.76286316 118.24159241]
[66.28699493 124.82954407]
[52.81113434 131.41749573]
[39.33526993 138.00543213]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 16]
[4 15]
[5 14]
[6 13]
[7 12]
[28 75]
[29 74]
[30 73]
[31 72]
[32 71]
[33 66]
[34 65]
[35 63]
[36 62]
[37 61]
[38 60]
[39 59]
[40 58]
[41 57]
[42 56]
[43 55]
[44 54]
[45 53]
[46 52]
[47 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
