%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 04:02:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCCUUCCCAGCAACACUCCGGUCAGCCCCUGGCAAUCCCACCAAAUCAUCCUGAAUCUGAUCUUUUUAUACACAAUAUACGAAAAGCCAGCUUGAA\
) } def
/len { sequence length } bind def

/coor [
[4.22493410 200.89912415]
[-8.18127441 209.33036804]
[-20.58748245 217.76162720]
[-32.99369049 226.19287109]
[-32.92630005 238.29579163]
[-38.72685623 248.78024292]
[-48.81038666 255.02580261]
[-60.53923416 255.53791809]
[-70.91261292 250.30400085]
[-83.82374573 257.93960571]
[-92.38104248 274.14953613]
[-109.84995270 273.85479736]
[-122.51486969 281.89218140]
[-127.40371704 297.17221069]
[-142.44888306 302.74200439]
[-156.10900879 294.32888794]
[-157.90522766 278.38668823]
[-146.45960999 267.14492798]
[-130.55227661 269.22726440]
[-117.88735962 261.18988037]
[-114.88492584 249.35539246]
[-104.24378204 242.58447266]
[-91.45936584 245.02848816]
[-78.54823303 237.39286804]
[-75.21580505 219.52821350]
[-59.71894836 209.44731140]
[-41.42494202 213.78666687]
[-29.01873398 205.35540771]
[-16.61252594 196.92416382]
[-4.20631647 188.49291992]
[2.70304894 166.38154602]
[26.32180786 163.07159424]
[36.92840958 152.46499634]
[47.53501129 141.85838318]
[58.14161301 131.25178528]
[68.74821472 120.64518738]
[65.35202789 114.22728729]
[63.25797653 107.27470398]
[62.54475403 100.04872894]
[63.23917007 92.82091522]
[65.31512451 85.86290741]
[68.69460297 79.43619537]
[73.25059509 73.78231049]
[78.81187439 69.11373901]
[85.16944885 65.60592651]
[92.08438110 63.39070129]
[99.29679108 62.55132675]
[106.53562927 63.11933899]
[112.05750275 49.17269135]
[117.57936859 35.22604370]
[123.10123444 21.27939606]
[114.02136230 8.80704689]
[113.14876556 -6.59561825]
[120.76187897 -20.01366615]
[134.43139648 -27.16544724]
[149.79541016 -25.76885414]
[161.95133972 -16.26953316]
[167.02024841 -1.69868326]
[163.38468933 13.29418945]
[152.20474243 23.92491341]
[137.04788208 26.80126381]
[131.52601624 40.74790955]
[126.00415039 54.69455719]
[120.48227692 68.64120483]
[131.62454224 79.93045807]
[137.09521484 94.81900787]
[152.06561279 95.76086426]
[167.03601074 96.70272064]
[181.29478455 89.84720612]
[193.51110840 98.36839294]
[208.48152161 99.31024933]
[223.45191956 100.25210571]
[238.42231750 101.19396210]
[251.35884094 91.70576477]
[266.80447388 96.04304504]
[272.91064453 110.87861633]
[264.99322510 124.83189392]
[249.12579346 127.19912720]
[237.48045349 116.16436768]
[222.51005554 115.22251129]
[207.53965759 114.28064728]
[192.56925964 113.33879089]
[179.38127136 120.26167297]
[166.09416199 111.67311859]
[151.12376404 110.73126221]
[136.15335083 109.78940582]
[123.44397736 129.21092224]
[101.73193359 137.41520691]
[79.35481262 131.25178528]
[68.74821472 141.85838318]
[58.14161301 152.46499634]
[47.53501129 163.07159424]
[36.92840958 173.67819214]
[38.83838272 180.81414795]
[38.34177780 188.13208008]
[35.52573776 194.84793091]
[30.72409248 200.25317383]
[24.47812080 203.78948975]
[17.47567368 205.10633850]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[4 27]
[9 24]
[10 23]
[12 20]
[13 19]
[32 93]
[33 92]
[34 91]
[35 90]
[36 89]
[48 64]
[49 63]
[50 62]
[51 61]
[66 86]
[67 85]
[68 84]
[70 82]
[71 81]
[72 80]
[73 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
