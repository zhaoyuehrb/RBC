%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 11:30:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUCACUCCUAGAUGAAAUGUUUCUCAUAAUAACUUGUCAAGAACUUUUUAGAGUUGUUACAUAAAAAUAAUUGCUGUGUAGCUUUCAGUCUUUUAA\
) } def
/len { sequence length } bind def

/coor [
[51.73714066 221.59172058]
[42.68254852 209.63285828]
[36.52921295 195.95307922]
[33.58832932 181.24420166]
[34.00862122 166.25009155]
[37.76884079 151.72904968]
[44.67881393 138.41543579]
[54.38909149 126.98255920]
[66.40859222 118.00862885]
[80.13256836 111.94648743]
[65.22499084 110.28391266]
[50.65225983 116.44395447]
[38.86099625 107.34365845]
[23.95341873 105.68108368]
[9.04584312 104.01851654]
[-5.86173439 102.35594177]
[-20.76931190 100.69336700]
[-33.04137039 110.28681946]
[-48.13608932 108.38836670]
[-57.20635223 96.62971497]
[-72.11392975 94.96714020]
[-87.02150726 93.30456543]
[-101.92908478 91.64199829]
[-114.11615753 101.70433807]
[-129.84071350 100.11878204]
[-139.77363586 87.82600403]
[-138.02192688 72.11909485]
[-125.62481689 62.31668091]
[-109.93730164 64.23436737]
[-100.26651001 76.73442078]
[-85.35893250 78.39698792]
[-70.45135498 80.05956268]
[-55.54377747 81.72213745]
[-44.10581970 72.25067139]
[-28.96373367 73.72438812]
[-19.10673904 85.78578949]
[-4.19916105 87.44836426]
[10.70841599 89.11093903]
[25.61599350 90.77351379]
[40.52357101 92.43608093]
[54.03001022 86.15712738]
[66.88756561 95.37633514]
[81.79514313 97.03890991]
[93.28580475 87.39709473]
[94.23716736 72.42729950]
[95.18852234 57.45749664]
[96.13988495 42.48769760]
[97.09123993 27.51789665]
[89.32808685 13.07263947]
[98.18538666 -0.72881675]
[114.55152130 0.31128150]
[121.59040833 15.12297058]
[112.06104279 28.46925545]
[111.10968781 43.43905640]
[110.15832520 58.40885544]
[109.20697021 73.37865448]
[108.25560760 88.34845734]
[119.59185028 98.17136383]
[134.27389526 95.09926605]
[148.95591736 92.02716827]
[163.63795471 88.95506287]
[178.31999207 85.88296509]
[193.00202942 82.81086731]
[207.68406677 79.73876953]
[222.36610413 76.66666412]
[226.49116516 61.92751694]
[237.00177002 50.80161667]
[251.48268127 45.84561157]
[266.60626221 48.19836426]
[278.89727783 57.31922150]
[285.53128052 71.11228180]
[284.98385620 86.40799713]
[277.38079834 99.69152069]
[264.46923828 107.91040802]
[249.21615601 109.17601013]
[235.12657166 103.19750214]
[225.43820190 91.34870148]
[210.75616455 94.42079926]
[196.07414246 97.49290466]
[181.39210510 100.56500244]
[166.71006775 103.63710022]
[152.02803040 106.70920563]
[137.34599304 109.78130341]
[122.66394806 112.85340118]
[136.11430359 119.49329376]
[147.74079895 128.97087097]
[156.95547485 140.80682373]
[163.29231262 154.40257263]
[166.43083191 169.07055664]
[166.21231079 184.06896973]
[162.64779663 198.63928223]
[155.91758728 212.04466248]
[146.36199951 223.60714722]
[134.46432495 232.74198914]
[120.82624817 238.98721313]
[106.13748932 242.02697754]
[91.14088440 241.70756531]
[76.59487152 238.04512024]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 43]
[11 42]
[13 40]
[14 39]
[15 38]
[16 37]
[17 36]
[20 33]
[21 32]
[22 31]
[23 30]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
[58 84]
[59 83]
[60 82]
[61 81]
[62 80]
[63 79]
[64 78]
[65 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
