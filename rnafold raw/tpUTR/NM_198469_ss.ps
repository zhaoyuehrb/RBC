%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 18:28:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUGAGAUCGUGGGUCACAGGCCCGAGCCGUGAACUCUGUGGCUGCCUCCACCAGAGGUUUCCAUCUGCCCUACUAGCAUUGGCUGCCCUGGGGGACGGGCUGUAGUUCUAGAACCUGAUUUUAACUCAGGAAUAAAGACUUUCUGCGGUCAGUGGC\
) } def
/len { sequence length } bind def

/coor [
[87.27893066 334.55123901]
[77.54037476 322.79867554]
[73.87382507 307.98248291]
[77.00728607 293.04446411]
[86.31859589 280.95059204]
[99.95899963 274.10205078]
[99.66076660 259.10504150]
[99.36253357 244.10798645]
[99.06430054 229.11096191]
[98.76606750 214.11392212]
[98.46783447 199.11688232]
[98.16960144 184.11985779]
[97.87136841 169.12281799]
[97.57313538 154.12577820]
[84.18106842 147.36912537]
[71.94149017 156.04051208]
[59.70191574 164.71188354]
[47.46234512 173.38327026]
[42.23253250 180.94044495]
[34.89210510 182.10252380]
[22.48254204 190.52883911]
[10.07298279 198.95515442]
[3.42063737 213.94442749]
[-12.91301060 215.40867615]
[-22.12530327 201.84158325]
[-14.73942566 187.19984436]
[1.64666593 186.54559326]
[14.05622673 178.11927795]
[26.46578789 169.69296265]
[38.79096222 161.14369202]
[51.03053665 152.47232056]
[63.27011108 143.80093384]
[75.50968170 135.12954712]
[63.39746857 110.01657867]
[69.90680695 86.28034210]
[87.78141022 74.58693695]
[85.11144257 59.82647705]
[82.44147491 45.06601334]
[79.77149963 30.30554962]
[69.70136261 18.10297775]
[75.04967499 4.20172548]
[72.37970734 -10.55873775]
[69.70973969 -25.31920052]
[67.03977203 -40.07966232]
[63.93081665 -54.75394058]
[60.38565063 -69.32897949]
[56.84048462 -83.90402222]
[53.00623703 -98.40569305]
[48.88441849 -112.82826996]
[44.76260376 -127.25083923]
[33.53103256 -138.39366150]
[37.47318649 -152.75711060]
[33.35136795 -167.17968750]
[29.22955132 -181.60226440]
[25.10773468 -196.02482605]
[19.71249199 -203.46481323]
[21.05040550 -210.77523804]
[17.21615601 -225.27691650]
[13.38190746 -239.77857971]
[0.00347847 -247.75701904]
[-3.67841387 -262.51840210]
[4.01025009 -275.22351074]
[0.17600045 -289.72518921]
[-3.65824914 -304.22686768]
[-14.41967297 -311.40151978]
[-17.29367447 -323.59976196]
[-11.26532364 -334.12655640]
[-14.81048965 -348.70159912]
[-18.35565567 -363.27664185]
[-32.45032501 -370.04971313]
[-38.84669113 -384.31927490]
[-34.52458572 -399.34768677]
[-21.52477455 -408.03900146]
[-5.98537207 -406.28942871]
[4.75639200 -394.92507935]
[5.62858486 -379.31185913]
[-3.78061652 -366.82180786]
[-0.23544991 -352.24676514]
[3.30971670 -337.67172241]
[16.09458160 -325.68432617]
[10.84342480 -308.06109619]
[14.67767429 -293.55944824]
[18.51192284 -279.05776978]
[31.47532845 -271.81304932]
[35.57038498 -257.16091919]
[27.88358116 -243.61283875]
[31.71783066 -229.11116028]
[35.55207825 -214.60948181]
[39.53030777 -200.14665222]
[43.65212631 -185.72407532]
[47.77394104 -171.30149841]
[51.89575958 -156.87892151]
[62.83250809 -146.76770020]
[59.18517685 -131.37266541]
[63.30699158 -116.95008850]
[67.42881012 -102.52751160]
[71.14176178 -99.44523621]
[72.92504120 -93.97675323]
[71.41552734 -87.44918823]
[74.96069336 -72.87414551]
[78.50585938 -58.29910660]
[81.36676025 -56.15105820]
[83.30516815 -52.48557663]
[83.60797119 -47.76302338]
[81.80023193 -42.74963379]
[84.47019958 -27.98916817]
[87.14016724 -13.22870636]
[89.81013489 1.53175700]
[99.68930817 12.67856216]
[94.53196716 27.63558197]
[97.20193481 42.39604568]
[99.87190247 57.15650558]
[102.54187012 71.91696930]
[131.12121582 82.89792633]
[138.07168579 119.60633087]
[152.83213806 122.27629852]
[167.59260559 124.94627380]
[182.35307312 127.61624146]
[197.11352539 130.28620911]
[209.02041626 120.14914703]
[224.65788269 120.08900452]
[236.64239502 130.13417053]
[239.31523132 145.54164124]
[231.41436768 159.03646851]
[216.67033386 164.24679565]
[202.04483032 158.71249390]
[194.44355774 145.04667664]
[179.68310547 142.37670898]
[164.92263794 139.70672607]
[150.16217041 137.03675842]
[135.40170288 134.36679077]
[129.69383240 139.23197937]
[141.36729431 148.65164185]
[153.04077148 158.07130432]
[166.62878418 164.42472839]
[171.54733276 178.59539795]
[164.81756592 192.00100708]
[150.51528931 196.52259827]
[137.30250549 189.42172241]
[133.18142700 174.99867249]
[125.72974396 161.98051453]
[118.27806091 148.96235657]
[112.57017517 153.82754517]
[112.86840820 168.82458496]
[113.16664124 183.82162476]
[113.46487427 198.81864929]
[113.76310730 213.81568909]
[114.06134033 228.81272888]
[114.35957336 243.80975342]
[114.65779877 258.80679321]
[114.95603180 273.80383301]
[128.85792542 280.10464478]
[138.64268494 291.81878662]
[142.36755371 306.62042236]
[139.29293823 321.57064819]
[130.02932739 333.70111084]
[116.41600037 340.60330200]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[11 146]
[12 145]
[13 144]
[14 143]
[15 33]
[16 32]
[17 31]
[18 30]
[20 29]
[21 28]
[22 27]
[36 113]
[37 112]
[38 111]
[39 110]
[41 108]
[42 107]
[43 106]
[44 105]
[45 101]
[46 100]
[47 99]
[48 96]
[49 95]
[50 94]
[52 92]
[53 91]
[54 90]
[55 89]
[57 88]
[58 87]
[59 86]
[62 83]
[63 82]
[64 81]
[67 79]
[68 78]
[69 77]
[115 131]
[116 130]
[117 129]
[118 128]
[119 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
