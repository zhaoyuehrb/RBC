%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 03:06:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGAGGCUGAGGCUAGGGCUGGGGACAGAUAUCUUGUACUCCCAGUGACCUCAAUAAAGUACUUUUCAUGGUCCUCUUGA\
) } def
/len { sequence length } bind def

/coor [
[91.88008118 222.27871704]
[100.00410461 208.03329468]
[99.42956543 193.04429626]
[98.85501862 178.05529785]
[98.28047943 163.06631470]
[97.70594025 148.07731628]
[97.13140106 133.08831787]
[73.45247650 113.34548187]
[77.68912506 86.23793793]
[67.70924377 75.03964233]
[57.72935486 63.84133911]
[47.74946976 52.64304352]
[37.76958466 41.44474411]
[26.86071777 43.57113266]
[16.16759872 40.85781479]
[7.71917963 33.89199829]
[3.08752179 24.06076431]
[3.09548974 13.27531719]
[7.67141914 3.59952998]
[-0.95836085 -8.66941071]
[-9.58814049 -20.93835068]
[-18.21792030 -33.20729065]
[-26.84770012 -45.47623062]
[-35.47748184 -57.74517059]
[-44.34068680 -69.84655762]
[-53.66090775 -81.59957886]
[-63.20454407 -93.17192078]
[-72.74817657 -104.74425507]
[-82.29181671 -116.31659698]
[-98.05955505 -119.27596283]
[-105.44926453 -133.51574707]
[-98.79219055 -148.11242676]
[-83.19506073 -151.86865234]
[-70.62267303 -141.90298462]
[-70.71947479 -125.86022949]
[-61.17584229 -114.28789520]
[-51.63220596 -102.71555328]
[-42.08856964 -91.14321899]
[-35.22931290 -87.90486908]
[-32.41129303 -78.93994141]
[-25.68111038 -75.44124603]
[-23.20853996 -66.37495422]
[-14.57876015 -54.10601044]
[-5.94898033 -41.83707047]
[2.68079972 -29.56813049]
[11.31057930 -17.29919052]
[19.94035912 -5.03025007]
[39.12342453 -3.40821099]
[51.42938232 11.77763844]
[48.96788406 31.46485901]
[58.94776917 42.66315842]
[68.92765808 53.86145401]
[78.90753937 65.05975342]
[88.88742828 76.25804901]
[96.09049225 73.19487000]
[104.12660217 72.34261322]
[112.31082153 73.92137146]
[119.90303040 77.93775940]
[126.17460632 84.17232513]
[130.47749329 92.18776703]
[132.30908203 101.35824585]
[131.36666870 110.91778564]
[144.80915833 117.57358551]
[158.25163269 124.22938538]
[173.14321899 118.93633270]
[187.37982178 125.79887390]
[192.51513672 140.74559021]
[185.50245667 154.90884399]
[170.50228882 159.88583374]
[156.41397095 152.72381592]
[151.59584045 137.67185974]
[138.15335083 131.01606750]
[124.71087646 124.36026764]
[112.12039185 132.51377869]
[112.69493103 147.50277710]
[113.26947021 162.49177551]
[113.84401703 177.48075867]
[114.41855621 192.46975708]
[114.99309540 207.45874023]
[124.18376160 221.04048157]
[116.77455902 235.67045593]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 79]
[3 78]
[4 77]
[5 76]
[6 75]
[7 74]
[9 54]
[10 53]
[11 52]
[12 51]
[13 50]
[19 47]
[20 46]
[21 45]
[22 44]
[23 43]
[24 42]
[25 40]
[26 38]
[27 37]
[28 36]
[29 35]
[62 73]
[63 72]
[64 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
