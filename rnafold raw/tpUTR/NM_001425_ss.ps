%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 07:52:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCCCCGCCUCGCUCGGCUGCCCCCGCCCCUUCCCGGCCCCCCUCGCCGCGCGUCCUCCAAAAAAUAAAACCUUAACCGCGG\
) } def
/len { sequence length } bind def

/coor [
[135.56216431 222.84800720]
[122.55129242 231.81979370]
[107.02252960 228.88159180]
[98.18881226 215.77659607]
[101.29103088 200.27975464]
[114.48869324 191.58509827]
[117.27736664 176.84658813]
[120.06604004 162.10809326]
[122.85471344 147.36959839]
[121.23908997 144.55451965]
[120.38954163 141.25006104]
[120.44971466 137.67219543]
[111.09736633 125.94472504]
[101.74501801 114.21725464]
[88.80108643 108.93083191]
[86.52750397 95.13509369]
[77.17515564 83.40762329]
[67.82281494 71.68014526]
[58.47046661 59.95267868]
[44.10142899 64.72301483]
[28.99564552 64.29023743]
[14.97573280 58.72586441]
[3.72668195 48.71941757]
[-3.40664506 35.49303818]
[-5.58029032 20.65222359]
[-2.55100489 5.99096489]
[5.29669333 -6.72512484]
[-4.05565405 -18.45259666]
[-13.40800095 -30.18006897]
[-29.04418755 -30.38902283]
[-40.85406876 -40.63893890]
[-43.26137924 -56.09011459]
[-35.12945938 -69.44698334]
[-20.29795456 -74.40283203]
[-5.76984692 -68.61766815]
[1.59513462 -54.82306671]
[-1.68052876 -39.53241730]
[7.67181826 -27.80494308]
[17.02416611 -16.07747078]
[31.16771317 -20.89881516]
[46.13546371 -20.58971214]
[60.12050629 -15.16817379]
[71.42795563 -5.27054787]
[78.68037415 7.92310858]
[80.98551178 22.82970428]
[78.04608917 37.65305710]
[70.19793701 50.60033035]
[79.55028534 62.32780075]
[88.90263367 74.05527496]
[98.25498199 85.78274536]
[111.19891357 91.06916809]
[113.47249603 104.86490631]
[122.82484436 116.59237671]
[132.17718506 128.31985474]
[132.82093811 113.33367157]
[136.84178162 98.88262177]
[144.03080750 85.71759796]
[154.01446533 74.52265930]
[166.27398682 65.87950897]
[180.17236328 60.23725510]
[194.98742676 57.88907242]
[209.94937134 58.95697021]
[224.28074646 63.38546753]
[237.23689270 70.94445038]
[248.14460754 81.24114227]
[256.43710327 93.74053192]
[261.68347168 107.79312134]
[263.61114502 122.66874695]
[262.11996460 137.59443665]
[257.28735352 151.79464722]
[249.36448669 164.53153992]
[238.76301575 175.14326477]
[226.03379822 183.07843018]
[211.83825684 187.92474365]
[196.91401672 189.43035889]
[182.03654480 187.51705933]
[167.97888184 182.28425598]
[155.47148132 174.00384521]
[145.16426086 163.10609436]
[137.59321594 150.15827942]
[134.80453491 164.89677429]
[132.01585388 179.63526917]
[129.22718811 194.37376404]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 83]
[7 82]
[8 81]
[9 80]
[12 54]
[13 53]
[14 52]
[16 50]
[17 49]
[18 48]
[19 47]
[27 39]
[28 38]
[29 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
