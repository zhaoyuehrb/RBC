%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 15:02:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUGGUGGGAGGCCAGGAGUUAUCUUAUCUCAUCCUGGACCAAACAGAUAGGCCAGAACCAGCCUGCAUCCUGGGGCUGCUAUGUGGUUCAGUUAAUCAGUGUGCCAAGAUUCUAAUAAAGUUGACCUUGGGUUCUGUGAA\
) } def
/len { sequence length } bind def

/coor [
[58.52600861 489.11334229]
[66.88175201 475.00256348]
[66.55223846 460.00619507]
[66.22272491 445.00982666]
[64.20955658 442.95443726]
[62.92224503 439.94723511]
[62.73928452 436.27304077]
[63.92433548 432.35241699]
[66.58118439 428.69601440]
[67.56908417 413.72857666]
[68.55697632 398.76116943]
[69.54487610 383.79373169]
[62.66259003 370.58450317]
[71.29196930 357.32388306]
[72.27986908 342.35644531]
[73.26776886 327.38900757]
[74.25566101 312.42156982]
[75.24356079 297.45413208]
[72.52446747 290.51904297]
[76.42111969 282.16989136]
[77.73757172 267.22778320]
[79.05403137 252.28565979]
[80.37048340 237.34355164]
[73.78002930 223.98632812]
[82.69863129 210.91845703]
[84.01508331 195.97633362]
[85.33154297 181.03422546]
[69.75578308 176.59631348]
[55.34979630 169.19586182]
[42.67076111 159.11909485]
[32.20907974 146.75575256]
[24.36937523 132.58399963]
[19.45487213 117.15200043]
[17.65564728 101.05659485]
[19.04129219 84.92032623]
[23.55821419 69.36730194]
[10.20060444 62.54277039]
[-3.15700507 55.71823502]
[-16.51461411 48.89369965]
[-25.65807152 47.75825119]
[-30.08823967 41.76971054]
[-43.29270935 34.65339279]
[-56.74209595 42.21100616]
[-72.14102173 41.27478027]
[-84.57575226 32.14345932]
[-90.07840729 17.73081589]
[-86.89311218 2.63586879]
[-76.03627777 -8.32463646]
[-60.97227859 -11.65324306]
[-46.50799179 -6.28780460]
[-37.25891113 6.05958652]
[-36.17638779 21.44892311]
[-22.97192001 28.56524277]
[-9.69007969 35.53609085]
[3.66752934 42.36062622]
[17.02513885 49.18515778]
[30.38274765 56.00969315]
[41.54631424 41.99245071]
[55.47761536 30.72182083]
[71.51701355 22.73145294]
[88.90505981 18.39968681]
[88.24620056 3.41416383]
[87.58733368 -11.57135868]
[86.92847443 -26.55688286]
[86.26960754 -41.54240417]
[85.61074829 -56.52792740]
[72.59485626 -64.97578430]
[67.06175232 -79.47283173]
[71.13901520 -94.44465637]
[83.25886536 -104.13428497]
[98.76096344 -104.81586456]
[111.68444061 -96.22730255]
[117.05995941 -81.67108917]
[112.82051849 -66.74437714]
[100.59626770 -57.18679047]
[101.25513458 -42.20126724]
[101.91399384 -27.21574593]
[102.57286072 -12.23022270]
[103.23171997 2.75530052]
[103.89058685 17.74082375]
[117.24121094 19.47392082]
[130.13105774 23.35909653]
[142.21565247 29.29251862]
[153.17201233 37.11561584]
[162.70733643 46.61931229]
[170.56680298 57.54962158]
[184.07110596 51.02016449]
[197.57540894 44.49070740]
[211.07971191 37.96125412]
[220.13580322 24.98828888]
[234.96202087 26.41393661]
[248.46632385 19.88448143]
[257.52243042 6.91151667]
[272.34863281 8.33716297]
[278.96026611 -6.28015995]
[294.54562378 -10.08492184]
[307.14895630 -0.15843444]
[307.10208130 15.88455009]
[294.44094849 25.73722839]
[278.87808228 21.84146690]
[270.78793335 34.34740067]
[254.99578857 33.38878250]
[241.49148560 39.91823959]
[233.40130615 52.42417526]
[217.60917664 51.46555710]
[204.10487366 57.99501419]
[190.60057068 64.52446747]
[177.09626770 71.05392456]
[180.73217773 83.75115967]
[182.29148865 96.86635590]
[181.73408508 110.06214905]
[179.07432556 122.99913025]
[174.38059998 135.34451294]
[167.77365112 146.78077698]
[159.42341614 157.01373291]
[149.54469299 165.78018188]
[138.39158630 172.85461426]
[126.25095367 178.05508423]
[113.43509674 181.24781799]
[100.27365875 182.35067749]
[98.95720673 197.29280090]
[97.64074707 212.23490906]
[104.13703918 226.66088867]
[95.31260681 238.66000366]
[93.99614716 253.60211182]
[92.67969513 268.54425049]
[91.36323547 283.48635864]
[90.21099091 298.44204712]
[89.22309875 313.40948486]
[88.23519897 328.37689209]
[87.24729919 343.34432983]
[86.25940704 358.31176758]
[93.07102966 372.59155273]
[84.51231384 384.78161621]
[83.52441406 399.74905396]
[82.53651428 414.71649170]
[81.54861450 429.68392944]
[81.21910858 444.68029785]
[81.54861450 459.67666626]
[81.87812805 474.67306519]
[90.84561157 488.40319824]
[83.19831848 502.91012573]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 140]
[3 139]
[4 138]
[9 137]
[10 136]
[11 135]
[12 134]
[14 132]
[15 131]
[16 130]
[17 129]
[18 128]
[20 127]
[21 126]
[22 125]
[23 124]
[25 122]
[26 121]
[27 120]
[36 57]
[37 56]
[38 55]
[39 54]
[41 53]
[42 52]
[61 80]
[62 79]
[63 78]
[64 77]
[65 76]
[66 75]
[86 108]
[87 107]
[88 106]
[89 105]
[91 103]
[92 102]
[94 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
