%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 22:01:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCAUCAGUGGGUGGCUGGCCGCGGUUCUGGAAGGUGGUGAGCAUUGAGGCCCAGUAAGACACUCAUGUGGCUAGUGUUUGCCGAAUGAAACUCAACUCAAUAAAAAACAAAAACCAAAUUGGGCAGCUGA\
) } def
/len { sequence length } bind def

/coor [
[11.54716396 141.12513733]
[8.29156780 140.63745117]
[5.78419638 139.19523621]
[-8.80544758 142.67980957]
[-23.39509010 146.16439819]
[-35.02031326 156.89587402]
[-49.19682312 152.32685852]
[-63.78646469 155.81144714]
[-78.37610626 159.29602051]
[-92.96575165 162.78059387]
[-107.55539703 166.26518250]
[-96.70141602 176.61849976]
[-97.78929138 191.57899475]
[-110.02689362 200.25315857]
[-124.50337982 196.32489014]
[-130.67767334 182.65455627]
[-124.05435944 169.19654846]
[-138.95141602 170.95088196]
[-153.84848022 172.70521545]
[-166.64901733 182.00341797]
[-180.19386292 175.80773926]
[-195.09092712 177.56207275]
[-209.98797607 179.31640625]
[-224.88504028 181.07072449]
[-239.78208923 182.82505798]
[-245.20147705 197.13899231]
[-256.65982056 207.28616333]
[-271.52407837 210.93481445]
[-286.37854004 207.24652100]
[-297.80975342 197.06883240]
[-303.19094849 182.74047852]
[-301.28552246 167.55404663]
[-292.53137207 154.99923706]
[-278.94009399 147.96107483]
[-263.63488770 148.05686951]
[-250.13275146 155.26460266]
[-241.53642273 167.92800903]
[-226.63937378 166.17367554]
[-211.74230957 164.41934204]
[-196.84524536 162.66500854]
[-181.94819641 160.91069031]
[-170.21318054 151.73796082]
[-155.60279846 157.80815125]
[-140.70574951 156.05383301]
[-125.80868530 154.29949951]
[-111.03997803 151.67553711]
[-96.45033264 148.19096375]
[-81.86068726 144.70637512]
[-67.27104187 141.22180176]
[-52.68140030 137.73721313]
[-42.09972763 127.25497437]
[-26.87967110 131.57475281]
[-12.29002762 128.09016418]
[2.29961586 124.60559082]
[16.70989418 120.44098663]
[30.90912819 115.60552216]
[45.10836411 110.77005768]
[59.30759811 105.93459320]
[59.14456940 95.31763458]
[61.70540237 85.01284790]
[66.81937408 75.70726776]
[74.14551544 68.02130890]
[83.19540405 62.46739197]
[93.36566925 59.41580963]
[103.97824860 59.07000732]
[114.32559967 61.45304108]
[122.02770996 48.58146667]
[129.72982788 35.70988846]
[137.43193054 22.83831406]
[137.87855530 7.02341223]
[151.05310059 0.07498035]
[158.75520325 -12.79659557]
[166.45732117 -25.66817093]
[174.15943909 -38.53974533]
[167.94676208 -52.75882721]
[171.31124878 -67.90676117]
[182.95916748 -78.15885925]
[198.41166687 -79.57297516]
[211.72695923 -71.60535431]
[217.78500366 -57.31971741]
[214.25640869 -42.20917130]
[202.49794006 -32.08403778]
[187.03100586 -30.83763313]
[179.32890320 -17.96605873]
[171.62678528 -5.09448242]
[163.92466736 7.77709341]
[164.02896118 22.67133331]
[150.30351257 30.54042625]
[142.60139465 43.41200256]
[134.89929199 56.28357697]
[127.19717407 69.15515137]
[131.59161377 73.67395782]
[135.24385071 78.81127167]
[138.06805420 84.44639587]
[139.99787903 90.44693756]
[140.98797607 96.67192078]
[141.01512146 102.97509003]
[140.07862854 109.20836639]
[138.20053101 115.22530365]
[150.88801575 123.22704315]
[163.57550049 131.22877502]
[176.26298523 139.23051453]
[188.95045471 147.23225403]
[201.63793945 155.23399353]
[213.60646057 145.93182373]
[228.03567505 141.28707886]
[243.18318176 141.86062622]
[257.21984863 147.58320618]
[268.45065308 157.76379395]
[275.51947021 171.17303467]
[277.57266235 186.19169617]
[274.36233521 201.00619507]
[266.27612305 213.82762146]
[254.29048157 223.10772705]
[239.85273743 227.72587585]
[224.70631409 227.12442017]
[210.68022156 221.37597656]
[199.46818542 211.17469788]
[192.42408752 197.75245667]
[190.39857483 182.73004150]
[193.63619995 167.92147827]
[180.94871521 159.91973877]
[168.26124573 151.91799927]
[155.57376099 143.91625977]
[142.88627625 135.91452026]
[130.19879150 127.91278076]
[108.03908539 140.32943726]
[82.81209564 137.35862732]
[64.14306641 120.13382721]
[49.94382858 124.96929169]
[35.74459457 129.80476379]
[21.54535866 134.64022827]
[18.68178177 138.18566895]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 54]
[4 53]
[5 52]
[7 50]
[8 49]
[9 48]
[10 47]
[11 46]
[17 45]
[18 44]
[19 43]
[21 41]
[22 40]
[23 39]
[24 38]
[25 37]
[55 132]
[56 131]
[57 130]
[58 129]
[66 91]
[67 90]
[68 89]
[69 88]
[71 86]
[72 85]
[73 84]
[74 83]
[99 126]
[100 125]
[101 124]
[102 123]
[103 122]
[104 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
