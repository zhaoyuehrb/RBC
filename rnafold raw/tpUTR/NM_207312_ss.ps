%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 07:37:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGAGGGUGUGGUGGGUUCUCCCCUGCCACCCCUAGGAUGGCUGCUUUCAAGUUGUUUGCAAUUAAAGAUUCUGUAUAAAACCAA\
) } def
/len { sequence length } bind def

/coor [
[118.45548248 151.02946472]
[117.37311554 136.06855774]
[96.64838409 135.97578430]
[80.89140320 125.95270538]
[73.84860992 110.88317871]
[58.96824646 112.77392578]
[44.08789062 114.66467285]
[29.20753098 116.55541992]
[20.86573410 120.82858276]
[13.75701141 118.23576355]
[-1.18190730 119.58805847]
[-16.12082672 120.94035339]
[-31.05974579 122.29264832]
[-45.99866486 123.64495087]
[-60.93758392 124.99724579]
[-75.87650299 126.34954071]
[-90.81542206 127.70183563]
[-100.74398804 139.99813843]
[-116.46797943 141.58927917]
[-128.65863037 131.53125000]
[-130.08343506 115.79132080]
[-119.89708710 103.70770264]
[-104.14296722 102.44938660]
[-92.16771698 112.76291656]
[-77.22879791 111.41062164]
[-62.28987885 110.05832672]
[-47.35095978 108.70603180]
[-32.41204071 107.35372925]
[-17.47312164 106.00143433]
[-2.53420353 104.64913940]
[12.40471554 103.29684448]
[27.31678391 101.67505646]
[42.19714355 99.78430939]
[57.07750320 97.89356995]
[71.95786285 96.00282288]
[82.38019562 73.01437378]
[109.71887207 65.20008850]
[136.08926392 82.66992188]
[140.87878418 68.45512390]
[145.66830444 54.24032974]
[150.45782471 40.02553177]
[155.24734497 25.81073380]
[160.03688049 11.59593678]
[164.82640076 -2.61886120]
[156.52996826 -15.87416935]
[158.74606323 -31.35392761]
[170.42831421 -41.74906921]
[186.06071472 -42.15132523]
[198.26214600 -32.37076187]
[201.27142334 -17.02546120]
[193.66769409 -3.36100912]
[179.04119873 2.17066169]
[174.25166321 16.38545990]
[169.46214294 30.60025597]
[164.67262268 44.81505585]
[159.88310242 59.02985382]
[155.09358215 73.24465179]
[150.30406189 87.45944977]
[157.80406189 100.44982910]
[172.50918579 103.40937805]
[187.21432495 106.36892700]
[201.91946411 109.32847595]
[211.51679993 97.40581512]
[225.56016541 91.31956482]
[240.82249451 92.46829224]
[253.79664612 100.58803558]
[261.50122070 113.81294250]
[262.16577148 129.10401917]
[255.63761902 142.94747925]
[243.41683960 152.16221619]
[228.31170654 154.63073730]
[213.79327393 149.78579712]
[203.19773865 138.74073792]
[198.95991516 124.03361511]
[184.25477600 121.07406616]
[169.54963684 118.11451721]
[154.84451294 115.15496826]
[149.21688843 120.11277008]
[162.12524414 127.75307465]
[158.84776306 142.39064026]
[143.91381836 143.79679871]
[137.96163940 130.02838135]
[132.33401489 134.98619080]
[133.41638184 149.94709778]
[140.58987427 165.30863953]
[127.81447601 176.45429993]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 84]
[2 83]
[5 35]
[6 34]
[7 33]
[8 32]
[10 31]
[11 30]
[12 29]
[13 28]
[14 27]
[15 26]
[16 25]
[17 24]
[38 58]
[39 57]
[40 56]
[41 55]
[42 54]
[43 53]
[44 52]
[59 77]
[60 76]
[61 75]
[62 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
