%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 14:58:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCUGAGUGUCCAGCCACAUGGUGGCACCAGCACCACUCCUUUCCUUACCACAUCAACUGAUUAAAGCAGUGACCAGCAGGAACUGCCCAGAGAACUGG\
) } def
/len { sequence length } bind def

/coor [
[69.85662842 102.44751740]
[56.04304886 108.29431152]
[50.03703690 122.66669464]
[35.94480896 128.39939880]
[22.27994537 122.58500671]
[8.46636200 128.43179321]
[-5.34722042 134.27857971]
[-12.17347145 140.61347961]
[-19.67736435 140.08544922]
[-33.66444778 145.50407410]
[-47.65153122 150.92269897]
[-54.66962814 157.04438782]
[-62.15370178 156.28552246]
[-76.30101776 161.27084351]
[-90.44833374 166.25617981]
[-97.65162659 172.15882874]
[-105.10877991 171.16986084]
[-119.40290833 175.71714783]
[-130.04505920 188.19419861]
[-146.12023926 184.95066833]
[-151.09169006 169.32322693]
[-139.84519958 157.38804626]
[-123.95019531 161.42301941]
[-109.65606689 156.87573242]
[-95.43365479 152.10885620]
[-81.28633881 147.12353516]
[-67.13902283 142.13821411]
[-53.07015610 136.93562317]
[-39.08307266 131.51699829]
[-25.09599113 126.09837341]
[-11.19400883 120.46499634]
[2.61957407 114.61820984]
[16.43315697 108.77142334]
[21.77151299 94.91365814]
[35.69716263 88.78740692]
[50.19625854 94.48072815]
[64.00984192 88.63393402]
[49.74488831 83.99594116]
[36.50062561 76.95395660]
[24.67856407 67.72146606]
[14.63709354 56.57835770]
[6.68062544 43.86243820]
[1.05036366 29.95919418]
[-2.08300829 15.29011250]
[-2.62450099 0.29988936]
[-0.55769891 -14.55703926]
[4.05474234 -28.83028030]
[11.07299423 -42.08713150]
[20.28429604 -53.92570877]
[31.40940094 -63.98712158]
[44.11104965 -71.96635437]
[58.00418854 -77.62150574]
[72.66763306 -80.78114319]
[87.65686035 -81.34948730]
[102.51747131 -79.30929565]
[116.79895020 -74.72242737]
[130.06834412 -67.72792816]
[141.92340088 -58.53784561]
[152.00473022 -47.43077469]
[160.00669861 -34.74343872]
[165.68672180 -20.86045265]
[168.87261963 -6.20268726]
[169.46780396 8.78549957]
[167.45422363 23.64973640]
[162.89294434 37.93940735]
[155.92222595 51.22131348]
[146.75338745 63.09281158]
[135.66439819 73.19400787]
[122.99783325 81.21536255]
[137.82031250 83.51623535]
[152.64279175 85.81711578]
[167.46528625 88.11798859]
[182.28776550 90.41886139]
[193.24897766 83.40799713]
[205.63914490 85.74356079]
[212.82040405 95.61254120]
[227.56500244 98.36878204]
[242.84367371 92.41109467]
[255.47161865 102.87374115]
[252.45828247 118.99366760]
[236.90351868 124.18806458]
[224.80874634 113.11338043]
[210.06416321 110.35713959]
[193.95144653 117.11971283]
[179.98689270 105.24134064]
[165.16439819 102.94046783]
[150.34191895 100.63959503]
[135.51943970 98.33872223]
[120.69696045 96.03784180]
[111.47417450 107.86747742]
[117.32096863 121.68106079]
[123.16775513 135.49464417]
[129.01454163 149.30822754]
[142.42028809 158.75375366]
[140.67382812 175.05963135]
[125.57176971 181.45178223]
[112.64981079 171.35450745]
[115.20095825 155.15501404]
[109.35417175 141.34143066]
[103.50738525 127.52785492]
[97.66059113 113.71427155]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 37]
[2 36]
[5 33]
[6 32]
[7 31]
[9 30]
[10 29]
[11 28]
[13 27]
[14 26]
[15 25]
[17 24]
[18 23]
[69 89]
[70 88]
[71 87]
[72 86]
[73 85]
[76 83]
[77 82]
[90 101]
[91 100]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
