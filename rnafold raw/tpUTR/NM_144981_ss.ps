%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:54:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAGCAUUUAUUCUUUUGACUUGAUUAUUGUCUCCUUUUCAUGUGAAUUUAUUACUCCCGUUGAAACCGUGUACUUACCAAUAAACUAUUUGCUAUUCAGU\
) } def
/len { sequence length } bind def

/coor [
[99.30657959 281.82794189]
[104.91466522 267.52951050]
[116.93061829 257.96328735]
[114.62973785 243.14080811]
[112.32886505 228.31832886]
[110.02799225 213.49584961]
[97.89087677 204.93862915]
[95.34631348 189.93930054]
[104.40420532 177.26678467]
[102.10332489 162.44430542]
[90.78692627 161.79672241]
[79.77375031 159.11526489]
[69.42626190 154.48818970]
[60.08502960 148.06777954]
[52.05749130 140.06533813]
[45.60784912 130.74426270]
[40.94837952 120.41132355]
[38.23243713 109.40659332]
[23.23955154 109.86852264]
[8.24666691 110.33045197]
[0.39798009 123.61207581]
[-13.39559555 130.52154541]
[-28.73258018 128.85408020]
[-40.71899796 119.14175415]
[-45.53002548 104.48373413]
[-41.63048172 89.55734253]
[-30.26469994 79.12554169]
[-15.05945587 76.51707458]
[-0.86668855 82.56430054]
[7.78474092 95.33756256]
[22.77762604 94.87564087]
[37.77051163 94.41371155]
[41.70060730 77.53009796]
[50.11849594 62.37618637]
[62.37618637 50.11849594]
[77.53009796 41.70060730]
[94.41371155 37.77051163]
[94.87564087 22.77762604]
[95.33756256 7.78474092]
[95.79949188 -7.20814514]
[96.26141357 -22.20103073]
[96.49240875 -37.19925308]
[96.49240875 -52.19925308]
[88.75510406 -65.99942780]
[96.49240875 -78.72669983]
[96.49240875 -93.72669983]
[83.45877838 -101.98066711]
[76.97735596 -115.98047638]
[79.11633301 -131.25883484]
[89.19318390 -142.94047546]
[103.99240875 -147.29783630]
[118.79162598 -142.94047546]
[128.86846924 -131.25883484]
[131.00746155 -115.98047638]
[124.52603149 -101.98066711]
[111.49240875 -93.72669983]
[111.49240875 -78.72669983]
[119.22970581 -65.99942780]
[111.49240875 -52.19925308]
[111.49240875 -37.19925308]
[114.69549561 -30.39282608]
[111.25430298 -21.73910522]
[110.79237366 -6.74621916]
[110.33045197 8.24666691]
[109.86852264 23.23955154]
[109.40659332 38.23243713]
[131.18806458 45.86110687]
[148.71420288 60.87656784]
[159.59367371 81.23009491]
[174.33827209 78.47385406]
[189.08287048 75.71761322]
[201.17764282 64.64292908]
[216.73239136 69.83732605]
[219.74572754 85.95725250]
[207.11778259 96.41989899]
[191.83911133 90.46221161]
[177.09451294 93.21845245]
[162.34991455 95.97469330]
[162.24479675 105.41300201]
[160.71910095 114.72776794]
[157.80763245 123.70641327]
[153.57684326 132.14401245]
[148.12329102 139.84802246]
[141.57145691 146.64257812]
[134.07084656 152.37263489]
[125.79265594 156.90742493]
[116.92581177 160.14343262]
[119.22668457 174.96591187]
[131.70002747 184.29615784]
[133.82229614 199.36103821]
[124.85047150 211.19496155]
[127.15135193 226.01745605]
[129.45222473 240.83993530]
[131.75309753 255.66241455]
[146.10362244 261.13580322]
[155.78240967 273.06124878]
[158.18589783 288.23092651]
[152.66755676 302.56423950]
[140.71182251 312.20559692]
[125.53469086 314.56149292]
[111.21875763 308.99826050]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 94]
[4 93]
[5 92]
[6 91]
[9 88]
[10 87]
[18 32]
[19 31]
[20 30]
[37 66]
[38 65]
[39 64]
[40 63]
[41 62]
[42 60]
[43 59]
[45 57]
[46 56]
[69 78]
[70 77]
[71 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
