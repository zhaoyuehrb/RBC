%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 21:16:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGAACCCCAGACCCUUAGAGAGUCCUGACCUCACUCUUACCUGGGGUCCCAUAUCAGCCCCUUCAUUCCAUGUAUUCCAGUUGUAAAACAAGUAUCAAAAUAUUGGGAAAUAAAUAUCAGAUAGUUCUGAGUCAG\
) } def
/len { sequence length } bind def

/coor [
[53.98927689 112.80879211]
[39.08634567 114.51249695]
[24.18341255 116.21620178]
[9.28048038 117.91989899]
[5.64347601 134.07838440]
[-3.26507664 148.01098633]
[-16.36558151 158.06152344]
[-32.08138657 163.04232788]
[-48.52852631 162.37451172]
[-63.74155807 156.15528870]
[-75.90844727 145.14419556]
[-83.58638000 130.67042542]
[-98.39632416 133.05065918]
[-113.20626831 135.43089294]
[-128.01620483 137.81114197]
[-142.82615662 140.19137573]
[-157.63610840 142.57160950]
[-168.05867004 158.31103516]
[-186.34844971 161.46922302]
[-200.93850708 150.51693726]
[-215.62475586 153.56877136]
[-230.31101990 156.62060547]
[-244.99728394 159.67245483]
[-259.68353271 162.72428894]
[-274.36981201 165.77613831]
[-279.79937744 180.21647644]
[-292.18768311 189.41067505]
[-307.58166504 190.42491150]
[-321.06918335 182.93553162]
[-328.34637451 169.33236694]
[-327.09115601 153.95616150]
[-317.70404053 141.71337891]
[-303.18041992 136.51066589]
[-288.15475464 140.00817871]
[-277.42166138 151.08987427]
[-262.73538208 148.03802490]
[-248.04913330 144.98619080]
[-233.36286926 141.93435669]
[-218.67660522 138.88250732]
[-203.99034119 135.83067322]
[-199.90113831 125.07233429]
[-191.00924683 117.57673645]
[-179.47784424 115.32027435]
[-168.18740845 118.98576355]
[-160.01634216 127.76167297]
[-145.20639038 125.38143158]
[-130.39645386 123.00119019]
[-115.58650208 120.62095642]
[-100.77655792 118.24071503]
[-85.96661377 115.86048126]
[-84.08910370 102.43489838]
[-78.47966766 90.07512665]
[-69.58882141 79.79694366]
[-58.13714981 72.44800568]
[-45.05696869 68.63796997]
[-31.41638374 68.68792725]
[-18.33209991 72.60334778]
[-6.87797689 80.07286072]
[2.00308633 90.49301147]
[7.57677794 103.01696777]
[22.47970963 101.31327057]
[37.38264465 99.60956573]
[52.28557587 97.90586090]
[58.18714905 76.91889954]
[72.80087280 60.74112320]
[93.08182526 52.74335480]
[114.80425262 54.59200668]
[133.44206238 65.90190125]
[145.49652100 56.97498322]
[157.55099487 48.04806519]
[169.60545349 39.12115097]
[172.06872559 23.74031639]
[184.42083740 14.85887432]
[199.06893921 17.30201721]
[211.12339783 8.37510109]
[223.17787170 -0.55181521]
[235.23233032 -9.47873116]
[247.28680420 -18.40564728]
[249.09034729 -38.33483887]
[264.64520264 -50.43815231]
[283.81063843 -47.38338470]
[289.29629517 -62.22313690]
[304.00186157 -64.58860779]
[315.41903687 -74.31734467]
[326.83621216 -84.04607391]
[338.25338745 -93.77480316]
[346.38769531 -108.64992523]
[362.93328857 -104.95133209]
[363.95953369 -88.02847290]
[347.98211670 -82.35763550]
[336.56494141 -72.62890625]
[325.14776611 -62.90017319]
[313.73059082 -53.17144012]
[309.06158447 -39.02755356]
[293.53936768 -35.96621704]
[295.52572632 -25.74481964]
[293.02645874 -15.55293751]
[286.43548584 -7.28299904]
[276.91296387 -2.49982381]
[266.18127441 -2.14475346]
[256.21371460 -6.35118055]
[244.15925598 2.57573533]
[232.10478210 11.50265121]
[220.05032349 20.42956734]
[207.99584961 29.35648346]
[206.06072998 44.08030319]
[193.96295166 53.30518723]
[178.53237915 51.17561722]
[166.47790527 60.10253143]
[154.42344666 69.02944946]
[142.36897278 77.95636749]
[145.42111206 85.23606873]
[147.23252869 92.91905975]
[147.75373840 100.79548645]
[146.97048950 108.65017700]
[144.90417480 116.26857758]
[141.61126709 123.44258118]
[137.18168640 129.97622681]
[131.73645020 135.69104004]
[139.81993103 148.32659912]
[147.90339661 160.96215820]
[155.98687744 173.59771729]
[164.07035828 186.23327637]
[178.87193298 193.29341125]
[179.88853455 209.66102600]
[166.07437134 218.49850464]
[151.64027405 210.71461487]
[151.43479919 194.31674194]
[143.35131836 181.68118286]
[135.26783752 169.04562378]
[127.18436432 156.41006470]
[119.10088348 143.77450562]
[107.94145203 147.09548950]
[96.31005859 147.61759949]
[84.89796448 145.30982971]
[74.38336945 140.30931091]
[65.39116669 132.91322327]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[3 61]
[4 60]
[12 50]
[13 49]
[14 48]
[15 47]
[16 46]
[17 45]
[20 40]
[21 39]
[22 38]
[23 37]
[24 36]
[25 35]
[68 111]
[69 110]
[70 109]
[71 108]
[74 105]
[75 104]
[76 103]
[77 102]
[78 101]
[81 95]
[83 93]
[84 92]
[85 91]
[86 90]
[119 132]
[120 131]
[121 130]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
