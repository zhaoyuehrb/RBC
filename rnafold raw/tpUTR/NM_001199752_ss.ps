%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 03:30:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUUCCAGCAGGCAGCUGGCCUCUCCAAGGAAUAAGGGUGAAAUUGCCACAGCUGGCUGACACAGGACAGGGGCAACUGGUUUGGCAACCCCACAUCCAGGCCAAUAAAGAUGUGUGAGCUGGG\
) } def
/len { sequence length } bind def

/coor [
[96.76727295 136.44171143]
[77.58870697 128.91682434]
[66.16456604 138.63735962]
[54.74042511 148.35791016]
[43.31628036 158.07844543]
[31.89213753 167.79899597]
[30.47310638 183.31105042]
[18.74892807 193.00631714]
[3.96929193 191.55790710]
[-7.45485163 201.27844238]
[-12.02710915 209.31333923]
[-19.28388977 211.09388733]
[-30.94496918 220.52888489]
[-42.60604858 229.96388245]
[-54.26713181 239.39888000]
[-57.37382126 255.13825989]
[-71.68209839 262.39447021]
[-86.21588135 255.60119629]
[-89.82608795 239.96961975]
[-79.74328613 227.49096680]
[-63.70212936 227.73779297]
[-52.04104996 218.30279541]
[-40.37997055 208.86779785]
[-28.71888924 199.43280029]
[-17.17539406 189.85429382]
[-5.75125074 180.13375854]
[-4.81479740 165.31286621]
[6.63243580 155.29211426]
[22.17159462 156.37484741]
[33.59573746 146.65429688]
[45.01988220 136.93376160]
[56.44402313 127.21321869]
[67.86817169 117.49267578]
[65.56754303 112.36342621]
[64.07990265 106.94226074]
[63.44037247 101.35718536]
[63.66405106 95.74005890]
[64.74565887 90.22351837]
[66.65965271 84.93781281]
[54.54624176 76.09104156]
[42.43283463 67.24427032]
[26.85761452 69.92532349]
[13.99685955 60.73965454]
[11.48062897 45.13695526]
[20.80175591 32.37403870]
[36.43018341 30.02290726]
[49.09384155 39.47845078]
[51.27960587 55.13086319]
[63.39301300 63.97763443]
[75.50642395 72.82440186]
[86.90993500 65.83717346]
[100.06271362 63.41524506]
[113.20711517 65.88225555]
[124.58660889 72.90853882]
[132.68049622 83.55515289]
[147.17736816 79.70273590]
[161.67422485 75.85032654]
[176.17108154 71.99791718]
[190.66793823 68.14550781]
[205.16479492 64.29309845]
[216.51492310 53.27106857]
[230.80244446 57.48012924]
[245.29930115 53.62771606]
[259.79617310 49.77530670]
[274.29302979 45.92289734]
[288.78988647 42.07048798]
[290.11312866 26.24353027]
[296.74707031 11.84264469]
[307.87866211 0.58936799]
[322.15823364 -6.17790747]
[337.86340332 -7.66309881]
[353.10665894 -3.70603967]
[366.06225586 5.20046759]
[375.18493652 17.97194481]
[389.58209229 13.76214218]
[403.97921753 9.55233955]
[408.94290161 4.92462397]
[414.64419556 3.75864863]
[419.19323730 5.50935555]
[433.78094482 2.01669574]
[448.36865234 -1.47596407]
[462.95635986 -4.96862364]
[471.77914429 -20.01436043]
[488.41415405 -23.99846649]
[502.52929688 -14.94494343]
[517.02618408 -18.79735374]
[531.52301025 -22.64976311]
[540.78454590 -35.74954224]
[556.80847168 -36.53230286]
[567.30267334 -24.39757729]
[564.21685791 -8.65409279]
[549.91821289 -1.37889910]
[535.37542725 -8.15290356]
[520.87854004 -4.30049372]
[506.38171387 -0.44808379]
[501.50186157 11.54470921]
[490.42236328 18.61428070]
[477.09994507 17.96827507]
[466.44900513 9.61908817]
[451.86129761 13.11174774]
[437.27359009 16.60440636]
[422.68588257 20.09706688]
[408.18902588 23.94947624]
[393.79190063 28.15927887]
[379.39474487 32.36908340]
[378.90054321 46.57106400]
[374.02224731 59.94099426]
[365.22766113 71.15798187]
[353.37213135 79.10945892]
[339.61544800 83.00149536]
[325.30834961 82.43807220]
[311.85998535 77.46134186]
[300.59896851 68.54875946]
[292.64230347 56.56734848]
[278.14541626 60.41975784]
[263.64855957 64.27217102]
[249.15171814 68.12458038]
[234.65484619 71.97698975]
[224.34164429 82.72346497]
[209.01721191 78.78996277]
[194.52035522 82.64237213]
[180.02349854 86.49478149]
[165.52662659 90.34719086]
[151.02976990 94.19960022]
[136.53291321 98.05200958]
[131.79295349 118.10129547]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 33]
[3 32]
[4 31]
[5 30]
[6 29]
[9 26]
[10 25]
[12 24]
[13 23]
[14 22]
[15 21]
[39 50]
[40 49]
[41 48]
[55 125]
[56 124]
[57 123]
[58 122]
[59 121]
[60 120]
[62 118]
[63 117]
[64 116]
[65 115]
[66 114]
[74 105]
[75 104]
[76 103]
[79 102]
[80 101]
[81 100]
[82 99]
[85 95]
[86 94]
[87 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
