%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 22:12:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGGGCAAAAAGAAAAAAAUAAAAAGCAUUUUAAAAUCAUGGAAUUGAAAUAAAAUAAUGUAUUUUGUUUUAA\
) } def
/len { sequence length } bind def

/coor [
[46.51376343 269.79498291]
[39.12098694 282.97976685]
[28.16922569 293.39852905]
[14.63229942 300.12481689]
[-0.28609791 302.56054688]
[-15.25943184 300.48916626]
[-28.95628357 294.09481812]
[-40.15873718 283.94610596]
[-47.87068176 270.94543457]
[-51.40637589 256.24880981]
[-50.45142365 241.16308594]
[-45.09074020 227.02963257]
[-35.80099869 215.10519409]
[-23.40822983 206.45010376]
[-9.01439476 201.83393860]
[6.10061789 201.66719055]
[20.59279060 205.96466064]
[28.89366531 193.47084045]
[37.19453812 180.97703552]
[45.49541092 168.48321533]
[53.79628372 155.98939514]
[62.09715652 143.49557495]
[70.39803314 131.00175476]
[78.69890594 118.50793457]
[86.99977875 106.01411438]
[88.06928253 92.07324982]
[100.50640106 85.68501282]
[108.80727386 73.19119263]
[117.10815430 60.69737244]
[125.40902710 48.20355225]
[133.70989990 35.70973587]
[124.17794037 22.10882187]
[120.48688507 5.95251894]
[123.15533447 -10.36737537]
[131.76249695 -24.44532204]
[145.01423645 -34.21660995]
[160.93759155 -38.26016617]
[177.17454529 -36.00516891]
[184.40086365 -49.14976883]
[191.62716675 -62.29436874]
[186.97778320 -77.39929199]
[194.44470215 -91.32842255]
[209.59794617 -95.81784821]
[223.44734192 -88.20407104]
[227.77630615 -73.00421906]
[220.01654053 -59.23608398]
[204.77175903 -55.06806183]
[197.54545593 -41.92346191]
[190.31915283 -28.77886200]
[199.43263245 -18.73428345]
[204.94099426 -6.31514168]
[206.27391052 7.22848940]
[203.28211975 20.52834511]
[196.25398254 32.23620224]
[185.88783264 41.16054916]
[173.22251892 46.38784409]
[159.53335571 47.37600327]
[146.20372009 44.01060867]
[137.90284729 56.50442505]
[129.60197449 68.99824524]
[121.30109406 81.49206543]
[113.00022125 93.98588562]
[111.93071747 107.92675018]
[99.49359894 114.31498718]
[91.19272614 126.80880737]
[82.89184570 139.30262756]
[74.59097290 151.79644775]
[66.29010010 164.29026794]
[57.98923111 176.78408813]
[49.68835831 189.27790833]
[41.38748169 201.77171326]
[33.08660889 214.26553345]
[42.66424179 225.96000671]
[48.36781693 239.95858765]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 72]
[18 71]
[19 70]
[20 69]
[21 68]
[22 67]
[23 66]
[24 65]
[25 64]
[27 62]
[28 61]
[29 60]
[30 59]
[31 58]
[38 49]
[39 48]
[40 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
