%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 10:39:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAUCUCAUUUGAGAGCUGUUUGCAUGAGUGGGAGGGGUAUGGGACAGGUUUGGGUUUUUUUUUUAUGCUCAUGAAAUUAAAAAUUCAUUUUUAUGAA\
) } def
/len { sequence length } bind def

/coor [
[92.88466644 144.80516052]
[77.88848114 145.14355469]
[67.52412415 134.30012512]
[68.53936005 119.33451843]
[80.27277374 109.99028778]
[66.00692749 114.62554169]
[51.74107742 119.26079559]
[37.47523117 123.89604950]
[23.20938301 128.53131104]
[8.94353580 133.16656494]
[-5.32231236 137.80181885]
[-19.58815956 142.43707275]
[-33.85400772 147.07232666]
[-38.33249283 157.23321533]
[-47.53269196 163.04519653]
[-58.18862534 162.73774719]
[-66.67739868 156.66293335]
[-81.20614624 160.39328003]
[-90.57749176 173.41470337]
[-106.60745239 174.06266785]
[-116.99921417 161.84010315]
[-113.78110504 146.12313843]
[-99.42178345 138.96846008]
[-84.93649292 145.86453247]
[-70.40774536 142.13418579]
[-57.83450317 127.58612823]
[-38.48926163 132.80647278]
[-24.22341537 128.17121887]
[-9.95756721 123.53596497]
[4.30828047 118.90071106]
[18.57412910 114.26545715]
[32.83997726 109.63020325]
[47.10582352 104.99494934]
[61.37166977 100.35969543]
[75.63751984 95.72443390]
[86.20507050 85.74296570]
[97.90332031 85.20579529]
[102.08818817 70.80139160]
[106.27305603 56.39698410]
[110.45791626 41.99257660]
[114.64278412 27.58817291]
[118.82765198 13.18376732]
[123.01251984 -1.22063816]
[127.19738770 -15.62504387]
[131.38224792 -30.02944946]
[135.56712341 -44.43385315]
[131.98716736 -59.84471130]
[142.96803284 -69.90798950]
[147.15290833 -84.31239319]
[151.33776855 -98.71680450]
[141.72120667 -110.89469910]
[141.13285828 -126.40061188]
[149.79898071 -139.27221680]
[164.38725281 -144.56010437]
[179.28820801 -140.23097229]
[188.77210999 -127.94947052]
[189.19219971 -112.43808746]
[180.38696289 -99.66125488]
[165.74217224 -94.53193665]
[161.55731201 -80.12753296]
[157.37245178 -65.72312164]
[161.25172424 -51.34256744]
[149.97152710 -40.24898911]
[145.78665161 -25.84458160]
[141.60179138 -11.44017696]
[137.41693115 2.96422839]
[133.23205566 17.36863327]
[129.04719543 31.77303886]
[124.86232758 46.17744446]
[120.67745972 60.58184814]
[116.49259186 74.98625183]
[112.30772400 89.39066315]
[118.35175323 75.66223145]
[129.31623840 65.42601776]
[143.42704773 60.33828354]
[158.40097046 61.22226715]
[171.81515503 67.93492889]
[181.49908447 79.39012146]
[185.88586426 93.73432922]
[184.26567078 108.64656830]
[176.90066528 121.71395874]
[164.98254395 130.82211304]
[150.43974304 134.49728394]
[135.62536621 132.14480591]
[122.93646240 124.14531708]
[114.42516327 111.79080200]
[121.23501587 125.15589905]
[128.04487610 138.52099609]
[134.85473633 151.88609314]
[141.66459656 165.25119019]
[155.70527649 173.72415161]
[155.11734009 190.11276245]
[140.50559998 197.55781555]
[126.90135193 188.40049744]
[128.29949951 172.06105042]
[121.48963928 158.69595337]
[114.67977905 145.33085632]
[107.86991882 131.96575928]
[101.06006622 118.60066223]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 35]
[6 34]
[7 33]
[8 32]
[9 31]
[10 30]
[11 29]
[12 28]
[13 27]
[17 25]
[18 24]
[37 72]
[38 71]
[39 70]
[40 69]
[41 68]
[42 67]
[43 66]
[44 65]
[45 64]
[46 63]
[48 61]
[49 60]
[50 59]
[86 99]
[87 98]
[88 97]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
