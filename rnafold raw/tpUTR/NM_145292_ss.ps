%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 00:15:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGAAAACAAAUCACUUUCAUUAAUAAAGGGUUAAAAGUCUCCUAGUCAUUCAACAUAGUGUCACAAGAGUGUAAGUUUGGAACAUCGUGGAAUUACGUGAAAUGCAAUUAAAAAAAUAUGACCAGACGUGA\
) } def
/len { sequence length } bind def

/coor [
[85.46343994 138.51101685]
[67.28350067 124.98081207]
[53.90247726 131.75932312]
[40.52145004 138.53782654]
[27.14042473 145.31632996]
[27.83191299 162.39343262]
[21.05437851 178.02337646]
[8.19887066 189.11828613]
[-8.14800167 193.50886536]
[-24.72444153 190.36851501]
[-38.24429703 180.36839294]
[-51.29289246 187.76664734]
[-64.34149170 195.16490173]
[-77.39008331 202.56315613]
[-83.38148499 209.58457947]
[-90.83243561 209.97779846]
[-104.05087280 217.06811523]
[-117.26931763 224.15844727]
[-130.48776245 231.24877930]
[-133.50587463 246.59234619]
[-145.71290588 256.36590576]
[-161.34507751 255.95466614]
[-173.02136230 245.55281067]
[-175.22856140 230.07177734]
[-166.92451477 216.82124329]
[-152.03013611 212.05769348]
[-137.57809448 218.03033447]
[-124.35964966 210.94000244]
[-111.14120483 203.84967041]
[-97.92276001 196.75935364]
[-84.78833771 189.51455688]
[-71.73974609 182.11630249]
[-58.69114685 174.71804810]
[-45.64255142 167.31979370]
[-47.56974411 154.37321472]
[-44.94792175 141.51649475]
[-38.07158661 130.30361938]
[-27.75082970 122.09752655]
[-15.21593380 117.90447235]
[-1.97074986 118.25064850]
[10.38772964 123.11626434]
[20.36191940 131.93530273]
[33.74294662 125.15679932]
[47.12397385 118.37828827]
[60.50500107 111.59978485]
[59.06716919 104.34896088]
[58.94935226 96.95789337]
[60.15534592 89.66492462]
[62.64626312 82.70524597]
[66.34177399 76.30329895]
[71.12270355 70.66551971]
[76.83486938 65.97373199]
[83.29407501 62.37923050]
[90.29202271 59.99793243]
[97.60303497 58.90663528]
[104.99134064 59.14052582]
[109.49260712 44.83183670]
[113.99388123 30.52314758]
[110.75438690 15.03714466]
[121.95435333 5.21828508]
[126.45562744 -9.09040356]
[130.95689392 -23.39909172]
[135.45816040 -37.70778275]
[128.40658569 -51.59709549]
[133.17535400 -66.04402161]
[146.46014404 -72.68102264]
[150.96142578 -86.98970795]
[155.46269226 -101.29840088]
[159.96395874 -115.60708618]
[150.61807251 -127.99393463]
[150.37156677 -143.50904846]
[159.31922913 -156.18655396]
[174.02047729 -161.15168762]
[188.82241821 -156.49525452]
[198.03337097 -144.00775146]
[198.11155701 -128.49085999]
[189.02690125 -115.91117859]
[174.27264404 -111.10581970]
[169.77137756 -96.79712677]
[165.27011108 -82.48844147]
[160.76884460 -68.17974854]
[167.86128235 -55.13241959]
[163.50018311 -40.55725098]
[149.76684570 -33.20651245]
[145.26557922 -18.89782333]
[140.76431274 -4.58913422]
[136.26304626 9.71955490]
[139.82449341 24.18210411]
[128.30256653 35.02441788]
[123.80130005 49.33310699]
[119.30002594 63.64179611]
[131.49272156 73.49304962]
[139.11860657 87.18811798]
[141.07185364 102.74105835]
[137.06918335 117.89651489]
[149.16296387 126.77010345]
[161.25674438 135.64367676]
[173.35052490 144.51727295]
[185.44430542 153.39085388]
[197.53808594 162.26443481]
[208.84530640 152.31652832]
[222.02690125 145.03230286]
[236.46632385 140.75247192]
[251.48823547 139.67720032]
[266.39004517 141.85678101]
[280.47473145 147.18928528]
[293.08355713 155.42527771]
[303.62677002 166.17956543]
[311.61123657 178.94914246]
[316.66354370 193.13674927]
[318.54736328 208.07881165]
[317.17459106 223.07646179]
[312.60943604 237.42823792]
[305.06539917 250.46287537]
[294.89535522 261.57070923]
[282.57495117 270.23223877]
[268.68045044 276.04229736]
[253.86172485 278.72918701]
[238.81185913 278.16720581]
[224.23478699 274.38265991]
[210.81227112 267.55255127]
[199.17214966 257.99633789]
[189.85881042 246.16096497]
[183.30787659 232.60002136]
[179.82574463 217.94775391]
[179.57527161 202.88949585]
[182.56819153 188.12953186]
[188.66450500 174.35821533]
[176.57072449 165.48463440]
[164.47694397 156.61105347]
[152.38316345 147.73745728]
[140.28938293 138.86387634]
[128.19560242 129.99029541]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 45]
[3 44]
[4 43]
[5 42]
[11 34]
[12 33]
[13 32]
[14 31]
[16 30]
[17 29]
[18 28]
[19 27]
[56 91]
[57 90]
[58 89]
[60 87]
[61 86]
[62 85]
[63 84]
[66 81]
[67 80]
[68 79]
[69 78]
[95 133]
[96 132]
[97 131]
[98 130]
[99 129]
[100 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
