%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 20:21:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGUUCUUAUUCUUUGCACCUCUUCCUAUUUUUGGUUUGUGAACAGAAGUAAAAAUAAAUACAAACUACUUCCAUCUCACAUUA\
) } def
/len { sequence length } bind def

/coor [
[152.87057495 160.66860962]
[151.01940918 175.55393982]
[145.45378113 189.48318481]
[136.53759766 201.54559326]
[124.85381317 210.95246887]
[111.16638184 217.08874512]
[96.37022400 219.55323792]
[81.43276978 218.18479919]
[67.33070374 213.07287598]
[54.98605728 204.55174255]
[45.20598221 193.17852783]
[38.62993240 179.69685364]
[35.68787384 164.98820496]
[36.57217407 150.01429749]
[41.22501373 135.75416565]
[49.34216690 123.14022064]
[60.39291000 112.99718475]
[73.65469360 105.98826599]
[88.25674438 102.57209778]
[74.91661072 95.71346283]
[61.57648087 88.85482788]
[49.73294067 98.42825317]
[35.01779175 102.35054016]
[19.98052597 99.94212341]
[7.22643471 91.62027740]
[-1.03475571 78.82682037]
[-3.37174416 63.77828598]
[0.62036622 49.08192825]
[10.24991798 37.28397751]
[23.84853363 30.42850494]
[39.06017303 29.70325661]
[53.24932098 35.23389053]
[63.95763016 46.06218719]
[69.32981110 60.31208420]
[68.43511200 75.51469421]
[81.77524567 82.37332916]
[95.11537933 89.23196411]
[100.88586426 88.31023407]
[106.34149170 90.26005554]
[120.70550537 85.93856812]
[135.06951904 81.61708069]
[149.43351746 77.29559326]
[163.79753113 72.97410583]
[169.07624817 57.02434921]
[182.63664246 47.38748932]
[199.10588074 47.64269638]
[212.09870911 57.49610138]
[226.29530334 52.65289307]
[240.49189758 47.80968857]
[254.68849182 42.96648407]
[268.88510132 38.12327576]
[283.08169556 33.28007126]
[283.67187500 18.11378860]
[289.70449829 4.18640709]
[300.36367798 -6.61850929]
[314.20785522 -12.83968449]
[329.36474609 -13.63575554]
[343.78445435 -8.89906120]
[355.51687622 0.72980088]
[362.97525024 13.94860458]
[365.15093994 28.96961784]
[361.74969482 43.76136780]
[353.23147583 56.32339478]
[340.74835205 64.95678711]
[325.98849487 68.49394989]
[310.94812012 66.45651245]
[297.66125488 59.12001801]
[287.92489624 47.47666550]
[273.72830200 52.31987381]
[259.53170776 57.16307831]
[245.33511353 62.00628662]
[231.13850403 66.84949493]
[216.94190979 71.69269562]
[214.14950562 84.88108826]
[205.08753967 95.00844574]
[192.08230591 99.31214142]
[178.55438232 96.54587555]
[168.11901855 87.33811951]
[153.75500488 91.65959930]
[139.39099121 95.98108673]
[125.02699280 100.30257416]
[110.66297913 104.62406158]
[124.40480042 110.63757324]
[136.17231750 119.93948364]
[145.19613647 131.92158508]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 37]
[20 36]
[21 35]
[39 82]
[40 81]
[41 80]
[42 79]
[43 78]
[47 73]
[48 72]
[49 71]
[50 70]
[51 69]
[52 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
