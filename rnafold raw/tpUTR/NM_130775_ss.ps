%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 18:59:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGAAGACAACCAAAAGAAUGCAAACUGGAUUUAUCCGAGAUAUUUGACUUUUAAAAAUCUCAAUAAAGUUUUCCAGUUUUCUCC\
) } def
/len { sequence length } bind def

/coor [
[13.37221527 365.49786377]
[3.38163376 376.76205444]
[-8.73282051 385.70263672]
[-22.44155693 391.92871094]
[-37.14528656 395.16815186]
[-52.20122528 395.27935791]
[-66.95119476 392.25741577]
[-80.75038910 386.23446655]
[-92.99555969 377.47378540]
[-103.15141296 366.35836792]
[-110.77397156 353.37414551]
[-115.53000641 339.08871460]
[-117.21160889 324.12655640]
[-115.74526978 309.14178467]
[-111.19508362 294.78945923]
[-103.75997162 281.69699097]
[-93.76496124 270.43670654]
[-81.64698792 261.50091553]
[-67.93580627 255.28021240]
[-53.23080063 252.04655457]
[-38.17481995 251.94129944]
[-23.42604065 254.96903992]
[-9.62921810 260.99740601]
[-0.90133435 248.79806519]
[7.82654953 236.59872437]
[16.55443382 224.39938354]
[25.28231621 212.20002747]
[34.01020050 200.00068665]
[42.73808289 187.80134583]
[51.46596909 175.60198975]
[59.28007507 162.79809570]
[66.13871002 149.45796204]
[72.99734497 136.11782837]
[79.85597992 122.77770233]
[86.71461487 109.43756866]
[83.82659912 98.00243378]
[89.41007233 87.61360931]
[100.54045868 83.71266937]
[107.88172913 70.63192749]
[115.22299957 57.55118942]
[122.56426239 44.47044754]
[129.90553284 31.38970566]
[129.91227722 15.56850147]
[142.88853455 8.25646400]
[150.22981262 -4.82427692]
[157.57107544 -17.90501785]
[164.91233826 -30.98575974]
[172.25360107 -44.06650162]
[174.73284912 -60.83819199]
[191.53543091 -63.09870148]
[198.35900879 -47.57855225]
[185.33435059 -36.72523117]
[177.99308777 -23.64449120]
[170.65180969 -10.56375027]
[163.31054688 2.51699090]
[155.96928406 15.59773254]
[156.48764038 30.48331451]
[142.98626709 38.73097229]
[135.64500427 51.81171417]
[128.30374146 64.89245605]
[120.96247101 77.97319794]
[113.62120056 91.05393982]
[114.35446930 107.71481323]
[100.05474854 116.29620361]
[93.19611359 129.63633728]
[86.33747864 142.97647095]
[79.47884369 156.31660461]
[72.62020874 169.65673828]
[73.08357239 174.53746033]
[71.93268585 178.80471802]
[69.60653687 181.99046326]
[66.65798187 183.83981323]
[63.66531372 184.32987976]
[54.93743134 196.52922058]
[46.20954514 208.72856140]
[37.48166275 220.92791748]
[28.75377846 233.12725830]
[20.02589607 245.32659912]
[11.29801178 257.52593994]
[2.57012796 269.72531128]
[12.73035145 280.83670044]
[20.35801506 293.81793213]
[25.11967278 308.10150146]
[26.80716324 323.06298828]
[25.34671593 338.04833984]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[23 80]
[24 79]
[25 78]
[26 77]
[27 76]
[28 75]
[29 74]
[30 73]
[31 68]
[32 67]
[33 66]
[34 65]
[35 64]
[38 62]
[39 61]
[40 60]
[41 59]
[42 58]
[44 56]
[45 55]
[46 54]
[47 53]
[48 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
