%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 14:05:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCUGGAUCUUGGAGAAUGUGAGAAGCCAGCCAGAGGCAUCUGAGGGGGAGCCGGUAACUGUCCUGUCCUGCUCAUUAUGCCACUUCCUUUUAACUGCCAAGAAAUUUUUUAAAAUAAAUAUUUAUAAUAA\
) } def
/len { sequence length } bind def

/coor [
[83.98128510 207.49925232]
[86.78901672 192.76866150]
[75.75315857 202.92788696]
[64.71730042 213.08711243]
[53.68144608 223.24633789]
[42.64558411 233.40556335]
[31.60972786 243.56478882]
[26.57357216 261.23086548]
[9.37258053 264.49633789]
[-1.42025042 274.91339111]
[-12.21308136 285.33044434]
[-23.00591278 295.74746704]
[-33.79874420 306.16452026]
[-32.53159332 321.75067139]
[-41.62160492 334.47488403]
[-56.77675247 338.32919312]
[-70.84123993 331.49368286]
[-77.17424011 317.19586182]
[-72.78551483 302.18676758]
[-59.74727631 293.55322266]
[-44.21578598 295.37170410]
[-33.42295456 284.95465088]
[-22.63012505 274.53759766]
[-11.83729362 264.12057495]
[-1.04446232 253.70352173]
[-0.49730223 241.55958557]
[8.49268341 232.79075623]
[21.45050430 232.52891541]
[32.48636246 222.36970520]
[43.52222061 212.21047974]
[54.55807877 202.05125427]
[65.59394073 191.89202881]
[76.62979889 181.73280334]
[62.59876633 176.42901611]
[61.15969086 161.49821472]
[73.91945648 153.61224365]
[86.63091278 161.57771301]
[88.04606628 146.64462280]
[89.46121979 131.71151733]
[90.87637329 116.77842712]
[81.72416687 105.54528809]
[83.09116364 91.12039185]
[94.19053650 81.80641937]
[95.60568237 66.87332153]
[97.02083588 51.94022751]
[98.43598938 37.00713348]
[99.85114288 22.07403755]
[101.26629639 7.14094162]
[102.68144989 -7.79215384]
[104.09659576 -22.72525024]
[105.51174927 -37.65834427]
[106.92690277 -52.59144211]
[99.29787445 -63.06863403]
[100.84324646 -75.53153992]
[110.18299103 -83.31252289]
[111.95044708 -98.20803070]
[113.71791077 -113.10353088]
[115.48536682 -127.99903870]
[104.41785431 -141.48721313]
[106.44214630 -158.47822571]
[119.83183289 -168.58296204]
[121.24698639 -183.51606750]
[111.45136261 -195.62736511]
[113.09925079 -210.75148010]
[124.70589447 -220.01547241]
[114.44284821 -232.03402710]
[115.76744843 -247.78269958]
[127.89382935 -257.91809082]
[143.62762451 -256.42706299]
[153.63426208 -244.19421387]
[151.97695923 -228.47705078]
[139.63899231 -218.60032654]
[149.29881287 -207.32098389]
[148.07637024 -192.15653992]
[136.18008423 -182.10090637]
[134.76492310 -167.16781616]
[144.31648254 -158.43710327]
[147.10803223 -145.60145569]
[141.89273071 -133.33308411]
[130.38087463 -126.23158264]
[128.61341858 -111.33607483]
[126.84595490 -96.44056702]
[125.07849121 -81.54506683]
[132.88208008 -65.87210846]
[121.86000061 -51.17628860]
[120.44484711 -36.24319458]
[119.02969360 -21.31009674]
[117.61454010 -6.37700176]
[116.19938660 8.55609417]
[114.78424072 23.48918915]
[113.36908722 38.42228317]
[111.95393372 53.35538101]
[110.53878021 68.28847504]
[109.12362671 83.22157288]
[118.27583313 94.45471191]
[116.90883636 108.87960815]
[105.80946350 118.19358063]
[104.39431763 133.12667847]
[102.97916412 148.05976868]
[101.56401062 162.99287415]
[111.59938049 151.84426880]
[123.36493683 142.53987122]
[136.52629089 135.34411621]
[150.70938110 130.46151733]
[165.51112366 128.03082275]
[180.51086426 128.12112427]
[195.28227234 130.72985840]
[209.40554810 135.78288269]
[222.47929382 143.13658142]
[234.13197327 152.58195496]
[244.03239441 163.85058594]
[251.89916992 176.62217712]
[257.50872803 190.53378296]
[260.70166016 205.19001770]
[261.38720703 220.17434692]
[259.54589844 235.06089783]
[255.23004150 249.42660522]
[248.56231689 262.86315918]
[239.73220825 274.98873901]
[228.99067688 285.45867920]
[216.64300537 293.97540283]
[203.04011536 300.29693604]
[188.56863403 304.24356079]
[173.63980103 305.70312500]
[158.67794800 304.63415527]
[144.10826111 301.06701660]
[130.34484863 295.10308838]
[117.77885437 286.91189575]
[106.76741791 276.72619629]
[97.62348938 264.83551025]
[90.60694122 251.57775879]
[85.91718292 237.32972717]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 33]
[3 32]
[4 31]
[5 30]
[6 29]
[7 28]
[9 25]
[10 24]
[11 23]
[12 22]
[13 21]
[37 100]
[38 99]
[39 98]
[40 97]
[43 94]
[44 93]
[45 92]
[46 91]
[47 90]
[48 89]
[49 88]
[50 87]
[51 86]
[52 85]
[55 83]
[56 82]
[57 81]
[58 80]
[61 76]
[62 75]
[65 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
