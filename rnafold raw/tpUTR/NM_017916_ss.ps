%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 19:15:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAGGGUGUCUCCUUGUGCUUCUGAGAUGUGGAGAAGAGGCUGCUGGCUUCCCUAAAAGUUGAAAUAAAAGAUUUUUGCCUUUGUUCUG\
) } def
/len { sequence length } bind def

/coor [
[103.55779266 214.17567444]
[108.87111664 199.76512146]
[120.68812561 189.95422363]
[118.08340454 175.18209839]
[115.47868347 160.40998840]
[112.87396240 145.63786316]
[110.26923370 130.86575317]
[86.69212341 126.49913025]
[74.57234955 108.39252472]
[59.58148956 108.91601562]
[44.59062576 109.43950653]
[29.59976387 109.96300507]
[14.60890198 110.48649597]
[3.86277366 121.76295471]
[-11.34754944 122.08029938]
[-22.03170395 111.76601410]
[-37.02256393 112.28950500]
[-45.70674133 115.77901459]
[-52.54377365 112.56043243]
[-67.54376984 112.56043243]
[-81.46757507 121.22412872]
[-95.80300903 113.26000214]
[-95.80300903 96.86085510]
[-81.46757507 88.89672852]
[-67.54376984 97.56043243]
[-52.54377365 97.56043243]
[-37.54605865 97.29864502]
[-22.55519485 96.77514648]
[-12.61655617 85.74069977]
[2.57885242 84.99625397]
[14.08541012 95.49562836]
[29.07627296 94.97213745]
[44.06713486 94.44864655]
[59.05799866 93.92515564]
[74.04885864 93.40166473]
[80.10092163 82.08278656]
[90.72517395 74.88073730]
[89.67882538 59.91727448]
[88.63248444 44.95381546]
[87.58613586 29.99035454]
[86.53978729 15.02689362]
[85.49343872 0.06343269]
[78.35694885 -15.31534481]
[91.15914154 -26.43021011]
[105.38362885 -17.20523453]
[100.45690155 -0.98291439]
[101.50325012 13.98054600]
[102.54959869 28.94400787]
[103.59593964 43.90746689]
[104.64228821 58.87092972]
[105.68863678 73.83438873]
[115.07670593 76.15097046]
[123.47300720 81.88035583]
[129.63059998 90.58262634]
[132.50065613 101.36367035]
[147.41848755 99.79574585]
[162.33630371 98.22781372]
[177.25413513 96.65988922]
[192.17196655 95.09196472]
[207.08979797 93.52403259]
[222.00762939 91.95610809]
[228.85398865 78.13110352]
[242.09962463 70.22180939]
[257.51785278 70.75205231]
[270.18884277 79.55262756]
[276.06924438 93.81531525]
[273.28271484 108.98892975]
[262.71838379 120.23164368]
[247.74729919 123.95592499]
[233.14669800 118.97338867]
[223.57554626 106.87393951]
[208.65771484 108.44186401]
[193.73989868 110.00978851]
[178.82206726 111.57772064]
[163.90423584 113.14564514]
[148.98640442 114.71356964]
[134.06857300 116.28149414]
[125.04135132 128.26103210]
[127.64607239 143.03314209]
[130.25079346 157.80526733]
[132.85551453 172.57737732]
[135.46025085 187.34950256]
[149.92012024 192.52706909]
[159.84172058 204.25131226]
[162.55616760 219.36842346]
[157.33328247 233.81201172]
[145.57800293 243.69680786]
[130.45245361 246.36384583]
[116.02531433 241.09571838]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 82]
[4 81]
[5 80]
[6 79]
[7 78]
[9 35]
[10 34]
[11 33]
[12 32]
[13 31]
[16 28]
[17 27]
[19 26]
[20 25]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
[42 46]
[55 77]
[56 76]
[57 75]
[58 74]
[59 73]
[60 72]
[61 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
