%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:12:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGACCCAGAAGGGGUGGCGAAGGCACAGCUCAGAGACAUAAAGAGAAGAUGCCAAGGCCCCCUCCUCCACCCACCGCUAACUCUCAGCCCCAGUCACCCUCUUGGAGCUUCCCUGCUUUGAAUUAAAGACCACUCAUGCUCUUC\
) } def
/len { sequence length } bind def

/coor [
[71.97856903 91.30210876]
[59.26545334 83.34116364]
[46.55234146 75.38021088]
[33.83922577 67.41925812]
[21.12611198 59.45830917]
[0.96582025 71.39304352]
[-22.34578896 70.44427490]
[-41.31088257 57.02297592]
[-49.88719940 35.53468704]
[-64.83167267 34.24521255]
[-79.24589539 40.76754379]
[-91.26091766 31.96478653]
[-106.20539093 30.67531586]
[-121.14985657 29.38584328]
[-136.09432983 28.09637070]
[-150.50856018 34.61870193]
[-162.52357483 25.81594467]
[-177.46804810 24.52647209]
[-192.41252136 23.23700142]
[-202.60398865 34.78863144]
[-217.46948242 38.08567810]
[-231.26280212 32.06835556]
[-238.77803040 19.23638916]
[-253.72250366 17.94691658]
[-268.66699219 16.65744591]
[-283.61145020 15.36797333]
[-298.56893921 14.23935890]
[-310.38165283 24.39303970]
[-325.54833984 23.19849205]
[-335.15551758 11.87428951]
[-350.12426758 10.90666199]
[-365.09301758 9.93903542]
[-373.01077271 23.03743362]
[-386.11468506 30.94600868]
[-401.39364624 31.84742546]
[-415.33660889 25.53454781]
[-424.73959351 13.45802784]
[-427.44186401 -1.60704005]
[-422.82247925 -16.19881248]
[-411.94290161 -26.96420670]
[-397.30322266 -31.42941284]
[-382.26748657 -28.56836128]
[-370.29083252 -19.03849983]
[-364.12539673 -5.02972174]
[-349.15664673 -4.06209517]
[-334.18789673 -3.09446836]
[-323.20269775 -13.08751678]
[-308.00845337 -12.31944084]
[-297.60131836 -0.72939897]
[-290.67333984 -3.45641017]
[-282.32199097 0.42350054]
[-267.37750244 1.71297252]
[-252.43302917 3.00244451]
[-237.48855591 4.29191637]
[-227.88638306 -7.06308556]
[-213.26618958 -10.62877369]
[-199.18516541 -4.83410025]
[-191.12304688 8.29252815]
[-176.17857361 9.58199978]
[-161.23410034 10.87147236]
[-147.88880920 4.25691128]
[-134.80485535 13.15189838]
[-119.86038971 14.44137001]
[-104.91591644 15.73084259]
[-89.97144318 17.02031517]
[-76.62615204 10.40575314]
[-63.54219818 19.30074120]
[-48.59772491 20.59021187]
[-46.15866852 14.05501175]
[-42.63948441 8.03228951]
[-38.14354706 2.69896030]
[-32.80292892 -1.78831100]
[-26.77449799 -5.29771185]
[-20.23534775 -7.72615528]
[-13.37755680 -9.00230598]
[-6.40257406 -9.08867741]
[0.48471338 -7.98273325]
[6.74261761 -21.61499786]
[13.00052166 -35.24726105]
[6.14412928 -49.30158234]
[9.97591114 -64.46243286]
[22.68661690 -73.57132721]
[38.27463913 -72.32732391]
[49.37979126 -61.31780243]
[50.75856018 -45.74111938]
[41.75993347 -32.95211411]
[26.63278580 -28.98935890]
[20.37488174 -15.35709381]
[14.11697769 -1.72482932]
[22.14249229 5.55014372]
[27.98828506 14.71261787]
[31.22543335 25.12596703]
[31.60706329 36.06062317]
[29.08706284 46.74519348]
[41.80017853 54.70614624]
[54.51329041 62.66709518]
[67.22640228 70.62804413]
[79.93952179 78.58899689]
[90.16330719 69.95812988]
[104.05555725 66.36129761]
[119.09363556 69.29995728]
[132.18283081 79.00737762]
[140.28813171 94.25794220]
[155.16328430 96.18916321]
[170.03843689 98.12038422]
[184.91360474 100.05160522]
[199.78875732 101.98283386]
[214.66392517 103.91405487]
[229.53907776 105.84527588]
[241.90568542 96.00441742]
[257.59909058 97.87337494]
[267.30865479 110.34333038]
[265.27386475 126.01608276]
[252.70195007 135.59326172]
[237.05158997 133.39291382]
[227.60786438 120.72043610]
[212.73269653 118.78921509]
[197.85754395 116.85799408]
[182.98237610 114.92676544]
[168.10722351 112.99554443]
[153.23205566 111.06432343]
[138.35690308 109.13310242]
[133.97467041 115.21964264]
[146.14761353 123.98432159]
[137.38273621 136.15711975]
[125.21018982 127.39273071]
[120.82795715 133.47927856]
[127.37772369 146.97373962]
[133.92749023 160.46820068]
[140.47726440 173.96266174]
[153.46383667 182.99922180]
[152.06050110 197.82757568]
[158.61027527 211.32203674]
[172.48425293 220.06529236]
[171.57905579 236.43943787]
[156.82588196 243.60015869]
[143.40151978 234.18110657]
[145.11581421 217.87179565]
[138.56604004 204.37733459]
[126.04795074 196.30599976]
[126.98279572 180.51243591]
[120.43302917 167.01795959]
[113.88326263 153.52349854]
[107.33349609 140.02903748]
[82.20310211 132.33633423]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 98]
[2 97]
[3 96]
[4 95]
[5 94]
[9 68]
[10 67]
[12 65]
[13 64]
[14 63]
[15 62]
[17 60]
[18 59]
[19 58]
[23 54]
[24 53]
[25 52]
[26 51]
[27 49]
[30 46]
[31 45]
[32 44]
[77 89]
[78 88]
[79 87]
[103 122]
[104 121]
[105 120]
[106 119]
[107 118]
[108 117]
[109 116]
[127 144]
[128 143]
[129 142]
[130 141]
[132 139]
[133 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
