%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:19:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCCGCCCAUAGCCUGCAACCUUUGCACUCCACUGUGCAAUGCUGGCCCUGCACGCUGGGGCUGUUGCCCCUGCCCCCUUGGUCCUGCCCCUAGAUACAGCAGUUUAUACCCACACACCUGUCUACAGUGUCAUUCAAUAAAGUGCACGUGCUUGUGA\
) } def
/len { sequence length } bind def

/coor [
[115.45749664 211.11723328]
[106.95821381 223.47692871]
[95.25937653 232.86506653]
[81.35238647 238.48606873]
[66.41577148 239.86358643]
[51.71530914 236.88087463]
[38.49677658 229.79072571]
[27.88034821 219.19395447]
[20.76570320 205.98858643]
[17.75575829 191.29368591]
[19.10558701 176.35453796]
[24.70080185 162.43714905]
[34.07010269 150.71827698]
[20.10187721 156.18533325]
[6.13365364 161.65238953]
[-3.89725542 173.88722229]
[-18.56909943 171.32086182]
[-32.53732300 176.78791809]
[-46.50554657 182.25497437]
[-49.15629959 185.84246826]
[-52.48791122 188.13764954]
[-55.99961853 189.08589172]
[-59.22586060 188.80444336]
[-61.79042435 187.55529785]
[-76.14453125 191.90957642]
[-90.49863434 196.26383972]
[-104.85273743 200.61811829]
[-119.20684814 204.97238159]
[-133.56094360 209.32666016]
[-140.78906250 223.38119507]
[-155.86347961 228.12857056]
[-169.84080505 220.75227356]
[-174.42854309 205.62850952]
[-166.90487671 191.72994995]
[-151.73345947 187.30235291]
[-137.91522217 194.97254944]
[-123.56111145 190.61828613]
[-109.20700836 186.26400757]
[-94.85290527 181.90974426]
[-80.49880219 177.55546570]
[-66.14469147 173.20120239]
[-51.97260284 168.28674316]
[-38.00437927 162.81968689]
[-24.03615570 157.35263062]
[-15.00434780 145.50881958]
[0.66659600 147.68415833]
[14.63481998 142.21710205]
[28.60304451 136.75004578]
[30.37031937 132.90232849]
[33.74729538 129.69755554]
[38.45954514 127.80014038]
[43.96572495 127.74581909]
[55.56088257 118.22991943]
[67.15603638 108.71401978]
[78.75119781 99.19812775]
[81.09770966 84.38279724]
[73.01063538 71.74954224]
[59.05394745 64.29827118]
[58.70867538 49.40766907]
[50.62160110 36.77441025]
[42.53452682 24.14115334]
[34.44745255 11.50789452]
[26.36037827 -1.12536430]
[11.55680180 -8.18129730]
[10.53554630 -24.54861450]
[24.34719086 -33.39002228]
[38.78350067 -25.61024094]
[38.99363708 -9.21243954]
[47.08071136 3.42081928]
[55.16778564 16.05407715]
[63.25485992 28.68733597]
[71.34193420 41.32059479]
[84.72018433 47.86824799]
[85.64389801 63.66246414]
[93.73097229 76.29572296]
[101.12676239 75.04979706]
[98.63491058 60.25822449]
[96.14328766 45.46660995]
[110.93493652 42.97521591]
[113.42648315 57.76637268]
[115.91833496 72.55794525]
[123.31411743 71.31201935]
[126.81580353 56.72647476]
[130.31748962 42.14092636]
[128.13577271 25.32793999]
[143.68774414 18.57719612]
[154.47988892 31.65259933]
[144.90303040 45.64260483]
[141.40135193 60.22815323]
[137.89967346 74.81370544]
[142.06645203 81.04972839]
[152.13214111 69.92849731]
[157.18870544 55.80648422]
[170.41859436 48.73755646]
[184.96878052 52.38340378]
[193.30227661 64.85548401]
[191.10235596 79.69328308]
[179.50857544 89.21085358]
[164.52665710 88.47818756]
[150.39999390 93.52176666]
[154.56677246 99.75778961]
[169.38209534 102.10430908]
[184.19743347 104.45082855]
[199.03807068 98.96760559]
[210.39826965 108.60063171]
[225.21359253 110.94715118]
[240.02893066 113.29366302]
[254.84425354 115.64018250]
[269.65957642 117.98670197]
[277.64465332 105.08265686]
[289.92868042 96.24268341]
[304.62164307 92.78857422]
[319.47738647 95.21637726]
[332.23718262 103.12539673]
[340.97302246 115.28395081]
[344.37899780 129.82109070]
[359.19433594 132.16761780]
[374.00967407 134.51412964]
[388.82498169 136.86064148]
[397.84368896 135.10743713]
[403.90698242 139.40142822]
[418.67340088 142.03837585]
[433.90341187 135.95733643]
[446.61550903 146.31756592]
[443.73260498 162.46131897]
[428.22036743 167.78129578]
[416.03643799 156.80476379]
[401.27005005 154.16781616]
[386.47848511 151.67597961]
[371.66314697 149.32945251]
[356.84780884 146.98294067]
[342.03250122 144.63642883]
[334.30099487 157.40956116]
[322.23550415 166.27351379]
[307.65621948 169.85243225]
[292.77731323 167.57073975]
[279.87084961 159.74531555]
[270.91973877 147.54202271]
[267.31304932 132.80203247]
[252.49772644 130.45550537]
[237.68240356 128.10899353]
[222.86708069 125.76247406]
[208.05175781 123.41595459]
[194.27079773 129.06701660]
[181.85090637 119.26615143]
[167.03558350 116.91963196]
[152.22026062 114.57312012]
[123.06797028 134.44734192]
[96.60678101 128.49874878]
[88.26709747 110.79328156]
[76.67193604 120.30918121]
[65.07678223 129.82507324]
[53.48162460 139.34097290]
[68.28043365 136.89247131]
[83.15738678 138.80986023]
[96.85174561 144.93069458]
[108.20301056 154.73623657]
[116.24923706 167.39555359]
[120.30856323 181.83583069]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 48]
[14 47]
[15 46]
[17 44]
[18 43]
[19 42]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[52 153]
[53 152]
[54 151]
[55 150]
[56 75]
[57 74]
[59 72]
[60 71]
[61 70]
[62 69]
[63 68]
[82 90]
[83 89]
[84 88]
[101 147]
[102 146]
[103 145]
[105 143]
[106 142]
[107 141]
[108 140]
[109 139]
[116 132]
[117 131]
[118 130]
[119 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
