%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 10:53:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAUGACAGAAGAAAAGAGUCACAAGCUCCAAGAAGAGAGACCAGCGUUAUUAAGUUUUCCCAGCACAUCCUUCAAGGCGUGUGUGUCUCUAUAAUACACAAGAACUAAAUAAAAAUUAAUGUUGAACCAUUCA\
) } def
/len { sequence length } bind def

/coor [
[177.93788147 442.55285645]
[169.14361572 430.38464355]
[161.64714050 417.37670898]
[155.52789307 403.66690063]
[150.85076904 389.40054321]
[147.66532898 374.72891235]
[146.00535583 359.80749512]
[145.88842773 344.79449463]
[147.31579590 329.84902954]
[150.27233887 315.12954712]
[154.72668457 300.79208374]
[160.63165283 286.98864746]
[167.92462158 273.86550903]
[176.52828979 261.56179810]
[186.35145569 250.20797729]
[197.28997803 239.92436218]
[188.19320679 227.99755859]
[179.09645081 216.07073975]
[169.99967957 204.14393616]
[156.12911987 198.71650696]
[153.91207886 183.05140686]
[144.81532288 171.12460327]
[135.71855164 159.19778442]
[126.62178040 147.27098083]
[112.75122833 141.84355164]
[110.53418732 126.17845154]
[101.43741608 114.25164032]
[88.61073303 108.68677521]
[86.63576508 94.84512329]
[77.53900146 82.91831207]
[62.12482071 80.67314911]
[53.06930923 68.44808197]
[55.30472183 53.76684952]
[46.20795822 41.84003830]
[37.11119080 29.91322517]
[28.01442337 17.98641396]
[20.24802017 13.00201893]
[18.84860229 5.67457819]
[10.03182316 -6.46067667]
[-2.46472955 -4.81003046]
[-14.39694786 -8.64245129]
[-23.48932648 -17.16191292]
[-28.03589058 -28.68490028]
[-27.22007942 -40.97283173]
[-21.26068687 -51.66691589]
[-29.50332260 -64.19923401]
[-44.16520309 -60.41664124]
[-59.26066971 -61.60219193]
[-73.15228271 -67.62728882]
[-84.33319092 -77.83836365]
[-91.59055328 -91.12780762]
[-94.13716888 -106.05407715]
[-91.69677734 -120.99808502]
[-84.53411102 -134.33880615]
[-73.42611694 -144.62915039]
[-59.57770920 -150.75289917]
[-44.49105453 -152.04577637]
[-29.80264091 -148.36755371]
[-17.10576057 -140.11723328]
[-7.77767658 -128.18971252]
[-2.83022761 -113.87882996]
[-2.80007672 -98.73690796]
[-7.69049454 -84.40643311]
[-16.97100449 -72.44186401]
[-8.72836971 -59.90954971]
[8.85877705 -59.95343018]
[23.11811829 -49.39434052]
[28.29668236 -32.26051712]
[22.16707802 -15.27745533]
[30.98385620 -3.14220071]
[39.94123459 8.88964748]
[49.03800201 20.81645966]
[58.13476944 32.74327087]
[67.23153687 44.67008209]
[81.98128510 46.39646149]
[91.37660217 58.36235428]
[89.46581268 73.82154846]
[98.56258392 85.74835968]
[111.38926697 91.31322479]
[113.36423492 105.15487671]
[122.46099854 117.08168793]
[136.98220825 123.36219788]
[138.54859924 138.17420959]
[147.64535522 150.10101318]
[156.74212646 162.02783203]
[165.83889771 173.95465088]
[180.36010742 180.23515320]
[181.92649841 195.04716492]
[191.02325439 206.97398376]
[200.12002563 218.90078735]
[209.21679688 230.82760620]
[222.02687073 222.99778748]
[235.57412720 216.52662659]
[249.71495056 211.48274231]
[264.29946899 207.91957092]
[279.17303467 205.87490845]
[294.17803955 205.37042236]
[309.15536499 206.41146851]
[323.94625854 208.98699951]
[338.39392090 213.06970215]
[352.34524536 218.61633301]
[365.65228271 225.56805420]
[378.17401123 233.85121155]
[389.77767944 243.37797546]
[400.34024048 254.04734802]
[409.74981689 265.74624634]
[417.90658569 278.35067749]
[424.72409058 291.72695923]
[430.13009644 305.73336792]
[434.06726074 320.22137451]
[436.49386597 335.03744507]
[437.38418579 350.02447510]
[436.72879028 365.02362061]
[434.53463745 379.87588501]
[430.82492065 394.42382812]
[425.63903809 408.51321411]
[419.03195190 421.99468994]
[411.07366943 434.72534180]
[401.84857178 446.57022095]
[391.45443726 457.40380859]
[380.00146484 467.11120605]
[367.61105347 475.58950806]
[354.41455078 482.74890137]
[340.55187988 488.51342773]
[326.16992188 492.82199097]
[311.42120361 495.62893677]
[296.46203613 496.90451050]
[281.45098877 496.63519287]
[266.54718018 494.82382202]
[251.90864563 491.48959351]
[237.69052124 486.66787720]
[224.04353333 480.40979004]
[211.11235046 472.78161621]
[199.03405762 463.86428833]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 91]
[17 90]
[18 89]
[19 88]
[21 86]
[22 85]
[23 84]
[24 83]
[26 81]
[27 80]
[29 78]
[30 77]
[33 74]
[34 73]
[35 72]
[36 71]
[38 70]
[39 69]
[45 65]
[46 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
