%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 11:19:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAGACAAGCUGAAACAACGCAAGCUGGUUUUAUAUUAGAUAUUUGACUUAAACUAUCUCAAUAAAGUUUUGCAGCUUUCACCAA\
) } def
/len { sequence length } bind def

/coor [
[61.40921021 143.50914001]
[64.63410950 128.85990906]
[74.08341217 117.21041870]
[87.75192261 111.03254700]
[73.09471893 114.22102356]
[58.43751526 117.40950012]
[43.78031158 120.59798431]
[29.12310982 123.78646088]
[17.28299713 134.28038025]
[3.20190096 129.42527771]
[-11.45530224 132.61375427]
[-26.11250496 135.80223083]
[-40.76970673 138.99070740]
[-44.77770233 153.76213074]
[-55.19971466 164.97105408]
[-69.64084625 170.04177856]
[-84.78263092 167.80908203]
[-97.14559937 158.78602600]
[-103.88882446 145.04603577]
[-103.46276855 129.74645996]
[-95.96533966 116.40302277]
[-83.11938477 108.08197021]
[-67.87680817 106.69539642]
[-53.74025345 112.56194305]
[-43.95818710 124.33351135]
[-29.30098343 121.14503479]
[-14.64378166 117.95655060]
[0.01342167 114.76807404]
[10.80515385 104.50222015]
[25.93463135 109.12925720]
[40.59183502 105.94078064]
[55.24903488 102.75230408]
[69.90624237 99.56381989]
[84.56344604 96.37534332]
[89.05847168 85.84280396]
[100.48264313 80.07715607]
[107.67137909 66.91197205]
[114.86011505 53.74678421]
[122.04885101 40.58160019]
[129.00144958 27.29019928]
[135.71571350 13.87682056]
[142.42996216 0.46344188]
[149.14422607 -12.94993687]
[155.85848999 -26.36331558]
[155.11679077 -42.16712952]
[167.73262024 -50.08482742]
[174.44688416 -63.49820709]
[169.21871948 -78.41268921]
[176.14317322 -92.61928558]
[191.11209106 -97.68947601]
[205.24468994 -90.61520386]
[210.15634155 -75.59351349]
[202.93304443 -61.53650284]
[187.86026001 -56.78394699]
[181.14601135 -43.37056732]
[182.36795044 -28.52617264]
[169.27186584 -19.64905739]
[162.55760193 -6.23567915]
[155.84335327 7.17770004]
[149.12908936 20.59107971]
[142.41482544 34.00445938]
[142.23262024 41.56564331]
[135.21403503 47.77033234]
[128.02529907 60.93552017]
[120.83656311 74.10070038]
[113.64782715 87.26589203]
[117.61625671 101.73142242]
[130.51646423 109.38546753]
[143.41668701 117.03952026]
[156.31689453 124.69357300]
[169.21710205 132.34762573]
[185.61260986 132.00161743]
[193.87742615 146.16581726]
[185.50942993 160.26931763]
[169.11689758 159.80364990]
[161.56304932 145.24783325]
[148.66284180 137.59378052]
[135.76263428 129.93972778]
[122.86241913 122.28568268]
[109.96220398 114.63163757]
[120.98037720 124.81002808]
[126.26712799 138.84748840]
[124.70069122 153.76547241]
[116.61342621 166.39862061]
[103.72134399 174.06634521]
[88.75993347 175.14169312]
[74.90379333 169.39648438]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 34]
[5 33]
[6 32]
[7 31]
[8 30]
[10 28]
[11 27]
[12 26]
[13 25]
[36 66]
[37 65]
[38 64]
[39 63]
[40 61]
[41 60]
[42 59]
[43 58]
[44 57]
[46 55]
[47 54]
[67 80]
[68 79]
[69 78]
[70 77]
[71 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
