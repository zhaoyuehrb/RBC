%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 03:44:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAGGCCGAGGCGGGCUGGCCUCUGCCGAUGUUACCUUUUACCUCAGUAAAACCCAGUCACAGCCUA\
) } def
/len { sequence length } bind def

/coor [
[86.23130035 150.13458252]
[82.35996246 135.64276123]
[84.90282440 120.85987854]
[93.39453125 108.49404144]
[78.53836823 110.56639099]
[63.68221664 112.63873291]
[51.08333969 122.20841980]
[37.40915680 116.30366516]
[22.55300140 118.37601471]
[7.69684505 120.44835663]
[-7.15931177 122.52070618]
[-22.01546860 124.59304810]
[-31.33847237 137.35459900]
[-46.96724701 139.70343018]
[-59.62951279 130.24601746]
[-61.81297684 114.59329224]
[-52.22222519 102.03172302]
[-36.54728317 100.01387024]
[-24.08781242 109.73689270]
[-9.23165703 107.66455078]
[5.62449932 105.59220123]
[20.48065567 103.51985931]
[35.33681107 101.44750977]
[46.87307739 92.02605438]
[61.60987091 97.78257751]
[76.46602631 95.71022797]
[91.32218170 93.63788605]
[105.04409027 87.57907104]
[116.58409882 77.99636841]
[128.12411499 68.41366577]
[124.69007874 55.57676315]
[126.48212433 42.45787430]
[133.18481445 31.09420204]
[143.72308350 23.23600388]
[156.43443298 20.07704735]
[169.33128357 22.07336998]
[180.41160583 28.87784195]
[192.78657532 20.40079689]
[205.16152954 11.92374992]
[217.53649902 3.44670391]
[229.91145325 -5.03034258]
[242.28642273 -13.50738811]
[248.87734985 -28.52376938]
[265.20486450 -30.05485916]
[274.47262573 -16.52560425]
[267.14672852 -1.85374177]
[250.76347351 -1.13242650]
[238.38850403 7.34461975]
[226.01353455 15.82166576]
[213.63858032 24.29871178]
[201.26361084 32.77575684]
[188.88865662 41.25280380]
[190.92730713 58.05672455]
[184.32807922 73.73851013]
[170.75012207 84.13385010]
[153.71798706 86.43611908]
[137.70681763 79.95367432]
[126.16680145 89.53637695]
[114.62679291 99.11907959]
[129.48535156 101.17417145]
[142.12332153 109.25386810]
[150.22508240 121.87770844]
[152.30613708 136.73265076]
[147.98516846 151.09681702]
[138.05392456 162.33827209]
[124.33207703 168.39723206]
[109.33390045 168.16354370]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 27]
[5 26]
[6 25]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[28 59]
[29 58]
[30 57]
[37 52]
[38 51]
[39 50]
[40 49]
[41 48]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
