%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 02:02:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCACGCGCCGUCCUCCGAGGAACUGGGCGCUUGCAGUGCGUUGCACACCCUCACCUCCCACCCACUGAUUAUUAAUAAAGUCUUUUCUUUUACCUGCCAA\
) } def
/len { sequence length } bind def

/coor [
[128.03199768 103.23844910]
[113.20951080 105.53932953]
[102.19717407 114.15442657]
[89.09136200 109.28315735]
[74.26887512 111.58403015]
[59.44639587 113.88490295]
[44.62391281 116.18578339]
[29.80143166 118.48665619]
[14.97895050 120.78752899]
[0.43199626 124.44623566]
[-13.71532059 129.43156433]
[-27.86263657 134.41688538]
[-42.00995255 139.40220642]
[-56.15726852 144.38752747]
[-58.29843521 159.54252625]
[-67.24663544 171.95977783]
[-80.94563293 178.78590393]
[-96.24750519 178.45230103]
[-109.63599396 171.03562927]
[-118.03451538 158.24018860]
[-119.51316071 143.00627136]
[-113.73213959 128.83451843]
[-102.01988983 118.98151398]
[-87.06780243 115.71138000]
[-72.31175995 119.77558899]
[-61.14259338 130.24020386]
[-46.99527359 125.25488281]
[-32.84795761 120.26956177]
[-18.70064163 115.28424072]
[-4.55332565 110.29891968]
[-16.96960258 101.88249969]
[-20.07606506 87.20769501]
[-12.13530445 74.48196411]
[2.41150045 70.82266235]
[15.42847919 78.27640533]
[19.63537598 92.67439270]
[12.67807579 105.96504974]
[27.50055695 103.66417694]
[42.32304001 101.36329651]
[57.14552307 99.06242371]
[71.96800232 96.76155090]
[86.79048920 94.46067047]
[97.80282593 85.84557343]
[110.90863800 90.71684265]
[125.73112488 88.41596985]
[125.49779510 73.96348572]
[127.20483398 59.61181259]
[130.82099915 45.62025833]
[136.28053284 32.24156570]
[143.48440552 19.71734619]
[152.30206299 8.27372837]
[162.57385254 -1.88273954]
[174.11384583 -10.56880760]
[186.71324158 -17.62783432]
[200.14418030 -22.93261528]
[214.16377258 -26.38766289]
[228.51858521 -27.93094444]
[242.94915771 -27.53497314]
[257.19470215 -25.20731926]
[270.99789429 -20.99045181]
[284.10937500 -14.96096516]
[296.29238892 -7.22819471]
[307.32696533 2.06777191]
[317.01400757 12.75862980]
[325.17871094 24.65090561]
[331.67391968 37.52946091]
[336.38259888 51.16137314]
[339.22000122 65.30016327]
[354.19155884 64.37674713]
[369.16311646 63.45333481]
[384.13467407 62.52992249]
[392.35134888 49.36687088]
[406.74841309 43.57860184]
[421.78991699 47.39081955]
[431.69207764 59.33765411]
[432.64730835 74.82529449]
[424.28833008 87.89843750]
[409.82931519 93.53018951]
[394.83004761 89.55502319]
[385.05807495 77.50147247]
[370.08651733 78.42488098]
[355.11499023 79.34829712]
[340.14343262 80.27171326]
[338.89318848 95.81298065]
[335.40289307 111.01071930]
[329.74572754 125.54376984]
[322.04071045 139.10491943]
[312.45010376 151.40742493]
[301.17605591 162.19107056]
[288.45635986 171.22764587]
[274.55938721 178.32582092]
[259.77847290 183.33515930]
[244.42564392 186.14930725]
[228.82514954 186.70829773]
[213.30651855 184.99974060]
[198.19761658 181.05920410]
[183.81774902 174.96937561]
[170.47091675 166.85841370]
[158.43934631 156.89717102]
[147.97753906 145.29566956]
[139.30691528 132.29856873]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[2 44]
[4 42]
[5 41]
[6 40]
[7 39]
[8 38]
[9 37]
[10 30]
[11 29]
[12 28]
[13 27]
[14 26]
[68 83]
[69 82]
[70 81]
[71 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
