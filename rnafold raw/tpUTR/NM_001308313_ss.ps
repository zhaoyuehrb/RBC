%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 20:43:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCACAAUUUUGGCAAUUUUAAAGGAAGAUACAGAGGUGAUUGUACUUCAGAAUGAUAAACCCAUAUACCACCUAAAAUCAAUUUUCUUGUACAACUGGUACACACUAAUAAACAAACAUGUGAGAUCAGAA\
) } def
/len { sequence length } bind def

/coor [
[104.27370453 156.47399902]
[93.96120453 156.31260681]
[83.84897614 154.28370667]
[77.70512390 167.96775818]
[77.02822113 177.17312622]
[71.25349426 181.89793396]
[64.79054260 195.43418884]
[66.60955048 211.73214722]
[53.24596786 221.23722839]
[38.44709778 214.17143250]
[37.43675232 197.80343628]
[51.25428391 188.97123718]
[57.71724319 175.43498230]
[64.02108002 161.82389832]
[70.16493988 148.13984680]
[60.35574341 140.44638062]
[52.46735001 130.79324341]
[46.88195038 119.64813995]
[43.87017059 107.55107880]
[43.57792664 95.08815765]
[46.01938248 82.86321259]
[51.07624435 71.46856689]
[58.50350189 61.45629120]
[67.94130707 53.31149292]
[61.16279984 39.93046570]
[54.38429642 26.54944038]
[47.60578918 13.16841316]
[40.82728577 -0.21261303]
[34.04878235 -13.59363937]
[27.27027512 -26.97466660]
[20.49177170 -40.35569382]
[2.14060950 -40.67857361]
[-13.48085499 -50.15270233]
[-22.16838264 -66.12924957]
[-21.63384247 -84.22305298]
[-12.10723972 -99.51611328]
[-19.80935287 -112.38768768]
[-27.51146507 -125.25926208]
[-35.21357727 -138.13082886]
[-42.91569138 -151.00241089]
[-57.08759689 -145.93847656]
[-71.97515869 -143.73695374]
[-87.00614166 -144.48245239]
[-101.60279083 -148.14633179]
[-115.20406342 -154.58773804]
[-127.28714752 -163.55909729]
[-137.38760376 -174.71557617]
[-145.11720276 -187.62834167]
[-150.17883301 -201.80107117]
[-152.37794495 -216.68899536]
[-151.63002014 -231.71984863]
[-147.96377563 -246.31591797]
[-141.52017212 -259.91613770]
[-132.54685974 -271.99777222]
[-121.38874054 -282.09640503]
[-108.47472382 -289.82391357]
[-94.30118561 -294.88327026]
[-79.41291046 -297.07998657]
[-64.38216400 -296.32962036]
[-49.78670120 -292.66101074]
[-36.18751907 -286.21520996]
[-24.10734177 -277.23992920]
[-14.01049519 -266.08016968]
[-6.28507614 -253.16491699]
[-1.22802961 -238.99055481]
[0.96626520 -224.10191345]
[0.21346562 -209.07130432]
[-3.45749283 -194.47642517]
[-9.90550804 -180.87829590]
[-18.88273621 -168.79956055]
[-30.04411507 -158.70452881]
[-22.34200287 -145.83294678]
[-14.63989067 -132.96138000]
[-6.93777752 -120.08979797]
[0.76433557 -107.21822357]
[12.55160904 -109.05492401]
[24.29440689 -106.76313782]
[34.58582306 -100.59328461]
[42.18462753 -91.26185608]
[46.16495895 -79.86826324]
[46.02909470 -67.76534271]
[41.76954651 -56.39873886]
[33.87279892 -47.13419724]
[40.65130234 -33.75317001]
[47.42980576 -20.37214470]
[54.20831299 -6.99111795]
[60.98681641 6.38990879]
[67.76531982 19.77093506]
[74.54382324 33.15196228]
[81.32233429 46.53298950]
[100.44107819 43.36624527]
[119.50818634 46.83039093]
[136.29119873 56.51983261]
[148.82511902 71.30008698]
[155.64239502 89.44064331]
[155.94487000 108.81752014]
[149.69709778 127.16201019]
[161.79087830 136.03559875]
[173.88465881 144.90917969]
[185.97843933 153.78276062]
[198.07221985 162.65634155]
[216.37820435 164.19815063]
[222.89239502 180.45028687]
[235.19087219 189.03791809]
[247.48934937 197.62554932]
[259.78781128 206.21318054]
[272.57864380 197.99957275]
[287.53991699 195.31092834]
[302.39016724 198.55726624]
[314.86480713 207.24354553]
[323.06158447 220.04515076]
[325.73056030 235.00994873]
[322.46469116 249.85591125]
[313.76199341 262.31912231]
[300.94961548 270.49905396]
[285.98132324 273.14834595]
[271.13967896 269.86294556]
[258.68792725 261.14385986]
[250.52484131 248.32073975]
[247.89526367 233.34898376]
[251.20018005 218.51165771]
[238.90170288 209.92402649]
[226.60322571 201.33639526]
[214.30476379 192.74874878]
[202.28356934 194.54779053]
[191.94966125 187.41397095]
[189.19863892 174.75012207]
[177.10485840 165.87654114]
[165.01107788 157.00296021]
[152.91729736 148.12937927]
[140.82351685 139.25578308]
[133.02751160 146.00825500]
[124.13620758 151.23495483]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 15]
[4 14]
[6 13]
[7 12]
[24 90]
[25 89]
[26 88]
[27 87]
[28 86]
[29 85]
[30 84]
[31 83]
[36 75]
[37 74]
[38 73]
[39 72]
[40 71]
[97 131]
[98 130]
[99 129]
[100 128]
[101 127]
[103 124]
[104 123]
[105 122]
[106 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
