%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 11:10:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCUCGAAGGCUGCCAGCUGGUCCGUCCUCCUUCUCCCUCCCUGGGGCUGGGACUCAGUUUCCCAUACAGAACCCACAACCUUACCUCCCUCCGCCUGGUCUUUAAUAAACAGAGUAUUUUCACAGCA\
) } def
/len { sequence length } bind def

/coor [
[92.84835052 208.59678650]
[86.34433746 222.40476990]
[74.48794556 232.01667786]
[59.63328171 235.52406311]
[44.72974777 232.23052979]
[32.73645020 222.78999329]
[26.03466415 209.07690430]
[25.95503998 193.81399536]
[32.51338196 180.03173828]
[44.40752792 170.46658325]
[59.27589035 167.01773071]
[62.51265335 152.37110901]
[65.74941254 137.72450256]
[68.98617554 123.07788086]
[75.73893738 116.48957825]
[82.98427582 110.53055573]
[90.68033600 105.23028564]
[76.41448975 100.59503174]
[62.14864349 95.95977020]
[47.88279343 91.32451630]
[33.61694717 86.68926239]
[19.29613495 82.22671509]
[4.92244673 77.93753052]
[-9.45124054 73.64834595]
[-23.82492828 69.35916138]
[-36.14456558 78.60755157]
[-51.36973572 78.82584381]
[-63.65867996 70.13989258]
[-68.41957092 56.05188370]
[-82.79325867 51.76269913]
[-97.16694641 47.47351074]
[-111.54063416 43.18432617]
[-121.78060150 54.50271225]
[-135.92059326 60.24931335]
[-151.15309143 59.28314209]
[-164.45368958 51.79603195]
[-173.18153381 39.27455139]
[-175.60371399 24.20485115]
[-171.23928833 9.57903290]
[-160.95483398 -1.69893837]
[-146.79232788 -7.38981295]
[-131.56373596 -6.36366367]
[-118.29272461 1.17576683]
[-109.61425781 13.73151970]
[-107.25144958 28.81064034]
[-92.87776184 33.09982681]
[-78.50407410 37.38901138]
[-64.13038635 41.67819595]
[-52.42763901 32.50302505]
[-37.38829041 31.97197914]
[-24.77252007 40.49815750]
[-19.53574371 54.98547363]
[-5.16205549 59.27465820]
[9.21163177 63.56384659]
[23.58531952 67.85302734]
[30.96916199 66.73976135]
[38.25220108 72.42341614]
[52.51805115 77.05867004]
[66.78389740 81.69392395]
[81.04974365 86.32917786]
[95.31558990 90.96443176]
[82.80105591 82.69482422]
[71.93789673 72.35115051]
[63.06545258 60.25653076]
[56.46090698 46.78879547]
[52.33056641 32.36865997]
[50.80346680 17.44659424]
[51.92731094 2.48875523]
[55.66699219 -12.03759289]
[61.90568542 -25.67866135]
[70.44849396 -38.00831223]
[81.02856445 -48.64138412]
[93.31536865 -57.24571228]
[106.92508698 -63.55249786]
[121.43256378 -67.36472321]
[136.38459778 -68.56330872]
[151.31410217 -67.11080170]
[165.75469971 -63.05258179]
[179.25527954 -56.51541901]
[191.39408875 -47.70353317]
[201.79193115 -36.89220047]
[210.12397766 -24.41914940]
[216.12994385 -10.67403030]
[219.62222290 3.91377306]
[220.49171448 18.88855171]
[218.71124268 33.78250885]
[214.33644104 48.13037109]
[207.50398254 61.48392105]
[198.42727661 73.42601776]
[187.38990784 83.58358765]
[174.73664856 91.63932800]
[160.86277771 97.34158325]
[146.20170593 100.51222229]
[131.21142578 101.05219269]
[116.35346222 98.94304657]
[130.10534668 104.93351746]
[143.92860413 110.75738525]
[157.82122803 116.41381073]
[171.71383667 122.07022858]
[182.99838257 111.79298401]
[197.62699890 107.43791199]
[212.69514465 109.86972809]
[225.21102905 118.60557556]
[232.68963623 131.91096497]
[233.64607239 147.14408875]
[227.89042664 161.28039551]
[216.56550598 171.51312256]
[201.91986084 175.81054688]
[186.86140442 173.31942749]
[174.38000488 164.53434753]
[166.95385742 151.19961548]
[166.05741882 135.96284485]
[152.16479492 130.30642700]
[138.27218628 124.65000153]
[130.81536865 125.04543304]
[124.11487579 118.68539429]
[110.36299133 112.69493103]
[103.68044281 116.09985352]
[117.33767700 122.30307770]
[121.00312042 136.84832764]
[111.91668701 148.78302002]
[96.92047882 149.12028503]
[87.30667877 137.60618591]
[90.31534576 122.90971375]
[83.63279724 126.31464386]
[80.39603424 140.96125793]
[77.15927124 155.60787964]
[73.92250824 170.25448608]
[85.95288849 179.64772034]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 128]
[12 127]
[13 126]
[14 125]
[17 61]
[18 60]
[19 59]
[20 58]
[21 57]
[22 55]
[23 54]
[24 53]
[25 52]
[29 48]
[30 47]
[31 46]
[32 45]
[95 117]
[96 116]
[97 114]
[98 113]
[99 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
