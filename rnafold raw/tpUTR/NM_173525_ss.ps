%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 05:23:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGAAGCAAAAGAUUCCGGGGGCAAAGCCCCCAAGAUCUGGCAUAGGGGUACUGGUCUCUAAUAAACAUCAGCUGCUGCUCCCCCAAACCA\
) } def
/len { sequence length } bind def

/coor [
[160.95365906 181.43307495]
[152.88241577 168.78968811]
[144.81118774 156.14631653]
[136.73994446 143.50292969]
[128.66871643 130.85954285]
[120.59748077 118.21615601]
[94.05410004 122.98038483]
[80.49446106 104.31577301]
[65.70340729 101.82083130]
[57.00715256 108.76975250]
[46.13328171 109.65022278]
[36.81963730 104.40856934]
[32.12916183 95.05336761]
[17.53778076 91.57606506]
[2.94640017 88.09876251]
[-11.64497948 84.62145996]
[-26.23636055 81.14415741]
[-39.59178162 89.16104889]
[-54.33997726 85.42671204]
[-61.90055084 72.64495087]
[-76.49192810 69.16764832]
[-91.08331299 65.69034576]
[-105.67469025 62.21304703]
[-120.26607513 58.73574448]
[-134.85745239 55.25844193]
[-151.66676331 57.46823883]
[-158.44349670 41.92757034]
[-145.38613892 31.11360168]
[-131.38014221 40.66706085]
[-116.78877258 44.14436340]
[-102.19738770 47.62166595]
[-87.60601044 51.09896851]
[-73.01463318 54.57627106]
[-58.42324829 58.05357361]
[-45.91059494 50.05550766]
[-31.06332397 53.37412643]
[-22.75905800 66.55278015]
[-8.16767788 70.03008270]
[6.42370224 73.50738525]
[21.01508141 76.98468781]
[35.60646057 80.46199036]
[53.49297333 73.44178772]
[68.19834900 87.02977753]
[82.98940277 89.52471924]
[97.17013550 76.43215179]
[119.33477783 80.44876099]
[126.54350281 67.29450989]
[133.75222778 54.14026260]
[140.96095276 40.98601532]
[148.16967773 27.83176613]
[155.37840271 14.67751598]
[150.70883179 -0.42118049]
[158.15713501 -14.36027718]
[173.30435181 -18.86995506]
[187.16392517 -11.27470303]
[191.51321411 3.91935253]
[183.77185059 17.69784546]
[168.53265381 21.88624191]
[161.32392883 35.04049301]
[154.11520386 48.19474030]
[146.90647888 61.34899139]
[139.69775391 74.50323486]
[132.48902893 87.65748596]
[143.27566528 77.23403168]
[158.18579102 75.59441376]
[170.97973633 83.42478943]
[176.30346680 97.44826508]
[171.92907715 111.79624939]
[159.68717957 120.46434784]
[144.70080566 119.82508850]
[133.24085999 110.14492035]
[141.31210327 122.78830719]
[149.38333130 135.43168640]
[157.45457458 148.07507324]
[165.52580261 160.71846008]
[173.59704590 173.36184692]
[188.23501587 169.54284668]
[203.33657837 170.43618774]
[217.42222595 175.95431519]
[229.11198425 185.55664062]
[237.26062012 198.30242920]
[241.06979370 212.94296265]
[240.16635132 228.04393005]
[234.63877869 242.12586975]
[225.02861023 253.80918884]
[212.27737427 261.94927979]
[197.63429260 265.74865723]
[182.53393555 264.83508301]
[168.45570374 259.29806519]
[156.77882385 249.68008423]
[148.64727783 236.92340088]
[144.85772705 222.27777100]
[145.78140259 207.17803955]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 76]
[2 75]
[3 74]
[4 73]
[5 72]
[6 71]
[8 44]
[9 43]
[13 41]
[14 40]
[15 39]
[16 38]
[17 37]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[25 29]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
