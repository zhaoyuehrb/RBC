%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 00:42:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGUCCUCACGCUCCCAAGACUGGUUUUUCUACUCUCAUGCAUUCCAGAGGCCCCCGUGCCUCCUCGUUGUUGGUACAGCCGGACACGGGGUGCUGCCACCCAGAAUAAAGCCACUCACACUGACUGGGCUCAAACAUUU\
) } def
/len { sequence length } bind def

/coor [
[138.41149902 535.88116455]
[136.75559998 520.97283936]
[135.09968567 506.06448364]
[133.44377136 491.15618896]
[121.68917084 482.08065796]
[119.79747009 466.98510742]
[129.39640808 454.71731567]
[127.74049377 439.80902100]
[126.08458710 424.90069580]
[124.42867279 409.99237061]
[112.67407227 400.91687012]
[110.78237152 385.82128906]
[120.38130951 373.55352783]
[107.04583740 369.58187866]
[96.20636749 360.78842163]
[89.52904510 348.48208618]
[88.05652618 334.51492310]
[92.04530334 321.00338745]
[100.92177582 310.00772095]
[113.36447906 303.21765137]
[112.03878021 288.27633667]
[103.20691681 276.28271484]
[109.69428253 261.85272217]
[108.36858368 246.91140747]
[107.04287720 231.97010803]
[105.71717834 217.02880859]
[104.39147949 202.08749390]
[103.06577301 187.14619446]
[101.74007416 172.20489502]
[100.08415985 157.29658508]
[98.09885406 142.42854309]
[96.11354828 127.56050110]
[73.24887085 115.25914764]
[68.82494354 87.04126740]
[54.53872299 82.46917725]
[40.25250626 77.89709473]
[25.96628761 73.32500458]
[14.65209961 83.71176147]
[-0.34313315 87.03420258]
[-14.98576736 82.39859772]
[-25.33700943 71.05190277]
[-28.61242676 56.04633331]
[-23.93094635 41.41830063]
[-12.55186653 31.10267639]
[2.46389937 27.87431145]
[17.07718468 32.60161972]
[27.35709190 44.01297760]
[30.53837395 59.03879166]
[44.82459259 63.61087799]
[59.11080933 68.18296051]
[73.39702606 72.75505066]
[85.98310852 64.59474182]
[87.63901520 49.68642426]
[89.12991333 34.76070023]
[90.45561981 19.81939888]
[91.78131866 4.87809658]
[93.10701752 -10.06320572]
[94.43272400 -25.00450897]
[95.75842285 -39.94581223]
[97.08412170 -54.88711166]
[94.60060883 -61.15252686]
[95.56726837 -66.85411072]
[98.81330109 -70.45503998]
[100.79860687 -85.32307434]
[102.78391266 -100.19111633]
[95.56532288 -110.94235229]
[97.57572937 -123.32816315]
[107.18881989 -130.75207520]
[109.50255585 -145.57255554]
[111.81628418 -160.39303589]
[114.13002014 -175.21351624]
[116.44375610 -190.03399658]
[110.03147125 -205.12753296]
[120.11151123 -218.06294250]
[136.31439209 -215.53338623]
[141.97198486 -200.14106750]
[131.26423645 -187.72026062]
[128.95050049 -172.89978027]
[126.63676453 -158.07929993]
[124.32303619 -143.25881958]
[122.00930023 -128.43833923]
[129.22746277 -112.47959137]
[117.65195465 -98.20580292]
[115.66664124 -83.33776855]
[113.68133545 -68.46972656]
[112.02542877 -53.56141281]
[110.69972229 -38.62010956]
[109.37402344 -23.67880630]
[108.04832458 -8.73750401]
[106.72261810 6.20379829]
[105.39691925 21.14509964]
[104.07122040 36.08640289]
[106.63345337 43.08233261]
[102.54733276 51.34233475]
[100.89142609 66.25065613]
[110.64749908 68.65668488]
[119.07585144 73.75667572]
[125.47217560 80.98781586]
[129.34339905 89.61621857]
[130.44459534 98.81047821]
[128.79176331 107.72140503]
[124.65005493 115.56041718]
[118.49935913 121.66929626]
[110.98158264 125.57519531]
[112.96689606 140.44323730]
[114.95220184 155.31126404]
[118.75006104 160.87899780]
[119.05810547 166.65373230]
[116.68137360 170.87919617]
[118.00708008 185.82049561]
[119.33277893 200.76179504]
[120.65847778 215.70309448]
[121.98418427 230.64440918]
[123.30988312 245.58570862]
[124.63558197 260.52700806]
[133.56227112 273.58935547]
[126.98007965 286.95065308]
[128.30578613 301.89193726]
[143.54589844 307.48321533]
[154.79557800 319.10589600]
[159.85054016 334.41000366]
[157.75187683 350.33163452]
[148.96766663 363.70617676]
[135.28962708 371.89761353]
[147.34661865 381.76000977]
[148.81356812 396.90274048]
[139.33699036 408.33645630]
[140.99290466 423.24478149]
[142.64881897 438.15310669]
[144.30471802 453.06143188]
[156.36172485 462.92379761]
[157.82867432 478.06655884]
[148.35209656 489.50027466]
[150.00799561 504.40859985]
[151.66390991 519.31689453]
[153.31982422 534.22521973]
[165.81555176 543.90161133]
[167.72622681 559.58996582]
[157.91827393 571.98272705]
[142.21058655 573.72741699]
[129.92224121 563.78894043]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 136]
[2 135]
[3 134]
[4 133]
[7 130]
[8 129]
[9 128]
[10 127]
[13 124]
[20 118]
[21 117]
[23 115]
[24 114]
[25 113]
[26 112]
[27 111]
[28 110]
[29 109]
[30 106]
[31 105]
[32 104]
[34 51]
[35 50]
[36 49]
[37 48]
[52 95]
[53 94]
[54 92]
[55 91]
[56 90]
[57 89]
[58 88]
[59 87]
[60 86]
[63 85]
[64 84]
[65 83]
[68 81]
[69 80]
[70 79]
[71 78]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
