%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 10:02:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAAAAAAUAUGUAUCCUCUAUAAUUAGUUAUGACAGCCAUUUGUAAUGAAUUUGUCGCAAAGACGUAAUAAAAUUAACUGGUGGCACGGUCUUUGUA\
) } def
/len { sequence length } bind def

/coor [
[-20.75347710 352.69711304]
[-29.64977455 364.81143188]
[-40.29113007 375.42565918]
[-52.42809677 384.29101562]
[-65.77616119 391.19967651]
[-80.02243805 395.98968506]
[-94.83295441 398.54876709]
[-109.86054993 398.81692505]
[-124.75294495 396.78787231]
[-139.16104126 392.50918579]
[-152.74710083 386.08117676]
[-165.19262695 377.65447998]
[-176.20590210 367.42666626]
[-185.52874756 355.63748169]
[-192.94262695 342.56326294]
[-198.27374268 328.51052856]
[-201.39714050 313.80865479]
[-202.23957825 298.80230713]
[-200.78132629 283.84323120]
[-197.05654907 269.28210449]
[-191.15258789 255.46023560]
[-183.20783997 242.70166016]
[-173.40850830 231.30545044]
[-161.98432922 221.53874207]
[-149.20309448 213.63047791]
[-135.36442566 207.76605225]
[-120.79270935 204.08291626]
[-105.82952881 202.66743469]
[-90.82563782 203.55276489]
[-76.13275909 206.71815491]
[-62.09531021 212.08943176]
[-49.04235077 219.54064941]
[-37.27985764 228.89715576]
[-26.26098251 218.71951294]
[-15.24210644 208.54187012]
[-11.08168793 189.77111816]
[8.41962814 185.17840576]
[18.77081299 174.32240295]
[29.12199783 163.46638489]
[39.47318268 152.61038208]
[49.82436752 141.75436401]
[60.17555237 130.89836121]
[63.35863113 116.34784698]
[78.48159027 111.69953918]
[88.83277130 100.84352875]
[99.01041412 89.82465363]
[109.01194763 78.64569092]
[119.01348114 67.46672058]
[117.67818451 50.11322021]
[129.01493835 37.35210419]
[145.73490906 36.66176987]
[155.37672424 25.17110252]
[165.01853943 13.68043709]
[174.47683716 2.03823972]
[183.74922180 -9.75255680]
[193.02160645 -21.54335403]
[202.29399109 -33.33414841]
[201.82473755 -49.37033844]
[214.16235352 -59.62521744]
[229.84248352 -56.23212433]
[236.83666992 -41.79394531]
[229.77957153 -27.38641739]
[214.08477783 -24.06176376]
[204.81239319 -12.27096844]
[195.54000854 -0.48017186]
[186.26762390 11.31062412]
[184.57644653 18.64849281]
[176.50920105 23.32225037]
[166.86738586 34.81291580]
[157.22558594 46.30358505]
[160.13256836 58.96589661]
[155.08740234 71.15010071]
[143.74829102 78.25879669]
[130.19244385 77.46825409]
[120.19091797 88.64722443]
[110.18937683 99.82618713]
[107.52176666 107.60296631]
[99.68878174 111.19471741]
[89.33760071 122.05072784]
[85.41413879 137.37773132]
[71.03156281 141.24954224]
[60.68037796 152.10554504]
[50.32919312 162.96156311]
[39.97800827 173.81756592]
[29.62682343 184.67358398]
[19.27563858 195.52958679]
[20.16185951 206.60263062]
[14.82305908 216.09017944]
[5.29459953 220.88005066]
[-5.06446505 219.56074524]
[-16.08334160 229.73838806]
[-27.10221672 239.91603088]
[-18.70731544 252.38302612]
[-12.31398010 265.98544312]
[-8.07207870 280.40441895]
[-6.08104658 295.30194092]
[-6.38755751 310.32879639]
[-8.98442554 325.13272095]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[33 92]
[34 91]
[35 90]
[37 86]
[38 85]
[39 84]
[40 83]
[41 82]
[42 81]
[44 79]
[45 78]
[46 76]
[47 75]
[48 74]
[51 70]
[52 69]
[53 68]
[54 66]
[55 65]
[56 64]
[57 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
