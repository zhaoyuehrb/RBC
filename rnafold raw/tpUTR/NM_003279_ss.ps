%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 14:30:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGUGGACAGUCGCCUCUACCAAGAUCGCGUGUCCCUAGGGUGUGGGAGACUCCGCCCUGCCGGGUCCCCACCAGGGAGGCGCGACCCCUUGUGGGUCUUUGUCUGGAAGGAAUAAAAGCAAAUGUUCCAA\
) } def
/len { sequence length } bind def

/coor [
[252.60232544 473.88632202]
[246.67742920 464.19018555]
[244.02479553 453.11349487]
[244.91903687 441.73190308]
[249.28945923 431.15585327]
[256.72540283 422.42236328]
[249.58621216 409.23025513]
[242.44699097 396.03814697]
[235.30778503 382.84603882]
[228.16857910 369.65396118]
[221.02935791 356.46185303]
[206.72514343 352.47125244]
[199.29704285 339.19427490]
[203.57972717 324.21774292]
[196.44052124 311.02563477]
[189.30131531 297.83352661]
[182.16209412 284.64141846]
[173.19017029 283.49597168]
[165.67001343 278.22528076]
[161.40538025 269.93615723]
[161.49177551 260.47619629]
[166.03820801 252.02226257]
[159.85096741 238.35777283]
[153.66372681 224.69329834]
[147.47647095 211.02882385]
[130.97497559 201.05761719]
[133.00277710 181.06489563]
[126.17713928 167.70785522]
[119.35150146 154.35079956]
[112.52586365 140.99375916]
[105.70022583 127.63671112]
[98.87458801 114.27966309]
[87.24496460 106.51800537]
[87.76836395 92.54597473]
[80.94272614 79.18892670]
[74.11708832 65.83187866]
[67.29145050 52.47483444]
[60.46581650 39.11779022]
[55.91659164 36.18564606]
[53.27502823 32.17770386]
[52.62799835 28.02822685]
[53.66786575 24.56447601]
[47.37390137 17.81024361]
[47.83393860 10.36165905]
[42.29889297 -3.57976484]
[36.76385117 -17.52118874]
[31.22880745 -31.46261215]
[25.69376373 -45.40403748]
[19.56108093 -52.30504227]
[20.19691658 -59.74068069]
[14.99269676 -73.80894470]
[9.78847790 -87.87721252]
[4.58425808 -101.94548035]
[-0.61996120 -116.01374817]
[-12.66459560 -126.27227020]
[-9.82360363 -140.89341736]
[-15.02782345 -154.96168518]
[-26.19394493 -167.71919250]
[-17.02609444 -181.98057556]
[-0.78414464 -177.11894226]
[-0.95955747 -160.16590881]
[4.24466181 -146.09764099]
[15.91705608 -136.84536743]
[13.44830418 -121.21796417]
[18.65252304 -107.14969635]
[23.85674286 -93.08143616]
[29.06096268 -79.01316833]
[34.26518250 -64.94490051]
[39.63518906 -50.93907928]
[45.17023087 -36.99765396]
[50.70527267 -23.05623245]
[56.24031830 -9.11480808]
[61.77536011 4.82661581]
[67.47467041 18.70169640]
[73.82286072 32.29215240]
[80.64849854 45.64919662]
[87.47413635 59.00624466]
[94.29977417 72.36328888]
[101.12541199 85.72033691]
[112.75503540 93.48199463]
[112.23163605 107.45402527]
[119.05727386 120.81107330]
[125.88291168 134.16812134]
[132.70854187 147.52516174]
[139.53417969 160.88221741]
[146.35981750 174.23925781]
[156.99833679 177.02441406]
[164.16021729 185.07644653]
[165.62417603 195.52992249]
[161.14096069 204.84158325]
[167.32820129 218.50605774]
[173.51544189 232.17053223]
[179.70268250 245.83502197]
[197.87591553 257.07064819]
[195.35420227 277.50222778]
[202.49342346 290.69433594]
[209.63262939 303.88644409]
[216.77183533 317.07852173]
[231.65209961 321.68460083]
[238.70434570 335.16497803]
[234.22146606 349.32263184]
[241.36068726 362.51473999]
[248.49989319 375.70684814]
[255.63909912 388.89895630]
[262.77832031 402.09106445]
[269.91751099 415.28317261]
[289.01599121 414.90664673]
[305.64749146 424.13815308]
[315.34756470 440.40725708]
[315.55892944 459.26702881]
[306.30511475 475.60949707]
[314.65704346 488.06921387]
[323.00900269 500.52896118]
[331.36096191 512.98870850]
[339.71292114 525.44842529]
[348.06488037 537.90814209]
[363.57537842 538.35986328]
[375.83752441 547.86877441]
[380.13626099 562.77850342]
[374.81866455 577.35595703]
[361.92941284 585.99584961]
[346.42474365 585.37591553]
[334.26647949 575.73449707]
[330.12973022 560.77899170]
[335.60516357 546.26007080]
[327.25320435 533.80035400]
[318.90124512 521.34063721]
[310.54928589 508.88092041]
[302.19732666 496.42117310]
[293.84536743 483.96145630]
[282.88989258 486.54455566]
[271.64501953 485.62142944]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 106]
[7 105]
[8 104]
[9 103]
[10 102]
[11 101]
[14 98]
[15 97]
[16 96]
[17 95]
[22 93]
[23 92]
[24 91]
[25 90]
[27 86]
[28 85]
[29 84]
[30 83]
[31 82]
[32 81]
[34 79]
[35 78]
[36 77]
[37 76]
[38 75]
[42 74]
[44 73]
[45 72]
[46 71]
[47 70]
[48 69]
[50 68]
[51 67]
[52 66]
[53 65]
[54 64]
[56 62]
[57 61]
[111 130]
[112 129]
[113 128]
[114 127]
[115 126]
[116 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
