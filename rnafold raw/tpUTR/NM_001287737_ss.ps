%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 03:41:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGAACACUGAUGGACUCCAACCUUCCUUUUUUAAAAUUUUCUCCAGCCCUGGGAGCAAGUUGCAGUCUUUUUUUUUUUCUCUUGUGCUCAGUCACC\
) } def
/len { sequence length } bind def

/coor [
[149.76770020 234.36230469]
[156.51103210 220.51190186]
[149.57295227 207.21290588]
[142.63488770 193.91390991]
[135.69680786 180.61492920]
[119.62677002 180.35208130]
[105.77459717 172.01911926]
[97.92253876 157.78221130]
[98.26910400 141.43399048]
[106.81434631 127.38330078]
[99.45358276 114.31352234]
[87.51927948 107.02901459]
[87.47663879 93.04724121]
[80.11587524 79.97746277]
[72.75511169 66.90768433]
[65.39434814 53.83790207]
[58.03358459 40.76812363]
[44.51994324 32.54060364]
[45.01610184 17.65426445]
[37.65533829 4.58448315]
[30.29457664 -8.48529720]
[22.93381310 -21.55507851]
[14.95333195 -34.25593948]
[6.37158203 -46.55852509]
[-2.21016812 -58.86110687]
[-10.79191780 -71.16368866]
[-19.37366867 -83.46627808]
[-33.43971252 -78.04319000]
[-48.39493942 -76.14461517]
[-63.36987305 -77.88092041]
[-77.49388885 -83.15116882]
[-89.94583893 -91.64895630]
[-100.00178528 -102.88023376]
[-107.07707977 -116.19201660]
[-110.76037598 -130.81037903]
[-110.83753967 -145.88545227]
[-107.30407715 -160.54075623]
[-100.36541748 -173.92427063]
[-90.42497253 -185.25788879]
[-78.06066132 -193.88270569]
[-63.99133682 -199.29725647]
[-49.03496170 -201.18676758]
[-34.06108093 -199.44137573]
[-19.94025993 -194.16256714]
[-7.49346447 -185.65724182]
[2.55566669 -174.41987610]
[9.62288952 -161.10379028]
[13.29732513 -146.48320007]
[13.36534691 -131.40809631]
[9.82299900 -116.75492859]
[2.87623024 -103.37561798]
[-7.07108402 -92.04802704]
[1.51066589 -79.74544525]
[10.09241581 -67.44285583]
[18.67416573 -55.14027405]
[27.25591469 -42.83769226]
[30.83971977 -41.89628983]
[34.09746552 -39.05702209]
[36.08684158 -34.51791763]
[36.00359344 -28.91584206]
[43.36435699 -15.84606075]
[50.72512054 -2.77628016]
[58.08588409 10.29350090]
[71.07303619 17.58618164]
[71.10336304 33.40736008]
[78.46412659 46.47713852]
[85.82489014 59.54692078]
[93.18565369 72.61669922]
[100.54641724 85.68647766]
[112.48072052 92.97098541]
[112.52336121 106.95275879]
[119.88412476 120.02253723]
[133.96237183 119.45845032]
[146.83255005 125.02645111]
[155.97338867 135.57292175]
[159.62147522 148.97520447]
[157.11129761 162.56877136]
[148.99580383 173.67684937]
[155.93386841 186.97584534]
[162.87194824 200.27482605]
[169.81002808 213.57382202]
[185.02770996 215.96716309]
[195.79235840 226.73637390]
[198.12400818 241.60337830]
[191.33552551 254.83419800]
[198.27360535 268.13317871]
[205.21168518 281.43215942]
[220.36198425 285.93148804]
[227.81980896 299.86550903]
[223.16055298 314.96737671]
[209.14848328 322.27746582]
[194.09671021 317.45880127]
[186.93516541 303.37023926]
[191.91268921 288.37023926]
[184.97460938 275.07125854]
[178.03654480 261.77227783]
[163.30119324 259.77041626]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 81]
[3 80]
[4 79]
[5 78]
[10 72]
[11 71]
[13 69]
[14 68]
[15 67]
[16 66]
[17 65]
[19 63]
[20 62]
[21 61]
[22 60]
[23 56]
[24 55]
[25 54]
[26 53]
[27 52]
[85 96]
[86 95]
[87 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
