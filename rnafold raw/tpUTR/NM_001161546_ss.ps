%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 02:51:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCCGGGCCGAUCCCCAUGGAGUUGGAGCCCUUGGAUGCCUGGGAGGUUCUGGCAUCCAAGCCCCUACCCUCCUCUCCUUCCGUCG\
) } def
/len { sequence length } bind def

/coor [
[41.59454346 259.75170898]
[35.42906952 273.42602539]
[29.26359177 287.10034180]
[23.09811592 300.77465820]
[22.09970093 317.69918823]
[5.56020451 321.42495728]
[-2.59855604 306.56323242]
[9.42380047 294.60919189]
[15.58927631 280.93487549]
[21.75475311 267.26055908]
[27.92022896 253.58622742]
[33.59927750 239.70285034]
[38.78482437 225.62768555]
[43.97036743 211.55252075]
[34.73738480 202.57884216]
[29.63711739 190.70526123]
[29.48415756 177.73625183]
[34.33821869 165.65795898]
[43.48943329 156.33404541]
[55.56192017 151.21815491]
[68.72061157 151.12731934]
[74.88608551 137.45300293]
[81.05155945 123.77869415]
[87.21703339 110.10437775]
[83.74702454 98.84096527]
[88.78023529 88.18393707]
[99.68338776 83.70882416]
[106.32761383 70.26062012]
[112.97183228 56.81240845]
[119.61605835 43.36420059]
[110.20129395 23.16555214]
[118.00284576 2.56525183]
[137.96452332 -6.12459135]
[141.63330078 -20.66901016]
[145.30207825 -35.21342850]
[148.97084045 -49.75784683]
[152.63961792 -64.30226135]
[156.30839539 -78.84667969]
[159.97717285 -93.39109802]
[163.64593506 -107.93551636]
[167.31471252 -122.47993469]
[170.98348999 -137.02435303]
[170.04841614 -146.34100342]
[175.04690552 -152.01277161]
[179.22669983 -166.41865540]
[183.40647888 -180.82453918]
[178.96582031 -196.61100769]
[190.60910034 -208.15942383]
[206.35871887 -203.58976746]
[210.01280212 -187.60290527]
[197.81236267 -176.64474487]
[193.63256836 -162.23887634]
[189.45278931 -147.83299255]
[185.52790833 -133.35557556]
[181.85913086 -118.81116486]
[178.19035339 -104.26674652]
[174.52159119 -89.72232819]
[170.85281372 -75.17790985]
[167.18403625 -60.63349152]
[163.51525879 -46.08907318]
[159.84649658 -31.54465485]
[156.17771912 -17.00023651]
[152.50894165 -2.45581818]
[159.36297607 2.90520000]
[164.25160217 10.14529037]
[166.68186951 18.57221794]
[166.39710999 27.37234688]
[163.40382385 35.68920517]
[157.97322083 42.70682526]
[150.61663818 47.72981644]
[142.03753662 50.25221634]
[133.06427002 50.00842285]
[126.42004395 63.45663071]
[119.77581787 76.90483856]
[113.13159943 90.35305023]
[114.73366547 106.95856476]
[100.89134979 116.26985168]
[94.72587585 129.94416809]
[88.56040192 143.61848450]
[82.39492035 157.29280090]
[92.93630219 171.11140442]
[95.15084839 188.26184082]
[88.53264618 204.14337158]
[74.93344116 214.53967285]
[58.04552841 216.73806763]
[52.85998154 230.81323242]
[47.67443466 244.88839722]
[48.46144867 251.82038879]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[3 9]
[4 8]
[12 87]
[13 86]
[14 85]
[21 80]
[22 79]
[23 78]
[24 77]
[27 75]
[28 74]
[29 73]
[30 72]
[33 63]
[34 62]
[35 61]
[36 60]
[37 59]
[38 58]
[39 57]
[40 56]
[41 55]
[42 54]
[44 53]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
