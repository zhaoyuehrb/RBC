%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 09:52:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCCCAAAGGUAGCUAAGCAUAGGAUUGGGAGUGGAAACAGGCAGAAAUCAGGUCUUGGUGGUGUUUCUGUGUGCUUUUGUUUGUUAAUGUCUAAUCUACC\
) } def
/len { sequence length } bind def

/coor [
[0.93468100 315.72897339]
[-16.72233963 320.58758545]
[-34.88539124 318.50823975]
[-41.51116943 331.96554565]
[-48.13695145 345.42285156]
[-46.51468277 361.74154663]
[-59.99195862 371.08474731]
[-74.70451355 363.84091187]
[-75.51733398 347.46194458]
[-61.59425735 338.79705811]
[-54.96847534 325.33975220]
[-48.34269333 311.88244629]
[-57.18704605 303.89569092]
[-63.80158615 293.96871948]
[-67.77487946 282.70828247]
[-68.85715485 270.80450439]
[-66.97601318 258.98840332]
[-62.24121857 247.98709106]
[-54.93833542 238.47906494]
[-45.51149368 231.05223083]
[-34.53638077 226.16767883]
[-22.68510246 224.13102722]
[-10.68500900 225.07324219]
[0.72593808 228.94232178]
[9.31917095 216.64776611]
[17.91240501 204.35319519]
[26.50563812 192.05862427]
[35.09886932 179.76406860]
[43.69210434 167.46949768]
[52.28533554 155.17492676]
[60.87857056 142.88037109]
[61.82801437 128.01605225]
[76.07566833 121.13747406]
[84.66890717 108.84291077]
[82.33187866 98.96224976]
[85.80953217 89.42312622]
[93.95735931 83.36491394]
[104.09385681 82.78141022]
[113.42063141 71.03359222]
[122.74740601 59.28577042]
[132.07418823 47.53794861]
[141.40095520 35.79013062]
[150.72773743 24.04231071]
[160.05450439 12.29449081]
[169.38128662 0.54667127]
[178.70805359 -11.20114803]
[188.03483582 -22.94896889]
[197.36160278 -34.69678879]
[193.85894775 -54.31418610]
[205.51400757 -70.10911560]
[224.70022583 -72.47473907]
[232.91452026 -85.02565002]
[241.12881470 -97.57656097]
[249.34312439 -110.12746429]
[249.87008667 -128.45458984]
[265.68359375 -135.89331055]
[259.61038208 -150.17251587]
[263.12295532 -165.28680420]
[274.87066650 -175.42439270]
[290.33627319 -176.68721008]
[303.57293701 -168.58964539]
[309.49087524 -154.24540710]
[305.81454468 -139.17012024]
[293.95755005 -129.16055298]
[278.47915649 -128.06558228]
[280.99890137 -116.12538910]
[274.43832397 -105.36075592]
[261.89404297 -101.91316986]
[253.67973328 -89.36225891]
[245.46542358 -76.81134796]
[237.25112915 -64.26044464]
[242.09237671 -54.87853622]
[242.51441956 -44.24784088]
[238.36898804 -34.36095810]
[230.37043762 -27.10031700]
[219.97360229 -23.87985039]
[209.10943604 -25.37001228]
[199.78265381 -13.62219334]
[190.45587158 -1.87437356]
[181.12910461 9.87344646]
[171.80232239 21.62126541]
[162.47555542 33.36908722]
[153.14877319 45.11690521]
[143.82200623 56.86472702]
[134.49522400 68.61254120]
[125.16845703 80.36036682]
[115.84168243 92.10818481]
[114.19046783 110.57687378]
[96.96347046 117.43614197]
[88.37023926 129.73071289]
[86.80614471 145.47441101]
[73.17313385 151.47360229]
[64.57990265 163.76817322]
[55.98666763 176.06272888]
[47.39343643 188.35729980]
[38.80020142 200.65187073]
[30.20697021 212.94642639]
[21.61373711 225.24099731]
[13.02050400 237.53555298]
[23.60603523 252.67277527]
[27.76951218 270.63629150]
[24.93214035 288.82437134]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 12]
[4 11]
[5 10]
[24 99]
[25 98]
[26 97]
[27 96]
[28 95]
[29 94]
[30 93]
[31 92]
[33 90]
[34 89]
[38 87]
[39 86]
[40 85]
[41 84]
[42 83]
[43 82]
[44 81]
[45 80]
[46 79]
[47 78]
[48 77]
[51 71]
[52 70]
[53 69]
[54 68]
[56 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
