%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 10:56:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUAAGGUGACUAUAGCACCCUGGCUGUUUUCUUCUGGGGCUUAGUCGAAUCAGCUUUGUAAUGUUAUGGGACAAAAAUCAAUUAUCUCAUUAAUGUUUUAGUCUGCUGCACACAUCUAAAAAAGCAAAAUGGCAAUAAAAUCAUAACAGUGAAAAAGUUC\
) } def
/len { sequence length } bind def

/coor [
[-93.29650116 268.27908325]
[-99.47550201 276.99356079]
[-107.83068085 283.61642456]
[-117.68638611 287.62722778]
[-128.24986267 288.71609497]
[-138.67494202 286.80770874]
[-148.12992859 282.06631470]
[-155.86381531 274.88177490]
[-169.13525391 281.87243652]
[-182.40667725 288.86306763]
[-195.67810059 295.85372925]
[-208.94952393 302.84439087]
[-222.22096252 309.83505249]
[-228.39291382 316.63708496]
[-235.81820679 316.82974243]
[-249.22270203 323.56173706]
[-262.62719727 330.29373169]
[-268.92990112 336.97479248]
[-276.35751343 337.02343750]
[-289.89001465 343.49423218]
[-303.42254639 349.96502686]
[-309.85360718 356.52264404]
[-317.28079224 356.42721558]
[-330.93621826 362.63439941]
[-336.56314087 377.15939331]
[-350.50012207 383.25979614]
[-364.31280518 377.80590820]
[-373.40338135 391.45483398]
[-389.74948120 390.13674927]
[-396.53561401 375.20758057]
[-386.78082275 362.02517700]
[-370.51995850 364.15045166]
[-365.54699707 350.15744019]
[-351.78686523 343.66796875]
[-337.14340210 348.97894287]
[-323.48794556 342.77178955]
[-309.89334106 336.43252563]
[-296.36080933 329.96173096]
[-282.82830811 323.49093628]
[-269.35916138 316.88922119]
[-255.95468140 310.15722656]
[-242.55020142 303.42526245]
[-229.21160889 296.56359863]
[-215.94018555 289.57296753]
[-202.66876221 282.58230591]
[-189.39732361 275.59164429]
[-176.12590027 268.60101318]
[-162.85447693 261.61035156]
[-163.34877014 242.09065247]
[-153.89103699 224.91894531]
[-136.99546814 214.82325745]
[-117.23633575 214.62860107]
[-100.00961304 224.46687317]
[-87.47729492 216.22424316]
[-74.94497681 207.98161316]
[-62.41265869 199.73898315]
[-49.88034058 191.49633789]
[-37.34802628 183.25370789]
[-38.68798065 167.17309570]
[-31.70818520 152.52055359]
[-18.22230530 143.32289124]
[-1.84600866 142.16032410]
[12.97220898 149.44326782]
[25.34233284 140.95916748]
[37.71245956 132.47505188]
[50.08258438 123.99095917]
[62.45270920 115.50685120]
[74.82283020 107.02275085]
[87.19296265 98.53864288]
[95.79660797 86.25136566]
[99.53822327 71.72551727]
[103.27983856 57.19966888]
[107.02145386 42.67381668]
[102.97106171 27.37986755]
[113.63849640 16.98490715]
[117.38011169 2.45905757]
[121.12172699 -12.06679153]
[124.86334229 -26.59264183]
[128.60496521 -41.11849213]
[127.18558502 -47.65733337]
[129.03697205 -53.09595490]
[132.78355408 -56.12948608]
[137.08560181 -70.49932861]
[141.38764954 -84.86917114]
[145.68969727 -99.23901367]
[137.96931458 -113.02927399]
[142.34170532 -128.21669006]
[156.21282959 -135.79084778]
[171.35316467 -131.25811768]
[178.78024292 -117.30770874]
[174.08770752 -102.21613312]
[160.05953979 -94.93696594]
[155.75749207 -80.56712341]
[151.45544434 -66.19728088]
[147.15339661 -51.82743835]
[143.13081360 -37.37687302]
[139.38919067 -22.85102463]
[135.64758301 -8.32517433]
[131.90596008 6.20067453]
[128.16433716 20.72652435]
[132.48236084 34.98148727]
[121.54730988 46.41543579]
[117.80568695 60.94128418]
[114.06407166 75.46713257]
[110.32245636 89.99298096]
[120.72138977 100.80326843]
[135.38139343 97.62770844]
[150.04139709 94.45214844]
[152.37477112 79.45482635]
[159.97161865 66.31510162]
[171.80453491 56.81002426]
[186.27322388 52.22507095]
[201.42088318 53.18032837]
[215.19895935 59.54659653]
[225.74404907 70.46289062]
[231.63002014 84.45288086]
[232.06085205 99.62452698]
[226.97827148 113.92598724]
[217.06967163 125.42311096]
[203.67507935 132.56100464]
[188.60603333 134.37432861]
[173.90048218 130.61785889]
[161.54722595 121.79959106]
[153.21696472 109.11215973]
[138.55694580 112.28771973]
[123.89694214 115.46327209]
[138.28475952 119.70484161]
[150.03494263 129.02864075]
[158.00611877 141.73533630]
[161.28692627 156.37214661]
[159.50225830 171.26560974]
[152.85615540 184.71289062]
[142.10848999 195.17652893]
[128.48808289 201.46017456]
[113.55217743 202.84542847]
[99.00846100 199.17388916]
[86.51974487 190.86532593]
[77.51391602 178.86970520]
[73.02062988 164.55851746]
[73.55361176 149.56797791]
[79.05193329 135.61203003]
[88.88874817 124.28482819]
[95.67706299 110.90877533]
[83.30693817 119.39287567]
[70.93681335 127.87697601]
[58.56668854 136.36108398]
[46.19656372 144.84518433]
[33.82643509 153.32928467]
[21.45631218 161.81338501]
[23.26166916 175.71130371]
[18.91339684 188.96463013]
[9.31728268 198.99601746]
[-3.60628986 203.88069153]
[-17.30646896 202.71566772]
[-29.10539055 195.78602600]
[-41.63770676 204.02865601]
[-54.17002487 212.27130127]
[-66.70233917 220.51393127]
[-79.23465729 228.75656128]
[-91.76697540 236.99919128]
[-89.26969910 247.45115662]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 48]
[9 47]
[10 46]
[11 45]
[12 44]
[13 43]
[15 42]
[16 41]
[17 40]
[19 39]
[20 38]
[21 37]
[23 36]
[24 35]
[27 32]
[53 160]
[54 159]
[55 158]
[56 157]
[57 156]
[58 155]
[63 149]
[64 148]
[65 147]
[66 146]
[67 145]
[68 144]
[69 143]
[70 105]
[71 104]
[72 103]
[73 102]
[75 100]
[76 99]
[77 98]
[78 97]
[79 96]
[82 95]
[83 94]
[84 93]
[85 92]
[106 126]
[107 125]
[108 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
