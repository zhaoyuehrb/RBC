%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 18:28:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAACAACUUUGAUGAUGUAACUUGACCUUCCAGAGUUACAGAAAUUUUGUCCCUAUUUAAUGAAUAAAUUGUAUGUAUUUUUCUCUAUA\
) } def
/len { sequence length } bind def

/coor [
[153.41726685 189.29078674]
[150.86589050 174.48522949]
[150.35438538 159.47016907]
[151.89224243 144.52531433]
[155.45085144 129.92907715]
[141.49667358 124.42626953]
[127.54250336 118.92345428]
[113.58832550 113.42064667]
[100.25690460 119.09686279]
[86.77761841 113.78132629]
[80.90885925 100.53353119]
[66.95468140 95.03072357]
[58.23790741 101.79773712]
[47.55209351 104.20329285]
[36.93642044 101.85964966]
[28.38650131 95.27865601]
[23.47928047 85.76190186]
[23.08235741 75.14379883]
[9.76408005 68.24282837]
[-3.55419827 61.34185028]
[-16.87247658 54.44087219]
[-30.19075394 47.53989792]
[-43.50903320 40.63892365]
[-56.82731247 33.73794556]
[-70.14559174 26.83697128]
[-83.47048950 34.61197281]
[-98.88259125 33.92591095]
[-111.46395111 24.99769974]
[-117.19989777 10.67630291]
[-114.26012421 -4.46837473]
[-103.58268738 -15.60372162]
[-88.57472992 -19.17648888]
[-74.02523041 -14.04662037]
[-64.57687378 -1.85103738]
[-63.24461365 13.51869297]
[-49.92633438 20.41966820]
[-36.60805893 27.32064438]
[-23.28977966 34.22161865]
[-9.97150135 41.12259674]
[3.34677720 48.02357101]
[16.66505623 54.92454529]
[29.98333359 61.82552338]
[47.80848694 54.44004822]
[65.72585297 62.36310577]
[72.45749664 81.07654572]
[86.41167450 86.57935333]
[99.74309540 80.90313721]
[113.22238159 86.21867371]
[119.09114075 99.46646881]
[133.04531860 104.96927643]
[146.99949646 110.47209167]
[160.95367432 115.97490692]
[168.31561279 102.87851715]
[177.39234924 90.90660095]
[188.01475525 80.28218842]
[199.98497009 71.20320892]
[213.07997131 63.83879089]
[227.05581665 58.32614136]
[241.65216064 54.76794434]
[256.59704590 53.23049545]
[271.61209106 53.74243546]
[286.41757202 56.29422379]
[300.73767090 60.83832550]
[314.30560303 67.29008484]
[326.86859131 75.52931213]
[338.19262695 85.40251160]
[348.06671143 96.72575378]
[356.30694580 109.28809357]
[362.75979614 122.85549927]
[367.30505371 137.17521667]
[369.85803223 151.98049927]
[370.37115479 166.99549866]
[368.83489990 181.94052124]
[365.27789307 196.53713989]
[359.76635742 210.51344299]
[352.40298462 223.60902405]
[343.32495117 235.57997131]
[332.70138550 246.20323181]
[320.73019409 255.28091431]
[307.63439941 262.64392090]
[293.65795898 268.15505981]
[279.06124878 271.71166992]
[264.11618042 273.24749756]
[249.10118103 272.73391724]
[234.29597473 270.18054199]
[219.97637939 265.63488770]
[206.40916443 259.18167114]
[193.84704590 250.94107056]
[182.52409363 241.06665039]
[172.65121460 229.74234009]
[164.41233826 217.17910767]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 52]
[6 51]
[7 50]
[8 49]
[11 46]
[12 45]
[18 42]
[19 41]
[20 40]
[21 39]
[22 38]
[23 37]
[24 36]
[25 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
