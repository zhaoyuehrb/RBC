%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 22:29:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGGCGGGGGCUCGGGGCUCGGCCUCCUACCUGCCCCCAACCCACCCUCCACCCCGUCCCCCACGGUGGGCACUGCCCAGCACCGCAUGCCACGUGUCCGGAAUAAAUUCUUUUUGAUUGUUGGAA\
) } def
/len { sequence length } bind def

/coor [
[141.09756470 181.28616333]
[132.46044922 169.02238464]
[123.82332611 156.75862122]
[115.18620300 144.49484253]
[106.54907990 132.23107910]
[97.91195679 119.96730042]
[83.40731049 116.14431763]
[69.84747314 122.55764008]
[56.28763199 128.97096252]
[42.72779083 135.38429260]
[29.16795349 141.79762268]
[15.60811329 148.21095276]
[9.99046040 167.39729309]
[-7.58101749 176.28434753]
[-25.79915428 169.64509583]
[-38.85046005 177.03855896]
[-51.81005096 184.59164429]
[-64.67597961 192.30317688]
[-77.54190826 200.01472473]
[-88.01914978 213.34378052]
[-103.72769165 206.96585083]
[-101.94757080 190.10562134]
[-85.25344849 187.14878845]
[-72.38751984 179.43725586]
[-59.52159500 171.72570801]
[-55.35798264 165.52316284]
[-46.24393082 163.98725891]
[-33.19262695 156.59378052]
[-33.20707321 146.14788818]
[-28.79923058 136.58786011]
[-20.72215462 129.71011353]
[-10.42513657 126.83847046]
[0.20611688 128.56970215]
[9.19478703 134.65110779]
[22.75462723 128.23777771]
[36.31446457 121.82445526]
[49.87430573 115.41113281]
[63.43414307 108.99780273]
[76.99398041 102.58448029]
[62.01939392 101.71176910]
[47.44892502 105.27567291]
[32.97694016 101.33084869]
[22.23048973 90.86595917]
[17.90291023 76.50378418]
[21.07880592 61.84385300]
[30.96221161 50.56031418]
[45.07609558 45.48111343]
[59.88315582 47.87923050]
[71.67236328 57.15363693]
[77.48891449 70.97909546]
[87.11023712 82.48693085]
[84.18388367 67.77515411]
[81.25753021 53.06336975]
[78.33117676 38.35159302]
[63.63365555 34.08058167]
[52.61252975 23.46016121]
[47.80036926 8.93082047]
[50.30297852 -6.16870022]
[59.54526901 -18.36864471]
[73.40343475 -24.86555099]
[88.69297028 -24.16648293]
[101.90045166 -16.43207550]
[109.99089813 -3.43964386]
[111.10517883 11.82524967]
[104.98724365 25.85484314]
[93.04295349 35.42523575]
[95.96930695 50.13701630]
[98.89566040 64.84879303]
[101.82202148 79.56057739]
[116.06494141 84.26580048]
[127.17920685 74.19241333]
[138.29347229 64.11903381]
[149.40774536 54.04564667]
[153.72503662 45.87338638]
[160.92057800 43.86554718]
[172.27871704 34.06795502]
[183.63684082 24.27036095]
[182.20932007 8.81908894]
[190.16539001 -4.50309944]
[204.44577026 -10.57355022]
[219.55935669 -7.05805254]
[229.69470215 4.69161415]
[230.95451355 20.15746307]
[222.85440063 33.39255905]
[208.50901794 39.30773926]
[193.43443298 35.62849426]
[182.07630920 45.42608643]
[170.71817017 55.22367859]
[159.48112488 65.15991211]
[148.36685181 75.23329926]
[137.25259399 85.30668640]
[126.13832855 95.38006592]
[124.27113342 100.67616272]
[121.43457794 105.03335571]
[117.92792511 108.29686737]
[114.06933594 110.39309692]
[110.17572784 111.33017731]
[118.81285095 123.59394836]
[127.44997406 135.85772705]
[136.08709717 148.12149048]
[144.72422791 160.38526917]
[153.36134338 172.64903259]
[167.29695129 166.92655945]
[182.15660095 164.44903564]
[197.19497681 165.34072876]
[211.65774536 169.55691528]
[224.81944275 176.88612366]
[236.01991272 186.96070862]
[244.69732666 199.27536011]
[250.41642761 213.21234131]
[252.89035034 228.07260132]
[251.99501038 243.11076355]
[247.77531433 257.57250977]
[240.44291687 270.73242188]
[230.36561584 281.93045044]
[218.04887390 290.60488892]
[204.11050415 296.32058716]
[189.24963379 298.79092407]
[174.21170044 297.89193726]
[159.75099182 293.66873169]
[146.59283447 286.33316040]
[135.39726257 276.25314331]
[126.72581482 263.93429565]
[121.01346588 249.99455261]
[118.54673767 235.13308716]
[119.44936371 220.09536743]
[123.67607117 205.63566589]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 102]
[2 101]
[3 100]
[4 99]
[5 98]
[6 97]
[7 39]
[8 38]
[9 37]
[10 36]
[11 35]
[12 34]
[15 28]
[16 27]
[17 25]
[18 24]
[19 23]
[51 69]
[52 68]
[53 67]
[54 66]
[70 92]
[71 91]
[72 90]
[73 89]
[75 88]
[76 87]
[77 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
