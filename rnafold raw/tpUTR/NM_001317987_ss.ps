%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 08:42:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCACCUGGCCCAGAAGCCAGGCCAGCAGCCCGAGACCAUCCUCCUUGCACCUUUGUGCCAAGAAAGGCCUAUGAAAAGUAAACACUGACUUUUGAAAGCAA\
) } def
/len { sequence length } bind def

/coor [
[102.65074921 141.10162354]
[95.40491486 140.92988586]
[88.30137634 139.49066162]
[81.56011200 136.82853699]
[75.38987732 133.02592468]
[64.38669586 143.22053528]
[53.38351059 153.41513062]
[42.38032532 163.60974121]
[31.37714195 173.80435181]
[20.37395668 183.99894714]
[20.02207184 199.79931641]
[8.54311657 210.66252136]
[-7.25265121 210.14360046]
[-17.99388123 198.55043030]
[-17.30799294 182.76103210]
[-5.60191107 172.14297485]
[10.17935371 172.99575806]
[21.18253708 162.80116272]
[32.18572235 152.60655212]
[43.18890762 142.41195679]
[54.19209290 132.21734619]
[65.19527435 122.02275085]
[60.52928925 111.76576996]
[58.81777573 100.62809753]
[60.18883896 89.44341278]
[64.53985596 79.04890442]
[53.23089218 69.19460297]
[41.92192841 59.34029388]
[30.61296463 49.48598862]
[19.60773468 50.86687851]
[9.90131569 45.97424698]
[4.68308878 36.69247437]
[5.51224947 26.29915619]
[-5.17492104 15.77374077]
[-15.86209106 5.24832439]
[-31.66202164 5.61944485]
[-43.03884888 -5.35066700]
[-43.24290085 -21.15363884]
[-32.15312195 -32.41384888]
[-16.34887505 -32.45080948]
[-5.20654392 -21.24259949]
[-5.33667469 -5.43884611]
[5.35049582 5.08657026]
[16.03766632 15.61198711]
[34.98985672 18.89581871]
[40.46726990 38.17702484]
[51.77623367 48.03133011]
[63.08519745 57.88563538]
[74.39415741 67.73994446]
[92.50455475 59.50075912]
[112.36411285 60.71261215]
[119.39720917 47.46362686]
[126.43030548 34.21464157]
[133.46339417 20.96565819]
[140.49649048 7.71667480]
[140.13293457 -8.10035324]
[152.93449402 -15.71410370]
[151.81063843 -32.07469559]
[165.56657410 -41.00252914]
[180.05137634 -33.31341171]
[180.36431885 -16.91724968]
[166.18347168 -8.68100929]
[167.05009460 6.18836355]
[153.74548340 14.74977016]
[146.71238708 27.99875450]
[139.67929077 41.24773788]
[132.64619446 54.49672318]
[125.61309814 67.74570465]
[139.09280396 87.03379822]
[139.81175232 110.55435181]
[153.36853027 116.97413635]
[169.15238953 115.88755798]
[177.34365845 128.32751465]
[193.12750244 127.24092865]
[201.31877136 139.68087769]
[214.87554932 146.10066223]
[228.43234253 152.52046204]
[241.98912048 158.94024658]
[255.54589844 165.36003113]
[269.10269165 171.77981567]
[282.65350342 164.21972656]
[298.05599976 166.10188293]
[309.38760376 176.70254517]
[312.29110718 191.94555664]
[305.65002441 205.96966553]
[292.01797485 213.38230896]
[276.63681030 211.33317566]
[265.42083740 200.61021423]
[262.68289185 185.33660889]
[249.12611389 178.91680908]
[235.56933594 172.49702454]
[222.01254272 166.07723999]
[208.45576477 159.65745544]
[194.89898682 153.23765564]
[180.08480835 154.78343201]
[170.92387390 141.88429260]
[156.10969543 143.43005371]
[146.94874573 130.53091431]
[133.39196777 124.11112976]
[128.64845276 129.59115601]
[123.01777649 134.15483093]
[116.67431641 137.66082764]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 22]
[6 21]
[7 20]
[8 19]
[9 18]
[10 17]
[26 49]
[27 48]
[28 47]
[29 46]
[33 44]
[34 43]
[35 42]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[57 62]
[70 99]
[71 98]
[73 96]
[75 94]
[76 93]
[77 92]
[78 91]
[79 90]
[80 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
