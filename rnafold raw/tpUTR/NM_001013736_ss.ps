%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 12:22:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUUUUGAAUUUACUAGUUAAUUGGGUAUUUCUUGCUCUCAUUUUAAACAUCAGUCAGAAUUUAUGAUGACUGGCCCCAGGAAUGUACAACGUUGGCAACAUCUGUAAAUUCAAUACCUAAUGUUUAUAAAUAUUUCUUAAUGACC\
) } def
/len { sequence length } bind def

/coor [
[196.98283386 328.37387085]
[205.99334717 316.32369995]
[217.12173462 306.19671631]
[209.30448914 293.39474487]
[201.48724365 280.59274292]
[188.25091553 273.76275635]
[187.66247559 257.95251465]
[179.84523010 245.15051270]
[172.02798462 232.34854126]
[164.21073914 219.54655457]
[156.39349365 206.74458313]
[148.57624817 193.94259644]
[140.75900269 181.14062500]
[132.94175720 168.33863831]
[125.12451935 155.53665161]
[117.30727386 142.73468018]
[107.37751770 146.56814575]
[96.60208893 148.07153320]
[85.53256226 147.06042480]
[74.75991058 143.48190308]
[64.88302612 137.42266846]
[56.47556686 129.10972595]
[50.05305481 118.90299225]
[46.04206085 107.28034973]
[44.75328445 94.81548309]
[46.36016083 82.14961243]
[31.60041046 84.82352448]
[16.84066010 87.49742889]
[2.08091021 90.17133331]
[-12.67883968 92.84524536]
[-22.96398354 105.15765381]
[-38.99897003 104.64903259]
[-48.48313522 91.70954895]
[-44.14103317 76.26526642]
[-29.30355835 70.16372681]
[-15.35274792 78.08549500]
[-0.59299767 75.41159058]
[14.16675186 72.73767853]
[28.92650223 70.06377411]
[43.68625259 67.38986206]
[47.18244171 60.75460434]
[32.94760513 56.02497864]
[18.71276474 51.29535294]
[4.47792578 46.56572723]
[-10.38587952 44.54897308]
[-19.67203903 32.76902390]
[-18.16254997 17.84516716]
[-6.70561123 8.16329956]
[8.26098633 9.16377449]
[18.32671928 20.28273582]
[30.27608681 29.34985352]
[42.22545624 38.41696930]
[54.17482376 47.48408890]
[57.67101288 40.84883118]
[51.53146362 27.16285324]
[45.39191437 13.47687721]
[39.25236511 -0.20909847]
[33.11281586 -13.89507484]
[26.97326851 -27.58105087]
[11.68610573 -29.06370163]
[-0.80230409 -38.00434875]
[-7.13264322 -51.99800491]
[-5.60208130 -67.28044128]
[3.37766743 -79.74076843]
[17.39109612 -86.02721405]
[32.66866302 -84.44875336]
[45.10078049 -75.42999268]
[51.34326553 -61.39693069]
[49.71693039 -46.12438583]
[40.65924454 -33.72060013]
[46.79879379 -20.03462410]
[52.93834305 -6.34864712]
[59.07789230 7.33732891]
[65.21743774 21.02330399]
[71.35698700 34.70928192]
[86.32698822 35.65745163]
[94.14423370 22.85547066]
[101.96147919 10.05349064]
[86.97133636 10.59725952]
[77.03707886 -0.64153457]
[79.41692352 -15.45154285]
[92.37209320 -23.01219940]
[106.43721771 -17.79949760]
[111.33602142 -3.62256122]
[120.45698547 -15.53087902]
[129.57795715 -27.43919563]
[138.69891357 -39.34751511]
[147.81987000 -51.25583267]
[152.65097046 -67.50688934]
[169.60430908 -67.36333466]
[174.15951538 -51.03279877]
[159.72819519 -42.13486862]
[150.60723877 -30.22655106]
[141.48626709 -18.31823349]
[132.36531067 -6.40991545]
[123.24433899 5.49840212]
[114.76345825 17.87073517]
[106.94621277 30.67271614]
[99.12896729 43.47469711]
[115.80697632 47.08156967]
[130.26792908 55.37015915]
[141.27348328 67.35623932]
[147.96589661 81.75360107]
[149.93237305 97.10951996]
[147.22416687 111.95036316]
[140.33009338 124.92285156]
[130.10925293 134.91743469]
[137.92649841 147.71942139]
[145.74374390 160.52139282]
[153.56098938 173.32337952]
[161.37823486 186.12535095]
[169.19548035 198.92733765]
[177.01272583 211.72930908]
[184.82997131 224.53129578]
[192.64720154 237.33328247]
[200.46444702 250.13525391]
[214.25991821 257.88092041]
[214.28921509 272.77551270]
[222.10646057 285.57748413]
[229.92370605 298.37948608]
[244.01583862 293.10610962]
[258.85134888 290.59524536]
[273.89392090 290.93768311]
[288.59979248 294.12100220]
[302.43737793 300.03015137]
[314.90640259 308.45153809]
[325.55618286 319.08068848]
[334.00167847 331.53338623]
[339.93762207 345.35949707]
[343.14944458 360.05917358]
[343.52099609 375.10107422]
[341.03887939 389.94140625]
[335.79284668 404.04373169]
[327.97247314 416.89822388]
[317.86047363 428.04025269]
[305.82244873 437.06698608]
[292.29351807 443.65216064]
[277.76272583 447.55767822]
[262.75540161 448.64239502]
[247.81402588 446.86709595]
[233.47872925 442.29592896]
[220.26770020 435.09417725]
[208.65852356 425.52215576]
[199.07087708 413.92590332]
[191.85133362 400.72457886]
[187.26086426 386.39544678]
[185.46543884 371.45648193]
[186.52993774 356.44769287]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 120]
[4 119]
[5 118]
[7 116]
[8 115]
[9 114]
[10 113]
[11 112]
[12 111]
[13 110]
[14 109]
[15 108]
[16 107]
[26 40]
[27 39]
[28 38]
[29 37]
[30 36]
[54 75]
[55 74]
[56 73]
[57 72]
[58 71]
[59 70]
[76 99]
[77 98]
[78 97]
[84 96]
[85 95]
[86 94]
[87 93]
[88 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
