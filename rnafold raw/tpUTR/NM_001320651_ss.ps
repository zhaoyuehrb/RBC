%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 04:21:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAUGCCAUUUUUACCUUAUGUCUGCUAGAAAGUGUUGUAGUUGAUUGACCAAACCAGUUCAUAAGGGGAAUUUUUUUUAAAAAACAACAAAAAAAAAAACAUACAAAGAUGGGUUUCUGAAUAAAAUUUGUAGUGAUAACAGUA\
) } def
/len { sequence length } bind def

/coor [
[124.39220428 295.47860718]
[125.82924652 280.51748657]
[129.53337097 265.95111084]
[135.41772461 252.12088013]
[143.34439087 239.35105896]
[153.12756348 227.94096375]
[164.53787231 218.15808105]
[156.62536621 205.41476440]
[148.71286011 192.67143250]
[140.80035400 179.92811584]
[132.88784790 167.18479919]
[124.97533417 154.44148254]
[117.06282806 141.69815063]
[109.15031433 128.95483398]
[82.36180878 124.71852112]
[69.64334106 100.76416779]
[55.01942062 97.42635345]
[40.39550018 94.08853912]
[25.77158165 90.75072479]
[11.14766312 87.41291046]
[-3.47625542 84.07509613]
[-18.10017395 80.73728180]
[-33.06935501 79.77622986]
[-48.00004196 81.21657562]
[-60.99348450 90.24325562]
[-74.40490723 83.76381683]
[-89.33559418 85.20416260]
[-104.26628113 86.64450836]
[-119.19696808 88.08485413]
[-132.19041443 97.11153412]
[-145.60183716 90.63210297]
[-160.53251648 92.07244873]
[-173.56005859 102.03311920]
[-188.59399414 95.48232269]
[-190.16868591 79.15895844]
[-176.66424561 69.85509491]
[-161.97285461 77.14176178]
[-147.04217529 75.70141602]
[-135.11666870 66.77775574]
[-120.63731384 73.15416718]
[-105.70662689 71.71382141]
[-90.77593994 70.27347565]
[-75.84525299 68.83312988]
[-63.91975021 59.90947342]
[-49.44038773 66.28588867]
[-34.50970078 64.84554291]
[-47.77519226 57.84363174]
[-57.69371033 46.59094238]
[-62.97490311 32.55139160]
[-62.93171692 17.55145454]
[-57.56977081 3.54254532]
[-47.58662415 -7.65284586]
[-34.28103256 -14.57825565]
[-19.38399315 -16.33272362]
[-4.83352804 -12.68800259]
[7.47741699 -4.11825180]
[15.94725132 8.26164818]
[19.47409248 22.84113312]
[17.59911537 37.72348785]
[10.56624603 50.97259140]
[-0.70957494 60.86480331]
[-14.76235962 66.11336517]
[-0.13844140 69.45117950]
[14.48547745 72.78899384]
[29.10939598 76.12680817]
[43.73331451 79.46462250]
[58.35723495 82.80243683]
[72.98115540 86.14025116]
[77.78704834 79.29503632]
[84.27806854 74.02055359]
[91.96179199 70.71693420]
[100.25531769 69.63479614]
[108.52947235 70.85623169]
[116.16784668 57.94673538]
[123.80622864 45.03723907]
[131.44461060 32.12773895]
[139.08299255 19.21824265]
[146.72137451 6.30874348]
[154.35975647 -6.60075474]
[161.99813843 -19.51025200]
[153.90235901 -32.49936295]
[152.78181458 -47.76379776]
[158.89398193 -61.79590225]
[170.83435059 -71.37120056]
[185.85910034 -74.28935242]
[200.51564026 -69.87979889]
[211.43603516 -59.15581894]
[216.11082458 -44.58170319]
[213.46580505 -29.50647545]
[204.10876465 -17.39431763]
[190.18988037 -11.02851105]
[174.90762329 -11.87187290]
[167.26925659 1.03762567]
[159.63087463 13.94712353]
[151.99249268 26.85662270]
[144.35411072 39.76612091]
[136.71572876 52.67561722]
[129.07734680 65.58511353]
[121.43896484 78.49461365]
[125.18381500 83.03278351]
[127.98318481 88.20796204]
[129.73197937 93.82584381]
[130.36454773 99.67552185]
[129.85713196 105.53738403]
[128.22879028 111.19135284]
[125.54064941 116.42516327]
[121.89363861 121.04232788]
[129.80615234 133.78564453]
[137.71865845 146.52896118]
[145.63116455 159.27229309]
[153.54367065 172.01560974]
[161.45617676 184.75892639]
[169.36868286 197.50224304]
[177.28120422 210.24557495]
[191.10974121 204.35728455]
[205.67509460 200.64904785]
[220.63580322 199.20776367]
[235.64120483 200.06723022]
[250.33950806 203.20729065]
[264.38619995 208.55435181]
[277.45199585 215.98306274]
[289.23059082 225.31927490]
[299.44592285 236.34414673]
[307.85845947 248.79922485]
[314.27108765 262.39257812]
[318.53341675 276.80551147]
[320.54556274 291.70019531]
[320.26034546 306.72747803]
[317.68447876 321.53509521]
[312.87829590 335.77590942]
[305.95449829 349.11611938]
[297.07540894 361.24304199]
[286.44909668 371.87234497]
[274.32470703 380.75488281]
[260.98645020 387.68246460]
[246.74697876 392.49267578]
[231.94010925 395.07272339]
[216.91290283 395.36218262]
[202.01765442 393.35427856]
[187.60350037 389.09600830]
[174.00834656 382.68725586]
[161.55088806 374.27819824]
[150.52311707 364.06600952]
[141.18357849 352.29003906]
[133.75117493 339.22637939]
[128.40013123 325.18118286]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 114]
[8 113]
[9 112]
[10 111]
[11 110]
[12 109]
[13 108]
[14 107]
[16 68]
[17 67]
[18 66]
[19 65]
[20 64]
[21 63]
[22 62]
[23 46]
[24 45]
[26 43]
[27 42]
[28 41]
[29 40]
[31 38]
[32 37]
[73 99]
[74 98]
[75 97]
[76 96]
[77 95]
[78 94]
[79 93]
[80 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
