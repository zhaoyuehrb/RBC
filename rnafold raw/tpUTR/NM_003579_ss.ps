%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 14:21:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACCAGCUGGUCUGGGUGUAGCUCUUAGAGGAAGGAGAUAGGGAAAAGGGGCUCCUUGCUCCACAGGGCCCUGUUGAAUUUUGUUCUCUGGGAGAAAAUCAUCAAGAAGGGCUGCAUGAUGUUUGCCCAAAAUUUAUUUUAUAAGAAAAACUUUUUUGGUUAAAAAAAAGAAUAAAGGUAUGAAAGGGUU\
) } def
/len { sequence length } bind def

/coor [
[260.25320435 215.79856873]
[243.75538635 208.39555359]
[231.32687378 195.21449280]
[224.88136292 178.24710083]
[225.42573547 160.07098389]
[211.56753540 154.33073425]
[197.70935059 148.59048462]
[183.85115051 142.85023499]
[169.99296570 137.10997009]
[156.37327576 143.02940369]
[142.23731995 137.40539551]
[136.12081909 123.07967377]
[122.26263428 117.33942413]
[108.40443420 111.59917450]
[94.51846313 113.23359680]
[85.85530853 102.25901794]
[71.99711609 96.51876831]
[58.13892365 90.77851868]
[44.28073120 85.03826141]
[29.12560272 94.96788788]
[11.20004845 93.83493805]
[-2.34531546 82.28005981]
[-6.22038221 65.06354523]
[-20.25897026 59.77979660]
[-34.29756165 54.49604416]
[-48.33614731 49.21229553]
[-62.37473679 43.92854309]
[-76.41333008 38.64479446]
[-90.45191193 33.36104202]
[-104.49050140 28.07729149]
[-118.52909088 22.79354095]
[-132.56768799 17.50979042]
[-146.60627747 12.22603893]
[-160.68762207 7.05731678]
[-174.81077576 2.00396895]
[-188.93394470 -3.04937887]
[-203.05709839 -8.10272694]
[-217.30001831 -12.80795288]
[-231.65412903 -17.16222382]
[-246.00823975 -21.51649284]
[-260.36233521 -25.87076378]
[-274.71643066 -30.22503281]
[-289.07055664 -34.57930374]
[-303.42465210 -38.93357468]
[-315.95214844 -26.62852287]
[-332.89755249 -22.37530136]
[-349.58035278 -27.25588989]
[-361.43945312 -39.84214020]
[-365.28005981 -56.61214447]
[-379.76895142 -60.49443054]
[-394.25784302 -64.37671661]
[-408.74670410 -68.25900269]
[-423.23559570 -72.14128876]
[-437.79232788 -65.39727783]
[-452.07592773 -72.70192719]
[-455.12927246 -88.45174408]
[-444.61010742 -100.56480408]
[-428.58779907 -99.74901581]
[-419.35333252 -86.63017273]
[-404.86444092 -82.74788666]
[-390.37554932 -78.86560059]
[-375.88665771 -74.98332214]
[-361.39776611 -71.10103607]
[-353.46478271 -80.95645905]
[-342.35006714 -87.09727478]
[-329.69131470 -88.57820129]
[-317.36923218 -85.14357758]
[-307.22790527 -77.27066803]
[-300.79901123 -66.10371399]
[-299.07037354 -53.28767776]
[-284.71627808 -48.93340683]
[-270.36218262 -44.57913971]
[-256.00805664 -40.22486877]
[-241.65396118 -35.87059784]
[-227.29985046 -31.51632881]
[-212.94575500 -27.16205788]
[-209.66911316 -28.50489807]
[-205.57658386 -28.31760216]
[-201.39894104 -26.23291588]
[-198.00375366 -22.22588730]
[-183.88058472 -17.17254066]
[-169.75743103 -12.11919212]
[-155.63426208 -7.06584406]
[-148.26539612 -7.77371645]
[-141.32252502 -1.81254995]
[-127.28392792 3.47120070]
[-113.24534607 8.75495148]
[-99.20675659 14.03870201]
[-85.16816711 19.32245255]
[-71.12957764 24.60620308]
[-57.09098816 29.88995361]
[-43.05239868 35.17370605]
[-29.01380920 40.45745468]
[-14.97522068 45.74120712]
[-0.93663132 51.02495575]
[8.11408234 42.90713501]
[19.82847786 39.39299393]
[31.99595070 41.20988083]
[42.29297256 48.07300186]
[48.72679901 58.72805023]
[50.02098465 71.18006897]
[63.87917709 76.92032623]
[77.73736572 82.66057587]
[91.59556580 88.40082550]
[105.48153687 86.76640320]
[114.14469147 97.74098206]
[128.00288391 103.48123169]
[141.86106873 109.22148132]
[156.31590271 103.41669464]
[170.28831482 109.43553925]
[175.73321533 123.25178528]
[189.59140015 128.99203491]
[203.44960022 134.73228455]
[217.30780029 140.47253418]
[231.16598511 146.21278381]
[238.91058350 136.82493591]
[248.81056213 129.77156067]
[260.18600464 125.52790070]
[272.25802612 124.37656403]
[284.20211792 126.38867188]
[295.20443726 131.41955566]
[304.51727295 139.11911011]
[311.50985718 148.95614624]
[315.71112061 160.25503540]
[316.84136963 172.24214172]
[314.83087158 184.09875488]
[328.28396606 190.73307800]
[341.73706055 197.36741638]
[355.19015503 204.00173950]
[349.55502319 190.10046387]
[353.04412842 175.51190186]
[364.35916138 165.66456604]
[379.28970337 164.22268677]
[392.27999878 171.72282410]
[398.49627686 185.37413025]
[395.62542725 200.09683228]
[384.73568726 210.41253662]
[369.87976074 212.48278809]
[382.35180664 220.81634521]
[394.82385254 229.14990234]
[407.29589844 237.48344421]
[419.76794434 245.81700134]
[432.23995972 254.15055847]
[444.71200562 262.48410034]
[457.50381470 252.99879456]
[472.74374390 248.47192383]
[488.58587646 249.43267822]
[503.11782837 255.74668884]
[514.59179688 266.63449097]
[521.63452148 280.76773071]
[523.41180420 296.43115234]
[519.72717285 311.73086548]
[532.33392334 319.85925293]
[544.94067383 327.98760986]
[557.54736328 336.11599731]
[570.15411377 344.24435425]
[582.76080322 352.37274170]
[595.36755371 360.50109863]
[610.76080322 356.92007446]
[624.13330078 365.34338379]
[627.55139160 380.77362061]
[618.98718262 394.05630493]
[603.52166748 397.31106567]
[590.33026123 388.60690308]
[587.23919678 373.10781860]
[574.63244629 364.97946167]
[562.02575684 356.85107422]
[549.41900635 348.72271729]
[536.81225586 340.59432983]
[524.20556641 332.46597290]
[511.59881592 324.33758545]
[500.57833862 333.23654175]
[487.32742310 338.30242920]
[473.13815308 339.02703857]
[459.39865112 335.32626343]
[447.45703125 327.54943848]
[438.48928833 316.44659424]
[433.38339233 303.09606934]
[432.65148926 288.79974365]
[436.37847900 274.95614624]
[423.90643311 266.62258911]
[411.43438721 258.28903198]
[398.96234131 249.95549011]
[386.49029541 241.62193298]
[374.01824951 233.28839111]
[361.54620361 224.95483398]
[348.55581665 217.45483398]
[335.10272217 210.82049561]
[321.64962769 204.18617249]
[308.19653320 197.55184937]
[295.12799072 209.90214539]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 115]
[6 114]
[7 113]
[8 112]
[9 111]
[12 108]
[13 107]
[14 106]
[16 104]
[17 103]
[18 102]
[19 101]
[23 95]
[24 94]
[25 93]
[26 92]
[27 91]
[28 90]
[29 89]
[30 88]
[31 87]
[32 86]
[33 85]
[34 83]
[35 82]
[36 81]
[37 80]
[38 76]
[39 75]
[40 74]
[41 73]
[42 72]
[43 71]
[44 70]
[49 63]
[50 62]
[51 61]
[52 60]
[53 59]
[126 190]
[127 189]
[128 188]
[129 187]
[138 186]
[139 185]
[140 184]
[141 183]
[142 182]
[143 181]
[144 180]
[152 171]
[153 170]
[154 169]
[155 168]
[156 167]
[157 166]
[158 165]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
