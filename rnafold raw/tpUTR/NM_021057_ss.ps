%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 22:47:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUGGUUCAUCAUGGAAAUGAUUCUCAUUGACUAAUGCAUCAUCUCACACUUUCAUGAGUUCUUCCAUUUCAAAGACUCACUUCUAUAACCACCACAAGUUGAAUCAAAAUUUCCAAAUGUUUUC\
) } def
/len { sequence length } bind def

/coor [
[190.09100342 392.72412109]
[193.41664124 378.01391602]
[200.29681396 364.59326172]
[210.29904175 353.30581665]
[222.79455566 344.86111450]
[217.74121094 330.73794556]
[212.68786621 316.61480713]
[207.63452148 302.49163818]
[202.58117676 288.36846924]
[197.52781677 274.24530029]
[192.47447205 260.12216187]
[180.90177917 250.74548340]
[183.53764343 235.14538574]
[176.62956238 221.83079529]
[167.99244690 209.56703186]
[159.35531616 197.30325317]
[150.71820068 185.03947449]
[142.08106995 172.77571106]
[133.44395447 160.51193237]
[119.78958893 154.56150818]
[118.16923523 138.82350159]
[109.53211212 126.55973053]
[100.89498901 114.29595947]
[88.28896332 108.24784851]
[86.84123993 94.34116364]
[78.20411682 82.07739258]
[69.56699371 69.81362152]
[63.58640289 66.61367035]
[60.64044952 61.59828186]
[60.82440948 56.72941971]
[52.79944229 44.05661392]
[44.77447891 31.38381195]
[36.74951553 18.71100807]
[30.93314552 15.22145939]
[28.23683167 10.06755829]
[28.65947342 5.21358776]
[21.26600075 -7.83771753]
[13.87252712 -20.88902283]
[6.47905445 -33.94032669]
[-8.58960342 -32.14832687]
[-23.15707970 -36.25096893]
[-35.01196289 -45.59309769]
[-42.36703110 -58.72666550]
[-44.12865829 -73.63510132]
[-40.05932617 -88.04294586]
[-30.80910110 -99.76312256]
[-38.20257187 -112.81443024]
[-45.59604645 -125.86573792]
[-52.98952103 -138.91703796]
[-68.42239380 -140.53134155]
[-79.93644714 -150.93356323]
[-83.10429382 -166.12382507]
[-76.70783234 -180.26118469]
[-63.20662308 -187.90953064]
[-47.79216766 -186.12789917]
[-36.39163589 -175.60139465]
[-33.38875961 -160.37765503]
[-39.93821335 -146.31051636]
[-32.54474258 -133.25920105]
[-25.15126801 -120.20790100]
[-17.75779533 -107.15660095]
[-2.94949603 -109.06540680]
[11.50057888 -105.14867401]
[23.38231468 -95.97321320]
[30.86608887 -82.91255188]
[32.78447342 -67.94146729]
[28.81424522 -53.33734894]
[19.53035927 -41.33380127]
[26.92383194 -28.28249550]
[34.31730652 -15.23119068]
[41.71077728 -2.17988539]
[49.42231750 10.68604374]
[57.44728470 23.35884666]
[65.47224426 36.03165054]
[73.49721527 48.70445251]
[81.83076477 61.17649841]
[90.46788788 73.44026947]
[99.10501099 85.70404053]
[111.71103668 91.75215149]
[113.15876007 105.65883636]
[121.79588318 117.92260742]
[130.43301392 130.18638611]
[144.70515442 137.01399231]
[145.70773315 151.87481689]
[154.34484863 164.13858032]
[162.98197937 176.40235901]
[171.61909485 188.66613770]
[180.25621033 200.92990112]
[188.89334106 213.19367981]
[189.79457092 198.22077942]
[197.42112732 185.30429077]
[210.09655762 177.28346252]
[225.03459167 175.92144775]
[238.95159912 181.51759338]
[248.78837585 192.84181213]
[252.38264465 207.40481567]
[248.94432068 222.00543213]
[239.22918701 233.43418884]
[225.37283325 239.17884827]
[210.42108154 237.97663879]
[197.66081238 230.09204102]
[209.59495544 240.47889709]
[206.59764099 255.06880188]
[211.65098572 269.19195557]
[216.70433044 283.31512451]
[221.75767517 297.43829346]
[226.81103516 311.56143188]
[231.86437988 325.68460083]
[236.91772461 339.80776978]
[251.93414307 338.40853882]
[266.82666016 340.78848267]
[280.65905762 346.79806519]
[292.56188965 356.05944824]
[301.78689575 367.99050903]
[307.75421143 381.84121704]
[310.08868408 396.74090576]
[308.64361572 411.75299072]
[303.50979614 425.93377686]
[295.00997925 438.39187622]
[283.67846680 448.34411621]
[270.22753906 455.16494751]
[255.50276184 458.42556763]
[240.42973328 457.92098999]
[225.95594788 453.68301392]
[212.99127197 445.97796631]
[202.35064697 435.29022217]
[194.70295715 422.29159546]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 109]
[6 108]
[7 107]
[8 106]
[9 105]
[10 104]
[11 103]
[13 101]
[14 89]
[15 88]
[16 87]
[17 86]
[18 85]
[19 84]
[21 82]
[22 81]
[23 80]
[25 78]
[26 77]
[27 76]
[30 75]
[31 74]
[32 73]
[33 72]
[36 71]
[37 70]
[38 69]
[39 68]
[46 61]
[47 60]
[48 59]
[49 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
