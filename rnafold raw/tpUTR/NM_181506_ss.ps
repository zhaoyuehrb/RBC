%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 23:01:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAACUAAAUAUUGUCUAUAAGAAACUUCAGUGCCAUGGACAUGAUUUAAACUGAAACCUCCUUAUAUAAUUAUAUACUUUAGUUGGAAAUAUAAUGAAUUAUAUGAGGUUAGCAUUAUUAAAAUAUGUUUUUAAUAAUU\
) } def
/len { sequence length } bind def

/coor [
[70.77140808 133.17175293]
[60.34623718 119.55133820]
[45.96237183 123.80626678]
[31.57850456 128.06118774]
[23.54569244 143.55859375]
[7.12418365 148.39468384]
[-7.44124842 140.05880737]
[-21.72746658 144.63088989]
[-36.01368332 149.20297241]
[-50.29990387 153.77507019]
[-64.58612061 158.34715271]
[-71.86874390 172.11672974]
[-86.42213440 176.54995728]
[-99.50444031 169.52223206]
[-113.79065704 174.09431458]
[-128.07687378 178.66639709]
[-142.36309814 183.23847961]
[-156.64930725 187.81057739]
[-170.93553162 192.38265991]
[-185.22174072 196.95474243]
[-187.56419373 209.32575989]
[-194.92752075 219.44953918]
[-205.84823608 225.41928101]
[-218.20040894 226.14347839]
[-229.60946655 221.54498291]
[-237.90856934 212.56391907]
[-252.38304138 216.49960327]
[-263.54586792 228.51307678]
[-279.46865845 224.58929443]
[-283.77145386 208.76469421]
[-272.02789307 197.31826782]
[-256.31872559 202.02513123]
[-241.84425354 198.08944702]
[-236.40673828 181.35336304]
[-221.91874695 171.09260559]
[-204.01429749 171.52604675]
[-189.79383850 182.66853333]
[-175.50761414 178.09643555]
[-161.22138977 173.52435303]
[-146.93518066 168.95227051]
[-132.64895630 164.38018799]
[-118.36273956 159.80809021]
[-104.07652283 155.23600769]
[-97.50540161 141.91850281]
[-83.08228302 137.07824707]
[-69.15821075 144.06092834]
[-54.87199020 139.48884583]
[-40.58576965 134.91676331]
[-26.29955292 130.34468079]
[-12.01333523 125.77258301]
[-7.74813032 113.56519318]
[2.94305158 105.94979858]
[16.26419830 105.90684509]
[27.32357788 113.67733002]
[41.70744324 109.42240143]
[56.09130859 105.16747284]
[57.12345886 89.21676636]
[63.75988388 74.67551422]
[75.13314819 63.44434738]
[89.75669861 56.99127197]
[105.71911621 56.15974808]
[120.93401337 61.05846405]
[130.17474365 49.24284744]
[139.41548157 37.42722702]
[148.65620422 25.61160660]
[157.89694214 13.79598713]
[167.13766479 1.98036766]
[176.37840271 -9.83525181]
[185.61914062 -21.65087128]
[194.85986328 -33.46649170]
[204.10060120 -45.28211212]
[213.34133911 -57.09772873]
[222.58206177 -68.91335297]
[224.40980530 -88.93636322]
[242.52917480 -95.55365753]
[251.23822021 -107.76646423]
[259.94726562 -119.97927094]
[268.65631104 -132.19207764]
[270.36911011 -147.92028809]
[284.05822754 -153.79037476]
[292.76727295 -166.00317383]
[301.47631836 -178.21597290]
[300.25527954 -194.21249390]
[312.09823608 -205.03486633]
[327.92028809 -202.38110352]
[335.58410645 -188.28692627]
[329.21063232 -173.56420898]
[313.68911743 -169.50692749]
[304.98007202 -157.29412842]
[296.27102661 -145.08132935]
[295.18115234 -130.22665405]
[280.86911011 -123.48302460]
[272.16006470 -111.27022552]
[263.45101929 -99.05741882]
[254.74198914 -86.84461975]
[257.34072876 -76.86259460]
[253.90388489 -66.90362549]
[245.35125732 -60.38119507]
[234.39768982 -59.67261887]
[225.15695190 -47.85699844]
[215.91621399 -36.04137802]
[206.67549133 -24.22575951]
[197.43475342 -12.41013908]
[188.19401550 -0.59451967]
[178.95329285 11.22109985]
[169.71255493 23.03672028]
[160.47183228 34.85234070]
[151.23109436 46.66795731]
[141.99035645 58.48357773]
[132.74963379 70.29919434]
[139.13969421 79.43886566]
[143.03948975 89.88672638]
[144.20089722 100.97805786]
[142.55001831 112.00714874]
[138.19189453 122.27229309]
[131.40380859 131.12036133]
[140.11285400 143.33316040]
[148.82189941 155.54595947]
[157.53094482 167.75877380]
[166.23997498 179.97157288]
[174.94902039 192.18437195]
[183.65806580 204.39717102]
[192.36711121 216.60998535]
[201.07615662 228.82278442]
[209.78520203 241.03558350]
[225.30673218 245.09286499]
[231.68017578 259.81558228]
[224.01637268 273.90975952]
[208.19433594 276.56353760]
[196.35136414 265.74114990]
[197.57240295 249.74462891]
[188.86335754 237.53182983]
[180.15431213 225.31903076]
[171.44526672 213.10621643]
[162.73622131 200.89341736]
[154.02717590 188.68061829]
[145.31813049 176.46780396]
[136.60908508 164.25500488]
[127.90004730 152.04220581]
[119.19100189 139.82940674]
[102.58817291 144.13589478]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 56]
[3 55]
[4 54]
[7 50]
[8 49]
[9 48]
[10 47]
[11 46]
[14 43]
[15 42]
[16 41]
[17 40]
[18 39]
[19 38]
[20 37]
[26 33]
[27 32]
[62 110]
[63 109]
[64 108]
[65 107]
[66 106]
[67 105]
[68 104]
[69 103]
[70 102]
[71 101]
[72 100]
[73 99]
[75 95]
[76 94]
[77 93]
[78 92]
[80 90]
[81 89]
[82 88]
[116 140]
[117 139]
[118 138]
[119 137]
[120 136]
[121 135]
[122 134]
[123 133]
[124 132]
[125 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
