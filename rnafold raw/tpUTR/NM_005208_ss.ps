%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 21:25:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGAUUAAAAGCUCCAAGUACGAUAAUUCCUCAAGCAUGAGACCUUGCUAAGCACUCUAGAAUAAGUUUUAUGUUCUGCUCACAGACAUUGCUUUCAAAUGUUAGCUGCUGAAAUCCACAAUAAACGUCAUUUAA\
) } def
/len { sequence length } bind def

/coor [
[118.77589417 275.01409912]
[127.96887970 263.04949951]
[139.94587708 253.87269592]
[134.20562744 240.01449585]
[128.46537781 226.15631104]
[122.72512817 212.29811096]
[110.20066071 209.05622864]
[101.72518158 199.02499390]
[100.58625031 185.74623108]
[107.42705536 174.08149719]
[102.00843048 160.09442139]
[96.58980560 146.10733032]
[89.69432068 143.15736389]
[87.74384308 158.03001404]
[89.06098938 172.97207642]
[78.97702789 184.07675171]
[63.97755051 184.20195007]
[53.70962143 173.26715088]
[54.77715683 158.30519104]
[66.49366760 148.93896484]
[75.90335083 137.25744629]
[69.00786591 134.30747986]
[55.14966965 140.04772949]
[45.60121155 153.38035583]
[29.30925560 151.50839233]
[23.03357315 136.35755920]
[33.23004913 123.51373291]
[49.40942001 126.18953705]
[63.26761246 120.44928741]
[61.09705353 110.45200348]
[61.48139954 100.65336609]
[64.19031525 91.67018890]
[68.85317993 84.01911163]
[74.99380493 78.08695221]
[66.23318481 65.91109467]
[57.47256851 53.73523712]
[48.71194839 41.55937958]
[39.95132828 29.38352013]
[31.19070625 17.20766258]
[22.43008614 5.03180313]
[13.66946697 -7.14405537]
[4.90884686 -19.31991386]
[-3.85177350 -31.49577332]
[-20.24173355 -29.66438484]
[-35.24362946 -36.28631592]
[-44.82512665 -49.47878647]
[-46.46269608 -65.60707855]
[-39.80567169 -80.28570557]
[-48.84518814 -92.25596619]
[-57.88470840 -104.22621918]
[-73.50993347 -104.84784698]
[-85.04512787 -115.40593719]
[-87.04373932 -130.91526794]
[-78.56207275 -144.05282593]
[-63.60491943 -148.61544800]
[-49.23458481 -142.44880676]
[-42.23630142 -128.46459961]
[-45.91445160 -113.26573944]
[-36.87493134 -101.29548645]
[-27.83541107 -89.32522583]
[-14.37332058 -91.89367676]
[-1.05894566 -88.37584686]
[9.47863483 -79.40708160]
[15.13308716 -66.70484161]
[14.74172401 -52.74002838]
[8.32408524 -40.25639343]
[17.08470535 -28.08053398]
[25.84532547 -15.90467548]
[34.60594559 -3.72881699]
[43.36656570 8.44704151]
[52.12718582 20.62290001]
[60.88780594 32.79875946]
[69.64842987 44.97461700]
[78.40904999 57.15047455]
[87.16967010 69.32633209]
[100.98545837 66.76567841]
[114.62525940 70.14044189]
[125.65308380 78.84792328]
[139.08053589 72.16184998]
[152.50798035 65.47576904]
[154.86915588 61.58800888]
[158.05114746 58.97045517]
[161.53424072 57.72556686]
[164.82101440 57.76957703]
[167.49734497 58.85732269]
[181.48442078 53.43869781]
[195.47151184 48.02007294]
[209.45858765 42.60144806]
[223.44567871 37.18282318]
[237.43275452 31.76419640]
[242.30670166 16.90557289]
[255.61849976 8.70007992]
[271.08273315 11.02209949]
[281.39764404 22.77524567]
[281.69287109 38.41004181]
[271.82901001 50.54421616]
[256.46347046 53.44838333]
[242.85137939 45.75128174]
[228.86430359 51.16990662]
[214.87721252 56.58853149]
[200.89013672 62.00715637]
[186.90304565 67.42578125]
[172.91596985 72.84440613]
[159.19406128 78.90322113]
[145.76661682 85.58929443]
[132.33915710 92.27536774]
[132.26893616 119.38703918]
[110.57688904 140.68870544]
[115.99551392 154.67579651]
[121.41413879 168.66287231]
[137.51376343 175.39479065]
[143.68432617 191.35746765]
[136.58332825 206.55786133]
[142.32357788 220.41606140]
[148.06382751 234.27424622]
[153.80407715 248.13244629]
[168.76208496 246.15240479]
[183.72274780 248.11222839]
[197.66603088 253.87826538]
[209.64126587 263.05740356]
[218.83193970 275.02374268]
[224.61143494 288.96145630]
[226.58569336 303.92022705]
[224.62010193 318.88012695]
[218.84867859 332.82119751]
[209.66493225 344.79287720]
[197.69502258 353.97894287]
[183.75508118 359.75305176]
[168.79554749 361.72152710]
[153.83639526 359.75015259]
[139.89756775 353.97335815]
[127.92943573 344.78500366]
[118.74800110 332.81152344]
[112.97926331 318.86935425]
[111.01656342 303.90908813]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 116]
[4 115]
[5 114]
[6 113]
[10 110]
[11 109]
[12 108]
[22 29]
[23 28]
[34 75]
[35 74]
[36 73]
[37 72]
[38 71]
[39 70]
[40 69]
[41 68]
[42 67]
[43 66]
[48 60]
[49 59]
[50 58]
[78 106]
[79 105]
[80 104]
[85 103]
[86 102]
[87 101]
[88 100]
[89 99]
[90 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
