%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 22:52:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUGGUGAAAGGACACAGGUACUAUCAUUGAAAACCUUGACAAUGGGUCUUCUUCCAUUACACCUUCUUUAUAUUUUAAAGGCCUGUGAAUAUACUUAUAACCUGCAUAUCACAAAAUAAAACAUUUUUCUCUCAUGUU\
) } def
/len { sequence length } bind def

/coor [
[278.33618164 311.76751709]
[273.04125977 306.43124390]
[269.94009399 299.50805664]
[269.47521973 291.86761475]
[271.75457764 284.48843384]
[261.94314575 273.14227295]
[252.13171387 261.79608154]
[235.35708618 261.32226562]
[223.86021423 248.63966370]
[225.07652283 231.22738647]
[215.01475525 220.10260010]
[204.95298767 208.97782898]
[184.59913635 209.79849243]
[169.93011475 195.25056458]
[170.60038757 174.31233215]
[159.58839417 164.12725830]
[148.57638550 153.94218445]
[137.56439209 143.75709534]
[126.55238342 133.57202148]
[115.54038239 123.38694763]
[104.52838135 113.20186615]
[113.82926178 124.97019958]
[116.49521637 139.73138428]
[111.89852905 154.00970459]
[101.12153625 164.44314575]
[86.70183563 168.57499695]
[72.03472900 165.43235779]
[60.57379532 155.75523376]
[55.01765823 141.82218933]
[56.67458344 126.91399384]
[65.15439606 114.54096985]
[50.82785797 110.09683990]
[36.50132370 105.65270233]
[21.02836990 108.95396423]
[11.16489410 97.79327393]
[-3.16164351 93.34913635]
[-17.48818016 88.90500641]
[-31.81471825 84.46086884]
[-44.86537933 93.07564545]
[-60.39422989 91.23479462]
[-71.06903076 79.80751038]
[-71.84945679 64.18941498]
[-62.36702347 51.75489044]
[-47.09904099 48.37513733]
[-33.25458527 55.64597321]
[-27.37058449 70.13433075]
[-13.04404736 74.57846832]
[1.28249025 79.02259827]
[15.60902786 83.46673584]
[30.05725098 79.84759521]
[40.94545746 91.32616425]
[55.27199173 95.77030182]
[69.59853363 100.21443176]
[76.05154419 96.39231110]
[65.60945129 85.62371063]
[55.16736603 74.85510254]
[40.95394516 70.06150055]
[31.57911873 58.35199356]
[30.01124382 43.43415833]
[36.74675751 30.03144073]
[49.65299225 22.38754654]
[64.64344025 22.92276573]
[76.97167206 31.46763039]
[82.73419189 45.31657791]
[80.10707092 60.08329391]
[84.53231812 74.41567993]
[88.95756531 88.74806213]
[95.41057587 84.92593384]
[98.39836884 70.22650909]
[101.38615417 55.52708435]
[104.37394714 40.82765961]
[107.36174011 26.12823296]
[99.73902130 12.01179886]
[106.15531921 -2.69230175]
[121.68861389 -6.70434189]
[134.42308044 3.05337214]
[134.58992004 19.09555817]
[122.06116486 29.11602211]
[119.07337189 43.81544876]
[116.08558655 58.51487350]
[113.09779358 73.21430206]
[110.11000061 87.91372681]
[114.71346283 102.18986511]
[125.72546387 112.37494659]
[136.73745728 122.56002045]
[147.74946594 132.74510193]
[158.76147461 142.93017578]
[169.77346802 153.11526489]
[180.78547668 163.30033875]
[190.12837219 160.07569885]
[199.94381714 160.51974487]
[208.85112000 164.52702332]
[215.61322021 171.49391174]
[219.30841064 180.40913391]
[219.45587158 190.00042725]
[216.07777405 198.91604614]
[226.13954163 210.04083252]
[236.20130920 221.16561890]
[249.69049072 220.29374695]
[261.03964233 227.27073669]
[266.19802856 239.34190369]
[263.47790527 251.98464966]
[273.28933716 263.33084106]
[283.10073853 274.67703247]
[305.61337280 280.17657471]
[309.66085815 302.25494385]
[320.67288208 312.44003296]
[331.68487549 322.62509155]
[342.69686890 332.81018066]
[356.88906860 327.30175781]
[372.00393677 328.49667358]
[385.04776001 336.10452271]
[393.46032715 348.57003784]
[395.61746216 363.39086914]
[391.14431763 377.61956787]
[402.15634155 387.80465698]
[413.16833496 397.98974609]
[424.18032837 408.17480469]
[439.37329102 405.01983643]
[453.50521851 411.42831421]
[461.14208984 424.93597412]
[459.34741211 440.34893799]
[448.81121826 451.74053955]
[433.58496094 454.73049927]
[419.52337646 448.16912842]
[412.03347778 434.57937622]
[413.99523926 419.18682861]
[402.98324585 409.00173950]
[391.97125244 398.81665039]
[380.95925903 388.63159180]
[367.12225342 394.19958496]
[352.17843628 393.20361328]
[339.09539795 385.78771973]
[330.49453735 373.37622070]
[328.12573242 358.40039062]
[332.51177979 343.82217407]
[321.49978638 333.63711548]
[310.48779297 323.45202637]
[299.47579956 313.26693726]
[292.47326660 315.37072754]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 104]
[6 103]
[7 102]
[10 98]
[11 97]
[12 96]
[15 89]
[16 88]
[17 87]
[18 86]
[19 85]
[20 84]
[21 83]
[31 53]
[32 52]
[33 51]
[35 49]
[36 48]
[37 47]
[38 46]
[68 82]
[69 81]
[70 80]
[71 79]
[72 78]
[106 139]
[107 138]
[108 137]
[109 136]
[115 130]
[116 129]
[117 128]
[118 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
