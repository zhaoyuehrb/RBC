%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 15:25:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGGCACCAAAAGGAAACAAGCUGGAAUCGCUCCAGGAAAAACUCUGAAUGGUUACACCUGGAAGAGGGAAGAUGCAUUCUAGAUUCAAAGAAAUACGUUUUCAGUUUCUCAUGGGAACAAUGCUGCUUGGGAAUGUGUGUGA\
) } def
/len { sequence length } bind def

/coor [
[82.54330444 426.27841187]
[69.09970093 434.02755737]
[53.67234421 432.36129761]
[42.19337463 421.92037964]
[39.07668304 406.71954346]
[45.52070618 392.60379028]
[59.04758072 385.00094604]
[60.65830231 370.08767700]
[62.26902008 355.17440796]
[63.71920013 340.24468994]
[65.00867462 325.30020142]
[52.80873489 319.91900635]
[42.85692596 311.01016235]
[36.14042664 299.43838501]
[33.33135986 286.33346558]
[34.71955109 272.97994995]
[40.18269348 260.69125366]
[49.19699097 250.68046570]
[60.88733292 243.94059753]
[74.11224365 241.14605713]
[76.04347229 226.27088928]
[77.97469330 211.39573669]
[79.90591431 196.52056885]
[81.83713531 181.64541626]
[75.80284882 168.02790833]
[85.25249481 155.33874512]
[79.21820831 141.72123718]
[88.66785431 129.03208923]
[71.96268463 113.60839081]
[70.18007660 90.94177246]
[57.29861450 83.25620270]
[44.57679367 85.65216827]
[33.98807907 78.92736816]
[30.94987679 67.17173767]
[18.23676300 59.21078873]
[5.52364826 51.24983978]
[-7.18946552 43.28888702]
[-19.90258026 35.32793808]
[-32.61569214 27.36698532]
[-46.95284653 33.00189972]
[-61.68669128 29.15908432]
[-71.21978760 17.51502991]
[-72.05837250 2.66798377]
[-84.77148438 -5.29296684]
[-97.48460388 -13.25391769]
[-110.19771576 -21.21486855]
[-125.54225159 -17.43058777]
[-139.02496338 -25.67631149]
[-142.64680481 -41.06000137]
[-134.25898743 -54.45478058]
[-118.83786774 -57.91376877]
[-105.53251648 -49.38481140]
[-102.23676300 -33.92798233]
[-89.52365112 -25.96703148]
[-76.81053925 -18.00608063]
[-64.09741974 -10.04512978]
[-50.37439346 -15.77369499]
[-35.73640060 -12.28181553]
[-25.84573555 -0.70476425]
[-24.65474319 14.65387249]
[-11.94162846 22.61482239]
[0.77148509 30.57577324]
[13.48459911 38.53672409]
[26.19771194 46.49767685]
[38.91082764 54.45862579]
[56.42540359 54.10839844]
[64.98418427 70.37474060]
[77.86564636 78.06031799]
[88.08277130 71.20314026]
[100.15765381 68.83504486]
[112.20795441 71.32518005]
[121.23231506 59.34349060]
[130.25668335 47.36179733]
[139.28103638 35.38010788]
[148.30540466 23.39841843]
[157.32975769 11.41672707]
[166.35412598 -0.56496364]
[163.58398438 -17.80251312]
[173.90554810 -31.46359444]
[190.57518005 -33.42892838]
[199.33966064 -45.60201263]
[208.10412598 -57.77510071]
[216.86860657 -69.94818878]
[211.88238525 -84.64231110]
[216.51757812 -99.45090485]
[228.99186707 -108.67977142]
[244.50862122 -108.78022003]
[257.10131836 -99.71361542]
[261.92785645 -84.96627045]
[257.13229370 -70.20882416]
[244.55862427 -61.11582565]
[229.04168701 -61.18371201]
[220.27722168 -49.01062775]
[211.51274109 -36.83753967]
[202.74827576 -24.66445541]
[206.58065796 -12.31835556]
[202.52038574 0.15994594]
[191.84388733 8.12003708]
[178.33581543 8.45939732]
[169.31144714 20.44108772]
[160.28709412 32.42277908]
[151.26272583 44.40446854]
[142.23837280 56.38615799]
[133.21400452 68.36785126]
[124.18964386 80.34954071]
[129.10336304 88.85220337]
[131.12736511 98.46175385]
[145.84696960 101.34853363]
[160.56655884 104.23530579]
[175.28616333 107.12207794]
[190.00575256 110.00885010]
[204.72535706 112.89562225]
[221.43202209 110.01058197]
[228.82919312 125.26568604]
[216.21800232 136.59680176]
[201.83857727 127.61521912]
[187.11898804 124.72844696]
[172.39938354 121.84167480]
[157.67979431 118.95490265]
[142.96018982 116.06813049]
[128.24060059 113.18135071]
[122.22692108 121.84590149]
[113.66763306 128.00848389]
[103.54301453 130.96330261]
[109.43917847 145.64479065]
[100.12765503 157.26997375]
[106.02381897 171.95146179]
[96.71229553 183.57664490]
[94.78107452 198.45179749]
[92.84985352 213.32695007]
[90.91863251 228.20211792]
[88.98740387 243.07727051]
[103.69416046 251.21531677]
[114.14863586 264.32992554]
[118.78372192 280.41030884]
[116.92178345 297.00469971]
[108.87362671 311.59399414]
[95.88697815 321.97427368]
[79.95314789 326.58969116]
[78.66367340 341.53414917]
[81.05570984 350.42666626]
[77.18228912 356.78512573]
[75.57157135 371.69839478]
[73.96085358 386.61166382]
[85.55240631 396.92745972]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 144]
[8 143]
[9 142]
[10 140]
[11 139]
[20 132]
[21 131]
[22 130]
[23 129]
[24 128]
[26 126]
[28 124]
[30 68]
[31 67]
[34 65]
[35 64]
[36 63]
[37 62]
[38 61]
[39 60]
[43 56]
[44 55]
[45 54]
[46 53]
[71 105]
[72 104]
[73 103]
[74 102]
[75 101]
[76 100]
[77 99]
[80 95]
[81 94]
[82 93]
[83 92]
[107 121]
[108 120]
[109 119]
[110 118]
[111 117]
[112 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
