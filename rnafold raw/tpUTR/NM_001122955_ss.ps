%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 19:31:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAAAGGGGCAGACUCCUCACAUUCCAGCACUUUCCCACCUGACUCCUCUCCCCUCGUUUUUCCUUCAAUAAACUAUUUUGUGUCAGCUUCUUCCUUGACUCUG\
) } def
/len { sequence length } bind def

/coor [
[149.47764587 151.29704285]
[149.01649475 127.97241974]
[135.11614990 122.33500671]
[121.21579742 116.69758606]
[107.31545258 111.06017303]
[93.10556030 106.25612640]
[78.63602448 102.30232239]
[64.16649628 98.34851074]
[49.69696045 94.39470673]
[35.22742462 90.44089508]
[25.95822334 91.19418335]
[20.39102554 86.14958954]
[6.04501057 81.76873779]
[-8.30100441 77.38788605]
[-19.55366707 87.74765778]
[-34.38305283 91.06218719]
[-48.78470612 86.53904724]
[-58.92087173 75.48852539]
[-62.14313507 60.94608307]
[-76.48915100 56.56523132]
[-90.83516693 52.18437958]
[-99.12677002 64.81077576]
[-110.64067078 74.58864594]
[-124.44348907 80.72534943]
[-139.41627502 82.72339630]
[-154.34527588 80.42082977]
[-168.02023315 74.00429535]
[-179.33261108 63.99395752]
[-187.36535645 51.20131302]
[-191.46728516 36.66339874]
[-191.30586243 21.55874443]
[-186.89419556 7.11181116]
[-178.58990479 -5.50624990]
[-167.06619263 -15.27254963]
[-153.25721741 -21.39537811]
[-138.28242493 -23.37838554]
[-123.35575867 -21.06081772]
[-109.68724060 -14.63054943]
[-98.38492584 -4.60885429]
[-90.36504364 8.19185448]
[-86.27772522 22.73387909]
[-86.45431519 37.83836746]
[-72.10829926 42.21921539]
[-57.76228333 46.60006714]
[-46.96563339 36.33859253]
[-32.38529968 32.83576202]
[-17.91364861 37.12968063]
[-7.46572351 48.16315842]
[-3.92015266 63.04187393]
[10.42586231 67.42272949]
[24.77187729 71.80357361]
[39.18123245 75.97136688]
[53.65076828 79.92517090]
[68.12030029 83.87898254]
[82.58983612 87.83278656]
[97.05936432 91.78659821]
[99.96090698 90.36879730]
[103.47165680 90.04962921]
[107.15648651 91.06723785]
[110.49511719 93.48419189]
[112.95287323 97.15982819]
[126.85321045 102.79724884]
[140.75355530 108.43466187]
[154.65390015 114.07207489]
[159.75367737 107.13958740]
[165.99913025 101.22676086]
[173.19038391 96.52001953]
[181.09774780 93.16722107]
[189.46913147 91.27301025]
[198.03802490 90.89559174]
[206.53202820 92.04488373]
[214.68147278 94.68233490]
[222.22799683 98.72215271]
[228.93273926 104.03414154]
[234.58390808 110.44786835]
[239.00344849 117.75814056]
[242.05267334 125.73156738]
[243.63659668 134.11401367]
[243.70692444 142.63870239]
[242.26345825 151.03469849]
[239.35411072 159.03553772]
[235.07327271 166.38761902]
[250.36442566 170.44857788]
[254.10690308 184.86534119]
[264.86950684 195.31361389]
[275.63214111 205.76187134]
[286.39474487 216.21014404]
[297.15734863 226.65840149]
[312.42211914 223.87158203]
[326.39501953 230.61973572]
[333.70318604 244.30805969]
[331.53649902 259.67312622]
[320.72805786 270.80673218]
[305.43395996 273.42779541]
[291.53506470 266.52847290]
[284.37582397 252.76165771]
[286.70907593 237.42102051]
[275.94647217 226.97274780]
[265.18386841 216.52449036]
[254.42124939 206.07621765]
[243.65864563 195.62794495]
[229.13731384 192.31433105]
[224.62501526 177.15023804]
[203.37353516 186.21105957]
[180.29895020 184.23361206]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 64]
[3 63]
[4 62]
[5 61]
[6 56]
[7 55]
[8 54]
[9 53]
[10 52]
[12 51]
[13 50]
[14 49]
[19 44]
[20 43]
[21 42]
[82 103]
[84 101]
[85 100]
[86 99]
[87 98]
[88 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
