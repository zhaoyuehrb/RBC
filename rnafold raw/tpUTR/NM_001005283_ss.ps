%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 00:42:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACCCUUGUGAAAUAUAUCAUUCCUUAGUUUCCCCAUCUUUUCUGUCUUUUCUCAAUAGCACCUUCUGGAGAGACUUUCC\
) } def
/len { sequence length } bind def

/coor [
[165.60464478 130.12532043]
[154.70091248 117.48299408]
[148.10501099 102.12732697]
[133.19932556 103.80679321]
[118.29364014 105.48625946]
[109.17774963 116.74888611]
[94.77933502 118.37120056]
[83.38582611 109.41942596]
[68.48014832 111.09889221]
[60.76371765 124.43167114]
[46.83889389 130.59223938]
[32.13053894 127.40972900]
[22.23497772 116.30947113]
[7.32929420 117.98893738]
[-7.57638931 119.66840363]
[-15.11678123 133.23019409]
[-29.20266151 139.73922729]
[-44.41772079 136.69267273]
[-54.91146088 125.26196289]
[-56.64882278 109.84245300]
[-48.96175385 96.36325836]
[-34.80609131 90.00740814]
[-19.62497711 93.21884918]
[-9.25585651 104.76271820]
[5.64982700 103.08325195]
[20.55550957 101.40378571]
[27.73293114 88.37985992]
[41.36433792 82.00422668]
[56.31089401 84.91178131]
[66.80067444 96.19320679]
[81.70635986 94.51374054]
[90.82225037 83.25111389]
[105.22066498 81.62879944]
[116.61417389 90.58057404]
[131.51985168 88.90110779]
[146.42553711 87.22164154]
[148.48333740 73.80297852]
[153.77017212 61.31075287]
[161.95729065 50.50845337]
[172.53878784 42.05490875]
[184.86296082 36.46408081]
[198.17243958 34.07382965]
[211.65065002 35.02548981]
[224.47203064 39.25553894]
[235.85249329 46.49979782]
[245.09744263 56.30992889]
[251.64411926 68.08116913]
[255.09593201 81.08963776]
[270.09591675 81.08963776]
[285.09591675 81.08963776]
[300.09591675 81.08963776]
[315.09591675 81.08963776]
[330.09591675 81.08963776]
[345.09591675 81.08963776]
[360.09591675 81.08963776]
[365.55139160 66.92623138]
[375.75778198 55.69261551]
[389.33477783 48.90805435]
[404.44613647 47.49010468]
[419.04824829 51.63052750]
[431.16625977 60.76936722]
[439.16131592 73.67066956]
[441.95211792 88.58963776]
[439.16131592 103.50861359]
[431.16625977 116.40991211]
[419.04824829 125.54875183]
[404.44613647 129.68917847]
[389.33477783 128.27122498]
[375.75778198 121.48666382]
[365.55139160 110.25305176]
[360.09591675 96.08963776]
[345.09591675 96.08963776]
[330.09591675 96.08963776]
[315.09591675 96.08963776]
[300.09591675 96.08963776]
[285.09591675 96.08963776]
[270.09591675 96.08963776]
[255.09593201 96.08963776]
[250.38832092 111.97977448]
[241.10301208 125.72821045]
[228.09388733 136.05187988]
[212.56292725 141.98352051]
[195.94915771 142.96228027]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 36]
[4 35]
[5 34]
[8 31]
[9 30]
[13 26]
[14 25]
[15 24]
[48 78]
[49 77]
[50 76]
[51 75]
[52 74]
[53 73]
[54 72]
[55 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
