%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 09:01:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAGGCCGGCCUCAGGGUCAGGACGCCUCCACACAUAGUUGGUUGGGGGGUAGGGUUGGGAGCUUGGCCCUACGGUUUGUAAAAGAAACACAUGUCGUGAUUCU\
) } def
/len { sequence length } bind def

/coor [
[154.51980591 208.98165894]
[148.66799927 193.37048340]
[153.26222229 177.17234802]
[143.81089783 165.52449036]
[134.35958862 153.87661743]
[124.90826416 142.22875977]
[115.45694733 130.58090210]
[106.00563049 118.93305206]
[91.06488800 117.60111237]
[79.70221710 127.39344788]
[68.33954620 137.18577576]
[56.97687912 146.97810364]
[52.08529663 162.63072205]
[36.02688599 165.95629883]
[25.32115936 153.53375244]
[30.98125267 138.14234924]
[47.18454742 135.61543274]
[58.54721451 125.82310486]
[69.90988159 116.03077698]
[81.27255249 106.23844147]
[81.27255249 98.73844147]
[68.28211975 106.23834991]
[55.29184723 98.73815918]
[55.29217148 83.73815918]
[68.28276825 76.23854065]
[81.27255249 83.73844147]
[81.27255249 76.23844147]
[69.90988159 66.44611359]
[58.54721451 56.65378189]
[47.18454742 46.86145020]
[35.82188034 37.06911850]
[24.45920944 27.27678490]
[8.91353798 28.26158142]
[-2.47032881 18.16889954]
[-3.31337881 3.34240746]
[-14.67604733 -6.44992447]
[-30.87934113 -8.97683907]
[-36.53943634 -24.36824417]
[-25.83370972 -36.79078293]
[-9.77529621 -33.46520996]
[-4.88371563 -17.81259346]
[6.47895288 -8.02026081]
[21.26742172 -9.37553120]
[32.93027878 0.39341998]
[34.25154114 15.91411686]
[45.61421204 25.70644760]
[56.97687912 35.49877930]
[68.33954620 45.29111099]
[79.70221710 55.08344269]
[91.06488800 64.87577820]
[105.90048981 62.66107559]
[113.90783691 49.97713852]
[121.91519165 37.29319763]
[129.92254639 24.60925674]
[137.92988586 11.92531681]
[145.93724060 -0.75862330]
[153.94459534 -13.44256306]
[161.95195007 -26.12650299]
[169.95928955 -38.81044388]
[177.96664429 -51.49438477]
[178.07350159 -67.89318085]
[192.46052551 -75.76373291]
[206.32757568 -67.00948334]
[205.40942383 -50.63605881]
[190.65058899 -43.48703384]
[182.64323425 -30.80309296]
[174.63587952 -18.11915207]
[166.62852478 -5.43521261]
[158.62118530 7.24872732]
[150.61383057 19.93266678]
[142.60647583 32.61660767]
[134.59913635 45.30054855]
[126.59178162 57.98448944]
[118.58442688 70.66842651]
[117.65348816 109.48173523]
[127.10480499 121.12959290]
[136.55612183 132.77745056]
[146.00744629 144.42530823]
[155.45875549 156.07316589]
[164.91007996 167.72102356]
[178.67355347 165.96852112]
[191.38883972 171.24295044]
[199.73768616 182.05090332]
[201.59967041 195.47061157]
[196.58981323 207.94143677]
[205.69181824 219.86425781]
[214.79380798 231.78707886]
[223.89581299 243.70988464]
[238.41978455 249.98402405]
[239.99267578 264.79534912]
[249.09468079 276.71817017]
[258.19668579 288.64099121]
[273.84207153 292.19079590]
[280.69140625 306.69824219]
[273.49050903 321.03445435]
[257.76321411 324.20187378]
[245.57423401 313.77078247]
[246.27386475 297.74298096]
[237.17185974 285.82015991]
[228.06985474 273.89733887]
[214.19691467 268.47601318]
[211.97300720 252.81188965]
[202.87100220 240.88906860]
[193.76899719 228.96626282]
[184.66699219 217.04344177]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 80]
[4 79]
[5 78]
[6 77]
[7 76]
[8 75]
[9 20]
[10 19]
[11 18]
[12 17]
[27 50]
[28 49]
[29 48]
[30 47]
[31 46]
[32 45]
[35 42]
[36 41]
[51 74]
[52 73]
[53 72]
[54 71]
[55 70]
[56 69]
[57 68]
[58 67]
[59 66]
[60 65]
[85 105]
[86 104]
[87 103]
[88 102]
[90 100]
[91 99]
[92 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
