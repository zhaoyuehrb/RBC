%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 19:23:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGGGCUGCCCACCUGGCUGCCAACAUGAUCCCCGUCUCUGCCCUGGGCUCCUCUUAGCUCAGCUGAGCAUGGAGACAGCAGUUUCCAGAGAGUGGAGAGAGCAGGGCUAAAUAAAGAGGAGAUAAGGUGGCUUCUCACGGCCUGA\
) } def
/len { sequence length } bind def

/coor [
[86.79281616 176.40263367]
[80.17340088 162.94219971]
[88.42506409 150.41506958]
[89.83829498 135.48178101]
[82.35898590 134.92509460]
[73.95935822 147.35273743]
[65.55973816 159.78038025]
[64.24241638 175.54664612]
[50.70503998 181.75862122]
[42.30541611 194.18626404]
[33.90579605 206.61390686]
[35.52812576 222.57472229]
[23.96065712 233.69108582]
[8.07696438 231.43545532]
[0.06165605 217.53817749]
[6.06339073 202.66004944]
[21.47815132 198.21429443]
[29.87777328 185.78665161]
[38.27739334 173.35900879]
[38.99391937 158.48164368]
[53.13209534 151.38075256]
[61.53171539 138.95310974]
[69.93133545 126.52546692]
[65.32490540 117.47235870]
[63.26974869 107.85310364]
[63.74518204 98.34976959]
[66.55664825 89.59588623]
[71.35909271 82.13421631]
[77.69003296 76.38320923]
[85.00944519 72.61412048]
[92.74327087 70.94015503]
[100.32721710 71.31768799]
[104.41413879 56.88519287]
[96.96511841 43.20492172]
[101.31543732 28.62653351]
[114.40338898 21.60933495]
[118.49031830 7.17683601]
[122.57724762 -7.25566292]
[126.66416931 -21.68816185]
[130.75109863 -36.12066269]
[134.83802795 -50.55316162]
[137.37303162 -65.33740234]
[138.32760620 -80.30699158]
[139.28218079 -95.27658844]
[140.23674011 -110.24618530]
[141.19131470 -125.21578217]
[142.14587402 -140.18537903]
[129.10046387 -153.84841919]
[130.09486389 -172.39506531]
[144.04147339 -184.17497253]
[144.35986328 -199.17160034]
[144.67823792 -214.16821289]
[144.99661255 -229.16484070]
[137.55397034 -243.12612915]
[145.55967712 -255.68630981]
[145.87805176 -270.68292236]
[146.19642639 -285.67953491]
[127.24748230 -296.44174194]
[123.76141357 -323.66741943]
[117.87440491 -337.46389771]
[111.98739624 -351.26037598]
[106.10038757 -365.05688477]
[92.66716766 -374.46328735]
[94.36611176 -390.77420044]
[109.44949341 -397.21032715]
[122.40081787 -387.15075684]
[119.89687347 -370.94387817]
[125.78388214 -357.14739990]
[131.67089844 -343.35092163]
[137.55790710 -329.55441284]
[145.04269409 -330.03170776]
[167.49710083 -331.46356201]
[171.58401489 -345.89605713]
[175.67094421 -360.32855225]
[179.75787354 -374.76104736]
[183.84480286 -389.19354248]
[187.93173218 -403.62606812]
[192.01866150 -418.05856323]
[187.47644043 -433.81610107]
[199.04510498 -445.43923950]
[214.82382202 -440.97109985]
[218.58078003 -425.00811768]
[206.45115662 -413.97161865]
[202.36422729 -399.53912354]
[198.27729797 -385.10662842]
[194.19036865 -370.67413330]
[190.10343933 -356.24163818]
[186.01652527 -341.80914307]
[181.92959595 -327.37661743]
[184.80343628 -306.53900146]
[175.60443115 -290.82397461]
[161.19305420 -285.36117554]
[160.87467957 -270.36453247]
[160.55628967 -255.36791992]
[168.02171326 -242.47929382]
[159.99324036 -228.84645081]
[159.67485046 -213.84983826]
[159.35647583 -198.85321045]
[159.03810120 -183.85659790]
[168.59104919 -177.47265625]
[173.90270996 -167.14894104]
[173.53555298 -155.42434692]
[167.46513367 -145.24652100]
[157.11547852 -139.23080444]
[156.16090393 -124.26121521]
[155.20634460 -109.29161835]
[154.25177002 -94.32202148]
[153.29719543 -79.35242462]
[152.34263611 -64.38282776]
[162.45924377 -75.45777130]
[176.71488953 -80.12430573]
[191.42214966 -77.17536926]
[202.77680969 -67.37374115]
[207.84181213 -53.25475311]
[205.30702209 -38.47047806]
[195.82809448 -26.84506798]
[181.85690308 -21.38559914]
[167.00727844 -23.50423813]
[155.12028503 -32.65296936]
[149.27052307 -46.46623230]
[145.18359375 -32.03373337]
[141.09666443 -17.60123444]
[137.00975037 -3.16873598]
[132.92282104 11.26376343]
[128.83589172 25.69626236]
[136.30149841 38.53372192]
[132.36236572 53.22854614]
[118.84664154 60.97211838]
[114.75971222 75.40461731]
[134.28190613 97.27157593]
[125.81043243 130.68463135]
[132.27767944 144.21884155]
[138.74491882 157.75303650]
[145.21217346 171.28724670]
[160.19529724 176.31530762]
[167.15969849 190.50236511]
[161.97351074 205.43150330]
[147.71360779 212.24551392]
[132.84013367 206.90177917]
[126.17726898 192.57063293]
[131.67796326 177.75450134]
[125.21071625 164.22029114]
[118.74346924 150.68608093]
[112.27622986 137.15187073]
[104.79691315 136.59518433]
[103.98381042 151.57312012]
[110.29006195 165.18309021]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 23]
[6 22]
[7 21]
[9 19]
[10 18]
[11 17]
[32 129]
[33 128]
[36 125]
[37 124]
[38 123]
[39 122]
[40 121]
[41 120]
[42 109]
[43 108]
[44 107]
[45 106]
[46 105]
[47 104]
[50 99]
[51 98]
[52 97]
[53 96]
[55 94]
[56 93]
[57 92]
[59 70]
[60 69]
[61 68]
[62 67]
[72 89]
[73 88]
[74 87]
[75 86]
[76 85]
[77 84]
[78 83]
[131 144]
[132 143]
[133 142]
[134 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
