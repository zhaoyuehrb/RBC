%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 04:40:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUGGUGUGGAGAGUCUGCCCUUCCUCGUCUGGUAGUGCUGGGGUGUGUCAGGACCGGGCACUGGGUGAGGCUAAAGGG\
) } def
/len { sequence length } bind def

/coor [
[48.86354446 196.93060303]
[27.37011719 200.15629578]
[20.12342834 213.28967285]
[24.74937057 228.40179443]
[17.26084518 242.31932068]
[2.10066152 246.78523254]
[-11.73691368 239.14997864]
[-16.04229164 223.94342041]
[-8.26116848 210.18734741]
[6.99005413 206.04298401]
[14.23674297 192.90960693]
[8.89810467 185.88520813]
[5.99353647 177.51763916]
[5.83048344 168.62731934]
[8.44647503 160.09294128]
[13.60329819 152.76472473]
[20.80853081 147.37963867]
[29.36250877 144.48731995]
[38.42623138 144.39405823]
[47.10367203 147.13049316]
[57.18378830 136.02232361]
[67.26390839 124.91416931]
[77.34402466 113.80600739]
[87.42414093 102.69785309]
[96.84132385 91.02237701]
[105.56370544 78.81909180]
[114.28608704 66.61581421]
[123.00846863 54.41253281]
[131.73085022 42.20925140]
[140.45323181 30.00597000]
[149.17561340 17.80269051]
[157.89799500 5.59940863]
[158.42242432 -0.13440499]
[160.98800659 -4.52205563]
[164.65980530 -6.98322392]
[168.41029358 -7.43380165]
[178.49041748 -18.54196167]
[188.57052612 -29.65012169]
[198.65065002 -40.75828171]
[208.73075867 -51.86644363]
[218.81088257 -62.97460175]
[222.35488892 -78.39376068]
[236.63752747 -82.61933899]
[246.71765137 -93.72750092]
[241.40155029 -108.08012390]
[243.37588501 -123.25775909]
[252.18693542 -135.77270508]
[265.81002808 -142.74911499]
[281.11462402 -142.58384705]
[294.58389282 -135.31491089]
[303.12268066 -122.61262512]
[304.76879883 -107.39589691]
[299.14404297 -93.16141510]
[287.54089355 -83.18016052]
[272.62567139 -79.74575043]
[257.82580566 -83.64738464]
[247.74569702 -72.53922272]
[244.92268372 -57.91459274]
[229.91903687 -52.89448547]
[219.83892822 -41.78632355]
[209.75880432 -30.67816353]
[199.67869568 -19.57000351]
[189.59857178 -8.46184444]
[179.51844788 2.64631629]
[170.10127258 14.32178974]
[161.37889099 26.52507019]
[152.65650940 38.72835159]
[143.93412781 50.93163300]
[135.21174622 63.13491440]
[126.48936462 75.33819580]
[117.76698303 87.54147339]
[109.04460144 99.74475861]
[109.21162415 103.89601898]
[107.40567017 108.07279968]
[103.67793274 111.32634735]
[98.53230286 112.77796936]
[88.45218658 123.88613129]
[78.37206268 134.99429321]
[68.29194641 146.10244751]
[58.21183014 157.21060181]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 11]
[3 10]
[20 80]
[21 79]
[22 78]
[23 77]
[24 76]
[25 72]
[26 71]
[27 70]
[28 69]
[29 68]
[30 67]
[31 66]
[32 65]
[36 64]
[37 63]
[38 62]
[39 61]
[40 60]
[41 59]
[43 57]
[44 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
