%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 15:18:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGCCUGCCAAUCGGAGCACAGCUGGACUGUGUGGCUGGGGCCUGACACUGAGCUGUAGGGAAACUGAACUGUGAGGACCUCUGGUGAGAGGCCAGUGCCCUGCCCCACCCUGGAGCUUCAAAUAAAGAGCUUUUUACCCCC\
) } def
/len { sequence length } bind def

/coor [
[167.29206848 55.65061569]
[155.39176941 64.78203583]
[143.49147034 73.91345978]
[131.69148254 83.17414856]
[119.99322510 92.56299591]
[108.29495239 101.95185089]
[119.34898376 110.47576141]
[125.68719482 124.48048401]
[125.35625458 141.88890076]
[117.57465363 154.71258545]
[117.75806427 171.11070251]
[103.51258850 179.23466492]
[89.49276733 170.72721863]
[90.12097931 154.34010315]
[104.75097656 146.93098450]
[112.53257751 134.10729980]
[102.51950836 122.93776703]
[92.50734711 111.76921844]
[78.91272736 118.10848999]
[65.31810760 124.44776154]
[51.72349548 130.78703308]
[38.12887573 137.12631226]
[24.53425980 143.46559143]
[17.71813965 157.98867798]
[2.08091593 161.57431030]
[-10.38186932 151.47190857]
[-10.10983467 135.43116760]
[2.68833804 125.75716400]
[18.19498634 129.87097168]
[31.78960228 123.53169250]
[45.38422012 117.19242096]
[58.97883606 110.85314941]
[72.57345581 104.51387787]
[86.16806793 98.17459869]
[98.90610504 90.25358582]
[110.60437012 80.86473083]
[122.30263519 71.47587585]
[127.08360291 63.60168457]
[134.36004639 62.01315689]
[146.26036072 52.88173676]
[158.16065979 43.75031662]
[168.76725769 33.14371490]
[177.89868164 21.24341393]
[186.89974976 9.24421501]
[195.76939392 -2.85245442]
[188.68601990 -16.32788467]
[188.15797424 -31.48071098]
[194.23646545 -45.30359650]
[205.66682434 -55.07641220]
[220.14709473 -58.90148544]
[234.79151917 -56.07191849]
[243.66116333 -68.16858673]
[252.53080750 -80.26525879]
[261.26797485 -92.45795441]
[269.87161255 -104.74523926]
[278.47525024 -117.03251648]
[280.05270386 -132.77488708]
[293.69079590 -138.76252747]
[302.29443359 -151.04980469]
[310.89807129 -163.33709717]
[319.50170898 -175.62437439]
[328.10537720 -187.91165161]
[317.71490479 -198.79420471]
[309.64987183 -211.49076843]
[304.21865845 -225.51235962]
[301.62829590 -240.31941223]
[301.97647095 -255.34249878]
[305.24789429 -270.00427246]
[311.31506348 -283.74166870]
[319.94308472 -296.02740479]
[330.79873657 -306.39041138]
[343.46359253 -314.43374634]
[357.44985962 -319.84985352]
[372.21929932 -322.43234253]
[387.20397949 -322.08377075]
[401.82800293 -318.81939697]
[415.52972412 -312.76657104]
[424.13336182 -325.05383301]
[426.51989746 -333.95132446]
[433.06112671 -337.51254272]
[441.93078613 -349.60919189]
[450.80041504 -361.70587158]
[459.67007446 -373.80255127]
[468.53970337 -385.89920044]
[469.78619385 -402.25091553]
[484.68551636 -409.10238647]
[497.91052246 -399.40542603]
[495.85647583 -383.13540649]
[480.63638306 -377.02957153]
[471.76675415 -364.93289185]
[462.89709473 -352.83624268]
[454.02746582 -340.73956299]
[445.15780640 -328.64288330]
[436.42065430 -316.45019531]
[427.81698608 -304.16290283]
[438.19107056 -293.35769653]
[446.26028442 -280.73208618]
[451.71289062 -266.77032471]
[454.33761597 -252.00833130]
[454.03170776 -237.01313782]
[450.80508423 -222.36108398]
[444.77990723 -208.61572266]
[436.18600464 -196.30609131]
[425.35220337 -185.90635681]
[412.69354248 -177.81758118]
[398.69552612 -172.35220337]
[383.89550781 -169.72204590]
[368.86193848 -170.03004456]
[354.17266846 -173.26620483]
[340.39263916 -179.30799866]
[331.78900146 -167.02072144]
[323.18536377 -154.73344421]
[314.58169556 -142.44616699]
[305.97805786 -130.15887451]
[305.01602173 -115.29537964]
[290.76254272 -108.42887115]
[282.15890503 -96.14159393]
[273.55523682 -83.85430908]
[272.28564453 -76.51548767]
[264.62747192 -71.39561462]
[255.75782776 -59.29894257]
[246.88818359 -47.20227432]
[253.99044800 -34.08650970]
[254.69671631 -19.12620735]
[248.81340027 -5.28613949]
[237.45811462 4.66764069]
[222.84782410 8.72058010]
[207.86605835 6.01719046]
[198.99641418 18.11385918]
[197.56700134 25.42323685]
[189.79898071 30.37483406]
[180.66755676 42.27513504]
[195.05761719 38.04121780]
[209.87953186 40.34573746]
[222.30477905 48.74891663]
[229.96218872 61.64713669]
[231.39047241 76.57897949]
[226.31706238 90.69494629]
[215.71014404 101.30123138]
[201.59385681 106.37378693]
[186.66210938 104.94460297]
[173.76434326 97.28641510]
[165.36192322 84.86066437]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 41]
[2 40]
[3 39]
[4 37]
[5 36]
[6 35]
[9 16]
[10 15]
[18 34]
[19 33]
[20 32]
[21 31]
[22 30]
[23 29]
[42 132]
[43 131]
[44 129]
[45 128]
[51 122]
[52 121]
[53 120]
[54 118]
[55 117]
[56 116]
[58 114]
[59 113]
[60 112]
[61 111]
[62 110]
[77 95]
[78 94]
[80 93]
[81 92]
[82 91]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
