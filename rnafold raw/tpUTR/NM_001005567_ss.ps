%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 08:22:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCCAAUCAUCACAGUCACUCUCACAGAAUGUAAAAACUCUAAUAUUUAGCAGGAGAGCAAAGAAGUCUCA\
) } def
/len { sequence length } bind def

/coor [
[64.91303253 348.29757690]
[49.87268829 348.46435547]
[35.04430771 345.94265747]
[20.90455818 340.81359863]
[7.90797997 333.24203491]
[-3.52764487 323.47134399]
[-13.03470707 311.81564331]
[-20.30759239 298.64959717]
[-25.11251068 284.39642334]
[-27.29500198 269.51434326]
[-26.78490829 254.48171997]
[-23.59862709 239.78181458]
[-17.83858299 225.88714600]
[-9.68994045 213.24438477]
[0.58535779 202.25993347]
[12.65700245 193.28691101]
[26.13694000 186.61375427]
[40.59184647 182.45498657]
[55.55706024 180.94427490]
[70.55150604 182.13018799]
[74.38180542 167.62747192]
[78.21210480 153.12475586]
[82.04240417 138.62203979]
[85.87270355 124.11932373]
[74.39671326 111.21578979]
[72.69247437 94.03163147]
[81.41043091 79.12536621]
[97.22328949 72.18611908]
[99.79268646 57.40781403]
[102.36208344 42.62951279]
[104.93148041 27.85121155]
[107.50087738 13.07291126]
[110.07027435 -1.70539081]
[98.22984314 -11.48801517]
[92.88208008 -25.88582802]
[95.46550751 -41.02589035]
[105.28520203 -52.83559799]
[119.69970703 -58.13820648]
[134.83158875 -55.50733185]
[146.61045837 -45.65067291]
[151.86785889 -31.21961784]
[149.18957520 -16.09604836]
[139.29603577 -4.34813070]
[124.84857178 0.86400640]
[122.27917480 15.64230824]
[119.70977783 30.42061043]
[117.14038086 45.19890976]
[114.57098389 59.97721100]
[112.00158691 74.75551605]
[121.74160004 82.43227386]
[127.20185852 93.56718445]
[127.30752563 105.96836853]
[122.03779602 117.19470215]
[112.43000793 125.03631592]
[100.37541962 127.94962311]
[96.54512024 142.45233154]
[92.71482086 156.95504761]
[88.88452148 171.45777893]
[85.05422211 185.96049500]
[98.67881012 192.33311462]
[110.94644928 201.03627014]
[121.46277618 211.79017639]
[129.88973999 224.24914551]
[135.95646667 238.01268005]
[139.46789551 252.63832092]
[140.31118774 267.65594482]
[138.45921326 282.58276367]
[133.97151184 296.93896484]
[126.99234772 310.26303101]
[117.74606323 322.12667847]
[106.52989960 332.14852905]
[93.70439911 340.00640869]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 59]
[21 58]
[22 57]
[23 56]
[24 55]
[28 49]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
