%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 08:31:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCAACUGAUCAUCCAUCUGCUGACUGCUCACUGCUGCUGCCACUUCCAGGGAAACCACUAGCAGCUGCCAAUGUAUUCUGAACAAAUAAAUUAAUGCUAUAGCUGAA\
) } def
/len { sequence length } bind def

/coor [
[40.31377029 315.13201904]
[39.07197571 330.19683838]
[33.44336700 344.22573853]
[23.92843628 355.97128296]
[11.37324429 364.38903809]
[-3.10580993 368.73049927]
[-18.22126007 368.60964966]
[-32.62904739 364.03723145]
[-45.04804611 355.41983032]
[-54.37396240 343.52365112]
[-59.77754211 329.40655518]
[-60.77830887 314.32379150]
[-57.28726578 299.61651611]
[-49.61484146 286.59246826]
[-38.44326401 276.40979004]
[-24.76589394 269.97387695]
[-9.79891968 267.85699463]
[5.12680626 270.24743652]
[11.74512291 256.78643799]
[10.41722298 241.95115662]
[23.44959068 232.98075867]
[30.06790733 219.51979065]
[36.68622208 206.05880737]
[43.30453873 192.59783936]
[37.46208191 181.01634216]
[39.43239594 167.99736023]
[48.71167374 158.38188171]
[62.03656769 155.87730408]
[69.03657532 142.61080933]
[55.68748093 128.47480774]
[48.37613678 110.45901489]
[48.09874725 91.01813507]
[54.89310074 72.80107117]
[67.83345032 58.28996658]
[85.15660858 49.46201706]
[83.02188873 34.61469269]
[73.39937592 22.05611992]
[79.24663544 8.35726070]
[77.11191559 -6.49006081]
[74.97719574 -21.33738327]
[72.84246826 -36.18470383]
[70.70774841 -51.03202438]
[59.41714478 -53.64116287]
[49.51820755 -59.61387634]
[41.98128510 -68.34516144]
[37.53910065 -78.96059418]
[36.61555862 -90.40387726]
[39.28532791 -101.54194641]
[45.26811981 -111.27716827]
[53.95800018 -118.65550995]
[64.48474121 -122.96001434]
[64.05640411 -137.95390320]
[54.99862289 -151.62461853]
[62.55014038 -166.18162537]
[78.94260406 -166.64993286]
[87.31284332 -152.54776001]
[79.05028534 -138.38223267]
[79.47863007 -123.38835144]
[96.45149994 -115.52227783]
[107.27657318 -100.16790009]
[108.99769592 -81.38027954]
[101.07601929 -64.16996765]
[85.55506897 -53.16674805]
[87.68979645 -38.31942749]
[89.82451630 -23.47210503]
[91.95923615 -8.62478352]
[94.09396362 6.22253799]
[103.56378937 17.71913147]
[97.86920929 32.47997284]
[100.00392914 47.32729340]
[116.63588715 50.02339172]
[131.56558228 57.83332443]
[143.26533508 69.95794678]
[150.53797913 85.15660858]
[165.38529968 83.02188873]
[180.23263550 80.88716888]
[188.32286072 67.50501251]
[203.13885498 62.50294495]
[217.68492126 68.24278259]
[225.09288025 82.01435852]
[221.86489868 97.31514740]
[209.52514648 106.92059326]
[193.90007019 106.29528809]
[182.36735535 95.73448944]
[167.52003479 97.86920929]
[152.67271423 100.00392914]
[152.00393677 108.36685944]
[150.01585388 116.51751709]
[146.75888062 124.24913025]
[142.31567383 131.36555481]
[136.79891968 137.68624878]
[130.34858704 143.05087280]
[123.12833405 147.32328796]
[115.32131958 150.39515686]
[107.12561035 152.18850708]
[98.74913025 152.65785217]
[90.40438080 151.79129028]
[82.30307007 149.61080933]
[75.30306244 162.87730408]
[80.79302216 179.41130066]
[72.84908295 194.53808594]
[56.76551819 199.21615601]
[50.14720154 212.67712402]
[43.52888489 226.13810730]
[36.91056824 239.59907532]
[37.76507950 255.39718628]
[25.20609856 263.40475464]
[18.58778191 276.86575317]
[29.59512520 287.22573853]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 108]
[19 107]
[21 105]
[22 104]
[23 103]
[24 102]
[28 99]
[29 98]
[35 70]
[36 69]
[38 67]
[39 66]
[40 65]
[41 64]
[42 63]
[51 58]
[52 57]
[74 86]
[75 85]
[76 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
