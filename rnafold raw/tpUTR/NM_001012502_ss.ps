%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 13:25:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACACAGAGAGAAGAACCUACUCCAGAAAUGGACUGGUCCAGUCACAGUCACCCCCACUUUAAUCCGCAGGCAGCCUGGAACAGUCUAGAGGAGAUUUGUAUAAAAAGUAGAUACCAAG\
) } def
/len { sequence length } bind def

/coor [
[93.53913879 516.05493164]
[79.66088104 510.30609131]
[66.65175629 502.79492188]
[54.73436356 493.64996338]
[44.11262894 483.02761841]
[34.96830368 471.10971069]
[27.45785904 458.10018921]
[21.70980835 444.22158813]
[17.82250977 429.71145630]
[15.86247826 414.81808472]
[15.86325264 399.79626465]
[17.82481956 384.90304565]
[21.71361542 370.39334106]
[27.46309853 356.51535034]
[34.97488403 343.50656128]
[44.12043762 331.58963013]
[54.74326706 320.96838379]
[66.66160583 311.82464600]
[79.67150116 304.31481934]
[93.55035400 298.56741333]
[108.06067657 294.68081665]
[106.10278320 279.80914307]
[104.14488983 264.93746948]
[102.18699646 250.06579590]
[92.47096252 246.14704895]
[85.25020599 238.44435120]
[81.91546631 228.34103394]
[83.15098572 217.69158936]
[88.79543304 208.48126221]
[97.85919952 202.45594788]
[97.07415771 187.47651672]
[96.28911591 172.49707031]
[95.50408173 157.51762390]
[94.71903992 142.53817749]
[93.93399811 127.55873871]
[93.14896393 112.57929230]
[85.69568634 100.74965668]
[91.87159729 88.20574188]
[91.08655548 73.22630310]
[90.30152130 58.24686050]
[89.51647949 43.26741409]
[88.73143768 28.28797340]
[80.28250122 14.91165161]
[87.34310150 1.79688334]
[78.73971558 -5.10900545]
[75.49152374 -15.42056942]
[78.45994568 -25.58595848]
[86.40794373 -32.24489212]
[86.40794373 -47.24489212]
[86.40794373 -62.24489212]
[71.95891571 -66.68527985]
[59.46158218 -75.18869019]
[50.02719116 -86.99901581]
[44.49465179 -101.06607819]
[43.35590744 -116.13906097]
[46.71221542 -130.87767029]
[54.26513290 -143.97135925]
[65.34306335 -154.25585938]
[78.96096802 -160.81666565]
[93.90794373 -163.07040405]
[108.85491943 -160.81666565]
[122.47281647 -154.25585938]
[133.55075073 -143.97135925]
[141.10366821 -130.87767029]
[144.45997620 -116.13906097]
[143.32122803 -101.06607819]
[137.78869629 -86.99901581]
[128.35430908 -75.18869019]
[115.85697174 -66.68527985]
[101.40794373 -62.24489212]
[101.40794373 -47.24489212]
[101.40794373 -32.24489212]
[112.34218597 -16.38553810]
[102.32254028 1.01184404]
[110.71533203 13.31673431]
[103.71088409 27.50293350]
[104.49591827 42.48237610]
[105.28096008 57.46181870]
[106.06600189 72.44126129]
[106.85103607 87.42070770]
[114.30431366 99.25034332]
[108.12840271 111.79425812]
[108.91344452 126.77369690]
[109.69847870 141.75314331]
[110.48352051 156.73258972]
[111.26856232 171.71202087]
[112.05359650 186.69146729]
[112.83863831 201.67091370]
[128.45413208 214.12615967]
[130.05096436 233.73559570]
[117.05867004 248.10789490]
[119.01656342 262.97958374]
[120.97445679 277.85125732]
[122.93234253 292.72290039]
[137.95416260 292.72155762]
[152.84764099 294.68099976]
[167.35792542 298.56771851]
[181.23672485 304.31521606]
[194.24656677 311.82513428]
[206.16484070 320.96899414]
[216.78758240 331.59030151]
[225.93304443 343.50732422]
[233.44471741 356.51617432]
[239.19409180 370.39419556]
[243.08277893 384.90396118]
[245.04421997 399.79718018]
[245.04487610 414.81896973]
[243.08473206 429.71237183]
[239.19731140 444.22247314]
[233.44915771 458.10101318]
[225.93861389 471.11047363]
[216.79418945 483.02832031]
[206.17236328 493.65054321]
[194.25491333 502.79544067]
[181.24571228 510.30651855]
[167.36741638 516.05523682]
[152.85746765 519.94323730]
[137.96415710 521.90393066]
[122.94234467 521.90386963]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[21 94]
[22 93]
[23 92]
[24 91]
[30 88]
[31 87]
[32 86]
[33 85]
[34 84]
[35 83]
[36 82]
[38 80]
[39 79]
[40 78]
[41 77]
[42 76]
[44 74]
[48 72]
[49 71]
[50 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
