%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 02:27:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGUGGACACAACAGCAGUCUCCUUCAGCACGGCGUGGUGUGUCCCUGGACACAGCUCUUCAUUCCAUUGACUUAGAGGCAACAGGAUUGAUCAUUCUUUUAUAGAGCAUAUUUGCCAAUAAAGCUUUUGGAAGCCGGA\
) } def
/len { sequence length } bind def

/coor [
[29.01701736 207.50027466]
[20.25440407 219.67469788]
[11.49178886 231.84912109]
[2.72917366 244.02354431]
[0.94727874 259.74407959]
[-12.76747799 265.55395508]
[-21.53009224 277.72839355]
[-30.29270744 289.90280151]
[-39.05532074 302.07723999]
[-33.29861832 316.39031982]
[-36.21644592 331.53921509]
[-46.87772751 342.69003296]
[-61.88049698 346.28454590]
[-76.43741608 341.17578125]
[-85.90343475 328.99389648]
[-87.25796509 313.62612915]
[-80.06880188 299.97622681]
[-66.62996674 292.39987183]
[-51.22974396 293.31463623]
[-42.46713257 281.14019775]
[-33.70451736 268.96578979]
[-24.94190025 256.79135132]
[-23.78676796 241.94160461]
[-9.44524956 235.26092529]
[-0.68263471 223.08650208]
[8.07997990 210.91207886]
[16.84259415 198.73765564]
[11.49267673 186.45709229]
[12.94145107 173.03123474]
[20.91518021 161.99879456]
[33.40618134 156.32110596]
[47.17740250 157.58766174]
[56.20907593 145.61148071]
[65.24074554 133.63529968]
[74.27242279 121.65911865]
[68.09405518 113.25364685]
[64.66849518 103.10535431]
[64.47795105 92.11713409]
[67.70848846 81.32118225]
[74.21710205 71.78202820]
[61.39703751 63.99447632]
[48.57697296 56.20692825]
[35.75690842 48.41937637]
[22.93684387 40.63182449]
[10.11677933 32.84427643]
[-6.28142548 33.02006912]
[-14.39876842 18.77083206]
[-5.88482237 4.75495625]
[10.50199509 5.39077425]
[17.90432930 20.02421188]
[30.72439384 27.81176186]
[43.54446030 35.59931183]
[56.36452484 43.38686371]
[69.18458557 51.17441177]
[82.00465393 58.96196365]
[96.55638885 55.32232666]
[104.20063782 42.41630173]
[111.84488678 29.51027870]
[119.48913574 16.60425568]
[127.13338470 3.69823217]
[132.98922729 -10.11151600]
[136.95216370 -24.57855415]
[140.91508484 -39.04559326]
[137.09864807 -54.39958954]
[147.92352295 -64.63049316]
[151.88644409 -79.09753418]
[155.84938049 -93.56456757]
[150.74761963 -111.21891785]
[163.61009216 -123.10649109]
[167.24974060 -137.65823364]
[170.88937378 -152.20996094]
[169.93562317 -161.37767029]
[174.77558899 -167.04354858]
[178.73852539 -181.51058960]
[174.06124878 -197.22857666]
[185.52976990 -208.95057678]
[201.34623718 -204.61799622]
[205.24003601 -188.68782043]
[193.20556641 -177.54765320]
[189.24263000 -163.08061218]
[185.44111633 -148.57032776]
[181.80146790 -134.01858521]
[178.16183472 -119.46685791]
[184.12579346 -108.88463593]
[181.15351868 -96.69271851]
[170.31642151 -89.60163879]
[166.35348511 -75.13459778]
[162.39054871 -60.66756439]
[166.49046326 -46.34834290]
[155.38212585 -35.08266068]
[151.41918945 -20.61562347]
[147.45626831 -6.14858532]
[159.21868896 -15.45693398]
[173.82626343 -18.86553764]
[188.49369812 -15.72446156]
[200.42428589 -6.63262939]
[207.34312439 6.67637205]
[207.93099976 21.66484833]
[202.07580566 35.47486877]
[190.89398193 45.47320557]
[176.51762390 49.75342941]
[161.68794250 47.49940109]
[149.23258972 39.14091110]
[141.52650452 26.27171707]
[140.03941345 11.34248161]
[132.39515686 24.24850464]
[124.75091553 37.15452957]
[117.10666656 50.06055450]
[109.46240997 62.96657562]
[117.77066040 66.80873108]
[124.80630493 72.44627380]
[130.19931030 79.49816132]
[133.68672180 87.51197052]
[135.12504578 95.99266052]
[134.49516296 104.43305206]
[131.89968872 112.34410095]
[127.55324554 119.28326416]
[137.61502075 130.40805054]
[147.67678833 141.53283691]
[157.73855591 152.65760803]
[173.15202332 150.86741638]
[186.65747070 158.50825500]
[193.06179810 172.64205933]
[189.90238953 187.83409119]
[178.39411926 198.24270630]
[162.96214294 199.86558533]
[149.54037476 192.07868958]
[143.28974915 177.87625122]
[146.61376953 162.71939087]
[136.55200195 151.59460449]
[126.49023438 140.46981812]
[116.42845917 129.34503174]
[106.67576599 132.96148682]
[96.28446960 133.42485046]
[86.24860382 130.69079590]
[77.21692657 142.66697693]
[68.18525696 154.64315796]
[59.15358353 166.61932373]
[64.31644440 182.68594360]
[58.96711349 198.51664734]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[3 25]
[4 24]
[6 22]
[7 21]
[8 20]
[9 19]
[32 138]
[33 137]
[34 136]
[35 135]
[40 55]
[41 54]
[42 53]
[43 52]
[44 51]
[45 50]
[56 109]
[57 108]
[58 107]
[59 106]
[60 105]
[61 92]
[62 91]
[63 90]
[65 88]
[66 87]
[67 86]
[69 83]
[70 82]
[71 81]
[73 80]
[74 79]
[117 132]
[118 131]
[119 130]
[120 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
