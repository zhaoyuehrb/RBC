%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 14:06:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUGAUGUAUGAAGGAGUUGGAGUUGUUGAAACCAAGGUGUCCAUGAUCCCUCCCCACUGACCUUUUCUAAGAAAAUUCUUGUGCCCGCAUUGGUAUUAAAUCCUCGCAUUCAGUCUUCCUGCCUCUA\
) } def
/len { sequence length } bind def

/coor [
[94.00904083 436.91012573]
[79.60009766 430.83422852]
[72.51376343 416.89443970]
[76.09597778 401.67269897]
[88.65534210 392.35623169]
[89.38004303 377.37374878]
[82.26667023 364.28753662]
[90.66166687 350.87728882]
[91.38636780 335.89480591]
[92.11106873 320.91232300]
[84.99770355 307.82608032]
[93.39270020 294.41583252]
[94.11740112 279.43334961]
[94.84210205 264.45086670]
[95.56680298 249.46839905]
[95.74804688 234.46949768]
[95.38558960 219.47387695]
[95.02313232 204.47825623]
[94.66067505 189.48263550]
[83.73361206 179.42605591]
[83.15240479 164.22352600]
[93.77476501 152.83039856]
[93.41230774 137.83477783]
[93.04985046 122.83915710]
[80.99170685 114.44355774]
[76.13372803 100.57686615]
[80.31608582 86.49166870]
[91.95452881 77.52330017]
[91.59207153 62.52767944]
[91.22961426 47.53205872]
[90.86716461 32.53643799]
[82.79865265 18.92725754]
[90.22615814 6.01674032]
[89.86370087 -8.97887993]
[89.50124359 -23.97450066]
[89.13878632 -38.97011948]
[88.77633667 -53.96574020]
[80.70783234 -67.57492065]
[88.13533020 -80.48543549]
[87.77287292 -95.48105621]
[87.41041565 -110.47667694]
[76.25003052 -121.34329987]
[76.09606171 -136.55615234]
[86.52450562 -147.12892151]
[86.16204834 -162.12452698]
[85.79959106 -177.12014771]
[85.43713379 -192.11576843]
[85.07468414 -207.11138916]
[76.29342651 -194.95040894]
[63.17235184 -187.68147278]
[48.20541000 -186.68618774]
[34.23737717 -192.15371704]
[23.92317390 -203.04487610]
[19.22323418 -217.28955078]
[21.03087997 -232.18022156]
[29.00253105 -244.88662720]
[41.62300491 -252.99363708]
[56.49351501 -254.96034241]
[70.78760529 -250.41293335]
[81.78838348 -240.21572876]
[87.40522003 -226.30509949]
[91.34582520 -240.77822876]
[85.61394501 -252.40663147]
[89.26592255 -264.42623901]
[99.80161285 -270.49783325]
[104.09079742 -284.87152100]
[108.37998199 -299.24520874]
[112.66916656 -313.61889648]
[116.95835876 -327.99258423]
[115.69360352 -344.89929199]
[131.58947754 -350.79486084]
[141.65505981 -337.15225220]
[131.33204651 -323.70339966]
[127.04285431 -309.32971191]
[122.75366974 -294.95602417]
[118.46448517 -280.58233643]
[114.17530060 -266.20864868]
[119.18508911 -249.43515015]
[105.81896210 -236.83761597]
[101.87834930 -222.36448669]
[100.07029724 -207.47384644]
[100.43275452 -192.47822571]
[100.79521179 -177.48260498]
[101.15766907 -162.48698425]
[101.52012634 -147.49136353]
[112.44718933 -137.43478394]
[113.02839661 -122.23226166]
[102.40603638 -110.83913422]
[102.76849365 -95.84351349]
[103.13095093 -80.84789276]
[111.17353058 -68.31130219]
[103.77195740 -54.32819748]
[104.13440704 -39.33257675]
[104.49686432 -24.33695602]
[104.85932159 -9.34133625]
[105.22177887 5.65428400]
[113.26435852 18.19087791]
[105.86277771 32.17398453]
[106.22523499 47.16960144]
[106.58769226 62.16522217]
[106.95014954 77.16084290]
[119.00829315 85.55644226]
[123.86627197 99.42313385]
[119.68391418 113.50833130]
[108.04547119 122.47669983]
[108.40792847 137.47232056]
[108.77038574 152.46794128]
[119.93077087 163.33456421]
[120.08473969 178.54740906]
[109.65629578 189.12017822]
[110.01875305 204.11579895]
[110.38121033 219.11141968]
[110.74366760 234.10704041]
[113.57960510 238.73112488]
[114.22130585 243.49824524]
[112.99777985 247.52381897]
[110.54928589 250.19309998]
[109.82458496 265.17556763]
[109.09988403 280.15805054]
[108.37518311 295.14053345]
[115.43671417 309.29843140]
[107.09355164 321.63702393]
[106.36885071 336.61950684]
[105.64414978 351.60198975]
[112.70568848 365.75985718]
[104.36252594 378.09844971]
[103.63782501 393.08093262]
[115.23937988 403.56607056]
[117.33576202 419.06246948]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 127]
[6 126]
[8 124]
[9 123]
[10 122]
[12 120]
[13 119]
[14 118]
[15 117]
[16 113]
[17 112]
[18 111]
[19 110]
[22 107]
[23 106]
[24 105]
[28 101]
[29 100]
[30 99]
[31 98]
[33 96]
[34 95]
[35 94]
[36 93]
[37 92]
[39 90]
[40 89]
[41 88]
[44 85]
[45 84]
[46 83]
[47 82]
[48 81]
[61 80]
[62 79]
[65 77]
[66 76]
[67 75]
[68 74]
[69 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
