%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 15:52:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAGAUUCGAAGAGACAGAUUUUAUCUUCCUUUCAUUUCUUUCUCUUGUGCAUUUAAUAAAGGAUGGUAUCUAUAAACAAUGC\
) } def
/len { sequence length } bind def

/coor [
[116.23255920 126.38495636]
[109.23674774 129.56930542]
[101.67227936 130.93324280]
[94.00485992 130.39276123]
[86.70652771 127.98116302]
[80.22660828 123.84690094]
[74.96403503 118.24450684]
[71.24279785 111.51889801]
[69.29199219 104.08412170]
[69.23172760 96.39791107]
[71.06570435 88.93346405]
[58.76959610 80.34243774]
[46.47348785 71.75141144]
[34.17737961 63.16038132]
[21.88127327 54.56935501]
[9.58516693 45.97832870]
[-6.15881681 44.41706085]
[-12.16045284 30.78512764]
[-24.45656013 22.19410133]
[-36.75266647 13.60307312]
[-48.81403732 22.73426056]
[-63.10743713 27.68945312]
[-78.23254395 27.98318863]
[-92.70755768 23.58669472]
[-105.11436462 14.93069172]
[-114.23746490 2.86320710]
[-119.18307495 -11.43350887]
[-119.46668243 -26.55881119]
[-115.06048584 -41.03087616]
[-106.39617157 -53.43187714]
[-94.32257843 -62.54689026]
[-80.02255249 -67.48292542]
[-64.89706421 -67.75639343]
[-50.42795181 -63.34049988]
[-38.03276062 -54.66788101]
[-28.92583847 -42.58818054]
[-23.99938774 -28.28484917]
[-23.73605728 -13.15918064]
[-28.16164017 1.30696619]
[-15.86553288 9.89799309]
[-3.56942606 18.48902130]
[11.29505730 19.43579865]
[18.17619324 33.68222046]
[30.47230148 42.27324677]
[42.76840973 50.86427307]
[55.06451416 59.45529938]
[67.36062622 68.04632568]
[79.65673065 76.63735199]
[101.76083374 69.07167816]
[122.86341858 79.09722900]
[130.96188354 101.01174164]
[145.38926697 105.11669159]
[159.81665039 109.22163391]
[174.24403381 113.32657623]
[188.67141724 117.43152618]
[197.27239990 105.92439270]
[209.28141785 98.09426117]
[223.22164917 94.87936401]
[237.38725281 96.65185547]
[250.05209351 103.17489624]
[259.68005371 113.63405609]
[265.11145020 126.73892212]
[265.70254517 140.88230896]
[279.96838379 145.51756287]
[294.23422241 150.15281677]
[308.50009155 154.78807068]
[325.43240356 153.93222046]
[330.94213867 169.96591187]
[317.06030273 179.69889832]
[303.86483765 169.05392456]
[289.59896851 164.41867065]
[275.33312988 159.78341675]
[261.06729126 155.14816284]
[251.05429077 167.28656006]
[237.13909912 174.71438599]
[221.40565491 176.28623962]
[206.22280884 171.73620605]
[193.88764954 161.72232056]
[186.27796936 147.73150635]
[184.56648254 131.85890198]
[170.13909912 127.75395966]
[155.71170044 123.64901733]
[141.28431702 119.54407501]
[126.85694122 115.43912506]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 48]
[12 47]
[13 46]
[14 45]
[15 44]
[16 43]
[18 41]
[19 40]
[20 39]
[51 84]
[52 83]
[53 82]
[54 81]
[55 80]
[63 73]
[64 72]
[65 71]
[66 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
