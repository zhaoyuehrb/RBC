%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 11:37:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCUCUGCUCAGGCCAGGAGUCCAGCUGCUGAUGGGCACGUCCCCCAGGGCCAGCCGGCUCCGGUCCUGUCCU\
) } def
/len { sequence length } bind def

/coor [
[71.05873108 113.54212189]
[61.25742340 124.89704895]
[51.45611572 136.25196838]
[41.65480423 147.60690308]
[31.85349655 158.96182251]
[33.26078796 174.70333862]
[23.06100655 186.77561951]
[7.30549908 188.01640320]
[-4.65826941 177.68954468]
[-5.73240805 161.92179871]
[4.72035122 150.06788635]
[20.49857140 149.16052246]
[30.29988098 137.80558777]
[40.10118866 126.45066071]
[49.90249634 115.09574127]
[59.70380783 103.74081421]
[78.88636780 85.55197144]
[97.06398773 89.71261597]
[100.79434204 75.18386841]
[104.52468872 60.65512466]
[108.25503540 46.12637711]
[107.36003113 36.73116684]
[112.45778656 31.07380867]
[116.79326630 16.71401596]
[113.37488556 1.26651621]
[124.46054077 -8.68122387]
[128.79602051 -23.04101562]
[133.13150024 -37.40081024]
[137.46696472 -51.76060104]
[141.50076294 -66.20803833]
[145.23110962 -80.73678589]
[139.29777527 -92.40509033]
[142.91238403 -104.56461334]
[153.55506897 -110.69213104]
[157.89054871 -125.05192566]
[162.22601318 -139.41171265]
[166.56149292 -153.77151489]
[157.84811401 -166.75653076]
[159.57127380 -182.29888916]
[170.91735840 -193.05995178]
[186.52908325 -193.95866394]
[199.03509521 -184.57069397]
[202.53041077 -169.32875061]
[195.36465454 -155.42962646]
[180.92129517 -149.43603516]
[176.58581543 -135.07623291]
[172.25033569 -120.71644592]
[167.91485596 -106.35665894]
[172.93336487 -89.67380524]
[159.75985718 -77.00643921]
[156.02951050 -62.47769165]
[157.45928955 -54.99781418]
[151.82676697 -47.42512512]
[147.49128723 -33.06533051]
[143.15580750 -18.70553970]
[138.82032776 -4.34574652]
[142.54881287 10.07464504]
[131.15306091 21.04949379]
[126.81758118 35.40928650]
[122.78378296 49.85672379]
[119.05343628 64.38547516]
[115.32308197 78.91421509]
[111.59273529 93.44296265]
[113.78398132 108.28205109]
[121.55438995 121.11251831]
[136.96032715 124.63849640]
[145.28984070 138.06961060]
[141.60118103 153.43740845]
[128.08276367 161.62445068]
[112.75481415 157.77351379]
[104.71115112 144.16929626]
[108.72392273 128.88291931]
[100.95352173 116.05245972]
[93.47982025 115.42487335]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[5 12]
[18 63]
[19 62]
[20 61]
[21 60]
[23 59]
[24 58]
[26 56]
[27 55]
[28 54]
[29 53]
[30 51]
[31 50]
[34 48]
[35 47]
[36 46]
[37 45]
[64 73]
[65 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
