%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 11:38:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACAGGAGUUCCAGACCAGCCUGGGCAAUGUAGCAAGACGCUGUCUCUAUUUAUACAAUAAAAUUUUUUUAAAAAAGGAA\
) } def
/len { sequence length } bind def

/coor [
[124.33388519 102.92046356]
[109.60826111 105.77632904]
[94.94004059 108.91374207]
[80.33460999 112.33154297]
[65.72917175 115.74934387]
[59.89806366 128.05973816]
[48.17111588 134.59585571]
[35.02398300 133.12396240]
[25.32479858 124.41835022]
[10.59917355 127.27422333]
[2.53077173 132.09211731]
[-4.74458122 129.94607544]
[-19.56878662 132.23580933]
[-34.39299393 134.52555847]
[-49.21720123 136.81529236]
[-58.35227203 149.71203613]
[-73.94496155 152.28955078]
[-86.74440002 143.01864624]
[-89.15691376 127.39957428]
[-79.75119781 114.69886017]
[-64.10749817 112.45161438]
[-51.50693893 121.99108887]
[-36.68273163 119.70134735]
[-21.85852623 117.41160583]
[-7.03432035 115.12187195]
[7.74330664 112.54859161]
[22.46893120 109.69272614]
[31.14945602 95.42468262]
[47.76257706 91.65487671]
[62.31137085 101.14391327]
[76.91680145 97.72611237]
[91.52223206 94.30831146]
[98.22399139 89.43723297]
[106.75238800 91.05070496]
[121.47801208 88.19483948]
[122.79033661 86.44250488]
[124.34772491 84.97477722]
[125.49596405 70.01879120]
[126.64420319 55.06280518]
[127.79244232 40.10681915]
[122.97631836 23.85131836]
[137.26330566 14.72343922]
[149.98950195 25.92524338]
[142.74842834 41.25505829]
[141.60018921 56.21104431]
[140.45195007 71.16703033]
[139.30371094 86.12301636]
[151.39529419 77.24644470]
[164.79782104 70.51055145]
[179.13595581 66.10395813]
[194.00814819 64.15007019]
[208.99794006 64.70362091]
[223.68551636 67.74909210]
[237.65957642 73.20121002]
[250.52879333 80.90727997]
[261.93273926 90.65149689]
[271.55209351 102.16098785]
[279.11743164 115.11342621]
[284.41690063 129.14608765]
[287.30209351 143.86599731]
[287.69223022 158.86091614]
[285.57635498 173.71093750]
[281.01373291 188.00018311]
[274.13214111 201.32849121]
[265.12429810 213.32260132]
[254.24246216 223.64663696]
[241.79138184 232.01147461]
[228.11972046 238.18284607]
[213.61036682 241.98794556]
[198.66966248 243.32020569]
[183.71597290 242.14230347]
[169.16810608 238.48724365]
[155.43345642 232.45738220]
[142.89665222 224.22157288]
[131.90878296 214.01045227]
[122.77755737 202.11000061]
[115.75870514 188.85346985]
[111.04877472 174.61210632]
[108.77966309 159.78472900]
[109.01492310 144.78657532]
[111.74795532 130.03765869]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[3 32]
[4 31]
[5 30]
[9 27]
[10 26]
[12 25]
[13 24]
[14 23]
[15 22]
[37 47]
[38 46]
[39 45]
[40 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
