%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 08:44:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACUUCCCUCACCAUUGGAUCAAGCUCCUUGGGGGCAUAUGAUCACCAGGGCACACAGUGUGCCUGUGAAAAUUUGGCACCUACAUUUGUAUCAAAGUAUGUCC\
) } def
/len { sequence length } bind def

/coor [
[37.48659897 200.66413879]
[46.75732803 212.45623779]
[50.58518219 226.95959473]
[48.34110260 241.79078674]
[40.39387131 254.51248169]
[28.04951859 263.03402710]
[13.33667755 265.95504761]
[-1.32678533 262.79547119]
[-13.53111839 254.07456970]
[-21.27069473 241.22547913]
[-23.27361679 226.35981750]
[-19.21072960 211.92053223]
[-9.75059700 200.28126526]
[-24.42894363 203.37094116]
[-39.10729218 206.46061707]
[-46.87451935 216.88922119]
[-59.28080368 219.09176636]
[-69.48802185 212.41442871]
[-84.25148010 215.06777954]
[-99.01493835 217.72114563]
[-107.83031464 230.83848572]
[-123.35494995 233.79841614]
[-136.37835693 224.84484863]
[-139.17398071 209.28977966]
[-130.08323669 196.36175537]
[-114.49948120 193.73074341]
[-101.66828918 202.95768738]
[-86.90483093 200.30432129]
[-72.14137268 197.65097046]
[-59.46728897 185.61302185]
[-42.19697189 191.78227234]
[-27.51862335 188.69259644]
[-12.84027672 185.60292053]
[0.97500473 179.76014709]
[13.41609001 171.38043213]
[25.85717583 163.00073242]
[38.29825974 154.62103271]
[50.73934555 146.24133301]
[63.18043137 137.86163330]
[75.62151337 129.48193359]
[88.06259918 121.10223389]
[77.93375397 105.22846985]
[82.46701813 88.24349976]
[96.94852448 80.69747162]
[100.47181702 66.11712646]
[103.99510193 51.53678131]
[107.51839447 36.95643616]
[105.95883942 30.26145744]
[107.84465790 24.68380737]
[111.70653534 21.62934303]
[116.08738708 7.28332806]
[120.46823883 -7.06268692]
[124.84909058 -21.40870094]
[129.22993469 -35.75471497]
[133.61079407 -50.10073090]
[137.99163818 -64.44674683]
[136.83483887 -81.36118317]
[152.76802063 -87.15515137]
[162.74630737 -73.44857788]
[152.33766174 -60.06589508]
[147.95680237 -45.71987915]
[143.57595825 -31.37386513]
[139.19509888 -17.02784920]
[134.81425476 -2.68183517]
[130.43339539 11.66417980]
[126.05254364 26.01019478]
[122.09873962 40.47972870]
[118.57544708 55.06007004]
[115.05215454 69.64041901]
[111.52886963 84.22075653]
[118.18031311 90.06491852]
[121.85346985 98.67710876]
[121.43019104 108.53989410]
[116.56004333 117.70792389]
[130.62133789 122.93094635]
[144.68263245 128.15397644]
[158.74392700 133.37699890]
[172.80522156 138.60002136]
[188.43591309 136.15216064]
[197.67257690 147.83691406]
[211.73387146 153.05995178]
[224.57992554 144.35600281]
[240.08749390 144.89874268]
[252.29362488 154.47946167]
[256.50479126 169.41416931]
[251.10173035 183.96018982]
[238.16200256 192.52424622]
[222.66122437 191.81332397]
[210.55975342 182.10075378]
[206.51084900 167.12124634]
[192.44955444 161.89820862]
[177.82461548 164.71965027]
[167.58219910 152.66131592]
[153.52090454 147.43829346]
[139.45960999 142.21527100]
[125.39831543 136.99224854]
[111.33702087 131.76921082]
[96.44230652 133.54331970]
[84.00122070 141.92301941]
[71.56013489 150.30271912]
[59.11904907 158.68241882]
[46.67796326 167.06211853]
[34.23687744 175.44181824]
[21.79579163 183.82151794]
[9.35470581 192.20123291]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 33]
[14 32]
[15 31]
[18 29]
[19 28]
[20 27]
[34 105]
[35 104]
[36 103]
[37 102]
[38 101]
[39 100]
[40 99]
[41 98]
[44 70]
[45 69]
[46 68]
[47 67]
[50 66]
[51 65]
[52 64]
[53 63]
[54 62]
[55 61]
[56 60]
[74 97]
[75 96]
[76 95]
[77 94]
[78 93]
[80 91]
[81 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
