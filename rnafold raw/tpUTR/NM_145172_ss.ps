%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 12:41:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAGCUUCCUGAAGGGGUGUUUUGGGGACUUCUUCCCUCUAUUUAUUUUUAUGUCAGGUGAACUGGCAUGCUGAACAUAUAUAUAUAUAGGCUCAUUUAUAGACUUUUAUUUCCCUGCUAUUAAAACUUUUGAAUUUUA\
) } def
/len { sequence length } bind def

/coor [
[102.98793030 145.78601074]
[104.17620087 130.83316040]
[95.96461487 143.38583374]
[87.75302887 155.93852234]
[79.54145050 168.49121094]
[71.32986450 181.04389954]
[70.25003815 196.82820129]
[56.80770874 203.24327087]
[48.59612274 215.79595947]
[40.38454056 228.34863281]
[32.17295456 240.90132141]
[28.56185150 257.46624756]
[11.64465046 258.58187866]
[5.88946056 242.63464355]
[19.62027168 232.68974304]
[27.83185577 220.13705444]
[36.04343796 207.58436584]
[44.25502396 195.03167725]
[44.74750137 180.14521790]
[58.77717972 172.83230591]
[66.98876190 160.27961731]
[75.20034790 147.72694397]
[83.41193390 135.17425537]
[91.62351227 122.62156677]
[83.55227661 109.97818756]
[68.70931244 112.14297485]
[53.86634445 114.30776978]
[39.02337646 116.47256470]
[24.18041039 118.63735199]
[13.47797012 130.58880615]
[-2.53004599 129.52909851]
[-11.56365776 116.27114868]
[-6.69305229 100.98531342]
[8.34545898 95.39758301]
[22.01561737 103.79438782]
[36.85858536 101.62959290]
[51.70155334 99.46480560]
[66.54451752 97.30001068]
[81.38748932 95.13521576]
[89.87669373 82.76859283]
[86.56215668 68.13938141]
[83.24761963 53.51016998]
[79.93308258 38.88095856]
[69.33763123 27.13162041]
[74.07134247 13.00925159]
[70.75680542 -1.61996078]
[67.44226837 -16.24917221]
[53.33920670 -22.44673729]
[45.67921829 -35.60644531]
[47.21872711 -50.57621384]
[57.15885544 -61.63658524]
[53.84432220 -76.26580048]
[50.52978516 -90.89501190]
[47.21524811 -105.52422333]
[43.90071106 -120.15343475]
[40.42340851 -134.74481201]
[36.78377533 -149.29655457]
[33.14413834 -163.84828186]
[29.34261703 -178.35858154]
[25.37968636 -192.82560730]
[21.41675377 -207.29264832]
[7.56365633 -214.89970398]
[3.22731352 -230.09745789]
[10.98040199 -243.86935425]
[26.22315216 -248.04476929]
[39.91230774 -240.14651489]
[43.92634201 -224.86047363]
[35.88379288 -211.25558472]
[39.84672165 -196.78854370]
[43.80965424 -182.32150269]
[48.64962006 -176.65562439]
[47.69587326 -167.48793030]
[51.33551025 -152.93618774]
[54.97514725 -138.38444519]
[59.68768311 -132.61215210]
[58.52992630 -123.46797180]
[61.84445953 -108.83876038]
[65.15899658 -94.20954895]
[68.47353363 -79.58032990]
[71.78807068 -64.95111847]
[85.52467346 -59.25518036]
[93.36602020 -46.41083145]
[92.12607574 -31.23466682]
[82.07147980 -19.56370926]
[85.38601685 -4.93449688]
[88.70055389 9.69471550]
[99.05892944 20.39767647]
[94.56229401 35.56642151]
[97.87683105 50.19563675]
[101.19136810 64.82484436]
[104.50590515 79.45406342]
[116.27789307 88.75030518]
[131.27696228 88.58320618]
[136.98881531 74.52438354]
[147.61941528 63.75250244]
[161.52665710 57.88714981]
[176.57919312 57.79341888]
[190.48306274 63.45444870]
[201.13127136 73.97875214]
[206.92309570 87.74044037]
[221.92216492 87.57334137]
[236.92123413 87.40623474]
[251.92030334 87.23913574]
[265.74673462 78.42085266]
[280.16998291 86.22479248]
[280.35269165 102.62292480]
[266.10687256 110.74625397]
[252.08740234 102.23820496]
[237.08833313 102.40530396]
[222.08926392 102.57241058]
[207.09019470 102.73950958]
[201.60641479 116.62681580]
[191.19531250 127.38574219]
[177.42102051 133.35513306]
[162.37013245 133.59678650]
[148.33566284 128.04272461]
[137.46772766 117.51035309]
[131.44406128 103.58227539]
[116.44499969 103.74937439]
[129.68803406 110.79367065]
[142.93106079 117.83795929]
[156.17410278 124.88224792]
[171.05412292 126.77568817]
[184.90409851 132.53572083]
[196.73847961 141.75242615]
[205.71507263 153.76994324]
[211.19509888 167.73307800]
[212.78860474 182.64819336]
[210.38217163 197.45390320]
[204.14706421 211.09661865]
[194.52697754 222.60546875]
[182.20648193 231.16149902]
[168.06234741 236.15582275]
[153.10107422 237.23303223]
[138.38734436 234.31649780]
[124.96820831 227.61373901]
[113.79860687 217.60176086]
[105.67337036 204.99301147]
[101.17072296 190.68475342]
[100.61140442 175.69174194]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 24]
[3 23]
[4 22]
[5 21]
[6 20]
[8 18]
[9 17]
[10 16]
[11 15]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
[40 91]
[41 90]
[42 89]
[43 88]
[45 86]
[46 85]
[47 84]
[51 80]
[52 79]
[53 78]
[54 77]
[55 76]
[56 74]
[57 73]
[58 72]
[59 70]
[60 69]
[61 68]
[92 119]
[93 118]
[100 111]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
