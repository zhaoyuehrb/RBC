%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 10:53:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUGACUGGAGCCCAACAUGAUUCAGCUGAGGCAAGGGUCAAAAGGACAUUUUGGGUAAUGCCAGC\
) } def
/len { sequence length } bind def

/coor [
[86.83353424 308.70370483]
[72.53827667 314.73904419]
[57.43336487 311.18640137]
[47.32695007 299.41183472]
[46.10515213 283.94296265]
[54.23777771 270.72781372]
[68.59767151 264.84790039]
[72.03192902 250.24633789]
[75.46618652 235.64477539]
[78.90044403 221.04319763]
[70.78565216 202.29393005]
[84.48587036 186.13949585]
[85.86989594 171.20347595]
[87.25392151 156.26747131]
[88.63794708 141.33145142]
[90.02197266 126.39543915]
[91.40599823 111.45942688]
[85.73715973 98.67835236]
[93.65798950 87.15654755]
[95.04201508 72.22053528]
[96.42604065 57.28451920]
[94.04811859 48.10094070]
[98.23454285 41.69614029]
[100.30689240 26.83998489]
[102.37923431 11.98382759]
[91.37863159 1.19990635]
[88.86663818 -13.81819153]
[95.59987640 -27.27655411]
[108.80872345 -34.10768127]
[110.88107300 -48.96384048]
[112.95341492 -63.81999588]
[101.68727875 -74.49022675]
[98.87769318 -89.75082397]
[105.60499573 -103.73377991]
[119.28240204 -111.06235504]
[134.65068054 -108.91857147]
[145.80039978 -98.12675476]
[148.44427490 -82.83657837]
[141.56567383 -68.92742920]
[127.80957031 -61.74765015]
[125.73722839 -46.89149475]
[123.66487885 -32.03533554]
[134.50006104 -21.85021019]
[137.29321289 -7.06297398]
[130.76721191 6.69437838]
[117.23538971 14.05617332]
[115.16304779 28.91233063]
[113.09069824 43.76848602]
[111.36205292 58.66854477]
[109.97802734 73.60456085]
[108.59400177 88.54057312]
[114.26284027 101.32164764]
[106.34201050 112.84345245]
[104.95798492 127.77946472]
[103.57395935 142.71548462]
[102.18993378 157.65148926]
[100.80590820 172.58750916]
[99.42188263 187.52351379]
[106.79746246 194.33456421]
[109.95832062 203.71472168]
[108.25817871 213.32284546]
[102.24662781 220.82856750]
[93.50201416 224.47746277]
[90.06775665 239.07902527]
[86.63349915 253.68060303]
[83.19924164 268.28216553]
[93.43279266 279.94638062]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 66]
[8 65]
[9 64]
[10 63]
[12 58]
[13 57]
[14 56]
[15 55]
[16 54]
[17 53]
[19 51]
[20 50]
[21 49]
[23 48]
[24 47]
[25 46]
[29 42]
[30 41]
[31 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
