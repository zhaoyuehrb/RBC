%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 19:06:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGAGCUUCAUCUCAGCCUGCUAGCCCCCUGACCCUGCAUGUUUAACACCAGGGAGCUUGGAAAACAAUAAACAUCUGUGUGUGCAGCAGCCAA\
) } def
/len { sequence length } bind def

/coor [
[77.36003876 120.98293304]
[64.21076202 128.20072937]
[58.04911041 135.20755005]
[50.51674652 135.43147278]
[37.14064026 142.21968079]
[28.33595848 155.36456299]
[13.48504162 154.22459412]
[0.10893377 161.01280212]
[-13.26717472 167.80099487]
[-22.84426308 183.42419434]
[-40.25429535 182.01730347]
[-53.40357590 189.23509216]
[-55.22468567 204.64492798]
[-65.78037262 216.01846313]
[-81.01176453 218.98231506]
[-95.06207275 212.39685059]
[-102.52867126 198.79428101]
[-100.54049683 183.40510559]
[-89.86205292 172.14675903]
[-74.59940338 169.34831238]
[-60.62136459 176.08581543]
[-47.47208405 168.86802673]
[-43.72113037 157.24212646]
[-32.66288757 151.16223145]
[-20.05537987 154.42489624]
[-6.67927170 147.63668823]
[6.69683647 140.84848022]
[14.54476833 128.18913269]
[30.35243416 128.84356689]
[43.72854233 122.05535889]
[56.99297333 115.05144501]
[70.14225006 107.83365631]
[70.22619629 91.85311127]
[78.29016876 78.05610657]
[92.17284393 70.14054871]
[108.15337372 70.22796631]
[121.94861603 78.29494476]
[134.85726929 70.65514374]
[147.76593018 63.01533890]
[160.67459106 55.37553787]
[166.60610962 48.17285156]
[174.12727356 47.70514679]
[187.27655029 40.48735809]
[200.42582703 33.26956940]
[203.31478882 28.46032715]
[207.40611267 25.65259361]
[211.67700195 24.96302414]
[215.21975708 26.06067467]
[229.00721741 20.15253830]
[242.79467773 14.24440289]
[256.58212280 8.33626652]
[270.27209473 2.20564365]
[283.86102295 -4.14585829]
[297.44992065 -10.49736023]
[311.03881836 -16.84886169]
[312.06475830 -34.22697830]
[321.60522461 -48.68329239]
[337.02319336 -56.38141632]
[354.13629150 -55.33123398]
[368.35113525 -45.90259552]
[381.50039673 -53.12038422]
[394.64968872 -60.33817291]
[400.49801636 -75.27727509]
[415.86621094 -79.88141632]
[428.96511841 -70.61869812]
[429.74636841 -54.59468079]
[417.61068726 -44.10161972]
[401.86749268 -47.18889618]
[388.71820068 -39.97110748]
[375.56890869 -32.75331879]
[376.64865112 -19.95764351]
[372.73074341 -7.67923355]
[364.37832642 2.19826341]
[352.83764648 8.14502716]
[339.85229492 9.22194767]
[327.39978027 5.22875261]
[317.39031982 -3.25995374]
[303.80142212 3.09154797]
[290.21252441 9.44304943]
[276.62359619 15.79455185]
[271.80560303 21.58881569]
[262.49026489 22.12372208]
[248.70280457 28.03185844]
[234.91535950 33.93999481]
[221.12789917 39.84812927]
[207.64363098 46.41884613]
[194.49433899 53.63663483]
[181.34506226 60.85442352]
[168.31439209 68.28419495]
[155.40573120 75.92399597]
[142.49707031 83.56379700]
[129.58842468 91.20359802]
[130.48272705 104.86357117]
[125.38208771 117.56703949]
[115.28961945 126.81564331]
[102.19018555 130.79049683]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[4 30]
[5 29]
[7 27]
[8 26]
[9 25]
[11 22]
[12 21]
[37 92]
[38 91]
[39 90]
[40 89]
[42 88]
[43 87]
[44 86]
[48 85]
[49 84]
[50 83]
[51 82]
[52 80]
[53 79]
[54 78]
[55 77]
[60 70]
[61 69]
[62 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
