%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 11:50:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUUCCCUUUCCCAAUUUAUAAAUAAUCUGUCUGCUGGUACGACAGACAUAAAUCUCUACUCUGAGAGUUUUUAUACACUUGGAAAAAUAUAAAAUUGUAGAUCCUGCCUAUCUUUACAAUAAAACUCUCCUUAAUAUA\
) } def
/len { sequence length } bind def

/coor [
[294.96426392 306.41693115]
[290.96844482 297.74774170]
[288.04357910 288.65951538]
[286.23251343 279.28402710]
[285.56188965 269.75726318]
[286.04180908 260.21743774]
[287.66564941 250.80307007]
[290.41021729 241.65080261]
[294.23602295 232.89358521]
[281.59265137 224.82234192]
[268.94924927 216.75111389]
[256.30587769 208.67987061]
[243.66249084 200.60864258]
[231.03193665 208.54179382]
[216.14830017 210.21118164]
[201.95770264 205.23245239]
[191.29248047 194.54258728]
[186.30595398 180.22401428]
[188.03773499 165.09913635]
[175.39434814 157.02789307]
[162.75097656 148.95666504]
[150.10758972 140.88542175]
[137.46420288 132.81419373]
[124.82081604 124.74295044]
[114.03112030 133.92782593]
[99.89672852 138.38237000]
[84.49519348 136.92732239]
[70.29648590 129.29333496]
[59.76752472 116.23828888]
[54.94916534 99.49478149]
[40.28393936 96.34342194]
[25.61870956 93.19206238]
[10.95348072 90.04070282]
[-3.71174860 86.88934326]
[-18.37697792 83.73798370]
[-33.07640457 80.75019836]
[-46.01339722 89.82817078]
[-61.56569290 87.01718140]
[-70.50638580 73.98493195]
[-67.53112030 58.46322632]
[-54.40507507 49.66081619]
[-38.91569138 52.80001831]
[-30.25255203 66.01839447]
[-23.03288078 64.17346191]
[-15.22561932 69.07275391]
[-0.56039023 72.22411346]
[14.10483837 75.37547302]
[28.77006721 78.52683258]
[43.43529510 81.67819214]
[58.10052490 84.82955170]
[62.87863159 79.04856873]
[51.31682968 69.49217224]
[60.87342072 57.93052673]
[72.43483734 67.48661041]
[77.21294403 61.70563126]
[71.35710144 47.89588547]
[65.50126648 34.08613586]
[59.64542389 20.27638817]
[44.90201187 14.58364868]
[38.57869720 0.09947661]
[44.42699432 -14.58292675]
[58.97721100 -20.75275230]
[73.59696198 -14.74955082]
[79.61260986 -0.13491572]
[73.45517731 14.42054844]
[79.31101227 28.23029709]
[85.16685486 42.04004669]
[91.02268982 55.84979248]
[113.80364227 59.74915695]
[130.38691711 73.91052246]
[136.95214844 93.33388519]
[132.89205933 112.09957123]
[145.53544617 120.17080688]
[158.17881775 128.24203491]
[170.82220459 136.31327820]
[183.46559143 144.38450623]
[196.10897827 152.45574951]
[209.09965515 144.51826477]
[224.18690491 143.01431274]
[238.37295532 148.18890381]
[248.86242676 158.96536255]
[253.61317444 173.16886902]
[251.73371887 187.96525574]
[264.37710571 196.03649902]
[277.02047729 204.10772705]
[289.66387939 212.17897034]
[302.30725098 220.25019836]
[318.31762695 204.85765076]
[337.95828247 194.51277161]
[359.68630981 190.02130127]
[381.79678345 191.72941589]
[402.55648804 199.49705505]
[420.33972168 212.70942688]
[433.75579834 230.32562256]
[441.75759888 250.96060181]
[443.72341919 272.99417114]
[458.56637573 275.15893555]
[473.40936279 277.32373047]
[488.25231934 279.48852539]
[503.09527588 281.65332031]
[517.93823242 283.81811523]
[532.78118896 285.98291016]
[547.62420654 288.14770508]
[556.56671143 275.72637939]
[570.26263428 268.89401245]
[585.56463623 269.22064209]
[598.95648193 276.63122559]
[607.36083984 289.42285156]
[608.84643555 304.65609741]
[603.07183838 318.83047485]
[591.36407471 328.68881226]
[576.41351318 331.96572876]
[561.65563965 327.90826416]
[550.48168945 317.44873047]
[545.45941162 302.99066162]
[530.61645508 300.82586670]
[515.77343750 298.66107178]
[500.93048096 296.49630737]
[486.08752441 294.33151245]
[471.24456787 292.16671753]
[456.40158081 290.00192261]
[441.55862427 287.83712769]
[438.75695801 296.93048096]
[434.88156128 305.62237549]
[429.98828125 313.78649902]
[424.14782715 321.30413818]
[417.44470215 328.06604004]
[409.97592163 333.97375488]
[401.84960938 338.94128418]
[393.18353271 342.89624023]
[384.10330200 345.78085327]
[374.74060059 347.55291748]
[365.23120117 348.18637085]
[355.71310425 347.67166138]
[346.32446289 346.01586914]
[337.20162964 343.24267578]
[328.47702026 339.39196777]
[320.27749634 334.51928711]
[312.72216797 328.69503784]
[305.92092896 322.00344849]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 87]
[10 86]
[11 85]
[12 84]
[13 83]
[19 77]
[20 76]
[21 75]
[22 74]
[23 73]
[24 72]
[30 50]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
[36 43]
[55 68]
[56 67]
[57 66]
[58 65]
[96 122]
[97 121]
[98 120]
[99 119]
[100 118]
[101 117]
[102 116]
[103 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
