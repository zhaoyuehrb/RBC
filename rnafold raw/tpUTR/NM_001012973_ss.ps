%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 06:50:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCUGGAGCUGGAGCCCAGCAGUUGGAGGUGGUGCACCUGCCAGGCAGCGCCCACAGAACCAGCCCUGUCCUCUCGACUUCCUUCCUUAGCUUCAUGUGAAAUAAAAGCUAUUCUGG\
) } def
/len { sequence length } bind def

/coor [
[204.37051392 260.08554077]
[199.48808289 249.69612122]
[197.10736084 238.45600891]
[197.35887146 226.95928955]
[200.23382568 215.81468201]
[205.58450317 205.61329651]
[194.63371277 195.36242676]
[183.68293762 185.11155701]
[172.73216248 174.86067200]
[161.64701843 164.75524902]
[146.99244690 162.09207153]
[141.80882263 147.14414978]
[130.59126282 137.18591309]
[119.37370300 127.22766876]
[108.15615082 117.26943970]
[93.68633270 118.02481079]
[82.85053253 108.40547180]
[81.88561249 93.94812012]
[70.66806030 83.98988342]
[59.45050430 74.03164673]
[46.47028732 73.99973297]
[37.32072449 65.36927795]
[36.58152008 53.21651459]
[25.63073921 42.96564102]
[14.67995930 32.71476746]
[3.72917914 22.46389198]
[-7.22160149 12.21301937]
[-26.01371002 13.63476467]
[-39.73264313 1.17893267]
[-40.11354065 -17.03105545]
[-51.59005356 -26.68971252]
[-63.06656647 -36.34836960]
[-74.54308319 -46.00702667]
[-83.24051666 -49.19529724]
[-86.19068146 -56.07528305]
[-97.40823364 -66.03351593]
[-110.38845062 -66.06543732]
[-119.53801727 -74.69589233]
[-120.27722168 -86.84865570]
[-131.22799683 -97.09952545]
[-142.17878723 -107.35040283]
[-153.12956238 -117.60127258]
[-168.82496643 -124.01145935]
[-167.01022339 -140.86799622]
[-150.31005859 -143.79052734]
[-142.87869263 -128.55204773]
[-131.92790222 -118.30117798]
[-120.97712708 -108.05030823]
[-110.02634430 -97.79943848]
[-92.78790283 -94.81350708]
[-87.45000458 -77.25107574]
[-76.23244476 -67.29283905]
[-64.88442230 -57.48353958]
[-53.40790939 -47.82488251]
[-41.93139648 -38.16622543]
[-30.45488548 -28.50756836]
[-19.42422867 -31.95029068]
[-7.99552250 -29.55949402]
[0.91246903 -21.82570457]
[4.96649790 -10.61899185]
[3.02927208 1.26223850]
[13.98005295 11.51311207]
[24.93083382 21.76398468]
[35.88161469 32.01485825]
[46.83239365 42.26573181]
[64.07083893 45.25165558]
[69.40873718 62.81409454]
[80.62629700 72.77233124]
[91.84384918 82.73056030]
[106.31366730 81.97518921]
[117.14946747 91.59452820]
[118.11438751 106.05187988]
[129.33193970 116.01011658]
[140.54949951 125.96835327]
[151.76705933 135.92658997]
[167.22398376 139.30203247]
[171.60525513 153.53768921]
[180.21549988 156.95443726]
[182.98303223 163.90989685]
[193.93380737 174.16076660]
[204.88459778 184.41165161]
[215.83537292 194.66252136]
[232.79928589 185.99305725]
[251.74333191 184.29373169]
[269.92056274 189.78788757]
[284.70382690 201.65750122]
[293.96542358 218.16481018]
[296.38348389 236.90675354]
[291.63031006 255.16477966]
[304.06097412 263.55996704]
[316.49160767 271.95513916]
[328.92224121 280.35034180]
[341.35287476 288.74551392]
[353.78350830 297.14071655]
[366.94204712 289.40661621]
[382.15383911 288.15625000]
[396.39865112 293.63787842]
[406.84814453 304.76312256]
[411.42752075 319.32305908]
[409.22760010 334.42681885]
[400.68515015 347.07550049]
[387.49627686 354.75772095]
[372.27966309 355.94818115]
[358.05654907 350.41049194]
[347.65097046 339.24417114]
[343.12893677 324.66632080]
[345.38833618 309.57135010]
[332.95770264 301.17617798]
[320.52706909 292.78097534]
[308.09640503 284.38580322]
[295.66577148 275.99060059]
[283.23513794 267.59542847]
[274.61444092 275.05416870]
[264.50836182 280.34982300]
[253.44973755 283.19802856]
[242.02285767 283.44354248]
[230.83255005 281.06881714]
[220.47215271 276.19509888]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 82]
[7 81]
[8 80]
[9 79]
[10 77]
[12 75]
[13 74]
[14 73]
[15 72]
[18 69]
[19 68]
[20 67]
[23 65]
[24 64]
[25 63]
[26 62]
[27 61]
[30 56]
[31 55]
[32 54]
[33 53]
[35 52]
[36 51]
[39 49]
[40 48]
[41 47]
[42 46]
[89 112]
[90 111]
[91 110]
[92 109]
[93 108]
[94 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
