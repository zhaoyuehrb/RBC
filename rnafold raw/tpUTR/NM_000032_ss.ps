%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 04:50:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGCCAGCUGCCUAGGAUUCACACCCCACCUGCGCUUCACUUGGGUCCAGGCCUACUCCUGUCUUCUGCUUUGUUGUGUGCCUCUAGCUGAAUUGAGCCUAAAAAUAAAGCACAAACCACAGCA\
) } def
/len { sequence length } bind def

/coor [
[91.44729614 106.48686981]
[76.56370544 104.62171173]
[61.68011856 102.75655365]
[46.79652786 100.89140320]
[32.14137268 106.85269165]
[20.47495842 97.59288025]
[5.59137058 95.72772217]
[-9.29221725 93.86257172]
[-24.82629204 107.87368774]
[-45.38430023 106.13124084]
[-57.98230362 90.15711212]
[-72.97763824 89.78314972]
[-87.97297668 89.40918732]
[-102.96831512 89.03523254]
[-111.73564148 91.97456360]
[-118.33155060 88.46038055]
[-133.31291199 87.71269226]
[-148.29426575 86.96500397]
[-163.27561951 86.21731567]
[-178.25697327 85.46962738]
[-193.23832703 84.72193909]
[-208.21968079 83.97425079]
[-213.17951965 98.24227905]
[-221.95935059 110.53419495]
[-233.84741211 119.85356140]
[-247.88002014 125.44488525]
[-262.91958618 126.85490417]
[-277.74691772 123.96932983]
[-291.16006470 117.02206421]
[-302.07165527 106.57629395]
[-309.59710693 93.47882080]
[-313.12643433 78.79139709]
[-312.37350464 63.70465469]
[-307.39932251 49.44161606]
[-298.60714722 37.15851974]
[-286.70971680 27.85110664]
[-272.67150879 22.27388191]
[-257.63055420 20.87896729]
[-242.80610657 23.77944183]
[-229.39994812 30.74017715]
[-218.49887085 41.19689941]
[-210.98655701 54.30192566]
[-207.47198486 68.99289703]
[-192.49063110 69.74058533]
[-177.50927734 70.48827362]
[-162.52792358 71.23596191]
[-147.54656982 71.98365021]
[-132.56521606 72.73133850]
[-117.58386230 73.47902679]
[-102.59435272 74.03989410]
[-87.59901428 74.41384888]
[-72.60367584 74.78781128]
[-57.60834122 75.16177368]
[-53.01859283 66.73160553]
[-45.58893585 60.56248474]
[-36.34767532 57.56443787]
[-26.59486389 58.20467758]
[-17.71941376 62.43534470]
[-11.00131321 69.69419861]
[-7.42706203 78.97898102]
[7.45652580 80.84413910]
[22.34011459 82.70928955]
[35.93069839 76.61459351]
[48.66168594 86.00781250]
[63.54527283 87.87297058]
[78.42886353 89.73812103]
[93.31244659 91.60327911]
[108.30195618 91.04241180]
[123.00454712 88.07022095]
[137.70713806 85.09803009]
[152.40971375 82.12583923]
[167.11230469 79.15364075]
[181.81489563 76.18144989]
[196.51748657 73.20925903]
[211.22007751 70.23706818]
[225.92265320 67.26487732]
[230.89123535 52.79903793]
[242.35772705 42.82825851]
[257.17694092 39.95474625]
[271.34994507 44.85191727]
[281.10305786 56.10992050]
[293.09646606 45.79158020]
[307.10452271 50.85360718]
[321.80709839 47.88141632]
[336.50967407 44.90922546]
[341.32516479 30.32475471]
[352.79840088 20.11395264]
[367.84313965 17.02347374]
[382.41244507 21.88464165]
[392.58724976 33.38982773]
[395.63055420 48.44419098]
[390.72372437 62.99818420]
[379.18670654 73.13685608]
[364.12289429 76.13296509]
[349.58435059 71.18055725]
[339.48187256 59.61181259]
[324.77929688 62.58400345]
[310.07672119 65.55619812]
[299.13488770 75.66194153]
[284.07522583 70.81250763]
[279.46096802 84.97492981]
[268.30313110 94.99284363]
[253.53140259 98.10127258]
[239.09231567 93.36741638]
[228.89485168 81.96746063]
[214.19226074 84.93965149]
[199.48966980 87.91184998]
[184.78709412 90.88404083]
[170.08450317 93.85623169]
[155.38191223 96.82842255]
[140.67932129 99.80061340]
[125.97673798 102.77280426]
[111.27415466 105.74500275]
[124.84497833 112.13503265]
[134.74545288 123.40361023]
[139.33552551 137.68405151]
[137.85484314 152.61079407]
[130.54870605 165.71118164]
[118.62736511 174.81512451]
[104.06562042 178.41452026]
[89.27565765 175.91313171]
[76.70745850 167.72531128]
[68.44296265 155.20739746]
[65.85121155 140.43299866]
[69.36152649 125.84953308]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 66]
[3 65]
[4 64]
[6 62]
[7 61]
[8 60]
[11 53]
[12 52]
[13 51]
[14 50]
[16 49]
[17 48]
[18 47]
[19 46]
[20 45]
[21 44]
[22 43]
[68 113]
[69 112]
[70 111]
[71 110]
[72 109]
[73 108]
[74 107]
[75 106]
[76 105]
[81 100]
[83 98]
[84 97]
[85 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
