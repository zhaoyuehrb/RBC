%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 03:30:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGAAAAAAAGAAAAAAAUCAAAAAACAAAACAAAACCCACGCUCCAAAAACAAACUAACGAAGAAUAAAUAAAUAAUAUAAAAAUAA\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.53106689 91.44168854]
[62.67407608 89.33011627]
[48.00304413 86.17579651]
[33.59106064 81.99446106]
[19.50992393 76.80692291]
[5.82978964 70.63903046]
[-7.38118887 63.52152252]
[-20.05719376 55.48984528]
[-32.13507462 46.58402252]
[-43.55466080 36.84841537]
[-54.25905609 26.33153343]
[-64.19493103 15.08576775]
[-73.31279755 3.16714525]
[-81.56720734 -9.36495495]
[-88.91706085 -22.44809914]
[-95.32572174 -36.01710510]
[-100.76127625 -50.00437546]
[-105.19663239 -64.34022522]
[-108.60970306 -78.95322418]
[-110.98348236 -93.77058411]
[-112.30614471 -108.71847534]
[-112.57109070 -123.72243500]
[-111.77701569 -138.70770264]
[-109.92786407 -153.59963989]
[-107.03285217 -168.32403564]
[-103.10640717 -182.80754089]
[-98.16808319 -196.97799683]
[-92.24249268 -210.76480103]
[-85.35914612 -224.09928894]
[-77.55233765 -236.91500854]
[-68.86096954 -249.14813232]
[-59.32833099 -260.73767090]
[-49.00192261 -271.62594604]
[-37.93318939 -281.75866699]
[-26.17727089 -291.08535767]
[-13.79273701 -299.55957031]
[-0.84128928 -307.13906860]
[12.61254978 -313.78610229]
[26.50175285 -319.46755981]
[40.75712204 -324.15515137]
[55.30764389 -327.82546997]
[70.08081818 -330.46026611]
[85.00305176 -332.04641724]
[100.00000000 -332.57601929]
[114.99694824 -332.04641724]
[129.91917419 -330.46026611]
[144.69235229 -327.82546997]
[159.24287415 -324.15515137]
[173.49824524 -319.46755981]
[187.38745117 -313.78610229]
[200.84129333 -307.13906860]
[213.79273987 -299.55957031]
[226.17727661 -291.08535767]
[237.93318176 -281.75866699]
[249.00192261 -271.62594604]
[259.32833862 -260.73767090]
[268.86096191 -249.14813232]
[277.55233765 -236.91500854]
[285.35913086 -224.09928894]
[292.24249268 -210.76480103]
[298.16809082 -196.97799683]
[303.10641479 -182.80754089]
[307.03286743 -168.32403564]
[309.92785645 -153.59963989]
[311.77700806 -138.70770264]
[312.57110596 -123.72243500]
[312.30615234 -108.71847534]
[310.98348999 -93.77058411]
[308.60971069 -78.95322418]
[305.19662476 -64.34022522]
[300.76126099 -50.00437546]
[295.32571411 -36.01710510]
[288.91705322 -22.44809914]
[281.56719971 -9.36495495]
[273.31280518 3.16714525]
[264.19494629 15.08576775]
[254.25906372 26.33153343]
[243.55465698 36.84841537]
[232.13507080 46.58402252]
[220.05718994 55.48984528]
[207.38119507 63.52152252]
[194.17021179 70.63903046]
[180.49008179 76.80692291]
[166.40893555 81.99446106]
[151.99694824 86.17579651]
[137.32592773 89.33011627]
[122.46893311 91.44168854]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
