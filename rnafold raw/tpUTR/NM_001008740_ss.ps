%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 03:41:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGUGAUGGACUCCAAUCUUUUCCAGGAAAGCACUGUUUCCCUCAUGUGUGCAGUGGUGUAUCAAUAAAGAUAGAGAACGCUAUUGAAAUUACCGUGC\
) } def
/len { sequence length } bind def

/coor [
[92.20375061 117.43486786]
[82.20874023 106.94458771]
[67.21614075 106.47342682]
[52.22354126 106.00226593]
[37.23094559 105.53110504]
[22.23834610 105.05994415]
[7.24574804 104.58878326]
[-6.79064941 111.88879395]
[-19.26860619 103.75553894]
[-34.26120377 103.28437805]
[-49.25380325 102.81320953]
[-60.72364044 113.35269165]
[-75.92155457 112.66129303]
[-85.89865112 101.66160583]
[-94.04570007 114.60659790]
[-107.48960114 121.68885040]
[-122.57315826 121.09493256]
[-135.24942017 113.08441925]
[-142.16748047 99.89328003]
[-157.16007996 99.42211914]
[-172.15267944 98.95095825]
[-187.14527893 98.47979736]
[-202.13787842 98.00863647]
[-216.32693481 106.23070526]
[-230.40513611 97.82022095]
[-229.89002991 81.42916870]
[-215.31150818 73.91925049]
[-201.66671753 83.01603699]
[-186.67411804 83.48719788]
[-171.68151855 83.95835876]
[-156.68891907 84.42951965]
[-141.69631958 84.90068817]
[-133.96362305 72.16996765]
[-120.80939484 64.97120667]
[-105.71831512 65.32556915]
[-92.74564362 73.23799896]
[-85.42749023 86.66900635]
[-74.77940369 76.31748962]
[-59.56806564 76.58173370]
[-48.78264236 87.82061768]
[-33.79004288 88.29177856]
[-18.79744530 88.76293945]
[-5.83341885 81.42922974]
[7.71690941 89.59618378]
[22.70950699 90.06734467]
[37.70210648 90.53850555]
[52.69470596 91.00966644]
[67.68730164 91.48082733]
[82.67990112 91.95198822]
[93.31388092 82.11000061]
[107.79624939 82.56513214]
[117.79125977 93.05541229]
[132.78385925 93.52657318]
[147.77645874 93.99773407]
[156.63420105 91.09976959]
[163.23049927 94.72652435]
[178.20089722 95.66838837]
[193.17131042 96.61024475]
[208.14170837 97.55210114]
[223.11210632 98.49395752]
[235.92187500 86.70856476]
[252.96281433 87.72338867]
[263.84689331 100.43652344]
[278.83950806 100.90768433]
[293.83209229 101.37884521]
[308.82470703 101.85000610]
[323.81729126 102.32116699]
[338.80990601 102.79233551]
[350.27972412 92.25285339]
[365.47766113 92.94425201]
[375.45474243 103.94393921]
[384.85852051 91.60097504]
[399.73095703 87.17494965]
[414.35336304 92.36776733]
[423.10305786 105.18268585]
[422.61566162 120.69210815]
[413.07855225 132.93234253]
[398.15896606 137.19676208]
[383.59378052 131.84562683]
[374.98358154 118.93653870]
[364.33551025 129.28805542]
[349.12417603 129.02380371]
[338.33874512 117.78492737]
[323.34613037 117.31376648]
[308.35354614 116.84260559]
[293.36093140 116.37144470]
[278.36834717 115.90028381]
[263.37573242 115.42912292]
[255.22431946 125.54283142]
[242.53167725 129.11384583]
[229.93406677 124.60226440]
[222.17024231 113.46436310]
[207.19984436 112.52249908]
[192.22944641 111.58064270]
[177.25904846 110.63878632]
[162.28865051 109.69692993]
[147.30529785 108.99033356]
[132.31269836 108.51917267]
[117.32009888 108.04801178]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 49]
[3 48]
[4 47]
[5 46]
[6 45]
[7 44]
[9 42]
[10 41]
[11 40]
[14 37]
[19 32]
[20 31]
[21 30]
[22 29]
[23 28]
[52 99]
[53 98]
[54 97]
[56 96]
[57 95]
[58 94]
[59 93]
[60 92]
[63 88]
[64 87]
[65 86]
[66 85]
[67 84]
[68 83]
[71 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
