%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 13:54:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACGAGAACUCUUAUAUUGGCUUUUUAAGGAAGCAGUCUUAACAAAGGCUCUUUUCAGAGCCACCCA\
) } def
/len { sequence length } bind def

/coor [
[57.29621124 264.71762085]
[45.84109879 274.53814697]
[32.23415375 281.05838013]
[17.40311241 283.83374023]
[2.35918379 282.67501831]
[-11.87191105 277.66119385]
[-24.31987381 269.13415527]
[-34.13598251 257.67523193]
[-40.65095520 244.06578064]
[-43.42059326 229.23365784]
[-42.25605774 214.19018555]
[-37.23675156 199.96102905]
[-28.70489120 187.51635742]
[-17.24220085 177.70466614]
[-3.63022089 171.19496155]
[11.20295811 168.43104553]
[26.24598694 169.60139465]
[40.47320557 174.62619019]
[48.95025253 162.25122070]
[57.42729950 149.87626648]
[65.90434265 137.50129700]
[74.38139343 125.12634277]
[82.85843658 112.75138092]
[91.33547974 100.37641907]
[90.83728027 96.97059631]
[91.74927521 93.30015564]
[94.17240143 89.96289825]
[97.95400238 87.58337402]
[102.68654633 86.70685577]
[113.29314423 76.10025024]
[123.89974976 65.49365234]
[134.50634766 54.88704681]
[145.11294556 44.28044510]
[149.40005493 29.05115318]
[163.87068176 25.52270889]
[174.47729492 14.91610813]
[185.08389282 4.30950642]
[195.69049072 -6.29709530]
[206.29708862 -16.90369797]
[216.90370178 -27.51029968]
[220.62315369 -43.48207855]
[236.39132690 -47.98727036]
[247.98727417 -36.39132309]
[243.48207092 -20.62314987]
[227.51029968 -16.90369797]
[216.90370178 -6.29709530]
[206.29708862 4.30950642]
[195.69049072 14.91610813]
[185.08389282 25.52270889]
[174.47729492 36.12931061]
[170.94885254 50.59994888]
[155.71955872 54.88704681]
[145.11294556 65.49365234]
[134.50634766 76.10025024]
[123.89974976 86.70685577]
[113.29314423 97.31345367]
[103.71044922 108.85346222]
[95.23339844 121.22842407]
[86.75635529 133.60339355]
[78.27930450 145.97834778]
[69.80226135 158.35331726]
[61.32521439 170.72827148]
[52.84816742 183.10324097]
[62.67312241 194.55455017]
[69.19860077 208.15898132]
[71.97969818 222.98895264]
[70.82677460 238.03332520]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 63]
[19 62]
[20 61]
[21 60]
[22 59]
[23 58]
[24 57]
[29 56]
[30 55]
[31 54]
[32 53]
[33 52]
[35 50]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
