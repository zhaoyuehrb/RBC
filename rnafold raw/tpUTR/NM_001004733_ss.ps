%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 16:03:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAUAAAGAAUUCACAAUAAGAUAAUUUUUUCCACCUCAUAUUAAUCUUUGUCUACCAAGCCCAAUAUUUGGGCUUCCUCAUGGACA\
) } def
/len { sequence length } bind def

/coor [
[124.24288940 149.62840271]
[102.95631409 155.15393066]
[81.20104980 151.93548584]
[62.42612457 140.48332214]
[49.60807419 122.61303711]
[35.21567917 126.83901978]
[20.82328224 131.06500244]
[6.43088865 135.29100037]
[-7.96150589 139.51698303]
[-22.35390091 143.74298096]
[-36.74629593 147.96896362]
[-51.13869095 152.19494629]
[-58.75149536 165.78475952]
[-73.40763092 169.86549377]
[-86.31652069 162.52409363]
[-95.23618317 175.85897827]
[-111.23453522 177.05583191]
[-122.03900146 165.19653320]
[-119.36132812 149.37852478]
[-105.25559235 141.73602295]
[-90.54251099 148.13169861]
[-83.65191650 134.97665405]
[-69.11618042 130.48587036]
[-55.36467743 137.80255127]
[-40.97228241 133.57656860]
[-26.57988930 129.35058594]
[-12.18749428 125.12459564]
[2.20490026 120.89860535]
[16.59729576 116.67261505]
[30.98968887 112.44662476]
[45.38208389 108.22064209]
[44.78562927 98.56161499]
[45.88418579 88.94674683]
[48.64403152 79.67119598]
[52.98044205 71.01972198]
[58.76029205 63.25790024]
[65.80614471 56.62401581]
[73.90171051 51.32172012]
[82.79846191 47.51378632]
[92.22328186 45.31711197]
[101.88683319 44.79913330]
[111.49245453 45.97575378]
[120.74527740 48.81085205]
[129.36125183 53.21739197]
[137.07586670 59.06009674]
[143.65229797 66.15960693]
[148.88865662 74.29797363]
[152.62420654 83.22535706]
[154.74424744 92.66770935]
[155.18371582 102.33515167]
[169.94538879 104.99844360]
[184.70704651 107.66174316]
[199.46871948 110.32504272]
[214.23039246 112.98834229]
[228.99206543 115.65163422]
[244.53848267 103.27720642]
[263.93347168 105.92087555]
[275.25344849 121.52613068]
[290.21524048 122.59622192]
[305.17703247 123.66631317]
[320.13879395 124.73639679]
[335.10058594 125.80648804]
[350.06237793 126.87657166]
[365.02413940 127.94666290]
[379.98593140 129.01675415]
[396.21606445 124.11576843]
[405.41845703 138.35487366]
[394.28329468 151.13941956]
[378.91583252 143.97853088]
[363.95407104 142.90844727]
[348.99227905 141.83834839]
[334.03048706 140.76826477]
[319.06872559 139.69818115]
[304.10693359 138.62809753]
[289.14514160 137.55799866]
[274.18338013 136.48791504]
[268.28167725 145.35856628]
[259.09588623 150.91687012]
[248.33645630 152.04629517]
[238.04177856 148.46270752]
[230.19212341 140.78153992]
[226.32876587 130.41329956]
[211.56709290 127.75000763]
[196.80541992 125.08670807]
[182.04376221 122.42340851]
[167.28208923 119.76011658]
[152.52041626 117.09681702]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 31]
[6 30]
[7 29]
[8 28]
[9 27]
[10 26]
[11 25]
[12 24]
[15 21]
[50 87]
[51 86]
[52 85]
[53 84]
[54 83]
[55 82]
[58 76]
[59 75]
[60 74]
[61 73]
[62 72]
[63 71]
[64 70]
[65 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
