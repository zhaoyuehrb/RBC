%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:12:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUUAUCACUAGGCAGAACUGGGUUUGAUGCUUUGUCAACUGAAAAUACUUAUGUCUGUACAUUUUCUAACAGAUAUAAAACAAAUUUUGUAAAGUUGAAU\
) } def
/len { sequence length } bind def

/coor [
[-10.14535904 209.29330444]
[-22.72647476 213.50436401]
[-35.95630646 213.13696289]
[-48.22443008 208.25796509]
[-58.04510117 199.48208618]
[-71.39979553 206.31231689]
[-84.75449371 213.14254761]
[-98.10919189 219.97277832]
[-111.46389008 226.80300903]
[-124.49222565 234.23687744]
[-137.16694641 242.25881958]
[-149.84165955 250.28076172]
[-162.51637268 258.30270386]
[-165.73782349 273.77520752]
[-179.00204468 282.36798096]
[-194.43960571 278.98315430]
[-202.89167786 265.62881470]
[-199.34379578 250.22790527]
[-185.90086365 241.91749573]
[-170.53831482 245.62799072]
[-157.86360168 237.60604858]
[-145.18888855 229.58410645]
[-132.51417542 221.56216431]
[-131.41043091 218.04229736]
[-128.44480896 214.93035889]
[-123.85304260 213.14422607]
[-118.29412079 213.44831848]
[-104.93942261 206.61808777]
[-91.58472443 199.78785706]
[-78.23002625 192.95762634]
[-64.87532806 186.12739563]
[-65.81252289 169.40368652]
[-59.40248871 153.86968994]
[-46.86303711 142.60050964]
[-30.63033104 137.84904480]
[-13.88567066 140.59573364]
[0.06796574 150.34666443]
[12.98142433 142.71498108]
[25.89488411 135.08329773]
[38.80834198 127.45161438]
[51.72180176 119.81993103]
[64.63526154 112.18825531]
[62.63699722 101.79569244]
[63.62940598 91.25939178]
[67.53304291 81.42272949]
[74.03545380 73.07305145]
[82.61615753 66.87870026]
[92.58832550 63.33550262]
[103.15374756 62.72705841]
[113.46673584 65.10207367]
[122.70179749 70.27043915]
[134.01075745 60.41613388]
[145.31971741 50.56182861]
[156.62869263 40.70752335]
[167.93765259 30.85321426]
[179.24661255 20.99890900]
[190.55557251 11.14460182]
[201.86453247 1.29029584]
[213.17350769 -8.56401062]
[224.48246765 -18.41831779]
[221.45526123 -33.47592545]
[226.37763977 -48.02466583]
[237.92550659 -58.15099335]
[252.99252319 -61.13098145]
[267.52575684 -56.16302872]
[277.61584473 -44.58348465]
[280.54858398 -29.50719261]
[275.53509521 -14.98959827]
[263.92398071 -4.93586159]
[248.83857727 -2.05038762]
[234.33677673 -7.10935402]
[223.02781677 2.74495244]
[211.71884155 12.59925842]
[200.40988159 22.45356560]
[189.10092163 32.30787277]
[177.79196167 42.16217804]
[166.48300171 52.01648331]
[155.17402649 61.87079239]
[143.86506653 71.72509766]
[132.55610657 81.57940674]
[137.33654785 97.71957397]
[134.55592346 114.32155609]
[146.98010254 122.72630310]
[159.40428162 131.13104248]
[171.82846069 139.53578186]
[188.33554077 143.40264893]
[189.18940735 160.33508301]
[173.15507507 165.84294128]
[163.42372131 151.95996094]
[150.99954224 143.55522156]
[138.57534790 135.15048218]
[126.15117645 126.74573517]
[108.80863190 136.35418701]
[88.99145508 135.74955750]
[72.26694489 125.10170746]
[59.35348511 132.73339844]
[46.44002533 140.36508179]
[33.52656555 147.99676514]
[20.61310768 155.62844849]
[7.69964838 163.26013184]
[9.77059650 176.49514771]
[7.17406702 189.60430908]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 31]
[6 30]
[7 29]
[8 28]
[9 27]
[10 23]
[11 22]
[12 21]
[13 20]
[37 100]
[38 99]
[39 98]
[40 97]
[41 96]
[42 95]
[51 80]
[52 79]
[53 78]
[54 77]
[55 76]
[56 75]
[57 74]
[58 73]
[59 72]
[60 71]
[82 92]
[83 91]
[84 90]
[85 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
