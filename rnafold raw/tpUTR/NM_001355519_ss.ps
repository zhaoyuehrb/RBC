%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:57:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAACUCUAGGGUGGACAUGGCCUUGGACAAAAAGUCAUGUGGCUUACAUGCUGAAGCCUGCCCAUAUUUUUGAGAAAUUAAAUAUAAUUAGAACAAUAAACUCCUCCCAUGUUUGAGUCAUUAA\
) } def
/len { sequence length } bind def

/coor [
[84.72989655 327.16125488]
[78.62798309 313.12469482]
[79.75968170 297.86108398]
[87.86495209 284.87789917]
[101.08125305 277.15856934]
[100.33944702 262.17691040]
[99.59764099 247.19526672]
[98.85583496 232.21362305]
[90.49858856 219.88456726]
[97.54395294 205.71864319]
[96.80214691 190.73698425]
[88.44490051 178.40792847]
[95.49026489 164.24200439]
[94.74845886 149.26036072]
[94.00665283 134.27871704]
[93.26484680 119.29706573]
[81.84070587 109.57652283]
[66.93354797 111.24282074]
[52.02638245 112.90911865]
[37.11922073 114.57541656]
[22.21206093 116.24171448]
[7.30490017 117.90801239]
[-7.60226059 119.57431030]
[-20.45750999 128.79673767]
[-33.96551895 122.52115631]
[-48.87268066 124.18745422]
[-58.54035187 136.68992615]
[-74.22738647 138.61152649]
[-86.62693787 128.81221008]
[-88.38258362 113.10573578]
[-78.45272064 100.81047821]
[-62.72856522 99.22099304]
[-50.53897858 109.28028870]
[-35.63181686 107.61399078]
[-23.84282875 98.51074982]
[-9.26855850 104.66715240]
[5.63860226 103.00085449]
[20.54576302 101.33455658]
[35.45292282 99.66825867]
[50.36008453 98.00196075]
[65.26725006 96.33566284]
[80.17440796 94.66936493]
[86.46693420 81.05304718]
[78.07562256 68.61978912]
[69.68431854 56.18653107]
[61.29300308 43.75327301]
[52.90169144 31.32001686]
[37.38984299 30.91734505]
[25.09769440 21.44725037]
[20.75183105 6.55117321]
[26.02332306 -8.04303741]
[38.88517380 -16.72361183]
[54.39174271 -16.15269089]
[66.58043671 -6.54980516]
[70.76445007 8.39253902]
[65.33495331 22.92870522]
[73.72626495 35.36196136]
[82.11757660 47.79521942]
[90.50888062 60.22847748]
[98.90019226 72.66173553]
[106.39102173 73.03263855]
[99.54271698 59.68719864]
[107.67613983 47.08373642]
[122.65777588 47.82586670]
[129.50578308 61.17145538]
[121.37266541 73.77444458]
[128.86349487 74.14534760]
[138.44198608 62.60185242]
[148.02049255 51.05835724]
[150.87846375 35.49742508]
[164.96003723 30.64373016]
[174.53854370 19.10023499]
[184.11705017 7.55674076]
[193.69555664 -3.98675394]
[203.27406311 -15.53024864]
[205.49804688 -31.77789307]
[220.78109741 -37.72433090]
[233.40133667 -27.25237846]
[230.37612915 -11.13468170]
[214.81755066 -5.95174551]
[205.23904419 5.59174967]
[195.66053772 17.13524437]
[186.08204651 28.67873955]
[176.50354004 40.22223282]
[174.33068848 54.95749664]
[159.56399536 60.63685989]
[149.98548889 72.18035889]
[140.40698242 83.72385406]
[154.34715271 78.18566132]
[169.05677795 75.24851227]
[184.02143860 76.27770233]
[198.19046021 81.20098114]
[210.56907654 89.67268372]
[220.28820801 101.09803009]
[226.66548157 114.67486572]
[229.25315857 129.44998169]
[227.86956787 144.38603210]
[222.61183167 158.43438721]
[213.84912109 170.60873413]
[202.19660950 180.05432129]
[188.47244263 186.10801697]
[173.64015198 188.34475708]
[158.74108887 186.60754395]
[144.82128906 181.01832581]
[132.85806274 171.96951294]
[123.69130707 160.09640503]
[117.96461487 146.23260498]
[116.08007812 131.34725952]
[108.24649811 118.55525970]
[108.98830414 133.53691101]
[109.73011017 148.51855469]
[110.47191620 163.50019836]
[118.88221741 176.90084839]
[111.78379059 189.99517822]
[112.52559662 204.97683716]
[120.93590546 218.37748718]
[113.83747864 231.47181702]
[114.57928467 246.45346069]
[115.32109070 261.43511963]
[116.06289673 276.41674805]
[129.97711182 282.79272461]
[139.32530212 294.91174316]
[141.95930481 309.98889160]
[137.27384949 324.55957031]
[126.34563446 335.27557373]
[111.68586731 339.67440796]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 120]
[6 119]
[7 118]
[8 117]
[10 115]
[11 114]
[13 112]
[14 111]
[15 110]
[16 109]
[17 42]
[18 41]
[19 40]
[20 39]
[21 38]
[22 37]
[23 36]
[25 34]
[26 33]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
[67 88]
[68 87]
[69 86]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
