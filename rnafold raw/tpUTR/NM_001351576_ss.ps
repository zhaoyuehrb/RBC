%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:34:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGCUUUCGCUCCAUUUGCUUUGGACAGAUUUAAAGACUAGGCACAGCCAUUUGUGUUAAUUAAAAUCUCUCGCACCUUU\
) } def
/len { sequence length } bind def

/coor [
[55.25255966 237.05261230]
[42.63685608 238.18385315]
[30.32975769 235.29577637]
[22.17624474 247.88624573]
[14.02273178 260.47674561]
[13.72621632 276.87319946]
[-0.75087512 284.57681274]
[-14.51575279 275.66278076]
[-13.40828991 259.30105591]
[1.43225014 252.32321167]
[9.58576298 239.73274231]
[17.73927689 227.14225769]
[8.04161072 212.70796204]
[5.43523026 195.46302795]
[10.46353054 178.70919800]
[22.20388603 165.67321777]
[38.43658829 158.88529968]
[56.06443024 159.68814087]
[62.72023010 146.24566650]
[69.37602234 132.80317688]
[68.38098145 129.91798401]
[68.62329102 126.41948700]
[70.36156464 122.84116364]
[73.63045502 119.80593872]
[78.21485138 117.93565369]
[86.84462738 105.66670990]
[88.28402710 91.75917053]
[100.88642883 85.70350647]
[109.51621246 73.43457031]
[118.14598846 61.16563034]
[126.77577209 48.89668655]
[135.40554810 36.62774658]
[144.03532410 24.35880661]
[145.64625549 8.61982822]
[159.29705811 2.66123199]
[167.92684937 -9.60770798]
[163.37077332 -19.74511719]
[163.57624817 -30.77519798]
[168.43382263 -40.58856964]
[176.95111084 -47.33847427]
[187.45466614 -49.78821945]
[197.91857910 -47.53731918]
[207.89846802 -58.73561859]
[217.87835693 -69.93391418]
[227.85824585 -81.13221741]
[237.83811951 -92.33051300]
[247.81800842 -103.52880859]
[257.79788208 -114.72711182]
[260.59384155 -130.88615417]
[276.07720947 -136.28958130]
[288.32006836 -125.37880707]
[284.72796631 -109.37789917]
[268.99618530 -104.74722290]
[259.01629639 -93.54892731]
[249.03642273 -82.35062408]
[239.05653381 -71.15232849]
[229.07664490 -59.95402908]
[219.09677124 -48.75573349]
[209.11688232 -37.55743408]
[211.90843201 -18.50938225]
[199.92599487 -3.06698155]
[180.19578552 -0.97792846]
[171.56600952 11.29101181]
[170.57232666 26.15243530]
[156.30427551 32.98858643]
[147.67448425 45.25752640]
[139.04470825 57.52647018]
[130.41493225 69.79541016]
[121.78514862 82.06434631]
[113.15537262 94.33329010]
[111.71597290 108.24082947]
[99.11357117 114.29649353]
[90.48378754 126.56542969]
[82.81851196 139.45896912]
[76.16271210 152.90145874]
[69.50691223 166.34394836]
[78.33546448 175.66789246]
[83.77313995 187.27275085]
[85.28228760 199.97416687]
[82.72529602 212.48133850]
[76.37699127 223.52812195]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 12]
[4 11]
[5 10]
[18 76]
[19 75]
[20 74]
[25 73]
[26 72]
[28 70]
[29 69]
[30 68]
[31 67]
[32 66]
[33 65]
[35 63]
[36 62]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
