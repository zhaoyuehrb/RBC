%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:31:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCCUGGCUCCCUGCAGUGGGGACUUCGUGGGAGGCACUCAUGGCUCUCUGGGUCUAAUGAAUAAAGUCCUCCACAGCCUAGA\
) } def
/len { sequence length } bind def

/coor [
[76.41925049 280.66461182]
[60.71201324 278.91583252]
[50.90728760 266.52056885]
[52.82204437 250.83268738]
[65.32028961 241.15956116]
[66.98007965 226.25167847]
[68.36410522 211.31565857]
[69.47189331 196.35662842]
[70.57968140 181.39758301]
[71.68746948 166.43855286]
[59.28544235 174.87594604]
[44.33362198 173.67469788]
[33.43771744 163.36552429]
[31.41154480 148.50299072]
[39.15026474 135.65339661]
[53.23491287 130.49368286]
[67.44288635 135.30340576]
[75.49698639 147.95710754]
[80.39506531 133.77935791]
[85.29314423 119.60159302]
[90.19123077 105.42383575]
[94.82648468 91.15798950]
[99.19732666 76.80892181]
[103.56817627 62.45985794]
[107.93901825 48.11079025]
[112.30986786 33.76172638]
[115.60906219 19.12904549]
[117.81858826 4.29267120]
[120.02811432 -10.54370308]
[122.23764038 -25.38007736]
[122.23764038 -40.38007736]
[120.02811432 -55.21644974]
[117.81858826 -70.05282593]
[115.60906219 -84.88919830]
[113.39953613 -99.72557068]
[103.71385193 -112.23548889]
[109.49199677 -125.96364594]
[107.28247070 -140.80001831]
[96.66227722 -153.29576111]
[102.42789459 -168.64794922]
[118.64815521 -171.06356812]
[128.63703918 -158.05764771]
[122.11885071 -143.00955200]
[124.32837677 -128.17317200]
[133.85601807 -116.72444916]
[128.23591614 -101.93509674]
[130.44543457 -87.09872437]
[132.65496826 -72.26235199]
[134.86448669 -57.42597580]
[137.07402039 -42.58960342]
[146.77946472 -54.02656555]
[161.28442383 -57.84838486]
[175.36544800 -52.67876816]
[183.95175171 -40.37936783]
[183.95130920 -25.37936783]
[175.36425781 -13.08047771]
[161.28294373 -7.91169882]
[146.77821350 -11.73438072]
[137.07402039 -23.17055130]
[134.86448669 -8.33417797]
[132.65496826 6.50219631]
[130.44543457 21.33857155]
[132.26091003 23.77346230]
[133.09651184 27.15871811]
[132.55010986 31.07346153]
[130.40063477 34.94657898]
[126.65893555 38.13257217]
[122.28808594 52.48163605]
[117.91724396 66.83070374]
[113.54639435 81.17977142]
[109.17555237 95.52883911]
[110.02703857 103.75682068]
[104.36898804 110.32191467]
[99.47090149 124.49967194]
[94.57282257 138.67742920]
[89.67474365 152.85519409]
[86.64650726 167.54634094]
[85.53871918 182.50537109]
[84.43093109 197.46441650]
[83.32314301 212.42344666]
[85.85273743 221.45817566]
[81.88796997 227.91146851]
[80.22817993 242.81935120]
[90.29279327 255.00454712]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 83]
[6 82]
[7 80]
[8 79]
[9 78]
[10 77]
[18 76]
[19 75]
[20 74]
[21 73]
[22 71]
[23 70]
[24 69]
[25 68]
[26 67]
[27 62]
[28 61]
[29 60]
[30 59]
[31 50]
[32 49]
[33 48]
[34 47]
[35 46]
[37 44]
[38 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
