%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 07:12:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGGCAUCCGGCCUUGCUGGGAGAAUAAUGUCGCCGUUGUCACAUCAGCUGACAUGACCUGGAGGGGUUGGGGGUGGGGGACAGGUUUCUGAAAUCCCUGAAGGGGGUUGUACUGGGAUUUGUGAAUAAACUUGAUACACUA\
) } def
/len { sequence length } bind def

/coor [
[151.83729553 125.84772491]
[165.94711304 120.76463318]
[151.23533630 117.83827972]
[137.24314880 122.94393921]
[125.21761322 112.66303253]
[110.50583649 109.73667145]
[97.20553589 114.04871368]
[86.56781006 104.97510529]
[71.85603333 102.04875183]
[57.14425278 99.12239838]
[42.43247223 96.19603729]
[27.72069359 93.26968384]
[13.00891399 90.34333038]
[-1.70286524 87.41697693]
[-16.41464424 84.49062347]
[-31.12642288 81.56427002]
[-46.17090225 86.46061707]
[-57.14414978 76.38901520]
[-71.85592651 73.46266174]
[-86.56771088 70.53630829]
[-101.27948761 67.60995483]
[-115.99126434 64.68360138]
[-122.26303864 72.30774689]
[-130.85130310 77.05725861]
[-140.52743530 78.30171967]
[-149.92514038 75.90864563]
[-157.73326111 70.25617981]
[-162.87881470 62.17404175]
[-164.67431641 52.82196426]
[-179.07505798 48.62452698]
[-193.47581482 44.42709351]
[-207.87655640 40.22965622]
[-222.27731323 36.03222275]
[-236.67805481 31.83478737]
[-243.30072021 33.05539703]
[-248.70349121 31.00523949]
[-251.60797119 27.12740326]
[-265.81192017 22.30581284]
[-280.01586914 17.48422050]
[-294.21981812 12.66262817]
[-308.28161621 19.87659264]
[-323.30004883 14.95497990]
[-330.36495972 0.81769407]
[-325.28482056 -14.14786339]
[-311.07363892 -21.06289291]
[-296.16262817 -15.82482910]
[-289.39822388 -1.54132378]
[-275.19427490 3.28026819]
[-260.99032593 8.10186005]
[-246.78637695 12.92345238]
[-232.48062134 17.43404007]
[-218.07986450 21.63147354]
[-203.67912292 25.82890892]
[-189.27838135 30.02634430]
[-174.87762451 34.22378159]
[-160.47688293 38.42121506]
[-143.56715393 27.05465317]
[-123.44812775 31.77121735]
[-113.06491089 49.97182083]
[-98.35313416 52.89817429]
[-83.64135742 55.82453156]
[-68.92957306 58.75088501]
[-54.21779633 61.67723846]
[-40.22560120 56.57157516]
[-28.20006943 66.85248566]
[-13.48828983 69.77883911]
[1.22348964 72.70520020]
[15.93526840 75.63155365]
[30.64704895 78.55790710]
[45.35882568 81.48426056]
[60.07060623 84.41061401]
[74.78238678 87.33696747]
[89.49416351 90.26332855]
[102.79446411 85.95128632]
[113.43218994 95.02489471]
[128.14396667 97.95124817]
[143.18844604 93.05490112]
[154.16169739 103.12649536]
[168.87347412 106.05284882]
[174.66188049 103.34576416]
[180.49935913 103.44830322]
[185.19918823 105.87475586]
[199.84362793 102.62816620]
[214.48806763 99.38156891]
[229.13250732 96.13497925]
[243.77694702 92.88838196]
[258.42138672 89.64178467]
[273.06582642 86.39519501]
[287.71026611 83.14859772]
[302.35470581 79.90200806]
[309.02911377 63.11120605]
[324.28234863 53.72002411]
[341.96875000 55.29296494]
[355.09222412 67.02033997]
[369.58111572 63.13805771]
[384.07000732 59.25577164]
[398.55889893 55.37348557]
[413.04776001 51.49119949]
[427.53665161 47.60891342]
[442.02554321 43.72662735]
[455.76007080 33.78684616]
[469.11349487 44.23300552]
[462.77215576 59.95636368]
[445.90783691 58.21551514]
[431.41894531 62.09780121]
[416.93005371 65.98008728]
[402.44116211 69.86237335]
[387.95227051 73.74465942]
[373.46340942 77.62694550]
[358.97451782 81.50923157]
[356.32308960 93.44291687]
[348.78134155 103.15589142]
[337.74728394 108.74668121]
[325.30987549 109.08740997]
[313.85360718 104.05079651]
[305.60128784 94.54644775]
[290.95684814 97.79303741]
[276.31240845 101.03963470]
[261.66796875 104.28623199]
[247.02354431 107.53282166]
[232.37910461 110.77941895]
[217.73466492 114.02600861]
[203.09022522 117.27260590]
[188.44578552 120.51920319]
[202.66540527 125.29439545]
[215.11872864 133.65589905]
[224.92120361 145.00981140]
[231.37660217 158.54966736]
[234.02638245 173.31376648]
[232.68235779 188.25343323]
[227.43997192 202.30752563]
[218.67158508 214.47778320]
[207.00000000 223.89979553]
[193.25425720 229.90432739]
[178.41067505 232.06488037]
[163.52357483 230.22798157]
[149.65036011 224.52412415]
[137.77642822 215.35842896]
[128.74517822 203.38194275]
[123.19807434 189.44531250]
[121.52912140 174.53845215]
[123.85686493 159.72015381]
[130.01597595 146.04296875]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 79]
[3 78]
[5 76]
[6 75]
[8 73]
[9 72]
[10 71]
[11 70]
[12 69]
[13 68]
[14 67]
[15 66]
[16 65]
[18 63]
[19 62]
[20 61]
[21 60]
[22 59]
[29 56]
[30 55]
[31 54]
[32 53]
[33 52]
[34 51]
[37 50]
[38 49]
[39 48]
[40 47]
[82 124]
[83 123]
[84 122]
[85 121]
[86 120]
[87 119]
[88 118]
[89 117]
[90 116]
[94 110]
[95 109]
[96 108]
[97 107]
[98 106]
[99 105]
[100 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
