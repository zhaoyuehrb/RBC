%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 11:56:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCACAGGAGCACCUCAAGCCAUGAAGUGUCAGCUGGAGAACAGUGGUGGGCAUGGAGAGGAUAUGACAUGAAAUAAAAGAUCCAGCCCAACUGA\
) } def
/len { sequence length } bind def

/coor [
[87.42639160 110.35610962]
[72.75755310 113.49062347]
[58.14139938 116.86225891]
[43.58175278 120.47013855]
[29.02210999 124.07801056]
[23.10923195 138.30278015]
[10.10612488 146.22569275]
[-4.89155817 144.98735046]
[-16.14946556 135.27151489]
[-30.70911026 138.87937927]
[-38.46031952 144.07365417]
[-45.79862976 142.36021423]
[-60.46746826 145.49472046]
[-75.13630676 148.62924194]
[-87.01496124 159.07951355]
[-101.07809448 154.17262268]
[-115.74693298 157.30712891]
[-130.41577148 160.44165039]
[-140.31054688 173.06990051]
[-156.35360718 173.06335449]
[-166.23806763 160.42701721]
[-162.38143921 144.85441589]
[-147.74217224 138.29151917]
[-133.55027771 145.77281189]
[-118.88144684 142.63829041]
[-104.21260834 139.50378418]
[-93.38316345 129.27770996]
[-78.27082062 133.96040344]
[-63.60198212 130.82588196]
[-48.93314362 127.69137573]
[-34.31698608 124.31974030]
[-19.75733948 120.71186829]
[-14.33861732 106.86356354]
[-1.65445256 98.76566315]
[13.54356575 99.70035553]
[25.41423607 109.51836395]
[39.97388077 105.91049194]
[54.53352356 102.30261993]
[60.37974167 97.54779053]
[69.62304688 98.82178497]
[84.29188538 95.68727112]
[96.33853912 84.12743378]
[112.23165894 89.24216461]
[126.79130554 85.63428497]
[141.35095215 82.02641296]
[155.91059875 78.41854095]
[161.16629028 73.91110992]
[167.02581787 73.02258301]
[171.52943420 75.08102417]
[186.29208374 72.42315674]
[201.05473328 69.76528931]
[215.81738281 67.10742950]
[230.58003235 64.44956207]
[238.65121460 59.76792145]
[245.86322021 61.95277405]
[260.70419312 59.77434540]
[275.54516602 57.59591675]
[290.38613892 55.41748810]
[295.00726318 40.91208649]
[305.42559814 29.89641190]
[319.53582764 24.51854706]
[334.52020264 25.79511070]
[347.41119385 33.41954041]
[355.67919922 45.83346176]
[370.52017212 43.65503311]
[385.36114502 41.47660446]
[392.44244385 27.66955566]
[406.30212402 20.69176483]
[421.61077881 23.22633743]
[432.48199463 34.29867554]
[434.73550415 49.65124130]
[427.50482178 63.38065720]
[413.57028198 70.20768738]
[398.29000854 67.50719452]
[387.53958130 56.31757736]
[372.69860840 58.49600601]
[357.85763550 60.67443466]
[353.50585938 74.94075012]
[343.34976196 85.94813538]
[329.36431885 91.47702789]
[314.30380249 90.38098907]
[301.15927124 82.82398224]
[292.56457520 70.25846100]
[277.72360229 72.43688965]
[262.88262939 74.61531830]
[248.04164124 76.79374695]
[233.23789978 79.21221161]
[218.47525024 81.87007904]
[203.71260071 84.52793884]
[188.94995117 87.18580627]
[174.18730164 89.84367371]
[159.51846313 92.97817993]
[144.95881653 96.58605957]
[130.39918518 100.19393158]
[115.83953094 103.80180359]
[109.14679718 113.47889709]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 41]
[2 40]
[3 38]
[4 37]
[5 36]
[9 32]
[10 31]
[12 30]
[13 29]
[14 28]
[16 26]
[17 25]
[18 24]
[43 95]
[44 94]
[45 93]
[46 92]
[49 91]
[50 90]
[51 89]
[52 88]
[53 87]
[55 86]
[56 85]
[57 84]
[58 83]
[64 77]
[65 76]
[66 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
