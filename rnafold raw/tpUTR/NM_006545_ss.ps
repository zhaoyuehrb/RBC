%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 01:33:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUGGUAGUGACUGGAUGGACACAUUGCUGUGGGUAGUCCCUCCUACUAGGAGGCUUGUCAUACUGUCUAGAGGUUGACUCUUAGUUCUGUAAAUAAAGACAUCCAUUUCAAACAGC\
) } def
/len { sequence length } bind def

/coor [
[115.43582153 377.19943237]
[118.13423920 358.00650024]
[118.53019714 343.01171875]
[118.92614746 328.01696777]
[119.32210541 313.02218628]
[109.75296783 306.54458618]
[104.49649048 296.11862183]
[104.98896790 284.33212280]
[111.22308350 274.17529297]
[121.72004700 268.28204346]
[122.90679932 253.32907104]
[124.09355164 238.37608337]
[115.68005371 223.03683472]
[126.08278656 207.91349792]
[126.87442017 192.93440247]
[127.66605377 177.95530701]
[128.45768738 162.97621155]
[129.24931335 147.99711609]
[130.04093933 133.01802063]
[102.53818512 144.30178833]
[74.23580933 135.80337524]
[57.69736481 111.52760315]
[42.80309296 113.30541229]
[27.90881729 115.08322144]
[13.01454353 116.86102295]
[0.21570708 127.11391449]
[-14.96259785 120.90496826]
[-16.90623283 104.62140656]
[-3.61575246 95.01436615]
[11.23673630 101.96675110]
[26.13101006 100.18894196]
[41.02528381 98.41113281]
[55.91955948 96.63333130]
[58.99418259 89.79251862]
[45.07089996 84.21199799]
[30.22620392 82.05909729]
[27.33433533 67.34049988]
[40.26097488 59.73117065]
[51.72668839 69.40336609]
[65.14343262 76.11090088]
[68.21805573 69.27008820]
[59.65951538 56.95134354]
[51.10098267 44.63259888]
[42.54244614 32.31385422]
[33.98390961 19.99510765]
[25.42537498 7.67636347]
[11.42250156 -1.88166416]
[16.73061752 -17.98322487]
[33.67235565 -17.33990860]
[37.74411774 -0.88217211]
[46.30265427 11.43657207]
[54.86119080 23.75531769]
[63.41972733 36.07406235]
[71.97826385 48.39280701]
[80.53679657 60.71155167]
[95.64610291 56.17208481]
[111.45598602 57.26680374]
[125.92495728 63.90479279]
[137.16687012 75.27610779]
[144.72395325 62.31884766]
[152.28105164 49.36159134]
[159.83813477 36.40433884]
[156.03616333 21.29861832]
[163.88470459 8.26577091]
[178.30912781 4.73426628]
[185.86621094 -8.22298908]
[181.60110474 -23.44088554]
[189.41860962 -37.17631912]
[204.68074036 -41.28030014]
[218.33276367 -33.31800842]
[222.27514648 -18.01333427]
[214.16896057 -4.44626522]
[198.82347107 -0.66590464]
[191.26638794 12.29135132]
[195.29460144 26.58502388]
[187.81521606 39.83317566]
[172.79537964 43.96142197]
[165.23829651 56.91867828]
[157.68121338 69.87593079]
[150.12413025 82.83319092]
[152.92552185 89.79035950]
[165.76953125 82.04235840]
[178.48236084 74.08097076]
[190.81567383 82.61849976]
[187.84022522 97.32042694]
[173.15753174 100.39027405]
[158.52828979 103.70470428]
[161.32968140 110.66187286]
[175.75706482 114.76681519]
[190.18444824 118.87175751]
[202.30885315 109.18782043]
[217.81126404 108.51352692]
[230.73071289 117.10814667]
[236.09939575 131.66688538]
[231.85293579 146.59161377]
[219.62420654 156.14344788]
[204.11538696 156.64953613]
[191.28994751 147.91526794]
[186.07951355 133.29914856]
[171.65213013 129.19419861]
[157.22474670 125.08925629]
[145.02003479 133.80964661]
[144.22840881 148.78874207]
[143.43678284 163.76783752]
[142.64514160 178.74693298]
[141.85351562 193.72602844]
[141.06188965 208.70512390]
[149.12995911 218.87336731]
[148.08706665 231.40779114]
[139.04653931 239.56285095]
[137.85978699 254.51582336]
[136.67301941 269.46881104]
[149.50128174 283.27462769]
[148.31652832 301.76660156]
[134.31687927 313.41815186]
[133.92092896 328.41290283]
[133.52496338 343.40768433]
[133.12901306 358.40246582]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 118]
[3 117]
[4 116]
[5 115]
[10 112]
[11 111]
[12 110]
[14 107]
[15 106]
[16 105]
[17 104]
[18 103]
[19 102]
[22 33]
[23 32]
[24 31]
[25 30]
[41 55]
[42 54]
[43 53]
[44 52]
[45 51]
[46 50]
[59 80]
[60 79]
[61 78]
[62 77]
[65 74]
[66 73]
[88 101]
[89 100]
[90 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
