%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 21:55:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACUUUCCAUAUCAAGAGACAUGGUAUUGACUCAACAGUUUCCAGUCAUGGCCAAAUGUUCAAUAUGAGUCUCAAUAAACUGAAUUUUUCUUGCGAAUGUUGAA\
) } def
/len { sequence length } bind def

/coor [
[118.55768585 384.02752686]
[106.93952179 374.50799561]
[96.60611725 363.60736084]
[87.72045135 351.49752808]
[80.42266846 338.36947632]
[74.82785034 324.43026733]
[71.02423859 309.89978027]
[69.07183075 295.00711060]
[69.00141907 279.98718262]
[70.81410217 265.07687378]
[74.48130035 250.51132202]
[79.94517517 236.52027893]
[87.11955261 223.32438660]
[95.89128113 211.13177490]
[106.12202454 200.13471985]
[117.65042114 190.50666809]
[130.29464722 182.39947510]
[123.84367371 168.85751343]
[117.39270020 155.31553650]
[110.94171906 141.77357483]
[104.49074554 128.23159790]
[98.67945862 123.47023773]
[98.05592346 114.19140625]
[86.89150238 105.77431488]
[88.21688843 91.85544586]
[82.17003632 78.12826538]
[76.12319183 64.40107727]
[70.07633972 50.67389297]
[64.02948761 36.94670868]
[57.98263550 23.21952629]
[51.93578339 9.49234104]
[48.01438141 6.86826706]
[45.48824692 3.43314719]
[44.43977356 -0.23694015]
[44.74235535 -3.60352159]
[46.09392929 -6.23495340]
[41.71307755 -20.58096886]
[37.33222580 -34.92698288]
[21.25456238 -38.44392014]
[9.18136406 -49.49084473]
[4.30963326 -65.01556396]
[7.86556530 -80.79776001]
[18.79754829 -92.59618378]
[13.99349976 -106.80607605]
[9.18945217 -121.01597595]
[-3.47727633 -131.43164062]
[-0.52385473 -147.56263733]
[15.01148987 -152.81478882]
[27.14732742 -141.78512573]
[23.39934731 -125.82002258]
[28.20339584 -111.61012268]
[33.00744247 -97.40023041]
[46.62932968 -95.58093262]
[58.17485428 -88.00476074]
[65.33419037 -76.11854553]
[66.64527893 -62.23803329]
[61.79208374 -49.09677887]
[51.67823792 -39.30783463]
[56.05908966 -24.96182060]
[60.43994141 -10.61580563]
[65.66296387 3.44548988]
[71.70981598 17.17267418]
[77.75666809 30.89985847]
[83.80352020 44.62704086]
[89.85037231 58.35422516]
[95.89722443 72.08141327]
[101.94407654 85.80859375]
[113.10849762 94.22568512]
[111.78311157 108.14455414]
[118.03270721 121.78062439]
[124.48368835 135.32260132]
[130.93466187 148.86456299]
[137.38565063 162.40652466]
[143.83662415 175.94850159]
[158.09902954 171.23818970]
[172.83934021 168.35263062]
[187.82507324 167.33732605]
[202.81990051 168.20829773]
[217.58731079 170.95178223]
[231.89440918 175.52455139]
[245.51556396 181.85444641]
[258.23593140 189.84165955]
[269.85488892 199.36021423]
[280.18920898 210.25999451]
[289.07589722 222.36907959]
[296.37478638 235.49650574]
[301.97076416 249.43524170]
[305.77560425 263.96542358]
[307.72927856 278.85794067]
[307.80093384 293.87783813]
[305.98950195 308.78833008]
[302.32354736 323.35415649]
[296.86083984 337.34567261]
[289.68759155 350.54214478]
[280.91687012 362.73550415]
[270.68707275 373.73342896]
[259.15948486 383.36245728]
[246.51593018 391.47070312]
[232.95581055 397.93032837]
[218.69300842 402.63943481]
[203.95245361 405.52374268]
[188.96662903 406.53778076]
[173.97187805 405.66555786]
[159.20469666 402.92083740]
[144.89799500 398.34686279]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 74]
[18 73]
[19 72]
[20 71]
[21 70]
[23 69]
[25 67]
[26 66]
[27 65]
[28 64]
[29 63]
[30 62]
[31 61]
[36 60]
[37 59]
[38 58]
[43 52]
[44 51]
[45 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
