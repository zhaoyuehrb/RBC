%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 07:21:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUGUCCAGUGUCUGCUUGCCAUCCUGCCAGAACAGGCCCUCAAGCCCAAGAGCCAUCCCAGGCCUGUUCAGGCCUCAGCUAAGCCUCUCUUCAUCUGGAAGAAGAGGCAAGGGGGCAGGAGACCAGGCUCUAGCUCUGGGCCCUCCUUCAGCCCCCAUCAUGGGAAUAAAUUAAUUUUCUCAAUGUACA\
) } def
/len { sequence length } bind def

/coor [
[96.87679291 270.12811279]
[80.49740601 269.32342529]
[73.24626923 254.61448669]
[82.58274841 241.13256836]
[83.31876373 226.15063477]
[84.05477905 211.16870117]
[76.95129395 198.07711792]
[85.35641479 184.67321777]
[86.09243011 169.69128418]
[71.77442932 165.21972656]
[63.85341263 177.95774841]
[55.93239594 190.69578552]
[55.21549988 206.50074768]
[41.92410660 213.22294617]
[44.15213394 229.11053467]
[33.01570129 240.65867615]
[17.05772972 239.00862122]
[8.51980686 225.42614746]
[13.95149803 210.33058167]
[29.18607330 205.30194092]
[29.33640480 190.40808105]
[43.19436264 182.77476501]
[51.11538315 170.03674316]
[59.03639984 157.29870605]
[47.34673691 145.44483948]
[38.89960098 131.34230042]
[34.08955002 115.84197235]
[33.09522629 99.85269165]
[18.19350815 98.13838959]
[3.29179192 96.42407990]
[-11.30223083 102.53350830]
[-23.06183815 93.39234161]
[-37.96355438 91.67803955]
[-52.86527252 89.96372986]
[-67.76699066 88.24942780]
[-82.66870880 86.53512573]
[-97.57041931 84.82081604]
[-112.47213745 83.10651398]
[-127.37385559 81.39221191]
[-142.27557373 79.67790222]
[-157.25750732 78.94188690]
[-172.25549316 79.18731689]
[-187.25349426 79.43273926]
[-196.05700684 92.21075439]
[-210.70111084 97.34203339]
[-225.55482483 92.85350800]
[-234.90660095 80.47110748]
[-235.16047668 64.95610809]
[-226.21885681 52.27434921]
[-211.51995850 47.30222702]
[-196.71580505 51.95162582]
[-187.49891663 64.43475342]
[-172.50091553 64.18932343]
[-157.50292969 63.94389725]
[-168.86700439 54.15320206]
[-172.42895508 39.58225632]
[-166.86335754 25.65300369]
[-154.24119568 17.54861641]
[-139.25927734 18.28479195]
[-127.49246216 27.58759308]
[-123.31926727 41.99538422]
[-128.29257202 56.14693069]
[-140.56126404 64.77619171]
[-125.65955353 66.49049377]
[-110.75783539 68.20479584]
[-95.85611725 69.91910553]
[-80.95439911 71.63340759]
[-66.05268097 73.34770966]
[-51.15096664 75.06201172]
[-36.24925232 76.77632141]
[-21.34753418 78.49062347]
[-7.81938171 72.25858307]
[5.00609636 81.52236176]
[19.90781212 83.23667145]
[34.80952835 84.95097351]
[37.26543045 76.74823761]
[40.74885559 68.92633820]
[45.20274734 61.61338806]
[50.55416107 54.92917252]
[56.71543884 48.98316574]
[63.58567047 43.87275696]
[71.05233002 39.68165207]
[78.99311829 36.47849655]
[87.27797699 34.31575012]
[95.77120972 33.22883987]
[96.50722504 18.24690628]
[97.24324036 3.26497531]
[97.97925568 -11.71695614]
[98.71527100 -26.69888878]
[99.45128632 -41.68082047]
[100.06470490 -56.66827393]
[100.55549622 -71.66024017]
[101.04627991 -86.65220642]
[101.53706360 -101.64418030]
[91.66374969 -114.28922272]
[95.53411102 -129.85841370]
[110.17914581 -136.40841675]
[124.36444092 -128.91461182]
[127.20824432 -113.12561035]
[116.52903748 -101.15338898]
[116.03824615 -86.16142273]
[115.54746246 -71.16945648]
[115.05667877 -56.17748642]
[117.98477173 -49.37840271]
[114.43321991 -40.94480515]
[113.69720459 -25.96287346]
[112.96118927 -10.98094177]
[112.22517395 4.00099039]
[111.48915863 18.98292160]
[110.75314331 33.96485519]
[132.13746643 41.31904984]
[149.85037231 55.37701035]
[161.86833191 74.53274536]
[176.29174805 70.41391754]
[190.71517944 66.29508972]
[205.13861084 62.17625809]
[219.56202698 58.05743027]
[233.98545837 53.93859863]
[248.30346680 49.46704483]
[262.50741577 44.64545059]
[276.71136475 39.82386017]
[290.91531372 35.00226593]
[305.11926270 30.18067551]
[317.69384766 14.43842411]
[336.47714233 18.98978424]
[350.51574707 13.70603371]
[364.55432129 8.42228317]
[378.59292603 3.13853216]
[392.58779907 -2.25989318]
[406.53805542 -7.77263212]
[416.30340576 -20.94724464]
[432.56253052 -18.80896759]
[438.58947754 -3.55747867]
[428.18423462 9.11779881]
[412.05081177 6.17762613]
[398.10055542 11.69036484]
[393.02706909 17.08120346]
[383.87667847 17.17712212]
[369.83807373 22.46087265]
[355.79949951 27.74462318]
[341.76089478 33.02837372]
[338.38897705 42.69508362]
[330.07315063 49.03623962]
[319.42022705 49.75973511]
[309.94085693 44.38462830]
[295.73690796 49.20621872]
[281.53295898 54.02780914]
[267.32901001 58.84940338]
[253.12504578 63.67099380]
[251.24382019 66.67108917]
[247.80812073 68.90264893]
[243.19807434 69.64150238]
[238.10429382 68.36203003]
[223.68086243 72.48085785]
[209.25743103 76.59968567]
[194.83401489 80.71851349]
[180.41058350 84.83734131]
[165.98715210 88.95617676]
[166.85676575 102.53835297]
[164.95979309 116.01549530]
[160.37472534 128.82991028]
[153.29129028 140.45130920]
[144.00262451 150.39880371]
[152.53913879 162.73281860]
[161.07563782 175.06684875]
[169.61213684 187.40086365]
[178.14863586 199.73489380]
[186.68513489 212.06892395]
[201.98590088 210.73382568]
[215.89749146 217.24250793]
[224.67778015 229.84417725]
[225.96492004 245.14904785]
[219.41265869 259.04016113]
[206.78352356 267.78091431]
[191.47470093 269.02008057]
[177.60417175 262.42428589]
[168.90306091 249.76783752]
[167.71189880 234.45520020]
[174.35112000 220.60542297]
[165.81462097 208.27139282]
[157.27810669 195.93737793]
[148.74160767 183.60334778]
[140.20510864 171.26933289]
[131.66860962 158.93530273]
[117.26623535 166.46409607]
[101.07436371 170.42729187]
[100.33834839 185.40922546]
[107.38919067 199.57243347]
[99.03671265 211.90472412]
[98.30069733 226.88664246]
[97.56468201 241.86857605]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 191]
[5 190]
[6 189]
[8 187]
[9 186]
[10 24]
[11 23]
[12 22]
[14 20]
[28 75]
[29 74]
[30 73]
[32 71]
[33 70]
[34 69]
[35 68]
[36 67]
[37 66]
[38 65]
[39 64]
[40 63]
[41 54]
[42 53]
[43 52]
[85 110]
[86 109]
[87 108]
[88 107]
[89 106]
[90 105]
[91 103]
[92 102]
[93 101]
[94 100]
[113 158]
[114 157]
[115 156]
[116 155]
[117 154]
[118 153]
[119 149]
[120 148]
[121 147]
[122 146]
[123 145]
[125 141]
[126 140]
[127 139]
[128 138]
[129 136]
[130 135]
[163 184]
[164 183]
[165 182]
[166 181]
[167 180]
[168 179]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
