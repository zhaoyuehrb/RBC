%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 15:08:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAUUCUAAAGUAAGUUGCAAGACCCAUGAUACUAGACCACUAAAUACUUCAUCACACACCUCCUAAGAAUAAGAACCAACAUUAUCACACCAAAGAAAAUAAAUAAUUCCAUAAUAUUA\
) } def
/len { sequence length } bind def

/coor [
[157.72760010 59.24950409]
[146.46061707 69.15178680]
[135.19364929 79.05406952]
[123.92666626 88.95635223]
[112.65968323 98.85863495]
[101.78350067 109.18862152]
[91.31433868 119.93090057]
[80.84517670 130.67318726]
[81.61174011 141.67282104]
[76.24820709 151.05287170]
[66.77525330 155.77383423]
[56.49526978 154.46406555]
[45.48698807 164.65316772]
[34.47871017 174.84226990]
[26.96171951 190.03869629]
[10.27827072 187.02224731]
[8.55838490 170.15576172]
[24.28960991 163.83398438]
[35.29788971 153.64488220]
[46.30617142 143.45579529]
[50.52325058 124.65679932]
[70.10289764 120.20402527]
[80.57205963 109.46173859]
[91.04122162 98.71945953]
[91.52458191 94.75869751]
[93.81094360 91.05129242]
[97.73516846 88.42373657]
[102.75740051 87.59165192]
[114.02438354 77.68936920]
[125.29135895 67.78708649]
[136.55833435 57.88480759]
[147.82531738 47.98252487]
[138.71127319 36.06149673]
[130.43200684 23.54629135]
[123.02610016 10.49526310]
[116.52809906 -3.03073931]
[110.96829987 -16.96865082]
[106.37261963 -31.25348473]
[102.76248932 -45.81863785]
[100.15473938 -60.59620285]
[98.56153107 -75.51727295]
[97.99029541 -90.51229095]
[98.44368744 -105.51132965]
[99.91960144 -120.44445801]
[102.41114807 -135.24206543]
[105.90671539 -149.83512878]
[110.39000702 -164.15563965]
[115.84011078 -178.13681030]
[122.23162842 -191.71345520]
[129.53474426 -204.82226562]
[137.71542358 -217.40214539]
[146.73551941 -229.39442444]
[156.55296326 -240.74317932]
[167.12199402 -251.39552307]
[178.39332581 -261.30175781]
[190.31442261 -270.41574097]
[202.82968140 -278.69491577]
[215.88076782 -286.10073853]
[229.40681458 -292.59866333]
[243.34475708 -298.15835571]
[257.62960815 -302.75393677]
[272.19479370 -306.36398315]
[286.97238159 -308.97161865]
[301.89346313 -310.56472778]
[316.88848877 -311.13586426]
[331.88751221 -310.68237305]
[346.82064819 -309.20635986]
[361.61822510 -306.71472168]
[376.21127319 -303.21905518]
[390.53173828 -298.73565674]
[404.51287842 -293.28546143]
[418.08947754 -286.89385986]
[431.19824219 -279.59063721]
[443.77807617 -271.40988159]
[455.77029419 -262.38970947]
[467.11898804 -252.57218933]
[477.77124023 -242.00308228]
[487.67742920 -230.73168945]
[496.79132080 -218.81053162]
[505.07040405 -206.29521179]
[512.47613525 -193.24409485]
[518.97393799 -179.71800232]
[524.53356934 -165.78001404]
[529.12908936 -151.49511719]
[532.73901367 -136.92991638]
[535.34655762 -122.15232086]
[536.93957520 -107.23122406]
[537.51062012 -92.23619843]
[537.05700684 -77.23716736]
[535.58087158 -62.30405426]
[533.08911133 -47.50648880]
[529.59338379 -32.91346359]
[525.10992432 -18.59301949]
[519.65960693 -4.61192513]
[513.26788330 8.96463394]
[505.96459961 22.07335663]
[497.78375244 34.65312195]
[488.76351929 46.64527893]
[478.94589233 57.99391174]
[468.37673950 68.64611053]
[457.10525513 78.55220032]
[445.18405151 87.66600800]
[432.66867065 95.94503021]
[419.61749268 103.35066986]
[406.09136963 109.84839630]
[392.15335083 115.40792084]
[377.86840820 120.00331116]
[363.30319214 123.61314392]
[348.52557373 126.22059631]
[333.60446167 127.81350708]
[318.60943604 128.38444519]
[303.61041260 127.93074799]
[288.67730713 126.45453644]
[273.87976074 123.96269226]
[259.28677368 120.46682739]
[244.96635437 115.98325348]
[230.98529053 110.53285980]
[217.40876770 104.14107513]
[204.30009460 96.83769226]
[191.72038269 88.65676117]
[179.72830200 79.63642883]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[3 30]
[4 29]
[5 28]
[6 24]
[7 23]
[8 22]
[12 20]
[13 19]
[14 18]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
