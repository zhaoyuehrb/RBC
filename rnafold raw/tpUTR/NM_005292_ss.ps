%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 20:13:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAUAAGGUUCUUUCAUUUCAAUCCCAUCAAAAUUCACUUCACUAACUACUCUGGCGUCAAUGGAUAUUCUGUAUAAUACUAUCAAGUCCCUUUUCUCUUGAAAAAAUAAAUUCAUUAUCUUCAUUUUAAAAACUUAUAUAAAACAUUUUUGUGAAUUAUUCA\
) } def
/len { sequence length } bind def

/coor [
[45.43231964 376.58612061]
[42.44866562 391.31854248]
[37.19696426 405.40277100]
[29.80655479 418.49203491]
[20.45942497 430.26391602]
[9.38575840 440.42858887]
[-3.14174414 448.73571777]
[-16.81458282 454.98071289]
[-31.29605293 459.00979614]
[-46.22953415 460.72375488]
[-61.24727631 460.08035278]
[-75.97945404 457.09548950]
[-90.06327057 451.84262085]
[-103.15190125 444.45114136]
[-114.92303467 435.10302734]
[-125.08678436 424.02853394]
[-133.39286804 411.50033569]
[-139.63673401 397.82699585]
[-143.66462708 383.34518433]
[-145.37734985 368.41156006]
[-144.73272705 353.39389038]
[-141.74664307 338.66195679]
[-136.49261475 324.57855225]
[-129.10005188 311.49053955]
[-119.75097656 299.72018433]
[-108.67562866 289.55734253]
[-96.14675903 281.25228882]
[-82.47289276 275.00955200]
[-67.99075317 270.98284912]
[-53.05699158 269.27136230]
[-38.03935623 269.91723633]
[-23.30767250 272.90454102]
[-9.22472095 278.15972900]
[-1.84872735 265.09851074]
[5.52726650 252.03733826]
[12.90326023 238.97613525]
[20.27925491 225.91494751]
[27.65524864 212.85375977]
[35.03124237 199.79257202]
[22.41310883 190.33145142]
[11.15596771 179.28578186]
[1.45728815 166.84930420]
[-6.51280165 153.24020386]
[-12.61449337 138.69718933]
[-16.74075508 123.47535706]
[-18.81920433 107.84172821]
[-18.81338310 92.07055664]
[-16.72339249 76.43846893]
[-12.58589554 61.21969223]
[-6.47346830 46.68117905]
[1.50666595 33.07796097]
[11.21452427 20.64865875]
[22.47981644 9.61129951]
[35.10493088 0.15949678]
[48.86840439 -7.54095030]
[43.29346848 -21.46646881]
[37.71853256 -35.39198685]
[24.11620140 -37.77419281]
[13.55847073 -46.50635147]
[8.74361610 -59.21756744]
[10.83306980 -72.53886414]
[19.17332458 -82.99599457]
[13.86452293 -97.02513123]
[8.55572224 -111.05426788]
[3.24692082 -125.08339691]
[-2.74384999 -132.04034424]
[-2.02661514 -139.43049622]
[-7.06735611 -153.55816650]
[-12.10809708 -167.68583679]
[-17.14883804 -181.81349182]
[-31.53527451 -188.35612488]
[-37.00337601 -203.18432617]
[-30.30901146 -217.50077820]
[-15.42383003 -222.81179810]
[-1.17894709 -215.96644592]
[3.97440267 -201.02595520]
[-3.02117229 -186.85423279]
[2.01956868 -172.72657776]
[7.06030941 -158.59890747]
[12.10105038 -144.47123718]
[17.27605629 -130.39219666]
[22.58485794 -116.36306763]
[27.89365768 -102.33393097]
[33.20245743 -88.30479431]
[49.15090561 -84.50441742]
[59.81082916 -71.83045197]
[60.84272003 -55.13549805]
[51.64405060 -40.96692657]
[57.21898651 -27.04140663]
[62.79392242 -13.11588764]
[97.96728516 -19.06033897]
[133.32307434 -14.32002926]
[165.68836975 0.67963386]
[174.73458862 -11.28556061]
[183.78080750 -23.25075531]
[192.82702637 -35.21595001]
[201.87324524 -47.18114471]
[203.35957336 -63.51279449]
[218.35783386 -70.14485931]
[231.43910217 -60.25484085]
[229.14648438 -44.01673889]
[213.83843994 -38.13492203]
[204.79222107 -26.16972733]
[195.74600220 -14.20453358]
[186.69978333 -2.23933911]
[177.65356445 9.72585487]
[183.04014587 14.65464783]
[188.11454773 19.90429878]
[192.85768127 25.45507431]
[197.25172424 31.28610420]
[201.28012085 37.37546539]
[204.92776489 43.70026779]
[208.18092346 50.23673248]
[211.02737427 56.96028137]
[213.45642090 63.84564209]
[215.45890808 70.86692047]
[217.02732849 77.99773407]
[218.15577698 85.21126556]
[218.84002686 92.48039246]
[219.07748413 99.77778625]
[218.86726379 107.07601929]
[218.21015930 114.34765625]
[217.10862732 121.56534576]
[215.56683350 128.70196533]
[213.59056091 135.73066711]
[211.18724060 142.62504578]
[208.36590576 149.35917664]
[205.13716125 155.90773010]
[201.51315308 162.24610901]
[197.50749207 168.35044861]
[193.13525391 174.19784546]
[188.41287231 179.76628113]
[183.35809326 185.03483582]
[177.98992920 189.98370361]
[172.32856750 194.59426880]
[166.39527893 198.84919739]
[160.21237183 202.73249817]
[153.80308533 206.22958374]
[147.19154358 209.32728577]
[140.40255737 212.01396179]
[133.46170044 214.27952576]
[126.39502716 216.11544800]
[119.22913361 217.51483154]
[111.99093628 218.47241211]
[104.70766449 218.98458862]
[97.40669250 219.04945374]
[90.11547089 218.66673279]
[82.86140442 217.83787537]
[75.67177582 216.56600952]
[68.57361603 214.85589600]
[61.59359741 212.71398926]
[54.75796890 210.14833069]
[48.09243393 207.16856384]
[40.71643829 220.22975159]
[33.34044647 233.29093933]
[25.96445084 246.35214233]
[18.58845711 259.41333008]
[11.21246338 272.47451782]
[3.83646989 285.53570557]
[15.60914230 294.88186646]
[25.77472115 305.95468140]
[34.08287048 318.48150635]
[40.32899094 332.15383911]
[44.35927200 346.63497925]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[33 159]
[34 158]
[35 157]
[36 156]
[37 155]
[38 154]
[39 153]
[55 90]
[56 89]
[57 88]
[62 84]
[63 83]
[64 82]
[65 81]
[67 80]
[68 79]
[69 78]
[70 77]
[93 106]
[94 105]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
