%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 20:50:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUGAUUCACAAUGUAACAAUAUAAAAAUAAGUUUUUAUAUAAUUAUAUAAAAGUAAGAUACUCUGCUGCUUUACUAUUGUAUAACAUAGUAGUUUUAAAGUUCA\
) } def
/len { sequence length } bind def

/coor [
[85.15633392 129.10003662]
[79.93330383 143.16133118]
[74.71028137 157.22262573]
[69.48725891 171.28392029]
[69.63999939 188.23718262]
[53.39156723 193.07708740]
[44.24279404 178.80346680]
[55.42596054 166.06089783]
[60.64898682 151.99960327]
[65.87200928 137.93830872]
[71.09503174 123.87701416]
[64.04859924 110.63512421]
[49.46825790 107.11183167]
[34.88791275 103.58853912]
[20.30756950 100.06525421]
[5.72722578 96.54196167]
[-8.85311794 93.01866913]
[-22.23374939 100.99340820]
[-36.97010040 97.21259308]
[-44.49033356 84.40705872]
[-59.07067871 80.88376617]
[-73.65102386 77.36047363]
[-88.23136902 73.83718872]
[-102.81170654 70.31389618]
[-117.39205170 66.79060364]
[-131.97239685 63.26731110]
[-146.55273438 59.74402237]
[-161.13308716 56.22072983]
[-176.70231628 61.37154388]
[-188.76603699 50.26303101]
[-184.91409302 34.32268524]
[-169.10906982 29.94856262]
[-157.60978699 41.64038849]
[-143.02944946 45.16367722]
[-128.44911194 48.68696976]
[-113.86875916 52.21025848]
[-99.28842163 55.73355103]
[-84.70807648 59.25683975]
[-70.12773132 62.78013229]
[-55.54738617 66.30342102]
[-40.96704483 69.82671356]
[-28.42923355 61.86814117]
[-13.59250069 65.23355865]
[-5.32982683 78.43832397]
[9.25051689 81.96161652]
[23.83086014 85.48490906]
[38.41120529 89.00820160]
[52.99154663 92.53148651]
[67.57189178 96.05477905]
[73.58830261 80.81196594]
[86.24321747 70.41754150]
[102.34345245 67.48088837]
[117.83300018 72.73128510]
[124.28398132 59.18931961]
[130.73495483 45.64735413]
[137.18592834 32.10538483]
[129.65705872 18.53720093]
[131.57466125 3.13907075]
[142.20138550 -8.16811180]
[157.45103455 -11.03650379]
[171.45980835 -4.36314917]
[178.84106445 9.28590965]
[176.75653076 24.66233253]
[166.00778198 35.85356903]
[150.72790527 38.55636215]
[144.27691650 52.09833145]
[137.82594299 65.64029694]
[131.37496948 79.18226624]
[137.01237488 93.08261108]
[151.07366943 98.30563354]
[165.13496399 103.52865601]
[179.19625854 108.75168610]
[193.25755310 113.97470856]
[207.53707886 118.56766510]
[222.00662231 122.52146912]
[236.47615051 126.47527313]
[250.94567871 130.42907715]
[265.41522217 134.38288879]
[279.88476562 138.33670044]
[294.35427856 142.29051208]
[308.82382202 146.24430847]
[323.41366577 139.57229614]
[337.66101074 146.94740295]
[340.63653564 162.71211243]
[330.05764771 174.77307129]
[314.03958130 173.87814331]
[304.87002563 160.71385193]
[290.40048218 156.76004028]
[275.93093872 152.80622864]
[261.46142578 148.85243225]
[246.99188232 144.89862061]
[232.52233887 140.94480896]
[218.05281067 136.99099731]
[203.58328247 133.03720093]
[200.24581909 134.58697510]
[195.96058655 134.49552917]
[191.55694580 132.32189941]
[188.03453064 128.03599548]
[173.97323608 122.81298065]
[159.91194153 117.58995056]
[145.85064697 112.36692810]
[131.78935242 107.14390564]
[127.17221832 118.01049042]
[118.98220825 126.52342224]
[108.29106140 131.56237793]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[3 9]
[4 8]
[12 49]
[13 48]
[14 47]
[15 46]
[16 45]
[17 44]
[20 41]
[21 40]
[22 39]
[23 38]
[24 37]
[25 36]
[26 35]
[27 34]
[28 33]
[53 68]
[54 67]
[55 66]
[56 65]
[69 102]
[70 101]
[71 100]
[72 99]
[73 98]
[74 94]
[75 93]
[76 92]
[77 91]
[78 90]
[79 89]
[80 88]
[81 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
