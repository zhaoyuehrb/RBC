%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 22:02:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCUCUAAAUCCAGUUACAUGUUGCAGCUCUCUGUGUAUUACCCUGGAAAACUGAAAUAAACAAUAAAAAUCGAUGUUUUCCUUUGUA\
) } def
/len { sequence length } bind def

/coor [
[78.96910858 97.31195068]
[65.72489166 90.26987457]
[52.48067856 83.22780609]
[39.23646545 76.18572998]
[28.07098961 85.03669739]
[14.40536880 88.91197205]
[0.34235486 87.25006104]
[-11.96747684 80.33880615]
[-20.65460205 69.26621246]
[-24.41444778 55.74930573]
[-22.70323753 41.86790085]
[-35.69361877 34.36790085]
[-48.68399811 26.86790085]
[-61.67438126 19.36790085]
[-74.66476440 11.86789989]
[-85.51768494 21.39087486]
[-98.77404022 27.05825615]
[-113.11401367 28.32040596]
[-127.11447144 25.06553841]
[-139.39013672 17.62949371]
[-148.73069763 6.76112700]
[-154.22009277 -6.45308781]
[-155.32641602 -20.69765663]
[-151.95333862 -34.55902481]
[-164.67405701 -42.50781250]
[-177.39477539 -50.45660019]
[-190.11550903 -58.40539169]
[-202.83622742 -66.35417938]
[-219.23533630 -66.38543701]
[-227.17213440 -80.73602295]
[-218.48190308 -94.64328766]
[-202.10443115 -93.80062866]
[-194.88743591 -79.07489777]
[-182.16671753 -71.12611389]
[-169.44599915 -63.17732239]
[-156.72526550 -55.22853470]
[-144.00454712 -47.27974319]
[-131.81306458 -57.08221436]
[-116.98935699 -62.16277313]
[-101.29476929 -61.89860535]
[-86.60065460 -56.30309296]
[-74.66524506 -46.02637863]
[-66.92324829 -32.27988815]
[-64.31342316 -16.69353867]
[-67.16476440 -1.12248087]
[-54.17438126 6.37751913]
[-41.18399811 13.87751961]
[-28.19361877 21.37751961]
[-15.20323753 28.87751961]
[-2.27474856 19.65919685]
[13.42776680 16.94056702]
[28.81391907 21.30743217]
[40.83357239 31.94609070]
[47.08148956 46.79443359]
[46.27853775 62.94151688]
[59.52275085 69.98358917]
[72.76696777 77.02566528]
[86.01117706 84.06773376]
[97.73159027 78.91971588]
[110.27892303 81.45632935]
[119.07917023 90.75287628]
[120.92427063 103.42037964]
[133.91465759 110.92037964]
[146.90502930 118.42037964]
[159.89541626 125.92037964]
[176.58869934 121.05473328]
[191.40011597 129.50642395]
[195.53776550 145.70460510]
[208.78198242 152.74668884]
[222.02618408 159.78875732]
[235.27040100 166.83082581]
[248.51461792 173.87290955]
[264.87597656 172.76013184]
[273.79446411 186.52212524]
[266.09555054 201.00170898]
[249.69917297 201.30354309]
[241.47254944 187.11711121]
[228.22833252 180.07504272]
[214.98411560 173.03297424]
[201.73989868 165.99089050]
[188.49568176 158.94882202]
[176.69432068 164.42895508]
[163.71047974 162.00793457]
[154.40504456 152.36094666]
[152.39541626 138.91076660]
[139.40502930 131.41076660]
[126.41464996 123.91075897]
[113.42427063 116.41075897]
[97.69594574 121.07641602]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 58]
[2 57]
[3 56]
[4 55]
[11 49]
[12 48]
[13 47]
[14 46]
[15 45]
[24 37]
[25 36]
[26 35]
[27 34]
[28 33]
[62 88]
[63 87]
[64 86]
[65 85]
[68 81]
[69 80]
[70 79]
[71 78]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
