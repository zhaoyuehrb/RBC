%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 11:55:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUAUCUUGUGAGUCCAAAAUAUCUUUUAAUGCAUCUAUUCACAAGAGUCACAUUUCUGUUCCCAUAUUAUCUAUGCCACAUUGCCUACUCAUCACCAUAUGUAGAUUUCUUUGUAGAAUAAAGCAGAUAUAAGGG\
) } def
/len { sequence length } bind def

/coor [
[-132.27902222 173.29895020]
[-148.42637634 185.05375671]
[-167.76296997 189.93742371]
[-187.49790955 187.26736450]
[-204.79113770 177.44969177]
[-217.16207886 161.91751099]
[-231.29598999 166.94070435]
[-245.42990112 171.96389771]
[-259.56381226 176.98709106]
[-273.69772339 182.01028442]
[-287.83163452 187.03347778]
[-301.96554565 192.05667114]
[-316.09948730 197.07986450]
[-330.23339844 202.10305786]
[-344.36730957 207.12625122]
[-343.00012207 222.14562988]
[-345.41186523 237.03302002]
[-351.45092773 250.85258484]
[-360.73770142 262.73562622]
[-372.68841553 271.93515015]
[-386.55184937 277.87286377]
[-401.45648193 280.17556763]
[-416.46545410 278.69842529]
[-430.63525391 273.53436279]
[-443.07516479 265.00799561]
[-453.00320435 253.65524292]
[-459.79528809 240.18980408]
[-463.02447510 225.45808411]
[-462.48776245 210.38616943]
[-458.21887207 195.92147827]
[-450.48617554 182.97326660]
[-439.77575684 172.35546875]
[-426.76086426 164.73554993]
[-412.25961304 160.59246826]
[-397.18359375 160.18670654]
[-382.48049927 163.54373169]
[-369.07455444 170.45254517]
[-357.80850220 180.47883606]
[-349.39050293 192.99234009]
[-335.25659180 187.96914673]
[-321.12268066 182.94595337]
[-306.98873901 177.92276001]
[-292.85482788 172.89956665]
[-278.72091675 167.87637329]
[-264.58700562 162.85317993]
[-250.45309448 157.82998657]
[-236.31918335 152.80679321]
[-222.18527222 147.78359985]
[-223.23678589 137.26483154]
[-222.15069580 126.74233246]
[-218.96849060 116.64635468]
[-213.81742859 107.39029694]
[-206.90545654 99.35378265]
[-198.51280212 92.86708832]
[-188.98062134 88.19755554]
[-178.69714355 85.53859711]
[-168.08181763 85.00166321]
[-157.56826782 86.61159515]
[-147.58650208 90.30547333]
[-138.54541016 95.93508148]
[-130.81596375 103.27285767]
[-124.71595764 112.02108002]
[-120.49705505 121.82393646]
[-105.68711090 119.44370270]
[-90.87716675 117.06346130]
[-79.53892517 107.40460205]
[-64.68582916 112.85401917]
[-49.87588882 110.47377777]
[-35.06594086 108.09354401]
[-28.90807152 103.89022064]
[-19.89212608 105.83168793]
[-5.03183651 103.78918457]
[9.82845306 101.74668884]
[24.68874168 99.70418549]
[28.28070259 96.43866730]
[33.98776627 95.45126343]
[40.27014923 97.92292023]
[55.20800400 96.55889893]
[58.00617218 84.04122162]
[64.22770691 72.82451630]
[73.36541748 63.82316971]
[84.67440033 57.77098083]
[97.23272705 55.16133118]
[110.01664734 56.20695496]
[121.98400879 60.82261658]
[132.15921021 68.63204193]
[139.71278381 78.99860382]
[153.95738220 74.29843903]
[168.20198059 69.59828186]
[182.44657898 64.89812469]
[184.37541199 49.75737000]
[192.68975830 36.95759201]
[205.73880005 29.04019165]
[220.93164062 27.57717323]
[235.25172424 32.85902405]
[245.85578918 43.83702469]
[250.63839722 58.33148575]
[248.64994812 73.46452332]
[240.28526306 86.23146057]
[227.20513916 94.09741211]
[212.00666809 95.50059509]
[197.70748901 90.16239166]
[187.14672852 79.14271545]
[172.90213013 83.84288025]
[158.65754700 88.54303741]
[144.41294861 93.24319458]
[144.92155457 100.46634674]
[144.26309204 107.67738342]
[142.45466614 114.68896484]
[155.61239624 121.89131927]
[168.77014160 129.09367371]
[181.92788696 136.29602051]
[198.30152893 135.38198853]
[207.05229187 149.25123596]
[199.17813110 163.63629150]
[182.77931213 163.73902893]
[174.72552490 149.45376587]
[161.56779480 142.25140381]
[148.41004944 135.04905701]
[135.25230408 127.84670258]
[119.91905975 140.26655579]
[100.74285126 144.91784668]
[81.42333221 140.90319824]
[65.68777466 128.99716187]
[56.57202530 111.49674988]
[41.63417435 112.86077118]
[26.73124123 114.56447601]
[11.87095261 116.60697174]
[-2.98933673 118.64947510]
[-17.84962654 120.69197083]
[-32.68570328 122.90348816]
[-47.49564743 125.28372192]
[-62.30559540 127.66396332]
[-74.70314026 137.49307251]
[-88.49692535 131.87341309]
[-103.30686951 134.25364685]
[-118.11681366 136.63388062]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 48]
[7 47]
[8 46]
[9 45]
[10 44]
[11 43]
[12 42]
[13 41]
[14 40]
[15 39]
[63 137]
[64 136]
[65 135]
[67 133]
[68 132]
[69 131]
[71 130]
[72 129]
[73 128]
[74 127]
[77 126]
[78 125]
[87 106]
[88 105]
[89 104]
[90 103]
[109 120]
[110 119]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
