%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 14:35:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAAGGCACGUUGAAAUGAUGCAGGCUGCUCCUAUGUUGGAAAUUUGUUCAUUAAAAUUCUCCCAAUAAAGCUUUACAGCCUUCUGCAA\
) } def
/len { sequence length } bind def

/coor [
[79.74086761 264.32501221]
[64.74247742 264.54479980]
[50.73807526 259.17111206]
[39.73652267 248.97473145]
[33.31593704 235.41833496]
[32.39731979 220.44648743]
[37.11129761 206.20889282]
[24.20808220 213.85787964]
[11.30486679 221.50686646]
[-1.46439993 229.37742615]
[-14.09591293 237.46723938]
[-26.72742653 245.55703735]
[-33.78016663 260.36212158]
[-50.14726257 261.38693237]
[-58.99164963 247.57717896]
[-51.21498108 233.13919067]
[-34.81722641 232.92552185]
[-22.18571281 224.83572388]
[-9.55420017 216.74592590]
[-5.53420639 210.35096741]
[3.65587759 208.60365295]
[16.55909348 200.95466614]
[29.46230888 193.30566406]
[40.16005707 182.79100037]
[48.03062439 170.02174377]
[55.90119171 157.25247192]
[63.77175903 144.48320007]
[71.64232635 131.71394348]
[79.51289368 118.94467163]
[72.27804565 103.18048096]
[75.75472260 86.18737030]
[88.59956360 74.53134918]
[105.84943390 72.71618652]
[112.82028198 59.43434906]
[112.38250732 43.61920166]
[125.14820099 35.94546509]
[132.11904907 22.66362381]
[139.08988953 9.38178349]
[146.06074524 -3.90005660]
[153.03158569 -17.18189621]
[160.00244141 -30.46373749]
[158.08218384 -50.38503647]
[174.47798157 -60.39004517]
[180.51588440 -74.12116241]
[186.55380249 -87.85228729]
[192.59170532 -101.58340454]
[198.62960815 -115.31452179]
[190.69328308 -128.64848328]
[192.14367676 -144.09762573]
[202.42309570 -155.72143555]
[217.57888794 -159.05033875]
[231.78334045 -152.80429077]
[239.57456970 -139.38504028]
[237.95664978 -123.95253754]
[227.55174255 -112.44091034]
[212.36073303 -109.27661896]
[206.32283020 -95.54549408]
[200.28491211 -81.81437683]
[194.24700928 -68.08325195]
[188.20910645 -54.35213470]
[192.83926392 -44.95059967]
[191.38359070 -34.34793091]
[184.09455872 -26.21080017]
[173.28428650 -23.49288940]
[166.31343079 -10.21104908]
[159.34259033 3.07079077]
[152.37173462 16.35263062]
[145.40089417 29.63447189]
[138.43003845 42.91631317]
[139.36642456 57.78145599]
[126.10212708 66.40519714]
[119.13127899 79.68703461]
[126.00588226 89.88484192]
[127.82857513 102.04762268]
[124.24527740 113.81262970]
[115.95208740 122.89438629]
[104.56004333 127.52867889]
[92.28215790 126.81523895]
[84.41159058 139.58450317]
[76.54102325 152.35377502]
[68.67045593 165.12304688]
[60.79989243 177.89230347]
[52.92932510 190.66157532]
[67.24850464 186.19378662]
[82.20219421 187.37158203]
[95.64535522 194.02600098]
[105.64964294 205.20249939]
[110.77999115 219.29786682]
[110.30046082 234.29020691]
[104.27986145 248.02891541]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 23]
[8 22]
[9 21]
[10 19]
[11 18]
[12 17]
[24 83]
[25 82]
[26 81]
[27 80]
[28 79]
[29 78]
[33 72]
[34 71]
[36 69]
[37 68]
[38 67]
[39 66]
[40 65]
[41 64]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
