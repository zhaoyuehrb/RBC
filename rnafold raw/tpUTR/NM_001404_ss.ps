%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 22:57:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUCUCUUGCCAUCACCUAGCUGCCUGCACCUGCCCUUCAGGGAGAUGGGGGUCAUUAAAGGAAACUGAACAUUGAA\
) } def
/len { sequence length } bind def

/coor [
[85.82736206 415.34329224]
[71.16139221 411.99304199]
[57.36083984 406.00479126]
[44.89574432 397.58242798]
[34.19066238 387.01284790]
[25.61020470 374.65606689]
[19.44661713 360.93292236]
[15.90983105 346.31082153]
[15.12030697 331.28778076]
[17.10493660 316.37551880]
[21.79612350 302.08190918]
[29.03408813 288.89376831]
[38.57230759 277.26034546]
[50.08591461 267.57778931]
[63.18275833 260.17596436]
[77.41677094 255.30690002]
[92.30313110 253.13648987]
[92.89948273 238.14834595]
[93.49582672 223.16020203]
[80.35701752 213.53025818]
[75.40418243 197.83889771]
[80.73931122 182.09962463]
[94.48202515 172.46534729]
[94.48202515 157.46534729]
[94.18379211 142.46830750]
[93.58744812 127.48016357]
[92.99109650 112.49202728]
[85.68737793 100.56947327]
[92.02075958 88.10432434]
[91.42441559 73.11618042]
[83.14458466 59.63452911]
[90.36977386 46.60971069]
[89.77342987 31.62156868]
[86.22635651 22.90158463]
[89.46333313 16.02818680]
[89.46333313 1.02818644]
[89.46333313 -13.97181320]
[80.79962921 -27.89561653]
[88.76376343 -42.23105240]
[105.16291046 -42.23105240]
[113.12703705 -27.89561653]
[104.46333313 -13.97181320]
[104.46333313 1.02818644]
[104.46333313 16.02818680]
[104.76156616 31.02522087]
[105.35791779 46.01336288]
[113.59509277 58.42296219]
[106.41255188 72.51983643]
[107.00890350 87.50797272]
[114.31262207 99.43052673]
[107.97924042 111.89567566]
[108.57558441 126.88381958]
[109.17193604 141.87196350]
[112.71900940 150.59194946]
[109.48202515 157.46534729]
[109.48202515 172.46534729]
[121.32071686 179.81903076]
[127.86510468 191.99984741]
[127.46825409 205.71250916]
[120.34461975 217.30844116]
[108.48397064 223.75654602]
[107.88762665 238.74468994]
[107.29127502 253.73283386]
[121.95814514 257.07910156]
[135.76031494 263.06365967]
[148.22767639 271.48266602]
[158.93560791 282.04934692]
[167.51939392 294.40383911]
[173.68667603 308.12530518]
[177.22740173 322.74645996]
[178.02098083 337.76928711]
[176.04037476 352.68206787]
[171.35304260 366.97695923]
[164.11862183 380.16702271]
[154.58354187 391.80303955]
[143.07255554 401.48867798]
[129.97770691 408.89407349]
[115.74500275 413.76693726]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 63]
[18 62]
[19 61]
[23 56]
[24 55]
[25 53]
[26 52]
[27 51]
[29 49]
[30 48]
[32 46]
[33 45]
[35 44]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
