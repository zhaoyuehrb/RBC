%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 22:00:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGUGAGGUGGAGAAAGAAUGGGUUGGCUUGUCUGCUGGAGUUGGAGACAGGCUAUGGUAGAAUGUGCACGGCUGC\
) } def
/len { sequence length } bind def

/coor [
[78.61763763 260.30792236]
[75.25875092 244.62043762]
[85.54051971 232.30520630]
[85.54051971 217.30520630]
[85.54051971 202.30520630]
[77.46626282 195.50500488]
[74.55464935 185.12628174]
[78.05534363 174.69557190]
[86.99377441 167.90457153]
[88.20077515 152.95321655]
[89.40777588 138.00184631]
[82.71968079 124.69326019]
[91.54234314 111.56042480]
[85.72250366 98.84740448]
[93.50629425 87.23257446]
[82.78237152 80.21604156]
[76.19482422 69.30886841]
[74.98999023 56.69738007]
[79.34259796 44.87767029]
[88.33370209 36.16153336]
[100.14389801 32.22436142]
[102.55007172 17.41860771]
[91.79495239 6.38984156]
[89.62158966 -8.68098736]
[96.65601349 -21.98440361]
[110.01525879 -28.51652718]
[112.42142487 -43.32228088]
[114.82759857 -58.12803650]
[117.23376465 -72.93379211]
[119.63993073 -87.73954010]
[122.04610443 -102.54529572]
[124.45227051 -117.35105133]
[126.85844421 -132.15679932]
[129.26461792 -146.96255493]
[131.67077637 -161.76831055]
[126.24737549 -176.63092041]
[135.92608643 -187.95223999]
[125.57817841 -199.67634583]
[125.23902130 -215.31025696]
[135.06875610 -227.47209167]
[150.42607117 -230.41943359]
[164.05972290 -222.76060486]
[169.53231812 -208.11189270]
[164.25985718 -193.38996887]
[150.73184204 -185.54606628]
[156.32734680 -171.74246216]
[146.47653198 -159.36213684]
[144.07035828 -144.55639648]
[141.66419983 -129.75064087]
[139.25802612 -114.94488525]
[136.85185242 -100.13912964]
[134.44569397 -85.33337402]
[132.03952026 -70.52761841]
[129.63334656 -55.72186661]
[127.22718048 -40.91611099]
[124.82100677 -26.11035728]
[135.42422485 -15.68395615]
[137.88386536 -0.83760452]
[131.04989624 12.76939106]
[117.35582733 19.82477760]
[114.94965363 34.63053131]
[127.88010406 46.32606125]
[131.43727112 63.55131912]
[124.06987000 79.69171906]
[108.45765686 88.43957520]
[114.27749634 101.15259552]
[106.49370575 112.76742554]
[113.09546661 127.14544678]
[104.35913086 139.20884705]
[103.15213776 154.16021729]
[101.94513702 169.11157227]
[111.55354309 186.61727905]
[100.54051971 202.30520630]
[100.54051971 217.30520630]
[100.54051971 232.30520630]
[110.82228851 244.62043762]
[107.46340942 260.30792236]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 75]
[4 74]
[5 73]
[9 71]
[10 70]
[11 69]
[13 67]
[15 65]
[21 61]
[22 60]
[26 56]
[27 55]
[28 54]
[29 53]
[30 52]
[31 51]
[32 50]
[33 49]
[34 48]
[35 47]
[37 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
