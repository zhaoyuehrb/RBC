%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 06:40:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUUUUUGCAGAAAUGGGGCAGAGGGACACCCUUUGGGCGUGGCUUCCUGGUGAUGGGAAGGGUCUUGUGUUUUAAUGCCAAUAAAUGUGCCAGCUGGGCAGAA\
) } def
/len { sequence length } bind def

/coor [
[65.58890533 385.57504272]
[50.43630219 390.84555054]
[36.94559860 382.16336060]
[35.46569824 366.18869019]
[47.13186264 355.17596436]
[48.90596008 340.28125000]
[50.68005753 325.38653564]
[52.45415497 310.49182129]
[54.22825241 295.59710693]
[56.00234985 280.70239258]
[43.36820984 272.77496338]
[35.39609528 260.09606934]
[33.71257782 245.15193176]
[38.70479965 230.90069580]
[49.43312836 220.18669128]
[63.80751801 215.17288208]
[65.58161163 200.27816772]
[67.35571289 185.38343811]
[61.17801285 171.83038330]
[70.49319458 159.04219055]
[72.26729584 144.14747620]
[74.04138947 129.25276184]
[64.93939209 117.32994080]
[50.10378647 115.11524200]
[35.26818466 112.90054321]
[20.43258286 110.68585205]
[5.59697962 108.47115326]
[-10.96127987 112.11263275]
[-19.04423141 97.20953369]
[-6.96113920 85.31687927]
[7.81167793 93.63554382]
[22.64728165 95.85024261]
[37.48288345 98.06494141]
[52.31848526 100.27964020]
[67.15409088 102.49433899]
[72.79634094 84.78918457]
[86.54832458 73.86419678]
[103.04066467 72.54659271]
[108.67807770 58.64624405]
[114.31549072 44.74590302]
[119.95290375 30.84555817]
[125.59031677 16.94521332]
[112.05368042 -4.54472017]
[117.42375183 -29.14990234]
[138.32568359 -42.81181335]
[138.77018738 -57.80522537]
[139.21469116 -72.79863739]
[139.65919495 -87.79205322]
[140.10368347 -102.78546143]
[140.54818726 -117.77887726]
[140.99269104 -132.77229309]
[132.74540710 -146.94671631]
[141.13084412 -161.03984070]
[157.52278137 -160.55387878]
[165.05860901 -145.98873901]
[155.98609924 -132.32778931]
[155.54159546 -117.33437347]
[155.09710693 -102.34096527]
[154.65260315 -87.34754944]
[154.20809937 -72.35414124]
[153.76359558 -57.36072540]
[153.31910706 -42.36731339]
[159.55940247 -40.06711578]
[165.21817017 -36.55105591]
[170.06100464 -31.95936394]
[173.88619995 -26.47693825]
[176.53318787 -20.32588768]
[177.88922119 -13.75655460]
[177.89421082 -7.03730869]
[176.54335022 -0.44359511]
[173.88752747 5.75336075]
[170.03135681 11.29771042]
[165.12916565 15.95954227]
[159.37873840 19.54441833]
[153.01336670 21.90147781]
[146.29240417 22.92977905]
[139.49066162 22.58262634]
[133.85324097 36.48297119]
[128.21583557 50.38331604]
[122.57842255 64.28366089]
[116.94100189 78.18400574]
[124.80935669 86.21643829]
[128.98448181 96.98323059]
[128.56811523 108.82773590]
[123.38921356 119.82501221]
[114.06958008 128.09463501]
[101.95774078 132.12098694]
[88.93611145 131.02685547]
[87.16201019 145.92156982]
[85.38791656 160.81628418]
[91.43872070 175.43472290]
[82.25042725 187.15754700]
[80.47633362 202.05226135]
[78.70223236 216.94697571]
[91.49679565 225.19685364]
[99.40840912 238.13105774]
[100.91354370 253.15618896]
[95.76696014 267.28677368]
[85.03977966 277.73843384]
[70.89706421 282.47650146]
[69.12297058 297.37121582]
[67.34886932 312.26593018]
[65.57477570 327.16064453]
[63.80067825 342.05535889]
[62.02658081 356.95007324]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 105]
[6 104]
[7 103]
[8 102]
[9 101]
[10 100]
[16 94]
[17 93]
[18 92]
[20 90]
[21 89]
[22 88]
[23 35]
[24 34]
[25 33]
[26 32]
[27 31]
[38 81]
[39 80]
[40 79]
[41 78]
[42 77]
[45 62]
[46 61]
[47 60]
[48 59]
[49 58]
[50 57]
[51 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
