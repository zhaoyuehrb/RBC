%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 22:35:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCCCACCAGUCAUGCAACCUGAGAUUUUAUUUAUAAAUUAGCCACUUGUCUUAAUUUAUUGCCACCCAGUCGCUAU\
) } def
/len { sequence length } bind def

/coor [
[82.25830078 325.42968750]
[67.43836975 322.82852173]
[53.37862015 317.46942139]
[40.58730698 309.54608154]
[29.52683258 299.34500122]
[20.59702110 287.23489380]
[14.12068176 273.65350342]
[10.33192825 259.09185791]
[9.36772251 244.07630920]
[11.26291943 229.14965820]
[15.94900990 214.85151672]
[23.25659370 201.69873047]
[32.92150879 190.16677856]
[44.59437180 180.67253113]
[57.85321426 173.55918884]
[72.21874237 169.08390808]
[87.17164612 167.40846252]
[88.34853363 152.45471191]
[89.52542114 137.50094604]
[90.70230865 122.54718781]
[77.35203552 109.04943085]
[77.72477722 90.06838989]
[91.59467316 77.10517120]
[91.00577545 62.11673737]
[90.41687775 47.12829971]
[89.82798004 32.13986588]
[89.23908234 17.15143013]
[88.65018463 2.16299486]
[73.93139648 -1.15657699]
[60.57375336 -8.17340088]
[49.48800659 -18.40905762]
[41.43000412 -31.16566277]
[36.94915009 -45.57345200]
[36.35095596 -60.65007401]
[39.67621231 -75.36758423]
[46.69819260 -88.72251892]
[56.93812943 -99.80430603]
[69.69784546 -107.85738373]
[84.10736084 -112.33267975]
[99.18421936 -112.92504883]
[113.90044403 -109.59410858]
[127.25266266 -102.56697083]
[138.33049011 -92.32276154]
[146.37864685 -79.55993652]
[150.84837341 -65.14868927]
[151.43492126 -50.07160950]
[148.09831238 -35.35667419]
[141.06600952 -22.00716782]
[130.81752014 -10.93328571]
[118.05158997 -2.89006424]
[103.63862610 1.57409775]
[104.22751617 16.56253242]
[104.81641388 31.55096817]
[105.40531158 46.53940582]
[105.99420929 61.52783966]
[106.58310699 76.51627350]
[115.94100952 81.54175568]
[122.27522278 90.06838989]
[124.38428497 100.47884369]
[121.86814117 110.79847717]
[115.20405579 119.06985474]
[105.65606689 123.72406769]
[104.47917938 138.67782593]
[103.30229187 153.63159180]
[102.12540436 168.58535767]
[116.63211823 172.57931519]
[130.12069702 179.24676514]
[142.10353088 188.34666443]
[152.14746094 199.55006409]
[159.88937378 212.45196533]
[165.04945374 226.58596802]
[167.44111633 241.44114685]
[166.97795105 256.48049927]
[163.67666626 271.16033936]
[157.65660095 284.95004272]
[149.13540649 297.35107422]
[138.42109680 307.91516113]
[125.90099335 316.26043701]
[112.02768707 322.08517456]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 65]
[18 64]
[19 63]
[20 62]
[23 56]
[24 55]
[25 54]
[26 53]
[27 52]
[28 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
