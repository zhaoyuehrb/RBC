%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:49:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUGCUGCCUCGACACGUGGGCUCCCCUCUUCCUCUUGACCCUGCACCCUCCUAGGGCAUUGUAUCUGUCUUUCCACUCUGGAUUCAGCCUUCUUUUUCUGGACUCUGGACUUUCUCUAAUAAUAAAUAGUUCUUCUUUA\
) } def
/len { sequence length } bind def

/coor [
[79.89425659 215.79507446]
[75.37190247 201.49304199]
[73.11369324 186.66400146]
[73.17388153 171.66412354]
[75.55101013 156.85366821]
[80.18798828 142.58837891]
[86.97344208 129.21087646]
[95.74267578 117.04450226]
[86.24281311 128.65280151]
[76.74295807 140.26110840]
[67.24310303 151.86941528]
[57.87223434 163.58209229]
[48.63150024 175.39772034]
[43.63656998 191.59916687]
[26.68554497 191.28445435]
[22.29545212 174.90875244]
[36.81587982 166.15698242]
[46.05661392 154.34135437]
[47.71263885 147.07736206]
[55.63479614 142.36955261]
[65.13465118 130.76126099]
[74.63451385 119.15295410]
[84.13436890 107.54464722]
[70.23213959 113.17742157]
[56.32991791 118.81018829]
[45.04898453 128.69657898]
[30.74207687 133.20350647]
[15.83151722 131.56788635]
[2.84183860 124.06667328]
[-6.02765560 111.96989441]
[-9.27525616 97.32567596]
[-6.35110664 82.61345673]
[2.24970055 70.32418823]
[15.07094860 62.53858948]
[29.94185066 60.57484436]
[44.34458923 64.76544952]
[55.83861542 74.39833069]
[69.86204529 79.72217560]
[83.88548279 85.04602051]
[74.13114929 73.65071869]
[64.37681580 62.25541306]
[46.95048523 61.24613571]
[35.83405685 48.22773743]
[37.50033951 31.52856827]
[27.49630737 20.35183716]
[17.49227333 9.17510605]
[7.48824072 -2.00162554]
[-2.88112497 -12.84027195]
[-13.60440540 -23.32889748]
[-24.32768440 -33.81752396]
[-35.05096436 -44.30614853]
[-50.60198212 -51.05908966]
[-48.41789627 -67.87176514]
[-31.65764999 -70.42724609]
[-24.56233978 -55.02942657]
[-13.83905983 -44.54080200]
[-3.11577964 -34.05217743]
[7.60750055 -23.56355095]
[11.19591045 -23.26446724]
[14.80709839 -21.16274071]
[17.57225037 -17.27246284]
[18.66497231 -12.00565815]
[28.66900444 -0.82892698]
[38.67303848 10.34780407]
[48.67707062 21.52453613]
[61.56230545 20.43679428]
[72.87763214 27.08953285]
[78.35298920 39.23347473]
[75.77212524 52.50107956]
[85.52645111 63.89638519]
[95.28078461 75.29169464]
[99.59014893 79.53557587]
[102.33776093 84.39199066]
[103.46265411 89.45844269]
[115.67546082 80.74940491]
[127.88826752 72.04035950]
[140.10107422 63.33131409]
[147.53349304 44.64921951]
[166.78567505 43.44350433]
[178.60130310 34.20277405]
[190.41691589 24.96203995]
[202.23254395 15.72130775]
[214.04815674 6.48057556]
[225.86378479 -2.76015663]
[221.76060486 -17.39683533]
[223.57592773 -32.48898697]
[231.03295898 -45.73516464]
[242.99452209 -55.11542511]
[257.63659668 -59.19934845]
[272.72634888 -57.36416245]
[285.96270752 -49.88972092]
[295.32720947 -37.91582489]
[299.39187622 -23.26840019]
[297.53683472 -8.18107891]
[290.04498291 5.04543543]
[278.05877686 14.39419460]
[263.40603638 18.43958092]
[248.32115173 16.56470108]
[235.10450745 9.05546284]
[223.28889465 18.29619598]
[211.47326660 27.53692818]
[199.65765381 36.77766037]
[187.84202576 46.01839066]
[176.02641296 55.25912476]
[175.68688965 65.56829071]
[169.56623840 74.14328766]
[159.51475525 77.97175598]
[148.81010437 75.54412079]
[136.59730530 84.25315857]
[124.38450623 92.96220398]
[112.17169952 101.67124939]
[124.89525604 93.72699738]
[138.69349670 87.84410095]
[153.23501587 84.16385651]
[168.17054749 82.77464294]
[183.14137268 83.70983887]
[197.78790283 86.94698334]
[211.75836182 92.40831757]
[224.71720886 99.96267700]
[236.35319519 109.42861176]
[246.38682556 120.57877350]
[254.57713318 133.14535522]
[260.72738647 146.82652283]
[264.68988037 161.29368591]
[266.36941528 176.19935608]
[265.72567749 191.18553162]
[262.77413940 205.89228821]
[257.58566284 219.96635437]
[250.28486633 233.06973267]
[241.04711914 244.88769531]
[230.09429932 255.13638306]
[217.68945312 263.56964111]
[204.13053894 269.98492432]
[189.74322510 274.22814941]
[174.87304688 276.19738770]
[159.87718201 275.84536743]
[145.11578369 273.18051147]
[130.94342041 268.26687622]
[117.70047760 261.22241211]
[105.70501709 252.21635437]
[95.24516296 241.46501160]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 23]
[9 22]
[10 21]
[11 20]
[12 18]
[13 17]
[39 71]
[40 70]
[41 69]
[44 65]
[45 64]
[46 63]
[47 62]
[48 58]
[49 57]
[50 56]
[51 55]
[74 111]
[75 110]
[76 109]
[77 108]
[79 104]
[80 103]
[81 102]
[82 101]
[83 100]
[84 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
