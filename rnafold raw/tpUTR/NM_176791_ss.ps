%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 15:52:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGCCAGCUGAGGAAGGAGCACACGCCUCAUCAAUGCAUGGAAGAACGUGCAAUGCAUCAGAAUAAAAGACAUGCAAAGUAAACUA\
) } def
/len { sequence length } bind def

/coor [
[80.96492004 211.41738892]
[67.83625031 204.16218567]
[57.21519470 193.57006836]
[49.92420959 180.46122742]
[46.52788544 165.85078430]
[47.28921509 150.87011719]
[52.14925003 136.67927551]
[60.73164368 124.37714386]
[72.37180328 114.91635132]
[86.16365814 109.03078461]
[71.24960327 110.63420868]
[56.33555222 112.23763275]
[41.42149734 113.84106445]
[26.50744247 115.44448853]
[18.72311783 128.73773193]
[4.76705551 134.82720947]
[-9.92487526 131.56973267]
[-19.76369858 120.41915131]
[-32.68161392 130.52160645]
[-47.78623962 124.13549042]
[-49.53922653 107.83030701]
[-36.13725662 98.37941742]
[-21.36712646 105.50509644]
[-14.12337685 92.51794434]
[-0.45963001 86.21191406]
[14.47190380 89.19565582]
[24.90401459 100.53043365]
[39.81806946 98.92700958]
[54.73212433 97.32357788]
[69.64617920 95.72015381]
[84.56023407 94.11672974]
[70.82917786 88.07865906]
[67.79907990 73.38790131]
[78.02031708 62.40945435]
[92.88982391 64.38373566]
[99.89213562 77.64910126]
[100.42752075 62.65865707]
[100.96290588 47.66821671]
[101.49829102 32.67777252]
[102.03367615 17.68733025]
[102.56906128 2.69688773]
[91.61765289 -8.69794464]
[92.01472473 -24.49724388]
[103.52470398 -35.32756805]
[119.31892395 -34.76347733]
[130.02694702 -23.13963509]
[129.29591370 -7.35226202]
[117.55950165 3.23227262]
[117.02411652 18.22271538]
[116.48873138 33.21315765]
[115.95334625 48.20359802]
[115.41796112 63.19404221]
[114.88257599 78.18448639]
[112.65991211 86.08013153]
[108.63140869 92.82648468]
[123.63140869 92.82648468]
[138.63140869 92.82648468]
[153.63140869 92.82648468]
[168.63140869 92.82648468]
[174.78698730 78.89706421]
[186.08035278 68.68042755]
[200.55485535 63.94665527]
[215.70271301 65.51590729]
[228.89944458 73.11631012]
[237.85865784 85.43103027]
[241.02810669 100.32648468]
[237.85865784 115.22193909]
[228.89944458 127.53665924]
[215.70271301 135.13705444]
[200.55485535 136.70631409]
[186.08035278 131.97254944]
[174.78698730 121.75590515]
[168.63140869 107.82648468]
[153.63140869 107.82648468]
[138.63140869 107.82648468]
[123.63140869 107.82648468]
[108.63140869 107.82648468]
[122.97779846 112.20610809]
[135.56184387 120.36955261]
[145.40907288 131.68467712]
[151.75695801 145.27526855]
[154.11395264 160.08892822]
[152.29751587 174.97854614]
[146.44833374 188.79110718]
[137.01931763 200.45703125]
[124.74064636 209.07295227]
[110.56311035 213.97167969]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 31]
[11 30]
[12 29]
[13 28]
[14 27]
[18 23]
[36 53]
[37 52]
[38 51]
[39 50]
[40 49]
[41 48]
[55 77]
[56 76]
[57 75]
[58 74]
[59 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
