%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 17:07:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAAAUAAAAUCAAAUUUGAUUUAAUUUUAUCUUCUAUUAUUUGUUUGGAAAAAGUUUAUUACCCAGUACCUAGGAACAUUAAGA\
) } def
/len { sequence length } bind def

/coor [
[54.51350403 146.99569702]
[47.85030746 139.47184753]
[42.41851425 131.01596069]
[28.48386192 136.56803894]
[14.54921150 142.12010193]
[0.61456084 147.67218018]
[-13.32009029 153.22424316]
[-23.27625847 165.51998901]
[-37.96346664 163.04307556]
[-51.89811707 168.59513855]
[-65.83277130 174.14721680]
[-79.76741791 179.69927979]
[-93.70207214 185.25135803]
[-107.63671875 190.80343628]
[-117.36484528 204.00553894]
[-133.62995911 201.91314697]
[-139.69990540 186.67871094]
[-129.33044434 173.97413635]
[-113.18879700 176.86877441]
[-99.25414276 171.31671143]
[-85.31949615 165.76463318]
[-71.38484192 160.21257019]
[-57.45019150 154.66049194]
[-43.51554108 149.10841370]
[-34.55607224 137.20979309]
[-18.87216187 139.28959656]
[-4.93751144 133.73753357]
[8.99713898 128.18545532]
[22.93178940 122.63338470]
[36.86643982 117.08130646]
[35.39852142 89.78890228]
[45.21241760 64.27972412]
[64.59425354 45.00863266]
[90.15924072 35.34107208]
[89.61770630 20.35085106]
[89.07617188 5.36062956]
[88.53462982 -9.62959194]
[87.99309540 -24.61981392]
[74.66997528 -32.39785767]
[67.68735504 -46.15454865]
[69.27335358 -61.50017166]
[78.92189789 -73.53799438]
[93.55416107 -78.42679596]
[108.50104523 -74.60657501]
[118.99305725 -63.29634476]
[121.68223572 -48.10516739]
[115.71046448 -33.88048553]
[102.98331451 -25.16135025]
[103.52485657 -10.17112827]
[104.06639099 4.81909370]
[104.60792542 19.80931473]
[105.14945984 34.79953766]
[113.88392639 36.08713531]
[122.36538696 38.53938675]
[130.43930054 42.11160278]
[137.95852661 46.73868561]
[144.78605652 52.33632278]
[150.79748535 58.80250931]
[155.88323975 66.01941681]
[159.95068359 73.85552979]
[162.92565918 82.16806030]
[164.75399780 90.80553436]
[165.40234375 99.61055756]
[164.85888672 108.42267609]
[163.13356018 117.08130646]
[177.06820679 122.63338470]
[190.11529541 114.23377991]
[205.60583496 115.14084625]
[217.58340454 125.00579834]
[221.44238281 140.03536987]
[215.69892883 154.45036316]
[202.56149292 162.70794678]
[187.08171082 161.63288879]
[175.21185303 151.63858032]
[171.51614380 136.56803894]
[157.58148193 131.01596069]
[152.14968872 139.47184753]
[145.48649597 146.99569702]
[137.74923706 153.40985107]
[129.12062073 158.56285095]
[119.80436707 162.33300781]
[110.02049255 164.63131714]
[100.00000000 165.40350342]
[89.97950745 164.63131714]
[80.19563293 162.33300781]
[70.87938690 158.56285095]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[14 19]
[34 52]
[35 51]
[36 50]
[37 49]
[38 48]
[65 76]
[66 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
