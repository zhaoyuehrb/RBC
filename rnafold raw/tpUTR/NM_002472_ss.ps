%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 09:16:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACACCUGCCUGAUGCUAUCAAGAGGCUGAAGAAAGGCACAAAAUGUGCUAUUUUUGGUCACUUGCUUUAUGACGUUUAUUUUCCUGUUAAAGCUGAAUAAAUAAAAACUACAGUAAAUGUAUACAUU\
) } def
/len { sequence length } bind def

/coor [
[81.63552856 198.70805359]
[72.62681580 196.59834290]
[63.85056305 193.66830444]
[55.38130569 189.94277954]
[47.29096985 185.45344543]
[39.64825821 180.23838806]
[32.51807404 174.34191895]
[25.96097565 167.81411743]
[20.03264427 160.71041870]
[14.78342724 153.09112549]
[10.25790215 145.02096558]
[6.49450159 136.56848145]
[3.52518582 127.80543518]
[1.37517166 118.80625916]
[0.06271768 109.64736938]
[-0.40103024 100.40655518]
[-0.01213372 91.16228485]
[1.22610450 81.99306488]
[3.30316901 72.97676849]
[6.20142031 64.18996429]
[9.89624500 55.70727539]
[-3.03329945 48.10287476]
[-15.96284485 40.49847794]
[-28.89238930 32.89408112]
[-44.71022034 32.56726456]
[-51.75824356 19.44573212]
[-64.68778992 11.84133339]
[-77.61733246 4.23693562]
[-90.54687500 -3.36746216]
[-103.47642517 -10.97185993]
[-116.40596771 -18.57625771]
[-129.33551025 -26.18065453]
[-142.26506042 -33.78505325]
[-155.19459534 -41.38945007]
[-167.92037964 -38.91376495]
[-178.55839539 -45.59510422]
[-181.64891052 -57.35578918]
[-194.39093018 -65.27039337]
[-207.13294983 -73.18499756]
[-219.87496948 -81.09960175]
[-232.61698914 -89.01420593]
[-245.35900879 -96.92881012]
[-262.00415039 -100.15000153]
[-263.51666260 -117.03634644]
[-247.70895386 -123.16436005]
[-237.44441223 -109.67082977]
[-224.70239258 -101.75622559]
[-211.96037292 -93.84162140]
[-199.21835327 -85.92701721]
[-186.47633362 -78.01241302]
[-173.73431396 -70.09780884]
[-156.23387146 -70.52510834]
[-147.59020996 -54.31899643]
[-134.66065979 -46.71459961]
[-121.73111725 -39.11019897]
[-108.80156708 -31.50580215]
[-95.87202454 -23.90140533]
[-82.94248199 -16.29700661]
[-70.01293182 -8.69260883]
[-57.08338928 -1.08821142]
[-44.15384293 6.51618624]
[-29.26082039 6.29908419]
[-21.28799248 19.96453476]
[-8.35844707 27.56893349]
[4.57109833 35.17333221]
[17.50064278 42.77772903]
[31.22632408 26.85142708]
[47.96780014 14.13276386]
[66.99093628 5.17946386]
[87.46155548 0.38413960]
[108.48200226 -0.04292981]
[129.13049316 3.91698313]
[148.50160217 12.09023285]
[165.74584961 24.11841202]
[180.10708618 39.47407532]
[190.95553589 57.48386383]
[204.98078918 52.16479111]
[219.00602722 46.84571457]
[233.03126526 41.52664185]
[247.05651855 36.20756912]
[261.08175659 30.88849640]
[275.10699463 25.56942368]
[289.13223267 20.25034904]
[295.67864990 6.11590481]
[309.97799683 0.92140323]
[323.41268921 7.24949217]
[337.43792725 1.93041873]
[345.30691528 -12.05024147]
[361.16604614 -14.47249413]
[372.84957886 -3.47819376]
[371.39489746 12.49877262]
[357.91790771 21.20224380]
[342.75701904 15.95566273]
[328.73175049 21.27473640]
[322.87203979 34.92022705]
[308.72424316 40.51431656]
[294.45132446 34.27559280]
[280.42608643 39.59466553]
[266.40081787 44.91373825]
[252.37559509 50.23281479]
[238.35034180 55.55188751]
[224.32510376 60.87096024]
[210.29985046 66.19003296]
[196.27461243 71.50910950]
[199.64749146 87.71551514]
[200.31161499 104.25585938]
[198.24891663 120.68051147]
[193.51545715 136.54299927]
[186.23992920 151.41212463]
[176.62010193 164.88368225]
[164.91748047 176.59147644]
[173.73425293 188.72673035]
[182.55102539 200.86198425]
[191.36781311 212.99723816]
[206.92463684 216.91699219]
[213.42813110 231.58274841]
[205.88934326 245.74418640]
[190.09140015 248.53785706]
[178.15313721 237.82070923]
[179.23255920 221.81401062]
[170.41577148 209.67875671]
[161.59899902 197.54350281]
[152.78221130 185.40824890]
[144.69572449 189.90452576]
[136.22966003 193.63729858]
[127.45592499 196.57485962]
[118.44902039 198.69227600]
[109.28544617 199.97155762]
[100.04300690 200.40184021]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[21 66]
[22 65]
[23 64]
[24 63]
[26 61]
[27 60]
[28 59]
[29 58]
[30 57]
[31 56]
[32 55]
[33 54]
[34 53]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
[42 46]
[76 104]
[77 103]
[78 102]
[79 101]
[80 100]
[81 99]
[82 98]
[83 97]
[86 94]
[87 93]
[111 123]
[112 122]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
