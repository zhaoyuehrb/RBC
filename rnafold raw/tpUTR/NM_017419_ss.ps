%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:01:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGUCACUUAGAAUAAAAUAGUUUCCUUUUCAUGAUACCUUCAGAUUUAUCUUGACUAAUUCAUUGUUACGUCACUUUUCUAUAGUUUUGAGAGUUCGAUAAAAGCCAUUAAAGAUAUGUAUCUCUU\
) } def
/len { sequence length } bind def

/coor [
[291.35409546 361.67132568]
[284.60992432 348.27294922]
[277.86575317 334.87457275]
[271.12158203 321.47622681]
[262.78802490 309.00418091]
[248.61616516 304.42077637]
[245.46102905 288.91735840]
[235.66343689 277.55923462]
[225.86584473 266.20111084]
[216.06823730 254.84297180]
[206.27064514 243.48483276]
[196.47305298 232.12669373]
[186.67546082 220.76856995]
[176.87786865 209.41043091]
[166.53198242 209.56240845]
[157.65592957 203.82688904]
[153.36759949 193.92694092]
[155.33377075 183.09420776]
[146.10530090 171.26901245]
[136.87681580 159.44381714]
[127.64834595 147.61862183]
[115.12435150 152.94541931]
[101.67639160 155.03775024]
[88.12602234 153.76776123]
[75.30104065 149.21305847]
[63.98494339 141.65188599]
[54.86903763 131.54615784]
[48.51022339 119.51325226]
[45.29696655 106.28826141]
[45.42556763 92.67911530]
[30.96892929 88.67842102]
[21.75482178 89.40308380]
[16.20889282 84.39808655]
[1.85478687 80.04381561]
[-12.49931812 75.68955231]
[-27.26889420 81.95366669]
[-41.30585861 74.18557739]
[-43.84225082 58.34429550]
[-32.93237305 46.58189392]
[-16.94534302 47.92148209]
[-8.14504814 61.33544540]
[6.20905685 65.68971252]
[20.56316185 70.04398346]
[34.96961975 74.22177887]
[49.42626190 78.22247314]
[52.54646301 72.06926727]
[56.41161728 66.35454559]
[60.96104813 61.16799927]
[66.12333679 56.59106827]
[71.81743622 52.69559097]
[77.95396423 49.54272842]
[84.43658447 47.18197250]
[91.16353607 45.65038300]
[90.79541016 30.65490150]
[90.42729187 15.65942001]
[90.05917358 0.66393763]
[89.50707245 -14.32589817]
[88.77105713 -29.30783081]
[88.03504181 -44.28976059]
[87.29902649 -59.27169418]
[76.42536163 -71.06758118]
[79.01044464 -86.90099335]
[93.07122803 -94.62588501]
[107.82147217 -88.31639099]
[111.94606018 -72.81259918]
[102.28095245 -60.00770950]
[103.01696777 -45.02577591]
[103.75298309 -30.04384422]
[104.48899841 -15.06191349]
[107.99644470 -8.46607399]
[105.05465698 0.29581919]
[105.42277527 15.29130173]
[105.79089355 30.28678322]
[106.15901184 45.28226471]
[125.61183929 51.25579453]
[141.56669617 63.88665009]
[151.84449768 81.44974518]
[155.04154968 101.54637146]
[150.72122192 121.43180084]
[139.47354126 138.39013672]
[148.70202637 150.21533203]
[157.93049622 162.04054260]
[167.15896606 173.86573792]
[186.13659668 180.45339966]
[188.23600769 199.61283875]
[198.03359985 210.97097778]
[207.83119202 222.32910156]
[217.62878418 233.68724060]
[227.42637634 245.04536438]
[237.22396851 256.40350342]
[247.02156067 267.76162720]
[256.81915283 279.11978149]
[271.69180298 284.51559448]
[274.14614868 299.20657349]
[273.97409058 284.20758057]
[281.18292236 271.05337524]
[293.91818237 263.12792969]
[308.90374756 262.47000122]
[322.28460693 269.24887085]
[330.61849976 281.72067261]
[331.76159668 296.67706299]
[325.41979980 310.27050781]
[313.22451782 319.00408936]
[298.31304932 320.63113403]
[284.51995850 314.73205566]
[291.26412964 328.13043213]
[298.00830078 341.52877808]
[304.75247192 354.92715454]
[320.01651001 355.90509033]
[332.65814209 364.33633423]
[339.33786011 377.87322998]
[338.35159302 392.83596802]
[330.06405640 405.21264648]
[336.80822754 418.61102295]
[343.55239868 432.00936890]
[350.29656982 445.40774536]
[364.29550171 453.94952393]
[363.62710571 470.33505249]
[348.97900391 477.70828247]
[335.41986084 468.48428345]
[336.89819336 452.15191650]
[330.15402222 438.75354004]
[323.40985107 425.35516357]
[316.66567993 411.95681763]
[301.78775024 411.24063110]
[289.18203735 403.11953735]
[282.28823853 389.69042969]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 108]
[2 107]
[3 106]
[4 105]
[5 94]
[7 92]
[8 91]
[9 90]
[10 89]
[11 88]
[12 87]
[13 86]
[14 85]
[18 83]
[19 82]
[20 81]
[21 80]
[30 45]
[31 44]
[33 43]
[34 42]
[35 41]
[53 74]
[54 73]
[55 72]
[56 71]
[57 69]
[58 68]
[59 67]
[60 66]
[113 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
