%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 23:58:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGGAAUGUGUGCGGGCUCAGCCUUCCUGGACACACUAGGUGUGGGAAGCCAUAGGAGCCUCCAGAUGGGGGCUGGCCUCUCUUGCCCAGCCAGCGGGCAGGGACUGUGGGUUGGUGAAUGCAUUAAAGUGCUUUGGGGAAGACA\
) } def
/len { sequence length } bind def

/coor [
[-1.71892536 144.86930847]
[-8.67095089 158.16101074]
[-19.65208626 168.37934875]
[-33.40905380 174.35813904]
[-48.37177658 175.41497803]
[-62.83255768 171.42929077]
[-75.14099121 162.85592651]
[-83.89231873 150.67338562]
[-88.08775330 136.27206421]
[-87.24846649 121.29556274]
[-81.47024536 107.45315552]
[-71.41256714 96.32467651]
[-58.22329712 89.18022156]
[-43.40521240 86.83521271]
[-57.03747559 80.57730865]
[-70.66973877 74.31940460]
[-84.30200958 68.06150055]
[-93.48006439 67.31172943]
[-98.15802002 61.51948929]
[-111.65248108 54.96972275]
[-125.14694977 48.41995239]
[-138.64140320 41.87018585]
[-152.13587952 35.32041550]
[-165.63034058 28.77064705]
[-179.12480164 22.22087860]
[-192.61926270 15.67111015]
[-206.25152588 9.41320610]
[-220.01527405 3.45006418]
[-233.77903748 -2.51307797]
[-247.54278564 -8.47622013]
[-261.30654907 -14.43936253]
[-275.85317993 -8.86859226]
[-289.72662354 -15.11213684]
[-294.94784546 -29.01445007]
[-313.14950562 -26.45584106]
[-323.09902954 -40.87424088]
[-336.98788452 -46.53985977]
[-350.87677002 -52.20547867]
[-364.82577515 -57.72134781]
[-378.83334351 -63.08681870]
[-392.84091187 -68.45229340]
[-406.42364502 -60.70355988]
[-421.80010986 -63.54935837]
[-431.70999146 -75.64598846]
[-431.47412109 -91.28179169]
[-421.20391846 -103.07402039]
[-405.74862671 -105.45475006]
[-392.40576172 -97.29985809]
[-387.47543335 -82.45985413]
[-373.46786499 -77.09437561]
[-359.46032715 -71.72890472]
[-352.03518677 -72.27748871]
[-345.21115112 -66.09435272]
[-331.32226562 -60.42873383]
[-317.43341064 -54.76311111]
[-306.11804199 -59.16628265]
[-294.47363281 -54.50241470]
[-288.98471069 -42.77820587]
[-275.27127075 -48.47707748]
[-261.22793579 -42.62567520]
[-255.34339905 -28.20311737]
[-241.57965088 -22.23997498]
[-227.81588745 -16.27683258]
[-214.05213928 -10.31369019]
[-200.28839111 -4.35054779]
[-195.53511047 -5.27298594]
[-190.15803528 -3.16767383]
[-186.06948853 2.17664742]
[-172.57502747 8.72641563]
[-159.08056641 15.27618408]
[-145.58610535 21.82595253]
[-132.09164429 28.37572098]
[-118.59717560 34.92549133]
[-105.10271454 41.47525787]
[-91.60825348 48.02502823]
[-78.04410553 54.42923355]
[-64.41183472 60.68713760]
[-50.77957535 66.94504547]
[-37.14730835 73.20294952]
[-28.27803993 72.01977539]
[-20.10348892 77.90110016]
[-5.19022083 79.51182556]
[9.72304821 81.12254333]
[24.63631630 82.73326111]
[38.12083817 76.40737152]
[51.01037598 85.58181763]
[65.92364502 87.19253540]
[80.83691406 88.80326080]
[95.75018311 90.41397858]
[110.69465637 89.12450409]
[125.11160278 84.98304749]
[139.52854919 80.84159851]
[153.94549561 76.70014191]
[168.36244202 72.55868530]
[182.77938843 68.41722870]
[190.47181702 54.87232971]
[205.15164185 50.87768173]
[218.01722717 58.29470444]
[232.43417358 54.15325165]
[246.85112000 50.01179504]
[261.26806641 45.87034225]
[274.82214355 35.68589020]
[288.36074829 45.89093781]
[282.30236816 61.72546768]
[265.40951538 60.28728867]
[250.99258423 64.42874146]
[236.57563782 68.57019806]
[222.15869141 72.71165466]
[215.19100952 85.82603455]
[200.62918091 90.23143768]
[186.92083740 82.83418274]
[172.50389099 86.97563171]
[158.08694458 91.11708832]
[143.66999817 95.25854492]
[129.25305176 99.39999390]
[114.83611298 103.54145050]
[113.15596771 110.85083771]
[127.77468872 114.21134949]
[124.41394806 128.83001709]
[109.79567719 125.46961212]
[108.11553955 132.77899170]
[119.27709198 142.79995728]
[130.43865967 152.82090759]
[141.60021973 162.84187317]
[157.74887085 165.69715881]
[163.09538269 181.20028687]
[152.13970947 193.40295410]
[136.15209961 189.75210571]
[131.57925415 174.00343323]
[120.41769409 163.98246765]
[109.25613403 153.96151733]
[98.09458160 143.94055176]
[90.35449219 130.47102356]
[89.24281311 116.79016113]
[94.13946533 105.32724762]
[79.22619629 103.71652222]
[64.31292725 102.10580444]
[49.39965820 100.49508667]
[34.84843445 106.70576477]
[23.02559662 97.64653015]
[8.11232758 96.03581238]
[-6.80094099 94.42509460]
[-21.71421051 92.81436920]
[-10.19212723 102.41862488]
[-2.52554345 115.31139374]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 79]
[15 78]
[16 77]
[17 76]
[19 75]
[20 74]
[21 73]
[22 72]
[23 71]
[24 70]
[25 69]
[26 68]
[27 65]
[28 64]
[29 63]
[30 62]
[31 61]
[34 58]
[36 55]
[37 54]
[38 53]
[39 51]
[40 50]
[41 49]
[81 143]
[82 142]
[83 141]
[84 140]
[86 138]
[87 137]
[88 136]
[89 135]
[90 116]
[91 115]
[92 114]
[93 113]
[94 112]
[95 111]
[98 108]
[99 107]
[100 106]
[101 105]
[121 132]
[122 131]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
