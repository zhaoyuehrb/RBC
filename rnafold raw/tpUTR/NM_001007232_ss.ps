%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 18:31:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCAACUUUCAUUUGAGCAGCCAGAUGAUAAAGCACAGAUGCCCAGCACUGAAAGAGUUACUUCGACAAGACGUUUCUAUCUCUUCCCAGUACAUUAAAAUAAGGAAGCUGUAUG\
) } def
/len { sequence length } bind def

/coor [
[125.93505096 126.18206787]
[120.81883240 130.40895081]
[115.02748871 133.64970398]
[108.74883270 135.79924011]
[102.18645477 136.78787231]
[95.55317688 136.58351135]
[89.06410217 135.19281006]
[82.92966461 132.66085815]
[77.34879303 129.06974792]
[72.50247192 124.53596497]
[59.51208878 132.03596497]
[46.52170563 139.53596497]
[33.53132629 147.03596497]
[20.54094505 154.53596497]
[7.55056334 162.03596497]
[-5.43981791 169.53596497]
[-9.28766155 184.86468506]
[-22.89026642 192.91108704]
[-38.17744827 188.90139771]
[-46.07958984 175.21447754]
[-41.90849686 159.97055054]
[-28.13879967 152.21354675]
[-12.93981838 156.54557800]
[0.05056314 149.04557800]
[13.04094410 141.54557800]
[26.03132439 134.04557800]
[39.02170563 126.54557800]
[52.01208878 119.04557800]
[65.00247192 111.54557800]
[63.85686874 107.19733429]
[63.24936295 102.74194336]
[63.18899536 98.24572754]
[63.67666245 93.77562714]
[64.70510864 89.39819336]
[51.51805115 82.24966431]
[38.33099365 75.10113525]
[21.96120834 76.08206940]
[13.15384865 62.24868774]
[20.96916962 47.83158493]
[37.36743927 47.66184235]
[45.47952271 61.91407394]
[58.66658020 69.06260681]
[71.85363770 76.21113586]
[100.00000000 63.14721680]
[128.14636230 76.21113586]
[141.33341980 69.06260681]
[154.52047729 61.91407394]
[167.70753479 54.76554489]
[179.06771851 44.97033310]
[188.07885742 32.97869492]
[197.08999634 20.98705101]
[206.10112000 8.99540997]
[207.83445740 -9.27596474]
[224.12971497 -15.63755608]
[232.81564331 -27.86680603]
[241.50158691 -40.09605408]
[250.18751526 -52.32530594]
[258.87344360 -64.55455780]
[250.25923157 -78.05770874]
[247.46644592 -93.79026031]
[250.89028931 -109.35836029]
[259.98226929 -122.40454865]
[273.33782959 -130.96475220]
[288.91336060 -133.76391602]
[304.33880615 -130.40591431]
[312.69326782 -142.86395264]
[309.39050293 -158.31929016]
[318.05368042 -171.53765869]
[333.54306030 -174.67683411]
[346.66909790 -165.87438965]
[349.64431763 -150.35269165]
[340.70361328 -137.32044983]
[325.15130615 -134.50949097]
[316.79684448 -122.05144501]
[325.04373169 -110.61480713]
[328.87911987 -97.01538849]
[327.81851196 -82.89526367]
[321.96994019 -69.96674347]
[312.02322388 -59.80467224]
[299.16885376 -53.65463257]
[284.95529175 -52.28029251]
[271.10269165 -55.86862183]
[262.41677856 -43.63936996]
[253.73083496 -31.41012192]
[245.04489136 -19.18087196]
[236.35896301 -6.95162153]
[238.05831909 5.10753107]
[230.80995178 15.39049721]
[218.09277344 18.00654411]
[209.08163452 29.99818611]
[200.07049561 41.98982620]
[191.05937195 53.98146820]
[205.40351868 49.59454346]
[220.38897705 50.25511169]
[234.29148865 55.88716125]
[245.51145935 65.84268188]
[252.75790405 78.97618103]
[255.19708252 93.77653503]
[252.54830933 108.54081726]
[245.11636353 121.57025146]
[233.75636292 131.36567688]
[219.77537537 136.80004883]
[204.78207397 137.24806213]
[190.50155640 132.65820312]
[178.57695007 123.55854797]
[170.38027954 110.99611664]
[166.85466003 96.41633606]
[168.40576172 81.49674988]
[174.85606384 67.95260620]
[161.66900635 75.10113525]
[148.48194885 82.24966431]
[135.29489136 89.39819336]
[136.62402344 95.90016174]
[136.76548767 102.53507996]
[135.71470642 109.08778381]
[133.50573730 115.34578705]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 29]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[34 43]
[35 42]
[36 41]
[45 112]
[46 111]
[47 110]
[48 109]
[49 92]
[50 91]
[51 90]
[52 89]
[54 86]
[55 85]
[56 84]
[57 83]
[58 82]
[65 74]
[66 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
