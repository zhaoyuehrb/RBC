%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 19:15:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCGCCUGGCUGAGAUGGGGUGGGCAGGGCAGAGCUGAUCAGGGCCGAGCAGAACCGCACUCUUCCCAAAUAAAGCUUCCUCCUUGAAACACAA\
) } def
/len { sequence length } bind def

/coor [
[52.22425461 217.72091675]
[47.36354446 203.53030396]
[49.37941360 188.66656494]
[37.78425598 198.18246460]
[26.18909836 207.69836426]
[14.59394169 217.21426392]
[2.99878478 226.73016357]
[-8.59637260 236.24606323]
[-14.35555840 250.98181152]
[-29.10236359 253.07490540]
[-30.40183449 268.82568359]
[-42.51202774 278.98040771]
[-58.24818420 277.51449585]
[-68.27432251 265.29760742]
[-66.64210510 249.57783508]
[-54.31990433 239.68142700]
[-38.61826324 241.47973633]
[-33.68843842 227.42463684]
[-18.11227226 224.65090942]
[-6.51711464 215.13500977]
[5.07804203 205.61911011]
[16.67319870 196.10321045]
[28.26835632 186.58731079]
[39.86351395 177.07141113]
[42.66676331 168.61447144]
[51.47666168 163.82916260]
[59.39767838 151.09112549]
[67.31869507 138.35308838]
[75.23971558 125.61505890]
[83.16072845 112.87702942]
[79.01588440 96.99237061]
[87.45566559 82.91145325]
[103.41854858 79.07890320]
[110.91854858 66.08852386]
[118.41854858 53.09814072]
[125.91854858 40.10775757]
[133.41854858 27.11737823]
[124.17699432 13.83827591]
[121.61402130 -2.07730985]
[126.18679047 -17.47552299]
[136.94342041 -29.32698631]
[151.72065735 -35.32278824]
[167.57876587 -34.32419205]
[174.64970398 -47.55301285]
[181.72065735 -60.78182983]
[177.36064148 -75.73603058]
[184.72004700 -89.05120087]
[199.00344849 -93.11565399]
[206.07440186 -106.34447479]
[213.14535522 -119.57329559]
[204.96678162 -132.57354736]
[204.40011597 -147.92198181]
[211.59774780 -161.48994446]
[224.62358093 -169.62771606]
[239.97370911 -170.14628601]
[253.51904297 -162.90615845]
[261.61593628 -149.85488892]
[262.08639526 -134.50320435]
[254.80384827 -120.98062897]
[241.72726440 -112.92467499]
[226.37417603 -112.50234222]
[219.30322266 -99.27352905]
[212.23226929 -86.04470825]
[216.78823853 -71.91039276]
[209.80574036 -58.39376450]
[194.94947815 -53.71088028]
[187.87852478 -40.48206329]
[180.80757141 -27.25324249]
[189.58496094 -16.37961197]
[193.53271484 -2.92922020]
[192.01493835 11.04996014]
[185.23054504 23.41605568]
[174.18800354 32.26147079]
[160.55548096 36.20711899]
[146.40893555 34.61737823]
[138.90893555 47.60775757]
[131.40893555 60.59814072]
[123.90892792 73.58852386]
[116.40892792 86.57890320]
[121.14240265 98.45802307]
[118.18260956 110.89823914]
[108.60655975 119.37281799]
[95.89876556 120.79804230]
[87.97774506 133.53607178]
[80.05672455 146.27410889]
[72.13571167 159.01214600]
[64.21469116 171.75018311]
[78.68833923 167.81144714]
[93.39198303 170.77841187]
[105.20572662 180.02153015]
[111.62288666 193.57955933]
[111.28183746 208.57568359]
[104.25492859 221.82794189]
[92.03318024 230.52442932]
[77.20985413 232.81987000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 24]
[4 23]
[5 22]
[6 21]
[7 20]
[8 19]
[10 17]
[26 87]
[27 86]
[28 85]
[29 84]
[30 83]
[33 79]
[34 78]
[35 77]
[36 76]
[37 75]
[43 68]
[44 67]
[45 66]
[48 63]
[49 62]
[50 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
