%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 07:01:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCACCAAACACCCAAGAUUAACAGGCUUUUGUUGCUGAACUGGACAUAUACAUUGAGUCUUUUCUUGCGGUCAAAGGAGUUGAAUUCUUGCUGAUCAACUAAAGUUGAUUGUGUUUGACACC\
) } def
/len { sequence length } bind def

/coor [
[86.06323242 277.67135620]
[74.61843872 267.50891113]
[69.21814728 253.18777466]
[71.10330963 237.99880981]
[79.84072876 225.43232727]
[93.42260742 218.37605286]
[93.42260742 203.37605286]
[93.42260742 188.37605286]
[93.42260742 173.37605286]
[93.42260742 158.37605286]
[93.42260742 143.37605286]
[93.42260742 128.37605286]
[76.20182037 107.64099121]
[84.33945465 86.21829987]
[77.39450836 72.92290497]
[70.44955444 59.62750244]
[63.50460815 46.33209991]
[56.55965805 33.03670120]
[49.28012848 19.92150116]
[41.67069244 6.99492121]
[34.06125641 -5.93165874]
[26.45181847 -18.85823822]
[18.84238052 -31.78481865]
[8.03409386 -33.93763351]
[0.39746657 -41.57391739]
[-1.66916513 -51.94865036]
[2.28973126 -61.51975250]
[-4.65521812 -74.81515503]
[-11.60016823 -88.11055756]
[-18.54511833 -101.40595245]
[-25.49006653 -114.70135498]
[-32.43501663 -127.99675751]
[-39.54782867 -141.20310974]
[-46.82735825 -154.31831360]
[-54.10688782 -167.43351746]
[-61.38641739 -180.54872131]
[-77.36937714 -189.58624268]
[-76.52040863 -207.06579590]
[-84.12985229 -219.99237061]
[-91.73928833 -232.91894531]
[-104.07329559 -236.93922424]
[-110.12562561 -247.95657349]
[-107.10216522 -259.74291992]
[-114.38169861 -272.85812378]
[-121.66122437 -285.97332764]
[-128.94075012 -299.08850098]
[-142.40309143 -307.39971924]
[-141.81457520 -322.28268433]
[-149.09410095 -335.39788818]
[-164.06054688 -341.17590332]
[-168.73687744 -356.52227783]
[-159.53584290 -369.66461182]
[-143.51568604 -370.52120972]
[-132.96568298 -358.43496704]
[-135.97891235 -342.67742920]
[-128.69937134 -329.56222534]
[-115.75772858 -322.18911743]
[-115.82555389 -306.36804199]
[-108.54602814 -293.25283813]
[-101.26649475 -280.13763428]
[-93.98696899 -267.02243042]
[-78.49291229 -258.88674927]
[-78.81270599 -240.52838135]
[-71.20326996 -227.60180664]
[-63.59383392 -214.67523193]
[-51.90290451 -211.30158997]
[-45.47878265 -200.49681091]
[-48.27121735 -187.82824707]
[-40.99168777 -174.71304321]
[-33.71215820 -161.59783936]
[-26.43262863 -148.48265076]
[-20.36649132 -144.11143494]
[-19.13961601 -134.94171143]
[-12.19466686 -121.64630890]
[-5.24971724 -108.35090637]
[1.69523251 -95.05550385]
[8.64018250 -81.76010132]
[15.58513165 -68.46470642]
[32.61998367 -59.45887375]
[31.76896095 -39.39425659]
[39.37839890 -26.46767616]
[46.98783493 -13.54109573]
[54.59727097 -0.61451578]
[62.20670700 12.31206417]
[66.63040924 14.37320423]
[69.74999237 19.29554939]
[69.85505676 26.09175110]
[76.80001068 39.38714981]
[83.74495697 52.68255234]
[90.68991089 65.97795105]
[97.63485718 79.27335358]
[111.98771667 79.65172577]
[124.36811066 89.91481018]
[128.19670105 107.30807495]
[141.49211121 114.25302124]
[154.78750610 121.19797516]
[168.08290100 128.14292908]
[181.37831116 135.08787537]
[194.67370605 142.03282166]
[207.96911621 148.97776794]
[224.32188416 147.74528503]
[233.34086609 161.44163513]
[225.74812317 175.97717285]
[209.35440063 176.39900208]
[201.02415466 162.27317810]
[187.72875977 155.32821655]
[174.43336487 148.38327026]
[161.13795471 141.43832397]
[147.84255981 134.49337769]
[134.54714966 127.54842377]
[121.25175476 120.60347748]
[108.42260742 128.37605286]
[108.42260742 143.37605286]
[108.42260742 158.37605286]
[108.42260742 173.37605286]
[108.42260742 188.37605286]
[108.42260742 203.37605286]
[108.42260742 218.37605286]
[122.00448608 225.43232727]
[130.74189758 237.99880981]
[132.62705994 253.18777466]
[127.22676849 267.50891113]
[115.78197479 277.67135620]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 118]
[7 117]
[8 116]
[9 115]
[10 114]
[11 113]
[12 112]
[14 91]
[15 90]
[16 89]
[17 88]
[18 87]
[19 84]
[20 83]
[21 82]
[22 81]
[23 80]
[27 78]
[28 77]
[29 76]
[30 75]
[31 74]
[32 73]
[33 71]
[34 70]
[35 69]
[36 68]
[38 65]
[39 64]
[40 63]
[43 61]
[44 60]
[45 59]
[46 58]
[48 56]
[49 55]
[94 111]
[95 110]
[96 109]
[97 108]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
