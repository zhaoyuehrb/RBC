%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 13:19:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCGUAGCUUCCCACCAGGCUGCCACCUGUGUGGGCUGGGAAAUGUUUAAGAGGUCUCAUAGUAGUACCCUGUGGCUACUUUUAGGAACACCAGUCUAUUUUUACUGAGAGCUGGACAACAGCAAACACUUGACAAAUAAACUUAUUUACCAGUA\
) } def
/len { sequence length } bind def

/coor [
[-36.68932724 369.57791138]
[-31.72820282 383.73373413]
[-32.45922852 398.71591187]
[-38.77491760 412.32150269]
[-49.74662781 422.54998779]
[-63.76110077 427.89736938]
[-78.75769043 427.57739258]
[-92.53132629 421.63711548]
[-103.05677795 410.94998169]
[-108.78639984 397.08737183]
[-108.87772369 382.08764648]
[-103.31842804 368.15802002]
[-115.61048889 376.75485229]
[-127.90254974 385.35165405]
[-140.19461060 393.94848633]
[-152.48667908 402.54528809]
[-164.69210815 411.26464844]
[-176.80969238 420.10571289]
[-188.92727661 428.94674683]
[-201.04487610 437.78778076]
[-203.23803711 453.43917847]
[-215.90615845 462.88873291]
[-231.53347778 460.53021240]
[-240.84857178 447.76287842]
[-238.32496643 432.16137695]
[-225.45986938 422.98178101]
[-209.88591003 425.67019653]
[-197.76832581 416.82916260]
[-185.65074158 407.98812866]
[-173.53315735 399.14706421]
[-169.96327209 392.62759399]
[-161.08348083 390.25323486]
[-148.79142761 381.65643311]
[-136.49935913 373.05960083]
[-124.20730591 364.46279907]
[-111.91524506 355.86596680]
[-100.94380188 345.63720703]
[-91.50788116 333.97686768]
[-82.07196808 322.31655884]
[-72.63604736 310.65621948]
[-74.44843292 295.91677856]
[-65.04517365 283.95712280]
[-49.57281494 282.15606689]
[-40.13689804 270.49572754]
[-30.70098114 258.83538818]
[-21.50026131 246.98858643]
[-12.53842449 234.96005249]
[-3.57658768 222.93151855]
[5.38524914 210.90299988]
[14.34708595 198.87446594]
[9.20267963 186.52120972]
[10.86144066 173.13352966]
[18.99487114 162.23554993]
[31.55600548 156.74945068]
[45.29367828 158.21231079]
[54.49440002 146.36549377]
[63.69511795 134.51869202]
[51.34460831 116.91072845]
[47.29484177 95.18087006]
[52.75858688 73.14768982]
[67.23159027 54.89155197]
[88.49854279 43.99998474]
[84.35115814 29.58474159]
[80.20378113 15.16949844]
[76.05639648 0.75425529]
[71.90901184 -13.66098785]
[67.76163483 -28.07623100]
[53.13024139 -33.24362946]
[44.35826874 -46.04331970]
[44.81871414 -61.55356216]
[54.33452988 -73.81034851]
[69.24668884 -78.10070038]
[83.82116699 -72.77487946]
[92.45377350 -59.88078690]
[91.82509613 -44.37644958]
[82.17687225 -32.22361374]
[86.32425690 -17.80836868]
[90.47164154 -3.39312673]
[94.61901855 11.02211571]
[98.76640320 25.43735886]
[102.91378784 39.85260010]
[110.07847595 42.07009506]
[113.34983826 27.43116760]
[116.62120056 12.79224014]
[112.69856262 -1.68577313]
[121.03941345 -14.15293694]
[135.91871643 -16.05196571]
[147.12351990 -6.07939339]
[146.96302795 8.91974735]
[135.54789734 18.65010643]
[129.97787476 32.57759094]
[124.40784454 46.50507736]
[131.57252502 48.72256851]
[143.13787842 39.17046356]
[154.70323181 29.61835670]
[166.26856995 20.06624985]
[165.17227173 4.58795118]
[173.41181946 -8.56079865]
[187.81892395 -14.32403660]
[202.85377502 -10.48567963]
[212.73515320 1.47834527]
[213.66348267 16.96762657]
[205.28178406 30.02622032]
[190.81300354 35.63282776]
[175.82067871 31.63159943]
[164.25534058 41.18370438]
[152.68998718 50.73580933]
[141.12463379 60.28791809]
[145.37684631 68.21681213]
[148.19703674 76.47399902]
[149.59054565 84.81259918]
[149.60371399 92.99593353]
[164.60295105 93.14600372]
[179.60220337 93.29607391]
[194.60145569 93.44615173]
[207.01893616 83.28810883]
[222.67202759 86.80377197]
[229.55303955 101.29623413]
[222.38343811 115.64810181]
[206.66311646 118.84986877]
[194.45138550 108.44539642]
[179.45213318 108.29532623]
[164.45288086 108.14525604]
[149.45362854 107.99517822]
[146.63865662 118.28714752]
[141.70790100 127.74951172]
[134.88504028 135.95300293]
[126.47959900 142.52546692]
[116.87289429 147.16874695]
[106.50074005 149.67218018]
[95.83367920 149.92221069]
[85.35562897 147.90748596]
[75.54192352 143.71942139]
[66.34120178 155.56622314]
[57.14048386 167.41302490]
[62.07344818 183.56413269]
[56.48270798 199.32365417]
[42.74930954 208.56994629]
[26.37561417 207.83630371]
[17.41377640 219.86483765]
[8.45194054 231.89335632]
[-0.50989658 243.92189026]
[-9.47173309 255.95042419]
[-10.63507938 262.55075073]
[-14.41643238 266.88732910]
[-19.04064369 268.27130127]
[-28.47656059 279.93164062]
[-37.91247940 291.59197998]
[-36.44695282 307.09970093]
[-46.18241882 318.79052734]
[-60.97571182 320.09213257]
[-70.41162872 331.75247192]
[-79.84754944 343.41281128]
[-89.28346252 355.07315063]
[-74.99694061 350.50201416]
[-60.04043961 351.64352417]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 36]
[13 35]
[14 34]
[15 33]
[16 32]
[17 30]
[18 29]
[19 28]
[20 27]
[37 154]
[38 153]
[39 152]
[40 151]
[43 148]
[44 147]
[45 146]
[46 143]
[47 142]
[48 141]
[49 140]
[50 139]
[55 135]
[56 134]
[57 133]
[62 81]
[63 80]
[64 79]
[65 78]
[66 77]
[67 76]
[93 108]
[94 107]
[95 106]
[96 105]
[112 124]
[113 123]
[114 122]
[115 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
