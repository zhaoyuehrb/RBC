%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:39:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCCCACCCCGCGUCUGUCGCCCAAUAAAGGCAUCUUUGUCGGGAGUGAGGGUGUCCUGACAUCUGAAGGGC\
) } def
/len { sequence length } bind def

/coor [
[166.32295227 181.83380127]
[164.23609924 175.04013062]
[153.85700989 164.21080017]
[143.47792053 153.38145447]
[133.09884644 142.55210876]
[122.49224091 131.94551086]
[111.66290283 121.56642914]
[100.83355713 111.18734741]
[89.78635406 101.04045868]
[78.52627563 91.13033295]
[67.26618958 81.22021484]
[56.00610352 71.31009674]
[44.53820801 61.64120483]
[32.86767197 52.21790695]
[19.54494667 55.18174744]
[7.16610146 49.91676712]
[0.26471570 38.59951019]
[1.22317839 25.57562065]
[-14.33190632 26.39848518]
[-25.61005974 16.18780899]
[-26.29867554 1.35334313]
[-37.55875778 -8.55677795]
[-48.81884384 -18.46689796]
[-64.25037384 -15.93668365]
[-77.67153931 -23.96203232]
[-82.74528503 -38.75362015]
[-77.07594299 -53.32731628]
[-63.34039688 -60.80186081]
[-48.02415466 -57.64800644]
[-38.35908127 -45.35490417]
[-38.90872192 -29.72698402]
[-27.64863777 -19.81686211]
[-16.38855362 -9.90674114]
[-1.58677375 -11.10794544]
[9.97372627 -1.21807742]
[11.13329887 14.31553555]
[27.70947456 12.45535851]
[40.85271072 23.25946999]
[42.29097366 40.54737091]
[53.96150970 49.97066879]
[61.36489105 51.77492905]
[65.91622162 60.05001068]
[77.17630768 69.96012878]
[88.43639374 79.87025452]
[99.69647980 89.78037262]
[107.58950043 92.42738342]
[111.21263885 100.35800171]
[122.04198456 110.73708344]
[132.87132263 121.11617279]
[141.50257874 124.94933319]
[143.92819214 132.17303467]
[154.30726624 143.00236511]
[164.68635559 153.83171082]
[175.06542969 164.66105652]
[185.89477539 175.04013062]
[197.15486145 184.95025635]
[208.41494751 194.86038208]
[219.67503357 204.77049255]
[230.93511963 214.68061829]
[245.74212646 210.34982300]
[260.53350830 214.73371887]
[270.58938599 226.43342590]
[272.70095825 241.71560669]
[266.19442749 255.70376587]
[253.14601135 263.93432617]
[237.71940613 263.78097534]
[224.83718872 255.29263306]
[218.61003113 241.17788696]
[221.02499390 225.94070435]
[209.76490784 216.03057861]
[198.50482178 206.12046814]
[187.24473572 196.21034241]
[175.98464966 186.30021667]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 54]
[3 53]
[4 52]
[5 51]
[6 49]
[7 48]
[8 47]
[9 45]
[10 44]
[11 43]
[12 42]
[13 40]
[14 39]
[18 36]
[21 33]
[22 32]
[23 31]
[55 73]
[56 72]
[57 71]
[58 70]
[59 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
