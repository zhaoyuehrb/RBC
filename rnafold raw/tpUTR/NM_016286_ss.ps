%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 11:15:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCCCUCCACACACCUCAAGCCCCAUGCCGUGCUCAUCCUACCCCCAAUCCCUCCAAUAAACCUGAUUCUGCUGCCCA\
) } def
/len { sequence length } bind def

/coor [
[218.96244812 361.51864624]
[204.86656189 356.35623169]
[191.32521057 349.87725830]
[178.46105957 342.14044189]
[166.39060974 333.21582031]
[155.22314453 323.18423462]
[145.05984497 312.13653564]
[135.99270630 300.17276001]
[128.10388184 287.40127563]
[121.46479797 273.93771362]
[116.13558197 259.90402222]
[112.16450500 245.42732239]
[109.58751678 230.63867188]
[108.42797089 215.67204285]
[108.69635773 200.66294861]
[110.39025116 185.74734497]
[113.49430847 171.06028748]
[117.98042297 156.73480225]
[123.80796051 142.90061951]
[130.92414856 129.68302917]
[118.45210266 121.34947968]
[105.98006439 113.01592255]
[92.04204559 111.90992737]
[85.68638611 99.45612335]
[70.23661804 102.78481293]
[57.00373077 94.14384460]
[53.83856964 78.65974426]
[62.61896133 65.51895905]
[78.13565826 62.51768112]
[91.18287659 71.43651581]
[94.01993561 86.98407745]
[107.95795441 88.09007263]
[114.31361389 100.54387665]
[126.78565979 108.87743378]
[139.25770569 117.21098328]
[148.74591064 105.57833099]
[159.29693604 94.90027618]
[170.81518555 85.27352142]
[183.19639587 76.78525543]
[196.32839966 69.51234436]
[210.09226990 63.52065659]
[224.36338806 58.86445618]
[239.01248169 55.58591080]
[253.90687561 53.71471405]
[268.91171265 53.26780701]
[283.89108276 54.24924088]
[298.70935059 56.65012741]
[313.23226929 60.44872284]
[327.32833862 65.61062622]
[340.86993408 72.08908844]
[353.73434448 79.82543182]
[365.80514526 88.74961090]
[376.97296143 98.78078461]
[387.13668823 109.82812500]
[396.20425415 121.79157257]
[404.09353638 134.56277466]
[410.73312378 148.02609253]
[416.06283569 162.05958557]
[420.03445435 176.53614807]
[422.61196899 191.32469177]
[423.77206421 206.29129028]
[423.50421143 221.30038452]
[421.81088257 236.21606445]
[418.70733643 250.90322876]
[414.22174072 265.22888184]
[408.39471436 279.06326294]
[401.27902222 292.28112793]
[392.93908691 304.76272583]
[383.45043945 316.39501953]
[372.89904785 327.07269287]
[361.38043213 336.69903564]
[348.99893188 345.18685913]
[335.86663818 352.45928955]
[322.10253906 358.45046997]
[307.83126831 363.10614014]
[293.18206787 366.38415527]
[278.28759766 368.25482178]
[263.28274536 368.70117188]
[248.30340576 367.71917725]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 35]
[21 34]
[22 33]
[24 31]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
