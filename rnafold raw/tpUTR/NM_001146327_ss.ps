%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 14:48:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAACCUUUAGUCACAGCACACACUUUUCUCAACAUUAUUGGCUUCCUCCUAGAGUGUUGUGAGUGUGAGAAGGCCUUUCACUAGCCCCACCUUGUUAACAACUUGAACAUUCAUCAAAGUGUGGUAAAAAAA\
) } def
/len { sequence length } bind def

/coor [
[149.14247131 124.65814209]
[134.94323730 119.82267761]
[120.74401093 114.98721313]
[106.54476929 110.15174866]
[92.23608398 105.65047455]
[77.82580566 101.48587799]
[63.41552734 97.32127380]
[49.00524902 93.15667725]
[34.59497452 88.99207306]
[27.94660187 90.23321533]
[22.52221107 88.17625427]
[19.61541939 84.27976227]
[5.41618395 79.44429779]
[-8.78305054 74.60883331]
[-22.98228645 69.77336884]
[-37.18152237 64.93790436]
[-55.10650635 68.96050262]
[-66.19747925 55.41219330]
[-80.50617218 50.91092300]
[-94.81485748 46.40965271]
[-109.12354279 41.90838623]
[-123.48401642 37.57515335]
[-137.89428711 33.41055298]
[-152.30456543 29.24595261]
[-166.71484375 25.08135223]
[-181.12512207 20.91675186]
[-195.53540039 16.75215149]
[-203.05787659 29.81645012]
[-213.48875427 40.70039368]
[-226.22160339 48.77119827]
[-240.51615906 53.55964661]
[-255.54133606 54.78733826]
[-270.42361450 52.38290024]
[-284.29776001 46.48612595]
[-296.35711670 37.43983841]
[-305.90057373 25.76997948]
[-312.37332153 12.15502357]
[-315.39901733 -2.61347651]
[-314.80175781 -17.67689896]
[-310.61627197 -32.15947723]
[-303.08587646 -45.21921158]
[-292.64840698 -56.09682846]
[-279.91064453 -64.15991211]
[-265.61318970 -68.93969727]
[-250.58728027 -70.15827942]
[-235.70646667 -67.74481964]
[-221.83590698 -61.83963013]
[-209.78204346 -52.78603363]
[-200.24563599 -41.11039352]
[-193.78115845 -27.49151611]
[-190.76440430 -12.72118378]
[-191.37080383 2.34187412]
[-176.96052551 6.50647402]
[-162.55024719 10.67107391]
[-148.13996887 14.83567429]
[-133.72969055 19.00027466]
[-119.31941986 23.16487503]
[-111.95136261 21.98884583]
[-104.62227631 27.59969521]
[-90.31359100 32.10096359]
[-76.00489807 36.60223389]
[-61.69621277 41.10350418]
[-50.76892090 35.78000641]
[-38.77051926 39.48400879]
[-32.34605789 50.73867035]
[-18.14682198 55.57413483]
[-3.94758606 60.40959930]
[10.25164890 65.24506378]
[24.45088387 70.08052826]
[38.75957108 74.58179474]
[53.16984940 78.74639893]
[67.58013153 82.91099548]
[81.99040985 87.07559967]
[96.40068054 91.24019623]
[101.54301453 89.77596283]
[107.13022614 91.35095215]
[111.38024139 95.95250702]
[125.57947540 100.78797150]
[139.77870178 105.62344360]
[153.97793579 110.45890808]
[167.74458313 97.21217346]
[186.22560120 92.69762421]
[204.39486694 98.05982208]
[217.35275269 111.76847839]
[221.64739990 130.05404663]
[236.23704529 133.53863525]
[250.82669067 137.02320862]
[266.04675293 132.70343018]
[276.62841797 143.18568420]
[291.21807861 146.67025757]
[305.80770874 150.15483093]
[321.02777100 145.83506775]
[331.60943604 156.31730652]
[346.19909668 159.80187988]
[360.78872681 163.28646851]
[368.28298950 150.17111206]
[379.16967773 139.69938660]
[392.56622314 132.72019958]
[407.38665771 129.79931641]
[422.42953491 131.17352295]
[436.47540283 136.73141479]
[448.38565063 146.02243042]
[457.19470215 158.29341125]
[462.18853760 172.54959106]
[462.96224976 187.63526917]
[459.45315552 202.32754517]
[451.94570923 215.43537903]
[441.04852295 225.89614868]
[427.64495850 232.86187744]
[412.82159424 235.76786804]
[397.78012085 234.37855530]
[383.73983765 228.80656433]
[371.83895874 219.50357056]
[363.04220581 207.22375488]
[358.06271362 192.96257019]
[357.30413818 177.87611389]
[342.71450806 174.39152527]
[328.12484741 170.90695190]
[313.94836426 175.47596741]
[302.32312012 164.74447632]
[287.73348999 161.25990295]
[273.14382935 157.77531433]
[258.96734619 162.34434509]
[247.34211731 151.61285400]
[232.75247192 148.12826538]
[218.16282654 144.64369202]
[211.87107849 153.97186279]
[202.98901367 160.92268372]
[192.37164307 164.80610657]
[181.04740906 165.22834778]
[170.11874390 162.13179016]
[160.65464783 155.80213928]
[153.58610535 146.84220886]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 80]
[2 79]
[3 78]
[4 77]
[5 74]
[6 73]
[7 72]
[8 71]
[9 70]
[12 69]
[13 68]
[14 67]
[15 66]
[16 65]
[18 62]
[19 61]
[20 60]
[21 59]
[22 57]
[23 56]
[24 55]
[25 54]
[26 53]
[27 52]
[85 126]
[86 125]
[87 124]
[89 122]
[90 121]
[91 120]
[93 118]
[94 117]
[95 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
