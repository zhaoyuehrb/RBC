%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 18:55:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGAGCCUUCGUGGCCCUCAGGAUGCCUUCGGGGGACAGAUUCUGCCCAGUCUCUGGGCAUCCAUAAUUGCUGCUAACCUAGACAUUUCAUAGUUACAGAUUAAAUCUACUUGACUUUAA\
) } def
/len { sequence length } bind def

/coor [
[99.98700714 116.36302948]
[92.26511383 129.22274780]
[84.54322052 142.08247375]
[76.82133484 154.94218445]
[75.05095673 164.02740479]
[68.73142242 168.02996826]
[60.68098068 180.68659973]
[52.63053894 193.34324646]
[54.69651031 209.25271606]
[43.44294739 220.68673706]
[27.50262451 218.87411499]
[19.10359001 205.20532227]
[24.68886566 190.16589355]
[39.97390366 185.29280090]
[48.02434921 172.63616943]
[56.07479095 159.97952271]
[63.96161270 147.22029114]
[71.68350220 134.36058044]
[79.40539551 121.50085449]
[87.12728882 108.64113617]
[83.57791138 103.13312531]
[82.47707367 96.18914795]
[70.47948456 87.18593597]
[58.48189545 78.18271637]
[46.48430634 69.17950439]
[34.48671722 60.17629242]
[22.48912811 51.17307663]
[10.49153996 42.16986084]
[-1.50604904 33.16664886]
[-18.07444763 40.99435425]
[-36.24934387 39.44750214]
[-51.11929321 29.02862358]
[-58.70842743 12.62629223]
[-57.03935623 -5.28522921]
[-69.69599152 -13.33567238]
[-82.35262299 -21.38611412]
[-91.38925171 -23.38982582]
[-95.22777557 -29.81032372]
[-107.67292786 -38.18397903]
[-120.11808014 -46.55763626]
[-136.63478088 -50.38322067]
[-137.53097534 -67.31346893]
[-121.51045990 -72.86139679]
[-111.74442291 -59.00278854]
[-99.29927063 -50.62913513]
[-86.85411835 -42.25547791]
[-74.30217743 -34.04274750]
[-61.64554596 -25.99230576]
[-48.98891449 -17.94186211]
[-39.24160004 -24.89065933]
[-27.67454338 -28.10559464]
[-15.66992760 -27.17778969]
[-4.67066526 -22.19487953]
[3.99302197 -13.73334122]
[9.26447487 -2.79189444]
[10.48943615 9.32634640]
[7.49716520 21.16905975]
[19.49475479 30.17227364]
[31.49234200 39.17548752]
[43.48993301 48.17870331]
[55.48751831 57.18191528]
[67.48510742 66.18512726]
[79.48269653 75.18834686]
[91.48028564 84.19155884]
[83.58123779 71.43989563]
[85.14066315 56.52117157]
[95.50596619 45.67864227]
[110.33943939 43.44972610]
[123.43350983 50.76718521]
[129.30853271 64.56878662]
[125.50588989 79.07878113]
[113.61573792 88.22537231]
[128.01799011 84.03308868]
[142.42024231 79.84080505]
[149.89083862 74.37586212]
[157.24748230 75.73113251]
[171.75289917 71.91106415]
[186.25831604 68.09099579]
[200.76373291 64.27092743]
[206.46829224 49.96134949]
[219.35433960 41.84942627]
[234.36849976 42.86866760]
[245.76705933 52.41910172]
[260.27249146 48.59903336]
[271.53079224 36.67500305]
[287.42178345 40.72571564]
[291.59817505 56.58414459]
[279.76364136 67.93650055]
[264.09255981 63.10445023]
[249.58712769 66.92451477]
[244.37117004 80.85045624]
[231.80659485 89.13269043]
[216.59655762 88.41999817]
[204.58380127 78.77634430]
[190.07838440 82.59641266]
[175.57296753 86.41648102]
[161.06755066 90.23654938]
[146.61251831 94.24305725]
[132.21026611 98.43534088]
[117.80802155 102.62762451]
[132.45707703 105.85335541]
[147.28785706 103.60659027]
[162.19187927 105.30067444]
[176.14009094 110.81861877]
[188.16937256 119.77944183]
[197.44915771 131.56440735]
[203.33869934 145.35981750]
[205.43135071 160.21313477]
[203.58261108 175.09877014]
[197.92013550 188.98892212]
[188.83489990 200.92451477]
[176.95422363 210.08143616]
[163.09840393 215.82742310]
[148.22416687 217.76574707]
[133.35853577 215.76254272]
[119.52791595 209.95616150]
[107.68729401 200.74748230]
[98.65422058 188.77235413]
[93.05240631 174.85763550]
[91.26863861 159.96406555]
[93.42607117 145.12002563]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[3 18]
[4 17]
[6 16]
[7 15]
[8 14]
[22 64]
[23 63]
[24 62]
[25 61]
[26 60]
[27 59]
[28 58]
[29 57]
[34 49]
[35 48]
[36 47]
[38 46]
[39 45]
[40 44]
[72 100]
[73 99]
[74 98]
[76 97]
[77 96]
[78 95]
[79 94]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
