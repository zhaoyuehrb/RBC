%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:55:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUACGACAGCUCAACUCCAGAAUGCACUGCCCCGCUACCCCUUCUGGAACAUGCACCAGCUUCUGGCCCCCUCUCUGUUAGUGCCAGUGAUGUAGAACCUCAUCACUUUGCCUCUGUGCUUUGCUUCUCUACCAAGGCAGCCUGCCAGAGUUA\
) } def
/len { sequence length } bind def

/coor [
[96.13384247 136.22807312]
[87.78159332 133.83638000]
[80.33640289 129.57571411]
[74.20228577 123.73751068]
[69.69751740 116.69683075]
[67.03832245 108.88855743]
[66.32887268 100.78068542]
[51.63201523 97.78030396]
[36.93515396 94.77991486]
[22.23829460 91.77953339]
[7.54143429 88.77914429]
[-0.70210344 102.38185883]
[-13.07780552 112.33075714]
[-28.08339310 117.44162750]
[-43.90534973 117.11614990]
[-58.63810349 111.41181946]
[-70.51351166 101.03287506]
[-78.11308289 87.24337769]
[-80.53739166 71.71328735]
[-95.29169464 69.00946045]
[-110.04598999 66.30563354]
[-124.80029297 63.60181046]
[-139.55459595 60.89798355]
[-154.30888367 58.19416046]
[-169.18055725 56.23626709]
[-184.13191223 55.02927017]
[-199.08328247 53.82226944]
[-214.03463745 52.61527252]
[-222.89851379 55.05377197]
[-229.27392578 51.23044968]
[-244.19793701 49.72262192]
[-256.36981201 59.44286728]
[-271.48342896 57.70111465]
[-280.67517090 46.03718948]
[-295.59921265 44.52935791]
[-310.52322388 43.02153015]
[-319.43560791 55.53012466]
[-333.41491699 61.89208984]
[-348.70077515 60.39608765]
[-361.18136597 51.44453812]
[-367.49948120 37.44536209]
[-365.95556641 22.16426468]
[-356.96496582 9.71178722]
[-342.94604492 3.43758202]
[-327.66986084 5.02937984]
[-315.24563599 14.05899525]
[-309.01538086 28.09750557]
[-294.09136963 29.60533524]
[-279.16735840 31.11316681]
[-267.82827759 21.52354813]
[-252.67170715 22.84010315]
[-242.69010925 34.79859924]
[-227.76608276 36.30642700]
[-212.82763672 37.66390991]
[-197.87628174 38.87091064]
[-182.92492676 40.07790756]
[-167.97355652 41.28490829]
[-175.26855469 28.17830086]
[-169.76141357 14.22582722]
[-155.48118591 9.63509941]
[-142.87524414 17.76468849]
[-141.16609192 32.66699600]
[-151.60505676 43.43986130]
[-136.85076904 46.14368820]
[-122.09646606 48.84751129]
[-107.34216309 51.55133820]
[-92.58786774 54.25516510]
[-77.83357239 56.95898819]
[-71.02941895 44.51184845]
[-60.69239807 34.76588821]
[-47.82778549 28.68719101]
[-33.69235992 26.88429642]
[-19.67159462 29.54732513]
[-7.14387989 36.42800140]
[2.65499282 46.86275482]
[8.75373363 59.83669281]
[10.54181957 74.08228302]
[25.23867989 77.08267212]
[39.93553925 80.08305359]
[54.63240051 83.08344269]
[69.32926178 86.08382416]
[80.12384033 71.26154327]
[97.63696289 63.87288284]
[117.11647034 66.67198944]
[132.88301086 79.54026794]
[144.11067200 69.59342957]
[149.50366211 52.01446152]
[166.78709412 49.11751175]
[177.81217957 38.94659805]
[188.83726501 28.77568436]
[199.86235046 18.60476875]
[210.88743591 8.43385410]
[221.91252136 -1.73706114]
[232.93760681 -11.90797615]
[230.99560547 -27.30304909]
[238.50297546 -40.88314819]
[252.57296753 -47.42644501]
[267.79541016 -44.41691208]
[278.31692505 -33.01177216]
[280.09179688 -17.59653854]
[272.43756104 -4.09868097]
[258.29739380 2.29159904]
[243.10852051 -0.88289154]
[232.08343506 9.28802299]
[221.05834961 19.45893860]
[210.03326416 29.62985420]
[199.00817871 39.80076981]
[187.98309326 49.97168350]
[176.95800781 60.14259720]
[176.14532471 72.24781799]
[166.99314880 80.81168365]
[154.05751038 80.82109070]
[142.82984924 90.76792908]
[143.43383789 105.75576019]
[155.42549133 114.76689911]
[167.41712952 123.77803040]
[179.40876770 132.78916931]
[191.40040588 141.80029297]
[200.19535828 144.47673035]
[203.54035950 151.11561584]
[215.34811401 160.36639404]
[235.38194275 162.23414612]
[241.93785095 180.38946533]
[254.10852051 189.15728760]
[266.27917480 197.92512512]
[278.44985962 206.69294739]
[290.62051392 215.46078491]
[302.79119873 224.22860718]
[317.48669434 219.24644470]
[332.29400635 223.88572693]
[341.51943970 236.36256409]
[341.61560059 251.87933350]
[332.54553223 264.46954346]
[317.79684448 269.29199219]
[303.04071045 264.49237061]
[293.95120239 251.91618347]
[294.02334595 236.39927673]
[281.85269165 227.63145447]
[269.68200684 218.86361694]
[257.51135254 210.09579468]
[245.34068298 201.32795715]
[233.17001343 192.56013489]
[223.20214844 195.10775757]
[213.27992249 191.64660645]
[206.79258728 183.10122681]
[206.09732056 172.17414856]
[194.28958130 162.92335510]
[182.38926697 153.79194641]
[170.39762878 144.78080750]
[158.40599060 135.76966858]
[146.41435242 126.75853729]
[134.42271423 117.74740601]
[128.86581421 125.12610626]
[121.79460144 130.89718628]
[113.65023804 134.76805115]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 81]
[8 80]
[9 79]
[10 78]
[11 77]
[19 68]
[20 67]
[21 66]
[22 65]
[23 64]
[24 63]
[25 57]
[26 56]
[27 55]
[28 54]
[30 53]
[31 52]
[34 49]
[35 48]
[36 47]
[85 113]
[86 112]
[88 109]
[89 108]
[90 107]
[91 106]
[92 105]
[93 104]
[94 103]
[114 152]
[115 151]
[116 150]
[117 149]
[118 148]
[120 147]
[121 146]
[123 142]
[124 141]
[125 140]
[126 139]
[127 138]
[128 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
