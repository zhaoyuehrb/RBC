%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 23:09:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGAAAUAAGCAUCUGUUAGUCAGCUCAGAAACACCCAUCUUAGAAUAUGAAAAAUAACACAAUGCUUGAUUUGAAAACAGUGUGGAGAAAAACUAGGCAAACUACACCCUGUUCAUUGUUACCUGGAAAAUAAAUCCUCUAUGUUUUGCACA\
) } def
/len { sequence length } bind def

/coor [
[78.21005249 146.65798950]
[74.08303070 132.23690796]
[78.03271484 117.76625061]
[88.91178894 107.44273376]
[73.91255951 107.29072571]
[58.91333008 107.13871765]
[45.03545761 114.73577118]
[32.38724899 106.86988831]
[17.38801956 106.71788025]
[2.38878894 106.56587219]
[-12.61044121 106.41385651]
[-27.60967064 106.26184845]
[-42.60890198 106.10984039]
[-57.60813141 105.95783234]
[-73.39727020 115.38031006]
[-88.16055298 105.93926239]
[-103.15978241 106.09127808]
[-118.15901184 106.24328613]
[-133.15824890 106.39529419]
[-148.15747070 106.54730225]
[-165.82206726 118.61083221]
[-183.44570923 107.93074036]
[-198.40798950 108.99393463]
[-213.37025452 110.05712891]
[-224.55747986 123.46913147]
[-241.64521790 124.64694214]
[-254.06794739 113.34992218]
[-269.00561523 114.71614075]
[-283.91250610 116.38481903]
[-298.78250122 118.35527039]
[-313.65252686 120.32572174]
[-320.92645264 134.03228760]
[-334.88241577 140.81536865]
[-350.15411377 138.06672668]
[-360.86923218 126.84328461]
[-362.90762329 111.46067810]
[-355.48544312 97.83383179]
[-341.45669556 91.20254517]
[-326.21572876 94.11668396]
[-315.62298584 105.45570374]
[-300.75296021 103.48525238]
[-285.88296509 101.51480103]
[-282.28912354 98.28864288]
[-276.61328125 97.32416534]
[-270.37182617 99.77848816]
[-255.43417358 98.41226959]
[-248.63250732 87.42835999]
[-236.55915833 82.30794525]
[-223.55383301 85.13585663]
[-214.43345642 95.09485626]
[-199.47119141 94.03166199]
[-184.50891113 92.96846771]
[-179.80233765 85.31952667]
[-171.96777344 80.65277863]
[-162.72459412 80.14134979]
[-154.17138672 84.02951813]
[-148.30947876 91.54807281]
[-133.31025696 91.39606476]
[-118.31102753 91.24405670]
[-103.31179810 91.09204102]
[-88.31256866 90.94003296]
[-79.59138489 82.50443268]
[-67.05828094 82.28949738]
[-57.45611954 90.95859528]
[-42.45689011 91.11061096]
[-27.45766068 91.26261902]
[-12.45843124 91.41462708]
[2.54079890 91.56663513]
[17.54002953 91.71865082]
[32.53925705 91.87065887]
[45.34428787 84.26273346]
[59.06534195 92.13948822]
[74.06456757 92.29149628]
[89.06379700 92.44350433]
[98.86129761 87.01709747]
[109.08378601 91.02091980]
[123.91080475 88.74950409]
[138.73783875 86.47808838]
[153.56486511 84.20667267]
[168.39187622 81.93524933]
[183.21890259 79.66383362]
[192.57391357 67.20905304]
[207.64297485 65.11672974]
[219.45906067 74.11204529]
[231.92845154 64.37424469]
[245.68060303 70.09505463]
[260.50762939 67.82363892]
[275.33465576 65.55222321]
[279.07907104 49.15406418]
[288.79290771 35.46713638]
[302.97424316 26.55916214]
[319.44900513 23.76272011]
[335.70410156 27.47596931]
[349.27078247 37.10622406]
[358.09963989 51.16435623]
[372.82241821 48.29393005]
[387.54522705 45.42350769]
[402.26800537 42.55308151]
[416.99081421 39.68265915]
[431.61953735 36.36602020]
[446.14068604 32.60623169]
[460.66186523 28.84644318]
[466.42581177 14.56067562]
[479.34542847 6.50234318]
[494.35522461 7.58393621]
[505.71401978 17.18162727]
[520.23516846 13.42183971]
[534.75634766 9.66205215]
[548.57427979 -0.16138954]
[561.83905029 10.39717102]
[555.36517334 26.06641388]
[538.51611328 24.18320847]
[523.99499512 27.94299698]
[509.47381592 31.70278549]
[504.20007324 45.60694122]
[491.60119629 53.83691406]
[476.39422607 53.06105804]
[464.42163086 43.36759949]
[449.90048218 47.12738800]
[435.37933350 50.88717651]
[433.27285767 53.78377533]
[429.63137817 55.77828598]
[424.90661621 56.14805603]
[419.86123657 54.40545273]
[405.13842773 57.27587509]
[390.41564941 60.14630127]
[375.69284058 63.01672363]
[360.97006226 65.88714600]
[359.15521240 79.08277893]
[353.33801270 91.09059143]
[344.07617188 100.72679138]
[332.26788330 107.03656006]
[319.06448364 109.38861084]
[305.75842285 107.53836823]
[293.65655518 101.65327454]
[283.95190430 92.29779816]
[277.60607910 80.37924957]
[262.77905273 82.65066528]
[247.95201111 84.92208099]
[236.54315186 94.49742126]
[221.73048401 88.93907166]
[213.14915466 101.05915833]
[198.14480591 103.57391357]
[185.49032593 94.49085999]
[170.66329956 96.76227570]
[155.83627319 99.03369141]
[141.00924683 101.30510712]
[126.18222809 103.57653046]
[111.35520172 105.84794617]
[123.58628082 114.53129578]
[129.54125977 128.29858398]
[127.49358368 143.15815735]
[118.03692627 154.80169678]
[103.91313934 159.85328674]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 74]
[5 73]
[6 72]
[8 70]
[9 69]
[10 68]
[11 67]
[12 66]
[13 65]
[14 64]
[16 61]
[17 60]
[18 59]
[19 58]
[20 57]
[22 52]
[23 51]
[24 50]
[27 46]
[28 45]
[29 42]
[30 41]
[31 40]
[76 149]
[77 148]
[78 147]
[79 146]
[80 145]
[81 144]
[84 141]
[86 139]
[87 138]
[88 137]
[95 128]
[96 127]
[97 126]
[98 125]
[99 124]
[100 120]
[101 119]
[102 118]
[106 114]
[107 113]
[108 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
