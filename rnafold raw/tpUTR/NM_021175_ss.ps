%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 22:58:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCUACCUGCCCUGCCCCCGUCCCCUCCCUUCCUUAUUUAUUCCUGCUGCCCCAGAACAUAGGUCUUGGAAUAAAAUGGCUGGUUCUUUUGUUUUCCAA\
) } def
/len { sequence length } bind def

/coor [
[92.43345642 257.10760498]
[90.84123993 242.09536743]
[93.35946655 227.21043396]
[99.80125427 213.55738831]
[109.68858337 202.14935303]
[122.28775787 193.83288574]
[117.69689941 179.55268860]
[113.10604095 165.27249146]
[101.84474945 155.52401733]
[104.98712158 140.01802063]
[100.39626312 125.73782349]
[95.80540466 111.45762634]
[90.90665436 125.63515472]
[82.92448425 138.33494568]
[72.27364349 148.89712524]
[59.50756454 156.77285767]
[45.28958130 161.55293274]
[30.35847855 162.98895264]
[15.49008656 161.00630188]
[1.45697987 155.70800781]
[-11.01166725 147.36936951]
[-21.26797295 136.42367554]
[-28.77901077 123.43967438]
[-33.15449905 109.09201813]
[-34.16708755 94.12623596]
[-31.76415443 79.31996155]
[-26.07056236 65.44252777]
[-17.38215637 53.21503830]
[-6.15039110 43.27283096]
[7.04111814 36.13251877]
[21.50692940 32.16511536]
[36.49538803 31.57677078]
[51.22767639 34.39805603]
[64.93829346 40.48237991]
[76.91482544 49.51358795]
[86.53495789 61.02241516]
[93.29881287 74.41085052]
[96.85481262 88.98210907]
[102.75631714 75.19181061]
[108.65782166 61.40151978]
[114.55932617 47.61122131]
[120.46083069 33.82092667]
[126.36232758 20.03063202]
[132.26383972 6.24033642]
[138.16534424 -7.54995918]
[130.19711304 -18.91930962]
[128.94345093 -32.63692856]
[134.62825012 -45.06436539]
[145.64941406 -52.95927429]
[159.02856445 -54.32117844]
[165.35609436 -67.92127228]
[171.68362427 -81.52135468]
[162.79768372 -94.04875946]
[161.38192749 -109.34226227]
[167.81716919 -123.28798676]
[180.37236023 -132.13461304]
[195.67022705 -133.50242615]
[209.59570312 -127.02350616]
[218.40292358 -114.44065094]
[219.72279358 -99.13857269]
[213.20025635 -85.23345947]
[200.58984375 -76.46572113]
[185.28370667 -75.19383240]
[178.95619202 -61.59374237]
[172.62866211 -47.99365234]
[181.04576111 -33.99522018]
[179.50880432 -17.56776810]
[168.42149353 -5.12714291]
[151.95562744 -1.64845538]
[146.05413818 12.14183998]
[140.15263367 25.93213654]
[134.25112915 39.72243118]
[128.34962463 53.51272583]
[122.44811249 67.30302429]
[116.54660797 81.09331512]
[110.64511108 94.88361359]
[111.88200378 98.81457520]
[111.69838715 102.97662354]
[110.08560181 106.86676788]
[114.67646027 121.14696503]
[119.26731873 135.42715454]
[130.85696411 146.19705200]
[127.38623810 160.68164062]
[131.97709656 174.96182251]
[136.56794739 189.24201965]
[151.65310669 188.65841675]
[166.33605957 192.16748047]
[179.52722168 199.50885010]
[190.24774170 210.13774109]
[197.70205688 223.26541138]
[201.33703613 237.91769409]
[200.88293457 253.00730896]
[196.37344360 267.41448975]
[188.14318848 280.07012939]
[176.80291748 290.03512573]
[163.19415283 296.56997681]
[148.32676697 299.18975830]
[133.30400085 297.70007324]
[119.24066162 292.21145630]
[107.18032074 283.13122559]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 85]
[7 84]
[8 83]
[10 81]
[11 80]
[12 79]
[38 76]
[39 75]
[40 74]
[41 73]
[42 72]
[43 71]
[44 70]
[45 69]
[50 65]
[51 64]
[52 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
