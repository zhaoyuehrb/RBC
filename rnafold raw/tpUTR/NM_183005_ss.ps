%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 18:39:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUGCAUAAACUUGUCAUGUCAUACAGUUUGUGAAAGGACACCUUGUAAAGAAGCCUUGAAACUAAUAAAAUGAGUUAUACUUACAUAGA\
) } def
/len { sequence length } bind def

/coor [
[149.32182312 121.60815430]
[134.87805176 117.56120300]
[120.43429565 113.51425171]
[105.99053955 109.46730042]
[91.47978973 105.66754150]
[76.90628052 102.11607361]
[62.33277893 98.56460571]
[54.76850891 107.64697266]
[44.35825729 113.13388824]
[32.69406891 114.23110962]
[21.54274750 110.81231689]
[12.57821846 103.43222046]
[7.13027477 93.23701477]
[5.98738337 81.78645325]
[-8.14653015 76.76325989]
[-22.28044510 71.74006653]
[-36.41435623 66.71687317]
[-49.19361115 75.31901550]
[-64.40983582 74.75350952]
[-76.23550415 65.44665527]
[-80.26509857 51.13231277]
[-94.39900970 46.10911942]
[-108.53292084 41.08592606]
[-122.66683960 36.06273270]
[-136.80075073 31.03953743]
[-151.84806824 36.60353088]
[-165.50495911 28.18516350]
[-167.29502869 12.24229050]
[-155.84509277 1.00491834]
[-139.93855286 3.09339666]
[-131.77755737 16.90562439]
[-117.64364624 21.92881775]
[-103.50972748 26.95201302]
[-89.37581635 31.97520638]
[-75.24190521 36.99840164]
[-63.08249664 28.43762970]
[-48.03574753 28.68123436]
[-35.87546158 37.84534454]
[-31.39116478 52.58295822]
[-17.25724983 57.60615158]
[-3.12333632 62.62934494]
[11.01057720 67.65254211]
[25.51202011 56.21313095]
[44.11728287 55.57314682]
[59.61161041 66.15365601]
[65.88424683 83.99109650]
[80.45774841 87.54256439]
[95.03125763 91.09403229]
[103.17063141 89.77967834]
[110.03749084 95.02354431]
[124.48124695 99.07049561]
[138.92500305 103.11744690]
[153.36877441 107.16439819]
[158.32884216 97.46264648]
[164.82249451 88.71729279]
[172.67004395 81.16832733]
[181.65472412 75.02266693]
[191.52856445 70.44847870]
[202.01931763 67.57058716]
[212.83796692 66.46705627]
[223.68663025 67.16709900]
[234.26678467 69.65025330]
[244.28753662 73.84704590]
[253.47354126 79.64087677]
[261.57260132 86.87129974]
[268.36257935 95.33843231]
[273.65756226 104.80850220]
[277.31283569 115.02029419]
[279.22888184 125.69236755]
[279.35415649 136.53079224]
[277.68637085 147.23725891]
[274.27258301 157.51728821]
[269.20788574 167.08831787]
[280.84356689 176.55462646]
[292.47921753 186.02095032]
[304.11489868 195.48727417]
[315.75057983 204.95358276]
[331.85293579 210.25926208]
[331.21218872 227.20109558]
[314.75506592 231.27536011]
[306.28424072 216.58926392]
[294.64859009 207.12294006]
[283.01290894 197.65661621]
[271.37725830 188.19030762]
[259.74157715 178.72398376]
[243.17608643 190.52232361]
[223.76797485 196.65597534]
[203.39743042 196.51997375]
[184.04119873 190.11720276]
[167.58076477 178.05918884]
[155.61946106 161.50769043]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 53]
[2 52]
[3 51]
[4 50]
[5 48]
[6 47]
[7 46]
[14 42]
[15 41]
[16 40]
[17 39]
[21 35]
[22 34]
[23 33]
[24 32]
[25 31]
[73 85]
[74 84]
[75 83]
[76 82]
[77 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
