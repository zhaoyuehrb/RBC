%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 20:08:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCCUGGGGCUGGGGUUUUGUUUGUAGAAGGCUCUGGGGACUCCUAAUUUCUGCUUCCCCAGCCUAAAGCAGGGAUCAGUCUUUUCUUGUGGAAUAAAUCCUUGGAUCGGGAA\
) } def
/len { sequence length } bind def

/coor [
[79.22503662 95.82672119]
[66.51639557 87.85863495]
[53.80775070 79.89054871]
[41.09910583 71.92246246]
[28.39046288 63.95438004]
[15.68181992 55.98629379]
[2.97317696 48.01820755]
[-10.15163326 40.75601959]
[-23.65344048 34.22140503]
[-37.15525055 27.68679237]
[-50.65705490 21.15217781]
[-64.15886688 14.61756229]
[-77.66067505 8.08294773]
[-91.16248322 1.54833329]
[-104.66428375 -4.98628139]
[-118.16609192 -11.52089596]
[-124.88832855 -6.00011730]
[-132.93310547 -2.78195238]
[-141.54025269 -2.14826894]
[-149.90318298 -4.13776875]
[-157.24441528 -8.54429245]
[-162.88787842 -14.93797684]
[-166.32116699 -22.70711708]
[-167.24198914 -31.11666489]
[-165.58471680 -39.37775040]
[-177.83926392 -48.02795792]
[-190.09381104 -56.67816162]
[-202.34835815 -65.32836914]
[-214.60290527 -73.97856903]
[-226.85745239 -82.62877655]
[-239.11199951 -91.27898407]
[-248.34007263 -88.38597107]
[-257.71270752 -90.12151337]
[-265.07513428 -95.95448303]
[-268.79675293 -104.42723846]
[-268.13137817 -113.51805878]
[-279.63668823 -123.14241791]
[-291.14196777 -132.76678467]
[-302.64724731 -142.39114380]
[-318.88592529 -144.67977905]
[-324.77148438 -159.98637390]
[-314.24938965 -172.56483459]
[-298.14385986 -169.47550964]
[-293.02288818 -153.89643860]
[-281.51760864 -144.27207947]
[-270.01229858 -134.64770508]
[-258.50701904 -125.02334595]
[-238.00080872 -123.49520874]
[-230.46179199 -103.53353119]
[-218.20724487 -94.88332367]
[-205.95269775 -86.23311615]
[-193.69815063 -77.58291626]
[-181.44360352 -68.93270874]
[-169.18905640 -60.28250504]
[-156.93450928 -51.63230133]
[-135.98966980 -57.83910370]
[-116.84425354 -46.78088379]
[-111.63147736 -25.02270317]
[-98.12966919 -18.48808861]
[-84.62786865 -11.95347404]
[-71.12606049 -5.41885996]
[-57.62424850 1.11575472]
[-44.12244034 7.65036917]
[-30.62063408 14.18498421]
[-17.11882591 20.71959877]
[-3.61701870 27.25421333]
[-0.82751244 26.34632492]
[2.51213098 26.56656837]
[5.94360161 28.13926506]
[8.93317032 31.10709190]
[10.94126225 35.30956268]
[23.64990616 43.27764893]
[36.35854721 51.24573517]
[49.06719208 59.21382141]
[61.77583694 67.18190765]
[74.48448181 75.14999390]
[87.19312286 83.11808014]
[99.20227814 78.82503510]
[111.50040436 82.20235443]
[119.63265228 92.02664948]
[120.65322113 104.73918152]
[133.13948059 113.05142975]
[145.62573242 121.36367798]
[158.11198425 129.67591858]
[176.45018005 130.36166382]
[183.73550415 146.26298523]
[196.44415283 154.23107910]
[209.15278625 162.19915771]
[221.92916870 157.68576050]
[234.77302551 161.34422302]
[243.00881958 171.60768127]
[243.77502441 184.54890442]
[256.26129150 192.86116028]
[268.74752808 201.17340088]
[284.69659424 199.43916321]
[295.89379883 210.92837524]
[293.74963379 226.82749939]
[279.90890503 234.94007874]
[264.98904419 229.04284668]
[260.43530273 213.65965271]
[247.94903564 205.34741211]
[235.46278381 197.03515625]
[219.19963074 201.07032776]
[204.73052979 191.97145081]
[201.18470764 174.90780640]
[188.47605896 166.93971252]
[175.76742554 158.97163391]
[163.82269287 161.36160278]
[153.13865662 154.71241760]
[149.79974365 142.16218567]
[137.31347656 133.84992981]
[124.82723236 125.53768921]
[112.34097290 117.22544098]
[96.30584717 120.86548615]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 77]
[2 76]
[3 75]
[4 74]
[5 73]
[6 72]
[7 71]
[8 66]
[9 65]
[10 64]
[11 63]
[12 62]
[13 61]
[14 60]
[15 59]
[16 58]
[25 55]
[26 54]
[27 53]
[28 52]
[29 51]
[30 50]
[31 49]
[36 47]
[37 46]
[38 45]
[39 44]
[81 113]
[82 112]
[83 111]
[84 110]
[86 107]
[87 106]
[88 105]
[92 102]
[93 101]
[94 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
