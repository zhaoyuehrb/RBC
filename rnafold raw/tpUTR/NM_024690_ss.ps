%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:31:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGAACUUGCCGGUGCCUGGGGUGCCUUUCCCCCAGCCAGGGUCCAAAGAAGCUUGGCUGGGGCAGAAAUAAACCAUAUUGGUCGGA\
) } def
/len { sequence length } bind def

/coor [
[75.22303009 332.26666260]
[61.27779388 339.07180786]
[46.00177002 336.34735107]
[35.26890564 325.14086914]
[33.20619965 309.76150513]
[40.60680771 296.12292480]
[54.62504578 289.46945190]
[57.25873184 274.70248413]
[51.87627029 260.81442261]
[61.91639709 248.58712769]
[64.55007935 233.82014465]
[67.18376923 219.05317688]
[69.81745911 204.28619385]
[72.45114136 189.51921082]
[75.08483124 174.75222778]
[77.71851349 159.98524475]
[75.63256836 155.46153259]
[76.53020477 149.56181335]
[81.09426880 144.28532410]
[84.76304626 129.74090576]
[88.43181610 115.19649506]
[81.09359741 102.70262146]
[84.63751221 88.65318298]
[97.02376556 81.13473511]
[100.69253540 66.59031677]
[92.85186768 53.13068390]
[96.77971649 38.43283844]
[109.65973663 31.04090691]
[113.32851410 16.49648857]
[116.99728394 1.95207024]
[112.87030029 -13.32138824]
[123.48549652 -23.76968002]
[127.15427399 -38.31409836]
[130.82304382 -52.85851669]
[134.49182129 -67.40293121]
[138.16059875 -81.94734955]
[141.82936096 -96.49176788]
[145.49813843 -111.03618622]
[149.16691589 -125.58060455]
[152.83567810 -140.12503052]
[156.50445557 -154.66944885]
[160.17323303 -169.21386719]
[154.67669678 -186.67933655]
[167.13920593 -198.89776611]
[170.29238892 -213.56260681]
[164.74923706 -228.99652100]
[175.54890442 -241.33746338]
[191.58163452 -237.89015198]
[196.35430908 -222.20088196]
[184.95722961 -210.40940857]
[181.80403137 -195.74458313]
[188.14144897 -185.27783203]
[185.47415161 -172.92280579]
[174.71765137 -165.54508972]
[171.04887390 -151.00067139]
[167.38009644 -136.45625305]
[163.71133423 -121.91183472]
[160.04255676 -107.36741638]
[156.37377930 -92.82299805]
[152.70500183 -78.27857971]
[149.03623962 -63.73416138]
[145.36746216 -49.18974304]
[141.69868469 -34.64532471]
[138.02992249 -20.10090637]
[142.41932678 -5.86776161]
[131.54170227 5.62084341]
[127.87293243 20.16526222]
[124.20415497 34.70967865]
[132.03707886 47.32637024]
[128.52360535 62.12874222]
[115.23695374 70.25908661]
[111.56818390 84.80350494]
[118.90640259 97.29737854]
[115.36248779 111.34681702]
[102.97623444 118.86526489]
[99.30746460 133.40968323]
[95.63868713 147.95410156]
[92.48549652 162.61894226]
[89.85180664 177.38591003]
[87.21812439 192.15289307]
[84.58443451 206.91987610]
[81.95075226 221.68685913]
[79.31706238 236.45384216]
[76.68337250 251.22080994]
[81.87745667 266.16513062]
[72.02571106 277.33615112]
[69.39202881 292.10314941]
[80.24582672 303.19253540]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 87]
[8 86]
[10 84]
[11 83]
[12 82]
[13 81]
[14 80]
[15 79]
[16 78]
[19 77]
[20 76]
[21 75]
[24 72]
[25 71]
[28 68]
[29 67]
[30 66]
[32 64]
[33 63]
[34 62]
[35 61]
[36 60]
[37 59]
[38 58]
[39 57]
[40 56]
[41 55]
[42 54]
[44 51]
[45 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
