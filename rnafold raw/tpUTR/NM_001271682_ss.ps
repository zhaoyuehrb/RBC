%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:28:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCAGACAGGCCCCUCAGCCAUGGGGUGCCUUCCCCUGCUCGCGCCACCAGGCGGGACGUCCAUGUUGCCUUUUCAGAACAUUCUCUUCAUUUUUCUCCUCUCAGUUUGACCAUUGUUAACAAUAAAGUUAUCUGUUCUC\
) } def
/len { sequence length } bind def

/coor [
[88.52696991 118.49409485]
[76.71134949 127.73482513]
[77.55418396 144.59034729]
[68.30058289 158.50524902]
[52.74217606 164.13371277]
[37.04526138 159.45451355]
[25.43695641 168.95437622]
[20.72915268 176.87654114]
[13.46515369 178.53256226]
[1.64953387 187.77328491]
[-10.16608620 197.01402283]
[-21.98170471 206.25476074]
[-28.08565712 220.85107422]
[-42.87758636 222.59695435]
[-54.69320297 231.83769226]
[-66.50882721 241.07841492]
[-78.32444000 250.31915283]
[-90.14006042 259.55987549]
[-95.77069092 274.96209717]
[-111.96911621 277.52001953]
[-122.07179260 264.60226440]
[-115.68595123 249.49754333]
[-99.38079834 247.74426270]
[-87.56517792 238.50354004]
[-75.74955750 229.26280212]
[-63.93393707 220.02206421]
[-52.11831665 210.78134155]
[-46.85949707 196.84597778]
[-31.22243690 194.43913269]
[-19.40681839 185.19841003]
[-7.59119844 175.95767212]
[4.22442102 166.71693420]
[15.93709946 157.34606934]
[27.54540253 147.84622192]
[25.54681778 134.60180664]
[30.41126633 122.00561523]
[40.96120834 113.40515900]
[54.49328613 111.14293671]
[67.47061920 115.91921234]
[79.28623962 106.67847443]
[78.95440674 91.68214417]
[66.74160004 82.97310638]
[51.01338577 81.26029205]
[45.14330673 67.57118988]
[32.93050003 58.86214828]
[20.71769905 50.15310669]
[8.50489521 41.44406509]
[-7.86185360 40.41373444]
[-14.90958023 25.60625267]
[-5.38818789 12.25428104]
[10.90753174 14.09318638]
[17.21393776 29.23126030]
[29.42674255 37.94030380]
[41.63954544 46.64934540]
[53.85234833 55.35839081]
[68.70702362 56.44827271]
[75.45064545 70.76029968]
[87.66345215 79.46934509]
[94.51053619 76.40871429]
[84.45728302 65.27623749]
[91.93843842 52.27499390]
[106.61511993 55.37257385]
[108.20470428 70.28746033]
[115.05178833 67.22683716]
[116.70769501 52.31851578]
[118.36360931 37.41019821]
[120.01951599 22.50188065]
[121.67542267 7.59356165]
[109.25592041 -1.44256032]
[103.03304291 -15.48433304]
[104.68071747 -30.75458908]
[113.75572205 -43.14570999]
[127.81693268 -49.32453918]
[143.08195496 -47.62901306]
[155.44456482 -38.51520920]
[161.57928467 -24.43470192]
[159.83592224 -9.17507362]
[150.68341064 3.15891051]
[136.58374023 9.24947166]
[134.92784119 24.15778923]
[133.27192688 39.06610870]
[131.61601257 53.97442627]
[129.96009827 68.88274384]
[138.56072998 56.59334946]
[147.16136169 44.30395508]
[155.76197815 32.01456070]
[167.81802368 23.08977890]
[181.97261047 18.12510872]
[196.96209717 17.56376076]
[211.44834900 21.45584869]
[224.13815308 29.45391464]
[233.89863586 40.84395218]
[239.85845947 54.60914230]
[241.48559570 69.52062988]
[238.63475037 84.24723053]
[231.56045532 97.47425842]
[220.89424133 108.02090454]
[207.58830261 114.94564819]
[192.83049011 117.63028717]
[177.93829346 115.83516693]
[164.23828125 109.71868896]
[149.30929565 108.26081848]
[134.38031006 106.80294800]
[119.45131683 105.34507751]
[131.85379028 113.78181458]
[144.25627136 122.21855164]
[157.10229492 120.58240509]
[167.27441406 127.92937469]
[169.60408020 139.84989929]
[181.81689453 148.55892944]
[194.02969360 157.26797485]
[206.24249268 165.97702026]
[226.32675171 166.91729736]
[233.73905945 184.72622681]
[246.32513428 192.88653564]
[258.91122437 201.04682922]
[271.49731445 209.20713806]
[287.89361572 209.51249695]
[295.58941650 223.99374390]
[286.66793823 237.75381470]
[270.30682373 236.63752747]
[263.33700562 221.79322815]
[250.75091553 213.63291931]
[238.16484070 205.47261047]
[225.57875061 197.31230164]
[215.72145081 200.35003662]
[205.62020874 197.35707092]
[198.72584534 189.10134888]
[197.53344727 178.18981934]
[185.32064819 169.48078918]
[173.10784912 160.77174377]
[160.89505005 152.06269836]
[143.39370728 151.36514282]
[135.81953430 134.62103271]
[123.41706085 126.18428802]
[111.01457977 117.74755096]
[120.29827118 129.52944946]
[119.28481293 144.49517822]
[108.49745178 154.91789246]
[93.50573730 155.41632080]
[82.04991913 145.73312378]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[6 34]
[7 33]
[9 32]
[10 31]
[11 30]
[12 29]
[14 27]
[15 26]
[16 25]
[17 24]
[18 23]
[41 58]
[42 57]
[44 55]
[45 54]
[46 53]
[47 52]
[64 83]
[65 82]
[66 81]
[67 80]
[68 79]
[104 136]
[105 135]
[106 134]
[109 132]
[110 131]
[111 130]
[112 129]
[114 125]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
