%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 21:22:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUCGGGACUGCCCUGCUCUCGGAUGAAAACAGAAUGACACGUAAAGUCCGGGAUUUUUUUUUCUACAACCCCGACCCAUUUGC\
) } def
/len { sequence length } bind def

/coor [
[128.97186279 207.52720642]
[139.92205811 196.75740051]
[136.08441162 182.25662231]
[132.24676514 167.75584412]
[128.40913391 153.25506592]
[124.57148743 138.75428772]
[120.73384857 124.25351715]
[113.79156494 121.41543579]
[101.93376923 130.60197449]
[99.90699768 115.73926544]
[92.96471405 112.90118408]
[80.06771851 120.56065369]
[69.53668213 133.84724426]
[53.85405350 127.40586853]
[55.70231628 110.55296326]
[72.40824890 107.66365051]
[85.30524445 100.00418854]
[89.41019440 85.57679749]
[82.47713470 72.27519226]
[75.54407501 58.97359085]
[68.61101532 45.67198563]
[61.67795944 32.37038040]
[54.74489975 19.06877518]
[47.81184387 5.76716948]
[40.87878418 -7.53443575]
[26.99853134 -8.57917786]
[15.57299519 -16.33715820]
[9.57721043 -28.65704918]
[10.50676250 -42.21761322]
[18.00629997 -53.42285538]
[11.56949043 -66.97156525]
[-3.74639106 -68.12019348]
[-16.42697334 -76.78612518]
[-23.06124306 -90.63827515]
[-21.86461449 -105.95047760]
[-13.15897560 -118.60383606]
[0.71390069 -125.19465637]
[16.02227974 -123.95003510]
[28.64828682 -115.20478058]
[35.19558716 -101.31130981]
[33.90298843 -86.00690460]
[25.11819839 -73.40837097]
[31.55500793 -59.85966492]
[47.67722702 -57.42951965]
[59.35224533 -45.81393814]
[61.91543961 -29.37896538]
[54.18038940 -14.46749401]
[61.11344910 -1.16588879]
[68.04650879 12.13571644]
[74.97956848 25.43732262]
[81.91262054 38.73892593]
[88.84568024 52.04053116]
[95.77873993 65.34214020]
[102.71179962 78.64374542]
[103.50261688 63.66460419]
[108.73276520 49.60595703]
[117.92443085 37.75212860]
[130.23791504 29.18602753]
[144.54832458 24.69021416]
[159.54830933 24.67539978]
[173.86756897 29.14294052]
[186.19795227 37.68470001]
[195.41300964 49.52035141]
[200.67091370 63.56864166]
[201.49131775 78.54618835]
[197.79928589 93.08471680]
[189.93208313 105.85606384]
[178.60842896 115.69348907]
[164.86280823 121.69830322]
[149.95094299 123.32192993]
[135.23461914 120.41587067]
[139.07226562 134.91665649]
[142.90991211 149.41741943]
[146.74754333 163.91819763]
[150.58518982 178.41897583]
[154.42283630 192.91975403]
[169.26687622 196.86311340]
[180.13917542 207.71153259]
[184.11515808 222.54687500]
[180.12530518 237.37847900]
[169.24284363 248.21673584]
[154.39511108 252.14619446]
[139.57609558 248.10986328]
[128.77200317 237.19348145]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 76]
[3 75]
[4 74]
[5 73]
[6 72]
[7 71]
[11 17]
[12 16]
[18 54]
[19 53]
[20 52]
[21 51]
[22 50]
[23 49]
[24 48]
[25 47]
[30 43]
[31 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
