%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 21:26:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACGGAGGCACUCCACGAUGCCUGGGCAUCUAGGCCCAAUGCCAGACCUGGCAACCCAUCCUAACUGUAUUAUUAAAACCAAGUAAGAGUAA\
) } def
/len { sequence length } bind def

/coor [
[118.62499237 177.41737366]
[124.52557373 163.56106567]
[133.26725769 151.29742432]
[123.20549011 140.17263794]
[113.14372253 129.04786682]
[103.08194733 117.92308044]
[88.25127411 115.67564392]
[75.34524536 123.31989288]
[62.43922424 130.96414185]
[49.53319931 138.60839844]
[36.62717819 146.25263977]
[35.31134796 161.71382141]
[25.13352776 173.42671204]
[10.00729465 176.88743591]
[-4.25100565 170.76530457]
[-12.15876579 157.41439819]
[-10.67529011 141.96839905]
[-0.37100568 130.36660767]
[14.79187965 127.07016754]
[28.98292732 133.34661865]
[41.88895035 125.70236969]
[54.79497528 118.05812073]
[67.70099640 110.41387177]
[80.60702515 102.76961517]
[80.60702515 87.76961517]
[67.70099640 80.12536621]
[54.79497528 72.48111725]
[41.88895035 64.83686829]
[26.64265251 68.99931335]
[12.96022415 61.08939743]
[8.95920849 45.79994583]
[17.01333618 32.20190811]
[32.34423828 28.36276627]
[45.85636139 36.56021118]
[49.53319931 51.93084717]
[62.43922424 59.57509613]
[75.34524536 67.21934509]
[88.25127411 74.86359406]
[94.82839966 71.25923157]
[107.98264313 64.05050659]
[114.55976868 60.44614410]
[115.06099701 45.45451736]
[115.56221771 30.46289444]
[116.06344604 15.47127151]
[116.56466675 0.47964844]
[108.37107086 -13.72587681]
[116.80976868 -27.78718376]
[133.19975281 -27.23920822]
[140.68041992 -12.64565659]
[131.55628967 0.98087311]
[131.05506897 15.97249699]
[130.55384827 30.96412086]
[130.05261230 45.95574188]
[129.55139160 60.94736862]
[137.17861938 48.03128052]
[152.03326416 45.94810486]
[166.48689270 49.95967865]
[178.14299011 59.40084076]
[185.06886292 72.70618439]
[186.11618042 87.66957855]
[181.11126709 101.80997467]
[170.88398743 112.78279877]
[157.13009644 118.76865387]
[142.13009644 118.77506256]
[128.37026978 112.80035400]
[114.20673370 107.86130524]
[124.26850128 118.98609161]
[134.33027649 130.11087036]
[144.39204407 141.23565674]
[157.46910095 133.76539612]
[171.84643555 129.28140259]
[186.85160828 127.99340820]
[201.78279114 129.96163940]
[215.94161987 135.09403992]
[228.66587830 143.15055847]
[239.36041260 153.75437927]
[247.52502441 166.40954590]
[252.77783203 180.52413940]
[254.87316895 195.43801880]
[253.71302795 210.45361328]
[249.35166931 224.86862183]
[241.99308777 238.00883484]
[231.98143005 249.25965881]
[219.78498840 258.09487915]
[205.97421265 264.10122681]
[191.19503784 266.99780273]
[176.13873291 266.64910889]
[161.50949097 263.07150269]
[147.99156189 256.43225098]
[136.21719360 247.04190063]
[126.73709869 235.33969116]
[119.99468231 221.87292480]
[116.30529785 207.27146912]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 69]
[4 68]
[5 67]
[6 66]
[7 24]
[8 23]
[9 22]
[10 21]
[11 20]
[25 38]
[26 37]
[27 36]
[28 35]
[41 54]
[42 53]
[43 52]
[44 51]
[45 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
