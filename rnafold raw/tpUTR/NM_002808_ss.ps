%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 20:34:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGACCACCAGGGGCUCUGAACUGCAGCUGAUGUUAUCAGCAGGCCAUGCAUCCUGCUGCCAAGGGUGGACACGGCUGCAGACUUCUGGGGGAAUUGUCGCCUCCUGCUCUUUUGUUACUGAGUGAGAUAAGGUUGUUCAAUAAAGACUUUUAUCCCCAAGGUC\
) } def
/len { sequence length } bind def

/coor [
[107.79090118 214.29064941]
[94.64250183 203.58755493]
[101.28746033 187.99009705]
[101.85852051 173.00097656]
[102.42958832 158.01185608]
[103.00064850 143.02272034]
[95.80445099 140.90972900]
[81.41205597 136.68374634]
[74.21585846 134.57073975]
[66.59252930 147.48913574]
[58.96920395 160.40753174]
[61.56526566 176.23915100]
[50.69978333 188.04257202]
[34.70782089 186.76322937]
[25.85704613 173.38252258]
[30.93701553 158.16497803]
[46.05080795 152.78421021]
[53.67413712 139.86581421]
[61.29746246 126.94741821]
[58.86471939 114.73009491]
[59.90071487 103.19492340]
[63.86660385 93.24368286]
[49.99478912 87.53643036]
[36.12297440 81.82917786]
[22.25115776 76.12192535]
[8.37934303 70.41466522]
[-5.49247217 64.70741272]
[-19.36428833 59.00016403]
[-33.23610306 53.29291153]
[-47.10791779 47.58565903]
[-56.28101349 47.20785141]
[-61.18784332 41.63543320]
[-74.94848633 35.66511154]
[-88.70912933 29.69478989]
[-102.46976471 23.72446823]
[-122.98051453 34.23689270]
[-144.37313843 26.39839363]
[-153.03306580 5.61098528]
[-167.46504211 1.52220178]
[-181.89701843 -2.56658173]
[-196.32899475 -6.65536547]
[-210.76097107 -10.74414921]
[-225.19293213 -14.83293247]
[-239.62490845 -18.92171669]
[-251.73844910 -9.22420406]
[-267.24011230 -8.53254414]
[-280.16915894 -17.11269379]
[-285.55413818 -31.66541100]
[-281.32443237 -46.59487915]
[-269.10638428 -56.16041183]
[-253.59814453 -56.68386841]
[-240.76292419 -47.96396637]
[-235.53613281 -33.35369110]
[-221.10415649 -29.26490593]
[-206.67218018 -25.17612267]
[-192.24020386 -21.08733940]
[-177.80822754 -16.99855423]
[-163.37626648 -12.90977097]
[-148.94429016 -8.82098770]
[-144.18429565 -14.80242157]
[-137.96096802 -19.28787994]
[-130.73043823 -21.93058205]
[-123.02753448 -22.51946449]
[-115.42629242 -20.99596786]
[-108.49714661 -17.45949745]
[-102.76409912 -12.16107464]
[-98.66515350 -5.48555851]
[-96.51882935 2.07627797]
[-96.49944305 9.96382713]
[-82.73880768 15.93414783]
[-68.97816467 21.90446854]
[-55.21752167 27.87479019]
[-41.40066528 33.71384048]
[-27.52885056 39.42109680]
[-13.65703487 45.12834930]
[0.21478051 50.83560181]
[14.08659554 56.54285431]
[27.95841217 62.25010681]
[41.83022690 67.95735931]
[55.70204163 73.66461182]
[69.57386017 79.37186432]
[79.55720520 69.44902039]
[92.53797913 64.00572205]
[106.61286926 63.84007645]
[119.71814728 68.97638702]
[129.93225098 78.66152954]
[135.75753784 91.47542572]
[150.75141907 91.04708862]
[165.74530029 90.61875153]
[180.73919678 90.19040680]
[195.73307800 89.76206970]
[210.72695923 89.33372498]
[225.71607971 88.76266479]
[240.69909668 88.04893494]
[251.30122375 76.63698578]
[266.50628662 76.12660217]
[277.32049561 86.30444336]
[292.30352783 85.59071350]
[307.28652954 84.87698364]
[322.11285400 82.60101318]
[336.62005615 78.78774261]
[351.12725830 74.97446442]
[365.63446045 71.16119385]
[379.24777222 56.33415604]
[397.67102051 62.11792374]
[412.02252197 57.75511551]
[426.33184814 53.25587845]
[440.59771729 48.62062454]
[454.86355591 43.98536682]
[469.12939453 39.35011292]
[472.24417114 24.31037140]
[482.47348022 12.85363865]
[497.06570435 8.06171703]
[512.09558105 11.22360992]
[523.52020264 21.48878288]
[528.26635742 36.09595871]
[525.05737305 51.11587524]
[514.75646973 62.50825882]
[500.13449097 67.20860291]
[485.12469482 63.95255280]
[473.76464844 53.61595917]
[459.49880981 58.25121689]
[445.23297119 62.88647079]
[430.96710205 67.52172852]
[425.55282593 72.60248566]
[416.38534546 72.10662842]
[402.03384399 76.46943665]
[398.02398682 85.92823792]
[389.27291870 91.71945953]
[378.55902100 91.71311951]
[369.44772339 85.66839600]
[354.94052124 89.48166656]
[340.43331909 93.29494476]
[325.92611694 97.10821533]
[339.88836670 102.59053040]
[349.79220581 113.85613251]
[353.44046021 128.40571594]
[350.02374268 143.01139832]
[340.30004883 154.43286133]
[326.42660522 160.13619995]
[311.48132324 158.85612488]
[298.77984619 150.87663269]
[291.14004517 137.96797180]
[290.25683594 122.99399567]
[296.32617188 109.27673340]
[308.00024414 99.85999298]
[293.01724243 100.57372284]
[278.03424072 101.28745270]
[268.23645020 112.44716644]
[253.05171204 113.38442230]
[241.41282654 103.03194427]
[226.42980957 103.74567413]
[219.86837769 107.22079468]
[211.15530396 104.32760620]
[196.16140747 104.75595093]
[181.16752625 105.18428802]
[166.17364502 105.61263275]
[151.17976379 106.04096985]
[136.18588257 106.46931458]
[132.67512512 126.32403564]
[117.98976898 143.59378052]
[117.41870880 158.58291626]
[116.84764862 173.57203674]
[116.27658844 188.56115723]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 164]
[4 163]
[5 162]
[6 161]
[9 19]
[10 18]
[11 17]
[22 81]
[23 80]
[24 79]
[25 78]
[26 77]
[27 76]
[28 75]
[29 74]
[30 73]
[32 72]
[33 71]
[34 70]
[35 69]
[38 59]
[39 58]
[40 57]
[41 56]
[42 55]
[43 54]
[44 53]
[87 159]
[88 158]
[89 157]
[90 156]
[91 155]
[92 154]
[93 152]
[94 151]
[97 148]
[98 147]
[99 146]
[100 134]
[101 133]
[102 132]
[103 131]
[105 127]
[106 126]
[107 124]
[108 123]
[109 122]
[110 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
