%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 22:41:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUAAACAUUGUUUUGUAGUGUAUAUUACUUGUCCAUUCCUUUAAGGGGAGCAGCCUGCACUCUUUUGUAGAUUACUUUUGGGGGAUAUAUUUUGAGAAUGAUGAAACGGAAUAAAAUUGUAAAAAAUUAA\
) } def
/len { sequence length } bind def

/coor [
[212.25277710 338.73315430]
[205.42713928 325.37609863]
[198.60150146 312.01907349]
[183.71948242 311.39349365]
[171.06454468 303.34933472]
[164.08908081 289.96243286]
[164.75523376 274.78173828]
[172.98414612 261.88864136]
[166.15850830 248.53160095]
[159.33287048 235.17454529]
[152.50723267 221.81750488]
[145.68159485 208.46046448]
[138.85595703 195.10340881]
[132.03031921 181.74636841]
[125.20468140 168.38932800]
[118.37904358 155.03227234]
[112.47782898 150.46405029]
[111.55414581 141.27816772]
[105.04589081 127.76363373]
[98.53763580 114.24909973]
[87.09457397 106.21492767]
[87.94783020 92.25915527]
[81.43957520 78.74462128]
[74.93132019 65.23008728]
[68.42306519 51.71555710]
[61.91481018 38.20102310]
[58.98972702 52.91305542]
[50.08031464 64.98046112]
[36.88158798 72.10742188]
[21.90460205 72.93803406]
[7.99873114 67.31426239]
[-2.19043088 56.30604172]
[-6.72439671 42.00767899]
[-4.74057865 27.13944054]
[3.38360167 14.53001213]
[16.10251808 6.57833576]
[30.99639702 4.79721880]
[45.23167801 9.52551842]
[56.09987640 19.86334991]
[53.63095474 5.06793022]
[51.16203690 -9.72748947]
[48.69311905 -24.52290916]
[46.22420120 -39.31832886]
[43.75527954 -54.11374664]
[41.28636169 -68.90916443]
[38.81744385 -83.70458984]
[36.34852600 -98.50000763]
[33.87960434 -113.29542542]
[31.41068649 -128.09085083]
[19.55678749 -130.87522888]
[9.38808441 -137.50984192]
[2.10647774 -147.18215942]
[-1.43704653 -158.72239685]
[-0.84181571 -170.74484253]
[3.79736757 -181.81434631]
[11.90438080 -190.61759949]
[22.49322510 -196.11894226]
[21.07807159 -211.05203247]
[19.66292000 -225.98513794]
[18.24776840 -240.91822815]
[16.83261681 -255.85131836]
[4.49464083 -265.72805786]
[2.83734536 -281.44522095]
[12.84397411 -293.67807007]
[28.57777023 -295.16909790]
[40.70415497 -285.03369141]
[42.02875519 -269.28503418]
[31.76571083 -257.26647949]
[33.18086243 -242.33337402]
[34.59601593 -227.40028381]
[36.01116943 -212.46719360]
[37.42631912 -197.53408813]
[54.15724945 -190.85339355]
[65.30308533 -176.59288025]
[67.76721954 -158.57702637]
[60.79594421 -141.69184875]
[46.20610809 -130.55976868]
[48.67502594 -115.76434326]
[51.14394379 -100.96892548]
[53.61286163 -86.17350769]
[56.08178329 -71.37808990]
[58.55070114 -56.58266830]
[61.01961899 -41.78724670]
[63.48853683 -26.99182701]
[65.95745850 -12.19640827]
[68.42637634 2.59901118]
[70.89529419 17.39443016]
[75.42934418 31.69276619]
[81.93759918 45.20729828]
[88.44585419 58.72183228]
[94.95410919 72.23636627]
[101.46236420 85.75090027]
[112.90542603 93.78507233]
[112.05216980 107.74084473]
[118.56042480 121.25537872]
[125.06867981 134.76991272]
[131.73608398 148.20663452]
[138.56172180 161.56369019]
[145.38735962 174.92073059]
[152.21299744 188.27777100]
[159.03863525 201.63482666]
[165.86427307 214.99186707]
[172.68991089 228.34890747]
[179.51554871 241.70596313]
[186.34118652 255.06300354]
[201.61090088 255.94798279]
[214.30364990 264.30209351]
[221.06570435 277.79803467]
[220.17054749 292.76651001]
[211.95854187 305.19342041]
[218.78417969 318.55047607]
[225.60981750 331.90753174]
[240.40521240 328.90771484]
[255.46121216 330.01208496]
[269.66055298 335.13861084]
[281.94952393 343.90692139]
[291.41625977 355.66635132]
[297.35821533 369.54421997]
[299.33447266 384.51074219]
[297.19839478 399.45532227]
[291.10848999 413.26892090]
[281.51663208 424.92648315]
[269.13464355 433.56298828]
[254.88134766 438.53750610]
[239.81442261 439.48089600]
[225.05191040 436.32318115]
[211.68933105 429.29864502]
[200.71824646 418.92861938]
[192.95280457 405.98254395]
[188.96922302 391.42117310]
[189.06314087 376.32501221]
[193.22758484 361.81433105]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 112]
[2 111]
[3 110]
[8 105]
[9 104]
[10 103]
[11 102]
[12 101]
[13 100]
[14 99]
[15 98]
[16 97]
[18 96]
[19 95]
[20 94]
[22 92]
[23 91]
[24 90]
[25 89]
[26 88]
[39 87]
[40 86]
[41 85]
[42 84]
[43 83]
[44 82]
[45 81]
[46 80]
[47 79]
[48 78]
[49 77]
[57 72]
[58 71]
[59 70]
[60 69]
[61 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
