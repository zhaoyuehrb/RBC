%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 17:47:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCUGCCUCCUACCCAUCCCGCCCACCGGGGCUUUGGCCACCUCUCCUUUCCCCCUCCUUCUCCAUCCCUGUAAAAUAAAUGUAAUUUAUCUUUGCCAAAACCAA\
) } def
/len { sequence length } bind def

/coor [
[12.03906345 141.84953308]
[-1.96201110 147.23190308]
[-15.96308517 152.61427307]
[-29.96415901 157.99664307]
[-41.73219299 174.23313904]
[-60.66424561 170.79214478]
[-74.32530975 176.98693848]
[-87.98637390 183.18171692]
[-101.64743805 189.37649536]
[-115.30850220 195.57128906]
[-113.60603333 210.60314941]
[-116.63397217 225.42497253]
[-124.09568024 238.58468628]
[-135.26013184 248.79302979]
[-149.03353882 255.04989624]
[-164.06654358 256.74227905]
[-178.88633728 253.70440674]
[-192.04106140 246.23388672]
[-202.24191284 235.06260681]
[-208.48954773 221.28500366]
[-210.17185974 206.25086975]
[-207.12405396 191.43310547]
[-199.64472961 178.28340149]
[-188.46659851 168.09004211]
[-174.68481445 161.85163879]
[-159.64956665 160.17939758]
[-144.83384705 163.23712158]
[-131.68916321 170.72526550]
[-121.50328064 181.91021729]
[-107.84221649 175.71543884]
[-94.18115234 169.52064514]
[-80.52009583 163.32586670]
[-66.85903168 157.13108826]
[-64.05972290 147.10331726]
[-55.97861099 140.19314575]
[-45.19770432 138.93302917]
[-35.34653091 143.99557495]
[-21.34545708 138.61320496]
[-7.34438229 133.23083496]
[6.65669203 127.84845734]
[4.11824846 117.18137360]
[2.79473829 106.29657745]
[2.70293140 95.33200073]
[3.84399104 84.42656708]
[6.20345926 73.71846771]
[9.75143814 63.34339142]
[14.44297123 53.43279266]
[20.21861076 44.11225891]
[27.00517464 35.49988174]
[34.71666718 27.70479965]
[43.25537109 20.82578087]
[52.51309967 14.94999027]
[62.37254333 10.15188217]
[72.70877075 6.49225473]
[83.39080811 4.01747847]
[94.28330231 2.75891232]
[105.24822998 2.73250341]
[116.14665985 3.93858671]
[126.84049225 6.36187935]
[137.19422913 9.97167587]
[147.07667542 14.72223568]
[156.36259460 20.55336380]
[164.93434143 27.39117241]
[172.68328857 35.14902115]
[179.51126099 43.72860336]
[185.33172607 53.02121353]
[190.07093811 62.90909576]
[193.66885376 73.26696777]
[196.07987976 83.96356964]
[197.27345276 94.86338043]
[197.23446655 105.82826996]
[195.96339417 116.71931458]
[210.49870300 120.42406464]
[225.03399658 124.12881470]
[239.56929016 127.83356476]
[254.10458374 131.53831482]
[268.69268799 135.02928162]
[283.33050537 138.30572510]
[297.96829224 141.58216858]
[312.60607910 144.85862732]
[327.24386597 148.13507080]
[341.88165283 151.41151428]
[358.65902710 148.97091675]
[365.64868164 164.41699219]
[352.74114990 175.40937805]
[338.60519409 166.04930115]
[323.96740723 162.77285767]
[309.32962036 159.49641418]
[294.69183350 156.21997070]
[280.05404663 152.94351196]
[265.41625977 149.66706848]
[258.08615112 151.30314636]
[250.39984131 146.07360840]
[235.86454773 142.36885071]
[221.32923889 138.66410828]
[206.79394531 134.95936584]
[192.25865173 131.25460815]
[183.43959045 150.26274109]
[170.75933838 166.94494629]
[154.80465698 180.52923584]
[136.31387329 190.38700867]
[116.14265442 196.06208801]
[95.22441864 197.29185486]
[74.52717590 194.01939392]
[55.00870514 186.39613342]
[37.57221985 174.77487183]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[4 37]
[6 33]
[7 32]
[8 31]
[9 30]
[10 29]
[72 97]
[73 96]
[74 95]
[75 94]
[76 93]
[77 91]
[78 90]
[79 89]
[80 88]
[81 87]
[82 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
