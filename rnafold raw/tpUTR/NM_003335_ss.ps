%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 17:14:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGGCAGCCACCCUGUCACCUAGCUCAAUGGAGCCCCGGAUCCCAAGCCCUGCAUUGUAAGCCCACAGUAGGCACUCAAUAAAUGCUUGUUAAAGGAAGGCA\
) } def
/len { sequence length } bind def

/coor [
[92.84426880 277.05239868]
[80.82681274 286.72628784]
[65.48456573 288.34463501]
[51.71318817 281.39102173]
[43.90707779 268.08432007]
[44.55713272 252.67066956]
[53.45592499 240.06848145]
[67.76388550 234.29908752]
[70.46770477 219.54478455]
[73.17153168 204.79049683]
[64.52542877 192.71653748]
[67.05731201 177.71505737]
[79.78021240 168.72808838]
[82.48403931 153.97380066]
[85.18786621 139.21949768]
[75.79799652 134.23202515]
[67.96477509 127.04279327]
[62.19201279 118.11420441]
[58.85100937 108.02053833]
[58.15665436 97.41100311]
[43.59252930 93.82126617]
[28.88331413 103.14047241]
[12.29097939 99.09931946]
[3.85288453 84.63944244]
[-10.81301975 81.49122620]
[-25.47892380 78.34300232]
[-40.14482498 75.19478607]
[-55.57685089 80.74317932]
[-67.92147064 69.94770050]
[-64.47959900 53.91381454]
[-48.79193878 49.13580704]
[-36.99660873 60.52888489]
[-22.33070564 63.67710114]
[-7.66480303 66.82531738]
[7.00110102 69.97353363]
[16.82483292 61.48652267]
[29.94353867 60.24075317]
[41.52812195 66.92234039]
[47.18226242 79.25714111]
[61.74639130 82.84687042]
[70.87286377 69.84741211]
[84.18020630 61.17600632]
[99.75828552 58.07733536]
[115.37107086 60.99617004]
[128.77751160 69.51355743]
[140.85928345 60.62362289]
[152.94104004 51.73368835]
[165.02281189 42.84375763]
[177.10458374 33.95382309]
[174.83905029 20.05866814]
[178.79780579 6.61738205]
[188.14408875 -3.73287988]
[200.99008179 -8.98748589]
[214.77806091 -8.16244507]
[226.78956604 -1.47813606]
[239.13432312 -9.99910736]
[251.47908020 -18.52007866]
[263.82385254 -27.04104996]
[264.32748413 -42.43756104]
[273.69107056 -54.44492722]
[288.15841675 -58.58728409]
[302.12368774 -53.47752762]
[314.46844482 -61.99849701]
[326.81320190 -70.51947021]
[328.10040283 -86.10398102]
[339.14068604 -97.17857361]
[354.72113037 -98.51415253]
[367.48513794 -89.48010254]
[371.40594482 -74.34202576]
[364.63226318 -60.24766159]
[350.36239624 -53.85193253]
[335.33416748 -58.17470932]
[322.98941040 -49.65373993]
[310.64465332 -41.13276672]
[310.47021484 -26.26308250]
[301.46685791 -14.20475483]
[286.91940308 -9.70752907]
[272.34481812 -14.69629192]
[260.00006104 -6.17532063]
[247.65528870 2.34565067]
[235.31053162 10.86662197]
[237.02371216 26.85670853]
[230.44534302 41.63347244]
[217.26556396 51.17016983]
[200.98710632 52.81674194]
[185.99450684 46.03559113]
[173.91275024 54.92552185]
[161.83097839 63.81545639]
[149.74920654 72.70539093]
[137.66743469 81.59532166]
[141.87271118 97.93988037]
[139.29216003 114.61829376]
[130.34397888 128.92768860]
[116.47829437 138.54911804]
[99.94216156 141.92332458]
[97.23833466 156.67762756]
[94.53450775 171.43191528]
[103.24381256 184.34648132]
[100.29156494 199.27091980]
[87.92583466 207.49432373]
[85.22200775 222.24861145]
[82.51818085 237.00291443]
[93.85049438 247.47106934]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 102]
[9 101]
[10 100]
[13 97]
[14 96]
[15 95]
[20 40]
[21 39]
[24 35]
[25 34]
[26 33]
[27 32]
[45 90]
[46 89]
[47 88]
[48 87]
[49 86]
[55 81]
[56 80]
[57 79]
[58 78]
[62 74]
[63 73]
[64 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
