%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 05:44:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGGGGUAUGGGGCCAUCCGAGCUGAGGCCAUCUGGGUGGUGGUGGCUGAUGGUACUGGAGUAACUGAGUCGGGACGCUGAAUCUGAAUCCACCAAUAAAUAAAGGUUCUGCAGAAUCAGUGCA\
) } def
/len { sequence length } bind def

/coor [
[127.19506073 184.49183655]
[121.01207733 198.15824890]
[110.63133240 208.98599243]
[97.23757172 215.73931885]
[82.35943604 217.64744568]
[67.69495392 214.49261475]
[54.91778183 206.63487244]
[45.48617935 194.97105408]
[40.47657776 180.83230591]
[40.46071625 165.83232117]
[45.44040680 151.68302917]
[54.84732056 139.99926758]
[67.60784149 132.11453247]
[82.26814270 128.92858887]
[67.43568420 126.69295502]
[52.60322189 124.45732117]
[37.77075958 122.22168732]
[22.93829536 119.98605347]
[8.10583305 117.75041962]
[1.65286040 119.86248016]
[-4.01238966 118.52049255]
[-7.40284109 115.01582336]
[-22.10542870 112.04363251]
[-36.80801773 109.07143402]
[-51.51060486 106.09924316]
[-56.66443253 107.84545898]
[-61.46872330 107.40814972]
[-65.12783051 105.30915833]
[-67.18218994 102.31616211]
[-81.62155151 98.25355530]
[-96.06092072 94.19094849]
[-110.50028229 90.12834167]
[-124.93964386 86.06573486]
[-139.37901306 82.00312805]
[-154.01866150 88.56514740]
[-168.21009827 81.08299255]
[-171.06687927 65.29634094]
[-160.39750671 53.31535339]
[-144.38661194 54.33081818]
[-135.31640625 67.56375885]
[-120.87703705 71.62636566]
[-106.43767548 75.68897247]
[-91.99831390 79.75157928]
[-77.55894470 83.81418610]
[-63.11958313 87.87679291]
[-48.53841019 91.39665985]
[-33.83582306 94.36885071]
[-19.13323593 97.34104156]
[-4.43064928 100.31323242]
[10.34146690 102.91795349]
[25.17392921 105.15358734]
[40.00639343 107.38922119]
[54.83885574 109.62485504]
[69.67131805 111.86049652]
[84.50377655 114.09613037]
[81.66007996 95.05700684]
[94.86428070 83.75196838]
[97.09991455 68.91950226]
[91.50584412 54.12028122]
[101.05362701 42.68834686]
[103.28926086 27.85588646]
[97.69519043 13.05666542]
[107.24297333 1.62473118]
[98.91152954 -12.08536148]
[104.57099915 -27.09702301]
[119.87991333 -31.89459229]
[133.09458923 -22.79778481]
[134.07785034 -6.78489113]
[122.07543182 3.86036515]
[127.82941437 17.59866905]
[118.12171936 30.09152031]
[115.88608551 44.92398071]
[121.64006805 58.66228485]
[111.93238068 71.15513611]
[109.69674683 85.98760223]
[118.90272522 101.86352539]
[108.32733917 119.22209930]
[122.76670837 123.28470612]
[137.20606995 127.34731293]
[151.64543152 131.40991211]
[166.08479309 135.47251892]
[180.52415466 139.53512573]
[195.90411377 135.82466125]
[206.06011963 146.71983337]
[220.49948120 150.78244019]
[234.93884277 154.84504700]
[249.37820435 158.90765381]
[258.91891479 148.59715271]
[271.91812134 143.45010376]
[285.79861450 144.42523193]
[297.83511353 151.27351379]
[305.68923950 162.59848022]
[307.86376953 176.14056396]
[322.19738770 180.56188965]
[336.53097534 184.98323059]
[347.73510742 174.47784424]
[362.69448853 170.99761963]
[377.38516235 175.47871399]
[387.85534668 186.71571350]
[391.28866577 201.68595886]
[386.76156616 216.36248779]
[375.49179077 226.79742432]
[360.51086426 230.18379211]
[345.84860229 225.61070251]
[335.44903564 214.30827332]
[332.10964966 199.31681824]
[317.77603149 194.89549255]
[303.44244385 190.47416687]
[291.91833496 201.72911072]
[276.20809937 205.69004822]
[260.54565430 201.19256592]
[249.20088196 189.36495972]
[245.31559753 173.34703064]
[230.87623596 169.28440857]
[216.43687439 165.22180176]
[201.99751282 161.15919495]
[187.65036011 165.16024780]
[176.46154785 153.97450256]
[162.02218628 149.91189575]
[147.58282471 145.84928894]
[133.14346313 141.78668213]
[118.70409393 137.72407532]
[104.26473236 133.66146851]
[116.31559753 142.59324646]
[124.70471191 155.02798462]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 55]
[15 54]
[16 53]
[17 52]
[18 51]
[19 50]
[22 49]
[23 48]
[24 47]
[25 46]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[34 40]
[57 75]
[58 74]
[60 72]
[61 71]
[63 69]
[77 123]
[78 122]
[79 121]
[80 120]
[81 119]
[82 118]
[84 116]
[85 115]
[86 114]
[87 113]
[93 108]
[94 107]
[95 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
