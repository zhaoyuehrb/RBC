%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 20:10:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCCACCGAGGGACAGCCGAGGGACCGAUGGACGAGGGGACAGGCUGGUGGGAUGGGGUUCCCCCUCCCAUGCCCCUCCCUCCUUUUUAUUUAAGUGAAUAAUUUAAAGUCUUCUCCUCCCCCACUGCCCCUGCAGUAAAGUGCUUUGGCCCCCACCUA\
) } def
/len { sequence length } bind def

/coor [
[70.05894470 404.28784180]
[55.37824249 408.06311035]
[40.29197311 406.58651733]
[26.62187767 400.03640747]
[16.01868820 389.20364380]
[9.76278973 375.39642334]
[8.60961246 360.28201294]
[12.69840908 345.68551636]
[21.53543663 333.36956787]
[34.05358124 324.82135010]
[48.74121857 321.07312012]
[50.20237350 306.14447021]
[51.66352463 291.21578979]
[44.45532227 283.88647461]
[42.45612717 273.57839966]
[46.57054901 263.67901611]
[55.65266418 257.57888794]
[57.69516373 242.71859741]
[59.73766327 227.85830688]
[61.78016281 212.99801636]
[63.82266235 198.13772583]
[65.86516571 183.27743530]
[67.90766144 168.41714478]
[61.97546005 154.75485229]
[71.51981354 142.13677979]
[73.56231689 127.27648926]
[70.08269501 112.28886414]
[73.30672455 99.42557526]
[80.88526154 91.16916656]
[89.75915527 88.48156738]
[96.96881866 90.71293640]
[95.21665955 75.81562805]
[83.09621429 66.03131866]
[81.53149414 50.89836121]
[90.93403625 39.40367508]
[89.18186951 24.50636101]
[87.42971039 9.60904789]
[85.67755127 -5.28826571]
[83.92539215 -20.18557930]
[82.17323303 -35.08289337]
[80.42106628 -49.98020554]
[76.29214478 -58.18615723]
[78.78298187 -65.18490601]
[77.32183075 -80.11357117]
[75.86067963 -95.04223633]
[74.39952087 -109.97090149]
[72.93836975 -124.89956665]
[39.37085342 -145.76770020]
[31.32850838 -158.42947388]
[17.39826012 -165.93006897]
[17.10565376 -180.82179260]
[9.06330872 -193.48358154]
[1.02096510 -206.14535522]
[-7.02137899 -218.80714417]
[-14.30184364 -224.40896606]
[-15.09431744 -231.79536438]
[-22.88807678 -244.61164856]
[-30.68183517 -257.42794800]
[-38.47559357 -270.24423218]
[-46.26935577 -283.06051636]
[-61.45478058 -281.52249146]
[-75.80078125 -286.73352051]
[-86.45894623 -297.65899658]
[-91.31309509 -312.12966919]
[-89.39942932 -327.27233887]
[-81.09790802 -340.08044434]
[-68.05680847 -348.01092529]
[-52.86544037 -349.48916626]
[-38.54006958 -344.22164917]
[-27.92500877 -333.25427246]
[-23.12788391 -318.76461792]
[-25.10116768 -303.62960815]
[-33.45306396 -290.85427856]
[-25.65930367 -278.03799438]
[-17.86554527 -265.22171021]
[-10.07178497 -252.40541077]
[-2.27802610 -239.58912659]
[5.64040232 -226.84948730]
[13.68274593 -214.18769836]
[21.72509003 -201.52592468]
[29.76743507 -188.86413574]
[43.12244034 -182.26921082]
[43.99028778 -166.47183228]
[52.03263474 -153.81004333]
[59.49696732 -153.07946777]
[58.50952530 -168.04693604]
[57.36730194 -183.00337219]
[70.64463043 -189.98280334]
[82.31687927 -180.56163025]
[78.29643250 -166.11027527]
[74.42562866 -151.61831665]
[81.88996124 -150.88774109]
[92.23472595 -161.74986267]
[102.57949066 -172.61199951]
[112.92425537 -183.47412109]
[123.26902008 -194.33625793]
[133.61378479 -205.19837952]
[134.66152954 -221.20718384]
[147.91273499 -230.25070190]
[163.20220947 -225.39152527]
[168.80116272 -210.35719299]
[160.41458130 -196.68075562]
[144.47590637 -194.85362244]
[134.13114929 -183.99148560]
[123.78638458 -173.12936401]
[113.44161987 -162.26722717]
[103.09685516 -151.40510559]
[92.75209045 -140.54296875]
[87.86703491 -126.36072540]
[89.32818604 -111.43206024]
[90.78933716 -96.50339508]
[92.25049591 -81.57472992]
[93.71164703 -66.64606476]
[95.31838226 -51.73236465]
[97.07054138 -36.83505249]
[98.82270050 -21.93773842]
[100.57486725 -7.04042625]
[102.32702637 7.85688686]
[104.07918549 22.75419998]
[105.83134460 37.65151215]
[117.64431763 46.65092087]
[119.63347626 61.73395538]
[110.11396790 74.06346130]
[111.86612701 88.96077728]
[120.75379944 101.04421234]
[134.45300293 107.15417480]
[148.15222168 113.26413727]
[161.85142517 119.37409973]
[175.55064392 125.48405457]
[191.79597473 123.24325562]
[201.64421082 136.35600281]
[194.96434021 151.33303833]
[178.62802124 152.76725769]
[169.44067383 139.18327332]
[155.74147034 133.07330322]
[142.04225159 126.96334839]
[128.34304810 120.85338593]
[114.64383698 114.74342346]
[108.08852386 118.38731384]
[107.84465790 133.38533020]
[94.97791290 125.67510223]
[88.42260742 129.31898499]
[86.38010406 144.17927551]
[92.16621399 158.90447998]
[82.76795197 170.45964050]
[80.72545624 185.31993103]
[78.68295288 200.18022156]
[76.64044952 215.04051208]
[74.59795380 229.90080261]
[72.55545044 244.76109314]
[70.51295471 259.62136841]
[78.98802185 277.87512207]
[66.59219360 292.67694092]
[65.13103485 307.60562134]
[63.66988373 322.53427124]
[77.35202789 329.05920410]
[87.97515869 339.87237549]
[94.25649261 353.66806030]
[95.43752289 368.78033447]
[91.37563324 383.38433838]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 155]
[12 154]
[13 153]
[17 151]
[18 150]
[19 149]
[20 148]
[21 147]
[22 146]
[23 145]
[25 143]
[26 142]
[31 124]
[32 123]
[35 120]
[36 119]
[37 118]
[38 117]
[39 116]
[40 115]
[41 114]
[43 113]
[44 112]
[45 111]
[46 110]
[47 109]
[48 84]
[49 83]
[51 81]
[52 80]
[53 79]
[54 78]
[56 77]
[57 76]
[58 75]
[59 74]
[60 73]
[92 108]
[93 107]
[94 106]
[95 105]
[96 104]
[97 103]
[125 138]
[126 137]
[127 136]
[128 135]
[129 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
