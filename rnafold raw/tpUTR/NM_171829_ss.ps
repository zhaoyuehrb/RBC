%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 19:10:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACGGUGGCCAAAUUAAAGUGCUGGCCUUCAGAUGUCUGUGAUUUCUGCAACUGAGGACCUAAUUAUGCCUGUCUGCAAACUAAUAAUGUAAAAGGUAAUAAUUAAAGUAUCAUAUUUUCAUGUGGGAAAAAAUUUAA\
) } def
/len { sequence length } bind def

/coor [
[-31.00712585 245.92787170]
[-42.36352921 255.72746277]
[-53.71992874 265.52706909]
[-65.07633209 275.32666016]
[-65.12239075 296.27203369]
[-80.27258301 310.31323242]
[-100.58447266 308.81250000]
[-111.00976562 319.59735107]
[-121.43505859 330.38220215]
[-131.86035156 341.16708374]
[-142.28564453 351.95193481]
[-137.42465210 366.46502686]
[-139.87648010 381.57287598]
[-149.07769775 393.80380249]
[-162.91394043 400.34729004]
[-178.20573425 399.69964600]
[-191.43914795 392.00967407]
[-199.57324219 379.04452515]
[-200.73884583 363.78347778]
[-194.66812134 349.73339844]
[-182.75607300 340.12289429]
[-167.74000549 337.16036987]
[-153.07051086 341.52664185]
[-142.64521790 330.74179077]
[-132.21992493 319.95690918]
[-121.79463196 309.17205811]
[-111.36933136 298.38720703]
[-114.45201874 289.35693359]
[-113.98376465 279.76812744]
[-109.98767090 270.97506714]
[-102.98812103 264.23547363]
[-93.94232941 260.53067017]
[-84.10958099 260.42288208]
[-74.87593079 263.97027588]
[-63.51952744 254.17066956]
[-52.16312790 244.37106323]
[-40.80672455 234.57147217]
[-46.70927811 216.61816406]
[-44.27831650 197.82778931]
[-33.94872284 181.88665771]
[-17.70907402 171.94029236]
[1.28108287 169.97270203]
[19.30590630 176.41079712]
[29.48480606 165.39308167]
[39.66370392 154.37536621]
[49.84260559 143.35765076]
[60.02150345 132.33993530]
[70.20040131 121.32221985]
[80.37930298 110.30450439]
[90.55819702 99.28679657]
[91.55181122 94.04341888]
[95.45196533 89.75926971]
[101.45470428 88.01446533]
[112.12107086 77.46796417]
[122.78742981 66.92146301]
[133.45379639 56.37496185]
[144.12016296 45.82846069]
[154.78651428 35.28195953]
[152.28817749 11.84782314]
[167.46591187 -5.84945488]
[190.50238037 -6.92762709]
[199.09831238 -19.22030640]
[207.69424438 -31.51298714]
[216.29017639 -43.80566788]
[224.88610840 -56.09834671]
[233.48204041 -68.39102936]
[242.07795715 -80.68370819]
[250.53443909 -93.07273865]
[258.85037231 -105.55654144]
[267.16629028 -118.04034424]
[275.48220825 -130.52415466]
[271.32699585 -143.38917542]
[275.30813599 -156.10481262]
[285.74783325 -164.06648254]
[298.67367554 -164.52798462]
[307.26962280 -176.82066345]
[315.86553955 -189.11334229]
[324.46148682 -201.40603638]
[318.51028442 -215.63934326]
[321.22146606 -230.82659912]
[331.72982788 -242.12164307]
[346.68222046 -245.92022705]
[361.30740356 -241.01025391]
[370.93850708 -228.95848083]
[372.50228882 -213.61058044]
[365.49975586 -199.86399841]
[352.16540527 -192.10525513]
[336.75415039 -192.81010437]
[328.15823364 -180.51742554]
[319.56228638 -168.22473145]
[310.96636963 -155.93205261]
[314.61831665 -139.55456543]
[305.14297485 -125.30014801]
[287.96603394 -122.20822144]
[279.65008545 -109.72441864]
[271.33416748 -97.24061584]
[263.01824951 -84.75681305]
[261.91864014 -77.38402557]
[254.37065125 -72.08777618]
[245.77471924 -59.79509354]
[237.17878723 -47.50241470]
[228.58285522 -35.20973587]
[219.98692322 -22.91705513]
[211.39099121 -10.62437630]
[202.79505920 1.66830373]
[206.85136414 7.82623291]
[209.22908020 14.82958603]
[209.76361084 22.22839355]
[208.40922546 29.54429245]
[205.24266052 36.30144882]
[200.45887756 42.05751801]
[194.35908508 46.43258286]
[187.33184814 49.13423157]
[179.82823181 49.97707748]
[172.33296204 48.89543915]
[165.33302307 45.94832230]
[154.66665649 56.49482346]
[144.00028992 67.04132843]
[133.33393860 77.58782959]
[122.66757202 88.13433075]
[112.00120544 98.68083191]
[101.57591248 109.46569061]
[91.39701080 120.48340607]
[81.21811676 131.50111389]
[71.03921509 142.51882935]
[60.86031723 153.53654480]
[50.68141937 164.55426025]
[40.50252151 175.57197571]
[30.32362175 186.58969116]
[35.92022324 196.50888062]
[38.73090363 207.52960205]
[38.56884384 218.88626099]
[35.45344925 229.79217529]
[29.60841942 239.49398804]
[21.44571114 247.32374573]
[11.53651714 252.74488831]
[0.57129288 255.38900757]
[-10.68834496 255.08082581]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 37]
[2 36]
[3 35]
[4 34]
[7 27]
[8 26]
[9 25]
[10 24]
[11 23]
[43 129]
[44 128]
[45 127]
[46 126]
[47 125]
[48 124]
[49 123]
[50 122]
[53 121]
[54 120]
[55 119]
[56 118]
[57 117]
[58 116]
[61 105]
[62 104]
[63 103]
[64 102]
[65 101]
[66 100]
[67 99]
[68 97]
[69 96]
[70 95]
[71 94]
[75 91]
[76 90]
[77 89]
[78 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
