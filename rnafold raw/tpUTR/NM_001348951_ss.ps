%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 14:16:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUACAACAGAAAAACCUUCACUGUUACAUAAGGUACAGAUAUAAAAUGCAGAAAAAGCAUCAAGAAUUCUGCCUUUUAUUUUAUUUUAUAUUUAAACUUCAGGAAGUUUUCUCUUCAUGGGAUAAUUUAGUACUGCUUUUAUCUAUCAUCUGUCAAUUUCUCUGUAUUCUUAAUAAAAUAAAUAUUGAACUAA\
) } def
/len { sequence length } bind def

/coor [
[140.46551514 246.29711914]
[132.76275635 259.28057861]
[121.84196472 269.70355225]
[108.51350403 276.79263306]
[93.76644897 280.02169800]
[78.69512939 279.15118408]
[64.41793060 274.24566650]
[51.99431610 265.66915894]
[42.34620667 254.05809021]
[36.18955612 240.27410889]
[33.98122025 225.34005737]
[35.88508224 210.36415100]
[41.75985718 196.45768738]
[51.16959763 184.65263367]
[63.41603851 175.82499695]
[77.59041595 170.62983704]
[92.64089203 169.45268250]
[95.53746033 154.73501587]
[98.43402863 140.01733398]
[101.33060455 125.29966736]
[88.74172974 117.14366913]
[76.49327850 125.80249786]
[64.24481964 134.46133423]
[51.99636459 143.12016296]
[49.19440079 158.44291687]
[36.64937592 167.04971313]
[22.05874062 164.28404236]
[15.69023895 179.39610291]
[-0.61289287 181.16809082]
[-10.07938862 167.77713013]
[-2.97093034 152.99871826]
[13.39990997 152.03558350]
[15.65936279 137.35803223]
[27.95768929 128.40226746]
[43.33753586 130.87170410]
[55.58599091 122.21287537]
[67.83444214 113.55404663]
[80.08290100 104.89521027]
[79.17424011 97.45046234]
[77.35691071 82.56095886]
[76.44824982 75.11620331]
[62.47670746 69.65763092]
[48.50516891 64.19905853]
[34.53362656 58.74048233]
[20.56208420 53.28190994]
[6.59054375 47.82333374]
[-9.07907677 50.00818634]
[-18.11807442 38.16986847]
[-32.08961487 32.71129227]
[-46.06115723 27.25271988]
[-60.03269958 21.79414558]
[-74.00424194 16.33557129]
[-87.97578430 10.87699699]
[-98.77829742 21.61131287]
[-113.01523590 27.01774979]
[-128.21995544 26.15961075]
[-141.75814819 19.18557358]
[-151.28424072 7.30393124]
[-155.14778137 -7.42674875]
[-152.67938232 -22.45428848]
[-144.30673218 -35.17507172]
[-131.48040771 -43.38515091]
[-116.42266846 -45.66207886]
[-101.74235535 -41.61136246]
[-89.98291779 -31.93481445]
[-83.18175507 -18.30895424]
[-82.51721191 -3.09454441]
[-68.54566956 2.36402965]
[-54.57412720 7.82260370]
[-40.60258484 13.28117752]
[-26.63104248 18.73975182]
[-12.65950108 24.19832611]
[2.01078081 21.62304306]
[12.04911804 33.85179520]
[26.02065849 39.31036758]
[39.99219894 44.76894379]
[53.96374130 50.22751617]
[67.93527985 55.68608856]
[81.90682220 61.14466476]
[96.88912964 60.41622925]
[110.26523590 53.62802505]
[123.64134216 46.83982086]
[137.01745605 40.05161285]
[150.39355469 33.26340866]
[163.76966858 26.47520447]
[177.14578247 19.68699837]
[190.52188110 12.89879322]
[203.89799500 6.11058712]
[217.27409363 -0.67761809]
[214.64445496 -14.20275784]
[215.61285400 -27.93429184]
[220.10636902 -40.93236160]
[227.81101990 -52.30903625]
[238.19374084 -61.28897095]
[250.53916931 -67.26222992]
[263.99902344 -69.82574463]
[277.65036011 -68.81046295]
[290.55883789 -64.29251862]
[301.84268188 -56.58755493]
[310.73291016 -46.22866440]
[324.32180786 -52.58016586]
[337.91073608 -58.93166733]
[351.44775391 -65.39299011]
[364.93203735 -71.96370697]
[378.41632080 -78.53441620]
[391.90057373 -85.10513306]
[405.38485718 -91.67584991]
[418.86914062 -98.24656677]
[424.10494995 -112.91708374]
[437.87353516 -119.38863373]
[451.82736206 -114.30667877]
[450.00637817 -128.52612305]
[452.66397095 -142.59136963]
[459.52700806 -155.12844849]
[469.91229248 -164.91685486]
[482.79440308 -171.00834656]
[496.90701294 -172.81881714]
[510.86740112 -170.18421936]
[523.31188965 -163.37542725]
[533.02893066 -153.07037354]
[546.61785889 -159.42187500]
[560.20678711 -165.77337646]
[573.79565430 -172.12487793]
[587.38458252 -178.47637939]
[600.97351074 -184.82788086]
[604.09381104 -195.26641846]
[612.28076172 -202.11724854]
[622.66925049 -203.29841614]
[631.79321289 -198.65928650]
[645.58068848 -204.56742859]
[659.36816406 -210.47555542]
[671.54541016 -222.27178955]
[686.25158691 -213.83595276]
[682.21655273 -197.36918640]
[665.27630615 -196.68811035]
[651.48883057 -190.77996826]
[637.70135498 -184.87182617]
[627.29821777 -168.58247375]
[607.32501221 -171.23898315]
[593.73608398 -164.88748169]
[580.14715576 -158.53598022]
[566.55828857 -152.18447876]
[552.96936035 -145.83296204]
[539.38043213 -139.48146057]
[540.96508789 -123.82348633]
[537.08819580 -108.54283905]
[528.20025635 -95.48988342]
[515.35974121 -86.25170898]
[500.10702515 -81.95915985]
[484.27957153 -83.14842987]
[469.79064941 -89.69416809]
[458.39807129 -100.82240295]
[453.80169678 -86.70117950]
[440.22033691 -79.84545135]
[425.43984985 -84.76229095]
[411.95556641 -78.19157410]
[398.47131348 -71.62085724]
[384.98703003 -65.05014038]
[371.50274658 -58.47942734]
[358.01846313 -51.90871429]
[353.37606812 -46.14427185]
[344.26223755 -45.34276199]
[330.67330933 -38.99126053]
[317.08441162 -32.63975906]
[319.35336304 -16.50699425]
[316.53237915 -0.44264245]
[308.88522339 13.98476505]
[297.14749146 25.36293411]
[282.45578003 32.57405472]
[266.23773193 34.90460968]
[250.07325745 32.11596298]
[235.54060364 24.46873283]
[224.06230164 12.69849014]
[210.68620300 19.48669624]
[197.31008911 26.27490044]
[183.93397522 33.06310654]
[170.55787659 39.85131073]
[157.18176270 46.63951874]
[143.80566406 53.42772293]
[130.42955017 60.21592712]
[117.05344391 67.00413513]
[103.67733002 73.79233551]
[119.27366638 79.74562073]
[128.92932129 94.46583557]
[128.10317993 112.96265411]
[116.04827118 128.19624329]
[113.15170288 142.91390991]
[110.25513458 157.63157654]
[107.35856628 172.34925842]
[120.84053040 179.14184570]
[131.98915100 189.32078552]
[139.97711182 202.13073730]
[144.21168518 216.62112427]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 189]
[18 188]
[19 187]
[20 186]
[21 38]
[22 37]
[23 36]
[24 35]
[27 32]
[41 79]
[42 78]
[43 77]
[44 76]
[45 75]
[46 74]
[48 72]
[49 71]
[50 70]
[51 69]
[52 68]
[53 67]
[80 182]
[81 181]
[82 180]
[83 179]
[84 178]
[85 177]
[86 176]
[87 175]
[88 174]
[89 173]
[100 164]
[101 163]
[102 162]
[103 160]
[104 159]
[105 158]
[106 157]
[107 156]
[108 155]
[111 152]
[120 144]
[121 143]
[122 142]
[123 141]
[124 140]
[125 139]
[129 137]
[130 136]
[131 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
