%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 07:12:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAGCAGAAGAGGGAACACUCUUUGUACCCAUUUCUAGCUGCCAGGCUGUUGGCCCACUCAGA\
) } def
/len { sequence length } bind def

/coor [
[161.48303223 151.55184937]
[149.13827515 143.03088379]
[134.26864624 142.16864014]
[127.30661011 127.96157074]
[114.96185303 119.44060516]
[102.61709595 110.91963196]
[90.07004547 102.69944000]
[77.32802582 94.78484344]
[64.58600616 86.87023926]
[51.84398651 78.95563507]
[39.10196686 71.04103088]
[23.29665375 70.33209229]
[16.56775475 57.04408264]
[3.82573605 49.12947845]
[-8.91628265 41.21487427]
[-24.72159767 40.50593567]
[-31.45049667 27.21792793]
[-44.19251633 19.30332375]
[-56.93453598 11.38871956]
[-72.82099915 13.62474442]
[-84.37474060 2.49412870]
[-82.73271942 -13.46467209]
[-69.15454865 -22.00943184]
[-54.05624390 -16.58534050]
[-49.01993179 -1.35329902]
[-36.27791214 6.56130457]
[-23.53589249 14.47590828]
[-8.64197254 14.61874104]
[-1.00167930 28.47285461]
[11.74033928 36.38745880]
[24.48235893 44.30206299]
[39.37627792 44.44489670]
[47.01657104 58.29901123]
[59.75859070 66.21361542]
[72.50061035 74.12821960]
[85.24263000 82.04282379]
[97.98464966 89.95742798]
[106.26184845 91.27947998]
[111.13806915 98.57487488]
[123.48282623 107.09584808]
[135.82759094 115.61681366]
[151.58018494 117.08853149]
[157.65924072 130.68612671]
[170.00399780 139.20709229]
[194.95712280 136.46057129]
[209.09880066 156.49075317]
[223.74542236 159.72752380]
[238.39204407 162.96427917]
[253.03865051 166.20104980]
[269.80932617 163.71498108]
[276.84082031 179.14205933]
[263.96316528 190.16938782]
[249.80189514 180.84765625]
[235.15527344 177.61090088]
[220.50865173 174.37413025]
[205.86204529 171.13737488]
[201.58668518 176.57736206]
[195.90527344 180.58430481]
[189.28271484 182.80694580]
[182.26771545 183.04103088]
[175.44729614 181.24787903]
[169.39761353 177.55924988]
[164.63537598 172.26785278]
[161.57368469 165.80416870]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[4 41]
[5 40]
[6 39]
[7 37]
[8 36]
[9 35]
[10 34]
[11 33]
[13 31]
[14 30]
[15 29]
[17 27]
[18 26]
[19 25]
[46 56]
[47 55]
[48 54]
[49 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
