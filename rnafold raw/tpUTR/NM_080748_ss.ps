%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 14:30:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUGGUUGCCAACUACAUCUGUCCCUUCCCAUCAAUCCCAGCCCAUGUACUAAUAAAAGAAAGUCUUUGAGUA\
) } def
/len { sequence length } bind def

/coor [
[54.72494888 99.48711395]
[57.57982254 84.16895294]
[44.58944321 76.66895294]
[31.59906006 69.16895294]
[18.60867882 61.66895294]
[5.61829853 54.16895294]
[-7.52630186 46.94264984]
[-20.81935501 39.99320602]
[-34.11240768 33.04376602]
[-43.54913330 44.76701355]
[-55.09181976 54.42375183]
[-68.29679871 61.64280701]
[-82.65650177 66.14669800]
[-97.61899567 67.76229858]
[-112.60914612 66.42752075]
[-127.05077362 62.19366837]
[-140.38879395 55.22347260]
[-152.11050415 45.78485107]
[-161.76538086 34.24060059]
[-168.98229980 21.03445435]
[-173.48385620 6.67401791]
[-175.09704590 -8.28873158]
[-173.75984192 -23.27866554]
[-169.52365112 -37.71961212]
[-162.55128479 -51.05649567]
[-153.11077881 -62.77668762]
[-141.56495667 -72.42968750]
[-128.35765076 -79.64447021]
[-113.99648285 -84.14370728]
[-99.03347015 -85.75447083]
[-84.04375458 -84.41484070]
[-69.60349274 -80.17630768]
[-56.26773834 -73.20179749]
[-44.54907608 -63.75938034]
[-34.89794159 -52.21200562]
[-27.68529892 -39.00352478]
[-23.18838310 -24.64163017]
[-21.58004379 -9.67835999]
[-22.92210007 5.31114054]
[-27.16296768 19.75071335]
[-13.86991501 26.70015335]
[-0.57686114 33.64959335]
[7.03188133 33.96563339]
[13.11829853 41.17857361]
[26.10867882 48.67857361]
[39.09906006 56.17857361]
[52.08944321 63.67857361]
[65.07982635 71.17857361]
[75.79391479 61.73566818]
[88.91622925 56.09961700]
[103.14125061 54.83113861]
[117.05374908 58.05643082]
[129.26960754 65.45461273]
[138.57347107 76.28965759]
[144.03974915 89.48360443]
[145.12457275 103.72380829]
[141.72003174 117.59353638]
[154.38494873 125.63093567]
[167.04986572 133.66833496]
[179.71478271 141.70573425]
[192.37971497 149.74313354]
[208.99291992 153.12507629]
[210.34214783 170.02525330]
[194.47593689 176.00018311]
[184.34230042 162.40806580]
[171.67738342 154.37065125]
[159.01246643 146.33325195]
[146.34754944 138.29585266]
[133.68263245 130.25845337]
[121.43027496 139.88529968]
[106.63990021 144.78845215]
[91.06314087 144.38722229]
[76.54479218 138.72914124]
[64.80429077 128.48429871]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 48]
[3 47]
[4 46]
[5 45]
[6 44]
[7 42]
[8 41]
[9 40]
[57 69]
[58 68]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
