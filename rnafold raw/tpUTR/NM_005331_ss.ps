%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:24:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGUGGGUGGGUGGCCGCGGGAUCCCCAGGCGACCUUCCCCGUGUUUGAGUAAAGCCUCUCCCAGGAGCA\
) } def
/len { sequence length } bind def

/coor [
[78.03777313 159.12153625]
[67.23254395 148.71736145]
[62.80513382 134.38565063]
[65.85948944 119.69990540]
[75.63402557 108.32192993]
[89.69090271 103.08879089]
[76.38574219 96.16255951]
[63.08057785 89.23632812]
[47.26698685 89.72718811]
[39.55044937 76.98731995]
[26.24528503 70.06108856]
[12.94012260 63.13486099]
[-0.36503974 56.20863342]
[-16.17862892 56.69948959]
[-23.89517021 43.95962143]
[-37.20033264 37.03339386]
[-50.50549698 30.10716248]
[-63.22757721 33.24182892]
[-74.25666809 26.95011902]
[-77.79870605 15.17905426]
[-90.78908539 7.67905474]
[-103.77946472 0.17905454]
[-120.51972961 -2.50422788]
[-122.57546997 -19.33308029]
[-106.97338867 -25.96717644]
[-96.27946472 -12.81132698]
[-83.28908539 -5.31132650]
[-70.29870605 2.18867350]
[-52.91959763 1.10395074]
[-43.57926559 16.80200005]
[-30.27410316 23.72822952]
[-16.96894073 30.65445900]
[-2.10702515 29.66819000]
[6.56118965 42.90346909]
[19.86635208 49.82970047]
[33.17151260 56.75592804]
[46.47667694 63.68215561]
[61.33859253 62.69588852]
[70.00680542 75.93116760]
[83.31197357 82.85739899]
[96.61713409 89.78362274]
[111.10601807 93.66590881]
[125.23055267 86.53793335]
[137.60821533 94.82302094]
[152.59393311 95.47731018]
[162.28614807 83.50370789]
[176.99838257 79.57896423]
[191.03457642 85.00568390]
[199.08743286 97.50726318]
[214.07315063 98.16155243]
[229.05888367 98.81584167]
[240.54023743 87.95517731]
[256.33587646 88.47757721]
[267.07455444 100.07312012]
[266.38519287 115.86236572]
[254.67675781 126.47783661]
[238.89567566 125.62157440]
[228.40458679 113.80156708]
[213.41886902 113.14727783]
[198.43313599 112.49298859]
[189.32133484 124.24514008]
[174.86558533 128.42787170]
[160.55140686 123.23580933]
[151.93965149 110.46303558]
[136.95391846 109.80874634]
[123.90126801 116.98352814]
[110.45172882 108.65163422]
[120.00904083 120.21267700]
[122.78473663 134.95362854]
[118.08671570 149.19892883]
[107.08639526 159.39662170]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 41]
[7 40]
[8 39]
[10 37]
[11 36]
[12 35]
[13 34]
[15 32]
[16 31]
[17 30]
[20 28]
[21 27]
[22 26]
[42 67]
[44 65]
[45 64]
[49 60]
[50 59]
[51 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
