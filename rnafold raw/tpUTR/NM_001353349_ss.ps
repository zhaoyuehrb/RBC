%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 10:30:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCUGGAGGCCUGACUCUAGGCAGCUGCUCAAGGCCUGUAGACAGAUGGGCCACCAGGCAGGAGCUGCUGCUGGGAUUUGCUUUUGUGGCCUGGUGAGCUAAUAAACACCAAUAACUUCA\
) } def
/len { sequence length } bind def

/coor [
[57.06805420 150.21546936]
[50.70227051 143.98271179]
[45.23293686 136.95016479]
[40.75951004 129.24568176]
[26.64240837 134.31593323]
[12.52530861 139.38618469]
[-1.59179211 144.45645142]
[-11.96434879 156.40301514]
[-26.55783272 153.42317200]
[-40.67493439 158.49342346]
[-54.79203415 163.56367493]
[-68.90913391 168.63392639]
[-83.02623749 173.70417786]
[-97.14333344 178.77442932]
[-111.19453430 184.02455139]
[-125.17754364 189.45368958]
[-129.04351807 199.77697754]
[-137.81277466 206.08503723]
[-148.38774109 206.45187378]
[-157.19696045 200.99900818]
[-171.43893433 205.70707703]
[-185.68092346 210.41514587]
[-196.18180847 223.01132202]
[-212.29252625 219.94912720]
[-217.43974304 204.37870789]
[-206.32844543 192.31756592]
[-190.38899231 196.17317200]
[-176.14700317 191.46510315]
[-161.90502930 186.75703430]
[-150.27061462 171.39866638]
[-130.60667419 175.47067261]
[-116.62366486 170.04154968]
[-111.46728516 164.62464905]
[-102.21359253 164.65733337]
[-88.09648895 159.58708191]
[-73.97938538 154.51683044]
[-59.86228561 149.44657898]
[-45.74518585 144.37632751]
[-31.62808609 139.30606079]
[-22.26527786 127.72215271]
[-6.66204548 130.33934021]
[7.45505524 125.26908875]
[21.57215691 120.19883728]
[35.68925858 115.12858582]
[34.40552521 92.11895752]
[41.10316086 70.06827545]
[54.96720505 51.65961075]
[74.31072235 39.13287354]
[96.78004456 34.01229095]
[119.64116669 36.92091751]
[140.11239624 47.50484467]
[150.51388550 36.69702148]
[160.91537476 25.88919640]
[171.17799377 14.94942284]
[181.30006409 3.87948418]
[191.42214966 -7.19045448]
[201.54421997 -18.26039314]
[211.66630554 -29.33033180]
[221.78837585 -40.40026855]
[231.91046143 -51.47020721]
[242.03253174 -62.54014587]
[251.72317505 -73.98966217]
[260.96817017 -85.80195618]
[270.21313477 -97.61425781]
[279.45812988 -109.42655182]
[288.70309448 -121.23884583]
[297.94808960 -133.05113220]
[294.87908936 -151.65298462]
[306.09313965 -166.41342163]
[324.20819092 -168.37501526]
[332.83798218 -180.64396667]
[333.76229858 -197.01704407]
[348.52386475 -204.16050720]
[361.93719482 -194.72576904]
[360.20385742 -178.41848755]
[345.10693359 -172.01417542]
[336.47714233 -159.74523926]
[340.85833740 -149.06436157]
[339.47219849 -137.48187256]
[332.55273438 -127.94116974]
[321.75497437 -122.92415619]
[309.76037598 -123.80615234]
[300.51541138 -111.99385834]
[291.27041626 -100.18156433]
[282.02545166 -88.36927032]
[272.78045654 -76.55697632]
[263.53546143 -64.74468231]
[263.65090942 -61.10993195]
[261.93621826 -57.24621964]
[258.30789185 -54.05006409]
[253.10247803 -52.41806793]
[242.98039246 -41.34812927]
[232.85832214 -30.27819252]
[222.73623657 -19.20825386]
[212.61416626 -8.13831520]
[202.49208069 2.93162346]
[192.37001038 14.00156212]
[182.24792480 25.07150078]
[180.03054810 32.21392441]
[171.72319031 36.29068375]
[161.32170105 47.09850693]
[150.92022705 57.90633011]
[156.12065125 65.14000702]
[160.30055237 73.00759125]
[163.38391113 81.36602020]
[165.31468201 90.06330109]
[166.05773926 98.94126892]
[165.59957886 107.83849335]
[163.94851685 116.59317780]
[161.13458252 125.04611969]
[157.20895386 133.04360962]
[152.24302673 140.44023132]
[146.32707214 147.10147095]
[139.56869507 152.90618896]
[132.09077454 157.74884033]
[124.02930450 161.54135132]
[115.53087616 164.21478271]
[106.75003052 165.72048950]
[97.84643555 166.03111267]
[88.98200226 165.14099121]
[80.31792450 163.06632996]
[72.01175690 159.84483337]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 44]
[5 43]
[6 42]
[7 41]
[9 39]
[10 38]
[11 37]
[12 36]
[13 35]
[14 34]
[15 32]
[16 31]
[20 29]
[21 28]
[22 27]
[51 102]
[52 101]
[53 100]
[54 98]
[55 97]
[56 96]
[57 95]
[58 94]
[59 93]
[60 92]
[61 91]
[62 87]
[63 86]
[64 85]
[65 84]
[66 83]
[67 82]
[70 77]
[71 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
