%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 00:58:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCUGCCCACAAACCUCAGUGGGUCCUACAGAUCCGGGCUCUCCAGGAAUGAUUGCAGCUGUGUCCUGAAUUCCUGAAGCACGUCUCUGAAUCUGUCCUCCU\
) } def
/len { sequence length } bind def

/coor [
[33.97079086 209.75590515]
[22.52834511 219.45491028]
[21.12543488 223.96769714]
[18.54508781 227.37017822]
[15.31839752 229.41877747]
[11.99982834 230.08210754]
[9.09080315 229.52838135]
[-3.42779565 237.79183960]
[-15.94639397 246.05529785]
[-28.46499252 254.31875610]
[-40.98359299 262.58221436]
[-53.50218964 270.84567261]
[-54.06380463 286.35256958]
[-63.65937424 298.54702759]
[-78.59920502 302.73999023]
[-93.13862610 297.31921387]
[-101.68693542 284.36907959]
[-100.95713806 268.86920166]
[-91.22984314 256.77954102]
[-76.24540710 252.74888611]
[-61.76564407 258.32705688]
[-49.24704742 250.06361389]
[-36.72844696 241.80015564]
[-24.20984840 233.53669739]
[-11.69124985 225.27323914]
[0.82734853 217.00978088]
[12.82935143 208.01246643]
[24.27179527 198.31346130]
[21.89495850 173.45346069]
[37.74657440 153.88092041]
[62.98130035 150.99179077]
[70.28613281 137.89067078]
[77.59096527 124.78955078]
[84.89579773 111.68843079]
[81.03775024 97.72197723]
[88.09398651 85.06671143]
[102.00308228 81.00673676]
[109.30791473 67.90561676]
[109.27062225 52.08445358]
[122.22647858 44.73632812]
[129.53131104 31.63520622]
[136.83615112 18.53408241]
[133.21296692 8.05945969]
[135.98818970 -2.44192076]
[143.98043823 -9.46609116]
[154.31169128 -10.81234455]
[162.38694763 -23.45315933]
[170.46220398 -36.09397507]
[178.53747559 -48.73478699]
[186.61273193 -61.37560272]
[194.68798828 -74.01641846]
[202.76324463 -86.65723419]
[195.00952148 -101.17243195]
[195.58230591 -117.52543640]
[204.23341370 -131.30447388]
[218.54783630 -138.83921814]
[234.61730957 -138.17828369]
[242.31080627 -151.05502319]
[250.00428772 -163.93174744]
[249.70845032 -180.32823181]
[263.89788818 -188.54966736]
[277.97570801 -180.13854980]
[277.45986938 -163.74752808]
[262.88101196 -156.23826599]
[255.18753052 -143.36152649]
[247.49404907 -130.48480225]
[254.95065308 -118.93881989]
[256.67843628 -105.23635101]
[252.27926636 -92.07462311]
[242.56675720 -82.06958008]
[229.41650391 -77.23601532]
[215.40406799 -78.58197021]
[207.32879639 -65.94115448]
[199.25354004 -53.30034256]
[191.17828369 -40.65953064]
[183.10302734 -28.01871490]
[175.02777100 -15.37790012]
[166.95249939 -2.73708582]
[167.67146301 16.48795319]
[149.93727112 25.83891487]
[142.63243103 38.94004059]
[135.32760620 52.04116058]
[135.88739014 66.92524719]
[122.40903473 75.21044922]
[115.10420227 88.31156921]
[118.96224976 102.27802277]
[111.90601349 114.93328857]
[97.99691772 118.99326324]
[90.69208527 132.09439087]
[83.38725281 145.19551086]
[76.08242035 158.29663086]
[80.62555695 163.39334106]
[84.04166412 169.29171753]
[86.19432831 175.74703979]
[86.99945068 182.49253845]
[86.42849731 189.25041199]
[84.50954437 195.74330139]
[81.32586670 201.70567322]
[77.01237488 206.89462280]
[71.74990082 211.09982300]
[65.75760651 214.15205383]
[59.28387451 215.92997742]
[52.59598541 216.36492920]
[45.96911621 215.44366455]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[7 26]
[8 25]
[9 24]
[10 23]
[11 22]
[12 21]
[31 91]
[32 90]
[33 89]
[34 88]
[37 85]
[38 84]
[40 82]
[41 81]
[42 80]
[46 78]
[47 77]
[48 76]
[49 75]
[50 74]
[51 73]
[52 72]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
