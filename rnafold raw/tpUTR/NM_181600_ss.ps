%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 13:19:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUCUAGAUCCUUUUGAGUAUUGGGAUCAAAGUCUCUACUGAAUGCAGCCAUUAUUUUCAUUCUUGCCAGAUCCCAAUAUCUUUUUAUUCUUCCACCACCAGCUUCUUGCAUGACCAACUUCUGGCAGACUGCGAAAUU\
) } def
/len { sequence length } bind def

/coor [
[354.04113770 374.51080322]
[345.78314209 363.70346069]
[339.98641968 351.39202881]
[336.91409302 338.12872314]
[336.70700073 324.50915527]
[339.37725830 311.14553833]
[344.80755615 298.63916016]
[332.73150635 289.74148560]
[320.65545654 280.84378052]
[309.63217163 287.87680054]
[296.83813477 290.72790527]
[283.80801392 289.03265381]
[272.11245728 282.97329712]
[263.16882324 273.25942993]
[258.06933594 261.04507446]
[257.44778442 247.79141235]
[261.40087891 235.09216309]
[249.73320007 225.66534424]
[238.06549072 216.23852539]
[226.29350281 206.94227600]
[214.41868591 197.77775574]
[202.54385376 188.61322021]
[190.66903687 179.44868469]
[178.79421997 170.28416443]
[166.91938782 161.11962891]
[155.04457092 151.95510864]
[143.16975403 142.79057312]
[131.29492188 133.62603760]
[119.42010498 124.46151733]
[99.45042419 133.45637512]
[76.90344238 127.20716858]
[62.69270706 106.76931000]
[47.71596909 105.93421173]
[32.73923492 105.09911346]
[18.35469055 112.97419739]
[4.48487854 104.22431946]
[5.39787149 87.85060883]
[20.15446091 80.69692993]
[33.57433319 90.12237549]
[48.55106735 90.95747375]
[63.52780533 91.79257202]
[69.68985748 78.11671448]
[59.14250183 67.45120239]
[48.59514236 56.78568268]
[38.04778671 46.12016296]
[27.50043106 35.45464706]
[19.16990280 31.51018906]
[16.84020805 24.43205643]
[6.53308487 13.53420067]
[-8.83666897 15.66734219]
[-22.50900078 8.32929325]
[-29.22661972 -5.65831614]
[-26.40646553 -20.91696358]
[-15.13294315 -31.57938957]
[0.25904641 -33.54567337]
[13.85097027 -26.05973816]
[20.41645622 -12.00007820]
[17.43094063 3.22707891]
[27.73806190 14.12493324]
[38.16594696 24.90728951]
[48.71330643 35.57280731]
[59.26066208 46.23832321]
[69.80802155 56.90384293]
[80.35537720 67.56935883]
[93.26742554 63.65665054]
[106.38558197 64.56381989]
[118.01390839 69.93086243]
[126.73490143 78.83689117]
[131.58164978 89.94847870]
[132.14210510 101.71560669]
[128.58464050 112.58669281]
[140.45945740 121.75122070]
[152.33427429 130.91575623]
[164.20910645 140.08027649]
[176.08392334 149.24481201]
[187.95874023 158.40934753]
[199.83357239 167.57386780]
[211.70838928 176.73840332]
[223.58320618 185.90292358]
[235.45803833 195.06745911]
[244.23997498 197.86636353]
[247.49230957 204.57083130]
[259.16000366 213.99765015]
[270.82769775 223.42445374]
[286.13250732 215.79229736]
[303.17837524 215.57769775]
[318.57080078 222.77551270]
[329.26531982 235.90928650]
[333.16973877 252.33378601]
[329.55316162 268.76773071]
[341.62921143 277.66543579]
[353.70526123 286.56311035]
[366.50164795 276.05682373]
[381.54721069 269.17053223]
[397.84225464 266.35604858]
[414.30557251 267.79479980]
[429.84606934 273.38616943]
[443.43527222 282.75451660]
[454.17514038 295.27441406]
[461.35766602 310.11242676]
[464.51132202 326.28247070]
[463.43222046 342.71148682]
[458.19711304 358.31063843]
[470.84051514 366.38186646]
[489.21374512 366.73971558]
[496.75677490 382.54669189]
[509.57681274 390.33425903]
[522.39691162 398.12179565]
[531.43554688 399.92703247]
[535.41308594 406.22836304]
[548.05645752 414.29959106]
[563.30267334 411.10720825]
[576.00988770 419.47268677]
[578.95935059 434.02728271]
[591.60278320 442.09851074]
[606.97961426 438.44784546]
[620.39013672 446.81054688]
[623.87799072 462.22515869]
[615.37396240 475.54647827]
[599.92333984 478.87118530]
[586.69268799 470.22680664]
[583.53155518 454.74191284]
[570.88812256 446.67065430]
[556.44427490 450.12173462]
[543.50708008 442.11645508]
[539.98522949 426.94299316]
[527.34185791 418.87173462]
[514.60931396 410.94186401]
[501.78927612 403.15432739]
[488.96920776 395.36676025]
[477.09512329 397.92770386]
[466.33120728 391.47671509]
[462.76925659 379.02523804]
[450.12588501 370.95401001]
[440.50442505 380.49221802]
[429.08273315 387.79113770]
[416.37268066 392.52026367]
[402.94470215 394.46444702]
[389.40203857 393.53347778]
[376.35366821 389.76638794]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 92]
[8 91]
[9 90]
[17 84]
[18 83]
[19 82]
[20 80]
[21 79]
[22 78]
[23 77]
[24 76]
[25 75]
[26 74]
[27 73]
[28 72]
[29 71]
[32 41]
[33 40]
[34 39]
[42 64]
[43 63]
[44 62]
[45 61]
[46 60]
[48 59]
[49 58]
[103 134]
[104 133]
[106 130]
[107 129]
[108 128]
[110 127]
[111 126]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
