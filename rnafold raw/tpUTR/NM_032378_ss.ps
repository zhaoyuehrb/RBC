%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 13:28:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCUGAGUGUGUGUACGUGCGCGCGUGCGUGAGGCCCUGCCACGAUUAAAGACUGAGACCGGCCCUCUG\
) } def
/len { sequence length } bind def

/coor [
[123.74760437 262.10742188]
[125.66149139 247.07035828]
[132.60568237 233.59616089]
[143.74165344 223.31190491]
[137.92483521 209.48567200]
[125.85751343 200.75474548]
[127.63782501 185.03402710]
[121.82101440 171.20779419]
[116.00420380 157.38156128]
[103.93687439 148.65065002]
[105.71718597 132.92991638]
[90.88390350 132.15528870]
[77.85109711 125.02983093]
[69.19281769 112.96084595]
[66.61911011 98.33202362]
[70.63829803 84.03263855]
[80.45658112 72.88688660]
[74.63976288 59.06065750]
[68.82295227 45.23442459]
[63.00614166 31.40819359]
[56.59484482 24.44616127]
[57.25285339 16.83939171]
[52.05331421 2.76939535]
[46.85377502 -11.30060101]
[34.81255341 -21.56313324]
[37.65840912 -36.18333817]
[31.56134224 -43.42214966]
[32.55517960 -50.99236679]
[27.98309326 -65.27858734]
[14.43683529 -73.87384033]
[12.85424519 -89.83864594]
[24.44935036 -100.92616272]
[40.32737732 -98.63100433]
[48.30806732 -84.71381378]
[42.26931000 -69.85066986]
[46.84139633 -55.56445312]
[51.72840500 -41.38287735]
[63.39772034 -32.12672424]
[60.92377090 -16.50013924]
[66.12331390 -2.43014336]
[71.32284546 11.63985348]
[76.83237457 25.59138107]
[82.64918518 39.41761398]
[88.46599579 53.24384689]
[94.28281403 67.07007599]
[109.11609650 67.84470367]
[122.14890289 74.97016907]
[130.80718994 87.03915405]
[133.38088989 101.66797638]
[129.36169434 115.96736145]
[119.54341888 127.11311340]
[132.02680969 136.83297729]
[129.83042908 151.56474304]
[135.64724731 165.39097595]
[141.46406555 179.21720886]
[153.94743347 188.93707275]
[151.75106812 203.66885376]
[157.56788635 217.49508667]
[172.70668030 216.72534180]
[187.19485474 221.18275452]
[199.28289795 230.32907104]
[207.51109314 243.05984497]
[210.88587952 257.83776855]
[208.99971008 272.87829590]
[202.08035278 286.36526489]
[190.96336365 296.67004395]
[176.99116516 302.54827881]
[161.85096741 303.29013062]
[147.37103271 298.80599976]
[135.29986572 289.63742065]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 58]
[5 57]
[7 55]
[8 54]
[9 53]
[11 51]
[17 45]
[18 44]
[19 43]
[20 42]
[22 41]
[23 40]
[24 39]
[26 37]
[28 36]
[29 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
