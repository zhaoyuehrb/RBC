%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 21:47:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUGAAGGCAAGCUAAACCAGUUCCGGAAGAACCUGCGGGAGUCGCAGCAGCUCUGAUGGGAUGAGAGCUGGGUGCAGACUGUGCUCCCUUUGGUUAUGGACACAUAACUCCUGGGCCAGAGGCUAAAACCCCA\
) } def
/len { sequence length } bind def

/coor [
[84.55963135 127.62525177]
[91.66262817 114.41361237]
[79.09516144 122.60256195]
[66.52770233 130.79150391]
[53.96023941 138.98045349]
[46.62205505 152.99693298]
[31.73472977 153.46258545]
[19.16726685 161.65153503]
[6.59980392 169.84048462]
[6.44499969 181.83479309]
[0.54251331 192.13880920]
[-9.51941490 198.21530151]
[-21.14585114 198.63383484]
[-31.40400696 193.40588379]
[-44.33625412 201.00567627]
[-46.48856735 211.78274536]
[-54.09751511 219.40371704]
[-64.43849945 221.48559570]
[-73.99513245 217.56977844]
[-87.26456451 224.56422424]
[-91.69956207 239.73347473]
[-105.60179901 247.25035095]
[-120.72331238 242.65522766]
[-128.09278870 228.67428589]
[-123.33804321 213.60220337]
[-109.27997589 206.38095093]
[-94.25900269 211.29478455]
[-80.98956299 204.30035400]
[-72.01751709 187.23115540]
[-51.93605804 188.07344055]
[-39.00381088 180.47363281]
[-35.54909134 162.56304932]
[-19.88083458 152.61860657]
[-1.58914518 157.27302551]
[10.97831726 149.08407593]
[23.54578018 140.89512634]
[29.98505592 127.46437836]
[45.77128983 126.41299438]
[58.33875275 118.22405243]
[70.90621185 110.03510284]
[83.47367859 101.84615326]
[88.73039246 87.79741669]
[84.62545013 73.37003326]
[80.52050781 58.94264603]
[76.41555786 44.51526260]
[72.14425659 30.13625145]
[67.70716858 15.80753136]
[63.27007294 1.47881138]
[49.47691345 -10.65789413]
[53.91965103 -27.59558105]
[49.15277863 -41.81799316]
[44.38590622 -56.04040146]
[39.61903381 -70.26280975]
[34.85216522 -84.48522186]
[30.08529282 -98.70763397]
[25.31842232 -112.93003845]
[13.59664154 -123.55596924]
[16.88822746 -138.08232117]
[12.12135601 -152.30473328]
[1.35491443 -165.40129089]
[10.95921516 -179.37246704]
[27.04312706 -174.01112366]
[26.34376526 -157.07159424]
[31.11063766 -142.84919739]
[42.49145889 -133.24053955]
[39.54083252 -117.69691467]
[44.30770111 -103.47450256]
[49.07457352 -89.25209045]
[53.84144592 -75.02967834]
[58.60831833 -60.80727386]
[63.37518692 -46.58486176]
[68.14205933 -32.36245346]
[78.86920929 -26.65137672]
[82.92481232 -14.76975536]
[77.59879303 -2.95828056]
[82.03588867 11.37043953]
[86.47297668 25.69915962]
[91.50158691 31.20749283]
[90.84294128 40.41031647]
[94.94789124 54.83770370]
[99.05283356 69.26509094]
[103.15777588 83.69247437]
[104.90247345 68.79428101]
[116.18700409 58.91201019]
[131.18515015 59.14789200]
[142.15333557 69.38014221]
[143.42864990 84.32582855]
[134.35266113 96.26846313]
[119.60929871 99.04165649]
[134.28630066 102.13773346]
[148.96330261 105.23381042]
[163.64028931 108.32988739]
[178.31729126 111.42596436]
[192.99429321 114.52204132]
[207.67129517 117.61811829]
[222.34829712 120.71419525]
[237.02529907 123.81027222]
[250.16737366 115.44824982]
[265.00784302 118.79718781]
[272.89874268 131.37768555]
[287.57574463 134.47377014]
[302.25274658 137.56983948]
[313.67749023 127.06960297]
[329.09600830 125.32346344]
[342.57955933 133.00286865]
[348.94348145 147.15490723]
[345.74066162 162.33784485]
[334.20269775 172.71353149]
[318.76614380 174.29229736]
[305.36669922 166.46708679]
[299.15667725 152.24684143]
[284.47967529 149.15075684]
[269.80267334 146.05468750]
[257.50259399 154.37594604]
[242.57391357 151.44515991]
[233.92921448 138.48727417]
[219.25221252 135.39118958]
[204.57521057 132.29512024]
[189.89822388 129.19903564]
[175.22122192 126.10296631]
[160.54421997 123.00688934]
[145.86721802 119.91081238]
[131.19021606 116.81473541]
[116.51322174 113.71865845]
[127.90916443 123.47225189]
[138.82096863 133.76460266]
[144.63807678 147.59069824]
[144.36657715 162.58824158]
[138.05287170 176.19474792]
[126.77568817 186.08541870]
[112.46186829 190.57034302]
[97.55705261 188.88320923]
[84.60786438 181.31230164]
[75.82680511 169.15116882]
[72.71420288 154.47767639]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 41]
[3 40]
[4 39]
[5 38]
[7 36]
[8 35]
[9 34]
[14 31]
[15 30]
[19 28]
[20 27]
[42 82]
[43 81]
[44 80]
[45 79]
[46 77]
[47 76]
[48 75]
[50 72]
[51 71]
[52 70]
[53 69]
[54 68]
[55 67]
[56 66]
[58 64]
[59 63]
[89 124]
[90 123]
[91 122]
[92 121]
[93 120]
[94 119]
[95 118]
[96 117]
[97 116]
[100 113]
[101 112]
[102 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
