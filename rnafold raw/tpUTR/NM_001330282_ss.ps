%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 22:12:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUGGGGCAGAGACUUGUUGCAUCUUUGUCCCCAGCAAAGGCUACAUGUUACCUCCUUCAAUUGAUAAUAAACCUUUCUGAGAUGCAGAGGGUCCAGGUCAGA\
) } def
/len { sequence length } bind def

/coor [
[124.61814880 113.79228973]
[110.05402374 110.20255280]
[96.57205200 113.90771484]
[86.35624695 104.36157227]
[71.79211426 100.77184296]
[57.22798920 97.18210602]
[42.66386414 93.59236908]
[33.72085571 101.72437286]
[22.06281853 104.42398071]
[10.68787479 101.11817169]
[2.46241832 92.76299286]
[-0.60110712 81.57101440]
[-14.92191982 77.10846710]
[-29.24273300 72.64591980]
[-44.71991730 75.92729187]
[-54.56903839 64.75392914]
[-68.88985443 60.29138184]
[-83.21066284 55.82883453]
[-98.68784332 59.11020279]
[-108.53697205 47.93684006]
[-122.85778046 43.47429276]
[-129.65000916 44.59758377]
[-135.09922791 42.34660721]
[-137.89379883 38.28568268]
[-151.91905212 32.96660995]
[-165.94429016 27.64753723]
[-179.96954346 22.32846260]
[-193.99478149 17.00938988]
[-208.02001953 11.69031715]
[-223.18092346 16.93689919]
[-236.65791321 8.23342705]
[-238.11259460 -7.74353933]
[-226.42906189 -18.73783875]
[-210.56991577 -16.31558800]
[-202.70095825 -2.33492684]
[-188.67570496 2.98414636]
[-174.65046692 8.30321980]
[-160.62521362 13.62229347]
[-146.59997559 18.94136620]
[-132.57473755 24.26043892]
[-118.39523315 29.15348244]
[-104.07442474 33.61602783]
[-89.62155914 30.01546669]
[-78.74811554 41.50802231]
[-64.42730713 45.97056961]
[-50.10649109 50.43311310]
[-35.65362930 46.83255386]
[-24.78018761 58.32511139]
[-10.45937443 62.78765488]
[3.86143875 67.25019836]
[19.36513710 57.75026321]
[37.23794937 62.51699829]
[46.25359726 79.02824402]
[60.81772614 82.61798096]
[75.38185120 86.20771027]
[89.94597626 89.79744720]
[103.42794800 86.09228516]
[113.64375305 95.63842773]
[128.20788574 99.22815704]
[140.06631470 89.39537048]
[155.26315308 88.44174957]
[167.95739746 96.52384186]
[173.39337158 110.36537933]
[187.95748901 113.95511627]
[202.52162170 117.54485321]
[217.08575439 121.13459015]
[226.30955505 110.49835968]
[239.16957092 104.93418121]
[253.10421753 105.48759460]
[265.36495972 111.99179077]
[273.55841064 123.11188507]
[276.11346436 136.61848450]
[290.56253052 140.64645386]
[305.01159668 144.67443848]
[319.46063232 148.70240784]
[333.90969849 152.73039246]
[343.18908691 152.02482605]
[348.73086548 157.10438538]
[363.05166626 161.56692505]
[377.37246704 166.02947998]
[392.18893433 159.87707520]
[406.16683960 167.75094604]
[408.58352661 183.61093140]
[397.58514404 195.29060364]
[381.60867310 193.83032227]
[372.90994263 180.35029602]
[358.58911133 175.88774109]
[344.26831055 171.42520142]
[329.88174438 167.17945862]
[315.43267822 163.15147400]
[300.98361206 159.12348938]
[286.53454590 155.09552002]
[272.08547974 151.06753540]
[260.89874268 162.62066650]
[245.33570862 167.02743530]
[229.57177734 163.00828552]
[217.88519287 151.55737305]
[213.49601746 135.69871521]
[198.93188477 132.10897827]
[184.36775208 128.51924133]
[169.80363464 124.92951202]
[158.55783081 134.65936279]
[143.56170654 135.91639709]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 59]
[2 58]
[4 56]
[5 55]
[6 54]
[7 53]
[12 50]
[13 49]
[14 48]
[16 46]
[17 45]
[18 44]
[20 42]
[21 41]
[24 40]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
[63 101]
[64 100]
[65 99]
[66 98]
[72 93]
[73 92]
[74 91]
[75 90]
[76 89]
[78 88]
[79 87]
[80 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
