%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 11:30:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGAGAGAGACCUCAUCUUUCAUGCUUGCAAGUGAAAUAUGUUACAGAACAUGCACUUGCCCUAAUAAAAAAUCAGUGAAAUGGUCUCUGGUA\
) } def
/len { sequence length } bind def

/coor [
[61.08648682 408.14752197]
[46.50205994 403.50500488]
[35.75392914 392.60839844]
[31.31193924 377.96163940]
[34.19682693 362.93048096]
[43.74566269 350.96893311]
[57.76420212 344.82571411]
[58.75555801 329.85852051]
[59.74691772 314.89129639]
[60.73827744 299.92410278]
[61.72963715 284.95690918]
[62.72099304 269.98968506]
[63.71235275 255.02249146]
[57.03356552 250.07015991]
[52.91386795 242.73823547]
[52.14011383 234.26795959]
[54.92497635 226.13024902]
[60.85629272 219.77027893]
[68.95616913 216.35093689]
[71.91292572 201.64523315]
[74.86968231 186.93952942]
[77.82643890 172.23384094]
[80.78318787 157.52813721]
[83.73994446 142.82243347]
[65.50663757 130.13899231]
[55.38351440 110.36917114]
[55.75074768 88.16132355]
[66.52199554 68.73702240]
[85.16468811 56.66336441]
[82.69577026 41.86794662]
[80.22685242 27.07252502]
[77.75793457 12.27710629]
[75.28901672 -2.51831317]
[72.82009888 -17.31373215]
[70.35117340 -32.10915375]
[66.75558472 -36.43602371]
[65.45772552 -41.23859024]
[66.22752380 -45.50587845]
[68.44712067 -48.48635101]
[67.45576477 -63.45355606]
[66.46440125 -78.42076111]
[65.47304535 -93.38796234]
[64.48168945 -108.35517120]
[63.49032974 -123.32237244]
[53.92533493 -136.64314270]
[60.92461395 -151.47358704]
[77.28791046 -152.55741882]
[86.18206024 -138.77967834]
[78.45753479 -124.31373596]
[79.44889069 -109.34652710]
[80.44025421 -94.37932587]
[81.43161011 -79.41211700]
[82.42296600 -64.44491577]
[83.41432953 -49.47771072]
[85.14659882 -34.57807159]
[87.61551666 -19.78265190]
[90.08443451 -4.98723221]
[92.55335236 9.80818748]
[95.02227020 24.60360718]
[97.49118805 39.39902496]
[99.96010590 54.19444656]
[108.99483490 55.08626938]
[117.67621613 57.74243546]
[125.66322327 62.05860901]
[132.64210510 67.86523438]
[138.33869934 74.93420410]
[142.52925110 82.98783875]
[145.04910278 91.70976257]
[145.79931641 100.75734711]
[144.75038147 109.77518463]
[141.94351196 118.40901947]
[137.48898315 126.31969452]
[131.56176758 133.19645691]
[124.39472198 138.76916504]
[116.26937866 142.81889343]
[107.50492096 145.18656921]
[98.44564819 145.77919006]
[95.48889160 160.48489380]
[92.53213501 175.19059753]
[89.57537842 189.89628601]
[86.61862183 204.60198975]
[83.66186523 219.30769348]
[92.74481201 239.67060852]
[78.67955780 256.01385498]
[77.68820190 270.98104858]
[76.69683838 285.94827271]
[75.70548248 300.91546631]
[74.71411896 315.88265991]
[73.72276306 330.84988403]
[72.73140717 345.81707764]
[85.81723022 353.75558472]
[93.70502472 366.87200928]
[94.58221436 382.15237427]
[88.24723816 396.08529663]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 90]
[8 89]
[9 88]
[10 87]
[11 86]
[12 85]
[13 84]
[19 82]
[20 81]
[21 80]
[22 79]
[23 78]
[24 77]
[29 61]
[30 60]
[31 59]
[32 58]
[33 57]
[34 56]
[35 55]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
[44 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
