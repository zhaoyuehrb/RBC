%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 06:44:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUGCCCACCCACUCCCACACCUAGCCCAGAAUGCUGUAGGCCACUAGGCGCAGGGGCAUCUCUCCCCUGCUCCAGCGCAUCUCCCGGGCUGGCCACCUCCUUGACCAGCAUAUCUGUUUUCUGAUUGCGCUCUUCACAAUUAAAGGCCUCCUGCAAACCUUU\
) } def
/len { sequence length } bind def

/coor [
[75.54738617 368.70642090]
[69.89851379 382.63153076]
[62.28224564 395.58569336]
[52.86093140 407.29281616]
[41.83538437 417.50335693]
[29.44061279 425.99966431]
[15.94081211 432.60067749]
[1.62373257 437.16564941]
[-13.20545769 439.59732056]
[-28.23067284 439.84384155]
[-43.13164902 437.89993286]
[-57.59077454 433.80706787]
[-71.29984283 427.65243530]
[-83.96665955 419.56729126]
[-95.32121277 409.72393799]
[-105.12149811 398.33215332]
[-113.15860748 385.63479614]
[-119.26123047 371.90252686]
[-123.29930115 357.42800903]
[-125.18673706 342.51977539]
[-124.88330841 327.49557495]
[-122.39548492 312.67572021]
[-117.77629852 298.37603760]
[-111.12419891 284.90133667]
[-102.58097839 272.53884888]
[-92.32874298 261.55206299]
[-80.58601379 252.17515564]
[-67.60308838 244.60803223]
[-53.65670013 239.01194763]
[-39.04411697 235.50621033]
[-24.07680321 234.16552734]
[-9.07379246 235.01847839]
[5.64512587 238.04689026]
[19.76621819 243.18621826]
[26.89220619 229.98695374]
[34.01819229 216.78770447]
[33.25604630 201.91261292]
[46.62047577 193.44487000]
[45.85832977 178.56977844]
[59.22275925 170.10203552]
[66.34874725 156.90278625]
[73.47473145 143.70353699]
[80.60072327 130.50428772]
[87.72670746 117.30502319]
[74.40940857 124.20789337]
[61.06927872 117.34925842]
[58.93451691 102.50194550]
[69.80192566 92.16272736]
[84.52462006 95.03404236]
[73.96862793 84.37707520]
[58.75991440 80.01753235]
[55.30039215 65.53026581]
[44.74439621 54.87329865]
[34.18840408 44.21632767]
[23.63240814 33.55936050]
[13.07641506 22.90239143]
[2.52042031 12.24542332]
[-8.03557396 1.58845425]
[-23.60400772 3.05742240]
[-36.44492340 -5.86697865]
[-40.49523163 -20.97091866]
[-33.84249878 -35.12277985]
[-19.62794685 -41.64048767]
[-4.56324816 -37.44657516]
[4.23850489 -24.52128410]
[2.62139440 -8.96753979]
[13.17738914 1.68942845]
[23.73338318 12.34639740]
[34.28937912 23.00336647]
[44.84537125 33.66033554]
[55.40136719 44.31730270]
[65.95735931 54.97427368]
[80.41104126 58.57155609]
[84.62559509 73.82108307]
[95.18159485 84.47805023]
[110.17547607 84.90638733]
[121.32264709 74.86943054]
[132.46981812 64.83247375]
[143.61698914 54.79551315]
[154.76416016 44.75855255]
[165.91133118 34.72159576]
[176.96244812 24.57897186]
[187.91651917 14.33160305]
[184.72181702 -4.49075317]
[193.39987183 -21.32826042]
[210.31478882 -29.51752853]
[228.61192322 -25.93903351]
[238.96310425 -36.79504395]
[249.31428528 -47.65105438]
[259.24465942 -58.89327240]
[268.73986816 -70.50539398]
[278.23504639 -82.11752319]
[287.73022461 -93.72964478]
[297.22543335 -105.34176636]
[299.97134399 -120.92286682]
[314.01763916 -125.87776947]
[323.51281738 -137.48989868]
[321.68646240 -153.18829346]
[331.56085205 -165.52815247]
[347.27770996 -167.18841553]
[359.51245117 -157.18411255]
[361.00646973 -141.45059204]
[350.87335205 -129.32228088]
[335.12493896 -127.99470520]
[325.62976074 -116.38258362]
[323.56298828 -101.63206482]
[308.83755493 -95.84658051]
[299.34234619 -84.23445892]
[289.84716797 -72.62233734]
[280.35198975 -61.01021194]
[270.85681152 -49.39808655]
[271.03033447 -46.55699158]
[270.06298828 -43.47503662]
[267.85681152 -40.59615326]
[264.47976685 -38.39149857]
[260.17028809 -37.29986954]
[249.81912231 -26.44385910]
[239.46792603 -15.58784866]
[243.53309631 -5.11750221]
[243.37524414 6.16468334]
[238.97880554 16.61207962]
[230.94964600 24.68542862]
[220.43188477 29.17961311]
[208.94490051 29.40343666]
[198.16387939 25.28566360]
[187.20982361 35.53303146]
[184.46096802 42.43032074]
[175.94830322 45.86876678]
[164.80111694 55.90572739]
[153.65394592 65.94268799]
[142.50677490 75.97964478]
[131.35960388 86.01660156]
[120.21243286 96.05356598]
[134.40420532 91.19623566]
[149.38195801 92.01283264]
[162.96153259 98.38427734]
[173.16264343 109.38143158]
[178.49768066 123.40061188]
[178.18864441 138.39743042]
[172.28062439 152.18493652]
[161.63516235 162.75251770]
[147.80464172 168.55915833]
[132.80596924 168.75805664]
[118.82633972 163.32022095]
[107.90438080 153.03865051]
[101.63281250 139.41265869]
[100.92596436 124.43101501]
[93.79997253 137.63026428]
[86.67398834 150.82952881]
[79.54799652 164.02877808]
[72.42201233 177.22802734]
[72.67446136 193.04722595]
[59.81972885 200.57086182]
[60.07217789 216.39006042]
[47.21744537 223.91369629]
[40.09146118 237.11294556]
[32.96547318 250.31219482]
[45.00947952 259.29882812]
[55.61660767 269.94342041]
[64.56076050 282.01901245]
[71.65129852 295.26821899]
[76.73708344 309.40869141]
[79.70971680 324.13897705]
[80.50582886 339.14511108]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[34 157]
[35 156]
[36 155]
[38 153]
[40 151]
[41 150]
[42 149]
[43 148]
[44 147]
[49 75]
[50 74]
[52 72]
[53 71]
[54 70]
[55 69]
[56 68]
[57 67]
[58 66]
[76 133]
[77 132]
[78 131]
[79 130]
[80 129]
[81 128]
[82 126]
[83 125]
[87 118]
[88 117]
[89 116]
[90 111]
[91 110]
[92 109]
[93 108]
[94 107]
[96 105]
[97 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
