%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 09:53:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCUGGUGGCCAGAGCAGGGUGGAAGACCCUAGUCAAAGUCCCUGUGGAGAGAACGGCCCAUUCCAAGGGCAGGAGGAUAUU\
) } def
/len { sequence length } bind def

/coor [
[91.85223389 129.80125427]
[80.37854004 125.34940338]
[70.27310181 136.43453979]
[60.16766739 147.51966858]
[50.06223297 158.60481262]
[39.95679855 169.68994141]
[29.85136414 180.77507019]
[19.74592972 191.86021423]
[13.54347324 207.63885498]
[-3.33555412 206.04676819]
[-6.47825813 189.38664246]
[8.66079521 181.75477600]
[18.76622963 170.66964722]
[28.87166405 159.58450317]
[38.97710037 148.49937439]
[49.08253479 137.41424561]
[59.18796921 126.32910156]
[69.29340363 115.24397278]
[65.72437286 100.67475891]
[51.63954926 95.51551819]
[37.55472565 90.35628510]
[23.46989822 85.19705200]
[9.38507366 80.03781891]
[-5.71518326 85.45647430]
[-19.29027367 76.90682220]
[-20.92654991 60.94743347]
[-9.36880112 49.82098007]
[6.51685762 52.06272507]
[14.54430771 65.95299530]
[28.62913322 71.11222839]
[42.71395874 76.27146149]
[56.79878235 81.43069458]
[70.88360596 86.58992767]
[95.77247620 71.74168396]
[118.71926117 83.29459381]
[132.38459778 77.10924530]
[146.04994202 70.92390442]
[146.27268982 54.76912308]
[153.44026184 40.35413742]
[166.09550476 30.49732399]
[181.71391296 27.10167313]
[197.20709229 30.78754044]
[209.53352356 40.78001404]
[222.96096802 34.09393692]
[236.38842773 27.40786171]
[249.81587219 20.72178650]
[256.29223633 13.93343163]
[263.86529541 14.04708767]
[277.53063965 7.86174250]
[291.19598389 1.67639768]
[304.86132812 -4.50894690]
[318.52667236 -10.69429207]
[327.90841675 -23.43373489]
[342.69375610 -21.63305092]
[346.73687744 -36.73891830]
[359.57354736 -45.66942978]
[375.14266968 -44.20787430]
[386.09301758 -33.04434967]
[387.25411987 -17.44993401]
[378.07778931 -4.78783226]
[362.89678955 -1.03670144]
[348.87911987 -7.96771145]
[340.47479248 4.32931566]
[324.71200562 2.97104788]
[311.04666138 9.15639305]
[297.38134766 15.34173775]
[283.71600342 21.52708244]
[270.05065918 27.71242714]
[256.50195312 34.14923477]
[243.07449341 40.83531189]
[229.64704895 47.52138519]
[216.21960449 54.20746231]
[217.07176208 68.17952728]
[212.47735596 81.44826508]
[203.10961914 91.96685791]
[190.38085938 98.09911346]
[176.22952271 98.87395477]
[162.82504272 94.13903046]
[152.23529053 84.58924103]
[138.56994629 90.77458191]
[124.90460968 96.95993042]
[125.29701233 107.01099396]
[121.61814880 116.85395813]
[114.11725616 124.84164429]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 18]
[3 17]
[4 16]
[5 15]
[6 14]
[7 13]
[8 12]
[19 33]
[20 32]
[21 31]
[22 30]
[23 29]
[35 81]
[36 80]
[37 79]
[43 72]
[44 71]
[45 70]
[46 69]
[48 68]
[49 67]
[50 66]
[51 65]
[52 64]
[54 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
