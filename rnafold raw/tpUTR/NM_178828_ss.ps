%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 17:33:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAGACCAGUCUUCUUGCAUGUCUCCUGGGGGAGACAGGGGGUUCUACUCAAAUAAAACUGAUGCCUACACAA\
) } def
/len { sequence length } bind def

/coor [
[146.04086304 336.58917236]
[137.05055237 324.45034790]
[131.84562683 310.26989746]
[130.84799194 295.19735718]
[134.13854980 280.45458984]
[141.45054626 267.23672485]
[152.19120789 256.61532593]
[165.48986816 249.45133972]
[162.37118530 234.77912903]
[159.25251770 220.10690308]
[156.13383484 205.43469238]
[133.27711487 199.61820984]
[117.11481476 182.31285095]
[112.83759308 158.92797852]
[121.89916992 136.84849548]
[112.09786224 125.49356842]
[102.29655457 114.13864136]
[89.15684509 109.35955811]
[86.34851837 95.66266632]
[78.12286377 91.03562927]
[76.38668060 83.62087250]
[67.06946564 71.86547089]
[57.75225067 60.11006927]
[48.43503189 48.35466766]
[39.11781693 36.59926605]
[29.80060005 24.84386635]
[20.48338318 13.08846378]
[5.04495668 7.55790997]
[2.38196898 -8.62357712]
[15.23387337 -18.80987167]
[30.37973213 -12.52218628]
[32.23878479 3.77124691]
[41.55599976 15.52664852]
[50.87321854 27.28205109]
[60.19043350 39.03745270]
[69.50765228 50.79285431]
[78.82486725 62.54825592]
[88.14208221 74.30365753]
[97.70344543 85.86135864]
[110.84315491 90.64044189]
[113.65148163 104.33733368]
[123.45278931 115.69226074]
[133.25410461 127.04718781]
[141.18212891 123.43769073]
[149.67140198 121.52309418]
[158.36416626 121.38049316]
[166.89486694 123.01240540]
[174.90545654 126.34678650]
[182.06045532 131.24020386]
[188.06094360 137.48403931]
[192.65715027 144.81330872]
[195.65875244 152.91798401]
[196.94282532 161.45608521]
[196.45880127 170.06805420]
[194.23054504 178.39198303]
[190.35508728 186.07875061]
[184.99850464 192.80673218]
[178.38877869 198.29518127]
[170.80604553 202.31602478]
[173.92472839 216.98823547]
[177.04339600 231.66044617]
[180.16207886 246.33265686]
[195.22485352 247.46823120]
[209.35707092 252.80276489]
[221.41308594 261.90380859]
[230.41557312 274.03359985]
[235.63475037 288.20883179]
[236.64752197 303.28036499]
[233.37178040 318.02639771]
[226.07307434 331.25158691]
[215.34307861 341.88381958]
[202.05162048 349.06112671]
[187.27619934 352.20175171]
[172.21456909 351.05105591]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 62]
[9 61]
[10 60]
[11 59]
[15 43]
[16 42]
[17 41]
[19 39]
[21 38]
[22 37]
[23 36]
[24 35]
[25 34]
[26 33]
[27 32]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
