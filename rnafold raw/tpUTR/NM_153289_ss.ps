%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:14:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCUGGUGAUUACCAUUCUCAAGCUCUCUGGGCACAGAGACCUGCUGUCAACCCCCCUCAUUAAAAUUCAUGUGCCUGCUAC\
) } def
/len { sequence length } bind def

/coor [
[78.68443298 183.92861938]
[67.12227631 192.25532532]
[53.43027878 196.08808899]
[39.28544998 194.97898865]
[26.41288948 189.08401489]
[15.80628777 199.69061279]
[5.19968605 210.29721069]
[-5.40691566 220.90382385]
[-9.12636852 236.87559509]
[-24.89454079 241.38079834]
[-36.49048996 229.78485107]
[-31.98529625 214.01667786]
[-16.01351738 210.29721069]
[-5.40691566 199.69061279]
[5.19968605 189.08401489]
[15.80628777 178.47741699]
[9.53709030 164.04731750]
[9.23473549 148.27891541]
[14.97387886 133.54791260]
[25.91675568 122.08478546]
[40.43534470 115.63710022]
[56.35354614 115.20309448]
[71.27331543 120.87725067]
[81.47590637 109.88147736]
[91.67849731 98.88569641]
[91.54998016 96.08893585]
[92.40568542 93.15077972]
[94.30423737 90.42366791]
[97.17842865 88.27716064]
[100.83196259 87.05361938]
[104.95159912 87.02412415]
[117.02056885 78.11682129]
[129.08953857 69.20951843]
[141.15850830 60.30221558]
[153.22746277 51.39491272]
[165.29643250 42.48760986]
[177.36540222 33.58030701]
[189.26570129 24.44888496]
[200.99317932 15.09653854]
[208.97364807 2.39567566]
[212.31146240 -12.22824287]
[215.64927673 -26.85216141]
[208.36569214 -41.14652634]
[215.13116455 -55.69328308]
[230.75578308 -59.33340073]
[243.25370789 -49.27449417]
[243.03758240 -33.23289490]
[230.27320862 -23.51434708]
[226.93539429 -8.89042854]
[223.59757996 5.73348951]
[235.94607544 -2.78205681]
[250.27714539 -7.21156645]
[265.27700806 -7.14897680]
[279.57061768 -2.60002542]
[291.84762573 6.01827574]
[300.98257446 17.91586685]
[306.13803101 32.00206757]
[306.84143066 46.98556900]
[303.02822876 61.49279404]
[295.04803467 74.19383240]
[283.63238525 83.92436218]
[269.82778931 89.79234314]
[254.89976501 91.25986481]
[240.21676636 88.19239044]
[227.12481689 80.87110901]
[216.82411194 69.96720123]
[210.25891113 56.48023224]
[208.03108215 41.64659500]
[210.34552002 26.82401085]
[198.61804199 36.17635727]
[195.27070618 42.97455978]
[186.27270508 45.64927292]
[174.20373535 54.55657578]
[162.13476562 63.46387863]
[150.06581116 72.37118530]
[137.99684143 81.27848816]
[125.92787170 90.18579102]
[113.85890198 99.09309387]
[102.67427063 109.08828735]
[92.47167969 120.08406830]
[82.26908875 131.07984924]
[88.62370300 143.96705627]
[90.15381622 158.22386169]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 16]
[6 15]
[7 14]
[8 13]
[23 81]
[24 80]
[25 79]
[31 78]
[32 77]
[33 76]
[34 75]
[35 74]
[36 73]
[37 72]
[38 70]
[39 69]
[40 50]
[41 49]
[42 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
