%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:38:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCCUGCCCUAGUCCCCCACCUUUGACUUAAGAUCCCACACCUCACAAACCUACAGCCCAGAAACCAGAAGCCCCUAUAGAGGCCCCAGUCCCAACUCCAGUAAAGACACUCUUGUCCUUGGA\
) } def
/len { sequence length } bind def

/coor [
[-83.03396606 187.09892273]
[-93.62770844 203.13839722]
[-106.99336243 216.94831848]
[-122.67213440 228.05654907]
[-140.12620544 236.08366394]
[-158.75714111 240.75590515]
[-177.92643738 241.91448975]
[-196.97735596 239.52107239]
[-215.25752258 233.65892029]
[-232.14112854 224.53012085]
[-247.05049133 212.44853210]
[-259.47570801 197.82901001]
[-272.33859253 205.54560852]
[-285.20150757 213.26219177]
[-298.06439209 220.97879028]
[-297.72683716 236.33396912]
[-305.12619019 249.79299927]
[-318.27200317 257.73547363]
[-333.62817383 258.02490234]
[-347.06393433 250.58340454]
[-354.96517944 237.41275024]
[-355.20645142 222.05575562]
[-347.72290039 208.64337158]
[-334.52752686 200.78347778]
[-319.16986084 200.59033203]
[-305.78100586 208.11589050]
[-292.91809082 200.39929199]
[-280.05520630 192.68270874]
[-267.19229126 184.96611023]
[-271.89355469 174.20994568]
[-275.34884644 162.99024963]
[-277.51367188 151.45082092]
[-278.36007690 139.73960876]
[-277.87692261 128.00677490]
[-276.07019043 116.40277863]
[-272.96282959 105.07646942]
[-268.59445190 94.17315674]
[-263.02084351 83.83274078]
[-256.31332397 74.18794250]
[-248.55770874 65.36256409]
[-239.85325623 57.46993637]
[-230.31143188 50.61144638]
[-220.05448914 44.87523270]
[-209.21382141 40.33505630]
[-197.92837524 37.04935074]
[-186.34278870 35.06047440]
[-174.60560608 34.39416122]
[-162.86734009 35.05918121]
[-151.27850342 37.04724503]
[-139.98776245 40.33308029]
[-129.13996887 44.87477493]
[-118.87432098 50.61429977]
[-109.32257843 57.47825623]
[-100.60736084 65.37881470]
[-92.84059143 74.21482086]
[-86.12203217 83.87313080]
[-80.53804016 94.23000336]
[-76.16041565 105.15275574]
[-73.04551697 116.50138855]
[-58.18859482 114.43453979]
[-43.33167648 112.36768341]
[-28.47475243 110.30082703]
[-19.72720909 98.30016327]
[-4.68962049 95.99243164]
[7.83847380 105.24903107]
[22.69539452 103.18217468]
[34.23514175 93.76498413]
[48.96980667 99.52695465]
[63.82672882 97.46009827]
[78.68364716 95.39324188]
[87.10536957 74.43429565]
[114.57755280 67.67661285]
[125.38218689 57.27181244]
[136.18682861 46.86701584]
[133.91542053 31.51708412]
[141.13011169 17.77925301]
[155.05668640 10.93599987]
[170.34008789 13.61869240]
[181.10356140 24.79578209]
[183.20831299 40.16944885]
[175.84503174 53.82820511]
[161.84503174 60.51998138]
[146.59162903 57.67164993]
[135.78698730 68.07644653]
[124.98235321 78.48124695]
[126.75609589 85.76848602]
[141.33062744 82.22124481]
[144.87763977 96.79583740]
[130.30357361 100.34296417]
[132.07731628 107.63020325]
[146.45515442 111.90548706]
[160.83297729 116.18077850]
[173.14367676 106.92048645]
[188.36862183 106.68747711]
[200.66595459 115.36154938]
[205.44046021 129.44494629]
[219.81828308 133.72023010]
[235.63388062 129.38444519]
[247.10478210 141.10411072]
[242.43069458 156.82304382]
[226.41995239 160.37095642]
[215.54299927 148.09805298]
[201.16517639 143.82276917]
[189.47129822 153.00924683]
[174.43247986 153.55484009]
[161.80847168 145.04084778]
[156.55769348 130.55860901]
[142.17985535 126.28331757]
[127.80203247 122.00802612]
[107.35607910 130.02038574]
[89.23767853 124.06121063]
[80.75050354 110.25016785]
[65.89357758 112.31701660]
[51.03665924 114.38387299]
[38.43424606 123.94889832]
[24.76224899 118.03910065]
[9.90532875 120.10594940]
[0.37956133 132.43061829]
[-14.71691322 134.31506348]
[-26.40789986 125.15775299]
[-41.26482010 127.22460175]
[-56.12174225 129.29145813]
[-70.97866058 131.35830688]
[-71.51082611 150.58387756]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 29]
[13 28]
[14 27]
[15 26]
[59 123]
[60 122]
[61 121]
[62 120]
[65 117]
[66 116]
[68 114]
[69 113]
[70 112]
[72 85]
[73 84]
[74 83]
[90 109]
[91 108]
[92 107]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
