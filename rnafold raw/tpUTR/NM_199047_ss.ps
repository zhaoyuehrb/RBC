%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 01:56:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUAUCAUUCAGCAUCUCACAUUAUUCUGGUUUGAAUAUGUCCAUAAGCCCAGCACAGAAACAGCUGGAUUCUUCUACGUUUAAUUGUAGAUGUUACAAGUACGUUACUUAUUAAAGGGCGACUCUGUGUAAGUAACCUAAGAAACGAAGAAAAAUUCUUAUUCAA\
) } def
/len { sequence length } bind def

/coor [
[48.70652771 159.82379150]
[37.90345001 170.23020935]
[27.10037231 180.63662720]
[16.29729271 191.04304504]
[5.49421453 201.44946289]
[-5.30886459 211.85588074]
[-16.01417160 222.36283875]
[-26.62077332 232.96945190]
[-30.95078278 250.84747314]
[-48.03830719 254.76681519]
[-58.44472122 265.56988525]
[-68.85113525 276.37298584]
[-79.25755310 287.17605591]
[-83.25913239 302.48284912]
[-97.66126251 306.28125000]
[-108.06768036 317.08435059]
[-105.22162628 332.33816528]
[-111.91549683 346.33715820]
[-125.57535553 353.69842529]
[-140.94869995 351.59136963]
[-152.12419128 340.82623291]
[-154.80459595 325.54238892]
[-147.95925903 311.61685181]
[-134.22035217 304.40423584]
[-118.87075806 306.67791748]
[-108.46434021 295.87484741]
[-105.20709991 281.34075928]
[-90.06063080 276.76965332]
[-79.65421295 265.96655273]
[-69.24780273 255.16348267]
[-58.84138489 244.36039734]
[-58.74647522 232.23814392]
[-50.12873077 223.15052795]
[-37.22737503 222.36283875]
[-26.62077332 211.75624084]
[-24.10408783 204.77388000]
[-15.71528053 201.05279541]
[-4.91220140 190.64637756]
[5.89087725 180.23995972]
[16.69395638 169.83355713]
[27.49703407 159.42713928]
[38.30011368 149.02072144]
[32.11098099 140.01234436]
[27.22778893 130.23428345]
[23.74446869 119.87462616]
[21.72802734 109.13265228]
[21.21725655 98.21499634]
[22.22197914 87.33168030]
[24.72286987 76.69205475]
[28.67181778 66.50078583]
[33.99286270 56.95392609]
[22.26539040 47.60157776]
[10.53791809 38.24922943]
[-1.18955433 28.89688301]
[-12.91702652 19.54453659]
[-27.49657631 24.58836937]
[-42.48316956 20.92701149]
[-53.09463882 9.72878551]
[-55.94490433 -5.43299389]
[-50.12445450 -19.72025681]
[-37.49057388 -28.57399178]
[-22.07468987 -29.16900253]
[-8.79595280 -21.31542397]
[-1.89156055 -7.51930523]
[-3.56467962 7.81706381]
[8.16279221 17.16941071]
[19.89026451 26.52175713]
[31.61773682 35.87410355]
[43.34521103 45.22645187]
[49.98685837 39.10178375]
[57.28588486 33.77756500]
[65.14633942 29.32377052]
[73.46491241 25.79894829]
[82.13227081 23.24942398]
[91.03447723 21.70870972]
[90.75399017 6.71133184]
[90.47351074 -8.28604507]
[90.19302368 -23.28342247]
[89.91254425 -38.28079987]
[89.63205719 -53.27817917]
[78.07727814 -64.06069183]
[77.61470795 -79.85820770]
[88.51878357 -91.29834747]
[104.32031250 -91.59386444]
[115.64452362 -80.56945038]
[115.77296448 -64.76567841]
[104.62944031 -53.55866241]
[104.90991974 -38.56128311]
[105.19039917 -23.56390572]
[105.47088623 -8.56652832]
[105.75136566 6.43084908]
[106.03185272 21.42822647]
[113.43122864 22.35008812]
[120.71035004 23.96718979]
[127.80403900 26.26505470]
[134.64878845 29.22310829]
[141.18330383 32.81486511]
[147.34907532 37.00816345]
[153.09092712 41.76546478]
[158.35740662 47.04417038]
[163.10139465 52.79701996]
[167.28039551 58.97249985]
[170.85699463 65.51531982]
[173.79917908 72.36690521]
[176.08059692 79.46589661]
[190.86866760 76.95330811]
[205.65672302 74.44071198]
[220.44479370 71.92812347]
[235.23286438 69.41552734]
[250.02091980 66.90293121]
[264.80899048 64.39034271]
[279.59704590 61.87774658]
[294.38513184 59.36515427]
[300.87915039 47.53662872]
[312.83157349 41.70522690]
[325.76654053 43.80466843]
[334.98272705 52.84428024]
[349.81518555 50.60864639]
[364.64764404 48.37301254]
[379.48010254 46.13737869]
[394.24118042 37.79787064]
[406.34103394 49.67346191]
[398.27914429 64.58795166]
[381.71575928 60.96984100]
[366.88330078 63.20547485]
[352.05081177 65.44110870]
[337.21835327 67.67674255]
[327.83969116 81.61403656]
[310.95391846 84.53328705]
[296.89770508 74.15322113]
[282.10964966 76.66580963]
[267.32159424 79.17840576]
[252.53352356 81.69100189]
[237.74545288 84.20359039]
[222.95738220 86.71618652]
[208.16932678 89.22877502]
[193.38125610 91.74137115]
[178.59318542 94.25396729]
[173.08322144 129.47456360]
[152.61685181 158.66322327]
[161.52415466 170.73219299]
[170.43145752 182.80114746]
[179.33876038 194.87011719]
[188.24606323 206.93908691]
[197.15336609 219.00805664]
[212.27148438 216.62033081]
[226.76380920 221.54283142]
[237.30012512 232.64439392]
[241.45925903 247.37396240]
[238.28546143 262.34680176]
[228.50805664 274.12222290]
[214.37382507 279.99438477]
[199.13070679 278.61386108]
[186.28144836 270.29788208]
[178.77873230 256.95742798]
[178.34661865 241.65802002]
[185.08439636 227.91535950]
[176.17709351 215.84638977]
[167.26979065 203.77742004]
[158.36248779 191.70845032]
[149.45518494 179.63949585]
[140.54788208 167.57052612]
[127.90876770 173.69537354]
[114.38310242 177.47924805]
[100.40055847 178.80194092]
[86.40528870 177.62145996]
[72.84185791 173.97528076]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[4 39]
[5 38]
[6 37]
[7 35]
[8 34]
[10 31]
[11 30]
[12 29]
[13 28]
[15 26]
[16 25]
[51 69]
[52 68]
[53 67]
[54 66]
[55 65]
[75 92]
[76 91]
[77 90]
[78 89]
[79 88]
[80 87]
[105 138]
[106 137]
[107 136]
[108 135]
[109 134]
[110 133]
[111 132]
[112 131]
[113 130]
[117 127]
[118 126]
[119 125]
[120 124]
[140 162]
[141 161]
[142 160]
[143 159]
[144 158]
[145 157]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
