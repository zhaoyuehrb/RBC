%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 03:25:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGUGUGGCACGCCGGGGGUCCCGCAGCAUCCUGUGAGCAUUUCCGCGGGGAAGCUGAGCACGUGAAGCUCGCUGGUUCUGUGCGAAGGGUAUUCCUGGUGCUGAAUAAAGGGUGUUGCUGUCAAGGCUGACAAUU\
) } def
/len { sequence length } bind def

/coor [
[110.17540741 113.57727814]
[102.68754578 114.00389099]
[97.34392548 128.01980591]
[92.00029755 142.03570557]
[86.65666962 156.05162048]
[81.31304932 170.06752014]
[81.32015228 187.02146912]
[65.03073883 191.72161865]
[56.00491714 177.36993408]
[67.29714203 164.72389221]
[72.64076233 150.70799255]
[77.98439026 136.69207764]
[83.32801819 122.67617798]
[88.67163849 108.66027069]
[82.64440918 104.19680786]
[64.56270599 90.80643463]
[52.71456909 100.00543976]
[40.86643219 109.20443726]
[32.06350327 123.69390869]
[15.70339203 119.24608612]
[15.44846344 102.29405212]
[31.66743088 97.35630035]
[43.51556778 88.15729523]
[55.36370850 78.95829773]
[63.01108170 66.05412292]
[65.39131927 51.24417877]
[67.77156067 36.43423462]
[70.15179443 21.62429047]
[72.53203583 6.81434536]
[74.91226959 -7.99559927]
[77.29251099 -22.80554390]
[79.67275238 -37.61548996]
[82.05298615 -52.42543411]
[84.43322754 -67.23538208]
[70.38826752 -80.10174561]
[66.86113739 -98.66867065]
[75.07946014 -115.52221680]
[91.61659241 -124.04051208]
[92.98061371 -138.97836304]
[94.34464264 -153.91621399]
[95.70866394 -168.85406494]
[97.07268524 -183.79193115]
[83.81202698 -176.78085327]
[69.97107697 -182.56256104]
[65.63783264 -196.92303467]
[73.97058868 -209.39561462]
[88.89600372 -210.88963318]
[99.53578949 -200.31582642]
[102.58763123 -215.00207520]
[105.63947296 -229.68833923]
[108.69130707 -244.37460327]
[111.74314880 -259.06085205]
[114.79499054 -273.74713135]
[110.02725220 -288.83285522]
[120.19216156 -299.71972656]
[123.24399567 -314.40597534]
[126.29583740 -329.09225464]
[115.30197906 -344.43807983]
[118.86656189 -362.65301514]
[134.29791260 -372.38418579]
[136.67814636 -387.19415283]
[139.05838013 -402.00408936]
[141.43861389 -416.81402588]
[143.81886292 -431.62396240]
[142.08312988 -440.68179321]
[146.42553711 -446.74237061]
[149.14227295 -461.49429321]
[151.85902405 -476.24621582]
[146.74911499 -491.21951294]
[156.66357422 -502.33496094]
[148.78233337 -516.30871582]
[154.92692566 -531.12841797]
[170.38374329 -535.42565918]
[183.29563904 -525.90399170]
[183.75770569 -509.86755371]
[171.41549683 -499.61819458]
[176.71971130 -485.70007324]
[166.61094666 -473.52947998]
[163.89419556 -458.77755737]
[161.17745972 -444.02563477]
[158.62879944 -429.24374390]
[156.24856567 -414.43380737]
[153.86833191 -399.62384033]
[151.48808289 -384.81390381]
[149.10784912 -370.00396729]
[157.70362854 -362.35046387]
[161.53981018 -351.37170410]
[159.54026794 -339.79296875]
[152.09312439 -330.54907227]
[140.98210144 -326.04040527]
[137.93026733 -311.35415649]
[134.87841797 -296.66787720]
[139.86444092 -282.63262939]
[129.48124695 -270.69528198]
[126.42941284 -256.00903320]
[123.37757111 -241.32276917]
[120.32572937 -226.63650513]
[117.27388763 -211.95024109]
[114.22205353 -197.26397705]
[112.01053619 -182.42790222]
[110.64651489 -167.49005127]
[109.28249359 -152.55220032]
[107.91847229 -137.61434937]
[106.55444336 -122.67649078]
[116.30168915 -116.95979309]
[123.21048737 -107.95273590]
[126.23309326 -96.95742798]
[124.88713837 -85.58196259]
[119.33213806 -75.50526428]
[110.35169983 -68.22927856]
[99.24317169 -64.85514069]
[96.86293030 -50.04519653]
[94.48269653 -35.23525238]
[92.10245514 -20.42530632]
[89.72222137 -5.61536121]
[87.34197998 9.19458389]
[84.96173859 24.00452805]
[82.58150482 38.81447220]
[80.20126343 53.62441635]
[77.82102966 68.43436432]
[145.95726013 105.39645386]
[152.85823059 118.71472931]
[159.75920105 132.03300476]
[166.66018677 145.35128784]
[173.56115723 158.66957092]
[187.65937805 167.04643250]
[187.18338013 183.43867493]
[172.62281799 190.98335266]
[158.95635986 181.91914368]
[160.24287415 165.57054138]
[153.34190369 152.25225830]
[146.44093323 138.93399048]
[139.53994751 125.61570740]
[132.63897705 112.29742432]
[125.15111542 112.72404480]
[130.59016418 126.70320129]
[118.97584534 136.19569397]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 14]
[3 13]
[4 12]
[5 11]
[6 10]
[16 24]
[17 23]
[18 22]
[25 120]
[26 119]
[27 118]
[28 117]
[29 116]
[30 115]
[31 114]
[32 113]
[33 112]
[34 111]
[38 104]
[39 103]
[40 102]
[41 101]
[42 100]
[48 99]
[49 98]
[50 97]
[51 96]
[52 95]
[53 94]
[55 92]
[56 91]
[57 90]
[60 85]
[61 84]
[62 83]
[63 82]
[64 81]
[66 80]
[67 79]
[68 78]
[70 76]
[121 134]
[122 133]
[123 132]
[124 131]
[125 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
