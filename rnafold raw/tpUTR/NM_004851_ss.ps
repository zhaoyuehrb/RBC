%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 20:00:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCCAAGUGAAGCGCAUGCGCAGCGGGUGGUCGCGGAGGUCCUGCUACCCAGUAAAAAUCCACUAUUUCCAUUGAGCGAA\
) } def
/len { sequence length } bind def

/coor [
[96.91574860 285.65582275]
[95.76750946 270.69985962]
[94.61927032 255.74386597]
[85.93041229 243.64620972]
[92.58861542 229.29425049]
[91.44037628 214.33827209]
[90.29213715 199.38227844]
[78.85279846 189.91247559]
[77.47526550 174.76133728]
[87.48561859 162.82691956]
[86.33737946 147.87092590]
[85.18914032 132.91494751]
[73.08775330 124.05173492]
[58.48232269 127.46953583]
[43.87689209 130.88734436]
[32.29340363 142.49572754]
[16.52040291 138.00747681]
[12.78379917 122.03970337]
[24.92749214 111.01868439]
[40.45909119 116.28190613]
[55.06452179 112.86410522]
[69.66995239 109.44630432]
[68.69538879 95.12615204]
[74.11706543 81.87791443]
[84.79365540 72.40070343]
[98.51702118 68.60911560]
[95.66115570 53.88349533]
[92.80529022 39.15786743]
[89.94942474 24.43224335]
[87.09355927 9.70661926]
[84.23769379 -5.01900578]
[81.38182068 -19.74463081]
[71.76795959 -25.48774338]
[67.13125610 -35.43610764]
[68.84491730 -46.05171204]
[76.07088470 -53.71142197]
[74.35063934 -68.61245728]
[64.14727020 -81.45080566]
[70.41481018 -96.60501099]
[86.70575714 -98.48571777]
[96.26137543 -85.15822601]
[89.25167084 -70.33270264]
[90.97191620 -55.43167496]
[103.70362091 -41.08505630]
[96.10744476 -22.60049629]
[98.96331787 -7.87487221]
[101.81918335 6.85075235]
[104.67504883 21.57637787]
[107.53091431 36.30200195]
[110.38677979 51.02762604]
[113.24264526 65.75325012]
[125.83312988 73.90676117]
[140.43856812 70.48896027]
[155.04399109 67.07115936]
[160.94006348 52.71790314]
[174.16436768 44.60017395]
[189.63188171 45.83940125]
[201.39503479 55.95907593]
[204.93064880 71.06798553]
[198.87921143 85.35643005]
[185.56764221 93.33023071]
[170.11447144 91.92327881]
[158.46179199 81.67658997]
[143.85636902 85.09439087]
[129.25093079 88.51219940]
[130.37504578 108.49136353]
[119.19107819 125.17211151]
[100.14512634 131.76670837]
[101.29336548 146.72268677]
[102.44160461 161.67868042]
[114.15642548 171.94515991]
[115.10784912 187.12901306]
[105.24813080 198.23403931]
[106.39636993 213.19003296]
[107.54460144 228.14601135]
[116.31559753 241.31341553]
[109.57526398 254.59562683]
[110.72350311 269.55160522]
[111.87174225 284.50759888]
[119.11280823 299.83740234]
[106.38661957 311.03921509]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 79]
[2 78]
[3 77]
[5 75]
[6 74]
[7 73]
[10 70]
[11 69]
[12 68]
[13 22]
[14 21]
[15 20]
[26 51]
[27 50]
[28 49]
[29 48]
[30 47]
[31 46]
[32 45]
[36 43]
[37 42]
[52 65]
[53 64]
[54 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
