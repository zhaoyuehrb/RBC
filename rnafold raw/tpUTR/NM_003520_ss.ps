%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 15:13:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCGCCCACCGCGGAACGUUCGGUCAGUCUCGGCCCACACCCCAAAGGCUCUUUUCAGAGCCACUCA\
) } def
/len { sequence length } bind def

/coor [
[76.84648132 172.43919373]
[62.53868484 166.18287659]
[49.81039810 157.13603210]
[38.84785843 167.37432861]
[27.88532066 177.61262512]
[16.92278099 187.85092163]
[14.94022465 203.77101135]
[1.18262434 212.02377319]
[-13.79636669 206.27838135]
[-18.50614929 190.94223022]
[-9.33378029 177.77989197]
[6.68448353 176.88838196]
[17.64702225 166.65008545]
[28.60956192 156.41178894]
[39.57210159 146.17349243]
[31.31841850 132.65521240]
[26.04388237 117.72047424]
[23.97727966 102.01708984]
[25.20825386 86.22620392]
[29.68340874 71.03278351]
[37.20862961 57.09584427]
[47.45750427 45.01992416]
[59.98546982 35.32883072]
[53.38945007 21.85691643]
[46.79342651 8.38500023]
[40.19740677 -5.08691502]
[25.16700935 -9.97185802]
[18.06763268 -24.09185791]
[23.11121178 -39.06977081]
[37.30548096 -46.01946259]
[52.22923279 -40.81781006]
[59.02846909 -26.55085754]
[53.66932297 -11.68293571]
[60.26534271 1.78897953]
[66.86136627 15.26089478]
[73.45738220 28.73281097]
[86.70764160 25.12119102]
[100.39139557 23.95153236]
[114.06238556 25.26197624]
[127.27476501 29.00979042]
[139.59765625 35.07274628]
[150.62918091 43.25312424]
[160.00958252 53.28413391]
[167.43295288 64.83865356]
[172.65716553 77.53985596]
[175.51188660 90.97354126]
[175.90400696 104.70159149]
[173.82072449 118.27631378]
[187.95463562 123.29950714]
[202.08854675 128.32270813]
[216.22245789 133.34590149]
[230.35638428 138.36909485]
[244.49029541 143.39228821]
[260.51144409 139.89161682]
[271.35214233 152.19654846]
[265.86041260 167.64881897]
[249.68565369 170.35246277]
[239.46710205 157.52619934]
[225.33319092 152.50300598]
[211.19926453 147.47981262]
[197.06535339 142.45661926]
[182.93144226 137.43342590]
[168.79753113 132.41023254]
[160.72726440 145.77905273]
[150.09652710 157.21766663]
[137.35353088 166.24375916]
[123.03556824 172.47679138]
[107.74634552 175.65393066]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 15]
[4 14]
[5 13]
[6 12]
[23 36]
[24 35]
[25 34]
[26 33]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
