%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 07:37:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAAUAUUUAGCUAUAAAUAAAAAUUUAUACAGCAUGUAUAAUUUAUUUUGUAUUAACAAUAAAAAUUCCUAAGACUGAGGGAAAUAUGUCUUAACUUUUGAUGAUAAAAGAAAUUAAAUUUGAUUCAGAAAUUUCA\
) } def
/len { sequence length } bind def

/coor [
[89.72603607 232.09123230]
[95.77236938 216.25210571]
[95.77236938 201.25210571]
[95.77236938 186.25210571]
[95.77236938 171.25210571]
[95.77236938 156.25210571]
[89.30561829 152.45327759]
[86.07630920 167.10153198]
[71.14705658 168.55665588]
[65.14993286 154.80767822]
[76.37210846 144.85562134]
[69.90534973 141.05679321]
[56.80344391 148.36021423]
[43.70153427 155.66363525]
[30.76802635 163.26129150]
[18.00952148 171.14929199]
[5.25101852 179.03729248]
[-7.50748491 186.92529297]
[-20.26598740 194.81330872]
[-33.02449036 202.70130920]
[-40.31166458 217.39242554]
[-56.69298172 218.15693665]
[-65.31674957 204.20835876]
[-57.31157303 189.89581299]
[-40.91249466 189.94279480]
[-28.15399170 182.05479431]
[-15.39548779 174.16679382]
[-2.63698435 166.27879333]
[10.12151909 158.39079285]
[22.88002205 150.50279236]
[24.84070396 146.06369019]
[29.65606117 142.84941101]
[36.39811325 142.56172180]
[49.50002289 135.25830078]
[62.60193253 127.95488739]
[56.74382019 107.37985229]
[60.81148148 87.70843506]
[72.71531677 73.17787170]
[59.78180695 65.58021545]
[46.84829712 57.98256302]
[33.91478729 50.38491058]
[20.98127937 42.78725815]
[8.04776955 35.18960190]
[-7.18341827 39.40700531]
[-20.89428520 31.54649162]
[-24.95041847 16.27156639]
[-16.94538307 2.64457178]
[-1.62842870 -1.24983823]
[11.91316986 6.89882088]
[15.64542294 22.25609398]
[28.57893181 29.85374641]
[41.51243973 37.45140076]
[54.44594955 45.04905319]
[67.37946320 52.64670563]
[80.31297302 60.24435806]
[72.60525513 47.37613678]
[64.89754486 34.50791550]
[52.32744217 26.32301712]
[43.85636520 13.94396687]
[40.77918625 -0.73700601]
[43.56627274 -15.47580338]
[51.79159927 -28.01948929]
[64.19786072 -36.45066452]
[78.88866425 -39.48056030]
[93.61840820 -36.64603424]
[106.13555145 -28.38036728]
[114.52673340 -15.94702721]
[117.50931549 -1.24654460]
[114.62738800 13.47400093]
[106.32254028 25.96337891]
[104.33581543 40.83122635]
[102.34908295 55.69907379]
[111.22062683 43.60379791]
[120.09217072 31.50852203]
[128.96371460 19.41324615]
[137.83525085 7.31796837]
[146.70680237 -4.77730846]
[144.50648499 -20.19795609]
[153.67579651 -32.33790970]
[168.39059448 -34.34053421]
[165.74142456 -49.92121124]
[174.95339966 -62.76313782]
[190.56120300 -65.24743652]
[203.30502319 -55.90020370]
[205.62416077 -40.26699829]
[196.14271545 -27.62271881]
[180.48587036 -25.46899223]
[182.99615479 -10.83225632]
[174.17144775 1.56045318]
[158.80207825 4.09423494]
[149.93054199 16.18951225]
[141.05899048 28.28478813]
[132.18745422 40.38006592]
[123.31590271 52.47534180]
[114.44435883 64.57061768]
[135.96463013 80.16648865]
[143.20539856 107.67153168]
[130.62466431 135.24516296]
[143.88827515 142.25062561]
[157.15188599 149.25608826]
[170.41551208 156.26153564]
[183.67912292 163.26699829]
[196.94273376 170.27246094]
[207.07440186 159.10105896]
[219.66641235 150.80094910]
[233.92726135 145.89389038]
[248.96046448 144.68833923]
[263.82104492 147.26008606]
[277.57485962 153.44746399]
[289.35729980 162.86152649]
[298.42776489 174.91050720]
[304.21600342 188.83699036]
[306.35824585 203.76554871]
[304.71975708 218.75775146]
[299.40356445 232.87118530]
[290.74386597 245.21865845]
[279.28497314 255.02401733]
[265.74725342 261.67086792]
[250.98165894 264.74139404]
[235.91639709 264.04257202]
[221.49844360 259.61834717]
[208.63417053 251.74682617]
[198.13220215 240.92279053]
[190.65270996 227.82669067]
[186.66586304 213.28172302]
[186.42228699 198.20222473]
[189.93728638 183.53608704]
[176.67366028 176.53062439]
[163.41004944 169.52516174]
[150.14643860 162.51969910]
[136.88281250 155.51423645]
[123.61920166 148.50877380]
[110.77236938 156.25210571]
[110.77236938 171.25210571]
[110.77236938 186.25210571]
[110.77236938 201.25210571]
[110.77236938 216.25210571]
[116.81871033 232.09123230]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 137]
[3 136]
[4 135]
[5 134]
[6 133]
[12 35]
[13 34]
[14 33]
[15 30]
[16 29]
[17 28]
[18 27]
[19 26]
[20 25]
[38 55]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
[72 95]
[73 94]
[74 93]
[75 92]
[76 91]
[77 90]
[80 87]
[98 132]
[99 131]
[100 130]
[101 129]
[102 128]
[103 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
