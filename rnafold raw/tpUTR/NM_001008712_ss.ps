%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:03:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUGUUUGUUAGCUAUUUUCCCCCCUUUCACAAAAACUAUUUCUUGACGACCUUUGAGAGAUUUCAAUAAAAAUUUUAAUCAGAGCAAAAAUGAACUCAA\
) } def
/len { sequence length } bind def

/coor [
[140.76467896 282.13925171]
[152.17253113 272.05059814]
[147.62524414 257.75646973]
[143.07795715 243.46234131]
[138.53065491 229.16821289]
[133.98336792 214.87408447]
[129.43608093 200.57995605]
[124.88879395 186.28581238]
[119.90347290 172.13850403]
[114.48484802 158.15141296]
[109.06622314 144.16433716]
[103.64759827 130.17724609]
[98.22897339 116.19017029]
[87.79225159 110.78096008]
[83.71508789 99.75547028]
[88.12145233 88.85736847]
[83.13613129 74.71005249]
[78.15081024 60.56273651]
[73.16548157 46.41542053]
[68.18016052 32.26810455]
[57.61112976 33.75145721]
[46.94527054 33.48957062]
[36.46873856 31.49062920]
[26.46242142 27.80940628]
[17.19439888 22.54575920]
[8.91277504 15.84192944]
[1.83903146 7.87868881]
[-3.83789945 -1.12952828]
[-7.96667719 -10.94040012]
[-10.43758678 -21.29023743]
[-11.18545818 -31.90106773]
[-10.19137764 -42.48810959]
[-7.48317242 -52.76739883]
[-3.13462687 -62.46342850]
[2.73652434 -71.31650543]
[9.97178459 -79.08973694]
[18.37617302 -85.57534027]
[27.72348022 -90.60021973]
[37.76235580 -94.03055573]
[48.22306824 -95.77542114]
[48.68499374 -110.76830292]
[49.14691925 -125.76119232]
[49.60884476 -140.75407410]
[50.07077026 -155.74696350]
[50.53269577 -170.73985291]
[50.99462128 -185.73272705]
[51.45655060 -200.72561646]
[51.91847610 -215.71850586]
[40.91136169 -227.05953979]
[41.23101807 -242.86059570]
[52.68778992 -253.74719238]
[68.48458099 -253.26049805]
[79.24944305 -241.68925476]
[78.59575653 -225.89849854]
[66.91136169 -215.25657654]
[66.44943237 -200.26368713]
[65.98751068 -185.27081299]
[65.52558136 -170.27792358]
[65.06365967 -155.28503418]
[64.60173035 -140.29214478]
[64.13980865 -125.29926300]
[63.67787933 -110.30638123]
[63.21595383 -95.31349182]
[82.76181793 -89.20092010]
[99.43556976 -77.28070068]
[111.56354523 -60.73622131]
[117.92426300 -41.21568298]
[117.87145996 -20.66791916]
[111.39973450 -1.14783239]
[99.14612579 15.38911343]
[82.32747650 27.28278351]
[87.31280518 41.43009949]
[92.29812622 55.57741547]
[97.28344727 69.72473145]
[102.26876831 83.87204742]
[115.27574158 94.35111237]
[112.21605682 110.77154541]
[117.63468170 124.75862885]
[123.05330658 138.74571228]
[128.47192383 152.73278809]
[133.89054871 166.71987915]
[139.00459290 171.34480286]
[140.63165283 177.02033997]
[139.18292236 181.73852539]
[143.73020935 196.03265381]
[148.27749634 210.32678223]
[152.82479858 224.62092590]
[157.37208557 238.91505432]
[161.91937256 253.20918274]
[166.46665955 267.50329590]
[181.60667419 269.14648438]
[194.76615906 276.81118774]
[203.66514587 289.16952515]
[206.76184082 304.08026123]
[203.51972961 318.96005249]
[194.50051880 331.23089600]
[181.26684570 338.76681519]
[166.11152649 340.26211548]
[151.66029358 335.45773315]
[140.41693115 325.18609619]
[134.32940674 311.22680664]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 90]
[3 89]
[4 88]
[5 87]
[6 86]
[7 85]
[8 84]
[9 81]
[10 80]
[11 79]
[12 78]
[13 77]
[16 75]
[17 74]
[18 73]
[19 72]
[20 71]
[40 63]
[41 62]
[42 61]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
