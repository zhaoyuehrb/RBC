%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 21:48:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGCAGCCCCAGACCCCCUGCGCAGGAGAGGAGCCUGCUAGAACCCCCACCCACCAGCCUCCGGAACAGGGCACUUGUGUGCACACGCCCACGUUCUCUGAACCAUUCCACAUAAAGGAAAAUCGUUUAUUCACACGAUCCCAA\
) } def
/len { sequence length } bind def

/coor [
[62.60155106 117.11345673]
[48.05229950 120.76301575]
[33.50305176 124.41257477]
[36.64169693 136.22528076]
[31.65262222 150.49491882]
[23.20281982 162.88850403]
[14.75301933 175.28208923]
[6.30321884 187.67565918]
[13.55014515 201.15678406]
[13.69039345 216.46165466]
[6.69173574 230.07331848]
[-5.83758688 238.86392212]
[-21.01842880 240.81343079]
[-35.36234283 235.47389221]
[-45.57320404 224.07228088]
[-49.30462646 209.22859192]
[-45.69916534 194.35380554]
[-35.58531952 182.86604309]
[-21.28718376 177.40509033]
[-6.09036255 179.22586060]
[2.35943818 166.83227539]
[10.80923939 154.43870544]
[19.25904083 142.04512024]
[10.94215298 129.56195068]
[-3.74975443 132.58650208]
[-18.44166183 135.61103821]
[-33.13356781 138.63557434]
[-47.82547760 141.66012573]
[-55.09554672 155.50497437]
[-69.58358002 161.38978577]
[-84.44876862 156.53590393]
[-92.67223358 143.23519897]
[-90.37109375 127.76785278]
[-78.63188171 117.43707275]
[-62.99750137 117.12074280]
[-50.85001755 126.96821594]
[-36.15811157 123.94367218]
[-21.46620369 120.91912842]
[-6.77429676 117.89459229]
[7.91761065 114.87004852]
[-6.89144325 112.48426819]
[-20.29126549 105.74299622]
[-31.03380966 95.27410126]
[-38.11852264 82.05265045]
[-40.88554382 67.31007385]
[-39.07715607 52.41948318]
[-32.86178589 38.76777267]
[-22.81833076 27.62645149]
[-9.88222790 20.03321457]
[4.74166489 16.69528580]
[19.69129181 17.92355919]
[33.57425690 23.60363388]
[45.09751892 33.20647049]
[53.18780518 45.83767319]
[57.09159470 60.32078171]
[56.44529343 75.30685425]
[51.30910110 89.40009308]
[42.16139221 101.28787994]
[29.85348892 109.86332703]
[44.40274048 106.21376038]
[58.95199203 102.56420135]
[62.58678818 82.91884613]
[75.05010223 67.30417633]
[93.40091705 59.40485001]
[113.30894470 61.08488464]
[120.66970825 48.01510239]
[116.64029694 32.96845627]
[124.29134369 19.81869507]
[138.66085815 16.06999779]
[146.02162170 3.00021768]
[153.38238525 -10.06956291]
[160.74314880 -23.13934326]
[168.10391235 -36.20912552]
[168.13423157 -52.03030014]
[181.12138367 -59.32298279]
[188.48214722 -72.39276123]
[188.79843140 -79.11160278]
[192.01681519 -83.90367126]
[196.44699097 -85.85400391]
[204.35949707 -98.59732819]
[212.27201843 -111.34064484]
[212.97834778 -127.14608002]
[226.26525879 -133.87716675]
[234.17776489 -146.62048340]
[234.16229248 -163.01962280]
[248.49020386 -170.99726868]
[262.42218018 -162.34671021]
[261.62619019 -145.96688843]
[246.92108154 -138.70797729]
[239.00857544 -125.96465302]
[238.86819458 -111.07070923]
[225.01533508 -103.42813873]
[217.10282898 -90.68481445]
[209.19030762 -77.94149780]
[201.55192566 -65.03199768]
[194.19117737 -51.96221924]
[194.68733215 -37.07587814]
[181.17369080 -28.84836006]
[173.81292725 -15.77857971]
[166.45216370 -2.70879960]
[159.09140015 10.36098099]
[151.73063660 23.43076134]
[155.97401428 37.66204071]
[148.69532776 51.02151489]
[133.73948669 55.37586594]
[126.37872314 68.44564819]
[137.42794800 82.95114899]
[141.12008667 100.80789185]
[155.81199646 103.83243561]
[170.50390625 106.85697174]
[185.19581604 109.88151550]
[197.34329224 100.03404236]
[212.97767639 100.35037994]
[224.71688843 110.68115997]
[227.01802063 126.14849854]
[218.79455566 139.44920349]
[203.92936707 144.30308533]
[189.44132996 138.41828918]
[182.17126465 124.57342529]
[167.47935486 121.54888153]
[152.78744507 118.52433777]
[138.09555054 115.49979401]
[134.46890259 122.43677521]
[129.59365845 128.56098938]
[138.30636597 140.77116394]
[147.01908875 152.98135376]
[155.73181152 165.19152832]
[164.44453430 177.40171814]
[179.96160889 177.39968872]
[192.49655151 186.54598999]
[197.22943115 201.32365417]
[192.34034729 216.05038452]
[179.70925903 225.06344604]
[164.19308472 224.89712524]
[151.75808716 215.61540222]
[147.18580627 200.78726196]
[152.23434448 186.11442566]
[143.52162170 173.90425110]
[134.80891418 161.69406128]
[126.09619141 149.48388672]
[117.38346863 137.27371216]
[108.61190796 140.21627808]
[99.40453339 141.12371826]
[90.22730255 139.95007324]
[81.54460907 136.75476074]
[73.79585266 131.69947815]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 61]
[2 60]
[3 59]
[5 23]
[6 22]
[7 21]
[8 20]
[24 40]
[25 39]
[26 38]
[27 37]
[28 36]
[65 106]
[66 105]
[69 102]
[70 101]
[71 100]
[72 99]
[73 98]
[75 96]
[76 95]
[79 94]
[80 93]
[81 92]
[83 90]
[84 89]
[108 122]
[109 121]
[110 120]
[111 119]
[124 141]
[125 140]
[126 139]
[127 138]
[128 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
