%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 11:36:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCACUGCAGGUCCUGCCAGACCUCCUUCCUGACCUCUGAGGCAGGAGAGGAAUAAAGACGGUCCGCCCUGGCAGUGA\
) } def
/len { sequence length } bind def

/coor [
[81.62701416 302.96218872]
[65.92958832 301.12741089]
[56.19287872 288.67861938]
[58.19350433 273.00149536]
[70.74452972 263.39694214]
[72.48592377 248.49835205]
[74.22731781 233.59977722]
[75.96871185 218.70120239]
[77.71010590 203.80262756]
[79.45149994 188.90405273]
[80.90366364 173.97451782]
[82.06604767 159.01962280]
[83.22843170 144.06472778]
[81.22308350 141.75720215]
[80.14012909 138.41435242]
[80.42137146 134.43713379]
[82.33263397 130.39448547]
[85.90543365 126.94802856]
[89.36467743 112.35235596]
[83.81444550 101.92836761]
[86.76022339 90.49215698]
[96.65573120 84.04673767]
[100.67832184 69.59616852]
[104.70091248 55.14560699]
[108.72349548 40.69504547]
[110.46488953 25.79647064]
[109.88326263 10.80775070]
[109.30162811 -4.18096828]
[108.72000122 -19.16968727]
[107.84783173 -34.14431000]
[106.68544006 -49.09920502]
[105.52305603 -64.05410004]
[104.36067200 -79.00899506]
[103.19828033 -93.96389008]
[99.32769012 -102.53302002]
[102.29228210 -109.51926422]
[101.71065521 -124.50798035]
[101.12902069 -139.49670410]
[94.47306061 -155.08947754]
[107.61390686 -165.80183411]
[121.54536438 -156.13999939]
[116.11774445 -140.07833862]
[116.69937134 -125.08961487]
[117.28100586 -110.10089874]
[118.15317535 -95.12627411]
[119.31556702 -80.17137909]
[120.47795105 -65.21648407]
[121.64033508 -50.26158905]
[122.80271912 -35.30669785]
[126.55832672 -28.71185684]
[123.70871735 -19.75131798]
[124.29035187 -4.76259899]
[124.87197876 10.22612000]
[125.45361328 25.21483994]
[136.45814514 15.02169323]
[151.31434631 12.94969368]
[164.68795776 19.74281120]
[171.77706909 32.96191406]
[170.03623962 47.86055374]
[160.09056091 59.08923721]
[145.51109314 62.61619568]
[131.53276062 57.17504501]
[123.17406464 44.71763611]
[119.15147400 59.16819763]
[115.12888336 73.61875916]
[111.10629272 88.06932068]
[115.78478241 104.06589508]
[103.96035004 115.81159210]
[100.50110626 130.40727234]
[98.18332672 145.22711182]
[97.02094269 160.18200684]
[95.85855865 175.13690186]
[98.35856628 184.20120239]
[94.35007477 190.64544678]
[92.60868073 205.54402161]
[90.86728668 220.44259644]
[89.12589264 235.34117126]
[87.38449860 250.23974609]
[85.64310455 265.13833618]
[95.64085388 277.37844849]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 79]
[6 78]
[7 77]
[8 76]
[9 75]
[10 74]
[11 72]
[12 71]
[13 70]
[18 69]
[19 68]
[22 66]
[23 65]
[24 64]
[25 63]
[26 54]
[27 53]
[28 52]
[29 51]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[36 44]
[37 43]
[38 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
