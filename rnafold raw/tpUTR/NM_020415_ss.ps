%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:25:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCGCGCGCAGCGCGUGCACAGCGCGGGCGGAGGCGGCUCCAGGUCCGGAGGGGUUGCGGGGGAGCUGGAAAUAAACCUGGAGAUGAUGAUGAUGAUGAUGAUG\
) } def
/len { sequence length } bind def

/coor [
[92.79071045 111.70129395]
[90.72910309 108.69107819]
[76.66780853 113.91410065]
[62.60651016 119.13712311]
[48.54521561 124.36015320]
[34.48392105 129.58317566]
[27.39196777 135.59896851]
[19.92779732 134.74586487]
[15.21615410 149.41236877]
[2.91562462 158.38735962]
[-12.13309193 158.39826965]
[-24.15867615 149.65051270]
[-38.36857224 154.45455933]
[-48.96381378 166.20408630]
[-63.49871826 162.95050049]
[-77.70861053 167.75454712]
[-91.91851044 172.55859375]
[-106.12840271 177.36264038]
[-120.33830261 182.16668701]
[-133.40666199 192.96734619]
[-147.40290833 183.39961243]
[-142.08363342 167.30174255]
[-125.14234924 167.95680237]
[-110.93244934 163.15275574]
[-96.72255707 158.34870911]
[-82.51265717 153.54464722]
[-68.30276489 148.74060059]
[-58.72390747 137.33470154]
[-43.17261887 140.24465942]
[-28.96272278 135.44061279]
[-24.71227837 121.19029236]
[-12.74411583 112.06740570]
[2.47903705 111.73725128]
[15.12374973 120.53596497]
[29.26089668 115.52188110]
[43.32219315 110.29885864]
[57.38348770 105.07582855]
[71.44477844 99.85280609]
[85.50607300 94.62978363]
[94.95739746 82.98192596]
[97.17209625 68.14632416]
[99.38679504 53.31071854]
[101.60148621 38.47511673]
[103.81618500 23.63951302]
[98.20123291 8.84820271]
[107.73287201 -2.59719515]
[109.94757080 -17.43279839]
[112.16226959 -32.26840210]
[101.26557922 -43.15730667]
[98.89769745 -58.19879913]
[105.75967407 -71.59197998]
[119.03341675 -78.29614258]
[109.43030548 -90.84826660]
[111.59836578 -106.50314331]
[124.25131989 -115.97300720]
[139.88240051 -113.63955688]
[149.21795654 -100.88719177]
[146.71937561 -85.28165436]
[133.86901855 -76.08144379]
[144.60604858 -65.79289246]
[147.25727844 -50.97955322]
[140.59965515 -37.28540802]
[126.99787140 -30.05370140]
[124.78317261 -15.21809959]
[122.56847382 -0.38249668]
[128.34184265 13.34767246]
[118.65179443 25.85421181]
[116.43709564 40.68981552]
[114.22239685 55.52541733]
[112.00769806 70.36102295]
[109.79299927 85.19662476]
[113.39102936 70.63454437]
[122.43588257 58.66831589]
[135.46405029 51.23414612]
[150.36749268 49.53492737]
[164.73475647 53.84560394]
[176.24111938 63.46868134]
[183.02478027 76.84709167]
[183.98812866 91.81612396]
[178.97526550 105.95370483]
[168.79731750 116.97229004]
[155.10112000 123.08900452]
[140.10279846 123.31413269]
[126.22919464 117.61124420]
[115.72370911 106.90092468]
[125.17502594 118.54878235]
[139.87854004 124.38976288]
[141.88964844 139.14797974]
[151.34095764 150.79583740]
[166.04447937 156.63681030]
[168.05558777 171.39501953]
[177.50689697 183.04287720]
[193.00769043 188.39614868]
[195.85594177 204.54606628]
[183.12161255 214.87896729]
[167.90469360 208.76525879]
[165.85903931 192.49420166]
[156.40773010 180.84634399]
[142.38023376 175.83848572]
[139.69309998 160.24714661]
[130.24179077 148.59928894]
[116.21428680 143.59144592]
[113.52716827 128.00009155]
[104.07585144 116.35224152]
[99.66455841 115.81276703]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 39]
[3 38]
[4 37]
[5 36]
[6 35]
[8 34]
[12 30]
[13 29]
[15 27]
[16 26]
[17 25]
[18 24]
[19 23]
[40 71]
[41 70]
[42 69]
[43 68]
[44 67]
[46 65]
[47 64]
[48 63]
[52 59]
[85 104]
[86 103]
[88 101]
[89 100]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
