%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:55:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAAGACACGUUGAAAUGAUGCAGGCUGCUCCUAUGUUGGAAAUUUGUUCAUUAAAAUUCUCCCAAUAAAGCUUUACAGCCUUCUGCAAAGAA\
) } def
/len { sequence length } bind def

/coor [
[61.60525894 331.10742188]
[51.66913223 342.43090820]
[39.46211243 351.25906372]
[25.59649277 357.14907837]
[10.76776886 359.80551147]
[-4.28025723 359.09512329]
[-18.79278374 355.05355835]
[-32.04186630 347.88351440]
[-43.36293793 337.94464111]
[-52.18813705 325.73547363]
[-58.07479858 311.86843872]
[-60.72764587 297.03906250]
[-60.01361465 281.99121094]
[-55.96852112 267.47967529]
[-48.79526520 254.23233032]
[-38.85365677 242.91366577]
[-26.64235878 234.09141541]
[-12.77388668 228.20811462]
[2.05612278 225.55886841]
[17.10380363 226.27653503]
[31.61436844 230.32514954]
[38.75357819 217.13304138]
[45.89279175 203.94093323]
[53.03200150 190.74882507]
[59.50831604 177.21896362]
[65.30580139 163.38461304]
[71.10329437 149.55027771]
[76.90077972 135.71592712]
[82.69826508 121.88157654]
[73.10775757 107.41355133]
[73.92994690 90.07498932]
[84.84648895 76.57939911]
[101.63047791 72.15229034]
[106.50096893 57.96503067]
[103.66381073 42.40029144]
[115.11441803 32.87491608]
[119.98490906 18.68765831]
[124.85540009 4.50040007]
[129.72589111 -9.68685818]
[134.59638977 -23.87411690]
[139.46687317 -38.06137466]
[134.55276489 -57.47374725]
[149.26956177 -69.83164978]
[153.19177246 -84.30978394]
[157.11396790 -98.78791809]
[161.03616333 -113.26605225]
[164.95835876 -127.74418640]
[155.12190247 -139.74517822]
[154.25164795 -155.23782349]
[162.68223572 -168.26490784]
[177.17192078 -173.81723022]
[192.14913940 -169.75982666]
[201.85484314 -157.65284729]
[202.55697632 -142.15167236]
[193.98556519 -129.21681213]
[179.43649292 -123.82199097]
[175.51429749 -109.34385681]
[171.59210205 -94.86572266]
[167.66990662 -80.38758850]
[163.74769592 -65.90945435]
[169.71966553 -57.32120514]
[169.87321472 -46.63971329]
[163.90783691 -37.51139069]
[153.65414429 -33.19088364]
[148.78364563 -19.00362587]
[143.91314697 -4.81636667]
[139.04266357 9.37089252]
[134.17216492 23.55815125]
[129.30168152 37.74541092]
[132.48721313 52.29537964]
[120.68823242 62.83552170]
[115.81774139 77.02278137]
[124.15243530 86.04244995]
[127.80591583 97.76736450]
[126.07005310 109.92501068]
[119.28129578 120.15899658]
[108.75544739 126.48576355]
[96.53261566 127.67906189]
[90.73512268 141.51341248]
[84.93763733 155.34776306]
[79.14015198 169.18209839]
[73.34265900 183.01644897]
[74.07851410 188.59396362]
[72.61670685 193.34918213]
[69.69078827 196.54939270]
[66.22410583 197.88804626]
[59.08489609 211.08015442]
[51.94568634 224.27224731]
[44.80647278 237.46435547]
[56.13236237 247.39773560]
[64.96347809 259.60263062]
[70.85685730 273.46682739]
[73.51689148 288.29489136]
[72.81015015 303.34307861]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[21 89]
[22 88]
[23 87]
[24 86]
[25 82]
[26 81]
[27 80]
[28 79]
[29 78]
[33 72]
[34 71]
[36 69]
[37 68]
[38 67]
[39 66]
[40 65]
[41 64]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
