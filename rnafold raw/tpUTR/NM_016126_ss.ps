%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 03:34:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAUAACAAAAUGCUCUUGCAUGAUUUUUUAACAAUAUAUUUAAACAGGAAGUUGUCACUGAUAUACUUUAUUAAAAGGAUUUUUAUCAA\
) } def
/len { sequence length } bind def

/coor [
[215.06817627 166.27696228]
[201.66799927 159.53640747]
[188.26780701 152.79585266]
[174.86763000 146.05529785]
[161.46743774 139.31474304]
[148.06726074 132.57418823]
[134.66708374 125.83363342]
[119.06025696 138.80578613]
[99.25375366 143.22760010]
[79.61167908 138.12478638]
[64.46189880 124.62166595]
[50.83704376 130.89567566]
[37.21218872 137.16969299]
[23.58733177 143.44371033]
[14.56375885 157.13703918]
[-1.78859580 155.89907837]
[-8.64783096 141.00334167]
[1.04224610 127.77329254]
[17.31331444 129.81886292]
[30.93817139 123.54484558]
[44.56302643 117.27082825]
[58.18788528 110.99681091]
[56.92258072 103.67678070]
[56.92905045 96.24820709]
[58.20709991 88.93039703]
[60.71899796 81.93939209]
[64.39058685 75.48159027]
[69.11347198 69.74764252]
[60.38069153 57.55179977]
[51.64791107 45.35595703]
[42.91513062 33.16011810]
[34.18235016 20.96427536]
[18.66530037 20.99180412]
[6.11533213 11.86612988]
[1.35816526 -2.90373802]
[6.22302771 -17.63848495]
[18.83928108 -26.67229843]
[34.35571671 -26.53149414]
[46.80595016 -17.27021408]
[51.40261078 -2.44960928]
[46.37819290 12.23149490]
[55.11097336 24.42733574]
[63.84375381 36.62317657]
[72.57653046 48.81901932]
[81.30931091 61.01486206]
[94.94796753 57.06214142]
[109.13160706 57.74131393]
[122.33018494 62.97911835]
[133.11990356 72.21052551]
[140.33683777 84.43970490]
[143.20245361 98.34744263]
[141.40763855 112.43344879]
[154.80781555 119.17400360]
[168.20800781 125.91455841]
[181.60818481 132.65512085]
[195.00836182 139.39567566]
[208.40855408 146.13623047]
[221.80873108 152.87678528]
[240.05543518 151.30863953]
[249.26879883 166.13589478]
[262.89364624 172.40991211]
[276.51852417 178.68392944]
[290.14337158 184.95794678]
[303.76821899 191.23196411]
[322.63836670 182.46687317]
[341.75634766 189.93475342]
[349.47418213 208.64884949]
[363.83297729 212.98762512]
[378.19177246 217.32641602]
[392.55056763 221.66519165]
[408.38516235 217.39932251]
[419.80416870 229.16957092]
[415.06066895 244.86770630]
[399.03439331 248.34483337]
[388.21179199 236.02398682]
[373.85299683 231.68521118]
[359.49420166 227.34642029]
[345.13540649 223.00764465]
[338.30416870 230.07872009]
[329.26187134 234.08680725]
[319.31729126 234.40339661]
[309.92791748 230.93780518]
[302.48666382 224.15696716]
[298.11499023 215.02299500]
[297.49420166 204.85681152]
[283.86935425 198.58279419]
[270.24450684 192.30879211]
[256.61962891 186.03477478]
[242.99478149 179.76075745]
[231.40377808 183.66397095]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 58]
[2 57]
[3 56]
[4 55]
[5 54]
[6 53]
[7 52]
[11 22]
[12 21]
[13 20]
[14 19]
[28 45]
[29 44]
[30 43]
[31 42]
[32 41]
[60 89]
[61 88]
[62 87]
[63 86]
[64 85]
[67 78]
[68 77]
[69 76]
[70 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
