%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 00:11:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCUGUGGCCAGGCACCCGCUCCCACCUGGCCGGGCGCUGGCUCCUCCCUCAGUUCUCUUUGGAAAACCCCCAGCUGUCCACCCAUCCCCUGCCCCAAAACCAGUUUCAAUAAAUUUACGUUCAUUUCCAC\
) } def
/len { sequence length } bind def

/coor [
[133.93064880 140.54823303]
[124.44045258 128.93202209]
[114.95025635 117.31582642]
[117.83739471 132.03535461]
[107.50991058 142.91390991]
[92.66030121 140.79516602]
[85.78727722 127.46244049]
[92.67584229 114.13765717]
[80.31562805 122.63618469]
[67.95540619 131.13470459]
[55.59518433 139.63323975]
[43.23496628 148.13175964]
[30.87474442 156.63029480]
[18.51452446 165.12881470]
[20.89967346 180.20442200]
[16.49933624 194.81947327]
[6.18720341 206.07214355]
[-7.98924351 211.72821045]
[-23.21526146 210.66465759]
[-36.46771240 203.09265137]
[-45.11531448 190.51562500]
[-47.44107437 175.43074036]
[-42.98321915 160.83312988]
[-32.62685394 149.62115479]
[-18.42824364 144.02095032]
[-3.20653248 145.14445496]
[10.01599789 152.76860046]
[22.37621689 144.27006531]
[34.73643875 135.77154541]
[47.09665680 127.27301788]
[59.45687866 118.77449036]
[71.81710052 110.27596283]
[84.17732239 101.77743530]
[88.20201111 87.32746124]
[82.01477051 73.66297913]
[75.82752991 59.99849701]
[69.64028168 46.33401871]
[63.29209137 32.74356461]
[56.78383636 19.22903061]
[50.27558136 5.71449709]
[43.76732254 -7.80003595]
[37.25906754 -21.31456947]
[21.25758171 -20.30208778]
[6.12261581 -25.47657585]
[-5.85207462 -36.02276230]
[-12.86358833 -50.31365967]
[-13.87128639 -66.16150665]
[-8.75114727 -81.15268707]
[1.68982446 -93.01531982]
[-5.13581324 -106.37236023]
[-19.90312767 -111.32859039]
[-26.63501930 -124.97176361]
[-21.81900978 -139.01959229]
[-28.64464569 -152.37664795]
[-42.69533539 -160.83302307]
[-42.12675095 -177.22230530]
[-27.52380562 -184.68461609]
[-13.90875816 -175.54336548]
[-15.28760052 -159.20228577]
[-8.46196365 -145.84523010]
[5.74401379 -141.51789856]
[12.85645771 -128.06919861]
[8.22123241 -113.19799805]
[15.04687023 -99.84095001]
[29.03215790 -101.48879242]
[42.76553345 -98.24185944]
[54.58222580 -90.47267914]
[63.04260254 -79.10322571]
[67.10754395 -65.49555969]
[66.26604462 -51.28866577]
[60.59934616 -38.20104218]
[50.77360153 -27.82282448]
[57.28185654 -14.30829239]
[63.79011154 -0.79375923]
[70.29837036 12.72077370]
[76.80662537 26.23530769]
[82.59829712 30.94163513]
[83.30476379 40.14677429]
[89.49200439 53.81125259]
[95.67925262 67.47573090]
[101.86649323 81.14021301]
[97.97778320 66.65305328]
[98.23954010 51.65533447]
[102.63140869 37.31268692]
[110.81205750 24.73982430]
[122.14569855 14.91390324]
[135.75146484 8.59859657]
[150.57191467 6.28472948]
[165.45523071 8.15213585]
[179.24464417 14.05568027]
[190.86846924 23.53654099]
[199.42329407 35.85786438]
[204.24423218 50.06203461]
[204.95661926 65.04511261]
[201.50506592 79.64260101]
[194.15783691 92.71999359]
[183.48594666 103.26091003]
[170.31883240 110.44612122]
[155.67984009 113.71717072]
[140.70671082 112.81985474]
[126.56645203 107.82562256]
[136.05665588 119.44182587]
[145.54684448 131.05802917]
[158.83282471 123.98913574]
[173.24266052 119.64833069]
[188.22250366 118.20245361]
[203.19656372 119.70708466]
[217.58926392 124.10439301]
[230.84741211 131.22535706]
[242.46136475 140.79624939]
[251.98474121 152.44921875]
[259.05148315 165.73632812]
[263.38995361 180.14688110]
[264.83340454 195.12695312]
[263.32635498 210.10076904]
[258.92672729 224.49275208]
[251.80361938 237.74974060]
[242.23083496 249.36215210]
[230.57633972 258.88363647]
[217.28807068 265.94824219]
[202.87683105 270.28436279]
[187.89651489 271.72540283]
[172.92294312 270.21591187]
[158.53166199 265.81396484]
[145.27583313 258.68869019]
[133.66497803 249.11404419]
[124.14537048 237.45800781]
[117.08293152 224.16859436]
[112.74912262 209.75665283]
[111.31052399 194.77610779]
[112.82242584 179.80278015]
[117.22671509 165.41221619]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 103]
[2 102]
[3 101]
[8 33]
[9 32]
[10 31]
[11 30]
[12 29]
[13 28]
[14 27]
[34 81]
[35 80]
[36 79]
[37 78]
[38 76]
[39 75]
[40 74]
[41 73]
[42 72]
[49 64]
[50 63]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
