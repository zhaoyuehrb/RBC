%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 23:31:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUGGUGUCUCAGACAUUGAUGUACCUUUUCCCUGCCUCACUCCAGGUUUUAGUGAAGUAAACAGUAUUUGGAAAGUUG\
) } def
/len { sequence length } bind def

/coor [
[83.66349030 120.29895782]
[71.29336548 128.78306580]
[59.09008408 137.50544739]
[47.05823517 146.46281433]
[35.02638626 155.42019653]
[22.99453926 164.37757874]
[10.96269131 173.33496094]
[-1.06915665 182.29234314]
[-13.10100460 191.24971008]
[-25.13285255 200.20709229]
[-34.22716522 214.51547241]
[-50.49392700 209.73753357]
[-50.40579224 192.78381348]
[-34.09023285 188.17524719]
[-22.05838394 179.21786499]
[-10.02653599 170.26048279]
[2.00531244 161.30311584]
[14.03715992 152.34573364]
[26.06900787 143.38835144]
[38.10085678 134.43096924]
[50.13270569 125.47359467]
[53.70934677 118.78000641]
[62.80926132 116.41293335]
[75.17938232 107.92883301]
[75.27070618 91.79077148]
[84.84848785 78.80186462]
[100.23856354 73.94482422]
[115.53712463 79.08285522]
[127.56897736 70.12547302]
[139.60081482 61.16809464]
[151.63267517 52.21071625]
[163.66452026 43.25333786]
[175.69636536 34.29595947]
[181.42301941 9.30556202]
[205.62924194 2.87368298]
[213.87187195 -9.65863419]
[222.11450195 -22.19095230]
[223.23339844 -37.97254181]
[236.69157410 -44.35430908]
[244.93420410 -56.88662338]
[253.17684937 -69.41894531]
[261.41949463 -81.95125580]
[269.66210938 -94.48357391]
[263.30831909 -108.54176331]
[265.58618164 -123.80003357]
[275.76885986 -135.38952637]
[290.60711670 -139.61207581]
[305.36608887 -135.12028503]
[315.33627319 -123.34747314]
[317.33618164 -108.05028534]
[310.72766113 -94.11000824]
[297.61950684 -85.97493744]
[282.19442749 -86.24094391]
[273.95178223 -73.70862579]
[265.70916748 -61.17630768]
[257.46652222 -48.64398956]
[249.22389221 -36.11167145]
[248.69456482 -21.22647667]
[234.64682007 -13.94831657]
[226.40419006 -1.41599953]
[218.16156006 11.11631775]
[221.46168518 16.41817665]
[223.29055786 22.41776466]
[223.51101685 28.71315384]
[222.09420776 34.87881470]
[219.12237549 40.49437714]
[214.78425598 45.17329407]
[209.36318970 48.58943558]
[203.21853638 50.49980927]
[196.76199341 50.76178741]
[190.42987061 49.34368134]
[184.65374756 46.32780838]
[172.62190247 55.28518677]
[160.59004211 64.24256134]
[148.55819702 73.19994354]
[136.52635193 82.15732574]
[124.49450684 91.11470032]
[125.67489624 104.44171906]
[120.08599091 116.59765625]
[109.20132446 124.37754822]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 24]
[2 23]
[3 21]
[4 20]
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[10 14]
[28 77]
[29 76]
[30 75]
[31 74]
[32 73]
[33 72]
[35 61]
[36 60]
[37 59]
[39 57]
[40 56]
[41 55]
[42 54]
[43 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
