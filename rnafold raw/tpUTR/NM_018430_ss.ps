%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 22:40:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACUUGUGGGCAGCCUGCGUACUCCAGUCCUGCUAACCCCUAGCUUUUAAUAUAAAAGUGUUUGUCUGAAUCCA\
) } def
/len { sequence length } bind def

/coor [
[140.97671509 169.77378845]
[134.63955688 162.15083313]
[129.56895447 153.62921143]
[125.89011383 144.41749573]
[123.69418335 134.74137878]
[123.03597260 124.83802032]
[123.93255615 114.95034790]
[109.55614471 110.67030334]
[95.91285706 113.72846222]
[86.16381073 103.70610809]
[71.78739929 99.42606354]
[57.41098404 95.14601898]
[43.03457260 90.86597443]
[28.65815926 86.58592987]
[11.01357174 91.35842896]
[-0.70319766 78.46219635]
[-15.24420166 74.77991486]
[-29.78520584 71.09763336]
[-39.17115021 72.02373505]
[-44.84476471 66.95102692]
[-60.66178894 71.28159332]
[-72.12880707 59.55813217]
[-67.44953918 43.84074020]
[-51.43760681 40.29811859]
[-40.56472015 52.57461548]
[-26.10292244 56.55662537]
[-11.56191921 60.23891068]
[2.97908473 63.92119217]
[13.71008015 57.95738983]
[25.99110985 61.11945343]
[32.93820190 72.20951843]
[47.31461716 76.48956299]
[61.69102859 80.76960754]
[76.06744385 85.04965210]
[90.44385529 89.32969666]
[104.08714294 86.27153778]
[113.83618927 96.29389191]
[128.21260071 100.57393646]
[141.15643311 81.42906189]
[160.08312988 68.21549988]
[182.46340942 62.67537308]
[205.31491089 65.52696228]
[225.59963989 76.37160492]
[240.62789917 93.74929047]
[254.36450195 87.72386169]
[268.10110474 81.69842529]
[281.83770752 75.67299652]
[295.57431030 69.64756775]
[309.31088257 63.62213135]
[323.04748535 57.59670258]
[335.12374878 45.69711685]
[349.90133667 54.00730896]
[346.00677490 70.50787354]
[329.07293701 71.33330536]
[315.33633423 77.35873413]
[301.59973145 83.38416290]
[287.86312866 89.40959930]
[274.12652588 95.43502808]
[260.38992310 101.46045685]
[246.65332031 107.48589325]
[248.78132629 117.11508942]
[249.37974548 126.96148682]
[248.43298340 136.78355408]
[245.96331787 146.34022522]
[242.03041077 155.39680481]
[236.72990417 163.73068237]
[230.19104004 171.13691711]
[222.57353210 177.43313599]
[214.06367493 182.46415710]
[204.86978149 186.10572815]
[195.21705627 188.26760864]
[185.34213257 188.89584351]
[175.48722839 187.97407532]
[165.89422607 185.52398682]
[156.79870605 181.60475159]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 38]
[8 37]
[10 35]
[11 34]
[12 33]
[13 32]
[14 31]
[16 28]
[17 27]
[18 26]
[20 25]
[44 60]
[45 59]
[46 58]
[47 57]
[48 56]
[49 55]
[50 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
