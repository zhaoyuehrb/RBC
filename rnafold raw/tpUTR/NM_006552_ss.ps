%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 05:43:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUGUAAAAAGUUUUUAAUGCUAGUUUCCACCAUCUUUCAAUGAUACCCUGAUCUUCACUGCAGAAUGUAAAGGUUUCAACGUCUUGCUCUAAUAAAUCACUUGCCCUG\
) } def
/len { sequence length } bind def

/coor [
[26.01955605 405.25466919]
[18.15341377 418.11495972]
[7.43768311 428.71856689]
[-5.50463915 436.44900513]
[-19.92110252 440.85684204]
[-34.97355270 441.68582153]
[-49.78686142 438.88772583]
[-63.49979782 432.62521362]
[-75.31511688 423.26245117]
[-84.54588318 411.34368896]
[-90.65544128 397.56195068]
[-93.28857422 382.71844482]
[-92.29221344 367.67614746]
[-87.72428131 353.30960083]
[-79.85034180 340.45407104]
[-69.12818146 329.85696411]
[-56.18117905 322.13436890]
[-41.76204681 317.73526001]
[-26.70909500 316.91543579]
[-11.89748669 319.72250366]
[-5.66626215 306.07803345]
[-7.41725826 291.28671265]
[5.35363674 281.94781494]
[11.58486176 268.30334473]
[17.81608772 254.65885925]
[6.13299131 245.95068359]
[-3.47153974 234.98448181]
[-10.56969357 222.24484253]
[-14.84448814 208.29541016]
[-16.10392570 193.75401306]
[-14.28961372 179.26524353]
[-9.47947121 165.47187805]
[-1.88438332 152.98640442]
[8.16104507 142.36378479]
[20.21322632 134.07679749]
[33.73917770 128.49504089]
[48.14009857 125.86837769]
[62.77786636 126.31578064]
[77.00332642 129.81997681]
[83.62164307 116.35899353]
[90.23995972 102.89801788]
[90.70796204 94.72029877]
[97.24430084 89.15122986]
[104.24430847 75.88473511]
[111.24431610 62.61824036]
[102.26158142 50.32711411]
[99.51734924 35.41550446]
[103.50325012 20.85072517]
[113.37705231 9.50748253]
[127.13992310 3.60047817]
[142.04095459 4.25211430]
[149.04096985 -9.01437950]
[156.04098511 -22.28087425]
[163.04098511 -35.54736710]
[170.04100037 -48.81386185]
[177.04101562 -62.08035660]
[176.63796997 -77.89643097]
[189.42050171 -85.54209900]
[196.42051697 -98.80859375]
[189.45346069 -112.67365265]
[191.99989319 -127.98036194]
[203.08064270 -138.84297180]
[218.43495178 -141.08460999]
[232.15876770 -133.84329224]
[238.97499084 -119.90347290]
[236.26266479 -104.62528992]
[225.06472778 -93.88351440]
[209.68701172 -91.80858612]
[202.68699646 -78.54209137]
[203.59071350 -63.67492676]
[190.30751038 -55.08034515]
[183.30749512 -41.81385040]
[176.30747986 -28.54735756]
[169.30747986 -15.28086376]
[162.30746460 -2.01436973]
[155.30744934 11.25212383]
[164.25614929 23.18469810]
[167.14843750 37.87973404]
[163.35810852 52.43289185]
[153.58511353 63.94413376]
[139.72703552 70.09560394]
[124.51081085 69.61824799]
[117.51080322 82.88474274]
[110.51079559 96.15123749]
[103.70093536 109.51633453]
[97.08261871 122.97731018]
[90.46430206 136.43829346]
[102.50860596 146.14520264]
[112.10601807 158.26811218]
[118.78447723 172.20581055]
[122.21658325 187.26791382]
[122.23566437 202.70916748]
[118.84384155 217.76618958]
[112.21176910 231.69529724]
[102.67008972 243.80920410]
[90.69290924 253.51095581]
[76.87426758 260.32330322]
[61.89864349 263.91223145]
[46.50709915 264.10327148]
[31.46056747 260.89007568]
[25.22934151 274.53457642]
[18.99811745 288.17904663]
[20.30341339 303.94631958]
[7.97821808 312.30926514]
[1.74699283 325.95373535]
[13.56798363 335.30935669]
[22.80597496 347.22250366]
[28.92388535 361.00054932]
[31.56602478 375.84246826]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 105]
[21 104]
[23 102]
[24 101]
[25 100]
[39 87]
[40 86]
[41 85]
[43 84]
[44 83]
[45 82]
[51 76]
[52 75]
[53 74]
[54 73]
[55 72]
[56 71]
[58 69]
[59 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
