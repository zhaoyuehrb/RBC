%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 15:42:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGCUGCUCCUGGUACACGGGGGUACACACCUGUAUCCCUCCGUGAAUAAGCAUCUGGUGGACCCCCAGA\
) } def
/len { sequence length } bind def

/coor [
[154.93040466 209.83068848]
[147.43040466 196.84030151]
[139.93040466 183.84991455]
[132.43040466 170.85954285]
[119.36607361 163.70605469]
[119.16668701 147.88609314]
[111.66668701 134.89572144]
[104.16668701 121.90533447]
[96.66668701 108.91495514]
[91.71894836 106.31100464]
[88.73939514 101.00953674]
[89.13622284 94.44906616]
[82.79695129 80.85444641]
[69.52075195 77.65596771]
[60.71646500 67.47541809]
[59.50234222 54.26808548]
[66.10453033 42.99224472]
[60.36427689 29.13405037]
[54.62402725 15.27585793]
[48.88377380 1.41766453]
[43.14352417 -12.44052887]
[37.10232544 -26.17020035]
[30.76305008 -39.76481628]
[24.42377663 -53.35943604]
[17.78944588 -66.81252289]
[10.86321640 -80.11769104]
[3.93698716 -93.42285156]
[-2.98924208 -106.72801208]
[-17.10333633 -115.07812500]
[-16.65843582 -131.47123718]
[-2.11221409 -139.04351807]
[11.57142162 -130.00526428]
[10.31592083 -113.65424347]
[17.24214935 -100.34908295]
[24.16837883 -87.04391479]
[31.09460831 -73.73875427]
[37.16604996 -69.11766815]
[38.01839447 -59.69870758]
[44.35766602 -46.10409164]
[50.69694138 -32.50947571]
[56.56103516 -27.62795448]
[57.00171661 -18.18078041]
[62.74197006 -4.32258701]
[68.48222351 9.53560638]
[74.22247314 23.39379883]
[79.96272278 37.25199127]
[95.65782166 42.88175583]
[102.70127106 58.36252213]
[96.39156342 74.51517487]
[102.73084259 88.10979462]
[109.65706635 101.41495514]
[117.15706635 114.40533447]
[124.65706635 127.39571381]
[132.15707397 140.38609314]
[145.75785828 148.46875000]
[145.42079163 163.35954285]
[152.92079163 176.34991455]
[160.42079163 189.34030151]
[167.92079163 202.33068848]
[176.25434875 214.80271912]
[185.38577271 226.70303345]
[194.51718140 238.60333252]
[209.86683655 244.37568665]
[212.27532959 260.59701538]
[199.26501465 270.58016968]
[184.21978760 264.05535889]
[182.61688232 247.73474121]
[173.48545837 235.83444214]
[164.35404968 223.93414307]
[160.59657288 223.19181824]
[157.08598328 220.38815308]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 59]
[2 58]
[3 57]
[4 56]
[6 54]
[7 53]
[8 52]
[9 51]
[12 50]
[13 49]
[17 46]
[18 45]
[19 44]
[20 43]
[21 42]
[22 40]
[23 39]
[24 38]
[25 36]
[26 35]
[27 34]
[28 33]
[60 69]
[61 68]
[62 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
