%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 22:52:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCAGCCACCCGCGCCCAGCGCCCCGCGCCCCGCGCCCCAGCCGUGCUGCCUGCCCUCAGGGACCUAUAAAGCCCACUUUGCUAC\
) } def
/len { sequence length } bind def

/coor [
[188.12208557 159.53756714]
[175.13169861 152.03756714]
[162.14131165 144.53756714]
[149.15093994 137.03756714]
[136.16055298 129.53756714]
[123.17017365 122.03755951]
[114.49777222 128.50132751]
[104.16660309 131.70410156]
[93.35871124 131.27944946]
[83.31068420 127.27595520]
[75.17216492 120.15167236]
[69.87433624 110.72172546]
[68.02333832 100.06505585]
[53.43463516 96.57653809]
[38.84593201 93.08802795]
[24.25722885 89.59951782]
[12.46736431 99.51441956]
[-2.72248912 100.57354736]
[-15.47254848 92.57980347]
[-21.00450516 78.77634430]
[-35.59320831 75.28783417]
[-50.18191528 71.79931641]
[-64.77061462 68.31080627]
[-81.58162689 70.50769043]
[-88.34640503 54.96182251]
[-75.28075409 44.15788651]
[-61.28210449 53.72210312]
[-46.69340134 57.21061707]
[-32.10469818 60.69912720]
[-17.51599312 64.18763733]
[-6.33803511 54.37992477]
[8.64900303 53.01879120]
[21.71656036 60.83494568]
[27.74574089 75.01081085]
[42.33444595 78.49932861]
[56.92314911 81.98783875]
[71.51185608 85.47634888]
[77.60955811 77.17065430]
[86.03204346 71.23531342]
[95.90481567 68.28659058]
[97.52660370 53.37451935]
[99.14838409 38.46244812]
[100.77017212 23.55038071]
[96.47178650 7.15037346]
[111.04096222 -1.52000201]
[123.40564728 10.07960701]
[115.68224335 25.17216492]
[114.06045532 40.08423615]
[112.43867493 54.99630356]
[110.81688690 69.90837097]
[128.51763916 85.53433228]
[130.67016602 109.04718018]
[143.66055298 116.54718018]
[156.65093994 124.04718018]
[169.64131165 131.54718018]
[182.63169861 139.04718018]
[195.62208557 146.54718018]
[214.74671936 135.34716797]
[236.72325134 137.11491394]
[253.63391113 151.08096313]
[259.46200562 172.10493469]
[274.05072021 175.59346008]
[288.63943481 179.08197021]
[299.14334106 167.87644958]
[313.84738159 163.43949890]
[328.79626465 166.96464539]
[339.96881104 177.50361633]
[344.35961914 192.22151184]
[340.78765869 207.15925598]
[330.21371460 218.29870605]
[315.48211670 222.64338684]
[300.55563354 219.02459717]
[289.44940186 208.41578674]
[285.15090942 193.67066956]
[270.56222534 190.18215942]
[255.97351074 186.69364929]
[251.12690735 194.38973999]
[244.50592041 200.64866638]
[236.52162170 205.07081604]
[227.67248535 207.37095642]
[218.51329041 207.39666748]
[209.62025452 205.13830566]
[201.55490112 200.73023987]
[194.82850647 194.44279480]
[189.86973572 186.66572571]
[186.99731445 177.88403320]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 57]
[2 56]
[3 55]
[4 54]
[5 53]
[6 52]
[13 37]
[14 36]
[15 35]
[16 34]
[20 30]
[21 29]
[22 28]
[23 27]
[40 50]
[41 49]
[42 48]
[43 47]
[61 76]
[62 75]
[63 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
