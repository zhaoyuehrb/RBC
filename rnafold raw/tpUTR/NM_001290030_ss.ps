%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 22:49:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUUGCUGCAAUACUUGAAGCUUCAUGUAUUUUCAUUAAUGUAUACCAUGCAAAUAUAAAGACAAGUGACAUUUUA\
) } def
/len { sequence length } bind def

/coor [
[117.81201172 256.35653687]
[115.40584564 241.55078125]
[112.99967194 226.74502563]
[110.59350586 211.93927002]
[108.18733978 197.13351440]
[105.78116608 182.32775879]
[103.37500000 167.52201843]
[100.96882629 152.71626282]
[73.91760254 145.82194519]
[54.17805099 126.08239746]
[47.28374100 99.03117371]
[32.47798920 96.62500000]
[17.67223358 94.21883392]
[2.86648035 91.81266022]
[-11.93927383 89.40649414]
[-26.80188751 94.82989502]
[-38.12319565 85.15119171]
[-52.92894745 82.74502563]
[-67.73470306 80.33885193]
[-82.86795044 86.65682983]
[-95.74021149 76.49626923]
[-93.10960388 60.30948639]
[-77.68227386 54.74805450]
[-65.32852936 65.53310394]
[-50.52277756 67.93927002]
[-35.71702576 70.34543610]
[-21.91341782 64.74993134]
[-9.53310394 74.60073853]
[5.27264977 77.00691223]
[20.07840347 79.41307831]
[34.88415909 81.81925201]
[49.68991089 84.22541809]
[53.73831558 74.70574951]
[59.56756210 66.15978241]
[66.95325470 58.91648865]
[75.61107635 53.25470352]
[85.20774841 49.39237595]
[95.37384796 47.47818375]
[105.71802521 47.58581543]
[115.84209442 49.71112823]
[125.35632324 53.77230835]
[134.36746216 41.78066635]
[143.37858582 29.78902626]
[152.38972473 17.79738426]
[161.40086365 5.80574322]
[166.08239746 -10.48902798]
[183.03633118 -10.50129223]
[187.74143982 5.78668928]
[173.39250183 14.81687737]
[164.38136292 26.80851936]
[155.37022400 38.80015945]
[146.35910034 50.79180145]
[137.34796143 62.78344345]
[142.73043823 69.11227417]
[147.05194092 76.20803833]
[150.20515442 83.89454651]
[152.11177063 91.98095703]
[152.72448730 100.26647186]
[152.02806091 108.54537201]
[150.03979492 116.61209106]
[146.80905151 124.26634216]
[142.41604614 131.31805420]
[136.96987915 137.59216309]
[130.60574341 142.93286133]
[123.48168945 147.20755005]
[115.77458191 150.31008911]
[118.18074799 165.11584473]
[120.58692169 179.92160034]
[122.99308777 194.72735596]
[125.39926147 209.53311157]
[127.80542755 224.33885193]
[130.21159363 239.14460754]
[132.61776733 253.95036316]
[144.74189758 264.45678711]
[143.94296265 280.47994995]
[130.83383179 289.72821045]
[115.47072601 285.10714722]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 73]
[2 72]
[3 71]
[4 70]
[5 69]
[6 68]
[7 67]
[8 66]
[11 32]
[12 31]
[13 30]
[14 29]
[15 28]
[17 26]
[18 25]
[19 24]
[41 53]
[42 52]
[43 51]
[44 50]
[45 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
