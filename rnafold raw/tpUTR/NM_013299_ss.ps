%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 16:30:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGGAGCGUGAGCCUCCCAGAGCCCCAGGACUGGGCCAGAGCACUUAGGUUUCUUUUUCCAUGGUUUCCAGGUAAUAAAAGGAACUUGUUUUGUUGGUA\
) } def
/len { sequence length } bind def

/coor [
[142.15838623 159.61798096]
[127.15975952 159.82063293]
[113.52964020 153.55805969]
[103.91354370 142.04565430]
[93.80811310 153.13078308]
[83.70267487 164.21592712]
[73.59724426 175.30105591]
[63.49180603 186.38618469]
[53.55827332 197.62562561]
[51.07845306 213.83619690]
[35.70355606 219.54098511]
[23.24996376 208.87139893]
[26.52886200 192.80339050]
[42.16720200 187.86634827]
[44.16313934 180.61352539]
[52.40667343 176.28076172]
[62.51210785 165.19561768]
[72.61754608 154.11048889]
[82.72297668 143.02536011]
[92.82841492 131.94021606]
[90.99906158 124.66674042]
[76.57166290 120.56182861]
[87.34035492 110.11978912]
[85.51100159 102.84631348]
[71.36368561 97.86099243]
[57.21636581 92.87567139]
[43.06904984 87.89034271]
[29.70046234 96.00298309]
[14.25277519 93.57337189]
[4.01991558 81.74871826]
[3.83352637 66.11224365]
[13.78161526 54.04702377]
[29.16699791 51.24988174]
[42.72517014 59.04154587]
[48.05437469 73.74302673]
[62.20169067 78.72834778]
[76.34900665 83.71367645]
[90.49632263 88.69899750]
[105.38262939 86.85566711]
[117.88666534 78.57019806]
[130.39070129 70.28472137]
[142.89474487 61.99924850]
[155.39877319 53.71377182]
[167.90280151 45.42829895]
[180.40684509 37.14282227]
[182.33853149 32.80435562]
[185.31791687 29.71781921]
[188.78176880 28.06448936]
[192.16903687 27.80857468]
[194.99662781 28.71940994]
[208.42407227 22.03333473]
[221.85151672 15.34725857]
[235.27897644 8.66118336]
[248.70642090 1.97510827]
[262.13388062 -4.71096706]
[275.56130981 -11.39704227]
[288.98876953 -18.08311844]
[302.41622925 -24.76919365]
[315.84365845 -31.45526886]
[326.26235962 -50.04546738]
[346.75076294 -48.58795929]
[359.50399780 -56.48443985]
[365.27774048 -63.79146576]
[372.77383423 -64.42071533]
[385.76422119 -71.92071533]
[398.75460815 -79.42071533]
[409.44851685 -92.57656860]
[425.05059814 -85.94247437]
[422.99487305 -69.11361694]
[406.25460815 -66.43033600]
[393.26422119 -58.93033981]
[380.27383423 -51.43033981]
[367.40048218 -43.73118210]
[354.64724731 -35.83470154]
[354.00820923 -26.67550087]
[349.06472778 -18.77365303]
[340.86630249 -14.05351543]
[331.27209473 -13.73649597]
[322.52975464 -18.02781868]
[309.10229492 -11.34174347]
[295.67483521 -4.65566826]
[282.24740601 2.03040695]
[268.81994629 8.71648216]
[255.39250183 15.40255737]
[241.96504211 22.08863258]
[228.53759766 28.77470779]
[215.11015320 35.46078491]
[201.68269348 42.14685822]
[188.69232178 49.64685822]
[176.18827820 57.93233490]
[163.68424988 66.21781158]
[151.18020630 74.50328064]
[138.67617798 82.78875732]
[126.17214203 91.07423401]
[113.66810608 99.35970306]
[127.33003998 93.16684723]
[142.32743835 93.44613647]
[155.74934387 100.14335632]
[164.99057007 111.95858765]
[168.25741577 126.59851837]
[164.91580200 141.22157288]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 20]
[5 19]
[6 18]
[7 17]
[8 16]
[9 14]
[24 38]
[25 37]
[26 36]
[27 35]
[39 95]
[40 94]
[41 93]
[42 92]
[43 91]
[44 90]
[45 89]
[50 88]
[51 87]
[52 86]
[53 85]
[54 84]
[55 83]
[56 82]
[57 81]
[58 80]
[59 79]
[61 74]
[62 73]
[64 72]
[65 71]
[66 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
