%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 17:17:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUCUGUCCCCAUCUGGGAGGGUGGCAUUCUGGGACAUGAGGAGCAAAGGAAGGGGGCAAUAAAUGUUGAGCCAAGAGCUUCAAAUUACUCUAGAGAAACCGAC\
) } def
/len { sequence length } bind def

/coor [
[79.94400024 134.97898865]
[84.87821198 120.81376648]
[94.25562286 109.10397339]
[79.67527771 112.62726593]
[65.09493256 116.15055847]
[50.56840134 119.88951874]
[36.09886551 123.84332275]
[21.62933159 127.79713440]
[7.15979862 131.75094604]
[-7.30973482 135.70474243]
[-21.77926826 139.65855408]
[-35.76162338 145.08937073]
[-49.10647964 151.93881226]
[-62.45133591 158.78825378]
[-75.79619598 165.63768005]
[-89.14105225 172.48712158]
[-97.57235718 186.55287170]
[-113.96263123 186.01350403]
[-121.45096588 171.42388916]
[-112.33399963 157.79255676]
[-95.99048615 159.14227295]
[-82.64562988 152.29283142]
[-69.30077362 145.44338989]
[-55.95591736 138.59394836]
[-42.61106110 131.74452209]
[-56.50969696 126.10289001]
[-63.74884033 112.96535492]
[-61.09379959 98.20220184]
[-49.73093796 88.41009521]
[-34.73755646 87.96447754]
[-22.81320381 97.06446838]
[-19.28607559 111.64388275]
[-25.73307610 125.18901825]
[-11.26354218 121.23521423]
[3.20599127 117.28141022]
[17.67552567 113.32759857]
[32.14505768 109.37379456]
[46.61459351 105.41998291]
[52.32883453 100.54257965]
[61.57164383 101.57021332]
[76.15198517 98.04692078]
[90.73233032 94.52363586]
[104.07718658 87.67419434]
[115.43985748 77.88186646]
[126.80252075 68.08953094]
[122.45428467 52.48973465]
[125.29566193 36.60524368]
[134.71437073 23.57394218]
[148.80386353 15.94792652]
[164.74909973 15.19376469]
[179.38896179 21.41071320]
[190.45646667 11.28596783]
[201.52395630 1.16122246]
[212.59146118 -8.96352291]
[212.24574280 -28.89759254]
[226.27639771 -42.63859940]
[245.60243225 -41.89981461]
[255.72717285 -52.96731567]
[265.85192871 -64.03481293]
[260.12774658 -78.18390656]
[261.11810303 -93.41486359]
[268.62631226 -106.70355988]
[281.16162109 -115.41152191]
[296.23513794 -117.80977631]
[310.85403442 -113.42214966]
[322.11566162 -103.11980438]
[327.78405762 -88.94828033]
[326.73373413 -73.72134399]
[319.17324829 -60.46231842]
[306.60375977 -51.80378342]
[291.52090454 -49.46490479]
[276.91940308 -53.91006851]
[266.79467773 -42.84256744]
[256.66992188 -31.77507019]
[259.93658447 -21.75278282]
[258.65286255 -11.20775986]
[252.99067688 -2.12333965]
[243.95199585 3.76256251]
[233.19198608 5.28977633]
[222.71620178 2.10397673]
[211.64871216 12.22872162]
[200.58120728 22.35346603]
[189.51370239 32.47821045]
[194.17279053 45.63439941]
[193.43341064 59.61518478]
[187.37512207 72.28510284]
[176.89242554 81.69611359]
[163.56289673 86.38712311]
[149.40975952 85.61076355]
[136.59484863 79.45220184]
[125.23218536 89.24452972]
[113.86952209 99.03686523]
[128.84855652 98.24419403]
[143.23434448 102.49264526]
[155.37953186 111.29572296]
[163.89338684 123.64538574]
[167.80097961 138.12747192]
[166.65486145 153.08361816]
[160.58624268 166.80119324]
[150.29006958 177.70939636]
[136.94535828 184.55911255]
[122.08021545 186.56597900]
[107.39685822 183.50019836]
[94.57668304 175.71282959]
[85.08774567 164.09559631]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 42]
[4 41]
[5 40]
[6 38]
[7 37]
[8 36]
[9 35]
[10 34]
[11 33]
[12 25]
[13 24]
[14 23]
[15 22]
[16 21]
[43 92]
[44 91]
[45 90]
[51 83]
[52 82]
[53 81]
[54 80]
[57 74]
[58 73]
[59 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
