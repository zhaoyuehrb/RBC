%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 17:39:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGCACCCAGACUUCAAGGACCCAGACCCACCCUGGGGGGCUGCAAGGGCAAGAAGAGGAGGCUCCAGGGUUGGGGCGAGGGCCGACCUGUCCACCCUUCCCUGGAAUCUGCUCAAUAAAGCCUGGGGUUGGUCCCCCACCCGCCA\
) } def
/len { sequence length } bind def

/coor [
[90.60322571 200.58264160]
[82.94516754 186.08139038]
[91.90245819 172.34461975]
[92.22084045 157.34799194]
[92.53921509 142.35137939]
[86.07072449 138.55551147]
[78.60155487 151.56364441]
[71.13238525 164.57177734]
[63.66321945 177.57991028]
[56.19404984 190.58804321]
[52.49200439 205.12402344]
[37.54829788 206.42234802]
[31.39484787 192.74261475]
[42.27930069 182.42254639]
[49.99290848 169.55784607]
[57.70652008 156.69316101]
[65.42012787 143.82847595]
[73.13373566 130.96377563]
[66.66523743 127.16791534]
[53.72825241 134.75964355]
[52.34958649 150.21534729]
[42.12424088 161.88676453]
[26.98406601 165.28599548]
[12.75076866 159.10595703]
[4.89734221 145.72300720]
[6.44358921 130.28315735]
[16.79494667 118.72335815]
[31.97110558 115.48857880]
[46.13652420 121.82265472]
[59.07351303 114.23092651]
[59.01196671 95.25724792]
[66.89889526 79.01421356]
[80.40860748 68.46596527]
[96.28831482 65.14126587]
[111.11771393 68.94275665]
[119.25166321 56.33963013]
[127.38561249 43.73649979]
[135.51956177 31.13336754]
[143.65350342 18.53023720]
[151.78746033 5.92710781]
[159.92140198 -6.67602253]
[168.05534363 -19.27915192]
[176.18930054 -31.88228226]
[176.20799255 -51.99507523]
[193.66999817 -60.20499039]
[189.90846252 -75.32083130]
[197.79183960 -88.33262634]
[212.22566223 -91.82552338]
[219.81739807 -104.76251221]
[227.40911865 -117.69950104]
[235.00085449 -130.63648987]
[225.83328247 -144.03907776]
[223.42024231 -160.03810120]
[228.19268799 -175.43746948]
[239.15121460 -187.18307495]
[254.07489014 -192.96849060]
[269.97119141 -191.68778992]
[277.28662109 -204.78300476]
[284.60202026 -217.87820435]
[284.57754517 -233.69940186]
[297.53933716 -241.03704834]
[304.85476685 -254.13226318]
[312.17019653 -267.22747803]
[312.14569092 -283.04864502]
[325.10748291 -290.38629150]
[332.42291260 -303.48150635]
[339.73834229 -316.57672119]
[347.05374146 -329.67193604]
[354.36917114 -342.76715088]
[361.68460083 -355.86236572]
[369.00003052 -368.95758057]
[364.91848755 -383.99017334]
[372.52392578 -397.16635132]
[386.88037109 -400.96484375]
[394.19577026 -414.06005859]
[401.51119995 -427.15524292]
[393.41180420 -443.31301880]
[396.55239868 -460.95339966]
[409.50265503 -473.10900879]
[426.99563599 -475.09246826]
[433.74868774 -488.48635864]
[440.50173950 -501.88024902]
[436.86523438 -517.50573730]
[446.92703247 -530.00128174]
[462.96859741 -529.78149414]
[472.68417358 -517.01483154]
[468.62084961 -501.49487305]
[453.89562988 -495.12719727]
[447.14257812 -481.73330688]
[440.38952637 -468.33941650]
[447.52258301 -458.42047119]
[449.74783325 -446.33367920]
[446.57788086 -434.38464355]
[438.56045532 -424.87963867]
[427.18508911 -419.68041992]
[414.60641479 -419.83984375]
[407.29098511 -406.74462891]
[399.97555542 -393.64941406]
[404.26824951 -379.43292236]
[397.03591919 -366.04830933]
[382.09524536 -361.64215088]
[374.77981567 -348.54693604]
[367.46438599 -335.45172119]
[360.14895630 -322.35650635]
[352.83352661 -309.26129150]
[345.51812744 -296.16607666]
[338.20269775 -283.07086182]
[338.75042725 -268.18634033]
[325.26538086 -259.91204834]
[317.94998169 -246.81683350]
[310.63455200 -233.72161865]
[311.18228149 -218.83709717]
[297.69723511 -210.56278992]
[290.38180542 -197.46757507]
[283.06640625 -184.37236023]
[291.60900879 -173.39550781]
[295.32202148 -159.94596863]
[293.61029053 -146.05497742]
[286.70053101 -133.83360291]
[275.61199951 -125.15193176]
[262.00613403 -121.35292816]
[247.93783569 -123.04476929]
[240.34611511 -110.10778046]
[232.75437927 -97.17079163]
[225.16265869 -84.23380280]
[229.15260315 -69.92939758]
[221.63781738 -56.70130539]
[206.60697937 -52.61326218]
[210.07823181 -42.91284180]
[207.54786682 -32.69834518]
[199.62496948 -25.44199944]
[188.79241943 -23.74833488]
[180.65847778 -11.14520454]
[172.52453613 1.45792556]
[164.39057922 14.06105614]
[156.25663757 26.66418648]
[148.12268066 39.26731491]
[139.98873901 51.87044525]
[131.85479736 64.47357941]
[123.72084045 77.07670593]
[134.65850830 91.98620605]
[136.29473877 111.78025055]
[126.73974609 130.74230957]
[107.53583527 142.66975403]
[107.21746063 157.66636658]
[106.89907837 172.66299438]
[115.26528931 186.76754761]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 146]
[4 145]
[5 144]
[19 30]
[20 29]
[35 140]
[36 139]
[37 138]
[38 137]
[39 136]
[40 135]
[41 134]
[42 133]
[43 132]
[45 128]
[48 125]
[49 124]
[50 123]
[51 122]
[57 115]
[58 114]
[59 113]
[61 111]
[62 110]
[63 109]
[65 107]
[66 106]
[67 105]
[68 104]
[69 103]
[70 102]
[71 101]
[74 98]
[75 97]
[76 96]
[80 90]
[81 89]
[82 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
