%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 08:41:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACCACCCUGGCCUGCUGUCCUGCGUCUAUCCAUGUGGAAUGCUGGACAAUAAAGCGAGUGCUGCCCACCCUCCAGCUGCC\
) } def
/len { sequence length } bind def

/coor [
[102.31390381 251.90393066]
[88.87944794 245.23194885]
[78.88400269 234.04754639]
[73.75752258 219.95075989]
[74.23341370 204.95831299]
[80.24359131 191.21504211]
[90.92823029 180.68705750]
[104.75878143 174.88052368]
[119.75662231 174.62611389]
[133.77766418 179.96118164]
[126.76863098 166.69944763]
[113.98091125 159.06246948]
[114.37319183 143.24612427]
[107.36415863 129.98439026]
[91.41223145 129.65711975]
[77.75361633 121.41011810]
[70.03574371 107.44567871]
[70.31962585 91.49292755]
[78.52945709 77.81192780]
[71.02945709 64.82154846]
[63.52945709 51.83116531]
[56.02945709 38.84078598]
[48.52945709 25.85040474]
[34.92867279 17.76775551]
[35.26573563 2.87696385]
[27.76573563 -10.11341763]
[20.26573563 -23.10379791]
[12.76573467 -36.09418106]
[5.02414083 -48.94204712]
[-2.95634031 -61.64291000]
[-10.93682194 -74.34377289]
[-18.91730309 -87.04463959]
[-33.66098022 -94.22489166]
[-34.54446793 -110.60021973]
[-20.65891457 -119.32509613]
[-6.28858280 -111.42410278]
[-6.21643972 -95.02511597]
[1.76404142 -82.32425690]
[9.74452305 -69.62339020]
[17.72500420 -56.92252731]
[24.10567665 -52.83507538]
[25.75611496 -43.59418106]
[33.25611496 -30.60379791]
[40.75611496 -17.61341667]
[48.25611496 -4.62303638]
[61.32044983 2.53045440]
[61.51983643 18.35040474]
[69.01983643 31.34078598]
[76.51983643 44.33116531]
[84.01983643 57.32154846]
[91.51983643 70.31192780]
[105.21781921 69.56861877]
[117.88576508 74.83267975]
[127.02293396 85.06494904]
[130.82557678 98.24550629]
[128.54302979 111.77241516]
[120.62589264 122.97536469]
[127.63491821 136.23709106]
[140.92398071 144.82264709]
[140.03036499 159.69041443]
[147.03939819 172.95214844]
[154.32682800 177.29948425]
[157.22026062 184.34454346]
[169.61384583 192.79434204]
[182.00741577 201.24414062]
[194.40100098 209.69395447]
[208.56286621 203.57469177]
[223.78115845 206.10585022]
[235.19979858 216.47978210]
[239.17514038 231.38615417]
[234.43865967 246.06843567]
[222.50173950 255.84153748]
[207.17343140 257.58691406]
[193.34492493 250.74761963]
[185.42884827 237.50604248]
[185.95120239 222.08752441]
[173.55761719 213.63772583]
[161.16404724 205.18792725]
[148.77046204 196.73812866]
[152.50201416 211.26657104]
[150.57064819 226.14170837]
[143.25267029 239.23548889]
[131.59501648 248.67471313]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 61]
[11 60]
[13 58]
[14 57]
[19 51]
[20 50]
[21 49]
[22 48]
[23 47]
[25 45]
[26 44]
[27 43]
[28 42]
[29 40]
[30 39]
[31 38]
[32 37]
[63 79]
[64 78]
[65 77]
[66 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
