%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 07:15:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACCUGCACUAAAUUACUCAAAAUGUGCUGUAAAGUUUCUUCUUUCCAGUAAAGACUAGCCAUUGCAUUGGCUCCUUCUCCCAUA\
) } def
/len { sequence length } bind def

/coor [
[101.78263092 118.19810486]
[96.99311066 132.41290283]
[100.75740051 148.37417603]
[88.63284302 159.41624451]
[73.09214020 154.17996216]
[70.12223053 138.05198669]
[82.77831268 127.62338257]
[87.56783295 113.40858459]
[81.69638824 127.21170807]
[71.93518066 138.60112000]
[59.19334412 146.51602173]
[44.65765762 150.21923828]
[29.68195343 149.36582947]
[15.66105652 144.03530884]
[3.90086222 134.72415161]
[-4.50329733 122.29956818]
[-8.76866531 107.91879272]
[-8.49797058 92.92124176]
[-3.71642375 78.70375824]
[5.13062525 66.59055328]
[17.21916962 57.70983887]
[31.42329597 52.88875580]
[46.42004013 52.57633972]
[60.81262589 56.80168533]
[73.26053619 65.17124176]
[82.60438538 76.90548706]
[87.97405243 90.91225433]
[83.70083618 76.53380585]
[79.42762756 62.15536499]
[75.15441895 47.77692032]
[70.88120270 33.39847565]
[59.53311157 22.37434959]
[63.32404327 7.97025061]
[59.05083084 -6.40819359]
[54.77761841 -20.78663826]
[50.50440598 -35.16508102]
[36.49087906 -42.47238159]
[31.82862473 -57.57333755]
[39.28367233 -71.50882721]
[54.43307877 -76.01116180]
[68.28897095 -68.40919495]
[72.63088989 -53.21303558]
[64.88285065 -39.43829346]
[69.15606689 -25.05985069]
[73.42927551 -10.68140602]
[77.70248413 3.69703841]
[88.74493408 13.69272137]
[85.25965118 29.12526321]
[89.53285980 43.50370789]
[93.80606842 57.88215256]
[98.07928467 72.26059723]
[102.35249329 86.63903809]
[112.07646179 85.40397644]
[122.74009705 91.37160492]
[137.62045288 93.26235199]
[152.50080872 95.15309906]
[166.00485229 84.20968628]
[182.92765808 86.26280212]
[193.01872253 99.58457947]
[207.95764160 100.93687439]
[222.89656067 102.28916931]
[237.83547974 103.64146423]
[252.77439880 104.99376678]
[264.74963379 94.68023682]
[280.50375366 95.93854523]
[290.69009399 108.02217102]
[289.26528931 123.76210022]
[277.07464600 133.82012939]
[261.35067749 132.22898865]
[251.42208862 119.93268585]
[236.48316956 118.58038330]
[221.54425049 117.22808838]
[206.60533142 115.87579346]
[191.66642761 114.52349854]
[182.90898132 124.15722656]
[169.99406433 126.95875549]
[157.67181396 121.66489410]
[150.61006165 110.03345490]
[135.72970581 108.14271545]
[120.84934998 106.25196838]
[135.28070068 110.34294891]
[144.18818665 122.41177368]
[143.84419250 137.40783691]
[134.39265442 149.05551147]
[119.78890228 152.48045349]
[106.14435577 146.24937439]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 8]
[2 7]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[33 46]
[34 45]
[35 44]
[36 43]
[54 80]
[55 79]
[56 78]
[59 74]
[60 73]
[61 72]
[62 71]
[63 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
