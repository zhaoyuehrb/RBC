%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 19:58:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCCCCAUCUGUUGGUCAUCCAUCCUGAAGGGACAGGAAACCUCCCAGGCAGUUAUUUUUUUUUCUCUAUAUUUCUAGUAAAGUUUUCGAUAUGUUUCUGAUUCUUUUGUAUCUCUAGCUGAGUUUAA\
) } def
/len { sequence length } bind def

/coor [
[71.37640381 133.91091919]
[62.45375061 124.55679321]
[50.53508377 133.66423035]
[44.26757431 148.19107056]
[29.45697021 149.77070618]
[17.53830528 158.87814331]
[5.61963987 167.98558044]
[-0.64787018 182.51240540]
[-15.45847511 184.09204102]
[-27.37714005 193.19947815]
[-26.71953964 210.05252075]
[-36.11236191 223.86105347]
[-51.71629715 229.33059692]
[-67.35831451 224.50579834]
[-79.05342865 233.89857483]
[-90.74854279 243.29135132]
[-96.17949677 258.76510620]
[-112.34348297 261.53231812]
[-122.61238861 248.74630737]
[-116.42243958 233.56024170]
[-100.14131927 231.59623718]
[-88.44620514 222.20346069]
[-76.75109100 212.81068420]
[-78.62706757 199.53594971]
[-73.63480377 186.97654724]
[-62.98775482 178.47665405]
[-49.42000198 176.35671997]
[-36.48457718 181.28082275]
[-24.56591225 172.17338562]
[-19.15090561 158.29797363]
[-3.48779750 156.06690979]
[8.43086720 146.95947266]
[20.34953308 137.85203552]
[25.76453972 123.97663116]
[41.42764664 121.74556732]
[53.34631348 112.63813019]
[51.71831512 97.72673798]
[38.11520004 91.40572357]
[24.51208305 85.08470154]
[8.23404980 87.07408905]
[-1.41029537 73.81065369]
[5.50032330 58.93869019]
[21.85685349 57.75719452]
[30.83310127 71.48159027]
[44.43621445 77.80260468]
[58.03932953 84.12362671]
[68.60269165 69.33326721]
[83.87296295 60.23140335]
[101.11771393 58.07558060]
[117.39520264 62.91230392]
[130.05604553 73.62180328]
[142.98558044 66.01740265]
[155.91513062 58.41300583]
[168.84468079 50.80860901]
[181.77421570 43.20421219]
[194.70376587 35.59981155]
[191.39239502 25.10945129]
[190.10054016 14.19256783]
[190.87095642 3.23409629]
[193.67366028 -7.38009024]
[198.40721130 -17.27677155]
[204.90229797 -26.10849953]
[212.92782593 -33.56579971]
[222.19914246 -39.38801193]
[232.38810730 -43.37240219]
[243.13475037 -45.38122177]
[254.05993652 -45.34647369]
[264.77877808 -43.27218628]
[270.76925659 -57.02407074]
[276.75973511 -70.77595520]
[270.74478149 -85.39087677]
[276.90292358 -99.94604492]
[291.58059692 -105.80613708]
[306.06985474 -99.49446869]
[311.77444458 -84.75563049]
[305.30993652 -70.33392334]
[290.51159668 -64.78548431]
[284.52114868 -51.03360367]
[278.53067017 -37.28171921]
[294.82913208 -22.71823311]
[304.59936523 -3.16629887]
[319.44195557 -5.33363438]
[334.28454590 -7.50097036]
[349.12716675 -9.66830635]
[358.56930542 -22.05714989]
[373.65267944 -24.04369926]
[385.40536499 -14.96569920]
[400.24795532 -17.13303566]
[412.78536987 -26.78311729]
[426.49703979 -20.96595955]
[441.33963013 -23.13329697]
[450.58081055 -35.95422363]
[466.19424438 -38.40298080]
[478.91674805 -29.02676582]
[481.20028687 -13.38832092]
[471.69009399 -0.76565695]
[456.02838135 1.35242295]
[443.50695801 -8.29069996]
[428.66436768 -6.12336445]
[417.18859863 3.37169528]
[402.41528320 -2.29043913]
[387.57269287 -0.12310338]
[378.90655518 11.93648052]
[363.88491821 14.34590530]
[351.29449463 5.17428970]
[336.45190430 7.34162569]
[321.60928345 9.50896168]
[306.76669312 11.67629719]
[304.84381104 27.65135002]
[298.61257935 42.50222778]
[288.54229736 55.08964157]
[275.39703369 64.44554138]
[260.17773438 69.84755707]
[244.04602051 70.87477112]
[228.23551941 67.44049835]
[213.95751953 59.79956055]
[202.30816650 48.52935791]
[189.37861633 56.13375473]
[176.44908142 63.73815536]
[163.51953125 71.34255219]
[150.58998108 78.94695282]
[137.66044617 86.55134583]
[140.42143250 97.87789154]
[139.80894470 109.66117096]
[135.79382324 120.90603638]
[128.63764954 130.63969421]
[118.87705994 137.99583435]
[107.28411102 142.29142761]
[94.80541229 143.08955383]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 36]
[3 35]
[5 33]
[6 32]
[7 31]
[9 29]
[10 28]
[14 23]
[15 22]
[16 21]
[37 46]
[38 45]
[39 44]
[51 122]
[52 121]
[53 120]
[54 119]
[55 118]
[56 117]
[68 79]
[69 78]
[70 77]
[81 108]
[82 107]
[83 106]
[84 105]
[87 102]
[88 101]
[90 99]
[91 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
