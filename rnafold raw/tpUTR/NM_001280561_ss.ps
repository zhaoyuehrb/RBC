%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 10:04:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUGAGGGCCUCCCCCACCUCGGGACUGUGUUCUCGGUAACCUCCCAGCCCCACUCUGGGGCAGAUCAAAUGUGAGUCCCACUCACUGGCCUUCCUUUCAAUAAAGCUGCCUCAGCUUCCA\
) } def
/len { sequence length } bind def

/coor [
[151.47752380 266.85296631]
[147.36746216 251.69401550]
[148.12553406 235.98669434]
[153.68998718 221.25776672]
[163.53126526 208.94261169]
[155.21763611 196.45729065]
[146.90400696 183.97195435]
[138.59037781 171.48661804]
[130.27673340 159.00129700]
[121.96310425 146.51596069]
[113.64947510 134.03062439]
[94.70803833 140.46766663]
[73.09645844 136.02032471]
[55.11909866 119.92434692]
[46.98249435 95.01876068]
[34.18788910 102.84806824]
[21.39328575 110.67738342]
[16.25533485 125.87544250]
[1.12113333 131.19854736]
[-12.39965248 122.56328583]
[-13.93503380 106.59387207]
[-2.30719781 95.54067993]
[13.56397533 97.88277435]
[26.35857964 90.05346680]
[39.15318298 82.22415924]
[35.73538208 67.61872864]
[20.79527664 66.27958679]
[5.85517359 64.94044495]
[-9.08493042 63.60131073]
[-21.05109406 73.92538452]
[-36.80631256 72.68094635]
[-47.00329590 60.60630035]
[-45.59235382 44.86511612]
[-33.41057205 34.79636383]
[-17.68518829 36.37365341]
[-7.74579191 48.66120529]
[7.19431210 50.00034332]
[22.13441658 51.33948135]
[37.07452011 52.67861938]
[41.84634018 46.89245224]
[29.37718010 38.55458069]
[16.90802383 30.21670914]
[4.10305786 22.40435410]
[5.88005829 7.50998449]
[20.16357803 2.92947292]
[30.27122498 14.01287651]
[40.83060074 24.66649628]
[51.38997650 35.32011414]
[56.16179276 29.53394508]
[52.00268555 15.12208080]
[47.84358215 0.71021682]
[43.68447495 -13.70164776]
[39.52536774 -28.11351204]
[35.36626053 -42.52537537]
[25.16521835 -56.06697845]
[35.35367966 -69.61804962]
[51.19561768 -63.57906723]
[49.77812576 -46.68448257]
[53.93723297 -32.27261734]
[58.09634018 -17.86075401]
[62.25544357 -3.44888949]
[66.41455078 10.96297455]
[70.57365417 25.37483978]
[77.66400909 27.81961823]
[80.92346191 13.17803669]
[77.00110626 -1.30005383]
[85.50028992 -13.65982246]
[100.42315674 -15.17900562]
[111.23867798 -4.78551865]
[110.31435394 10.18597507]
[98.30200958 19.17022514]
[91.84470367 32.70917892]
[98.93505096 35.15395737]
[111.09278870 26.36820221]
[123.25052643 17.58244896]
[135.40826416 8.79669285]
[147.56599426 0.01093829]
[159.72372437 -8.77481651]
[169.02014160 -22.95271873]
[185.21748352 -17.94443893]
[184.88879395 -0.99367821]
[168.50947571 3.38291788]
[156.35174561 12.16867256]
[144.19401550 20.95442772]
[132.03628540 29.74018288]
[119.87854767 38.52593613]
[107.72080994 47.31169128]
[142.61959839 85.68795776]
[126.13480377 125.71699524]
[134.44844055 138.20233154]
[142.76206970 150.68765259]
[151.07569885 163.17298889]
[159.38934326 175.65832520]
[167.70297241 188.14364624]
[176.01660156 200.62898254]
[189.86244202 196.47500610]
[204.30184937 196.40751648]
[218.15521240 200.42301941]
[230.29335022 208.18478394]
[239.72955322 219.05114746]
[245.69978333 232.12846375]
[247.72454834 246.34471130]
[245.64736938 260.53723145]
[239.64691162 273.54797363]
[230.22152710 284.31781006]
[238.21359253 297.01138306]
[246.20565796 309.70495605]
[254.19772339 322.39852905]
[262.18978882 335.09210205]
[270.18185425 347.78567505]
[283.73764038 357.96786499]
[277.70602417 373.81259155]
[260.81079102 372.40295410]
[257.48828125 355.77774048]
[249.49620056 343.08416748]
[241.50413513 330.39059448]
[233.51206970 317.69702148]
[225.52001953 305.00344849]
[217.52795410 292.30987549]
[202.43876648 296.30642700]
[186.83277893 295.46176147]
[172.22698975 289.84600830]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 95]
[6 94]
[7 93]
[8 92]
[9 91]
[10 90]
[11 89]
[15 25]
[16 24]
[17 23]
[26 39]
[27 38]
[28 37]
[29 36]
[49 63]
[50 62]
[51 61]
[52 60]
[53 59]
[54 58]
[73 87]
[74 86]
[75 85]
[76 84]
[77 83]
[78 82]
[105 119]
[106 118]
[107 117]
[108 116]
[109 115]
[110 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
