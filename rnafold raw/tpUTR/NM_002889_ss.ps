%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 07:04:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAGCACUGAGAUGCGUGGUGCCUCCAGGACCGCUGCGGGUGGUAACCAGUGGAAGACCCCAGCCCCCAGGGAGAGGAACCCGUUCUAUCCCCAGCCAUGAUAAUAAAGCUGCUCUCCCAGCUGCCUCUCA\
) } def
/len { sequence length } bind def

/coor [
[93.55643463 288.21444702]
[99.67403412 274.12649536]
[112.02555084 264.99765015]
[110.25808716 250.10215759]
[108.49063110 235.20664978]
[106.72316742 220.31114197]
[93.65708923 213.21075439]
[87.20107269 199.61723328]
[90.02030945 184.65376282]
[101.23959351 174.09754944]
[99.47213745 159.20204163]
[97.70467377 144.30653381]
[95.93721771 129.41102600]
[78.27925110 124.29747009]
[65.60457611 108.75107574]
[51.36078262 113.45366669]
[37.17352295 118.32416534]
[23.04477501 123.36186981]
[8.91602802 128.39958191]
[-5.21271944 133.43728638]
[-19.34146690 138.47499084]
[-26.45538521 144.35935974]
[-33.86383438 143.46052551]
[-48.10762405 148.16311646]
[-58.61334610 160.75526428]
[-74.72288513 157.68688965]
[-79.86412048 142.11448669]
[-68.74819946 130.05760193]
[-52.81022263 133.91932678]
[-38.56643295 129.21673584]
[-24.37917328 124.34624481]
[-10.25042629 119.30853271]
[3.87832117 114.27082825]
[18.00706863 109.23312378]
[32.13581467 104.19541168]
[37.43004608 98.93574524]
[46.65818405 99.20987701]
[60.90197372 94.50727844]
[65.77246857 80.32002258]
[57.42050934 67.86029816]
[49.06855392 55.40056610]
[41.61787796 49.94886017]
[40.67054367 42.54645538]
[32.61520004 29.89294052]
[24.55985641 17.23942566]
[19.65672684 31.41543770]
[6.26245928 38.16774368]
[-8.05007362 33.67871094]
[-15.18882942 20.48635864]
[-11.11768818 6.04939795]
[1.86160219 -1.46977866]
[16.40968132 2.17922020]
[10.22243690 -11.48526001]
[4.03519344 -25.14974022]
[-10.84124660 -30.48519325]
[-17.51209641 -44.81262589]
[-12.01965904 -59.63182449]
[2.37750006 -66.15082550]
[17.13780212 -60.50201416]
[23.50422096 -46.03673935]
[17.69967461 -31.33698273]
[23.88691711 -17.67250252]
[30.07416153 -4.00802326]
[37.21337128 9.18408298]
[45.26871490 21.83759880]
[53.32405853 34.49111176]
[61.52828217 47.04861069]
[69.88024139 59.50833893]
[78.23219299 71.96806335]
[99.51837921 64.18722534]
[121.39057922 70.86923218]
[131.41876221 59.71416473]
[141.44692993 48.55909348]
[151.47511292 37.40402222]
[154.94714355 21.96849060]
[169.20991516 17.67631721]
[179.23808289 6.52124596]
[189.26626587 -4.63382578]
[199.29444885 -15.78889751]
[199.88146973 -31.82120705]
[212.86718750 -41.24198532]
[228.29003906 -36.82441330]
[234.31895447 -21.95727730]
[226.32907104 -8.04537201]
[210.44952393 -5.76071835]
[200.42134094 5.39435339]
[190.39315796 16.54942513]
[180.36499023 27.70449638]
[177.61022949 42.34214020]
[162.63018799 47.43220139]
[152.60200500 58.58727264]
[142.57382202 69.74234009]
[132.54565430 80.89741516]
[137.41613770 95.08467102]
[152.18136597 97.72815704]
[166.94659424 100.37164307]
[181.71182251 103.01512146]
[190.61227417 90.61573029]
[204.01528931 83.31356049]
[219.25971985 82.55846405]
[233.31875610 88.50036621]
[243.40097046 99.95949554]
[247.50454712 114.66063690]
[244.81468201 129.68486023]
[235.86549377 142.04910278]
[222.43380737 149.29844666]
[207.18652344 149.99349976]
[193.15100098 143.99627686]
[183.11398315 132.49754333]
[179.06834412 117.78035736]
[164.30311584 115.13687134]
[149.53788757 112.49338531]
[134.77265930 109.84989929]
[124.38075256 122.11363983]
[110.83272552 127.64357758]
[112.60018158 142.53907776]
[114.36763763 157.43458557]
[116.13510132 172.33009338]
[129.51321411 179.96765137]
[135.75590515 193.85585022]
[132.66030884 208.58274841]
[121.61867523 218.54368591]
[123.38613892 233.43919373]
[125.15359497 248.33470154]
[126.92105103 263.23019409]
[141.06591797 269.21505737]
[150.31050110 281.48016357]
[152.16804504 296.72631836]
[146.13888550 310.85235596]
[133.84483337 320.05844116]
[118.59294128 321.86819458]
[104.48587799 315.79479980]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 125]
[4 124]
[5 123]
[6 122]
[10 118]
[11 117]
[12 116]
[13 115]
[15 38]
[16 37]
[17 35]
[18 34]
[19 33]
[20 32]
[21 31]
[23 30]
[24 29]
[39 69]
[40 68]
[41 67]
[43 66]
[44 65]
[45 64]
[52 63]
[53 62]
[54 61]
[71 93]
[72 92]
[73 91]
[74 90]
[76 88]
[77 87]
[78 86]
[79 85]
[94 113]
[95 112]
[96 111]
[97 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
