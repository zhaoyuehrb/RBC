%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 02:50:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGACUACAUUGGAAGCUUUGAGUUGACUUCUGACAAAGGUGGUAAAUUCAGACAACAUUAUGAUCUAAUAAACUUUAUUUUUUAAAAAUGA\
) } def
/len { sequence length } bind def

/coor [
[104.82659912 126.58503723]
[101.63701630 111.91783142]
[92.73932648 123.99388885]
[94.90625763 139.41926575]
[85.71070099 151.53933716]
[70.99160767 153.51011658]
[73.60705566 169.09649658]
[64.36731720 181.91845703]
[48.75416565 184.36897278]
[36.03060532 174.99418640]
[33.74530411 159.35600281]
[43.25408173 146.73226929]
[58.91555786 144.61242676]
[56.43694687 129.97029114]
[65.28845215 117.59670258]
[80.66326904 115.09619141]
[89.56096649 103.02014160]
[89.31574249 101.06158447]
[89.43039703 99.11481476]
[79.74597931 87.66003418]
[70.06156158 76.20525360]
[60.37714767 64.75046539]
[50.69272995 53.29568481]
[41.00831223 41.84090424]
[31.32389259 30.38611984]
[21.63947487 18.93133736]
[6.82109308 13.38822079]
[4.51261806 -1.32640457]
[-5.17179966 -12.78118801]
[-14.85621738 -24.23596954]
[-29.67459869 -29.77908516]
[-31.98307419 -44.49371338]
[-41.66749191 -55.94849396]
[-57.43558502 -57.01752853]
[-67.76630402 -68.97795868]
[-66.53061676 -84.73386383]
[-54.46163940 -94.93755341]
[-38.71967316 -93.53535461]
[-28.64415741 -81.35916901]
[-30.21270943 -65.63291168]
[-20.52829170 -54.17813110]
[-6.40260363 -49.45433807]
[-3.40143442 -33.92038727]
[6.28298330 -22.46560478]
[15.96740150 -11.01082230]
[30.09308815 -6.28702974]
[33.09425735 9.24691868]
[42.77867508 20.70170212]
[52.46309280 32.15648270]
[62.14751053 43.61126709]
[71.83193207 55.06605148]
[81.51634979 66.52083588]
[91.20076752 77.97561646]
[100.88518524 89.43039703]
[103.08579254 74.59269714]
[107.39910889 60.22623444]
[113.73529816 46.63018036]
[121.96241760 34.08767319]
[131.90913391 22.85990715]
[143.36831665 13.18069744]
[156.10133362 5.25161219]
[169.84301758 -0.76222855]
[184.30718994 -4.73558712]
[199.19265747 -6.58571911]
[214.18942261 -6.27409697]
[228.98516846 -3.80720878]
[243.27180481 0.76357204]
[256.75180054 7.34306049]
[269.14443970 15.79424000]
[280.19165039 25.94111824]
[289.66339111 37.57238770]
[297.36239624 50.44582748]
[303.12832642 64.29335785]
[306.84112549 78.82659912]
[308.42346191 93.74290466]
[307.84237671 108.73164368]
[305.11001587 123.48068237]
[300.28326416 137.68287659]
[293.46258545 151.04246521]
[284.79006958 163.28123474]
[274.44631958 174.14433289]
[262.64672852 183.40551758]
[249.63700867 190.87193298]
[235.68811035 196.38809204]
[221.09049988 199.83912659]
[206.14816284 201.15316772]
[191.17228699 200.30285645]
[176.47473145 197.30589294]
[162.36155701 192.22468567]
[149.12669373 185.16505432]
[137.04574585 176.27401733]
[126.37028503 165.73670959]
[117.32263947 153.77259827]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 17]
[3 16]
[6 13]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[26 47]
[28 45]
[29 44]
[30 43]
[32 41]
[33 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
