%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 08:46:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUCCAGUAUAUUUGUAAAAAAUAAAAAAAAAAACUAAACCCAUUAAAAAGUAUUUGUUUGCA\
) } def
/len { sequence length } bind def

/coor [
[63.64488983 197.80201721]
[60.43293762 212.63601685]
[52.07595825 225.30587769]
[39.70415497 234.09808350]
[24.99072266 237.82357788]
[9.92552567 235.97851562]
[-3.45398974 228.81240845]
[-13.33835411 217.29443359]
[-18.39078712 202.98228455]
[-17.92798996 187.81158447]
[-12.01255322 173.83403015]
[-1.44448888 162.93997192]
[12.34695816 156.60275269]
[27.49660683 155.67941284]
[41.95559311 160.29483032]
[51.34837341 148.59971619]
[60.74114990 136.90460205]
[70.13392639 125.20948792]
[79.52670288 113.51437378]
[88.91948700 101.81925964]
[98.02692413 89.90059662]
[106.84370422 77.76534271]
[115.66047668 65.63008881]
[124.47725677 53.49483109]
[133.29403687 41.35957718]
[123.29322052 30.09912682]
[115.94727325 16.95183945]
[111.59978485 2.53263783]
[110.45408630 -12.48406792]
[112.56377411 -27.39591789]
[117.83016968 -41.50545883]
[126.00695038 -54.15276337]
[136.71168518 -64.74629211]
[149.44367981 -72.79056549]
[163.60745239 -77.90933990]
[178.54051208 -79.86319733]
[193.54443359 -78.56076050]
[207.91744995 -74.06294250]
[220.98731995 -66.58010864]
[232.14271545 -56.46225357]
[240.86190796 -44.18260193]
[246.73707581 -30.31549835]
[249.49340820 -15.50953102]
[249.00201416 -0.45720235]
[245.28585815 14.13746357]
[238.51875305 27.59184647]
[229.01722717 39.27666092]
[217.22566223 48.64538956]
[203.69557190 55.25983429]
[189.05979919 58.81063461]
[174.00286865 59.13170242]
[159.22903442 56.20802689]
[145.42929077 50.17635345]
[136.61251831 62.31161118]
[127.79573059 74.44686127]
[118.97895813 86.58212280]
[110.16217804 98.71737671]
[108.24403381 106.87706757]
[100.61460114 111.21203613]
[91.22182465 122.90715027]
[81.82904053 134.60226440]
[72.43626404 146.29737854]
[63.04348755 157.99249268]
[53.65071106 169.68762207]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 64]
[16 63]
[17 62]
[18 61]
[19 60]
[20 59]
[21 57]
[22 56]
[23 55]
[24 54]
[25 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
