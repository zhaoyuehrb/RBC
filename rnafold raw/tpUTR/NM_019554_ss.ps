%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 09:09:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUCCUCUGAUGUGGUUGGGGGGUCUGCCAGCUGGGGCCCUCCCUGUCGCCAGUGGGCACUUUUUUUUUUCCACCCUGGCUCCUUCAGACACGUGCUUGAUGCUGAGCAAGUUCAAUAAAGAUUCUUGGAAGUUUUGA\
) } def
/len { sequence length } bind def

/coor [
[100.35251617 205.10568237]
[99.35063171 190.13917542]
[98.34873962 175.17268372]
[97.34684753 160.20617676]
[96.34496307 145.23966980]
[95.17640686 130.28526306]
[93.84132385 115.34478760]
[86.48650360 102.27165985]
[74.41045380 93.37397003]
[62.33440399 84.47627258]
[50.25835037 75.57857513]
[38.18230057 66.68087769]
[22.48258591 64.72396851]
[16.82584953 50.94533539]
[1.12613523 48.98842239]
[-4.53060055 35.20979309]
[-16.60665131 26.31209755]
[-28.68270302 17.41440201]
[-40.75875473 8.51670551]
[-52.83480453 -0.38099104]
[-64.91085815 -9.27868748]
[-76.98690796 -18.17638397]
[-89.06295776 -27.07407951]
[-101.23738098 -35.83669281]
[-113.50866699 -44.46313858]
[-136.54981995 -37.53125000]
[-157.21157837 -49.37450409]
[-162.75920105 -72.28173828]
[-176.50286865 -78.29105377]
[-190.24652100 -84.30037689]
[-203.99017334 -90.30969238]
[-219.73422241 -88.74908447]
[-228.29577637 -100.93714905]
[-242.03944397 -106.94647217]
[-255.78309631 -112.95578766]
[-269.52676392 -118.96511078]
[-283.27041626 -124.97442627]
[-297.08016968 -130.83026123]
[-310.95428467 -136.53190613]
[-324.82839966 -142.23353577]
[-338.59402466 -134.81452942]
[-353.89739990 -138.03022766]
[-363.51275635 -150.36225891]
[-362.89999390 -165.98783875]
[-352.34844971 -177.52902222]
[-336.84024048 -179.53643799]
[-323.69787598 -171.06222534]
[-319.12677002 -156.10765076]
[-305.25265503 -150.40602112]
[-291.37850952 -144.70439148]
[-283.93603516 -145.07429504]
[-277.26107788 -138.71807861]
[-263.51742554 -132.70877075]
[-249.77377319 -126.69944763]
[-236.03012085 -120.69012451]
[-222.28646851 -114.68080902]
[-207.52545166 -116.67124939]
[-197.98085022 -104.05335236]
[-184.23719788 -98.04402924]
[-170.49354553 -92.03471375]
[-156.74989319 -86.02539825]
[-151.84431458 -91.03315735]
[-145.88604736 -94.76129913]
[-139.20248413 -96.99480438]
[-132.16329956 -97.60106659]
[-125.15997314 -96.53772736]
[-118.58398438 -93.85552216]
[-112.80499268 -89.69593048]
[-108.15000916 -84.28373718]
[-104.88493347 -77.91487885]
[-103.19932556 -70.94027710]
[-103.19548035 -63.74652481]
[-104.88221741 -56.73442459]
[-92.61093140 -48.10797882]
[-85.27067566 -46.82418442]
[-80.16526031 -39.15013123]
[-68.08921051 -30.25243378]
[-56.01315689 -21.35473824]
[-43.93710709 -12.45704174]
[-31.86105728 -3.55934572]
[-19.78500557 5.33835030]
[-7.70895529 14.23604679]
[4.36709547 23.13374329]
[19.20305061 24.45423317]
[25.72354698 38.86928558]
[40.55950165 40.18977737]
[47.07999802 54.60482788]
[59.15604782 63.50252533]
[71.23210144 72.40022278]
[83.30815125 81.29792023]
[95.38420105 90.19561005]
[104.16827393 80.88392639]
[121.61466980 81.74210358]
[136.53933716 80.24066925]
[149.49572754 71.16088867]
[162.93354797 77.58538818]
[177.85821533 76.08395386]
[192.78288269 74.58251953]
[207.70755005 73.08108521]
[222.63221741 71.57964325]
[232.43748474 59.18479538]
[248.14480591 57.43668747]
[260.43530273 67.37245178]
[262.01724243 83.09736633]
[251.95208740 95.28212738]
[236.21131897 96.69772339]
[224.13365173 86.50431061]
[209.20898438 88.00575256]
[194.28431702 89.50718689]
[179.35966492 91.00862122]
[164.43499756 92.51005554]
[152.54611206 101.48244476]
[138.04077148 95.16533661]
[123.11610413 96.66677094]
[136.93356323 102.50440979]
[150.75100708 108.34204102]
[165.70840454 107.21220398]
[179.80157471 112.34856415]
[190.52433777 122.83773041]
[195.96981812 136.81437683]
[195.16964722 151.79301453]
[188.26611328 165.10997009]
[176.48689270 174.39706421]
[161.92669678 178.00273132]
[147.17480469 175.28579712]
[134.85458374 166.72940063]
[127.15693665 153.85516357]
[125.45075989 138.95256042]
[117.11627197 126.48113251]
[108.78179169 114.00971222]
[110.11686707 128.95018005]
[114.02507782 137.29777527]
[111.31146240 144.23777771]
[112.31335449 159.20428467]
[113.31523895 174.17079163]
[114.31713104 189.13728333]
[115.31902313 204.10379028]
[124.89338684 217.41783142]
[117.90454102 232.25320435]
[101.54201508 233.34854126]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 137]
[2 136]
[3 135]
[4 134]
[5 133]
[6 131]
[7 130]
[8 91]
[9 90]
[10 89]
[11 88]
[12 87]
[14 85]
[16 83]
[17 82]
[18 81]
[19 80]
[20 79]
[21 78]
[22 77]
[23 76]
[24 74]
[25 73]
[28 61]
[29 60]
[30 59]
[31 58]
[33 56]
[34 55]
[35 54]
[36 53]
[37 52]
[38 50]
[39 49]
[40 48]
[93 114]
[94 113]
[96 111]
[97 110]
[98 109]
[99 108]
[100 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
