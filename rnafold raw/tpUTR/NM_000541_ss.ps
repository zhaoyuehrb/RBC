%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 12:24:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUGUCGGCUCAGGAUGCCGGAAAAUGACCUGUAGUUACCAGUGCAACGAGCAAAGCCCCACAGUUUAGUCCUUUGGAGUUAUGCUGCGUAUGAAAGGAUGAGUCUUCUUCCGAGAAAUAAAGCUUGUUUGUUCUCCCCUGG\
) } def
/len { sequence length } bind def

/coor [
[48.55252457 203.35317993]
[41.15934372 223.16683960]
[27.01792526 238.85551453]
[8.12321568 248.23524475]
[-12.87003231 250.01002502]
[-33.02023315 243.95083618]
[-41.62388229 256.23809814]
[-50.22752762 268.52539062]
[-58.83117294 280.81268311]
[-67.43482208 293.09994507]
[-63.21302032 308.15686035]
[-69.70439148 322.38345337]
[-83.84391022 329.06237793]
[-98.95532990 325.04003906]
[-107.90348816 312.21569824]
[-106.46335602 296.64456177]
[-95.31490326 285.67889404]
[-79.72209930 284.49630737]
[-71.11845398 272.20901489]
[-62.51480865 259.92175293]
[-53.91116333 247.63446045]
[-45.30751419 235.34718323]
[-51.87502289 228.18873596]
[-57.11435699 220.00227356]
[-60.86760712 211.03150940]
[-63.02112579 201.54377747]
[-63.50897217 191.82215881]
[-62.31492615 182.15699768]
[-59.47302628 172.83723450]
[-55.06659317 164.14178467]
[-49.22579575 156.33116150]
[-42.12380600 149.63967896]
[-33.97166443 144.26844788]
[-25.01199913 140.37930298]
[-15.51182270 138.08993530]
[-5.75455952 137.47036743]
[3.96840215 138.54072571]
[13.36641502 141.27067566]
[22.15825844 145.58024597]
[30.08055687 151.34217834]
[41.35815430 141.45199585]
[52.63574982 131.56179810]
[63.91334915 121.67161560]
[58.55728531 107.37609863]
[58.65196228 92.11044312]
[64.18492126 77.88246155]
[74.42844391 66.56347656]
[88.03526306 59.64221954]
[86.40225983 44.73137665]
[84.76925659 29.82053185]
[82.97370148 14.92838669]
[81.01580811 0.05671336]
[79.05791473 -14.81495953]
[77.10002136 -29.68663216]
[67.62763214 -42.35882187]
[73.63749695 -55.98712921]
[71.67960358 -70.85880280]
[69.72171021 -85.73047638]
[60.24931717 -98.40266418]
[66.25918579 -112.03097534]
[64.30129242 -126.90264893]
[62.34339523 -141.77432251]
[52.87100601 -154.44651794]
[58.88087082 -168.07481384]
[56.92297745 -182.94648743]
[43.63804245 -191.19540405]
[38.81263351 -206.06985474]
[44.72516251 -220.54660034]
[58.58391571 -227.79014587]
[73.84520721 -224.38032532]
[83.30313110 -211.92713928]
[82.49193573 -196.31060791]
[71.79464722 -184.90438843]
[73.75254059 -170.03271484]
[83.08489227 -158.42424011]
[77.21507263 -143.73220825]
[79.17296600 -128.86053467]
[81.13085175 -113.98886871]
[90.46320343 -102.38040161]
[84.59338379 -87.68836975]
[86.55127716 -72.81669617]
[88.50917053 -57.94502258]
[97.84151459 -46.33655548]
[91.97169495 -31.64452553]
[93.92958832 -16.77285194]
[95.88748169 -1.90117955]
[97.84537506 12.97049332]
[101.86734772 19.23898125]
[99.68009949 28.18752861]
[101.31310272 43.09837341]
[102.94610596 58.00922012]
[111.20424652 58.68547058]
[119.30496979 60.99641037]
[126.92290497 64.90482330]
[133.74159241 70.30844116]
[139.46649170 77.04210663]
[143.83757019 84.88253784]
[146.64073181 93.55554962]
[161.55157471 91.92254639]
[176.46241760 90.28954315]
[189.33822632 81.09584808]
[202.83218384 87.40158081]
[217.74302673 85.76857758]
[230.64088440 75.64052582]
[245.75814819 81.99666595]
[247.54347229 98.29833984]
[234.16027832 107.77578735]
[219.37603760 100.67942047]
[204.46519470 102.31242371]
[192.65589905 111.38931274]
[178.09541321 105.20038605]
[163.18457031 106.83338928]
[148.27372742 108.46639252]
[143.45213318 122.67034149]
[154.28759766 133.04304504]
[165.12304688 143.41574097]
[175.95851135 153.78843689]
[186.79397583 164.16113281]
[195.22483826 167.87339783]
[197.74954224 174.88026428]
[208.35615540 185.48686218]
[218.96275330 196.09346008]
[229.56935120 206.70005798]
[245.54783630 208.13793945]
[254.26548767 221.60575867]
[249.03485107 236.77217102]
[233.86843872 242.00279236]
[220.40061951 233.28515625]
[218.96275330 217.30667114]
[208.35615540 206.70005798]
[197.74954224 196.09346008]
[187.14294434 185.48686218]
[176.42127991 174.99658203]
[165.58581543 164.62388611]
[154.75035095 154.25119019]
[143.91490173 143.87849426]
[133.07943726 133.50579834]
[113.22397614 143.45289612]
[91.81565857 142.98507690]
[73.80353546 132.94921875]
[62.52593994 142.83940125]
[51.24834061 152.72958374]
[39.97074509 162.61976624]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 22]
[7 21]
[8 20]
[9 19]
[10 18]
[40 143]
[41 142]
[42 141]
[43 140]
[48 91]
[49 90]
[50 89]
[51 87]
[52 86]
[53 85]
[54 84]
[56 82]
[57 81]
[58 80]
[60 78]
[61 77]
[62 76]
[64 74]
[65 73]
[98 113]
[99 112]
[100 111]
[102 109]
[103 108]
[114 137]
[115 136]
[116 135]
[117 134]
[118 133]
[120 132]
[121 131]
[122 130]
[123 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
