%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 01:28:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAAUCUGGAUUUUCUUUGGGCAUAACAGUCAGACUUGUUGAUAAUAUAUAUCAAGUUUUUAUUAUUAAUAUGCUGAGGAACUUGAAGAUUAAUAAAAUAUGCUCUUCAGAGAAUGAUAUAUAAAUAUUGCA\
) } def
/len { sequence length } bind def

/coor [
[109.13015747 488.62344360]
[99.57435608 476.98812866]
[92.64683533 463.62014771]
[88.65043640 449.10385132]
[87.75986481 434.07388306]
[90.01406097 419.18722534]
[95.31447601 405.09469604]
[103.42939758 392.41235352]
[114.00407410 381.69461060]
[126.57622528 373.41003418]
[140.59626770 367.92071533]
[138.14559937 353.12228394]
[135.69494629 338.32382202]
[133.24427795 323.52536011]
[130.79362488 308.72689819]
[128.34295654 293.92846680]
[125.89229584 279.13000488]
[111.83162689 269.98034668]
[108.63146210 253.17016602]
[118.73635101 238.94538879]
[115.93945312 224.20845032]
[113.14254761 209.47151184]
[110.34564972 194.73457336]
[107.54875183 179.99763489]
[104.75184631 165.26069641]
[101.95494843 150.52375793]
[77.99021912 145.51968384]
[59.18554306 129.84379578]
[49.94956589 107.17121887]
[52.44760513 82.81739807]
[66.09400940 62.49192429]
[57.79703903 49.99551010]
[49.50007248 37.49909592]
[41.20310593 25.00268555]
[33.77799606 19.51953506]
[32.86212540 12.11464405]
[18.95597458 4.56947374]
[18.71107864 -10.32311821]
[10.70933914 -23.01059914]
[2.70759964 -35.69808197]
[-5.29413939 -48.38556290]
[-13.29587841 -61.07304001]
[-21.29761696 -73.76052094]
[-29.29935646 -86.44800568]
[-37.30109406 -99.13548279]
[-45.30283356 -111.82296753]
[-53.30457306 -124.51044464]
[-61.30631256 -137.19792175]
[-76.37195587 -134.97387695]
[-91.03795624 -139.07611084]
[-102.76334381 -148.79388428]
[-109.51662445 -162.44354248]
[-110.12775421 -177.66018677]
[-104.49085236 -191.80744934]
[-93.58253479 -202.43423462]
[-79.29274750 -207.69938660]
[-64.09727478 -206.69068909]
[-50.62882614 -199.58288574]
[-41.22089005 -187.60746765]
[-37.50344849 -172.83924866]
[-40.12057495 -157.83689880]
[-48.61883163 -145.19966125]
[-40.61709213 -132.51219177]
[-32.61535263 -119.82470703]
[-24.61361504 -107.13722229]
[-16.61187553 -94.44974518]
[-8.61013699 -81.76226044]
[-0.60839766 -69.07478333]
[7.39334154 -56.38729858]
[15.39508057 -43.69981766]
[23.39682007 -31.01233864]
[31.39855957 -18.32485771]
[44.73236847 -11.68717957]
[45.54960632 4.11290550]
[53.69951630 16.70571709]
[61.99648666 29.20212936]
[70.29344940 41.69854355]
[78.59041595 54.19495773]
[85.54891205 51.54756927]
[92.82072449 49.95072174]
[100.24819946 49.43904114]
[107.67029572 50.02361679]
[114.92608643 51.69178009]
[121.85825348 54.40735626]
[128.31648254 58.11146927]
[134.16076660 62.72380829]
[139.26437378 68.14436340]
[143.51664734 74.25561523]
[146.82540894 80.92504883]
[149.11889648 88.00806427]
[150.34739685 95.35108948]
[150.48426819 102.79491425]
[149.52653503 110.17813873]
[147.49497986 117.34068298]
[144.43363953 124.12724304]
[140.40888977 130.39068604]
[135.50801086 135.99519348]
[129.83723450 140.81925964]
[123.51953125 144.75828552]
[116.69188690 147.72685242]
[119.48878479 162.46379089]
[122.28569031 177.20072937]
[125.08258820 191.93766785]
[127.87948608 206.67460632]
[130.67639160 221.41154480]
[133.47329712 236.14848328]
[145.44931030 242.43324280]
[151.50366211 254.30873108]
[149.61116028 267.30624390]
[140.69075012 276.67935181]
[143.14141846 291.47778320]
[145.59207153 306.27624512]
[148.04273987 321.07470703]
[150.49339294 335.87316895]
[152.94406128 350.67160034]
[155.39471436 365.47006226]
[170.43585205 366.14675903]
[185.00750732 369.93627930]
[198.47268677 376.67294312]
[210.24272156 386.06228638]
[219.80311584 397.69384766]
[226.73588562 411.05911255]
[230.73799133 425.57382202]
[231.63447571 440.60345459]
[229.38613892 455.49099731]
[224.09127808 469.58560181]
[215.98133850 482.27111816]
[205.41087341 492.99301147]
[192.84197998 501.28256226]
[178.82411194 506.77737427]
[163.97006226 509.23724365]
[148.92919922 508.55462646]
[134.35902405 504.75939941]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 116]
[12 115]
[13 114]
[14 113]
[15 112]
[16 111]
[17 110]
[20 106]
[21 105]
[22 104]
[23 103]
[24 102]
[25 101]
[26 100]
[31 78]
[32 77]
[33 76]
[34 75]
[36 74]
[38 72]
[39 71]
[40 70]
[41 69]
[42 68]
[43 67]
[44 66]
[45 65]
[46 64]
[47 63]
[48 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
