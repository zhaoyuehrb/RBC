%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:59:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAGCUUAACACUACCAAUUUCCCAUUUUGGAACCUAAUAAAUAUUUAGUCUGCAUUGCUGGCAA\
) } def
/len { sequence length } bind def

/coor [
[120.30091858 190.85308838]
[105.62976837 192.92317200]
[90.81601715 192.63943481]
[76.23490906 190.00906372]
[62.25578308 185.09867859]
[49.23275375 178.03266907]
[37.49570465 168.99003601]
[27.34194183 158.19981384]
[19.02867126 145.93533325]
[12.76647568 132.50727844]
[8.71398163 118.25579071]
[6.97384071 103.54186249]
[7.59013414 88.73822021]
[10.54724979 74.21984100]
[15.77028179 60.35449982]
[23.12692451 47.49341583]
[11.46236229 38.06272125]
[-0.20220074 28.63202858]
[-11.86676407 19.20133591]
[-26.47977257 24.14739609]
[-41.44150543 20.38573265]
[-51.97772598 9.11667728]
[-54.72636414 -6.06385326]
[-48.81034470 -20.31180954]
[-36.11743927 -29.08071709]
[-20.69791603 -29.57245255]
[-7.47208405 -21.63010406]
[-0.66025943 -7.78804493]
[-2.43607068 7.53677320]
[9.22849274 16.96746635]
[20.89305496 26.39815903]
[32.55761719 35.82885361]
[43.86273956 25.73682404]
[56.65546799 17.61272812]
[70.59679413 11.67184639]
[85.31729889 8.07160759]
[100.42687988 6.90741777]
[115.52514648 8.21012688]
[130.21200562 11.94521332]
[144.09826660 18.01369858]
[156.81594849 26.25477409]
[168.02804565 36.45005417]
[177.43743896 48.32937241]
[184.79478455 61.57793045]
[189.90512085 75.84465027]
[192.63301086 90.75147247]
[192.90618896 105.90337372]
[190.71742249 120.89884186]
[186.12467957 135.34049988]
[179.24967957 148.84565735]
[191.34346008 157.71923828]
[203.43724060 166.59281921]
[219.14083862 168.51841736]
[224.82505798 182.28572083]
[236.91883850 191.15930176]
[253.26600647 195.65441895]
[253.47190857 212.60711670]
[237.23873901 217.49795532]
[228.04524231 203.25308228]
[215.95146179 194.37950134]
[201.11291504 193.08862305]
[194.56365967 178.68659973]
[182.46987915 169.81301880]
[170.37609863 160.93943787]
[159.81658936 171.33293152]
[147.74188232 179.91947937]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 32]
[17 31]
[18 30]
[19 29]
[50 64]
[51 63]
[52 62]
[54 60]
[55 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
