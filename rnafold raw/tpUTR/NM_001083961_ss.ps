%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 12:41:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGCAGCCCCUCCACCGCAGCCCUGCUGCUUCUGAGGACUUAGGUAUUUUAAGCGAAUAAACUGACAGCUUUGAGGAAUG\
) } def
/len { sequence length } bind def

/coor [
[78.02395630 178.41505432]
[71.44271851 191.89421082]
[64.86148071 205.37335205]
[58.28024673 218.85249329]
[56.76414108 235.73851013]
[40.11833191 238.95617676]
[32.41839981 223.85162354]
[44.80110550 212.27125549]
[51.38233948 198.79211426]
[57.96357727 185.31297302]
[64.54481506 171.83381653]
[60.92357635 151.66479492]
[78.14427948 139.20875549]
[83.15583801 125.07071686]
[88.16740417 110.93267059]
[84.87678528 104.19309998]
[69.91286469 103.15335846]
[78.29554749 90.71395874]
[75.00492859 83.97438812]
[60.77457809 79.23126984]
[46.54422760 74.48815155]
[32.31387711 69.74504089]
[18.08352852 65.00192261]
[1.14520335 65.72956848]
[-4.24300194 49.65463638]
[9.71211624 40.02701950]
[22.82664299 50.77157593]
[37.05699539 55.51469040]
[51.28734207 60.25780487]
[65.51769257 65.00092316]
[79.74804688 69.74403381]
[97.48458862 77.44801331]
[103.22639465 91.62458801]
[115.71811676 83.32056427]
[122.92726898 69.23728180]
[137.80969238 68.63492584]
[150.30140686 60.33089828]
[162.79313660 52.02687073]
[163.56565857 36.64151001]
[173.13755798 24.79954338]
[187.67507935 20.91054153]
[201.54895020 26.26347351]
[214.04066467 17.95944786]
[226.53239441 9.65542126]
[239.02410889 1.35139596]
[246.67610168 -15.26841354]
[264.10266113 -15.97095394]
[276.27120972 -24.74173737]
[288.43972778 -33.51251984]
[300.60827637 -42.28330231]
[312.77682495 -51.05408478]
[316.75543213 -66.59597015]
[331.44567871 -73.04389954]
[345.57849121 -65.45156860]
[348.31234741 -49.64316940]
[337.55010986 -37.74554825]
[321.54760742 -38.88554764]
[309.37905884 -30.11476326]
[297.21054077 -21.34398079]
[285.04199219 -12.57319736]
[272.87344360 -3.80241370]
[270.55407715 8.22925091]
[260.26995850 15.60803413]
[247.32814026 13.84311962]
[234.83641052 22.14714432]
[222.34469604 30.45116997]
[209.85296631 38.75519562]
[209.41880798 53.61956787]
[200.20616150 65.51877594]
[185.58236694 69.76119232]
[171.09715271 64.51859283]
[158.60543823 72.82262421]
[146.11370850 81.12664795]
[139.79804993 94.61596680]
[124.02214813 95.81228638]
[111.53041840 104.11631012]
[102.30544281 115.94423676]
[97.29388428 130.08227539]
[92.28231812 144.22032166]
[97.67279816 152.49588013]
[98.48038483 162.19856262]
[94.64412689 170.99450684]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[3 9]
[4 8]
[13 79]
[14 78]
[15 77]
[19 31]
[20 30]
[21 29]
[22 28]
[23 27]
[33 76]
[34 75]
[36 73]
[37 72]
[38 71]
[42 67]
[43 66]
[44 65]
[45 64]
[47 61]
[48 60]
[49 59]
[50 58]
[51 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
