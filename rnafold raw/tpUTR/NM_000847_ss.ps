%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 22:39:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAGCAGCCAUGGAGGCUAAGAACAUGCAAGACCAAUAUUCUAAAGUUUUGCAACAAUGAAGUGCUUUACUUAAGUGUUGAUUGUGCCUGUUGUAAAGCUAAUGAACCCUUUCCAAUUAUAUGCUAAUUAAAUAAUAAAAACUCCUAUUUGCUAACUUAGUUAA\
) } def
/len { sequence length } bind def

/coor [
[89.17552948 302.77490234]
[93.83474731 288.32998657]
[103.40048218 276.54602051]
[116.57905579 269.01678467]
[114.31668854 254.18836975]
[112.05432129 239.35997009]
[109.79196167 224.53155518]
[107.52959442 209.70314026]
[95.13042450 204.68783569]
[86.77028656 194.10897827]
[84.72393036 180.67204285]
[89.63358307 167.88171387]
[100.31291199 159.12782288]
[98.33157349 144.25926208]
[96.35022736 129.39068604]
[94.36888123 114.52212524]
[86.78707886 101.57931519]
[74.78669739 92.57982635]
[62.78631973 83.58033752]
[44.47658539 81.82411194]
[38.17716599 65.46485901]
[22.45782280 63.67241287]
[16.65714836 49.95376205]
[4.48860836 41.18297577]
[-7.67993164 32.41219330]
[-19.84847069 23.64141083]
[-35.56781387 21.84896660]
[-41.36848831 8.13031387]
[-53.53702927 -0.64046961]
[-65.70556641 -9.41125298]
[-81.42491150 -11.20369720]
[-87.22558594 -24.92234993]
[-99.39412689 -33.69313431]
[-115.11347198 -35.48557663]
[-120.91414642 -49.20423126]
[-133.08268738 -57.97501373]
[-145.25122070 -66.74579620]
[-157.41976929 -75.51657867]
[-169.58830261 -84.28736115]
[-181.75683594 -93.05814362]
[-193.92538452 -101.82892609]
[-204.59846497 -99.46150208]
[-214.59814453 -103.30352783]
[-220.68458557 -111.85000610]
[-221.03042603 -122.11629486]
[-232.85835266 -131.34127808]
[-244.68627930 -140.56625366]
[-256.51419067 -149.79122925]
[-271.35443115 -145.65913391]
[-285.61547852 -150.99537659]
[-293.90182495 -163.55725098]
[-293.21057129 -178.41189575]
[-305.03848267 -187.63687134]
[-316.86642456 -196.86184692]
[-325.59939575 -199.69023132]
[-328.82870483 -206.37503052]
[-344.51943970 -204.48387146]
[-356.89993286 -214.30723572]
[-358.62509155 -230.01708984]
[-348.67138672 -242.29304504]
[-332.94418335 -243.85200500]
[-320.77413940 -233.76907349]
[-319.38153076 -218.02626038]
[-307.64144897 -208.68977356]
[-295.81350708 -199.46479797]
[-283.98559570 -190.23982239]
[-269.74661255 -194.52815247]
[-255.54486084 -189.55084229]
[-246.89596558 -177.01887512]
[-247.28923035 -161.61915588]
[-235.46130371 -152.39418030]
[-223.63337708 -143.16918945]
[-211.80545044 -133.94421387]
[-192.53340149 -132.72578430]
[-185.15460205 -113.99746704]
[-172.98605347 -105.22668457]
[-160.81752014 -96.45590210]
[-148.64898682 -87.68511963]
[-136.48043823 -78.91433716]
[-124.31189728 -70.14355469]
[-112.14336395 -61.37277222]
[-97.29439545 -60.20767212]
[-90.62334442 -45.86167145]
[-78.45480347 -37.09088898]
[-63.60583496 -35.92578888]
[-56.93478394 -21.57979202]
[-44.76624680 -12.80900955]
[-32.59770584 -4.03822613]
[-17.74873924 -2.87312651]
[-11.07768822 11.47287083]
[1.09085155 20.24365425]
[13.25939178 29.01443672]
[25.42793083 37.78522110]
[40.27689743 38.95032120]
[46.94794846 53.29631805]
[58.96294403 51.67293167]
[69.18033600 58.91825867]
[71.78581238 71.57995605]
[83.78619385 80.57944489]
[95.78657532 89.57893372]
[89.56983185 75.92784882]
[77.60117340 66.88621521]
[69.52825928 54.24390030]
[66.36080170 39.58214188]
[68.49497223 24.73473930]
[75.66382599 11.55872154]
[86.97074890 1.70206714]
[101.00151825 -3.60241151]
[116.00125122 -3.69126177]
[130.09387207 1.44662952]
[141.51676941 11.16864491]
[148.84121704 24.25881195]
[151.15112305 39.07989120]
[148.15757751 53.77814484]
[140.23469543 66.51554108]
[127.50023651 74.44232178]
[142.47607422 73.59114075]
[157.45190430 72.73995972]
[172.42773438 71.88877869]
[187.40356445 71.03760529]
[199.11549377 60.07357025]
[214.96832275 62.53684998]
[222.80108643 76.53781891]
[216.60517883 91.33614349]
[201.13356018 95.57980347]
[188.25474548 86.01343536]
[173.27891541 86.86460876]
[158.30308533 87.71578979]
[143.32723999 88.56697083]
[128.35140991 89.41815186]
[123.57292175 95.19880676]
[137.12353516 101.63162231]
[150.67413330 108.06443787]
[165.38665771 110.98707581]
[174.89071655 122.59193420]
[174.85633850 137.59188843]
[165.29916382 149.15306091]
[150.57339478 152.00820923]
[137.38803101 144.85655212]
[131.75027466 130.95709229]
[122.88310242 118.85861206]
[114.01593781 106.76012421]
[109.23744965 112.54077911]
[111.21879578 127.40934753]
[113.20013428 142.27790833]
[115.18148041 157.14648438]
[130.15248108 164.97294617]
[137.45094299 180.02413940]
[134.38674927 196.29968262]
[122.35800171 207.44078064]
[124.62036896 222.26919556]
[126.88272858 237.09759521]
[129.14509583 251.92601013]
[131.40745544 266.75442505]
[146.23167419 270.01129150]
[158.87614441 278.40661621]
[167.63082886 290.80502319]
[171.31172180 305.52966309]
[169.42102051 320.58920288]
[162.21441650 333.94696045]
[150.66654968 343.79635620]
[136.33915710 348.80541992]
[121.16992950 348.29666138]
[107.21035767 342.33889771]
[96.34837341 331.73788452]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 154]
[5 153]
[6 152]
[7 151]
[8 150]
[13 146]
[14 145]
[15 144]
[16 143]
[17 100]
[18 99]
[19 98]
[21 95]
[23 93]
[24 92]
[25 91]
[26 90]
[28 88]
[29 87]
[30 86]
[32 84]
[33 83]
[35 81]
[36 80]
[37 79]
[38 78]
[39 77]
[40 76]
[41 75]
[45 73]
[46 72]
[47 71]
[48 70]
[52 66]
[53 65]
[54 64]
[56 63]
[116 130]
[117 129]
[118 128]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
