%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 07:41:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCUUUGAAGCCUGAAGCCAUGAAAAUGCAGAUGAAGCUCCCAGUGGAUUCCCACACUCUAUCAAUAAACACCUCUGGCUGA\
) } def
/len { sequence length } bind def

/coor [
[19.42798996 288.48818970]
[6.40254545 293.20846558]
[-7.31405640 291.80999756]
[-15.29453754 304.51086426]
[-23.27501869 317.21173096]
[-23.34716225 333.61071777]
[-37.71749496 341.51171875]
[-51.60305023 332.78683472]
[-50.71955872 316.41149902]
[-35.97588348 309.23126221]
[-27.99540138 296.53039551]
[-20.01491928 283.82952881]
[-27.89229012 269.85147095]
[-27.71510124 253.71449280]
[-19.43781853 239.75271606]
[-5.20294189 231.76260376]
[11.21279335 231.97084045]
[18.71279335 218.98045349]
[26.21279335 205.99008179]
[33.71279144 192.99969482]
[41.21279144 180.00932312]
[41.84508514 172.45812988]
[49.24390411 166.68096924]
[57.22438812 153.98010254]
[41.20760727 135.87561035]
[32.43278503 113.35201263]
[31.98078728 89.18373871]
[39.90728760 66.34779358]
[55.23591995 47.65707397]
[46.78611755 35.26349258]
[31.20926666 33.88662720]
[20.19838715 22.78282166]
[18.95247650 7.19495153]
[28.05981827 -5.51686811]
[43.22020340 -9.35050392]
[57.27536011 -2.49582958]
[63.58887482 11.81058598]
[59.17969894 26.81369209]
[67.62950134 39.20727539]
[78.33731842 34.62161636]
[89.66477966 31.90603638]
[101.28786469 31.13820839]
[112.87410736 32.34009933]
[124.09210968 35.47732925]
[134.62097168 40.46015930]
[143.52827454 28.39119148]
[152.43557739 16.32222366]
[161.34288025 4.25325727]
[162.64031982 -12.09448528]
[177.56091309 -18.89948273]
[190.75563049 -9.16133881]
[188.65087891 7.10218048]
[173.41184998 13.16055965]
[164.50454712 25.22952652]
[155.59724426 37.29849243]
[146.68994141 49.36745834]
[153.72885132 56.90922546]
[159.56234741 65.41774750]
[164.05952454 74.70213318]
[167.11950684 84.55408478]
[168.67364502 94.75257874]
[168.68705750 105.06879425]
[167.15945435 115.27128601]
[164.12510681 125.13116455]
[159.65208435 134.42721558]
[153.84074402 142.95088196]
[146.82147217 150.51092529]
[138.75173950 156.93774414]
[129.81260681 162.08714294]
[120.20461273 165.84359741]
[110.14331818 168.12281799]
[99.85445404 168.87367249]
[89.56885529 168.07933044]
[79.51728058 165.75761414]
[69.92524719 161.96058655]
[61.94476700 174.66145325]
[54.20317459 187.50932312]
[46.70317459 200.49969482]
[39.20317459 213.49008179]
[31.70317459 226.48045349]
[24.20317459 239.47084045]
[31.87032318 251.32904053]
[33.61820221 265.27426147]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 12]
[4 11]
[5 10]
[17 81]
[18 80]
[19 79]
[20 78]
[21 77]
[23 76]
[24 75]
[29 39]
[30 38]
[45 56]
[46 55]
[47 54]
[48 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
