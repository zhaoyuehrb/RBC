%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:56:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGACUCUGACUUAGUUGCGUUACACCCUUUCUUGACAAAACCAAACUUCUCAGAAAACAACAUGAGAUUGGCAUGGCUUUAUUUGUUUUCUUGUUUCAUUUUUUGUUUUGUUUUUUAUUGGCUUGACUCAGGAUUUAAAAACCGGAAUGGUGAAGGUG\
) } def
/len { sequence length } bind def

/coor [
[62.27789307 590.05761719]
[46.50067520 589.13299561]
[36.06089401 577.26763916]
[37.15228653 561.50109863]
[49.12734985 551.18731689]
[50.00493622 536.21301270]
[50.88251877 521.23870850]
[43.90308762 508.08056641]
[52.43452072 494.75671387]
[45.45508957 481.59857178]
[53.98652267 468.27471924]
[54.86410904 453.30041504]
[55.74169159 438.32608032]
[53.25917053 434.19235229]
[53.38217545 428.44689941]
[56.95692444 422.78817749]
[58.41807938 407.85952759]
[59.87923431 392.93084717]
[53.41849518 379.51043701]
[62.46327972 366.52957153]
[63.92443085 351.60092163]
[50.50122833 346.50448608]
[38.85083771 338.09179688]
[29.77537537 326.93426514]
[23.90170670 313.79257202]
[21.63812256 299.56475830]
[23.14598274 285.22491455]
[28.32822227 271.75646973]
[36.83557892 260.08465576]
[48.09011841 251.01315308]
[61.32449722 245.16850281]
[75.63428497 242.95706177]
[77.38644409 228.05975342]
[79.13860321 213.16244507]
[80.89076233 198.26513672]
[82.64292145 183.36781311]
[84.39508057 168.47050476]
[73.34322357 158.52090454]
[70.23250580 143.79721069]
[76.46093750 129.90260315]
[89.83119965 122.25130463]
[91.58335876 107.35398865]
[93.19009399 92.44029236]
[94.65124512 77.51162720]
[96.11239624 62.58296585]
[97.57355499 47.65430069]
[84.79623413 41.30342865]
[74.98081207 30.98847961]
[69.29542542 17.96672058]
[68.40654755 3.81572938]
[72.40088654 -9.75772095]
[80.77742004 -21.12351799]
[92.51014709 -28.92397881]
[106.17369080 -32.23601532]
[100.10136414 -46.84551239]
[109.27237701 -58.58185959]
[111.02453613 -73.47917175]
[112.77670288 -88.37648010]
[114.52886200 -103.27379608]
[116.28102112 -118.17111206]
[118.03318024 -133.06842041]
[119.78533936 -147.96572876]
[110.95572662 -166.05062866]
[123.06038666 -181.09150696]
[124.22998047 -196.04583740]
[125.39956665 -211.00018311]
[126.56916046 -225.95451355]
[127.73875427 -240.90884399]
[128.90834045 -255.86317444]
[130.07794189 -270.81750488]
[123.44023132 -285.17895508]
[132.14634705 -297.26419067]
[133.31594849 -312.21850586]
[130.85646057 -321.06930542]
[134.65704346 -327.45230103]
[128.30082703 -341.94052124]
[137.24108887 -353.85357666]
[138.70223999 -368.78225708]
[140.16340637 -383.71090698]
[129.09190369 -394.75427246]
[127.76068115 -410.33508301]
[136.79830933 -423.09658813]
[151.93748474 -427.01315308]
[166.02995300 -420.23550415]
[172.42167664 -405.96386719]
[168.09469604 -390.93685913]
[155.09207153 -382.24975586]
[153.63090515 -367.32107544]
[152.16975403 -352.39242554]
[158.63049316 -338.97198486]
[149.58570862 -325.99114990]
[148.27027893 -311.04891968]
[147.10067749 -296.09460449]
[153.82205200 -282.80276489]
[145.03227234 -269.64791870]
[143.86267090 -254.69358826]
[142.69308472 -239.73924255]
[141.52349854 -224.78491211]
[140.35389709 -209.83058167]
[139.18431091 -194.87625122]
[138.01472473 -179.92192078]
[145.36456299 -172.73463440]
[147.56449890 -162.46751404]
[143.64401245 -152.48974609]
[134.68264771 -146.21357727]
[132.93049622 -131.31626892]
[131.17832947 -116.41894531]
[129.42617798 -101.52163696]
[127.67401123 -86.62432098]
[125.92185211 -71.72701263]
[124.16969299 -56.82969666]
[130.36734009 -43.28575516]
[121.07099915 -30.48385429]
[135.00263977 -22.98050690]
[145.02052307 -10.68206787]
[149.57281494 4.55302668]
[147.93649292 20.40795708]
[140.33195496 34.45983887]
[127.89394379 44.54996872]
[112.50222015 49.11545181]
[111.04106140 64.04412079]
[109.57991028 78.97278595]
[108.11875153 93.90145111]
[110.53923035 101.63613129]
[106.48066711 109.10615540]
[104.72850800 124.00346375]
[115.95863342 134.54815674]
[118.79323578 149.50871277]
[112.35118103 163.10885620]
[99.29239655 170.22267151]
[97.54023743 185.11997986]
[95.78807831 200.01728821]
[94.03591919 214.91459656]
[92.28375244 229.81192017]
[90.53159332 244.70922852]
[105.00360870 250.80572510]
[117.16759491 260.71472168]
[126.04810333 273.63113403]
[130.93594360 288.50900269]
[131.44479370 304.14645386]
[127.54180145 319.28253174]
[119.54949188 332.69912720]
[108.11917877 343.31878662]
[94.17786407 350.29138184]
[78.85309601 353.06207275]
[77.39194489 367.99072266]
[83.74816895 382.47897339]
[74.80789948 394.39202881]
[73.34674072 409.32067871]
[71.88558960 424.24935913]
[70.71599579 439.20367432]
[69.83841705 454.17797852]
[68.96083069 469.15228271]
[75.87748718 483.38150024]
[67.40882874 495.63430786]
[74.32548523 509.86349487]
[65.85682678 522.11627197]
[64.97924042 537.09057617]
[64.10165405 552.06494141]
[74.78998566 563.70684814]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 159]
[6 158]
[7 157]
[9 155]
[11 153]
[12 152]
[13 151]
[16 150]
[17 149]
[18 148]
[20 146]
[21 145]
[32 135]
[33 134]
[34 133]
[35 132]
[36 131]
[37 130]
[41 126]
[42 125]
[43 123]
[44 122]
[45 121]
[46 120]
[54 113]
[56 111]
[57 110]
[58 109]
[59 108]
[60 107]
[61 106]
[62 105]
[64 101]
[65 100]
[66 99]
[67 98]
[68 97]
[69 96]
[70 95]
[72 93]
[73 92]
[75 91]
[77 89]
[78 88]
[79 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
