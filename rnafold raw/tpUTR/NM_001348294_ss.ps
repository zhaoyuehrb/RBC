%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 00:46:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGGAAAUCAUGUUGGCUGUUGUUUUUCCUAGGGUCUUAUCCAUUUUGAAAGGUUGUUUCCCUGCUUCUUUGUGAUUUGUGUUUCAUCUAACAGCU\
) } def
/len { sequence length } bind def

/coor [
[95.94345856 113.26950073]
[91.74372101 111.43916321]
[78.67394257 118.79992676]
[65.60415649 126.16069031]
[52.53437805 133.52145386]
[39.46459961 140.88221741]
[26.39481926 148.24298096]
[13.32503796 155.60374451]
[5.09751892 169.11738586]
[-9.78882027 168.62123108]
[-22.85860062 175.98199463]
[-22.94248199 191.34065247]
[-30.70830727 204.59159851]
[-44.06710815 212.17039490]
[-59.42543411 212.03836060]
[-72.65196991 204.23104858]
[-80.18885040 190.84855652]
[-80.00868225 175.49072266]
[-72.15994263 162.28871155]
[-58.75389481 154.79382324]
[-43.39669800 155.02212524]
[-30.21936417 162.91221619]
[-17.14958382 155.55145264]
[-9.85690212 142.56430054]
[5.96427488 142.53396606]
[19.03405571 135.17320251]
[32.10383606 127.81243896]
[45.17361832 120.45167542]
[58.24339676 113.09091187]
[71.31317902 105.73014832]
[84.38295746 98.36938477]
[91.53329468 85.18330383]
[90.57224274 70.21412659]
[89.61119080 55.24494553]
[88.65013885 40.27576447]
[75.70367432 31.92738724]
[70.21955109 17.72253799]
[74.10536957 3.18416071]
[85.66844940 -6.16640759]
[84.70739746 -21.13558769]
[76.10181427 -34.41167450]
[83.00777435 -47.60852814]
[82.04672241 -62.57770920]
[68.51103973 -69.97966003]
[61.14596176 -83.53543854]
[62.30166245 -98.91944885]
[71.60935974 -111.22271729]
[86.09899902 -116.51930237]
[101.14699554 -113.11909485]
[111.95157623 -102.10707855]
[115.06505585 -86.99715424]
[109.49391937 -72.61084747]
[97.01590729 -63.53876495]
[97.97695923 -48.56958389]
[106.51380157 -36.36418915]
[99.67657471 -22.09664154]
[100.63762665 -7.12746096]
[113.30150604 0.66768521]
[119.01454163 14.58979511]
[115.39192200 29.37931824]
[103.61931610 39.31470871]
[104.58036804 54.28388977]
[105.54141998 69.25307465]
[106.50247955 84.22225189]
[114.88594055 96.66080475]
[128.40046692 103.16905975]
[141.91500854 109.67731476]
[153.86807251 100.24940491]
[168.66888428 96.95959473]
[183.37017822 100.40811157]
[195.06825256 109.85882568]
[201.47653198 123.39556885]
[201.37237549 138.31048584]
[214.88691711 144.81874084]
[228.40144348 151.32699585]
[241.91598511 157.83525085]
[255.51591492 150.36387634]
[270.90579224 152.34666443]
[282.16787720 163.02116394]
[284.97167969 178.28282166]
[278.23907471 192.26322937]
[264.55889893 199.58662415]
[249.19142151 197.43701172]
[238.04580688 186.64096069]
[235.40773010 171.34977722]
[221.89318848 164.84152222]
[208.37866211 158.33326721]
[194.86412048 151.82501221]
[183.26811218 161.20573425]
[168.68916321 164.63555908]
[154.00666809 161.38206482]
[142.14440918 152.03825378]
[135.48832703 138.41534424]
[135.40675354 123.19184875]
[121.89221954 116.68359375]
[108.37768555 110.17533875]
[104.72866058 112.55094147]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[8 25]
[10 23]
[11 22]
[32 64]
[33 63]
[34 62]
[35 61]
[39 57]
[40 56]
[42 54]
[43 53]
[65 96]
[66 95]
[67 94]
[73 88]
[74 87]
[75 86]
[76 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
