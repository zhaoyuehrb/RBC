%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 10:01:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUACGACAAAGAAUUAUAAAACCUACUGAAUCUCCAGAUUGCCAAGUGAAACACAAUGGUUGCCUCUUCAAAUAUAUCCCCUUUAAUUACUAAUGGUUGGAUCAAACUCGUUGAUUUAUGUCUUCAAUAAAUGAUUCUUAGCAG\
) } def
/len { sequence length } bind def

/coor [
[90.81870270 390.20330811]
[76.10355377 393.84201050]
[61.03165436 392.22534180]
[47.42301178 385.54846191]
[36.92093658 374.61767578]
[30.79360199 360.75289917]
[29.78091431 345.62841797]
[34.00516129 331.07055664]
[42.95624542 318.83721924]
[55.55327988 310.40570068]
[70.27510834 306.79412842]
[71.87490845 291.87966919]
[73.47471619 276.96524048]
[75.07452393 262.05078125]
[76.67432404 247.13635254]
[78.27413177 232.22190857]
[79.87393951 217.30746460]
[81.47373962 202.39302063]
[83.07354736 187.47857666]
[72.00321960 184.58833313]
[61.39453125 180.30332947]
[51.42240524 174.69419861]
[42.25127029 167.85345459]
[34.03235245 159.89387512]
[26.90116501 150.94670105]
[20.97529984 141.15948486]
[16.35246658 130.69358826]
[13.10888863 119.72158051]
[-1.74661589 121.79859924]
[-16.60211945 123.87561035]
[-25.92111397 136.64009094]
[-41.54914856 138.99383545]
[-54.21438599 129.54040527]
[-56.40276718 113.88835907]
[-46.81596756 101.32377625]
[-31.14165878 99.30100250]
[-18.67913437 109.02011108]
[-3.82363009 106.94309235]
[11.03187466 104.86608124]
[11.40137005 90.55072021]
[14.05938530 76.47943878]
[18.93726349 63.01569366]
[25.90900612 50.50726318]
[14.18153477 41.15491867]
[2.45406246 31.80257034]
[-9.27340984 22.45022392]
[-27.51193237 20.16321945]
[-33.34689331 3.64473510]
[-45.27154541 -5.45486307]
[-57.19619751 -14.55446148]
[-73.45588684 -19.35641098]
[-73.34273529 -36.30998230]
[-57.02038956 -40.89446259]
[-48.09659958 -26.47911263]
[-36.17194748 -17.37951469]
[-24.24729538 -8.27991676]
[-12.17534447 -9.57190514]
[-2.15545249 -2.02737975]
[0.07893715 10.72275162]
[11.80640984 20.07509804]
[23.53388214 29.42744446]
[35.26135254 38.77979279]
[41.18056870 33.07257462]
[47.60069275 27.93531609]
[54.46705627 23.41176796]
[61.72118378 19.54045486]
[69.30130005 16.35434341]
[77.14284515 13.88056755]
[85.17904663 12.14019394]
[93.34146881 11.14804459]
[101.56059265 10.91256714]
[109.76642609 11.43576813]
[117.88908386 12.71319199]
[125.85939789 14.73396015]
[133.60949707 17.48086166]
[141.07336426 20.93050766]
[148.18745422 25.05351639]
[154.89117432 29.81477737]
[165.09376526 18.81899834]
[175.29635620 7.82322073]
[185.49894714 -3.17255712]
[195.46423340 -14.38385105]
[205.18765259 -25.80554008]
[208.24177551 -41.32916260]
[222.38349915 -46.00475693]
[232.10691833 -57.42644501]
[241.83035278 -68.84813690]
[241.98442078 -84.89044952]
[254.71110535 -94.65830231]
[270.24758911 -90.65863800]
[276.67559814 -75.95965576]
[269.06411743 -61.83715439]
[253.25204468 -59.12471008]
[243.52861023 -47.70301819]
[233.80519104 -36.28133011]
[231.44654846 -21.57466316]
[216.60934448 -16.08211517]
[206.88591003 -4.66042519]
[206.37945557 0.15349694]
[202.79708862 4.67991352]
[196.49472046 7.03003407]
[186.29212952 18.02581215]
[176.08953857 29.02158928]
[165.88694763 40.01736832]
[173.57313538 49.74067688]
[179.83567810 60.43650818]
[184.55340576 71.89789581]
[187.63500977 83.90306091]
[189.02087402 96.21970367]
[188.68417358 108.60948944]
[186.63143921 120.83268738]
[182.90237427 132.65277100]
[196.34658813 139.30506897]
[209.79080200 145.95735168]
[223.23501587 152.60964966]
[236.67924500 159.26194763]
[249.85736084 151.24067688]
[265.27954102 151.64021301]
[278.02462769 160.33308411]
[284.02572632 174.54542542]
[281.36788940 189.74211121]
[270.89923096 201.07395935]
[255.96025085 204.92500305]
[241.31793213 200.06637573]
[231.64459229 188.04847717]
[230.02694702 172.70616150]
[216.58273315 166.05386353]
[203.13850403 159.40158081]
[189.69429016 152.74928284]
[176.25007629 146.09698486]
[155.82945251 169.44117737]
[128.64408875 184.37133789]
[97.98799133 189.07838440]
[96.38818359 203.99282837]
[94.78837585 218.90727234]
[93.18857574 233.82171631]
[91.58876801 248.73616028]
[89.98896790 263.65060425]
[88.38916016 278.56503296]
[86.78935242 293.47949219]
[85.18955231 308.39392090]
[98.81047821 315.04571533]
[109.33267975 325.95712280]
[115.48554993 339.81057739]
[116.52610779 354.93316650]
[112.32869720 369.49880981]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 141]
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[28 39]
[29 38]
[30 37]
[43 62]
[44 61]
[45 60]
[46 59]
[48 56]
[49 55]
[50 54]
[78 104]
[79 103]
[80 102]
[81 101]
[82 98]
[83 97]
[85 95]
[86 94]
[87 93]
[112 130]
[113 129]
[114 128]
[115 127]
[116 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
