%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 13:06:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGGCAGCUAGUGCCGGGCAGGAAGGGGCCCUCCGGGGGCUGACCCUACGUGGCUGCUGUAUGCAGCCAGGAGACCGAUGCCAUUUCUUUUCCUCAUAAAGAUGCUGGAGAGACUGA\
) } def
/len { sequence length } bind def

/coor [
[157.58592224 256.97433472]
[163.70620728 243.27835083]
[156.44480896 245.15512085]
[149.52842712 258.46539307]
[142.61204529 271.77569580]
[135.69564819 285.08596802]
[139.14074707 300.75476074]
[128.92684937 313.12631226]
[112.88919067 312.71026611]
[103.33049011 299.82574463]
[107.58336639 284.35665894]
[122.38537598 278.16958618]
[129.30175781 264.85928345]
[136.21815491 251.54901123]
[143.13453674 238.23873901]
[130.85076904 210.94837952]
[143.22210693 188.48666382]
[135.95384216 175.36521912]
[128.68557739 162.24375916]
[121.41732025 149.12231445]
[113.80233002 136.19900513]
[105.84601593 123.48299408]
[85.05607605 119.03433228]
[75.80050659 99.89414215]
[61.55953979 95.18299103]
[47.31857681 90.47184753]
[33.07761002 85.76069641]
[18.65991020 81.62186432]
[4.08846140 78.06196594]
[-10.48298740 74.50206757]
[-25.05443573 70.94216919]
[-39.62588501 67.38226318]
[-56.44744873 69.49681091]
[-63.13602829 53.91800690]
[-50.01763153 43.17817307]
[-36.06598282 52.81081772]
[-21.49453545 56.37071609]
[-6.92308664 59.93061829]
[7.64836168 63.49052048]
[22.21981049 67.05042267]
[25.49228096 65.43844604]
[29.73486137 65.41082001]
[34.15595627 67.41751099]
[37.78876114 71.51972961]
[52.02972794 76.23088074]
[66.27069092 80.94203186]
[80.51165771 85.65318298]
[86.35513306 80.01389313]
[93.73517609 76.62525177]
[86.74331665 62.43284225]
[95.14702606 50.13540649]
[95.94535828 35.15666580]
[96.74369049 20.17792511]
[97.54202271 5.19918489]
[98.34035492 -9.77955532]
[99.13868713 -24.75829506]
[99.93701935 -39.73703766]
[90.32526398 -52.58202744]
[94.51431274 -68.06851959]
[109.29067993 -74.31660461]
[123.31919861 -66.53328705]
[125.83840179 -50.68925858]
[114.91576385 -38.93870544]
[114.11742401 -23.95996284]
[113.31909180 -8.98122311]
[112.52075958 5.99751759]
[111.72242737 20.97625732]
[110.92409515 35.95499802]
[110.12576294 50.93373871]
[117.17472839 64.05477142]
[108.71391296 77.42358398]
[118.07037354 83.90377808]
[123.42980194 93.94433594]
[123.60673523 105.32436371]
[118.56203461 115.52667999]
[126.51834869 128.24269104]
[132.34765625 131.78283691]
[135.01573181 136.98405457]
[134.53875732 141.85404968]
[141.80702209 154.97550964]
[149.07528687 168.09695435]
[156.34355164 181.21839905]
[172.25878906 179.93186951]
[187.43164062 188.38945007]
[196.01773071 205.08808899]
[193.78236389 225.14831543]
[206.28205872 233.44030762]
[218.78176880 241.73231506]
[231.28147888 250.02430725]
[243.78118896 258.31631470]
[256.28091431 266.60830688]
[268.78060913 274.90029907]
[284.08050537 271.97613525]
[296.63885498 280.56344604]
[299.33233643 295.16760254]
[311.83206177 303.45959473]
[324.33175659 311.75158691]
[340.72396851 312.22909546]
[348.26730347 326.79034424]
[339.20184326 340.45596313]
[322.85336304 339.16796875]
[316.03976440 324.25131226]
[303.54006958 315.95928955]
[291.04034424 307.66729736]
[276.53808594 310.86419678]
[263.74349976 302.63299561]
[260.48861694 287.40002441]
[247.98890686 279.10803223]
[235.48919678 270.81600952]
[222.98948669 262.52401733]
[210.48977661 254.23202515]
[197.99006653 245.94001770]
[185.49035645 237.64801025]
[178.22897339 239.52479553]
[190.21852112 248.53871155]
[190.64669800 263.53259277]
[179.19107056 273.21603394]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 15]
[4 14]
[5 13]
[6 12]
[17 82]
[18 81]
[19 80]
[20 79]
[21 76]
[22 75]
[24 47]
[25 46]
[26 45]
[27 44]
[28 40]
[29 39]
[30 38]
[31 37]
[32 36]
[49 71]
[51 69]
[52 68]
[53 67]
[54 66]
[55 65]
[56 64]
[57 63]
[86 113]
[87 112]
[88 111]
[89 110]
[90 109]
[91 108]
[92 107]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
