%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 20:22:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACCCCUGCUGUGUGCCCAGCGGGACGACAGCCACAGGGCCUGUUUCAAGGCUAAUAAAAUCCUAUAAUUUGGGGGUUUCAUGAAUUUUCAAAAAAAACAAAACUCAA\
) } def
/len { sequence length } bind def

/coor [
[145.96548462 192.05381775]
[151.73448181 178.16534424]
[159.82769775 165.48973083]
[148.77658081 155.34710693]
[137.72546387 145.20448303]
[126.67434692 135.06185913]
[115.62322998 124.91924286]
[104.57211304 114.77661896]
[89.82983398 112.00798798]
[75.85187531 117.45010376]
[61.87391281 122.89221954]
[47.89595413 128.33433533]
[33.91799164 133.77645874]
[20.01916695 139.41761780]
[6.20231295 145.25666809]
[-3.49745250 157.75566101]
[-18.23274422 155.58300781]
[-32.04959869 161.42205811]
[-41.50262070 174.82252502]
[-57.80752563 173.06692505]
[-64.19122314 157.96128845]
[-54.08671570 145.04498291]
[-37.88864899 147.60519409]
[-24.07179451 141.76614380]
[-15.36030388 129.68479919]
[0.36326122 131.43980408]
[14.18011570 125.60075378]
[19.19075012 120.01502228]
[28.47587585 119.79849243]
[42.45383835 114.35637665]
[56.43179703 108.91426086]
[70.40975952 103.47214508]
[84.38771820 98.03002930]
[87.00869751 91.00290680]
[72.02246094 90.36048126]
[68.00247192 75.90919495]
[80.50422668 67.62028503]
[92.25066376 76.94866180]
[94.87164307 69.92153931]
[87.87163544 56.65504456]
[80.87162781 43.38854980]
[73.87161255 30.12205696]
[66.87160492 16.85556221]
[51.70048904 12.42693329]
[44.17777252 -1.47214258]
[48.76655197 -16.59558868]
[62.74438477 -23.97093391]
[77.81847382 -19.22251701]
[85.04562378 -5.16748762]
[80.13809967 9.85555267]
[87.13810730 23.12204742]
[94.13811493 36.38854218]
[101.13813019 49.65503311]
[108.13813782 62.92152786]
[108.35534668 47.92309952]
[115.08451080 34.51719284]
[125.39035797 23.61813164]
[138.39909363 16.15001297]
[153.00775146 12.74603271]
[167.97772217 13.69480228]
[182.03973389 18.91587830]
[194.00154114 27.96658325]
[202.84892273 40.07954025]
[207.83175659 54.22773361]
[208.52755737 69.21158600]
[204.87733459 83.76067352]
[197.19056702 96.64141846]
[186.11900330 106.76171875]
[172.60136414 113.26350403]
[157.78373718 115.59551239]
[142.92248535 113.56001282]
[129.27563477 107.32830048]
[114.71473694 103.72550201]
[125.76585388 113.86812592]
[136.81697083 124.01074982]
[147.86808777 134.15336609]
[158.91920471 144.29598999]
[169.97032166 154.43861389]
[181.90684509 145.29037476]
[195.25070190 138.35403442]
[209.59635925 133.84039307]
[224.50790405 131.88661194]
[239.53216553 132.55206299]
[254.21257019 135.81652832]
[268.10299683 141.58079529]
[280.78137207 149.66969299]
[291.86236572 159.83741760]
[301.00924683 171.77499390]
[307.94406128 185.11962891]
[312.45608521 199.46580505]
[314.40817261 214.37756348]
[313.74102783 229.40174866]
[310.47491455 244.08178711]
[304.70904541 257.97155762]
[296.61871338 270.64901733]
[286.44973755 281.72885132]
[274.51113892 290.87438965]
[261.16571045 297.80770874]
[246.81901550 302.31808472]
[231.90704346 304.26849365]
[216.88293457 303.59963989]
[202.20326233 300.33184814]
[188.31413269 294.56442261]
[175.63760376 286.47262573]
[164.55891418 276.30239868]
[155.41473389 264.36276245]
[148.48294067 251.01654053]
[143.97418213 236.66934204]
[142.02546692 221.75714111]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 78]
[4 77]
[5 76]
[6 75]
[7 74]
[8 73]
[9 33]
[10 32]
[11 31]
[12 30]
[13 29]
[14 27]
[15 26]
[17 24]
[18 23]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
