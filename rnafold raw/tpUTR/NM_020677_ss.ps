%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 14:18:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGCCCGCCUCGCGGCCCCUUGUGGGGAUCGGGGGCACCAGAGGGGCAGAGGCACCAACAUCUGAAUAAAGCCAUUGUUCUCCCAGAUGGCUUCCAGGA\
) } def
/len { sequence length } bind def

/coor [
[190.25723267 130.99363708]
[182.16780090 111.34468079]
[167.18412781 110.64508057]
[152.20045471 109.94547272]
[137.21676636 109.24586487]
[122.23309326 108.54625702]
[107.24942017 107.84665680]
[92.27843475 108.77919769]
[77.49740601 111.33285522]
[62.71637726 113.88650513]
[47.93534470 116.44016266]
[33.15431595 118.99381256]
[25.06358147 123.61254120]
[17.87443542 121.38955688]
[3.02113676 123.48228455]
[-11.83216190 125.57501221]
[-26.65111923 127.89848328]
[-41.43214798 130.45213318]
[-56.21318054 133.00579834]
[-70.99420929 135.55944824]
[-83.23981476 146.46711731]
[-98.72182465 141.05976868]
[-101.51367188 124.90000916]
[-88.74334717 114.61162567]
[-73.54785919 120.77841949]
[-58.76683044 118.22476196]
[-43.98580170 115.67111206]
[-29.20477104 113.11745453]
[-23.04097176 108.80084991]
[-13.92489243 110.72171783]
[0.92840666 108.62898254]
[15.78170490 106.53625488]
[30.60066223 104.21278381]
[45.38169098 101.65912628]
[60.16272354 99.10547638]
[74.94375610 96.55181885]
[89.72478485 93.99816895]
[78.22009277 84.37308502]
[75.33779907 69.65261078]
[82.36286926 56.39937210]
[96.16341400 50.52187729]
[110.58692932 54.64041519]
[119.20317078 66.91886902]
[118.17087555 81.88330078]
[107.94902802 92.86297607]
[122.93270111 93.56258392]
[137.91638184 94.26219177]
[152.90005493 94.96179962]
[167.88372803 95.66139984]
[182.86740112 96.36100769]
[186.21582031 87.07627106]
[191.61312866 78.82695007]
[198.76237488 72.05680084]
[207.27255249 67.12850952]
[216.67997742 64.30419922]
[226.47352600 63.73155594]
[236.12243652 65.43606567]
[245.10508728 69.31997681]
[252.93716431 75.16784668]
[259.19775391 82.65852356]
[263.55203247 91.38275146]
[265.76910400 100.86555481]
[265.73428345 110.59205627]
[280.08413696 114.96027374]
[294.43399048 119.32849884]
[302.34912109 113.64424896]
[311.86935425 112.36817169]
[320.74075317 115.67024231]
[326.92477417 122.65193939]
[329.06652832 131.58609009]
[342.94692993 137.27241516]
[356.82733154 142.95874023]
[370.70773315 148.64506531]
[384.58813477 154.33139038]
[398.46853638 160.01771545]
[412.34896851 165.70404053]
[426.22937012 171.39036560]
[438.80816650 162.45854187]
[454.22006226 161.76806641]
[467.54718018 169.53924561]
[474.53689575 183.29232788]
[472.95880127 198.63876343]
[463.31646729 210.68156433]
[448.68673706 215.57789612]
[433.73788452 211.76538086]
[423.24005127 200.46055603]
[420.54302979 185.27076721]
[406.66262817 179.58444214]
[392.78222656 173.89811707]
[378.90182495 168.21179199]
[365.02142334 162.52546692]
[351.14099121 156.83914185]
[337.26058960 151.15281677]
[323.38018799 145.46649170]
[303.41561890 150.28630066]
[290.06579590 133.67835999]
[275.71591187 129.31013489]
[261.36605835 124.94192505]
[247.47912598 140.66946411]
[227.63981628 147.69944763]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 50]
[3 49]
[4 48]
[5 47]
[6 46]
[7 45]
[8 37]
[9 36]
[10 35]
[11 34]
[12 33]
[14 32]
[15 31]
[16 30]
[17 28]
[18 27]
[19 26]
[20 25]
[63 98]
[64 97]
[65 96]
[70 94]
[71 93]
[72 92]
[73 91]
[74 90]
[75 89]
[76 88]
[77 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
