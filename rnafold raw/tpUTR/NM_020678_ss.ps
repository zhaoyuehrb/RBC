%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 15:00:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCUUUUGUCUCAAAUAGGAUUGGUCAUUGCAGGCCAGAAGAUAGUGUCUGAGUAGGGCUGAUGUGUUUCCUGUUAGUCUGAUUUUGCUUUUGCCAAAAGACAA\
) } def
/len { sequence length } bind def

/coor [
[92.78387451 132.14123535]
[86.73702240 145.86840820]
[80.69017792 159.59559631]
[74.84739685 173.41087341]
[77.64301300 189.56997681]
[64.87508392 199.86134338]
[49.67816925 193.69808960]
[47.68554306 177.42045593]
[60.94705582 167.77346802]
[60.53763199 160.27186584]
[66.96298981 153.54875183]
[73.00984192 139.82156372]
[79.05669403 126.09437561]
[73.32193756 102.02639771]
[85.23205566 86.43818665]
[78.78108215 72.89621735]
[72.33010101 59.35424805]
[65.87912750 45.81228256]
[59.42814636 32.27031326]
[52.97716904 18.72834587]
[46.52619171 5.18637848]
[35.62107849 4.20153713]
[26.22386932 -1.25761974]
[20.05989265 -10.10901356]
[18.22698784 -20.65545464]
[21.00047493 -30.90987968]
[27.79431343 -38.96972656]
[22.57128906 -53.03102112]
[17.34826469 -67.09231567]
[3.25892329 -73.73522186]
[-1.83765769 -88.06977844]
[4.58216858 -101.46087646]
[-0.64085609 -115.52217102]
[-5.86388063 -129.58346558]
[-17.92222023 -139.82588196]
[-15.10078049 -154.45080566]
[-20.32380486 -168.51211548]
[-37.81019974 -172.76615906]
[-49.23920441 -186.46611023]
[-50.27125168 -204.12210083]
[-40.68586349 -218.80050659]
[-46.73271561 -232.52769470]
[-52.77956390 -246.25488281]
[-58.82641602 -259.98205566]
[-70.74481964 -272.03976440]
[-62.45769501 -286.83029175]
[-45.95107651 -282.96145630]
[-45.09923172 -266.02890015]
[-39.05237961 -252.30172729]
[-33.00553131 -238.57453918]
[-26.95867729 -224.84736633]
[-14.66584873 -224.02821350]
[-3.85538888 -217.96870422]
[3.34252882 -207.79112244]
[5.47886038 -195.43598938]
[2.07703757 -183.29219055]
[-6.26250982 -173.73513794]
[-1.03948522 -159.67384338]
[10.64526939 -150.43717957]
[8.19741440 -134.80648804]
[13.42043877 -120.74519348]
[18.64346313 -106.68389893]
[32.24855804 -100.73100281]
[37.74575424 -86.54524994]
[31.40955925 -72.31533813]
[36.63258362 -58.25404358]
[41.85560608 -44.19274902]
[60.04248810 -37.61412048]
[67.88031006 -19.60736275]
[60.06815720 -1.26459932]
[66.51913452 12.27736855]
[72.97011566 25.81933594]
[79.42108917 39.36130142]
[85.87207031 52.90327072]
[92.32305145 66.44523621]
[98.77402496 79.98720551]
[121.76477051 84.43979645]
[130.93894958 112.74049377]
[142.86177063 121.84249115]
[154.78457642 130.94450378]
[166.70739746 140.04649353]
[173.46296692 141.31817627]
[177.80711365 145.29246521]
[179.04557800 150.05796814]
[190.40824890 159.85029602]
[201.77091980 169.64262390]
[217.27578735 172.79058838]
[221.86575317 186.96032715]
[233.22842407 196.75265503]
[249.43171692 199.27957153]
[255.09181213 214.67098999]
[244.38609314 227.09352112]
[228.32768250 223.76794434]
[223.43609619 208.11532593]
[212.07342529 198.32299805]
[197.38130188 195.87544250]
[191.97859192 181.00529480]
[180.61592102 171.21296692]
[169.25325012 161.42063904]
[157.60539246 151.96931458]
[145.68257141 142.86730957]
[133.75976562 133.76530457]
[121.83694458 124.66330719]
[114.57367706 126.53279114]
[110.54874420 140.98269653]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[3 11]
[4 9]
[15 76]
[16 75]
[17 74]
[18 73]
[19 72]
[20 71]
[21 70]
[27 67]
[28 66]
[29 65]
[32 62]
[33 61]
[34 60]
[36 58]
[37 57]
[41 51]
[42 50]
[43 49]
[44 48]
[78 103]
[79 102]
[80 101]
[81 100]
[84 99]
[85 98]
[86 97]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
