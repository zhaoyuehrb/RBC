%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 10:24:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCCUAACCCCAUUCCUGUGCGGACAGCCCUUCCUCCCAUUUCCCAUUAAAGAGCCAGUUUAUUUUCUAA\
) } def
/len { sequence length } bind def

/coor [
[151.63549805 128.34245300]
[145.21212769 114.76218414]
[140.65620422 100.44691467]
[125.88408661 103.05163574]
[120.94190979 115.51563263]
[110.45745087 123.87342072]
[97.20542908 125.91310120]
[84.69299316 121.09487915]
[76.23155212 110.69389343]
[61.35987854 112.65178680]
[48.68769073 122.12417603]
[35.05938339 116.11431122]
[20.18770790 118.07220459]
[5.31603575 120.03009796]
[-7.35780716 130.43710327]
[-22.61012840 124.41225433]
[-24.75064659 108.15340424]
[-11.57738018 98.38626099]
[3.35814309 105.15842438]
[18.22981644 103.20053101]
[33.10149002 101.24263763]
[44.70995712 91.91029358]
[59.40198898 97.78011322]
[74.27365875 95.82221985]
[81.64680481 81.49436188]
[96.03515625 74.23998260]
[111.93900299 76.83194733]
[123.27936554 88.27951813]
[138.05148315 85.67479706]
[137.43653870 70.66462708]
[138.82781982 55.70642471]
[142.20046997 41.06713867]
[147.49432373 27.00802803]
[154.61488342 13.77999115]
[163.43510437 1.61909866]
[173.79754639 -9.25762463]
[185.51730347 -18.65606880]
[198.38520813 -26.40851212]
[212.17163086 -32.37659836]
[226.63052368 -36.45382309]
[241.50386047 -38.56742096]
[256.52621460 -38.67967224]
[271.42947388 -36.78857803]
[285.94769287 -32.92788315]
[299.82174683 -27.16648483]
[312.80407715 -19.60720634]
[324.66296387 -10.38495064]
[335.18679810 0.33570182]
[344.18777466 12.36342716]
[351.50521851 25.48357773]
[357.00857544 39.46200943]
[360.59960938 54.04925537]
[362.21426392 68.98499298]
[361.82369995 84.00268555]
[359.43490601 98.83430481]
[355.09051514 113.21517944]
[348.86801147 126.88866425]
[340.87847900 139.61073303]
[331.26452637 151.15434265]
[320.19766235 161.31349182]
[307.87545776 169.90689087]
[294.51776123 176.78114319]
[280.36297607 181.81361389]
[265.66372681 184.91445923]
[250.68231201 186.02835083]
[235.68611145 185.13542175]
[220.94274902 182.25158691]
[206.71531677 177.42832947]
[193.25773621 170.75172424]
[180.81018066 162.34091187]
[169.59478760 152.34600830]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 29]
[4 28]
[9 24]
[10 23]
[12 21]
[13 20]
[14 19]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
