%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 09:33:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCAAGAAAGAUGGAAACAAGUGACAUCUACUAUAGCUUAAUGAUUUAAAUGCAGCAAAAACUUCCAUGUGA\
) } def
/len { sequence length } bind def

/coor [
[73.42472076 292.24185181]
[60.84085846 300.87951660]
[45.75414658 303.19335938]
[31.16006088 298.72396851]
[19.95627022 288.35873413]
[14.36729145 274.15570068]
[15.50282383 258.93487549]
[23.13740349 245.71838379]
[35.75518417 237.13034058]
[50.85089111 234.87593079]
[47.17957687 220.44088745]
[58.61872864 209.51127625]
[63.01107025 195.16877747]
[67.40341187 180.82626343]
[71.79575348 166.48376465]
[76.18809509 152.14126587]
[80.58043671 137.79876709]
[67.11962128 126.92111969]
[59.11226273 111.57839966]
[57.88645935 94.31530762]
[63.64550781 77.99506378]
[52.38542175 68.08494568]
[41.12533951 58.17482376]
[29.86525345 48.26470566]
[13.82765007 47.84658432]
[4.27061176 34.96083450]
[8.52548027 19.49229813]
[23.32828522 13.30711079]
[37.32358170 21.15002251]
[39.77537537 37.00461960]
[51.03545761 46.91474152]
[62.29554367 56.82485962]
[73.55562592 66.73498535]
[85.99548340 59.87844086]
[100.00000000 57.50451660]
[114.00451660 59.87844086]
[126.44437408 66.73498535]
[137.70445251 56.82485962]
[148.96453857 46.91474152]
[150.12411499 31.38112640]
[161.68461609 21.49125862]
[176.48638916 22.69246292]
[187.74647522 12.78234196]
[187.19683838 -2.84557867]
[196.86190796 -15.13867950]
[212.17814636 -18.29253578]
[225.91369629 -10.81799030]
[231.58303833 3.75570321]
[226.50929260 18.54729271]
[213.08811951 26.57264137]
[197.65660095 24.04242706]
[186.39651489 33.95254898]
[185.70790100 48.78701401]
[174.42974854 58.99768829]
[158.87466431 58.17482376]
[147.61457825 68.08494568]
[136.35449219 77.99506378]
[141.42402649 90.51759338]
[142.30696106 103.99847412]
[138.91403198 117.07524109]
[131.58819580 128.42626953]
[121.06980896 136.90432739]
[108.42196655 141.65257263]
[94.92293549 142.19110107]
[90.53059387 156.53361511]
[86.13825226 170.87611389]
[81.74591064 185.21861267]
[77.35356903 199.56111145]
[72.96122742 213.90361023]
[76.31837463 229.36453247]
[65.19338989 239.26828003]
[76.43791199 249.58929443]
[82.08277893 263.77020264]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 71]
[12 69]
[13 68]
[14 67]
[15 66]
[16 65]
[17 64]
[21 33]
[22 32]
[23 31]
[24 30]
[37 57]
[38 56]
[39 55]
[42 52]
[43 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
