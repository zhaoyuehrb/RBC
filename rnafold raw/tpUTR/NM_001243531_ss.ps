%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 23:18:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUUAAGUGAUAAUAUUAUAUAAAAACAUGAUUAACAACUGUAAUCUUAGAGGAAUUAAAGUCUGGGUAUUUUAAGUCCUCCAAAUCUU\
) } def
/len { sequence length } bind def

/coor [
[65.77668762 107.73569489]
[52.61714554 114.93476105]
[39.45760345 122.13381958]
[26.29806519 129.33288574]
[13.13852406 136.53193665]
[13.84504509 151.73925781]
[7.90302801 165.68843079]
[-3.45968747 175.63371277]
[-17.95409584 179.64285278]
[-32.69103241 176.97224426]
[-44.75705719 168.20431519]
[-57.91659927 175.40338135]
[-71.07614136 182.60244751]
[-79.13349152 196.88568115]
[-95.53229523 196.77885437]
[-103.40285492 182.39183044]
[-94.64862823 168.52476501]
[-78.27519989 169.44290161]
[-65.11566162 162.24383545]
[-51.95611954 155.04478455]
[-52.83214951 140.15524292]
[-47.13314056 126.30495453]
[-35.93992615 116.26140594]
[-21.43684387 112.05654907]
[-6.48558426 114.57583618]
[5.93946218 123.37240601]
[19.09900284 116.17333984]
[32.25854111 108.97428131]
[45.41808319 101.77521515]
[58.57762527 94.57615662]
[63.16360092 80.29438782]
[56.65534592 66.77985382]
[50.14708710 53.26532364]
[43.63883209 39.75078964]
[37.13057709 26.23625755]
[21.93291855 22.55316353]
[12.69995594 9.93229008]
[13.79121304 -5.66717052]
[24.69143105 -16.87963104]
[40.25386047 -18.41090965]
[53.13039780 -9.53798389]
[57.24113464 5.54962158]
[50.64511108 19.72800255]
[57.15336609 33.24253464]
[63.66162109 46.75706863]
[70.16987610 60.27159882]
[76.67813110 73.78613281]
[91.76750946 67.14582062]
[107.63605499 68.25228119]
[120.67187500 76.31629181]
[128.15663147 89.02608490]
[143.04725647 87.21803284]
[157.93789673 85.40998077]
[172.82852173 83.60192871]
[187.71916199 81.79387665]
[200.48608398 72.44956970]
[214.05319214 78.59635162]
[228.94381714 76.78829956]
[243.83445740 74.98024750]
[258.72509766 73.17220306]
[273.61572266 71.36415100]
[288.50634766 69.55609894]
[303.39700317 67.74804688]
[312.94528198 55.15416718]
[328.61331177 53.08340454]
[341.10552979 62.76430511]
[343.01052856 78.45336151]
[333.19808960 90.84253693]
[317.48977661 92.58155060]
[305.20504761 82.63867950]
[290.31439209 84.44673157]
[275.42376709 86.25478363]
[260.53314209 88.06283569]
[245.64250183 89.87088013]
[230.75187683 91.67893219]
[215.86123657 93.48698425]
[204.15939331 102.70197296]
[189.52720642 96.68451691]
[174.63658142 98.49256134]
[159.74594116 100.30061340]
[144.85531616 102.10866547]
[129.96467590 103.91671753]
[128.17474365 112.20899963]
[124.10034943 119.80344391]
[117.99284363 126.07415009]
[110.27391052 130.48155212]
[101.50682831 132.61834717]
[92.35554504 132.24610901]
[83.53439331 129.31942749]
[75.75234222 123.99513245]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[4 27]
[5 26]
[11 20]
[12 19]
[13 18]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[51 82]
[52 81]
[53 80]
[54 79]
[55 78]
[57 76]
[58 75]
[59 74]
[60 73]
[61 72]
[62 71]
[63 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
