%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 22:47:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGCCAGGCGGGAGCGGCCCCACACGUGUUUGCUUAAAGUCUGCGAGUCCGCAUCGUGUCCGCCUCUCUC\
) } def
/len { sequence length } bind def

/coor [
[72.44808960 191.51164246]
[63.84444427 203.79891968]
[55.24079895 216.08619690]
[46.63715363 228.37347412]
[38.03350449 240.66075134]
[33.90142441 257.10345459]
[16.95744133 257.68463135]
[11.70840073 241.56373596]
[25.74622536 232.05711365]
[34.34987259 219.76983643]
[42.95351791 207.48254395]
[51.55716324 195.19526672]
[60.16081238 182.90798950]
[57.78493881 159.16925049]
[78.26622772 145.75537109]
[82.77681732 131.44961548]
[87.28740692 117.14385986]
[91.79798889 102.83810425]
[90.35694122 99.74932098]
[90.16388702 96.01293182]
[91.48117065 92.15521240]
[94.34586334 88.79830933]
[98.53883362 86.56427002]
[105.46506500 73.25910187]
[112.39129639 59.95394135]
[119.31752014 46.64878082]
[126.24375153 33.34361649]
[132.87808228 19.89052582]
[139.21736145 6.29590988]
[145.55662537 -7.29870701]
[150.68693542 -21.39409637]
[154.56921387 -35.88298416]
[158.45150757 -50.37187195]
[162.33378601 -64.86075592]
[151.88055420 -76.20683289]
[149.24339294 -91.40712738]
[155.26382446 -105.61128235]
[168.02075195 -114.28680420]
[183.44346619 -114.66535950]
[196.61065674 -106.62615967]
[203.32070923 -92.73448181]
[201.43246460 -77.42311096]
[191.54847717 -65.57785034]
[176.82267761 -60.97847366]
[172.94038391 -46.48958588]
[169.05810547 -32.00069809]
[165.17582703 -17.51181030]
[166.78398132 -14.84914017]
[167.25572205 -11.29372787]
[166.20471191 -7.35151577]
[163.46739197 -3.67324948]
[159.15124512 -0.95943320]
[152.81196594 12.63518333]
[146.47270203 26.22980118]
[146.50260925 33.85973740]
[139.54891968 40.26984787]
[132.62268066 53.57500839]
[125.69645691 66.88017273]
[118.77022552 80.18533325]
[111.84399414 93.49049377]
[106.10374451 107.34868622]
[101.59316254 121.65444183]
[97.08257294 135.96020508]
[92.57198334 150.26594543]
[97.71588135 155.53692627]
[100.98658752 162.08955383]
[102.09446716 169.28692627]
[100.95870972 176.43801880]
[97.71273041 182.86402893]
[92.68901062 187.96282959]
[86.38521576 191.26530457]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[3 11]
[4 10]
[5 9]
[15 64]
[16 63]
[17 62]
[18 61]
[23 60]
[24 59]
[25 58]
[26 57]
[27 56]
[28 54]
[29 53]
[30 52]
[31 47]
[32 46]
[33 45]
[34 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
