%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 10:17:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGUUCAAGUUUGGGGACUUUACCAAAGAAAAAUACUCAGGAAUACAUUUAACAGAAACGAACAUCCUCUUGCAACUUCUUUUUUCUUCUUUGUAAAACAUUUACGUUUAUUGCUGAAGGACUUUUUCAGGCUUUAGCUUCCAACAGUUUUGAGACAUUAAUGAGGAGAAUAAAAUGUUUGCUGAAACUUGAA\
) } def
/len { sequence length } bind def

/coor [
[8.74972153 430.24200439]
[-6.09566832 436.32427979]
[-20.03617668 428.38439941]
[-22.37783813 412.51315308]
[-11.32433128 400.88562012]
[-10.35835648 385.91674805]
[-9.39238167 370.94787598]
[-8.42640591 355.97903442]
[-7.46043110 341.01016235]
[-6.49445629 326.04129028]
[-5.52848148 311.07241821]
[-4.56250620 296.10357666]
[-18.67161942 291.01113892]
[-27.48839951 303.14639282]
[-36.30517960 315.28164673]
[-31.38224411 329.99710083]
[-36.08112717 344.78561401]
[-48.59500885 353.96069336]
[-64.11204529 353.99435425]
[-76.66562653 344.87365723]
[-81.42863464 330.10568237]
[-76.56960297 315.36898804]
[-63.95692444 306.33020020]
[-48.44043350 306.46487427]
[-39.62365341 294.32962036]
[-30.80687523 282.19436646]
[-44.36227798 288.61706543]
[-57.00896835 280.55099487]
[-64.90451050 267.79714966]
[-66.48562622 252.88072205]
[-61.43926239 238.75506592]
[-50.76457596 228.21697998]
[-36.57509232 223.35298157]
[-21.68025780 225.12606812]
[-9.02916622 233.18522644]
[-1.12666595 245.93475342]
[0.46280742 260.84851074]
[0.95455110 275.84042358]
[7.71052313 262.44802856]
[14.46649551 249.05560303]
[21.22246742 235.66317749]
[20.04673004 220.81506348]
[33.17037964 211.97874451]
[39.92634964 198.58633423]
[40.13235474 191.18847656]
[46.90055847 185.03388977]
[53.87140656 171.75204468]
[60.84225464 158.47021484]
[67.81310272 145.18836975]
[74.78395081 131.90652466]
[81.75479889 118.62468719]
[77.30492401 112.83354187]
[74.63584137 106.03540039]
[73.95700073 98.76367950]
[75.32164764 91.58896637]
[63.11576843 82.87022400]
[50.90988541 74.15148926]
[38.70400238 65.43274689]
[26.28237152 71.88014221]
[12.36099720 72.34147644]
[-0.33894828 66.78366089]
[-9.35963631 56.34458923]
[-12.98220539 43.10064697]
[-10.55408573 29.65386772]
[-22.61792564 20.73962212]
[-38.20786667 23.33369637]
[-51.01715088 14.07638550]
[-53.44625473 -1.54011273]
[-44.05403519 -14.25080681]
[-28.41272736 -16.51466751]
[-15.80204487 -6.98858595]
[-13.70368004 8.67578125]
[-1.63984036 17.59002686]
[13.00589848 10.77705002]
[29.18250656 12.28449059]
[42.46989059 21.79547501]
[49.18955612 36.79332352]
[47.42274094 53.22686386]
[59.62862396 61.94560242]
[71.83451080 70.66434479]
[84.04039001 79.38307953]
[100.00000000 73.92767334]
[115.95960999 79.38307953]
[128.16549683 70.66434479]
[140.37136841 61.94560242]
[152.57725525 53.22686386]
[164.78314209 44.50812149]
[176.98902893 35.78938293]
[189.19490051 27.07064247]
[201.40078735 18.35190392]
[208.13304138 4.03452396]
[222.98684692 2.93284440]
[235.19273376 -5.78589535]
[247.39860535 -14.50463581]
[242.13871765 -28.63859177]
[240.71781921 -43.64080811]
[243.22677612 -58.48806381]
[249.48864746 -72.16927338]
[259.07113647 -83.75434113]
[271.31637573 -92.45737457]
[285.38619995 -97.69001007]
[300.31942749 -99.10118866]
[315.09753418 -96.60070038]
[328.71411133 -90.36490631]
[340.24353027 -80.82434845]
[352.44940186 -89.54309082]
[364.58465576 -98.35987091]
[376.64849854 -107.27411652]
[388.71234131 -116.18836212]
[387.09313965 -131.39775085]
[393.26348877 -145.28384399]
[405.47476196 -154.15802002]
[420.38858032 -155.71803284]
[433.98922729 -149.64447021]
[446.05307007 -158.55871582]
[458.11691284 -167.47296143]
[470.18075562 -176.38720703]
[482.24459839 -185.30145264]
[494.30841064 -194.21569824]
[506.37225342 -203.12994385]
[503.47543335 -218.11564636]
[507.37585449 -232.87199402]
[517.29907227 -244.46908569]
[531.27484131 -250.60432434]
[546.52819824 -250.05955505]
[560.03063965 -242.94294739]
[569.10125732 -230.66749573]
[571.93908691 -215.67050171]
[567.98059082 -200.92964172]
[558.01177979 -189.37170410]
[544.01196289 -183.29154968]
[528.76086426 -183.89637756]
[515.28649902 -191.06611633]
[503.22265625 -182.15187073]
[491.15884399 -173.23762512]
[479.09500122 -164.32337952]
[467.03115845 -155.40913391]
[454.96731567 -146.49488831]
[442.90347290 -137.58064270]
[444.71533203 -122.79609680]
[438.84460449 -108.99789429]
[426.77575684 -99.93095398]
[411.68991089 -98.11037445]
[397.62658691 -104.12451935]
[385.56274414 -95.21027374]
[373.49890137 -86.29602814]
[369.98300171 -79.78380585]
[361.16815186 -77.33720398]
[348.96228027 -68.61846924]
[354.24822998 -54.61817932]
[355.73117065 -39.71523666]
[353.30401611 -24.92492294]
[347.12628174 -11.25641823]
[337.61361694 0.35606670]
[325.40982056 9.11714363]
[311.34329224 14.42471981]
[296.37075806 15.91137695]
[281.51226807 13.46979713]
[267.78164673 7.26048946]
[256.11734009 -2.29875255]
[243.91146851 6.41998720]
[231.70558167 15.13872719]
[225.84637451 28.83248329]
[210.11952209 30.55778694]
[197.91365051 39.27652740]
[185.70776367 47.99526596]
[173.50187683 56.71400452]
[161.29598999 65.43274689]
[149.09011841 74.15148926]
[136.88423157 82.87022400]
[124.67835236 91.58896637]
[124.32244873 109.39067841]
[112.62310791 122.81278992]
[95.03663635 125.59553528]
[88.06578827 138.87738037]
[81.09494019 152.15921021]
[74.12409210 165.44105530]
[67.15325165 178.72290039]
[60.18239975 192.00473022]
[53.31876755 205.34230042]
[46.56279755 218.73471069]
[47.25530243 234.54075623]
[34.61488342 242.41915894]
[27.85891151 255.81156921]
[21.10293961 269.20397949]
[14.34696865 282.59640503]
[10.40635777 297.06954956]
[9.44038296 312.03839111]
[8.47440815 327.00726318]
[7.50843287 341.97613525]
[6.54245806 356.94500732]
[5.57648277 371.91384888]
[4.61050797 386.88272095]
[3.64453292 401.85159302]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 194]
[6 193]
[7 192]
[8 191]
[9 190]
[10 189]
[11 188]
[12 187]
[13 26]
[14 25]
[15 24]
[38 186]
[39 185]
[40 184]
[41 183]
[43 181]
[44 180]
[46 179]
[47 178]
[48 177]
[49 176]
[50 175]
[51 174]
[55 81]
[56 80]
[57 79]
[58 78]
[64 73]
[65 72]
[83 171]
[84 170]
[85 169]
[86 168]
[87 167]
[88 166]
[89 165]
[90 164]
[92 162]
[93 161]
[94 160]
[105 149]
[106 148]
[107 146]
[108 145]
[109 144]
[114 139]
[115 138]
[116 137]
[117 136]
[118 135]
[119 134]
[120 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
