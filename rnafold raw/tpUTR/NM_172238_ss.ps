%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 03:19:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACAUCAAACAGAAUCUAUUUCCAGAGAGUCUUGCUGCUGAUAUUUUUUCUAAUAUAUAUAUCAUUGAGGGUGACUAAUCUUCAGUGGACCAAAUCUCUACCCUUCCCCAACCCUCCAUAAAAAAACAAAAAUGGAAAUGAAAAAUGAAACAAAAAAGGACAAAACCA\
) } def
/len { sequence length } bind def

/coor [
[40.97266769 466.82357788]
[34.47779846 480.38134766]
[25.89210510 492.72158813]
[15.43797874 503.52471924]
[3.38620567 512.51086426]
[-9.95104313 519.44726562]
[-24.22830200 524.15429688]
[-39.07575607 526.51000977]
[-54.10881805 526.45336914]
[-68.93809509 523.98583984]
[-83.17948151 519.17138672]
[-96.46408081 512.13464355]
[-108.44779205 503.05792236]
[-118.82021332 492.17633057]
[-127.31266785 479.77172852]
[-133.70518494 466.16540527]
[-137.83218384 451.70980835]
[-139.58676147 436.77938843]
[-138.92346191 421.76086426]
[-135.85949707 407.04324341]
[-130.47419739 393.00775146]
[-122.90706635 380.01797485]
[-113.35411072 368.41033936]
[-102.06278229 358.48550415]
[-89.32554626 350.50057983]
[-75.47232819 344.66238403]
[-60.86196136 341.12213135]
[-45.87288666 339.97155762]
[-30.89336395 341.24038696]
[-16.31139183 344.89584351]
[-10.37962341 331.11853027]
[-4.44785500 317.34124756]
[1.48391318 303.56393433]
[7.41568136 289.78662109]
[-4.53720522 280.77459717]
[-13.99147034 269.15661621]
[-20.39418221 255.60534668]
[-23.36923790 240.90661621]
[-22.73944283 225.91397095]
[-18.53706932 211.49909973]
[-11.00222588 198.50114441]
[-0.56914717 187.67782593]
[12.15883446 179.66130066]
[26.44417381 174.92123413]
[41.45785141 173.73727417]
[56.32748795 176.18257141]
[62.25925827 162.40527344]
[68.19102478 148.62796021]
[74.12279510 134.85066223]
[80.05455780 121.07335663]
[85.98632812 107.29605103]
[77.74880981 119.83172607]
[65.01261902 127.75571442]
[50.12720871 129.60626221]
[35.83848572 125.04200745]
[24.78228951 114.90492249]
[18.99815750 101.06498718]
[19.55308533 86.07525635]
[26.34470749 72.70088196]
[38.12017441 63.40903854]
[52.70726395 59.91378403]
[67.41510010 62.85989761]
[79.53052521 71.70390320]
[86.81774139 84.81141663]
[81.91965485 70.63365936]
[77.02157593 56.45590210]
[72.12349701 42.27814484]
[67.22541809 28.10038567]
[62.32733536 13.92262936]
[57.42925262 -0.25512826]
[52.53117371 -14.43288612]
[47.63309097 -28.61064339]
[42.73501205 -42.78839874]
[28.99545288 -51.07115555]
[27.04763985 -66.99552917]
[38.38576889 -78.34569550]
[54.31219864 -76.41478729]
[62.60953522 -62.68402863]
[56.91276932 -47.68648148]
[61.81085205 -33.50872421]
[66.70893097 -19.33096695]
[71.60700989 -5.15320873]
[76.50508881 9.02454853]
[81.40317535 23.20230675]
[86.30125427 37.38006210]
[91.19933319 51.55781937]
[96.09741211 65.73558044]
[100.99549866 79.91333771]
[103.49420166 65.12291718]
[105.99291229 50.33250046]
[108.49162292 35.54208374]
[110.99033356 20.75166512]
[108.05464935 6.04174471]
[108.83902740 -8.93773270]
[113.29496765 -23.26060104]
[121.14697266 -36.04129410]
[131.90954590 -46.48958969]
[144.91726685 -53.95948410]
[159.36585999 -57.98911667]
[174.36199951 -58.32934570]
[188.97848511 -54.95912933]
[202.31159973 -48.08684921]
[213.53695679 -38.13740921]
[221.96051025 -25.72597122]
[227.06144714 -11.61992645]
[228.52435303 3.30856490]
[226.25881958 18.13648987]
[220.40490723 31.94705009]
[211.32453918 43.88635635]
[199.57916260 53.21620941]
[185.89497375 59.35975266]
[171.11399841 61.93733978]
[158.22499084 69.61022949]
[145.33596802 77.28311920]
[132.44696045 84.95601654]
[119.55793762 92.62890625]
[134.54769897 92.07463074]
[149.53744507 91.52036285]
[164.52720642 90.96608734]
[179.51696777 90.41181183]
[185.57946777 76.40435791]
[197.12483215 66.42099762]
[211.86068726 62.44393158]
[226.86125183 65.26280975]
[239.14811707 74.31793976]
[246.28175354 87.81142426]
[246.84574890 103.06411743]
[240.72811890 117.04758453]
[229.14353943 126.98540497]
[214.39213562 130.90441895]
[199.40280151 128.02648926]
[187.15167236 118.92304230]
[180.07122803 105.40157318]
[165.08148193 105.95584106]
[150.09172058 106.51011658]
[135.10197449 107.06439209]
[120.11221313 107.61865997]
[115.25077820 112.05135345]
[109.74106598 114.37959290]
[104.35683441 114.66568756]
[99.76363373 113.22782135]
[93.83186340 127.00511932]
[87.90010071 140.78242493]
[81.96833038 154.55973816]
[76.03656006 168.33703613]
[70.10479736 182.11434937]
[82.10010529 191.23564148]
[91.55799103 202.95574951]
[97.93205261 216.59063721]
[100.85571289 231.34593201]
[100.16328430 246.36305237]
[95.89935303 260.76928711]
[88.31593323 273.72845459]
[77.85759735 284.48944092]
[65.13536835 292.42977905]
[50.89109039 297.09158325]
[35.95409775 298.20797729]
[21.19298553 295.71838379]
[15.26121807 309.49569702]
[9.32944965 323.27301025]
[3.39768171 337.05029297]
[-2.53408623 350.82760620]
[10.14261627 358.90829468]
[21.35883522 368.91790771]
[30.82404327 380.59722900]
[38.29306793 393.64367676]
[43.57244492 407.71932983]
[46.52542496 422.45962524]
[47.07551956 437.48272705]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[30 162]
[31 161]
[32 160]
[33 159]
[34 158]
[46 146]
[47 145]
[48 144]
[49 143]
[50 142]
[51 141]
[64 88]
[65 87]
[66 86]
[67 85]
[68 84]
[69 83]
[70 82]
[71 81]
[72 80]
[73 79]
[116 137]
[117 136]
[118 135]
[119 134]
[120 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
