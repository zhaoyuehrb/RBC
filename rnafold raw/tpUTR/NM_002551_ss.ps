%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 07:21:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGUAAUGGGGUCCCUCCUUUCCUGCCUUUUCUGGACUGAGGAAAAUUUCCCAUGAAGACAGUAACCAGGAAAAAUUCA\
) } def
/len { sequence length } bind def

/coor [
[90.03670502 123.72438049]
[95.52593994 109.76698303]
[81.53268433 115.16964722]
[67.53942871 120.57231140]
[53.54616928 125.97497559]
[39.55291367 131.37763977]
[32.87871170 147.41125488]
[17.03201103 153.65670776]
[1.82235575 146.76356506]
[-11.95088577 152.70475769]
[-25.72412682 158.64596558]
[-39.49736786 164.58715820]
[-46.73300552 178.90585327]
[-62.46790314 182.03517151]
[-74.63159180 171.57456970]
[-73.89312744 155.54852295]
[-60.81900406 146.25083923]
[-45.43856430 150.81391907]
[-31.66532326 144.87272644]
[-17.89208221 138.93151855]
[-4.11884069 132.99032593]
[-1.01276505 120.32968903]
[9.02109432 111.70330048]
[22.39517784 110.49603271]
[34.15024948 117.38439178]
[48.14350510 111.98171997]
[62.13676071 106.57905579]
[76.13001251 101.17639160]
[90.12326813 95.77372742]
[102.96577454 88.02323151]
[114.26731110 78.16041565]
[125.56885529 68.29759216]
[136.87039185 58.43477249]
[148.17193604 48.57195282]
[159.47346497 38.70913315]
[170.77500916 28.84631157]
[181.68560791 18.55268669]
[192.18887329 7.84374142]
[202.69212341 -2.86520457]
[213.19538879 -13.57415104]
[215.64913940 -37.93673706]
[237.91197205 -46.48182297]
[245.15866089 -59.61519623]
[252.40536499 -72.74857330]
[259.65203857 -85.88194275]
[262.01022339 -102.67108917]
[278.79602051 -105.05278015]
[285.73141479 -89.58227539]
[272.78543091 -78.63525391]
[265.53872681 -65.50188446]
[258.29205322 -52.36850739]
[251.04534912 -39.23513412]
[254.87159729 -33.55237198]
[256.82220459 -26.94207764]
[256.69259644 -20.00994492]
[254.46997070 -13.39897728]
[250.33677673 -7.72984838]
[244.65611267 -3.54264140]
[237.93974304 -1.24543738]
[230.80215454 -1.07463968]
[223.90434265 -3.07089043]
[213.40107727 7.63805580]
[202.89781189 18.34700203]
[192.39456177 29.05594826]
[191.56997681 34.00499725]
[187.45637512 38.39634323]
[180.63783264 40.14785004]
[169.33628845 50.01066971]
[158.03474426 59.87349319]
[146.73321533 69.73631287]
[135.43167114 79.59913635]
[124.13013458 89.46195221]
[112.82859802 99.32477570]
[127.73769379 100.97364044]
[139.55859375 110.20761871]
[144.76756287 124.27412415]
[141.81185913 138.98004150]
[131.57254028 149.94161987]
[117.10188293 153.89132690]
[102.71348572 149.65174866]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 29]
[3 28]
[4 27]
[5 26]
[6 25]
[9 21]
[10 20]
[11 19]
[12 18]
[30 73]
[31 72]
[32 71]
[33 70]
[34 69]
[35 68]
[36 67]
[37 64]
[38 63]
[39 62]
[40 61]
[42 52]
[43 51]
[44 50]
[45 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
