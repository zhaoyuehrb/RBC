%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 09:14:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUGGCCCACCUGUGAAUAAAUCUCAGCUGACCCCAGCCCACCUGUGAAUAAAUGUUUUUGCAGGAGAAAG\
) } def
/len { sequence length } bind def

/coor [
[168.94760132 141.42015076]
[163.96067810 131.14462280]
[162.18904114 119.83924866]
[147.46945190 116.95246887]
[132.74984741 114.06569672]
[118.03025055 111.17892456]
[104.70904541 120.68534088]
[88.58551788 117.88205719]
[79.25466919 104.43729401]
[64.42450714 102.18646240]
[49.61956024 107.76536560]
[38.19741440 98.20587158]
[23.36725235 95.95503998]
[8.53708744 93.70421600]
[-6.26785707 99.28311920]
[-17.69000244 89.72362518]
[-32.52016449 87.47279358]
[-46.23878860 95.79018402]
[-61.24464417 90.11534119]
[-66.02651978 74.80151367]
[-56.91617966 61.59616852]
[-40.90228653 60.62931061]
[-30.26933479 72.64263153]
[-15.43917084 74.89346313]
[-1.69497859 69.15356445]
[10.78791904 78.87404633]
[25.61808205 81.12487793]
[40.44824600 83.37570953]
[54.19244003 77.63581085]
[66.67533875 87.35630035]
[81.50550079 89.60712433]
[90.89974976 80.83639526]
[103.63391113 79.09896851]
[115.03437805 85.03250885]
[120.91702271 96.45932770]
[135.63662720 99.34609985]
[150.35621643 102.23287201]
[165.07582092 105.11965179]
[176.80397034 89.65652466]
[194.49563599 81.85786438]
[213.67590332 83.61841583]
[229.53096008 94.42479706]
[238.11627197 111.50232697]
[253.11279297 111.17958832]
[268.10931396 110.85684967]
[283.10583496 110.53410339]
[298.10238647 110.21136475]
[313.09890747 109.88861847]
[328.09542847 109.56587982]
[343.09194946 109.24314117]
[351.82949829 96.41991425]
[366.44692993 91.21320343]
[381.32360840 95.62509155]
[390.73907471 107.95912170]
[391.07293701 123.47261047]
[382.19680786 136.20028687]
[367.52374268 141.24812317]
[352.69583130 136.67510986]
[343.41470337 124.23966980]
[328.41818237 124.56240845]
[313.42163086 124.88514709]
[298.42510986 125.20789337]
[283.42858887 125.53063202]
[268.43206787 125.85337067]
[253.43553162 126.17611694]
[238.43901062 126.49885559]
[234.91531372 137.18151855]
[228.41267395 146.38685608]
[219.48786926 153.30480957]
[208.91146851 157.32209778]
[197.60133362 158.07658386]
[186.54295349 155.48988342]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 38]
[4 37]
[5 36]
[6 35]
[9 31]
[10 30]
[12 28]
[13 27]
[14 26]
[16 24]
[17 23]
[43 66]
[44 65]
[45 64]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
