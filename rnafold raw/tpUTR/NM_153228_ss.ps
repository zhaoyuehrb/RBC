%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 20:56:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUAUUAACCCAGCCUCCUUAUAAUAAAAUCACAAAGUUAUAUCUGUUCCCCCUUGUCCCAGUGGAGGGUCAAUAAAUCACAUGAUGGCUUUGGCAAC\
) } def
/len { sequence length } bind def

/coor [
[-65.15768433 349.26882935]
[-72.81727600 362.20062256]
[-82.36120605 373.81155396]
[-93.56576538 383.82943726]
[-106.16830444 392.01947021]
[-119.87339020 398.18966675]
[-134.35975647 402.19534302]
[-149.28782654 403.94262695]
[-164.30767822 403.39059448]
[-179.06719971 400.55212402]
[-193.22041321 395.49377441]
[-206.43556213 388.33413696]
[-218.40286255 379.24105835]
[-228.84176636 368.42764282]
[-237.50756836 356.14743042]
[-244.19715881 342.68823242]
[-248.75370789 328.36557007]
[-251.07038879 313.51519775]
[-251.09292603 298.48522949]
[-248.82075500 283.62799072]
[-244.30717468 269.29174805]
[-237.65795898 255.81256104]
[-229.02900696 243.50640869]
[-218.62255859 232.66175842]
[-206.68258667 223.53282166]
[-193.48895264 216.33361816]
[-179.35096741 211.23287964]
[-164.60000610 208.35017395]
[-149.58189392 207.75309753]
[-134.64865112 209.45564270]
[-120.15033722 213.41787720]
[-106.42681122 219.54693604]
[-93.79978943 227.69915771]
[-82.56524658 237.68342590]
[-71.00754547 228.12205505]
[-59.44984818 218.56069946]
[-47.89215088 208.99934387]
[-36.33444977 199.43798828]
[-24.77675247 189.87661743]
[-13.21905422 180.31526184]
[-1.66135526 170.75390625]
[9.89634323 161.19253540]
[9.32250023 148.21549988]
[16.48183441 137.14305115]
[28.91500854 132.19628906]
[42.10436630 135.41664124]
[53.95669174 126.22304535]
[65.80901337 117.02943420]
[61.89574051 102.66280365]
[63.77280045 87.89153290]
[71.15495300 74.96026611]
[82.92041016 65.83404541]
[97.28128052 61.89968872]
[112.05529022 63.75506973]
[124.99737549 71.11824036]
[136.84970093 61.92463303]
[148.70202637 52.73102570]
[154.86405945 38.15913773]
[169.66282654 36.47216797]
[181.51515198 27.27856255]
[193.36747742 18.08495712]
[195.09936523 2.37584901]
[207.48410034 -7.44219875]
[223.17401123 -5.54431248]
[232.86058044 6.94352579]
[230.79690552 22.61250305]
[218.20736694 32.16649246]
[202.56108093 29.93728256]
[190.70875549 39.13088989]
[178.85643005 48.32449341]
[173.54216003 62.23879623]
[157.89562988 64.58335114]
[146.04330444 73.77695465]
[134.19097900 82.97056580]
[138.10426331 97.33719635]
[136.22720337 112.10846710]
[128.84504700 125.03973389]
[117.07958984 134.16595459]
[102.71871948 138.10031128]
[87.94470978 136.24493408]
[75.00262451 128.88175964]
[63.15029907 138.07536316]
[51.29797363 147.26896667]
[49.48305130 164.58058167]
[36.02932739 175.08872986]
[19.45770264 172.75024414]
[7.90000439 182.31159973]
[-3.65769410 191.87295532]
[-15.21539307 201.43432617]
[-26.77309227 210.99568176]
[-38.33079147 220.55703735]
[-49.88848877 230.11839294]
[-61.44618607 239.67976379]
[-73.00388336 249.24111938]
[-65.30161285 262.14752197]
[-59.65986633 276.07846069]
[-56.21089554 290.70739746]
[-55.03554916 305.69134521]
[-56.16138077 320.67910767]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[34 94]
[35 93]
[36 92]
[37 91]
[38 90]
[39 89]
[40 88]
[41 87]
[42 86]
[46 83]
[47 82]
[48 81]
[55 74]
[56 73]
[57 72]
[59 70]
[60 69]
[61 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
