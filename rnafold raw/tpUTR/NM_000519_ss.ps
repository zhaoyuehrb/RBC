%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 15:58:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUCCUGGACUGUUUCCUGAUAACCAUAAGAAGACCCUAUUUCCCUAGAUUCUAUUUUCUGAACUUGGGAACACAAUGCCUACUUCAAGGGUAUGGCUUCUGCCUAAUAAAGAAUGUUCAGCUCAACUUCCUGAU\
) } def
/len { sequence length } bind def

/coor [
[163.80264282 259.13720703]
[160.03204346 244.61885071]
[149.72608948 238.17869568]
[146.50296021 226.04476929]
[152.63407898 214.63043213]
[149.19981384 200.02886963]
[145.76556396 185.42729187]
[142.33129883 170.82572937]
[138.89704895 156.22415161]
[135.46278381 141.62258911]
[95.05030823 148.45324707]
[66.28431702 126.24996948]
[53.01488113 133.24441528]
[39.74544907 140.23884583]
[26.47601509 147.23329163]
[17.87585449 160.51289368]
[3.00907254 159.60292053]
[-10.26036072 166.59736633]
[-10.77134418 181.94775391]
[-18.90268326 194.97760010]
[-32.46708679 202.18193054]
[-47.81579971 201.62283325]
[-60.82009506 193.45069885]
[-67.98188019 179.86378479]
[-67.37467957 164.51689148]
[-59.16181183 151.53828430]
[-45.55251312 144.41911316]
[-30.20760536 145.07441711]
[-17.25479698 153.32792664]
[-3.98536491 146.33349609]
[3.66567636 133.55416870]
[19.48157692 133.96385193]
[32.75101089 126.96941376]
[46.02044296 119.97497559]
[59.28987503 112.98053741]
[57.56377029 104.99749756]
[57.38813019 96.83185577]
[58.76937485 88.78197479]
[61.65703583 81.14196014]
[65.94561005 74.19094849]
[71.47840881 68.18290710]
[63.58192825 55.42964554]
[55.68544769 42.67638779]
[47.78896332 29.92313194]
[39.89248276 17.16987610]
[26.04924202 9.50989628]
[25.92758179 -5.38421249]
[18.03109932 -18.13747025]
[10.78640747 -23.85063362]
[10.10345078 -31.27775764]
[2.50364852 -44.21000290]
[-5.09615374 -57.14225006]
[-20.55271912 -58.51126480]
[-32.23051453 -68.72932434]
[-35.63919067 -83.86737061]
[-29.46804047 -98.10452271]
[-16.08999825 -105.96630859]
[-0.64919275 -104.42969513]
[10.91706944 -94.08556366]
[14.16132641 -78.91142273]
[7.83609295 -64.74205017]
[15.43589497 -51.80980682]
[23.03569794 -38.87755966]
[30.78435707 -26.03395271]
[38.68083954 -13.28069496]
[51.95927048 -6.53291368]
[52.64574051 9.27339268]
[60.54222107 22.02664948]
[68.43870544 34.77990723]
[76.33518982 47.53316498]
[84.23166656 60.28642273]
[96.18195343 55.04198074]
[109.83515930 53.51891708]
[124.00064087 56.25027466]
[137.32862854 63.38144302]
[148.43737793 74.62542725]
[159.04397583 64.01882935]
[169.65057373 53.41222382]
[180.25718689 42.80562210]
[190.86378479 32.19902039]
[201.47038269 21.59241867]
[199.92732239 6.03115320]
[208.79051208 -6.85209560]
[223.87500000 -10.97425175]
[238.05836487 -4.38895845]
[244.64366150 9.79440975]
[240.52149963 24.87890053]
[227.63824463 33.74207687]
[212.07698059 32.19902039]
[201.47038269 42.80562210]
[190.86378479 53.41222382]
[180.25718689 64.01882935]
[169.65057373 74.62542725]
[159.04397583 85.23203278]
[165.57452393 98.73580170]
[180.47457886 97.00715637]
[195.37464905 95.27851105]
[208.20724487 85.06790924]
[223.36497498 91.32691956]
[225.25486755 107.61680603]
[211.93275452 117.17993164]
[197.10328674 110.17857361]
[182.20323181 111.90721893]
[167.30317688 113.63586426]
[162.99346924 119.77397919]
[176.89825439 125.40042114]
[190.80303955 131.02685547]
[205.38328552 134.55059814]
[213.29153442 147.29655457]
[209.97389221 161.92506409]
[197.34078979 170.01237488]
[182.66691589 166.90147400]
[174.40248108 154.38543701]
[164.38827515 143.21781921]
[154.37405396 132.05020142]
[150.06436157 138.18832397]
[153.49861145 152.78990173]
[156.93287659 167.39146423]
[160.36712646 181.99304199]
[163.80139160 196.59460449]
[167.23564148 211.19618225]
[180.15530396 224.25885010]
[174.55038452 240.84825134]
[178.32099915 255.36659241]
[193.30560303 258.26901245]
[205.54183960 267.39248657]
[212.60017395 280.92550659]
[213.07916260 296.18109131]
[206.88371277 310.13024902]
[195.24394226 320.00338745]
[180.47091675 323.84011841]
[165.49784851 320.87872314]
[153.29765320 311.70715332]
[146.29266357 298.14642334]
[145.87374878 282.88906860]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 124]
[2 123]
[5 121]
[6 120]
[7 119]
[8 118]
[9 117]
[10 116]
[12 35]
[13 34]
[14 33]
[15 32]
[17 30]
[18 29]
[41 71]
[42 70]
[43 69]
[44 68]
[45 67]
[47 65]
[48 64]
[50 63]
[51 62]
[52 61]
[76 94]
[77 93]
[78 92]
[79 91]
[80 90]
[81 89]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
