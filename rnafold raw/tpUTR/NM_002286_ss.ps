%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 17:55:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGGAGCUGAGGCAGCCAGCAGAUCUCAGCAGCCCAGUCCAAAUAAACUCCCUGUCAGCAGCAA\
) } def
/len { sequence length } bind def

/coor [
[155.74411011 147.43161011]
[155.32917786 127.08612061]
[141.15417480 122.18009949]
[126.97915649 117.27407837]
[112.80414581 112.36805725]
[94.98456573 117.08099365]
[82.54179382 103.48223114]
[67.96461487 99.94584656]
[53.38744354 96.40946198]
[38.81027222 92.87307739]
[24.23309708 89.33669281]
[9.65592289 85.80030823]
[-4.92125034 82.26392365]
[-19.57845306 79.07544708]
[-30.81769371 89.77400208]
[-46.20329285 91.78968048]
[-59.81917572 84.34740448]
[-66.42975616 70.30889130]
[-63.49312973 55.07223129]
[-52.13848877 44.49623108]
[-36.73192978 42.64757538]
[-23.19758415 50.23711777]
[-16.73968506 64.34651947]
[-9.31439877 62.45074844]
[-1.38486612 67.68675232]
[13.19230747 71.22313690]
[27.76948166 74.75952148]
[42.34665298 78.29590607]
[56.92382812 81.83229065]
[71.50099945 85.36867523]
[86.07817841 88.90505981]
[94.63444519 83.02573395]
[105.01543427 82.91900635]
[113.69077301 88.62117004]
[117.71016693 98.19304657]
[131.88517761 103.09906769]
[146.06019592 108.00508881]
[160.23519897 112.91110229]
[166.43415833 103.72084808]
[174.46960449 96.09584045]
[183.95814514 90.39509583]
[194.44804382 86.88592529]
[205.44082642 85.73142242]
[216.41488647 86.98284912]
[226.85025024 90.57740021]
[236.25329590 96.34134674]
[244.17994690 103.99839783]
[250.25680542 113.18297577]
[254.19862366 123.45767212]
[255.82174683 134.33403015]
[255.05268860 145.29583740]
[251.93139648 155.82356262]
[246.60919189 165.41902161]
[257.46520996 175.77020264]
[268.32119751 186.12139893]
[284.37698364 189.45970154]
[289.25613403 205.11619568]
[277.93942261 216.98481750]
[262.06851196 212.85614014]
[257.97003174 196.97740173]
[247.11401367 186.62622070]
[236.25799561 176.27503967]
[218.21562195 185.27980042]
[198.05061340 186.49629211]
[178.98683167 179.70098877]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 38]
[3 37]
[4 36]
[5 35]
[7 31]
[8 30]
[9 29]
[10 28]
[11 27]
[12 26]
[13 25]
[14 23]
[53 62]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
