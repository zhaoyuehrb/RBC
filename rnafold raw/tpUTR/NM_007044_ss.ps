%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 19:22:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCUCACAUGUAAACUGUGAGAAAUGUGCCUUAAGUGUUUGAAUAUUAAAUGCAGUAAUUCAUUGUACUGAGUGCUAUAUUUUUUUUAACUUUCAUAAUGGUAAGAUUUUUUUAAAAAAACCCUUAUGAUUCUGAAUAAAGGCAAUAUUUUUAAGCUGAA\
) } def
/len { sequence length } bind def

/coor [
[80.20423889 228.16380310]
[79.82363129 213.16787720]
[72.57694244 226.30125427]
[65.33025360 239.43463135]
[58.08356857 252.56799316]
[50.83687973 265.70138550]
[43.59019089 278.83474731]
[36.34350204 291.96810913]
[29.09681129 305.10150146]
[34.89753342 319.62338257]
[29.95756721 334.46020508]
[16.60941696 342.60641479]
[1.15567017 340.21566772]
[-9.10688591 328.41677856]
[-9.33258724 312.78082275]
[0.58513618 300.69061279]
[15.96343803 297.85479736]
[23.21012688 284.72143555]
[30.45681572 271.58804321]
[37.70350647 258.45468140]
[44.95019531 245.32130432]
[52.19688416 232.18794250]
[59.44357300 219.05456543]
[66.69026184 205.92118835]
[65.55303955 201.75498962]
[66.13871765 197.03080750]
[68.67237091 192.48384094]
[73.06372070 188.92485046]
[76.23928070 174.26483154]
[79.41484070 159.60482788]
[82.59040070 144.94482422]
[85.76595306 130.28482056]
[88.94151306 115.62480927]
[78.24847412 97.25085449]
[91.19322205 76.91596985]
[81.77603912 65.24049377]
[72.35885620 53.56502151]
[55.10915375 56.69677353]
[38.72229385 50.71945953]
[27.65335655 37.35348892]
[24.86338806 20.31484413]
[31.02771187 4.28222084]
[21.16489220 -7.01931763]
[11.30207157 -18.32085609]
[1.43925071 -29.62239456]
[-8.42356968 -40.92393112]
[-18.28639030 -52.22547150]
[-33.64103699 -50.98408890]
[-46.63061142 -58.92917252]
[-52.38305664 -72.83504486]
[-48.88597870 -87.28871155]
[-58.74880219 -98.59024811]
[-73.65226746 -103.90035248]
[-76.19116211 -118.57698059]
[-86.05398560 -129.87850952]
[-95.91680145 -141.18005371]
[-105.77962494 -152.48159790]
[-115.64244080 -163.78312683]
[-131.08523560 -162.26667786]
[-144.45301819 -170.14590454]
[-150.60557556 -184.39109802]
[-147.17715454 -199.52468872]
[-135.48602295 -209.72750854]
[-120.02768707 -211.07633972]
[-106.74617767 -203.05255127]
[-100.74850464 -188.74145508]
[-104.34090424 -173.64595032]
[-94.47808838 -162.34442139]
[-84.61526489 -151.04287720]
[-74.75244141 -139.74133301]
[-64.88962555 -128.43980408]
[-50.69161224 -123.93805695]
[-47.44726181 -108.45307159]
[-37.58444214 -97.15153503]
[-22.79047966 -98.66040039]
[-9.79101944 -91.07897949]
[-3.67692542 -77.13368225]
[-6.98485184 -62.08829117]
[2.87796855 -50.78675461]
[12.74078941 -39.48521423]
[22.60360909 -28.18367577]
[32.46643066 -16.88213730]
[42.32925034 -5.58059931]
[54.44552231 -9.34490108]
[67.13066864 -8.22608662]
[78.48422241 -2.35609317]
[86.79166412 7.41866016]
[90.78334808 19.65915680]
[89.82844543 32.54557419]
[84.03433228 44.14783859]
[93.45151520 55.82331085]
[102.86869049 67.49878693]
[117.10733032 72.21695709]
[131.63317871 68.47534180]
[146.15902710 64.73371887]
[160.68487549 60.99210358]
[172.11883545 50.05704880]
[186.37379456 54.37506866]
[200.89964294 50.63345337]
[215.42549133 46.89183426]
[226.85943604 35.95677948]
[241.11439514 40.27479935]
[255.64025879 36.53318024]
[270.16610718 32.79156494]
[284.69195557 29.04994774]
[299.21780396 25.30833054]
[307.28146362 11.98109436]
[322.06604004 8.39348888]
[334.72183228 16.16308403]
[349.24768066 12.42146683]
[363.77352905 8.67984962]
[378.29937744 4.93823290]
[392.82522583 1.19661570]
[406.65545654 -8.60953045]
[419.90698242 1.96561790]
[413.41351318 17.62674904]
[396.56683350 15.72246552]
[382.04098511 19.46408272]
[367.51513672 23.20569992]
[352.98928833 26.94731712]
[338.46343994 30.68893433]
[331.13613892 43.60583878]
[316.45816040 47.60729599]
[302.95941162 39.83417892]
[288.43356323 43.57579803]
[273.90771484 47.31741333]
[259.38186646 51.05903244]
[244.85601807 54.80064774]
[234.46105957 65.46807861]
[219.16711426 61.41768265]
[204.64126587 65.15930176]
[190.11540222 68.90091705]
[179.72044373 79.56834412]
[164.42649841 75.51795197]
[149.90065002 79.25957489]
[135.37480164 83.00119019]
[120.84895325 86.74280548]
[122.77349854 101.89279175]
[115.61535645 114.03708649]
[103.60152435 118.80036163]
[100.42596436 133.46037292]
[97.25040436 148.12037659]
[94.07485199 162.78039551]
[90.89929199 177.44039917]
[87.72373199 192.10040283]
[97.87004089 181.05267334]
[110.87597656 173.57968140]
[125.53018188 170.37745667]
[140.46778870 171.74426270]
[154.29750061 177.55279541]
[165.73124695 187.26203918]
[173.70408630 199.96769714]
[177.47344971 214.48637390]
[176.68824768 229.46582031]
[171.42163086 243.51083374]
[162.16410828 255.31330872]
[149.77792358 263.77395630]
[135.41673279 268.10476685]
[120.41809082 267.90237427]
[106.17898560 263.18560791]
[94.02561951 254.39381409]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 24]
[3 23]
[4 22]
[5 21]
[6 20]
[7 19]
[8 18]
[9 17]
[28 145]
[29 144]
[30 143]
[31 142]
[32 141]
[33 140]
[35 92]
[36 91]
[37 90]
[42 83]
[43 82]
[44 81]
[45 80]
[46 79]
[47 78]
[51 74]
[52 73]
[54 71]
[55 70]
[56 69]
[57 68]
[58 67]
[93 137]
[94 136]
[95 135]
[96 134]
[98 132]
[99 131]
[100 130]
[102 128]
[103 127]
[104 126]
[105 125]
[106 124]
[109 121]
[110 120]
[111 119]
[112 118]
[113 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
