%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 11:23:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGCACUCCUCCCCACACACCUGCUCCCAAGCUCAGAUGGAAGUCCCUUAACCCCCAUGCCACAUUGCCCCCCUCCUCCUUUCCCUCUUGUCCUCAUUAAUGGUGAUGUUUCUGGGUUGAAAGAAGUAAAAAUGUUUUAAGAA\
) } def
/len { sequence length } bind def

/coor [
[120.18561554 106.60672760]
[127.45745087 93.49087524]
[114.30654907 100.70570374]
[106.88965607 112.55818939]
[92.90827942 112.44519806]
[79.75737762 119.66002655]
[66.60647583 126.87486267]
[53.53506088 134.23271179]
[40.54467773 141.73271179]
[27.63688087 149.37396240]
[14.81320286 157.15556335]
[16.58645439 165.59669495]
[16.29514503 174.20129395]
[13.96365738 182.47264099]
[9.73392677 189.93510437]
[3.85681868 196.16142273]
[-3.32273436 200.79716492]
[-11.38597679 203.58094788]
[-19.86474800 204.35917664]
[-28.26866913 203.09440613]
[-36.11349487 199.86717224]
[-42.94903183 194.87086487]
[-48.38494873 188.40014648]
[-62.36506653 193.83671570]
[-76.34518433 199.27328491]
[-86.18222046 212.39443970]
[-102.42946625 210.16751099]
[-108.37313843 194.88337708]
[-97.89890289 182.26504517]
[-81.78175354 185.29316711]
[-67.80163574 179.85659790]
[-53.82151794 174.42002869]
[-50.45782471 152.66571045]
[-34.75090408 137.06713867]
[-12.72920609 133.81797791]
[7.03160429 144.33189392]
[19.85528183 136.55029297]
[23.97306442 130.34431458]
[33.04467773 128.74232483]
[46.03506088 121.24233246]
[50.28724670 115.12767029]
[59.39164734 113.72396088]
[72.54254913 106.50912476]
[85.69345093 99.29429626]
[93.11034393 87.44181061]
[107.09172058 87.55480194]
[120.24262238 80.33997345]
[130.96429443 69.84970093]
[138.46429443 56.85931778]
[145.96429443 43.86893845]
[153.46429443 30.87855530]
[160.96429443 17.88817406]
[168.46429443 4.89779329]
[175.96429443 -8.09258747]
[168.60206604 -17.75042343]
[164.96975708 -29.30199051]
[165.47700500 -41.36572647]
[170.03982544 -52.50721359]
[178.09344482 -61.40973282]
[188.66204834 -67.02986908]
[200.47705078 -68.71977997]
[212.12925720 -66.30178070]
[220.46281433 -78.77382660]
[228.79635620 -91.24587250]
[237.12991333 -103.71791077]
[245.46347046 -116.18995667]
[253.79702759 -128.66200256]
[262.13058472 -141.13404846]
[270.46414185 -153.60609436]
[259.70178223 -164.11734009]
[251.05429077 -176.42732239]
[244.81622314 -190.11677551]
[241.20002747 -204.71943665]
[240.32887268 -219.73794556]
[242.23243713 -234.66078186]
[246.84588623 -248.97969055]
[254.01206970 -262.20693970]
[263.48693848 -273.89205933]
[274.94775391 -283.63699341]
[288.00418091 -291.10992432]
[302.21151733 -296.05624390]
[317.08587646 -298.30752563]
[332.12063599 -297.78707886]
[346.80371094 -294.51263428]
[360.63500977 -288.59570312]
[373.14343262 -280.23785400]
[383.90295410 -269.72369385]
[392.54711914 -257.41137695]
[398.78149414 -243.72026062]
[402.39373779 -229.11662292]
[403.26086426 -214.09786987]
[401.35327148 -199.17555237]
[396.73596191 -184.85789490]
[389.56619263 -171.63256836]
[380.08819580 -159.95001221]
[368.62475586 -150.20814514]
[355.56631470 -142.73875427]
[341.35763550 -137.79626465]
[326.48266602 -135.54899597]
[311.44805908 -136.07348633]
[296.76586914 -139.35189819]
[282.93618774 -145.27253723]
[274.60263062 -132.80049133]
[266.26907349 -120.32845306]
[257.93551636 -107.85640717]
[249.60195923 -95.38436127]
[241.26840210 -82.91231537]
[232.93486023 -70.44026947]
[224.60130310 -57.96822739]
[233.35467529 -42.19701004]
[232.95941162 -24.07948112]
[223.43835449 -8.56132889]
[207.31713867 0.07847172]
[188.95466614 -0.59258759]
[181.45466614 12.39779377]
[173.95466614 25.38817406]
[166.45466614 38.37855530]
[158.95466614 51.36893845]
[151.45466614 64.35931396]
[143.95466614 77.34970093]
[157.22900391 70.36456299]
[171.73910522 66.56236267]
[186.73316956 66.14010620]
[201.43426514 69.11967468]
[215.08065796 75.34667969]
[226.96530151 84.49848175]
[236.47236633 96.10087585]
[243.10928345 109.55269623]
[246.53213501 124.15694427]
[246.56358337 139.15690613]
[243.20199585 153.77539062]
[236.62153625 167.25491333]
[227.16319275 178.89706421]
[215.31703186 188.09861755]
[201.69686890 194.38278198]
[187.00839233 197.42396545]
[172.01269531 197.06457520]
[157.48677063 193.32325745]
[144.18327332 186.39382935]
[132.79150391 176.63537598]
[123.90172577 164.55348206]
[117.97456360 150.77420044]
[115.31711578 136.01147461]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 47]
[3 46]
[5 44]
[6 43]
[7 42]
[8 40]
[9 39]
[10 37]
[11 36]
[23 32]
[24 31]
[25 30]
[48 120]
[49 119]
[50 118]
[51 117]
[52 116]
[53 115]
[54 114]
[62 109]
[63 108]
[64 107]
[65 106]
[66 105]
[67 104]
[68 103]
[69 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
