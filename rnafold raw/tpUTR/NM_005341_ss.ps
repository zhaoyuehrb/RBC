%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:22:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAUUCUGGCCACCAGAGCCCACUUGGCCCCACCCCUCAAUAAACCGUGUGGCUUUGGACUCUCGUA\
) } def
/len { sequence length } bind def

/coor [
[51.51066208 224.73843384]
[38.50058746 226.07344055]
[30.70682716 238.88973999]
[22.91306686 251.70602417]
[19.84941864 268.38085938]
[2.97813225 270.05300903]
[-3.29909229 254.30395508]
[10.09677696 243.91226196]
[17.89053535 231.09597778]
[25.68429565 218.27967834]
[20.95577240 202.30000305]
[29.27018356 187.47441101]
[46.01478195 183.00389099]
[53.21713638 169.84614563]
[52.54119873 154.96688843]
[65.95447540 146.57673645]
[73.15682983 133.41899109]
[80.35918427 120.26126099]
[87.56153870 107.10352325]
[87.43528748 93.12226105]
[99.28072357 85.69412231]
[106.48307800 72.53638458]
[113.68543243 59.37864685]
[109.92735291 48.72454834]
[112.78656006 38.02635574]
[121.01931763 30.95941734]
[131.58232117 29.80320549]
[139.95133972 17.35492706]
[148.32034302 4.90664721]
[156.68936157 -7.54163218]
[157.96786499 -23.31109619]
[171.48991394 -29.55636787]
[179.85893250 -42.00464630]
[188.22793579 -54.45292664]
[180.10252380 -67.33305359]
[177.92485046 -82.40546417]
[182.07217407 -97.05876923]
[191.82597351 -108.75421143]
[205.49635315 -115.46546936]
[220.71479797 -116.02977753]
[234.84466553 -110.34937286]
[245.43783569 -99.40841675]
[250.65899658 -85.10249329]
[249.60354614 -69.91020203]
[242.45434570 -56.46368027]
[230.45004272 -47.09263229]
[215.67045593 -43.42064667]
[200.67622375 -46.08391571]
[192.30720520 -33.63563538]
[183.93820190 -21.18735695]
[183.25828552 -6.30827808]
[169.13763428 0.82737875]
[160.76863098 13.27565765]
[152.39961243 25.72393799]
[144.03060913 38.17221832]
[144.47673035 57.29757690]
[126.84317017 66.58100128]
[119.64081573 79.73873901]
[112.43846130 92.89647675]
[112.56471252 106.87773895]
[100.71927643 114.30587769]
[93.51692200 127.46361542]
[86.31456757 140.62135315]
[79.11221313 153.77909851]
[79.27298737 169.59948730]
[66.37487793 177.04850769]
[59.17252350 190.20623779]
[64.45787811 202.81132507]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 10]
[3 9]
[4 8]
[13 67]
[14 66]
[16 64]
[17 63]
[18 62]
[19 61]
[21 59]
[22 58]
[23 57]
[27 55]
[28 54]
[29 53]
[30 52]
[32 50]
[33 49]
[34 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
