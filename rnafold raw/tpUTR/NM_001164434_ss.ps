%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 11:50:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGCUGAUCACUUUGAGCCAUUUUCUUGUGAUGCACUAAUUGCAUCAACAGGGUUAUUUAUGGAUUCGUUAUUGUCUCUCCAAUUUUAACUAACUCUAAUUAUUGAUUACCACAGGUCAUAUUUGCAUUGGA\
) } def
/len { sequence length } bind def

/coor [
[188.25791931 156.39692688]
[178.59745789 157.06289673]
[169.31887817 154.09492493]
[161.74818420 147.87193298]
[156.98399353 139.24118042]
[155.73811340 129.40306091]
[141.73228455 124.03305054]
[127.72646332 118.66304779]
[116.90161896 128.83403015]
[102.73860931 133.31015015]
[88.03472137 131.20733643]
[75.69403076 122.94091797]
[68.15389252 110.14354706]
[66.90352631 95.34277344]
[52.89770889 89.97277069]
[38.89188766 84.60276794]
[24.88606453 79.23275757]
[10.81779957 74.02854156]
[-3.31094790 68.99082947]
[-17.43969536 63.95312500]
[-31.56844330 58.91542053]
[-49.78738022 69.22590637]
[-69.48017120 63.02619934]
[-78.25794220 44.65866852]
[-92.79895020 40.97638702]
[-107.33995056 37.29410553]
[-121.88095856 33.61182404]
[-136.42196655 29.92954063]
[-150.96296692 26.24725914]
[-165.54644775 22.73696518]
[-180.17036438 19.39915085]
[-194.79428101 16.06133652]
[-209.41819763 12.72352314]
[-224.04211426 9.38570976]
[-238.66603088 6.04789543]
[-252.96040344 13.33148384]
[-267.50717163 6.56601954]
[-271.14727783 -9.05861187]
[-261.08837891 -21.55653000]
[-245.04676819 -21.34040260]
[-235.32821655 -8.57602310]
[-220.70429993 -5.23820925]
[-206.08038330 -1.90039527]
[-191.45646667 1.43741870]
[-176.83255005 4.77523279]
[-162.20863342 8.11304665]
[-154.91802979 6.51927996]
[-147.28068542 11.70625401]
[-132.73968506 15.38853645]
[-118.19867706 19.07081985]
[-103.65766907 22.75310135]
[-89.11666870 26.43538284]
[-74.57566071 30.11766624]
[-68.25664520 22.93489647]
[-59.67903519 18.56841087]
[-50.03700638 17.67446518]
[-40.69091034 20.42245674]
[-32.97535706 26.46489334]
[-28.00863266 34.98071289]
[-26.53073692 44.78667068]
[-12.40198803 49.82437897]
[1.72675920 54.86208725]
[15.85550690 59.89979172]
[23.28311920 59.17618561]
[30.25607109 65.22693634]
[44.26189423 70.59694672]
[58.26771545 75.96694946]
[72.27353668 81.33695221]
[83.09838104 71.16596985]
[97.26139069 66.68984985]
[111.96527863 68.79265594]
[124.30596924 77.05908203]
[131.84609985 89.85645294]
[133.09646606 104.65722656]
[147.10229492 110.02722931]
[161.10810852 115.39723206]
[179.56549072 105.51993561]
[199.10635376 112.18302917]
[207.44786072 130.75276184]
[221.89784241 134.77745056]
[236.34780884 138.80215454]
[250.79779053 142.82684326]
[265.24777222 146.85154724]
[279.69775391 150.87623596]
[284.32287598 141.79344177]
[290.32949829 133.56314087]
[297.56433105 126.39353943]
[305.84295654 120.46577454]
[314.95471191 115.92934418]
[324.66781616 112.89838409]
[334.73550415 111.44873047]
[344.90213013 111.61605835]
[354.90975952 113.39501953]
[364.50457764 116.73937225]
[373.44354248 121.56318665]
[381.50033569 127.74308777]
[388.47116089 135.12136841]
[394.17996216 143.51004028]
[398.48281860 152.69558716]
[401.27154541 162.44448853]
[402.47640991 172.50901794]
[402.06799316 182.63366699]
[400.05776978 192.56155396]
[396.49780273 202.04100037]
[409.24557495 209.94633484]
[421.99334717 217.85168457]
[434.74111938 225.75701904]
[447.48889160 233.66236877]
[462.81674194 229.81108093]
[476.33535767 237.99783325]
[480.02435303 253.36555481]
[471.69512939 266.79684448]
[456.28927612 270.32318115]
[442.94677734 261.85241699]
[439.58352661 246.41012573]
[426.83578491 238.50479126]
[414.08801270 230.59944153]
[401.34024048 222.69410706]
[388.59246826 214.78877258]
[373.21594238 228.72050476]
[354.15615845 236.96687317]
[333.43829346 238.63906860]
[313.26779175 233.54747009]
[295.79553223 222.22305298]
[282.88851929 205.86209106]
[275.93038940 186.19979858]
[275.67303467 165.32621765]
[261.22308350 161.30151367]
[246.77310181 157.27682495]
[232.32312012 153.25212097]
[217.87313843 149.22743225]
[203.42317200 145.20272827]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 76]
[7 75]
[8 74]
[14 68]
[15 67]
[16 66]
[17 65]
[18 63]
[19 62]
[20 61]
[21 60]
[24 53]
[25 52]
[26 51]
[27 50]
[28 49]
[29 48]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[35 41]
[79 132]
[80 131]
[81 130]
[82 129]
[83 128]
[84 127]
[104 119]
[105 118]
[106 117]
[107 116]
[108 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
