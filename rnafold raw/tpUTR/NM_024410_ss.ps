%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 03:10:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCGCAUAGGAACCCAUUACUUAAUAGAAGUCAGUUACUCCAGCCAGGCAGCUCUCCCAAUGUUUCUCCUCUCCUUCCCAUGGCCCCUGUUGUUGAAGUACGUAGGAAACUGAAUACAUAACUGCAAUCUG\
) } def
/len { sequence length } bind def

/coor [
[88.57638550 139.62255859]
[86.60955048 124.75205994]
[92.63777161 111.01925659]
[78.68079376 116.51496124]
[71.76413727 122.62699890]
[64.33164978 121.97167206]
[50.24967575 127.13867950]
[46.20441055 137.36206055]
[37.35101700 143.50157166]
[26.79973412 143.69795227]
[18.09609795 138.12979126]
[3.78740931 142.63107300]
[-10.52127934 147.13233948]
[-11.24588776 162.25517273]
[-17.08981133 176.19148254]
[-27.32992935 187.26669312]
[-40.71614838 194.15719604]
[-55.62401199 196.04853821]
[-70.25180054 192.73156738]
[-82.83830261 184.62545776]
[-91.87486267 172.72479248]
[-106.18355560 177.22605896]
[-120.49224091 181.72732544]
[-134.80093384 186.22859192]
[-143.46318054 199.73211670]
[-159.43562317 201.23561096]
[-170.46557617 189.58572388]
[-168.09179688 173.71926880]
[-154.13525391 165.80760193]
[-139.30220032 171.91990662]
[-124.99350739 167.41864014]
[-110.68482208 162.91737366]
[-96.37613678 158.41610718]
[-95.78031158 143.48524475]
[-90.10147858 129.63317871]
[-80.00717163 118.53905487]
[-66.70143127 111.55487061]
[-51.78121185 109.54065704]
[-37.04470062 112.75864410]
[-24.27461624 120.83930206]
[-15.02254868 132.82365417]
[-0.71386027 128.32237244]
[13.59482861 123.82111359]
[25.47810173 108.63702393]
[45.08267212 113.05670166]
[59.16464996 107.88969421]
[73.18508911 102.55797577]
[87.14207458 97.06227875]
[93.96991730 88.52432251]
[104.70757294 88.16401672]
[117.39505768 80.16227722]
[130.08253479 72.16054535]
[142.77001953 64.15880585]
[138.09019470 49.26762009]
[137.40612793 33.68449783]
[140.75828552 18.46220016]
[147.91468811 4.62763166]
[158.38688660 -6.88742781]
[171.46334839 -15.30908394]
[186.25776672 -20.07333565]
[201.76914978 -20.86384201]
[216.94953918 -17.63292885]
[230.77482605 -10.60441399]
[242.31382751 -0.25811166]
[254.81024170 -8.55507851]
[267.30664062 -16.85204697]
[279.80307007 -25.14901352]
[292.29946899 -33.44598007]
[304.79589844 -41.74294662]
[301.94387817 -56.64736938]
[305.00720215 -71.46826935]
[313.48855591 -83.95348358]
[326.06973267 -92.21794891]
[340.81649780 -95.02833557]
[355.47579956 -91.98696136]
[367.82015991 -83.58777618]
[380.31655884 -91.88474274]
[392.81298828 -100.18170929]
[405.30938721 -108.47867584]
[408.65097046 -120.99965668]
[419.30789185 -127.64127350]
[431.23153687 -125.28074646]
[443.91903687 -133.28248596]
[456.60650635 -141.28422546]
[469.29397583 -149.28596497]
[481.98147583 -157.28770447]
[489.13702393 -172.04338074]
[505.51086426 -172.95429993]
[514.25897217 -159.08337402]
[506.38204956 -144.69982910]
[489.98321533 -144.60021973]
[477.29571533 -136.59848022]
[464.60824585 -128.59674072]
[451.92077637 -120.59500885]
[439.23327637 -112.59326935]
[431.96447754 -96.66432953]
[413.60635376 -95.98226166]
[401.10995483 -87.68529510]
[388.61352539 -79.38832855]
[376.11712646 -71.09136200]
[379.06723022 -56.45489883]
[376.18106079 -41.76424026]
[367.86785889 -29.26401901]
[355.36849976 -20.87631416]
[340.57034302 -17.90514183]
[325.72222900 -20.83379173]
[313.09286499 -29.24653625]
[300.59643555 -20.94956779]
[288.10003662 -12.65260124]
[275.60360718 -4.35563326]
[263.10720825 3.94133377]
[250.61079407 12.23830128]
[255.44480896 25.84939384]
[256.86538696 40.23291397]
[254.78463745 54.54544067]
[249.32011414 67.94661713]
[240.78819275 79.64848328]
[229.68577576 88.96180725]
[216.66127014 95.33669281]
[202.47680664 98.39503479]
[187.96363831 97.95294952]
[173.97337341 94.03180695]
[161.32803345 86.85726166]
[150.77175903 76.84628296]
[138.08427429 84.84802246]
[125.39678955 92.84976196]
[112.70931244 100.85150146]
[127.34969330 104.11633301]
[138.17462158 114.50002289]
[142.04554749 128.99194336]
[137.84014893 143.39038086]
[126.77772522 153.52066040]
[112.06568146 156.44567871]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 48]
[4 47]
[6 46]
[7 45]
[11 43]
[12 42]
[13 41]
[21 33]
[22 32]
[23 31]
[24 30]
[50 127]
[51 126]
[52 125]
[53 124]
[64 112]
[65 111]
[66 110]
[67 109]
[68 108]
[69 107]
[76 100]
[77 99]
[78 98]
[79 97]
[82 95]
[83 94]
[84 93]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
