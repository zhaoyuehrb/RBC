%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 21:55:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGUUCUGGGGUAGCAGAGUCACAGAUCACUCUAGAAUCUAAUACUUGGUAAUUAUACUGCAUUGAUUUUGUUGUUGUUGUGACAGAGUUUCACUCUGUCCCCCAGGCUGGAGUGCAAAUAAGCAACUUCAGCAAAGUCUCAG\
) } def
/len { sequence length } bind def

/coor [
[79.90937042 215.75440979]
[84.04597473 201.33607483]
[92.56190491 188.98783875]
[104.56908417 179.99742126]
[118.81536865 175.30236816]
[133.81509399 175.39231873]
[148.00535583 180.25857544]
[138.67117310 168.51664734]
[129.33699036 156.77471924]
[120.00279999 145.03279114]
[110.66861725 133.29084778]
[101.33442688 121.54891968]
[77.40168762 104.57338715]
[63.23960876 99.63015747]
[49.07752991 94.68692780]
[34.91545105 89.74369812]
[20.75337219 84.80046844]
[6.59129381 79.85723877]
[-7.57078552 74.91400909]
[-21.73286438 69.97078705]
[-35.89494324 65.02755737]
[-50.05702209 60.08432770]
[-64.21910095 55.14109802]
[-78.53432465 50.66065598]
[-92.98757935 46.64772797]
[-107.44082642 42.63480377]
[-121.93669891 38.77868271]
[-136.47349548 35.07982254]
[-147.86102295 47.01947021]
[-163.61961365 51.58200073]
[-179.44296265 47.61872482]
[-191.05628967 36.29747391]
[-195.37112427 20.76062202]
[-209.98463440 17.37756157]
[-224.59815979 13.99449921]
[-239.21166992 10.61143780]
[-249.63438416 21.89251900]
[-264.30599976 26.43554115]
[-279.27993774 23.01845551]
[-290.52832031 12.56044006]
[-295.02532959 -2.12535095]
[-291.56130981 -17.08851433]
[-281.06808472 -28.30403328]
[-266.36828613 -32.75498962]
[-251.41604614 -29.24409866]
[-240.23347473 -18.71577454]
[-235.82861328 -4.00207949]
[-221.21510315 -0.61901826]
[-206.60157776 2.76404309]
[-191.98806763 6.14710474]
[-183.31565857 -4.45411348]
[-170.85516357 -10.29821491]
[-157.02639771 -10.18702030]
[-144.54232788 -4.08507013]
[-135.87686157 6.86219645]
[-132.77462769 20.54302788]
[-118.23783875 24.24188995]
[-110.92581177 22.83264923]
[-103.42790222 28.18155479]
[-88.97464752 32.19448090]
[-74.52140045 36.20740509]
[-71.23747253 34.74193192]
[-67.06685638 34.83977127]
[-62.77363205 36.90596771]
[-59.27587509 40.97901917]
[-45.11379242 45.92224503]
[-30.95171547 50.86547470]
[-16.78963661 55.80870438]
[-2.62755656 60.75193405]
[11.53452301 65.69515991]
[25.69660187 70.63838959]
[39.85868073 75.58161926]
[54.02075958 80.52484894]
[68.18283844 85.46807861]
[82.34491730 90.41130829]
[70.32196045 81.44200134]
[66.30507660 66.98985291]
[71.97526550 53.10284805]
[84.95964813 45.59247208]
[99.82447815 47.60169983]
[110.34905243 58.28969955]
[112.12901306 73.18371582]
[104.41851044 86.05165863]
[115.63787842 76.09546661]
[126.85724640 66.13927460]
[138.07661438 56.18308258]
[149.29598999 46.22689056]
[160.51535034 36.27069855]
[171.73472595 26.31450653]
[182.95408630 16.35831261]
[190.78785706 1.32274234]
[207.40443420 4.68810463]
[208.77052307 21.58692551]
[192.91027832 27.57768250]
[181.69091797 37.53387451]
[170.47154236 47.49006653]
[159.25218201 57.44625854]
[148.03280640 67.40245056]
[136.81344604 77.35864258]
[125.59407043 87.31483459]
[114.37470245 97.27102661]
[113.07636261 112.21473694]
[122.41054535 123.95666504]
[131.74473572 135.69859314]
[141.07891846 147.44053650]
[150.41310120 159.18246460]
[159.74729919 170.92439270]
[171.07385254 180.75846863]
[184.00973511 188.35208130]
[196.94561768 195.94570923]
[209.88148499 203.53932190]
[222.81736755 211.13294983]
[235.75325012 218.72656250]
[248.68911743 226.32019043]
[261.62500000 233.91380310]
[274.64236450 241.36685181]
[287.73974609 248.67843628]
[302.87457275 244.12733459]
[316.75485229 251.68464661]
[321.14569092 266.86672974]
[313.44207764 280.66635132]
[298.21438599 284.89642334]
[284.49697876 277.04733276]
[280.42813110 261.77578735]
[267.33078003 254.46420288]
[259.90222168 253.94635010]
[254.03137207 246.84968567]
[241.09550476 239.25607300]
[228.15962219 231.66244507]
[215.22373962 224.06881714]
[202.28787231 216.47520447]
[189.35198975 208.88157654]
[176.41612244 201.28796387]
[163.48023987 193.69433594]
[170.28968811 207.05964661]
[172.48464966 221.89817810]
[169.83624268 236.66253662]
[162.62063599 249.81300354]
[151.59031677 259.97824097]
[137.89555359 266.09817505]
[122.96448517 267.53454590]
[108.35417938 264.13763428]
[95.58825684 256.26165771]
[85.99798584 244.72793579]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 107]
[8 106]
[9 105]
[10 104]
[11 103]
[12 102]
[13 75]
[14 74]
[15 73]
[16 72]
[17 71]
[18 70]
[19 69]
[20 68]
[21 67]
[22 66]
[23 65]
[24 61]
[25 60]
[26 59]
[27 57]
[28 56]
[33 50]
[34 49]
[35 48]
[36 47]
[83 101]
[84 100]
[85 99]
[86 98]
[87 97]
[88 96]
[89 95]
[90 94]
[108 134]
[109 133]
[110 132]
[111 131]
[112 130]
[113 129]
[114 128]
[115 127]
[116 125]
[117 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
