%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 03:44:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGAUAUGGCUGCAGAAAGACAAGAUGAAUUGUGGCAAGAGUGCAGAGGGGGAAAGAAGGAGGUUUCCCAGUUCCGAUGGCUGACUAAUGGGAGGAGGAGAUGGAGAAAGCACAGUAAACAGACUGGACUAA\
) } def
/len { sequence length } bind def

/coor [
[100.21055603 153.98304749]
[93.61627197 153.60467529]
[87.11755371 152.42381287]
[80.81169128 150.45812988]
[74.79309845 147.73704529]
[69.15187073 144.30131531]
[63.97245407 140.20236206]
[59.33239746 135.50154114]
[55.30115891 130.26925659]
[51.93909836 124.58380127]
[49.29653931 118.53031921]
[34.62921906 121.67192841]
[19.96189499 124.81352997]
[5.29457378 127.95513153]
[-9.37274742 131.09674072]
[-13.05126190 148.56179810]
[-23.91030884 162.66052246]
[-39.76380157 170.62910461]
[-57.45234299 170.93035889]
[-73.47283936 163.55007935]
[-84.67224121 149.99084473]
[-99.08251953 154.15544128]
[-113.49279785 158.32005310]
[-127.90307617 162.48464966]
[-135.31590271 176.44264221]
[-150.45161438 180.99081421]
[-164.33044434 173.43083191]
[-168.71835327 158.24789429]
[-161.01205444 144.44975281]
[-145.78356934 140.22262573]
[-132.06767273 148.07437134]
[-117.65740204 143.90977478]
[-103.24712372 139.74516296]
[-88.83684540 135.58056641]
[-88.08197021 123.22014618]
[-83.52828217 111.67788696]
[-75.60909271 102.09365845]
[-65.09089661 95.41902161]
[-52.99916458 92.32275391]
[-40.51839066 93.12389374]
[-28.87604904 97.75891876]
[-19.22187996 105.78647614]
[-12.51435184 116.42941284]
[2.15297008 113.28781128]
[16.82029152 110.14620972]
[31.48761368 107.00460052]
[46.15493393 103.86299896]
[47.41291809 87.80113220]
[53.35477829 72.82579803]
[63.45128632 60.27085114]
[76.80315399 51.25453949]
[72.30187988 36.94585037]
[67.80061340 22.63716125]
[63.29934311 8.32847118]
[58.79807663 -5.98021698]
[54.29680634 -20.28890610]
[39.54254532 -25.09426308]
[30.45789146 -37.67395782]
[30.53607368 -53.19083405]
[39.74703217 -65.67834473]
[54.54896545 -70.33477783]
[69.25022888 -65.36964417]
[78.19788361 -52.69214249]
[77.95137787 -37.17702866]
[68.60549164 -24.79017448]
[73.10676575 -10.48148632]
[77.60803223 3.82720208]
[82.10930634 18.13589096]
[86.61057281 32.44458008]
[91.11183929 46.75326920]
[110.87078094 47.12240601]
[129.17286682 54.57800293]
[143.56530762 68.12088776]
[156.78375244 61.03055573]
[170.00219727 53.94023132]
[183.22064209 46.84990311]
[189.37498474 39.97087097]
[196.83311462 39.75242615]
[210.21414185 32.97392273]
[215.22239685 18.22417259]
[228.88922119 11.54042244]
[242.91998291 16.40592766]
[256.30102539 9.62742329]
[261.30926514 -5.12232590]
[274.97610474 -11.80607605]
[289.00686646 -6.94057035]
[302.38787842 -13.71907520]
[307.06811523 -28.81447601]
[321.09033203 -36.10509872]
[336.13540649 -31.26554489]
[343.27734375 -17.16703606]
[338.27902222 -2.17396951]
[324.10577393 4.81853628]
[309.16638184 -0.33804834]
[295.78536987 6.44045639]
[291.40798950 20.63108826]
[277.93426514 27.69607544]
[263.07952881 23.00844955]
[249.69848633 29.78695488]
[245.32110596 43.97758865]
[231.84739685 51.04257202]
[216.99264526 46.35494995]
[203.61161804 53.13345337]
[190.31095886 60.06834793]
[177.09251404 67.15867615]
[163.87406921 74.24900055]
[150.65563965 81.33933258]
[153.95780945 101.66410065]
[149.40943909 121.74674988]
[137.67230225 138.66539001]
[146.54588318 150.75915527]
[161.91567993 153.29035950]
[170.74247742 165.68157959]
[168.23464966 180.31872559]
[177.10824585 192.41250610]
[185.98182678 204.50628662]
[194.85540771 216.60006714]
[210.51261902 218.75115967]
[219.99620056 231.39384460]
[217.67968750 247.02743530]
[204.93745422 256.37680054]
[189.32922363 253.89515686]
[180.11508179 241.05477905]
[182.76162720 225.47366333]
[173.88804626 213.37988281]
[165.01446533 201.28610229]
[156.14086914 189.19232178]
[141.42575073 187.19216919]
[132.25439453 175.05377197]
[134.45210266 159.63275146]
[125.57851410 147.53897095]
[119.58132935 150.30691528]
[113.29100037 152.32173157]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 47]
[12 46]
[13 45]
[14 44]
[15 43]
[21 34]
[22 33]
[23 32]
[24 31]
[51 70]
[52 69]
[53 68]
[54 67]
[55 66]
[56 65]
[73 107]
[74 106]
[75 105]
[76 104]
[78 103]
[79 102]
[82 99]
[83 98]
[86 95]
[87 94]
[110 131]
[111 130]
[114 127]
[115 126]
[116 125]
[117 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
