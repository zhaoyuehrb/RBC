%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 03:56:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACUGCUUCAAUGUGGUAUCUUUGUAUGGCAAUGUAUAUAGAUUUUUUUAAAAGAAUAAAUGUUGUUUUGCAAAUGUAG\
) } def
/len { sequence length } bind def

/coor [
[42.97291946 188.99310303]
[31.67138100 198.85591125]
[20.56321907 208.93603516]
[9.65261555 219.22966003]
[-1.25798929 229.52328491]
[-12.16859436 239.81690979]
[-23.07919884 250.11053467]
[-23.28827667 265.91345215]
[-34.66859055 276.87994385]
[-50.46840286 276.50378418]
[-61.31396484 265.00817871]
[-60.77079773 249.21321106]
[-49.16114807 238.48979187]
[-33.37282181 239.19992065]
[-22.46221924 228.90629578]
[-11.55161381 218.61267090]
[-0.64100921 208.31906128]
[10.26959515 198.02543640]
[13.04497528 190.96188354]
[21.80855942 187.55438232]
[33.11009979 177.69155884]
[43.19021606 166.58340454]
[51.91259766 154.38011169]
[60.63497925 142.17683411]
[69.35736084 129.97355652]
[78.07974243 117.77027130]
[86.80212402 105.56699371]
[88.34672546 91.67073822]
[100.99459839 85.71062469]
[109.71697998 73.50734711]
[118.43936157 61.30406570]
[127.16174316 49.10078430]
[135.88412476 36.89750290]
[144.60650635 24.69422150]
[153.32888794 12.49094105]
[162.05126953 0.28765991]
[163.78126526 -15.43867779]
[177.47676086 -21.29379654]
[186.19914246 -33.49707794]
[194.92152405 -45.70035934]
[191.18310547 -58.80209351]
[195.68826294 -71.45227814]
[206.54483032 -79.01718903]
[219.58004761 -78.86699677]
[228.76905823 -90.72289276]
[237.95805359 -102.57878113]
[247.14706421 -114.43466949]
[252.07115173 -130.65779114]
[269.02337646 -130.41716003]
[273.48501587 -114.06080627]
[259.00296021 -105.24565887]
[249.81394958 -93.38977051]
[240.62493896 -81.53388214]
[231.43592834 -69.67799377]
[234.31726074 -53.22968292]
[224.31642151 -39.44176865]
[207.12480164 -36.97797775]
[198.40242004 -24.77469635]
[189.68003845 -12.57141590]
[188.57392883 2.28206110]
[174.25454712 9.01004124]
[165.53216553 21.21332169]
[156.80978394 33.41660309]
[148.08740234 45.61988449]
[139.36502075 57.82316589]
[130.64263916 70.02644348]
[121.92025757 82.22972870]
[113.19787598 94.43300629]
[111.65327454 108.32926178]
[99.00540161 114.28937531]
[90.28302002 126.49265289]
[81.56063843 138.69593811]
[72.83825684 150.89921570]
[64.11587524 163.10249329]
[55.39349747 175.30577087]
[70.38962555 175.64643860]
[81.00685120 186.24241638]
[81.37756348 201.23782349]
[71.29689026 212.34548950]
[56.33591461 213.42674255]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 21]
[2 20]
[3 18]
[4 17]
[5 16]
[6 15]
[7 14]
[22 75]
[23 74]
[24 73]
[25 72]
[26 71]
[27 70]
[29 68]
[30 67]
[31 66]
[32 65]
[33 64]
[34 63]
[35 62]
[36 61]
[38 59]
[39 58]
[40 57]
[44 54]
[45 53]
[46 52]
[47 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
