%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 03:25:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGAGCAGCUGCUGAUGUCUGGAGGCUGAUUUUCCUGUUCUCUGUUCUCCACUGGAAAGGUUGUUUACGACAAACCUCCUUGUCAAAGUGUGUAAAAAUAAAGGAUUGCUCCAUCCUAUUUGUUCUAUUUUCUCUUGGA\
) } def
/len { sequence length } bind def

/coor [
[78.09646606 121.30626678]
[65.10607910 128.80625916]
[52.11570358 136.30625916]
[39.12532043 143.80625916]
[26.13493919 151.30625916]
[13.14455891 158.80625916]
[1.16837907 167.83793640]
[-9.61397648 178.26582336]
[-20.39633179 188.69371033]
[-31.17868614 199.12159729]
[-41.96104050 209.54948425]
[-46.50202179 224.70501709]
[-61.02959824 227.99116516]
[-71.81195068 238.41905212]
[-82.59430695 248.84693909]
[-84.29897308 264.79916382]
[-97.91058350 273.29055786]
[-112.98748016 267.80722046]
[-117.96395111 252.55552673]
[-109.02247620 239.23526001]
[-93.02219391 238.06457520]
[-82.23983765 227.63668823]
[-71.45748138 217.20880127]
[-67.68772888 202.79914856]
[-52.38892746 198.76713562]
[-41.60657120 188.33924866]
[-30.82421875 177.91136169]
[-20.04186249 167.48347473]
[-9.25950718 157.05558777]
[-24.16478157 158.73867798]
[-38.19411469 153.43038940]
[-48.25191116 142.30201721]
[-52.11890030 127.80904388]
[-48.94183350 113.14936066]
[-39.42173004 101.55765533]
[-25.65921402 95.59165955]
[-10.69100761 96.56776428]
[2.18013334 104.27060699]
[10.11417198 117.00053406]
[11.36045170 131.94866943]
[5.64455891 145.81588745]
[18.63493919 138.31588745]
[31.62532043 130.81588745]
[44.61570358 123.31588745]
[57.60608292 115.81588745]
[70.59646606 108.31588745]
[68.11882019 91.02313232]
[75.77405548 73.79852295]
[92.54529572 62.48453140]
[114.14533997 61.71672058]
[134.08650208 73.17321777]
[134.42070007 58.17694092]
[134.75488281 43.18066406]
[135.08906555 28.18438721]
[125.85606384 12.29552650]
[135.44973755 -2.35777831]
[135.44973755 -17.35777855]
[135.28262329 -32.35684586]
[134.94844055 -47.35312271]
[134.61425781 -62.34939957]
[134.28007507 -77.34568024]
[123.14019012 -88.23332214]
[123.01490784 -103.44644165]
[133.46325684 -113.99951935]
[133.12907410 -128.99578857]
[132.79489136 -143.99206543]
[132.46070862 -158.98834229]
[121.90712738 -171.07145691]
[124.91567230 -186.82987976]
[139.17845154 -194.17512512]
[153.75428772 -187.47253418]
[157.46183777 -171.86376953]
[147.45698547 -159.32254028]
[147.79116821 -144.32626343]
[148.12535095 -129.32998657]
[148.45953369 -114.33370209]
[159.36763000 -104.25653839]
[159.92016602 -89.05294037]
[149.27635193 -77.67986298]
[149.61053467 -62.68358612]
[149.94471741 -47.68730927]
[150.27890015 -32.69103241]
[153.59945679 -26.02009201]
[150.44973755 -17.35777855]
[150.44973755 -2.35777831]
[158.80316162 6.46108627]
[158.87799072 19.00986290]
[150.08534241 28.51857185]
[149.75115967 43.51485062]
[149.41697693 58.51112747]
[149.08277893 73.50740051]
[156.56565857 60.50714874]
[159.32380676 45.76290894]
[168.91140747 34.22696686]
[182.90238953 28.81841660]
[197.75642395 30.90585136]
[209.71481323 39.96106339]
[215.75157166 53.69269180]
[214.33912659 68.62604523]
[205.83489990 80.98233795]
[192.39080811 87.63490295]
[177.40794373 86.90007782]
[163.02716064 91.16539001]
[177.69238281 94.31674957]
[192.35762024 97.46810913]
[207.02284241 100.61946106]
[221.68807983 103.77082062]
[234.82411194 94.98332214]
[250.30992126 98.14010620]
[258.95803833 111.36830902]
[255.63771057 126.81987762]
[242.31881714 135.32766724]
[226.90321350 131.84416199]
[218.53671265 118.43605042]
[203.87149048 115.28469086]
[189.20625305 112.13333893]
[174.54103088 108.98197937]
[159.87579346 105.83061981]
[155.03358459 111.55800629]
[166.48837280 121.24242401]
[177.94299316 130.92703247]
[168.25819397 142.38150024]
[156.80395508 132.69720459]
[145.34916687 123.01279449]
[140.50695801 128.74018860]
[146.05368042 142.67697144]
[151.60040283 156.61375427]
[157.14712524 170.55053711]
[172.21624756 174.25204468]
[182.20599365 186.12573242]
[183.27510071 201.60592651]
[175.01248169 214.74018860]
[160.59527588 220.47810364]
[145.56719971 216.61335754]
[135.70683289 204.63198853]
[134.80572510 189.14109802]
[143.21034241 176.09724426]
[137.66362000 162.16046143]
[132.11689758 148.22367859]
[126.57018280 134.28689575]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 46]
[2 45]
[3 44]
[4 43]
[5 42]
[6 41]
[7 29]
[8 28]
[9 27]
[10 26]
[11 25]
[13 23]
[14 22]
[15 21]
[51 91]
[52 90]
[53 89]
[54 88]
[56 85]
[57 84]
[58 82]
[59 81]
[60 80]
[61 79]
[64 76]
[65 75]
[66 74]
[67 73]
[103 118]
[104 117]
[105 116]
[106 115]
[107 114]
[125 140]
[126 139]
[127 138]
[128 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
