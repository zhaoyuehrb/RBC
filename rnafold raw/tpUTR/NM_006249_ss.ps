%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:46:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAAGGUUCAAUGACAGGAAGUGAAUAAGAAGAUGACAGUGAUUCAAAUGAUUCAAAUGCCAUGACAUUGGAAGAAGGUGGUCAUAGCUCUACCUUUAAUAUACCAAUAAAAUAAACAGCUUACAAUUUCUGA\
) } def
/len { sequence length } bind def

/coor [
[166.96748352 204.31729126]
[174.11485291 191.12960815]
[183.00946045 179.05126953]
[193.48196411 168.31225586]
[205.33300781 159.11700439]
[218.33695984 151.64056396]
[232.24447632 146.02584839]
[217.83419800 141.86125183]
[203.42391968 137.69665527]
[189.01364136 133.53205872]
[174.60336304 129.36744690]
[160.19308472 125.20285034]
[145.78280640 121.03825378]
[131.40771484 124.93776703]
[120.29828644 113.67317200]
[105.88800812 109.50857544]
[91.42990112 105.51317596]
[76.92595673 101.68753815]
[64.01599121 112.54654694]
[47.34489059 113.59526825]
[33.45408630 104.61940765]
[27.67700958 89.29962158]
[13.08736610 85.81504822]
[-1.50227702 82.33046722]
[-16.09192085 78.84588623]
[-30.68156433 75.36130524]
[-40.35562897 87.11604309]
[-54.11793137 93.47890472]
[-69.21632385 93.23647308]
[-82.65698242 86.49039459]
[-91.79806519 74.62657928]
[-94.86890411 60.03084564]
[-109.45854950 56.54626465]
[-119.95943451 67.75460815]
[-134.66229248 72.19551849]
[-149.61212158 68.67440796]
[-160.78749084 58.13843918]
[-165.18229675 43.42173767]
[-161.61433411 28.48301888]
[-151.04339600 17.34072685]
[-136.31298828 12.99207783]
[-121.38552856 16.60683823]
[-110.27642059 27.21265602]
[-105.97396851 41.95661926]
[-91.38432312 45.44120026]
[-82.04911041 33.80852127]
[-68.53337860 27.35604286]
[-53.49483109 27.41191483]
[-39.91648102 34.01861954]
[-30.51494408 45.91391754]
[-27.19698334 60.77165985]
[-12.60733986 64.25624084]
[1.98230338 67.74082184]
[16.57194710 71.22540283]
[31.16159058 74.70998383]
[40.49756622 65.09431458]
[53.47635651 61.34009933]
[66.71502686 64.53787994]
[76.70717621 73.95137024]
[80.75159454 87.18359375]
[95.25553894 91.00923157]
[103.31512451 89.85290527]
[110.05260468 95.09829712]
[124.46288300 99.26289368]
[139.86868286 95.66126251]
[149.94740295 106.62797546]
[164.35768127 110.79257202]
[178.76795959 114.95717621]
[193.17823792 119.12177277]
[207.58851624 123.28637695]
[221.99879456 127.45097351]
[236.40907288 131.61557007]
[240.43678284 130.02845764]
[244.54389954 129.87316895]
[255.98419189 120.17162323]
[267.42446899 110.47006989]
[278.86474609 100.76852417]
[290.30502319 91.06697845]
[301.74530029 81.36542511]
[313.18557739 71.66387939]
[324.62585449 61.96232986]
[323.32855225 46.49957657]
[331.39657593 33.24489594]
[345.72760010 27.29497719]
[360.81103516 30.93768692]
[370.84701538 42.77233124]
[371.97650146 58.24824524]
[363.76516724 71.41462708]
[349.37045288 77.20873260]
[334.32739258 73.40260315]
[322.88711548 83.10415649]
[311.44683838 92.80570221]
[300.00656128 102.50725555]
[288.56628418 112.20880127]
[277.12600708 121.91034698]
[265.68572998 131.61189270]
[254.24545288 141.31344604]
[269.23446655 140.73924255]
[284.15982056 142.23373413]
[298.73739624 145.76847839]
[312.68966675 151.27615356]
[325.75097656 158.65193176]
[337.67269897 167.75537109]
[348.22784424 178.41317749]
[357.21545410 190.42243958]
[364.46447754 203.55453491]
[369.83685303 217.55944824]
[373.23034668 232.17054749]
[374.58029175 247.10968018]
[373.86105347 262.09243774]
[371.08630371 276.83355713]
[366.30883789 291.05239868]
[359.61962891 304.47830200]
[351.14605713 316.85562134]
[341.04937744 327.94876099]
[329.52185059 337.54647827]
[316.78295898 345.46609497]
[303.07519531 351.55682373]
[288.65951538 355.70269775]
[273.81036377 357.82479858]
[258.81048584 357.88272095]
[243.94540405 355.87539673]
[229.49813843 351.84097290]
[215.74372864 345.85632324]
[202.94403076 338.03533936]
[191.34272766 328.52694702]
[181.16067505 317.51211548]
[172.59173584 305.20062256]
[165.79902649 291.82678223]
[160.91189575 277.64526367]
[158.02334595 262.92602539]
[157.18838501 247.94927979]
[158.42292786 233.00016785]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 72]
[8 71]
[9 70]
[10 69]
[11 68]
[12 67]
[13 66]
[15 64]
[16 63]
[17 61]
[18 60]
[22 55]
[23 54]
[24 53]
[25 52]
[26 51]
[32 45]
[33 44]
[74 97]
[75 96]
[76 95]
[77 94]
[78 93]
[79 92]
[80 91]
[81 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
