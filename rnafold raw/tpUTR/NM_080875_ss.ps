%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 13:01:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGCGCCGUCCGCCGCGCCCGAGCUGCCUUCGCGUGCCCCCGCCCUGUGUUUUAUAAAAAGAAAGAUUCUCGGACGUUG\
) } def
/len { sequence length } bind def

/coor [
[83.66590881 125.30664062]
[77.54666138 120.07676697]
[73.03109741 113.41294861]
[70.44172668 105.79113770]
[55.46710205 104.91896820]
[40.49248123 104.04679108]
[25.51785851 103.17462158]
[10.52913857 102.59298706]
[-4.46804047 102.30211639]
[-13.86718464 114.50712585]
[-28.47996521 118.78732300]
[-42.64356613 113.70240784]
[-50.99707794 101.39968872]
[-65.99425507 101.10881805]
[-79.94187164 108.57706451]
[-92.51671600 100.59441376]
[-107.51389313 100.30355072]
[-118.72863007 111.43930817]
[-134.53230286 111.29991913]
[-145.54887390 99.96807861]
[-145.24241638 84.16676331]
[-133.79472351 73.27061462]
[-117.99753571 73.74412537]
[-107.22302246 85.30636597]
[-92.22584534 85.59723663]
[-79.35092926 78.10819244]
[-65.70338440 86.11164093]
[-50.70620728 86.40251160]
[-41.88193512 74.43295288]
[-27.53181648 69.90106201]
[-13.09599209 74.74465179]
[-4.17717075 87.30493927]
[10.82000923 87.59580994]
[17.74745560 84.49629974]
[26.39002991 88.19999695]
[41.36465454 89.07216644]
[56.33927536 89.94434357]
[71.31389618 90.81651306]
[85.95862579 73.35288239]
[108.64294434 71.14643097]
[126.37861633 85.46049500]
[140.90446472 81.71887207]
[155.43031311 77.97725677]
[159.59565735 64.68387604]
[169.75196838 55.30915070]
[183.12289429 52.26779175]
[196.12632751 56.26308060]
[205.33392334 66.12791443]
[219.99392700 62.95235443]
[231.84329224 52.46887589]
[245.92010498 57.33639145]
[260.58010864 54.16083145]
[275.24011230 50.98527527]
[289.90011597 47.80971527]
[297.02734375 33.89078522]
[311.45407104 27.85721588]
[326.36840820 32.55787659]
[334.72830200 45.77325821]
[332.58642578 61.26346588]
[320.95413208 71.71449280]
[305.32385254 72.19168091]
[293.07568359 62.46972275]
[278.41567993 65.64527893]
[263.75567627 68.82083893]
[249.09565735 71.99639893]
[238.29487610 82.25273895]
[223.16949463 77.61235809]
[208.50947571 80.78791809]
[202.47218323 95.92327118]
[188.51321411 104.64474487]
[171.93505859 103.40998077]
[159.17193604 92.50310516]
[144.64608765 96.24472809]
[130.12023926 99.98634338]
[129.04821777 107.96428680]
[125.90149689 115.37339783]
[120.90481567 121.68450165]
[114.41505432 126.44683075]
[106.89573669 129.32026672]
[98.88389587 130.09954834]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 38]
[5 37]
[6 36]
[7 35]
[8 33]
[9 32]
[13 28]
[14 27]
[16 25]
[17 24]
[41 74]
[42 73]
[43 72]
[48 68]
[49 67]
[51 65]
[52 64]
[53 63]
[54 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
