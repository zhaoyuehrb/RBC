%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 15:08:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCGCCCAAAAGCGGCAGCCAAUCGGAGCGCGAGGACGUGGUCUGGAGGUACCGCCGGAGAUCUGGGACCACUCAGGGCAUCAGGGGGCGUGGUCUGGUCCCCAUUGCGGGCCCGGGAGGGGAAUGGUUUCUAUGGCCAAAGUUUGGUUUUCUCAACACUGUCUAAAUUUGGAUUAAAACUUUGAACUUUUA\
) } def
/len { sequence length } bind def

/coor [
[93.34120941 125.39625549]
[86.38327026 128.19573975]
[82.28523254 142.62509155]
[78.18719482 157.05444336]
[74.08915710 171.48379517]
[82.00413513 185.16328430]
[77.84734344 200.41111755]
[64.08493042 208.18103027]
[48.88188934 203.86326599]
[41.25791931 190.01947021]
[45.73618317 174.86293030]
[59.65980911 167.38575745]
[63.75784683 152.95640564]
[67.85588074 138.52705383]
[71.95391846 124.09770966]
[66.17818451 119.31326294]
[54.62671661 109.74438477]
[48.85097885 104.95993805]
[35.43635941 111.67171478]
[22.02173805 118.38349152]
[17.20766640 130.36027527]
[5.88410664 135.67098999]
[-5.63891172 131.95928955]
[-19.16100311 138.45182800]
[-32.68309402 144.94436646]
[-46.20518494 151.43690491]
[-59.72727585 157.92944336]
[-68.81877136 170.87762451]
[-83.64104462 169.41148376]
[-97.16313171 175.90402222]
[-110.68522644 182.39656067]
[-124.20731354 188.88909912]
[-133.00927734 202.72590637]
[-149.37944031 201.75135803]
[-156.47758484 186.96797180]
[-147.00173950 173.58363342]
[-130.69985962 175.36700439]
[-117.17776489 168.87446594]
[-103.65567017 162.38192749]
[-90.13358307 155.88938904]
[-82.00927734 143.40559387]
[-66.21981049 144.40736389]
[-52.69772339 137.91482544]
[-39.17563248 131.42228699]
[-25.65354156 124.92974091]
[-12.13144970 118.43720245]
[-3.03345394 103.43830109]
[15.30996132 104.96887207]
[28.72458076 98.25709534]
[42.13920212 91.54531860]
[59.13623428 78.97417450]
[76.83266449 75.89064789]
[91.17856598 81.03433990]
[99.11782074 91.64910126]
[98.62957764 76.65704346]
[98.14133453 61.66499329]
[97.40912628 46.68287659]
[96.43315887 31.71466064]
[95.45718384 16.74644470]
[94.48121643 1.77822900]
[93.50524902 -13.18998623]
[92.52927399 -28.15820312]
[91.55330658 -43.12641907]
[78.69857025 -48.66260529]
[69.52947235 -59.14939117]
[65.79428864 -72.50055695]
[68.16777039 -86.09249115]
[76.13001251 -97.27973938]
[88.07905579 -103.90987396]
[87.34685516 -118.89199066]
[83.79772186 -127.32557678]
[86.72667694 -134.12353516]
[86.23843384 -149.11558533]
[85.75018311 -164.10763550]
[75.66699219 -179.50740051]
[84.52147675 -194.65133667]
[83.78927612 -209.63345337]
[83.05706787 -224.61557007]
[82.32485962 -239.59768677]
[69.15573120 -251.10159302]
[68.38852692 -268.23297119]
[80.01009369 -280.37991333]
[79.03412628 -295.34814453]
[77.81464386 -310.29849243]
[76.35198212 -325.22698975]
[74.88932037 -340.15551758]
[73.42665863 -355.08404541]
[71.96399689 -370.01254272]
[70.50132751 -384.94107056]
[57.05056000 -392.67776489]
[50.74691772 -406.85675049]
[54.01428604 -422.02593994]
[65.59629059 -432.35241699]
[81.03942108 -433.86550903]
[94.40547180 -425.98336792]
[100.55492401 -411.73681641]
[97.12319183 -396.60397339]
[85.42984772 -386.40371704]
[86.89250946 -371.47521973]
[88.35517120 -356.54669189]
[89.81784058 -341.61819458]
[91.28050232 -326.68966675]
[92.74316406 -311.76113892]
[95.81102753 -308.08294678]
[96.59089661 -302.43438721]
[94.00234222 -296.32409668]
[94.97830963 -281.35589600]
[105.76316833 -274.28881836]
[110.57589722 -262.11703491]
[107.44885254 -249.20692444]
[97.30698395 -240.32989502]
[98.03918457 -225.34777832]
[98.77139282 -210.36566162]
[99.50359344 -195.38352966]
[108.25586700 -187.01966858]
[108.98001099 -174.53358459]
[100.74224091 -164.59588623]
[101.23048401 -149.60383606]
[101.71872711 -134.61177063]
[102.32897186 -119.62419891]
[103.06117249 -104.64207458]
[117.60407257 -97.61417389]
[126.67419434 -84.13603210]
[127.71997070 -67.82983398]
[120.36183929 -53.13565063]
[106.52152252 -44.10239029]
[107.49748993 -29.13417244]
[108.47345734 -14.16595745]
[109.44943237 0.80225801]
[110.42539978 15.77047348]
[111.40137482 30.73868942]
[112.37734222 45.70690536]
[115.32386017 49.48301315]
[115.91945648 55.15396118]
[113.13338470 61.17675018]
[113.62162781 76.16880035]
[114.10987091 91.16085052]
[121.78539276 104.04830933]
[134.73487854 111.61868286]
[147.68438721 119.18905640]
[160.63388062 126.75942993]
[173.58337402 134.32980347]
[186.53286743 141.90017700]
[199.48236084 149.47055054]
[212.43185425 157.04092407]
[205.43121338 143.77476501]
[203.53523254 128.89508057]
[206.98544312 114.29726410]
[215.34234619 101.84085083]
[227.54139709 93.11256409]
[242.02867126 89.22424316]
[256.95870972 90.67119598]
[270.42971802 97.26909637]
[280.72567749 108.17749786]
[286.53506470 122.00684357]
[287.11788940 136.99551392]
[282.39990234 151.23420715]
[272.98208618 162.90916443]
[260.06408691 170.53318787]
[245.29148865 173.13511658]
[230.54824829 170.38432312]
[241.61885071 180.50567627]
[252.68946838 190.62701416]
[263.76007080 200.74836731]
[274.83068848 210.86970520]
[290.95291138 213.87072754]
[296.15917969 229.42149353]
[285.09375000 241.52473450]
[269.13977051 237.72966003]
[264.70932007 221.94032288]
[253.63873291 211.81896973]
[242.56811523 201.69763184]
[231.49751282 191.57627869]
[220.42689514 181.45494080]
[214.07397461 181.22988892]
[208.14335632 177.23263550]
[204.86148071 169.99041748]
[191.91198730 162.42004395]
[178.96249390 154.84967041]
[166.01300049 147.27929688]
[153.06350708 139.70892334]
[140.11401367 132.13854980]
[127.16451263 124.56817627]
[114.21501923 116.99780273]
[107.25708008 119.79728699]
[114.99189758 132.64923096]
[122.72672272 145.50117493]
[132.02285767 157.27326965]
[128.16763306 171.76937866]
[114.25171661 177.36825562]
[101.43124390 169.58135986]
[99.98406982 154.65155029]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[18 50]
[19 49]
[20 48]
[23 46]
[24 45]
[25 44]
[26 43]
[27 42]
[29 40]
[30 39]
[31 38]
[32 37]
[54 137]
[55 136]
[56 135]
[57 132]
[58 131]
[59 130]
[60 129]
[61 128]
[62 127]
[63 126]
[69 121]
[70 120]
[72 119]
[73 118]
[74 117]
[76 114]
[77 113]
[78 112]
[79 111]
[82 107]
[83 106]
[84 103]
[85 102]
[86 101]
[87 100]
[88 99]
[89 98]
[138 184]
[139 183]
[140 182]
[141 181]
[142 180]
[143 179]
[144 178]
[145 177]
[161 174]
[162 173]
[163 172]
[164 171]
[165 170]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
