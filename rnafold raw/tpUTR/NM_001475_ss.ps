%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 03:33:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAAGGCACGUUGAAAUGAUGCAGGCUGCUCCUAUGUUGGAAAUUUGUUCAUUAAAAUUCUCCCAAUAAAGCUUUACAGCCUUCUGCAAAGAA\
) } def
/len { sequence length } bind def

/coor [
[91.03591919 141.52325439]
[79.43888855 151.03686523]
[65.02772522 146.87532043]
[60.28757858 132.64398193]
[69.32407379 120.67268372]
[76.41100311 107.45241547]
[69.20535278 105.37189484]
[56.64785385 113.57611847]
[44.09035492 121.78034210]
[31.67022324 130.19107056]
[19.39085197 138.80599976]
[7.11147881 147.42092896]
[0.68892103 162.51008606]
[-15.62044907 164.22370911]
[-25.03894997 150.79895020]
[-17.87763405 136.04606628]
[-1.50345087 135.14155579]
[10.77592087 126.52662659]
[23.05529404 117.91168976]
[26.79649544 111.36372375]
[35.88613510 109.22283936]
[48.44363022 101.01862335]
[61.00112915 92.81439972]
[97.58070374 86.64682007]
[103.37818909 72.81246948]
[109.17567444 58.97812271]
[114.97316742 45.14377975]
[120.77065277 31.30943108]
[126.56813812 17.47508430]
[116.71363831 2.45495605]
[117.68592072 -15.32810974]
[128.92237854 -28.94573784]
[145.89733887 -33.20152283]
[150.76783752 -47.38878250]
[147.93067932 -62.95352173]
[159.38128662 -72.47889709]
[164.25177002 -86.66615295]
[169.12226868 -100.85341644]
[173.99275208 -115.04067230]
[178.86325073 -129.22793579]
[183.73374939 -143.41519165]
[178.81962585 -162.82756042]
[193.53643799 -175.18547058]
[197.45863342 -189.66360474]
[201.38082886 -204.14173889]
[205.30302429 -218.61987305]
[209.22521973 -233.09800720]
[199.38876343 -245.09898376]
[198.51850891 -260.59164429]
[206.94909668 -273.61871338]
[221.43879700 -279.17105103]
[236.41601562 -275.11364746]
[246.12170410 -263.00665283]
[246.82383728 -247.50547791]
[238.25244141 -234.57061768]
[223.70335388 -229.17579651]
[219.78115845 -214.69766235]
[215.85896301 -200.21952820]
[211.93676758 -185.74139404]
[208.01455688 -171.26327515]
[213.98654175 -162.67501831]
[214.14007568 -151.99353027]
[208.17469788 -142.86520386]
[197.92100525 -138.54469299]
[193.05050659 -124.35743713]
[188.18002319 -110.17018127]
[183.30952454 -95.98292542]
[178.43904114 -81.79566193]
[173.56854248 -67.60840607]
[176.75407410 -53.05843353]
[164.95509338 -42.51829147]
[160.08460999 -28.33103180]
[168.58459473 -19.35524559]
[172.40898132 -7.52320433]
[170.75123596 4.87414742]
[163.87272644 15.40782738]
[153.06387329 21.98671913]
[140.40248108 23.27257347]
[134.60499573 37.10691833]
[128.80751038 50.94126511]
[123.01002502 64.77561188]
[117.21253967 78.60995483]
[111.41504669 92.44430542]
[111.66305542 107.44225311]
[117.91478729 121.07735443]
[124.16651154 134.71244812]
[137.84506226 143.75840759]
[136.58036804 160.10871887]
[121.67343903 166.94357300]
[108.45924377 157.23187256]
[110.53141785 140.96417236]
[104.27968597 127.32907867]
[98.02796173 113.69398499]
[90.82231140 111.61345673]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 23]
[8 22]
[9 21]
[10 19]
[11 18]
[12 17]
[24 83]
[25 82]
[26 81]
[27 80]
[28 79]
[29 78]
[33 72]
[34 71]
[36 69]
[37 68]
[38 67]
[39 66]
[40 65]
[41 64]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
[84 93]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
