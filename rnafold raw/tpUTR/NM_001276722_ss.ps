%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 22:46:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCACAGAGGCAUUUUGUGUGUGUGUGCUUAUUUUAAUUUUGUUCUUAUUCUAGCAACAUUAGAAUAAAAGAUAAACCUACUAUAAUUCCCUUUGUGGAAAUUUA\
) } def
/len { sequence length } bind def

/coor [
[141.33491516 385.56619263]
[138.68156433 370.80273438]
[136.02821350 356.03927612]
[133.37484741 341.27581787]
[130.72149658 326.51235962]
[128.06814575 311.74890137]
[125.41478729 296.98544312]
[122.76143646 282.22198486]
[120.10808563 267.45852661]
[117.45472717 252.69506836]
[104.87177277 247.97392273]
[96.22705841 237.54200745]
[93.88793182 224.08677673]
[98.57888031 211.14486694]
[109.16204834 202.17262268]
[106.94734955 187.33700562]
[104.73265076 172.50140381]
[102.51795197 157.66580200]
[100.08365631 142.86465454]
[97.43030548 128.10119629]
[94.77695465 113.33773804]
[85.90193176 102.53376770]
[90.45958710 89.31562042]
[87.80623627 74.55216217]
[72.53675079 67.45782471]
[64.53129578 52.83370209]
[66.73905945 36.47527695]
[78.10516357 24.73395729]
[75.01548004 10.05560970]
[71.49218750 -4.52473450]
[67.53838348 -18.99426842]
[63.58457565 -33.46380234]
[59.63076782 -47.93333435]
[55.67695999 -62.40287018]
[51.72315216 -76.87240601]
[47.76934433 -91.34193420]
[43.81553650 -105.81147003]
[39.86173248 -120.28100586]
[28.76050758 -131.55369568]
[32.86943817 -145.87031555]
[28.91563034 -160.33985901]
[24.96182251 -174.80938721]
[21.00801468 -189.27891541]
[17.05420685 -203.74845886]
[2.49338627 -209.11149597]
[-6.10625029 -222.02760315]
[-5.43796682 -237.53027344]
[4.24126816 -249.65843201]
[19.20959091 -253.74853516]
[33.71137619 -248.22785950]
[42.17039108 -235.21920776]
[41.33397293 -219.72470093]
[31.52374077 -207.70227051]
[35.47754669 -193.23272705]
[39.43135452 -178.76319885]
[43.38516235 -164.29365540]
[47.33897018 -149.82412720]
[58.15739059 -139.58639526]
[54.33126450 -124.23480988]
[58.28507233 -109.76528168]
[62.23888016 -95.29574585]
[66.19268799 -80.82621002]
[70.14649200 -66.35667419]
[74.10030365 -51.88714218]
[78.05410767 -37.41761017]
[82.00791931 -22.94807625]
[85.96172333 -8.47854137]
[89.73138428 -5.31097937]
[91.45109558 0.32010588]
[89.69383240 6.96592999]
[92.78350830 21.64427757]
[105.50083923 25.99048424]
[114.45088959 36.16163635]
[117.18771362 49.54165268]
[112.88233948 62.61688614]
[102.56969452 71.89880371]
[105.22304535 86.66226196]
[114.09806824 97.46623230]
[109.54041290 110.68437958]
[112.19376373 125.44783783]
[114.84711456 140.21130371]
[119.51354980 148.25555420]
[117.35355377 155.45111084]
[119.56825256 170.28671265]
[121.78295135 185.12231445]
[123.99765015 199.95791626]
[139.05020142 207.50161743]
[146.61877441 222.35655212]
[143.92723083 238.64236450]
[132.21818542 250.04171753]
[134.87153625 264.80517578]
[137.52490234 279.56863403]
[140.17825317 294.33209229]
[142.83160400 309.09555054]
[145.48495483 323.85900879]
[148.13830566 338.62246704]
[150.79167175 353.38592529]
[153.44502258 368.14938354]
[156.09837341 382.91284180]
[169.75563049 390.52947998]
[175.27348328 405.16122437]
[170.04653931 419.89938354]
[156.54284668 427.78506470]
[141.13839722 425.09487915]
[131.10671997 413.09906006]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 99]
[2 98]
[3 97]
[4 96]
[5 95]
[6 94]
[7 93]
[8 92]
[9 91]
[10 90]
[15 86]
[16 85]
[17 84]
[18 83]
[19 81]
[20 80]
[21 79]
[23 77]
[24 76]
[28 71]
[29 70]
[30 67]
[31 66]
[32 65]
[33 64]
[34 63]
[35 62]
[36 61]
[37 60]
[38 59]
[40 57]
[41 56]
[42 55]
[43 54]
[44 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
