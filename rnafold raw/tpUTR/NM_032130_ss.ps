%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 20:15:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUCCUGCCACAAAAGCCUGAACUUCCUGAAGGCCCAGUAAGGUGCGAGGCUGAUGGUCAAUGUGGAUUCUCCCCAAUAAAUCUCUCUCCAGGCUUUAA\
) } def
/len { sequence length } bind def

/coor [
[91.53580475 262.67877197]
[84.05834198 275.86450195]
[72.52002716 285.69522095]
[58.31417465 290.98382568]
[43.15620041 291.09170532]
[28.87650871 286.00582886]
[17.19944000 276.34033203]
[9.53505802 263.26239014]
[6.80887413 248.35118103]
[9.35008812 233.40734863]
[16.85183716 220.23542786]
[28.40824509 210.42597961]
[42.62382507 205.16355896]
[57.78197098 205.08361816]
[62.81472015 190.95309448]
[67.84747314 176.82258606]
[72.88021851 162.69207764]
[77.91297150 148.56155396]
[82.94572449 134.43104553]
[87.97846985 120.30052948]
[93.01122284 106.17001343]
[86.80619049 110.78667450]
[80.24981689 114.93491364]
[73.36896515 118.59507751]
[58.67449951 115.58296967]
[43.98003769 112.57086945]
[28.60011864 118.26210022]
[16.15593910 107.58153534]
[19.44900322 91.51642609]
[35.09169006 86.59317780]
[46.99214554 97.87640381]
[61.68660736 100.88851166]
[76.38106537 103.90061951]
[84.54412842 91.31632233]
[75.80301666 79.12645721]
[66.87338257 67.07400513]
[57.75739288 55.16187668]
[42.10784531 51.63040924]
[35.24147034 37.13101578]
[42.42556381 22.78638649]
[58.14910126 19.60049629]
[70.35033417 30.01728630]
[69.66951752 46.04588699]
[78.78550720 57.95801163]
[85.46799469 61.41775513]
[87.99288177 70.38533783]
[96.73400116 82.57521057]
[111.21277618 86.49504089]
[124.90962219 80.37978363]
[138.60647583 74.26452637]
[152.30332947 68.14927673]
[158.02770996 53.66241455]
[172.00537109 47.65579224]
[185.78109741 53.20239639]
[199.47795105 47.08714294]
[213.17480469 40.97188568]
[213.30781555 27.86356926]
[218.42829895 15.84723568]
[227.72357178 6.73791742]
[239.75341797 1.89650202]
[252.67312622 2.02649331]
[264.51635742 7.07201719]
[273.49441528 16.23181725]
[287.54495239 10.97992134]
[297.76257324 -1.09943223]
[312.39328003 1.69196129]
[326.44381714 -3.55993533]
[340.49435425 -8.81183243]
[353.21392822 -20.02115250]
[367.50631714 -10.90171623]
[362.69979858 5.35662651]
[345.74624634 5.23870468]
[331.69570923 10.49060154]
[317.64517212 15.74249840]
[308.43255615 27.44620132]
[292.79684448 25.03045845]
[278.74630737 30.28235435]
[276.60595703 47.21713257]
[266.21453857 60.86965561]
[250.29963684 67.51111603]
[233.11193848 65.27231598]
[219.29005432 54.66873550]
[205.59320068 60.78398895]
[191.89636230 66.89924622]
[186.82946777 80.85854340]
[173.02601624 87.25540161]
[158.41857910 81.84612274]
[144.72172546 87.96138000]
[131.02487183 94.07662964]
[117.32803345 100.19188690]
[107.14173889 111.20276642]
[102.10898590 125.33327484]
[97.07623291 139.46379089]
[92.04348755 153.59429932]
[87.01073456 167.72482300]
[81.97798157 181.85533142]
[76.94523621 195.98585510]
[71.91248322 210.11636353]
[83.60734558 219.76033020]
[91.29581451 232.82414246]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 98]
[15 97]
[16 96]
[17 95]
[18 94]
[19 93]
[20 92]
[21 91]
[24 33]
[25 32]
[26 31]
[34 47]
[35 46]
[36 44]
[37 43]
[48 90]
[49 89]
[50 88]
[51 87]
[54 84]
[55 83]
[56 82]
[63 77]
[64 76]
[66 74]
[67 73]
[68 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
