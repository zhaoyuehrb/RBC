%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 00:47:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUCUUGAGUCCACAGUCUGGCAAGCUGAGGUUAAAAAUCAUAUGUUGAAUGCAGCAGUGUCCACUUAUGACUAACUUCUUAGAACAGCACAAUAUAAUAGUGGAAUUGGGCCUUUCAGAAGACCUCAACUGAUGAUUUU\
) } def
/len { sequence length } bind def

/coor [
[-36.19698715 278.39666748]
[-36.01815414 286.64501953]
[-37.68248749 294.71206665]
[-41.10015869 302.19189453]
[-46.09325790 308.70944214]
[-52.40505981 313.93933105]
[-59.71319199 317.62222290]
[-67.64612579 319.57754517]
[-75.80204773 319.71234131]
[-83.76921082 318.02581787]
[-91.14672852 314.60885620]
[-97.56473541 309.63934326]
[-109.96721649 318.07608032]
[-117.02579498 332.23541260]
[-131.90095520 332.99642944]
[-144.30342102 341.43316650]
[-156.70590210 349.86990356]
[-162.09544373 357.34497070]
[-169.47737122 358.35253906]
[-182.06346130 366.51281738]
[-189.03329468 381.35714722]
[-205.39440918 382.47341919]
[-214.31588745 368.71334839]
[-206.62007141 354.23211670]
[-190.22377014 353.92675781]
[-177.63768005 345.76644897]
[-165.14263916 337.46740723]
[-152.74015808 329.03067017]
[-140.33769226 320.59393311]
[-134.16621399 307.03805542]
[-118.40395355 305.67358398]
[-106.00148010 297.23684692]
[-107.80350494 274.80679321]
[-95.94125366 255.54418945]
[-74.87856293 246.96763611]
[-52.70204544 252.52275085]
[-42.21342087 241.79946899]
[-31.72479439 231.07618713]
[-21.23616982 220.35292053]
[-10.74754429 209.62963867]
[-0.25891837 198.90635681]
[10.22970676 188.18307495]
[20.71833229 177.45979309]
[20.29728699 162.61532593]
[30.78148651 151.59097290]
[46.35458755 151.25000000]
[56.84321594 140.52671814]
[67.33184052 129.80343628]
[77.82046509 119.08015442]
[88.30908966 108.35688019]
[85.48020172 104.00305176]
[84.30127716 98.70070648]
[85.08229828 93.08308411]
[87.88861847 87.88000488]
[92.51334381 83.82338715]
[98.48589325 81.54606628]
[105.11796570 81.48760223]
[112.99784088 68.72407532]
[120.87772369 55.96055603]
[128.75759888 43.19703293]
[130.62750244 34.17331314]
[136.95562744 30.24102783]
[145.11593628 17.65494728]
[153.27624512 5.06886768]
[161.43653870 -7.51721191]
[169.59684753 -20.10329247]
[177.75715637 -32.68937302]
[166.79795837 -42.99159241]
[157.85458374 -55.08521652]
[151.21452332 -68.58148956]
[147.09121704 -83.04655457]
[145.61723328 -98.01542664]
[146.83993530 -113.00691986]
[150.72004700 -127.53910828]
[157.13279724 -141.14485168]
[165.87207031 -153.38677979]
[176.65693665 -163.87136841]
[189.14068604 -172.26158142]
[202.92204285 -178.28770447]
[217.55798340 -181.75601196]
[232.57801819 -182.55503845]
[247.49931335 -180.65907288]
[261.84222412 -176.12907410]
[275.14566040 -169.11065674]
[286.98199463 -159.82945251]
[296.97073364 -148.58378601]
[304.79077148 -135.73518372]
[310.19076538 -121.69666290]
[312.99707031 -106.91950226]
[313.11947632 -91.87873077]
[310.55410767 -77.05784607]
[305.38339233 -62.93328094]
[297.77352905 -49.95907593]
[287.96920776 -38.55230331]
[276.28552246 -29.07963753]
[263.09808350 -21.84559250]
[248.83082581 -17.08270836]
[233.94236755 -14.94409275]
[218.91131592 -15.49849415]
[204.22085571 -18.72809219]
[190.34323120 -24.52906609]
[182.18293762 -11.94298553]
[174.02262878 0.64309400]
[165.86231995 13.22917366]
[157.70201111 25.81525421]
[149.54170227 38.40133286]
[141.52111816 51.07691193]
[133.64125061 63.84043503]
[125.76136780 76.60395813]
[117.88148499 89.36747742]
[121.49600220 103.92547607]
[134.43072510 111.52107239]
[150.24876404 111.83712006]
[157.30572510 124.95384979]
[170.24044800 132.54943848]
[183.17515564 140.14503479]
[199.56892395 139.72483826]
[207.89776611 153.85150146]
[199.59367371 167.99272156]
[183.19920349 167.60122681]
[175.57955933 153.07975769]
[162.64485168 145.48416138]
[149.71012878 137.88856506]
[134.81726074 138.11581421]
[126.83512878 124.45578766]
[113.90040588 116.86019135]
[99.03237152 118.84550476]
[88.54374695 129.56878662]
[78.05512238 140.29206848]
[67.56649780 151.01533508]
[57.07786942 161.73861694]
[57.08147812 177.31546021]
[46.29176331 188.04096985]
[31.44161224 187.94842529]
[20.95298767 198.67170715]
[10.46436214 209.39497375]
[-0.02426384 220.11825562]
[-10.51288891 230.84153748]
[-21.00151443 241.56481934]
[-31.49014091 252.28810120]
[-41.97876740 263.01138306]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 32]
[13 31]
[15 29]
[16 28]
[17 27]
[19 26]
[20 25]
[36 141]
[37 140]
[38 139]
[39 138]
[40 137]
[41 136]
[42 135]
[43 134]
[46 131]
[47 130]
[48 129]
[49 128]
[50 127]
[57 110]
[58 109]
[59 108]
[60 107]
[62 106]
[63 105]
[64 104]
[65 103]
[66 102]
[67 101]
[111 126]
[112 125]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
