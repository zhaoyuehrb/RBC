%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 09:15:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCUCCCCUGCCCCUGCCCCUGCCCCUGCCCGAGAGCUCUUAGUUUUUAAAAAGGCCUUUGGGAUUUGCCGGAUCCUUGCA\
) } def
/len { sequence length } bind def

/coor [
[84.69332123 277.98107910]
[72.13288116 269.54956055]
[62.79426956 257.64807129]
[57.59238815 243.44259644]
[57.03686523 228.32484436]
[61.18212509 213.77589417]
[69.62205505 201.22109985]
[81.52980804 191.89047241]
[95.73876953 186.69810486]
[95.17789459 171.70860291]
[86.97012329 159.27954102]
[94.18600464 145.19970703]
[93.62513733 130.21018982]
[81.16721344 124.46672821]
[72.42701721 113.89335632]
[69.12992859 100.57733917]
[71.92681122 87.14734650]
[80.26554108 76.25456238]
[92.50000000 70.04929352]
[92.50000000 55.04929352]
[92.50000000 40.04929352]
[78.81950378 33.37057114]
[69.43365479 21.46289253]
[66.16201019 6.72123241]
[69.60120392 -7.91888285]
[79.01693726 -19.56591606]
[92.50000000 -25.94341469]
[92.50000000 -40.94341278]
[92.50000000 -55.94341278]
[79.30548859 -63.67983246]
[71.80444336 -76.89463806]
[71.92427826 -91.98941040]
[79.53267670 -104.91102600]
[92.50000000 -112.24002075]
[92.50000000 -127.24002075]
[92.50000000 -142.24002075]
[92.50000000 -157.24002075]
[92.50000000 -172.24002075]
[92.50000000 -187.24002075]
[92.50000000 -202.24002075]
[86.45365906 -218.07914734]
[100.00000000 -228.27391052]
[113.54634094 -218.07914734]
[107.50000000 -202.24002075]
[107.50000000 -187.24002075]
[107.50000000 -172.24002075]
[107.50000000 -157.24002075]
[107.50000000 -142.24002075]
[107.50000000 -127.24002075]
[107.50000000 -112.24002075]
[120.46732330 -104.91102600]
[128.07571411 -91.98941040]
[128.19555664 -76.89463806]
[120.69451141 -63.67983246]
[107.50000000 -55.94341278]
[107.50000000 -40.94341278]
[107.50000000 -25.94341469]
[120.98306274 -19.56591606]
[130.39880371 -7.91888285]
[133.83798218 6.72123241]
[130.56634521 21.46289253]
[121.18049622 33.37057114]
[107.50000000 40.04929352]
[107.50000000 55.04929352]
[107.50000000 70.04929352]
[121.45041656 77.79247284]
[129.67265320 91.46602631]
[129.97099304 107.41851044]
[122.26578522 121.38993835]
[108.61464691 129.64932251]
[109.17551422 144.63883972]
[117.42340851 158.14004517]
[110.16741180 171.14773560]
[110.72827911 186.13723755]
[125.28553009 190.25325012]
[137.85725403 198.66792297]
[147.21182251 210.55688477]
[152.43272400 224.75538635]
[153.00851440 239.87239075]
[148.88275146 254.42687988]
[140.45965576 266.99298096]
[128.56442261 276.33953857]
[114.36243439 281.55096436]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 74]
[10 73]
[12 71]
[13 70]
[19 65]
[20 64]
[21 63]
[27 57]
[28 56]
[29 55]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
[39 45]
[40 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
