%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 12:32:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGAGACUGGAGCAUCUACACCUGAGGACAAGACGCUGCCCACCCGCGAGGGCUGAAAACCCCGCCGCGGGGAGGACCGUCCAUCCCCUUCCCCCGGCCCCUCUCAAUAAACGUGGUUAAGAGCA\
) } def
/len { sequence length } bind def

/coor [
[187.26753235 243.61016846]
[177.97747803 231.83328247]
[168.68743896 220.05639648]
[159.39738464 208.27952576]
[152.71284485 204.94062805]
[150.02751160 196.09449768]
[139.69299316 195.53639221]
[131.22984314 189.20307922]
[127.63200378 179.02906799]
[130.34071350 168.35501099]
[121.94940186 155.92175293]
[113.55809021 143.48849487]
[105.16677856 131.05523682]
[103.94554901 146.00543213]
[96.04560089 158.75654602]
[83.20286560 166.50665283]
[68.23938751 167.55274963]
[54.44322586 161.66496277]
[44.84593964 150.13708496]
[41.55642700 135.50221252]
[45.29751587 120.97623444]
[55.24715042 109.75104523]
[69.21900177 104.29327393]
[84.14291382 105.80219269]
[96.74158478 113.94841003]
[86.41033936 104.52731323]
[89.02735901 90.79258728]
[84.28636169 76.56153107]
[79.54536438 62.33047104]
[66.82961273 57.69789505]
[59.24304962 46.72754669]
[59.39243317 33.58556366]
[66.99715424 23.10662651]
[62.60960770 8.76265812]
[58.22206116 -5.58131027]
[53.83451462 -19.92527962]
[42.39901352 -30.85870934]
[46.07515335 -45.29253387]
[40.51513290 -52.67840958]
[41.76121521 -60.04580307]
[37.72980118 -74.49390411]
[24.24394417 -82.28937531]
[20.36133385 -96.99923706]
[27.87623405 -109.80789948]
[23.84482002 -124.25600433]
[19.81340408 -138.70411682]
[15.78199005 -153.15220642]
[11.75057507 -167.60031128]
[7.71916056 -182.04841614]
[-5.72548723 -194.55784607]
[-0.82865804 -211.36186218]
[-5.21620512 -225.70582581]
[-9.60375214 -240.04980469]
[-24.31940079 -244.97212219]
[-33.30391312 -257.62353516]
[-33.10256195 -273.13931274]
[-23.79276848 -285.55328369]
[-8.95433903 -290.09210205]
[5.70704699 -285.01040649]
[14.55378723 -272.26229858]
[14.18413067 -256.74963379]
[4.74021673 -244.43734741]
[9.12776375 -230.09336853]
[13.51531029 -215.74940491]
[24.09519386 -209.74725342]
[27.82702827 -197.74803162]
[22.16726494 -186.07983398]
[26.19867897 -171.63172913]
[30.23009300 -157.18362427]
[34.26150894 -142.73551941]
[38.29292297 -128.28741455]
[42.32433701 -113.83931732]
[55.38521957 -106.77185822]
[59.67946625 -92.17685699]
[52.17790604 -78.52532196]
[56.20932007 -64.07721710]
[60.41912079 -49.68008041]
[71.54079437 -39.77262497]
[68.17848206 -24.31282616]
[72.56603241 -9.96885681]
[76.95357513 4.37511110]
[81.34112549 18.71907997]
[96.48500824 25.92091370]
[101.89028931 42.14988327]
[93.77642822 57.58947754]
[98.51741791 71.82053375]
[103.25841522 86.05158997]
[113.58966064 95.47268677]
[110.97264099 109.20741272]
[117.60003662 122.66392517]
[125.99134827 135.09718323]
[134.38265991 147.53044128]
[142.77397156 159.96369934]
[161.25183105 167.84147644]
[162.03057861 187.09858704]
[171.17427063 198.98947144]
[180.46430969 210.76635742]
[189.75436401 222.54322815]
[199.04441833 234.32011414]
[216.40342712 236.01733398]
[226.99844360 249.44648743]
[224.70138550 266.05755615]
[234.27989197 277.60104370]
[243.85839844 289.14453125]
[253.43690491 300.68801880]
[268.20361328 306.36740112]
[270.37646484 321.10266113]
[279.95495605 332.64614868]
[289.53344727 344.18963623]
[305.17074585 344.09466553]
[317.17761230 354.11312866]
[319.88476562 369.51458740]
[312.01397705 383.02697754]
[297.28158569 388.27014160]
[282.64376831 382.76843262]
[275.01208496 369.11956787]
[277.98995972 353.76815796]
[268.41146851 342.22463989]
[258.83294678 330.68115234]
[244.75137329 325.82745361]
[241.89340210 310.26654053]
[232.31491089 298.72302246]
[222.73640442 287.17953491]
[213.15789795 275.63604736]
[200.22428894 276.23736572]
[189.15898132 269.14559937]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 99]
[2 98]
[3 97]
[4 96]
[6 95]
[10 93]
[11 92]
[12 91]
[13 90]
[25 89]
[27 87]
[28 86]
[29 85]
[33 82]
[34 81]
[35 80]
[36 79]
[38 77]
[40 76]
[41 75]
[44 72]
[45 71]
[46 70]
[47 69]
[48 68]
[49 67]
[51 64]
[52 63]
[53 62]
[102 124]
[103 123]
[104 122]
[105 121]
[107 119]
[108 118]
[109 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
