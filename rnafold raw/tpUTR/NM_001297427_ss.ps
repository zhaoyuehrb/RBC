%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 21:31:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCCACAGAGCCCACUCCCAGCCGUCCUCACCAGAGAUGGACCAGGGAGGACAGGAUGCUGGGCAGGGGAAGCCAAGUCACGGGCAGGCCGCAGUGGUUCUUGCGUGGCCUGGUUUUAUUUUCAUUGUGAAAUAUCAUGCUCUUAUUUCAGUCCUCAA\
) } def
/len { sequence length } bind def

/coor [
[87.98437500 208.18586731]
[75.42444611 216.93267822]
[60.23689270 218.82920837]
[45.91170502 213.43962097]
[35.74070740 202.00242615]
[32.06111908 187.14581299]
[35.71848679 172.28369141]
[45.87236786 160.83131409]
[60.18947983 155.42030334]
[61.95254135 140.52427673]
[63.71560287 125.62825775]
[53.97388077 114.22216797]
[38.98544693 113.63327026]
[23.99700928 113.04437256]
[15.24688339 115.84545898]
[8.72091293 112.29390717]
[-6.25307131 111.41084290]
[-21.23500252 110.67482758]
[-36.22343826 110.08592987]
[-51.21187592 109.49703217]
[-66.20030975 108.90813446]
[-81.18874359 108.31923676]
[-96.17717743 107.73033905]
[-115.10381317 119.67845154]
[-133.08972168 107.67150116]
[-148.07815552 108.26039886]
[-163.06658936 108.84929657]
[-178.05502319 109.43819427]
[-193.04345703 110.02709198]
[-208.03189087 110.61598969]
[-216.53527832 114.09496307]
[-223.31977844 111.06638336]
[-238.31689453 111.36088562]
[-251.96249390 119.36764526]
[-264.83923340 111.88172150]
[-273.60089111 124.68846893]
[-288.22811890 129.86764526]
[-303.09643555 125.42775726]
[-312.48867798 113.07601929]
[-312.79333496 97.56193542]
[-303.89324951 84.85098267]
[-289.21069336 79.83078766]
[-274.39141846 84.43171692]
[-265.13372803 96.88461304]
[-252.56082153 88.89891815]
[-238.61138916 96.36377716]
[-223.61428833 96.06927490]
[-208.62078857 95.62754822]
[-193.63235474 95.03865051]
[-178.64392090 94.44975281]
[-163.65548706 93.86085510]
[-148.66705322 93.27196503]
[-133.67861938 92.68306732]
[-129.62707520 85.79482269]
[-123.08875275 81.03771973]
[-115.10381317 79.26152039]
[-106.98017883 80.83417511]
[-100.07936859 85.56868744]
[-95.58827972 92.74190521]
[-80.59984589 93.33080292]
[-65.61141205 93.91970062]
[-50.62297821 94.50859833]
[-35.63454056 95.09749603]
[-20.64610672 95.68639374]
[-13.80344677 92.79159546]
[-5.37000895 96.43685913]
[9.60397530 97.31992340]
[24.58590698 98.05593872]
[39.57434082 98.64483643]
[54.56277847 99.23373413]
[102.12821960 76.77429199]
[109.96569824 63.98468781]
[117.80317688 51.19508743]
[125.64065552 38.40548325]
[133.47813416 25.61588097]
[141.31561279 12.82627869]
[141.92904663 -2.98303080]
[155.17616272 -9.79208565]
[163.01364136 -22.58168793]
[170.85112000 -35.37129211]
[178.68859863 -48.16089249]
[186.52607727 -60.95049667]
[194.36355591 -73.74009705]
[194.97698975 -89.54940796]
[208.22410583 -96.35845947]
[204.75201416 -111.54340363]
[212.88252258 -124.40222931]
[227.38043213 -127.61875916]
[235.21791077 -140.40835571]
[243.05538940 -153.19796753]
[250.89286804 -165.98756409]
[248.56091309 -181.86022949]
[259.62152100 -193.48100281]
[275.58996582 -191.93542480]
[284.21658325 -178.40913391]
[278.88381958 -163.27833557]
[263.68246460 -158.15008545]
[255.84500122 -145.36048889]
[248.00752258 -132.57087708]
[240.17004395 -119.78128052]
[243.88600159 -105.40326691]
[236.11988831 -92.32114410]
[221.01370239 -88.52098083]
[220.96086121 -73.62647247]
[207.15315247 -65.90261841]
[199.31567383 -53.11301804]
[191.47819519 -40.32341385]
[183.64071655 -27.53381157]
[175.80323792 -14.74421024]
[167.96575928 -1.95460737]
[167.91291809 12.93990421]
[154.10520935 20.66375732]
[146.26773071 33.45335770]
[138.43025208 46.24296188]
[130.59277344 59.03256607]
[122.75529480 71.82216644]
[114.91781616 84.61177063]
[127.92751312 77.14532471]
[138.09504700 66.11711884]
[152.33573914 61.40513229]
[167.07450867 64.19229126]
[178.61128235 73.77890015]
[184.04977417 87.75826263]
[182.02468872 102.62094116]
[173.04441833 114.63570404]
[159.36340332 120.78630066]
[144.41621399 119.52865601]
[131.95565796 111.17890167]
[117.56240845 106.95581055]
[128.16900635 117.56240845]
[138.77561951 128.16900635]
[149.38221741 138.77561951]
[159.98881531 149.38221741]
[170.59541321 159.98881531]
[181.20202637 170.59541321]
[196.25462341 167.21569824]
[210.73704529 172.53199768]
[220.02798462 184.84791565]
[221.16275024 200.23348999]
[213.77923584 213.77923584]
[200.23348999 221.16275024]
[184.84791565 220.02798462]
[172.53199768 210.73704529]
[167.21569824 196.25462341]
[170.59541321 181.20202637]
[159.98881531 170.59541321]
[149.38221741 159.98881531]
[138.77561951 149.38221741]
[128.16900635 138.77561951]
[117.56240845 128.16900635]
[106.95581055 117.56240845]
[99.86976624 120.01963806]
[97.03978729 134.75025940]
[85.69766998 124.93408966]
[78.61162567 127.39131927]
[76.84856415 142.28733826]
[75.08550262 157.18336487]
[87.74386597 165.78712463]
[94.94368744 179.29345703]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 157]
[10 156]
[11 155]
[12 70]
[13 69]
[14 68]
[16 67]
[17 66]
[18 64]
[19 63]
[20 62]
[21 61]
[22 60]
[23 59]
[25 53]
[26 52]
[27 51]
[28 50]
[29 49]
[30 48]
[32 47]
[33 46]
[35 44]
[71 117]
[72 116]
[73 115]
[74 114]
[75 113]
[76 112]
[78 110]
[79 109]
[80 108]
[81 107]
[82 106]
[83 105]
[85 103]
[88 100]
[89 99]
[90 98]
[91 97]
[129 151]
[130 150]
[131 149]
[132 148]
[133 147]
[134 146]
[135 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
