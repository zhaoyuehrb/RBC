%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 21:31:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAUGGACUCUAGUUCAGUUUUAUAUGCAAUGGAUCACUAUUUUAUUUAAUUUUUUUUAAAUAAAAAAUACAAUAGCAUUGGCUAU\
) } def
/len { sequence length } bind def

/coor [
[72.41308594 167.44764709]
[63.85309982 179.88737488]
[50.79455566 187.34628296]
[35.85410309 188.39146423]
[21.99884796 182.86901855]
[11.02042961 193.09028625]
[0.04201199 203.31156921]
[-10.93640614 213.53283691]
[-21.91482353 223.75410461]
[-26.20197678 239.58294678]
[-42.12090302 243.52246094]
[-53.29557800 231.52001953]
[-48.23044968 215.92269897]
[-32.13609314 212.77568054]
[-21.15767479 202.55441284]
[-10.17925739 192.33314514]
[0.79916072 182.11187744]
[11.77757835 171.89060974]
[7.25763273 157.67668152]
[9.36598301 142.84886169]
[17.73747635 130.35569763]
[30.75617218 122.70496368]
[45.86702347 121.46031189]
[60.07728195 126.92198944]
[71.05570221 116.70072174]
[82.03411865 106.47945404]
[82.65615845 92.00328827]
[93.26095581 82.12986755]
[107.74461365 82.54212952]
[118.72303009 72.32086182]
[129.70144653 62.09959412]
[140.67987061 51.87832260]
[151.65827942 41.65705490]
[144.60705566 27.01705360]
[142.34907532 10.94361210]
[145.08758545 -5.03636932]
[152.55168152 -19.40829659]
[164.02314758 -30.81343651]
[178.40547180 -38.17737198]
[194.32872009 -40.81120682]
[210.27995300 -38.47600174]
[224.74707031 -31.40441322]
[234.96833801 -42.38283157]
[245.18960571 -53.36124802]
[255.41087341 -64.33966827]
[265.63214111 -75.31808472]
[275.85342407 -86.29650116]
[286.07467651 -97.27491760]
[296.29595947 -108.25334167]
[306.51721191 -119.23175812]
[316.73849487 -130.21017456]
[315.92401123 -145.99345398]
[326.57043457 -157.67375183]
[342.36145020 -158.32131958]
[353.92852783 -147.55200195]
[354.40911865 -131.75502014]
[343.51809692 -120.30245209]
[327.71691895 -119.98890686]
[317.49563599 -109.01049042]
[307.27438354 -98.03206635]
[297.05310059 -87.05364990]
[286.83181763 -76.07523346]
[276.61056519 -65.09681702]
[266.38928223 -54.11839676]
[256.16802979 -43.13998032]
[245.94676208 -32.16156387]
[235.72547913 -21.18314362]
[242.94252014 -9.34573078]
[246.79708862 3.98507547]
[247.01148987 17.87322807]
[243.56382751 31.34168625]
[236.69010925 43.44114685]
[226.86804199 53.31695938]
[214.78388977 60.26949310]
[201.28448486 63.80369186]
[187.31787109 63.66432571]
[173.86682129 59.85441208]
[161.87954712 52.63547134]
[150.90113831 62.85674286]
[139.92271423 73.07801056]
[128.94430542 83.29927826]
[117.96588135 93.52054596]
[117.34384155 107.99671173]
[106.73904419 117.87013245]
[92.25538635 117.45787048]
[81.27696991 127.67913818]
[70.29855347 137.90040588]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 18]
[6 17]
[7 16]
[8 15]
[9 14]
[24 87]
[25 86]
[26 85]
[29 82]
[30 81]
[31 80]
[32 79]
[33 78]
[42 67]
[43 66]
[44 65]
[45 64]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
