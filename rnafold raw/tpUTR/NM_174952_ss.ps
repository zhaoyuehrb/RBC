%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 01:33:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAAAUUUAUGGCAAAAACUUAAAAAACAACUUCAUGGAAGUCAGUUUAUUUCUUUGUCAUUUUAACAAAAUUUAUUCCAAAUAUAGGAGUAAUAAAAGCAUAAUUUUCACUUGUUCAGGCAUUCGCUCAGGCUUUAGUGACUAUAUGACACAACCACGGAGAAAUAAACCUUGUUAAGACAA\
) } def
/len { sequence length } bind def

/coor [
[104.56412506 297.96990967]
[89.49409485 299.44396973]
[74.76255035 295.94247437]
[61.96746445 287.84530640]
[52.49674988 276.03070068]
[47.37772369 261.78030396]
[47.16565323 246.63983154]
[51.88354874 232.25163269]
[61.01964188 220.17643738]
[73.58292389 211.72406006]
[88.21061707 207.81135559]
[89.22872925 192.84594727]
[90.24684143 177.88052368]
[91.26495361 162.91511536]
[92.28305817 147.94970703]
[93.30117035 132.98429871]
[87.38674164 128.37242126]
[79.31846619 141.01770020]
[71.25019073 153.66296387]
[63.18191147 166.30824280]
[55.11363602 178.95350647]
[48.99412537 192.64846802]
[34.43894958 196.27430725]
[22.61013031 187.05047607]
[22.57892418 172.05050659]
[34.36907196 162.77757263]
[44.66627121 151.87034607]
[54.96347046 140.96311951]
[65.26067352 130.05589294]
[75.55786896 119.14865875]
[69.64343262 114.53677368]
[55.37759018 119.17202759]
[41.11174011 123.80728149]
[26.84589386 128.44253540]
[12.58004570 133.07778931]
[-0.61544305 143.72276306]
[-14.49728012 133.98977661]
[-8.98754120 117.95609283]
[7.94479036 118.81194305]
[22.21063805 114.17668915]
[36.47648621 109.54143524]
[50.74233246 104.90618134]
[65.00817871 100.27092743]
[74.46300507 83.19170380]
[89.84442139 75.90098572]
[104.12602234 78.66455841]
[111.88189697 65.82530975]
[119.63777161 52.98605347]
[127.39364624 40.14680099]
[135.14952087 27.30754852]
[142.90539551 14.46829605]
[150.66127014 1.62904346]
[158.41714478 -11.21020889]
[166.17301941 -24.04946136]
[173.92889404 -36.88871384]
[181.68476868 -49.72796631]
[189.44064331 -62.56721878]
[197.19651794 -75.40647125]
[204.95239258 -88.24572754]
[196.88119507 -95.25261688]
[189.87510681 -103.31992340]
[184.07199097 -112.28742218]
[179.58580017 -121.97721100]
[176.50437927 -132.19721985]
[174.88777161 -142.74501038]
[174.76695251 -153.41181946]
[176.14337158 -163.98661804]
[178.98881531 -174.26039124]
[183.24604797 -184.03018188]
[188.83000183 -193.10311890]
[195.62937927 -201.30026245]
[203.50892639 -208.46008301]
[212.31213379 -214.44171143]
[221.86434937 -219.12762451]
[217.59394836 -233.50689697]
[213.32353210 -247.88616943]
[209.05313110 -262.26544189]
[204.78273010 -276.64471436]
[200.51232910 -291.02401733]
[196.24191284 -305.40328979]
[181.82583618 -311.46221924]
[174.72309875 -325.39364624]
[178.28739929 -340.61962891]
[190.83578491 -349.95086670]
[206.44329834 -348.98144531]
[217.74053955 -338.16912842]
[219.39329529 -322.61911011]
[210.62120056 -309.67367554]
[214.89160156 -295.29440308]
[219.16200256 -280.91513062]
[223.43241882 -266.53585815]
[227.70281982 -252.15658569]
[231.97322083 -237.77729797]
[236.24362183 -223.39802551]
[249.05854797 -224.73681641]
[261.91476440 -223.88116455]
[274.43920898 -220.85591125]
[286.26852417 -215.74884033]
[297.05938721 -208.70814514]
[306.49871826 -199.93811035]
[314.31259155 -189.69323730]
[327.70648193 -196.44628906]
[341.10037231 -203.19934082]
[354.49426270 -209.95240784]
[355.69326782 -223.69685364]
[363.47030640 -234.96130371]
[375.70254517 -240.85954285]
[389.14312744 -239.94487000]
[400.28289795 -232.56346130]
[413.78952026 -239.08810425]
[427.29614258 -245.61274719]
[440.80276489 -252.13739014]
[454.30941772 -258.66201782]
[464.85354614 -275.82540894]
[484.05081177 -273.62545776]
[497.32809448 -280.60498047]
[510.60537720 -287.58450317]
[515.39062500 -302.40808105]
[528.95513916 -309.29718018]
[543.05767822 -304.64379883]
[556.33496094 -311.62332153]
[569.61224365 -318.60284424]
[577.90570068 -332.75030518]
[594.30047607 -332.37115479]
[601.93103027 -317.85540771]
[592.94769287 -304.13565063]
[576.59173584 -305.32556152]
[563.31445312 -298.34603882]
[550.03717041 -291.36651611]
[545.87432861 -277.11151123]
[532.50866699 -269.84411621]
[517.58489990 -274.30722046]
[504.30761719 -267.32769775]
[491.03033447 -260.34817505]
[488.87707520 -250.33079529]
[481.39999390 -243.00744629]
[470.90841675 -240.97891235]
[460.83404541 -245.15539551]
[447.32742310 -238.63075256]
[433.82080078 -232.10610962]
[420.31417847 -225.58146667]
[406.80752563 -219.05682373]
[404.42132568 -202.82598877]
[392.71954346 -191.09234619]
[376.16683960 -188.61274719]
[361.24731445 -196.55851746]
[347.85342407 -189.80546570]
[334.45953369 -183.05239868]
[321.06564331 -176.29934692]
[325.76190186 -156.88424683]
[325.21325684 -136.90589905]
[319.45223999 -117.75698090]
[308.87493896 -100.77385712]
[294.21377563 -87.14329529]
[276.48681641 -77.81954956]
[256.92703247 -73.45754242]
[236.89648438 -74.36687469]
[217.79164124 -80.48985291]
[210.03576660 -67.65059662]
[202.27989197 -54.81134415]
[194.52401733 -41.97209167]
[186.76814270 -29.13283920]
[179.01226807 -16.29358673]
[171.25639343 -3.45433426]
[163.50051880 9.38491821]
[155.74464417 22.22417068]
[147.98876953 35.06342316]
[140.23289490 47.90267563]
[132.47702026 60.74192810]
[124.72114563 73.58118439]
[116.96527100 86.42043304]
[126.84384918 109.15422058]
[108.26657867 134.00241089]
[107.24846649 148.96781921]
[106.23036194 163.93322754]
[105.21224976 178.89863586]
[104.19413757 193.86404419]
[103.17602539 208.82945251]
[117.13902283 214.68722534]
[128.44180298 224.76322937]
[135.85830688 237.96452332]
[138.58406067 252.85911560]
[136.32339478 267.83135986]
[129.32153320 281.25717163]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 178]
[12 177]
[13 176]
[14 175]
[15 174]
[16 173]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[46 171]
[47 170]
[48 169]
[49 168]
[50 167]
[51 166]
[52 165]
[53 164]
[54 163]
[55 162]
[56 161]
[57 160]
[58 159]
[59 158]
[74 94]
[75 93]
[76 92]
[77 91]
[78 90]
[79 89]
[80 88]
[101 149]
[102 148]
[103 147]
[104 146]
[109 142]
[110 141]
[111 140]
[112 139]
[113 138]
[115 134]
[116 133]
[117 132]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
