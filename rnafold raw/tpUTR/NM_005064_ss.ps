%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 01:43:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUGUCAAGGUGAAGGGACACAAGUUGCCAGCCACCAACUUUCUUGCCUCAACUACCUUCCUGAAUUAUUUUUUAAAGAAGCAUUUAUUCUUGUGUUCUGGAUUUAGAGCAAUUCAUCUAAUAAACAGUUUCUCACUUUU\
) } def
/len { sequence length } bind def

/coor [
[88.16590118 184.96379089]
[72.93095398 181.40121460]
[58.59646225 175.13081360]
[45.63927460 166.36114502]
[34.49040985 155.38397217]
[25.52074242 142.56443787]
[19.02864647 128.32897949]
[15.23008633 113.15114594]
[0.26311287 114.14598846]
[-14.70386028 115.14083862]
[-29.67083359 116.13568115]
[-44.63780594 117.13052368]
[-59.60477829 118.12536621]
[-71.45077515 132.83050537]
[-89.96104431 134.26554871]
[-103.46240997 121.98858643]
[-118.37072754 123.64449310]
[-133.27905273 125.30039978]
[-141.53904724 129.38652039]
[-148.53497314 126.82428741]
[-163.47628784 128.14997864]
[-179.34548950 140.49624634]
[-196.55746460 131.78717041]
[-211.42550659 133.77247620]
[-226.29353333 135.75778198]
[-241.16157532 137.74308777]
[-256.02960205 139.72839355]
[-270.89764404 141.71371460]
[-278.15786743 155.42753601]
[-292.10705566 162.22454834]
[-307.38150024 159.49118042]
[-318.10781860 148.27844238]
[-320.16159058 132.89788818]
[-312.75302124 119.26362610]
[-298.73089600 112.61832428]
[-283.48703003 115.51723480]
[-272.88296509 126.84567261]
[-258.01492310 124.86035919]
[-243.14688110 122.87505341]
[-228.27883911 120.88974762]
[-213.41081238 118.90443420]
[-198.54277039 116.91912842]
[-193.02970886 108.20130920]
[-183.40963745 103.90629578]
[-172.80346680 105.69474792]
[-164.80198669 113.20868683]
[-149.86068726 111.88298035]
[-134.93495178 110.39208221]
[-120.02664185 108.73617554]
[-105.11832428 107.08026123]
[-100.03922272 96.76142120]
[-90.49050140 90.13713837]
[-78.80685425 88.96928406]
[-67.91479492 93.66779327]
[-60.59962463 103.15839386]
[-45.63265228 102.16355133]
[-30.66567802 101.16870880]
[-15.69870472 100.17386627]
[-0.73173147 99.17901611]
[14.23524189 98.18417358]
[15.73449230 83.93092346]
[19.58577919 70.12619781]
[25.68160629 57.15531158]
[33.85182190 45.38031769]
[43.86838150 35.12988281]
[55.45169830 26.69011307]
[68.27845764 20.29658318]
[81.99063110 16.12775421]
[96.20549011 14.29998398]
[110.52626038 14.86429119]
[124.55321503 17.80492401]
[137.89483643 23.03980255]
[150.17874146 30.42281151]
[161.06204224 39.74787140]
[170.24095154 50.75470352]
[177.45928955 63.13608170]
[182.51557922 76.54640961]
[185.26866150 90.61138153]
[200.26499939 90.27954865]
[215.26132202 89.94771576]
[230.25764465 89.61589050]
[245.25398254 89.28405762]
[260.25030518 88.95222473]
[275.71472168 79.02320862]
[290.77908325 87.95899963]
[305.76440430 87.29550171]
[320.74972534 86.63200378]
[335.73504639 85.96849823]
[350.72036743 85.30500031]
[365.70568848 84.64150238]
[377.23617554 71.53639984]
[394.33911133 70.79987335]
[406.46667480 82.39991760]
[421.43365479 81.40507507]
[436.35937500 79.91417694]
[451.22741699 77.92887115]
[466.09545898 75.94356537]
[480.96350098 73.95825195]
[495.83154297 71.97294617]
[510.69955444 69.98764038]
[525.56762695 68.00233459]
[538.22222900 57.57197952]
[553.48565674 63.56869507]
[555.65612793 79.82357025]
[542.50091553 89.61498260]
[527.55291748 82.87036896]
[512.68487549 84.85567474]
[497.81683350 86.84098816]
[482.94879150 88.82629395]
[468.08074951 90.81159973]
[453.21273804 92.79690552]
[438.34469604 94.78221893]
[435.89846802 97.42458344]
[432.01824951 98.97438049]
[427.25036621 98.75591278]
[422.42849731 96.37204742]
[407.46151733 97.36688995]
[400.38040161 108.18679810]
[388.16918945 113.00155640]
[375.23022461 109.83328247]
[366.36917114 99.62681580]
[351.38385010 100.29032135]
[336.39852905 100.95381927]
[321.41323853 101.61731720]
[306.42791748 102.28081512]
[291.44259644 102.94432068]
[283.00280762 111.67910004]
[270.47076416 112.30989838]
[260.58215332 103.94855499]
[245.58581543 104.28038788]
[230.58947754 104.61221313]
[215.59315491 104.94404602]
[200.59681702 105.27587891]
[185.60049438 105.60771179]
[183.15821838 121.06186676]
[177.94966125 135.81538391]
[170.14808655 149.37750244]
[160.01300049 161.29705811]
[147.88159180 171.17755127]
[134.15736389 178.69030762]
[119.29689789 183.58540344]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 60]
[9 59]
[10 58]
[11 57]
[12 56]
[13 55]
[16 50]
[17 49]
[18 48]
[20 47]
[21 46]
[23 42]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[78 134]
[79 133]
[80 132]
[81 131]
[82 130]
[83 129]
[85 126]
[86 125]
[87 124]
[88 123]
[89 122]
[90 121]
[93 117]
[94 116]
[95 112]
[96 111]
[97 110]
[98 109]
[99 108]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
