%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 12:20:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCAGAGUCAGGUCCACAUCCUCCACCCCAAGAGACAGUGAAUGAUGGUUUUUCUCCAAUGUUACCAGAUGACAUAUACACAUAAAGCACUUGGUAGGAAUUGCCCGGAUGUUUGAAUAAAUAUUUAUCCUCCCCCA\
) } def
/len { sequence length } bind def

/coor [
[69.71092224 194.82025146]
[58.69935608 184.63468933]
[52.21220779 171.11001587]
[51.16114426 156.14688110]
[55.69387054 141.84812927]
[65.17338562 130.22320557]
[78.26939392 122.90518951]
[88.41773987 111.85932922]
[74.21606445 116.68760681]
[60.01438141 121.51588440]
[45.81270218 126.34416962]
[42.70015717 137.92190552]
[34.44059372 146.44474792]
[23.19666290 149.84910583]
[11.83206081 147.39007568]
[3.18230200 139.80079651]
[-11.22304821 143.98240662]
[-25.62839890 148.16403198]
[-30.97333336 162.61178589]
[-43.65249252 171.04341125]
[-58.68745041 170.39994812]
[-70.32127380 161.13755798]
[-84.72662354 165.31916809]
[-99.13198090 169.50077820]
[-104.26461029 184.14439392]
[-117.04342651 192.94674683]
[-132.55471802 192.52314758]
[-144.83407593 183.03646851]
[-149.15983582 168.13453674]
[-143.86865234 153.54745483]
[-130.99510193 144.88424683]
[-115.48931122 145.47610474]
[-103.31359100 155.09542847]
[-88.90824127 150.91381836]
[-74.50288391 146.73220825]
[-69.63681030 132.68017578]
[-57.28327560 124.08633423]
[-42.06016541 124.41844177]
[-29.81001091 133.75866699]
[-15.40465927 129.57705688]
[-0.99930876 125.39545441]
[6.76408529 108.88483429]
[24.40540123 103.11204529]
[40.98442459 112.14248657]
[55.18610382 107.31420898]
[69.38777924 102.48592377]
[83.58946228 97.65764618]
[94.25582886 87.11114502]
[99.24428558 72.96493530]
[104.23274231 58.81872177]
[100.40681458 40.84634018]
[114.08367157 29.90793419]
[118.75115967 15.65260029]
[123.41864777 1.39726496]
[128.08613586 -12.85807037]
[132.75361633 -27.11340523]
[137.25970459 -41.42057419]
[141.60383606 -55.77775192]
[145.94796753 -70.13492584]
[150.29209900 -84.49210358]
[154.47370911 -98.89745331]
[158.49227905 -113.34914398]
[162.51083374 -127.80082703]
[166.52938843 -142.25251770]
[159.03477478 -150.05056763]
[155.52346802 -160.19450378]
[156.57730103 -170.79547119]
[161.93463135 -179.90954590]
[170.55099487 -185.89407349]
[180.80203247 -187.70375061]
[185.79049683 -201.84996033]
[190.77894592 -215.99617004]
[181.23214722 -228.11485291]
[179.77548218 -243.47328186]
[186.87374878 -257.17065430]
[200.26191711 -264.83621216]
[215.66787720 -264.02386475]
[228.17564392 -254.99282837]
[233.79402161 -240.62490845]
[230.73022461 -225.50483704]
[219.96189880 -214.45736694]
[204.92515564 -211.00772095]
[199.93670654 -196.86149597]
[194.94824219 -182.71528625]
[204.67048645 -165.91696167]
[198.94367981 -147.05661011]
[180.98106384 -138.23394775]
[176.96250916 -123.78227234]
[172.94395447 -109.33058167]
[168.92539978 -94.87889862]
[170.17456055 -87.52997589]
[164.64927673 -80.14797211]
[160.30514526 -65.79079437]
[155.96101379 -51.43362045]
[151.61688232 -37.07644272]
[152.69964600 -29.70116997]
[147.00895691 -22.44591904]
[142.34146118 -8.19058418]
[137.67398071 6.06475067]
[133.00650024 20.32008553]
[128.33900452 34.57542038]
[133.53398132 45.55802155]
[129.69766235 57.50859451]
[118.37895203 63.80717850]
[113.39049530 77.95339203]
[108.40203857 92.09960175]
[115.45665741 95.70272064]
[120.09140015 104.33047485]
[131.66636658 113.87092590]
[143.24133301 123.41136932]
[154.81629944 132.95181274]
[166.39126587 142.49226379]
[179.79598999 135.32414246]
[194.92393494 133.83639526]
[209.46823120 138.25588989]
[221.21096802 147.90870667]
[228.36145020 161.32283020]
[229.82929993 176.45272827]
[225.39067078 190.99119568]
[215.72242737 202.72122192]
[202.29888916 209.85404968]
[187.16706848 211.30200195]
[172.63446045 206.84425354]
[160.91716003 197.16058350]
[153.80198669 183.72767639]
[152.37396240 168.59397888]
[156.85081482 154.06723022]
[145.27584839 144.52677917]
[133.70088196 134.98634338]
[122.12591553 125.44589233]
[110.55094910 115.90544891]
[116.13500977 129.82731628]
[125.79398346 141.30355835]
[130.54830933 155.53016663]
[129.72984314 170.50781250]
[123.45360565 184.13165283]
[112.60161591 194.48704529]
[98.69895172 200.11872864]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 47]
[9 46]
[10 45]
[11 44]
[16 41]
[17 40]
[18 39]
[22 35]
[23 34]
[24 33]
[48 106]
[49 105]
[50 104]
[52 101]
[53 100]
[54 99]
[55 98]
[56 97]
[57 95]
[58 94]
[59 93]
[60 92]
[61 90]
[62 89]
[63 88]
[64 87]
[70 84]
[71 83]
[72 82]
[108 131]
[109 130]
[110 129]
[111 128]
[112 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
