%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 15:04:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGUGAUAUAAUUUGCAAUUUGGUUAAAUGUGCUUGCCUGAAAUAAAGCUAAUAAAAAUAUUAUGUUUCACAUUAUCUUCUG\
) } def
/len { sequence length } bind def

/coor [
[143.27943420 290.53399658]
[149.84634399 276.82473755]
[161.16302490 266.67578125]
[156.15145874 252.53773499]
[151.13989258 238.39970398]
[146.12832642 224.26165771]
[140.58535767 210.32337952]
[134.51890564 196.60484314]
[128.45245361 182.88632202]
[122.38599396 169.16778564]
[116.31954193 155.44924927]
[110.25308990 141.73071289]
[95.37160492 142.72184753]
[81.04766083 138.56666565]
[69.00673676 129.76568604]
[60.69929504 117.37910461]
[57.12606430 102.89901733]
[58.71747589 88.06970978]
[65.28182983 74.67753601]
[76.02837372 64.33573914]
[69.96192169 50.61720276]
[63.89546967 36.89867020]
[57.82901764 23.18013573]
[51.76256561 9.46160221]
[45.69611359 -4.25693130]
[35.04980469 -7.71006060]
[28.31333160 -16.36751556]
[27.61181450 -27.09142685]
[32.93785477 -36.16831589]
[27.92629242 -50.30635834]
[22.91473007 -64.44439697]
[7.75578499 -66.55744171]
[-4.67805576 -75.48258972]
[-11.52958584 -89.16889954]
[-11.22437382 -104.47136688]
[-3.83255529 -117.87358856]
[8.94728374 -126.29583740]
[24.17843056 -127.80274200]
[38.36087799 -122.04802704]
[48.23560333 -110.35408020]
[51.53347015 -95.40808868]
[47.49664688 -80.64453125]
[37.05277252 -69.45596313]
[42.06433487 -55.31792068]
[47.07589722 -41.17987823]
[62.69503021 -30.04044342]
[59.41464615 -10.32338333]
[65.48110199 3.39515018]
[71.54755402 17.11368370]
[77.61400604 30.83221626]
[83.68045807 44.55075073]
[89.74691010 58.26928329]
[104.62839508 57.27814865]
[118.95233917 61.43333817]
[130.99327087 70.23431396]
[139.30070496 82.62089539]
[142.87393188 97.10098267]
[141.28251648 111.93029022]
[134.71817017 125.32246399]
[123.97162628 135.66426086]
[130.03807068 149.38279724]
[136.10452271 163.10133362]
[142.17097473 176.81987000]
[148.23742676 190.53839111]
[154.30387878 204.25692749]
[159.72755432 208.71841431]
[161.59916687 214.42304993]
[160.26637268 219.25009155]
[165.27793884 233.38813782]
[170.28950500 247.52616882]
[175.30105591 261.66421509]
[190.48320007 262.42004395]
[204.21827698 268.93280029]
[214.41180420 280.20932007]
[219.50933838 294.53005981]
[218.73355103 309.71121216]
[212.20274353 323.43771362]
[200.91279602 333.61639404]
[186.58537292 338.69506836]
[171.40527344 337.89932251]
[157.68737793 331.35046387]
[147.52354431 320.04714966]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 71]
[4 70]
[5 69]
[6 68]
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[20 52]
[21 51]
[22 50]
[23 49]
[24 48]
[25 47]
[29 45]
[30 44]
[31 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
