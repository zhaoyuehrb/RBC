%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 09:15:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCGUUGUUUGGGAAAUAGAGAGUUGAGAUAAACACUCUCAUUCAGUAGUUACUGAAAGAAAACUCUGCUAGAAUGAUAAAUGUCAUGGUGGUCUAUAACUCCAAAUAAACAAUGCAACGUUCC\
) } def
/len { sequence length } bind def

/coor [
[125.67327881 392.83706665]
[132.44017029 379.10870361]
[144.81866455 370.10696411]
[142.58303833 355.27450562]
[140.34739685 340.44201660]
[138.11177063 325.60955811]
[135.87612915 310.77709961]
[133.64050293 295.94464111]
[131.40486145 281.11218262]
[129.16923523 266.27972412]
[126.93359375 251.44725037]
[124.69795990 236.61479187]
[121.90928650 221.87629700]
[118.57147217 207.25238037]
[115.23365784 192.62846375]
[101.04825592 179.58364868]
[106.98296356 160.39480591]
[102.92035675 145.95544434]
[98.85774994 131.51606750]
[94.79514313 117.07671356]
[80.89767456 98.79519653]
[68.94068909 89.73812866]
[56.98369980 80.68106079]
[45.02671051 71.62399292]
[33.06972504 62.56692886]
[21.11273766 53.50986099]
[7.21903229 47.85610580]
[-7.66455555 45.99094772]
[-22.54814339 44.12579346]
[-37.43173218 42.26063919]
[-48.77106094 53.02881622]
[-64.38223267 53.93733597]
[-76.89411926 44.55722046]
[-80.39900970 29.31747818]
[-73.24198151 15.41384411]
[-58.80237961 9.41119194]
[-43.89813232 14.14378929]
[-35.56657791 27.37704849]
[-20.68298912 29.24220467]
[-5.79939985 31.10736084]
[9.08418846 32.97251511]
[12.91486740 26.52457809]
[24.40690613 7.18076754]
[15.65075207 -4.99830246]
[6.89459658 -17.17737198]
[-1.86155844 -29.35644341]
[-10.61771393 -41.53551102]
[-19.37386894 -53.71458435]
[-34.53619003 -59.96246719]
[-36.43803024 -76.25096130]
[-23.12294006 -85.82386017]
[-8.28834152 -78.83338165]
[-7.19479847 -62.47073746]
[1.56135654 -50.29166794]
[10.31751156 -38.11259842]
[19.07366753 -25.93352699]
[27.82982254 -13.75445747]
[36.58597565 -1.57538760]
[41.43190765 9.40679073]
[42.61869812 20.14996719]
[40.61052322 29.59641838]
[36.14899063 36.91199112]
[30.16980362 41.55287552]
[42.12678909 50.60993958]
[54.08377838 59.66700745]
[66.04076385 68.72407532]
[77.99775696 77.78113556]
[89.95474243 86.83820343]
[104.95474243 86.83820343]
[116.91172791 77.78113556]
[128.86871338 68.72407532]
[140.82569885 59.66700745]
[143.12210083 44.26037598]
[155.37721252 35.24555206]
[170.05091858 37.52976227]
[182.00791931 28.47269630]
[193.96490479 19.41563034]
[205.92189026 10.35856342]
[217.87887573 1.30149758]
[223.74681091 -14.01187515]
[239.98283386 -16.31920815]
[249.88470459 -3.24691415]
[243.26623535 11.75735092]
[226.93594360 13.25848484]
[214.97895813 22.31555176]
[203.02197266 31.37261772]
[191.06497192 40.42968369]
[179.10798645 49.48675156]
[177.33259583 64.23068237]
[165.33552551 73.58616638]
[149.88276672 71.62399292]
[137.92578125 80.68106079]
[125.96879578 89.73812866]
[114.01181030 98.79519653]
[109.23450470 113.01410675]
[113.29711151 127.45346832]
[117.35971832 141.89283752]
[121.42232513 156.33219910]
[131.31991577 161.16641235]
[136.75726318 170.49101257]
[136.11637878 181.04472351]
[129.85757446 189.29064941]
[133.19538879 203.91456604]
[136.53320312 218.53848267]
[140.24458313 222.51803589]
[141.82192993 227.07702637]
[141.41362000 231.27561951]
[139.53042603 234.37916565]
[141.76605225 249.21162415]
[144.00169373 264.04409790]
[146.23731995 278.87655640]
[148.47296143 293.70901489]
[150.70858765 308.54147339]
[152.94422913 323.37393188]
[155.17985535 338.20639038]
[157.41549683 353.03884888]
[159.65112305 367.87130737]
[174.13299561 372.82452393]
[184.64575195 383.94839478]
[188.77365112 398.68673706]
[185.56814575 413.65280151]
[175.76580811 425.40750122]
[161.61917114 431.24969482]
[146.37899780 429.83685303]
[133.54740906 421.49368286]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 117]
[4 116]
[5 115]
[6 114]
[7 113]
[8 112]
[9 111]
[10 110]
[11 109]
[12 108]
[13 104]
[14 103]
[15 102]
[17 98]
[18 97]
[19 96]
[20 95]
[21 68]
[22 67]
[23 66]
[24 65]
[25 64]
[26 63]
[27 41]
[28 40]
[29 39]
[30 38]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
[69 94]
[70 93]
[71 92]
[72 91]
[75 88]
[76 87]
[77 86]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
