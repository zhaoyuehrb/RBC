%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 01:02:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACAUCUGGGAAUGAAUUUGCAGCACCUGGUAGAAGAAGGCACCUUGGAAGGCACUGCCUUGGGCUUCCAUGGCAGGAAGAUGAGAAGAAAUCUUCAGGGUGAUUUCUGGAGCCUGAAAAGAAUAAAAAACAAAACCAA\
) } def
/len { sequence length } bind def

/coor [
[36.63433838 564.08624268]
[32.37940979 578.47009277]
[28.12448311 592.85400391]
[23.86955643 607.23785400]
[28.22774124 623.04730225]
[16.52433014 634.53479004]
[0.79878694 629.88293457]
[-2.77179575 613.87725830]
[9.48569107 602.98291016]
[13.74061775 588.59906006]
[17.99554443 574.21520996]
[22.25047112 559.83129883]
[6.92736292 552.84576416]
[-7.19011259 543.66113281]
[-19.78857613 532.48052979]
[-30.58826637 519.55151367]
[-39.34924698 505.16043091]
[-45.87674713 489.62612915]
[-50.02548218 473.29278564]
[-51.70288849 456.52255249]
[-50.87119293 439.68719482]
[-47.54825974 423.16012573]
[-41.80721664 407.30792236]
[-33.77482605 392.48233032]
[-23.62870216 379.01239014]
[-11.59338284 367.19717407]
[2.06464887 357.29904175]
[17.04285622 349.53802490]
[33.00935364 344.08670044]
[49.61026382 341.06652832]
[66.47754669 340.54504395]
[68.13346100 325.63671875]
[69.78936768 310.72842407]
[58.67348480 300.85040283]
[55.46773529 286.14709473]
[61.60629654 272.21255493]
[74.92686462 264.47506714]
[76.58277130 249.56675720]
[78.23867798 234.65843201]
[79.89459229 219.75010681]
[70.41801453 208.31639099]
[71.88496399 193.17364502]
[83.94196320 183.31126404]
[85.59786987 168.40293884]
[87.25377655 153.49462891]
[88.90969086 138.58630371]
[90.56559753 123.67798615]
[92.22151184 108.76966858]
[88.58003998 123.32094574]
[77.73297119 133.68150330]
[63.03001404 136.65187073]
[49.01162720 131.31474304]
[40.00686264 119.31832123]
[38.79650879 104.36723328]
[45.75433731 91.07856750]
[58.73167801 83.55603027]
[73.72254944 84.12319946]
[71.40881348 69.30271912]
[69.09507751 54.48223877]
[66.78134918 39.66175842]
[64.46761322 24.84127808]
[54.69425201 12.39973545]
[60.37578201 -1.36868691]
[58.06204987 -16.18916702]
[55.74831390 -31.00964737]
[45.04056931 -43.43044281]
[50.69815826 -58.82276917]
[66.90103912 -61.35232162]
[76.98107910 -48.41691208]
[70.56879425 -33.32338333]
[72.88253021 -18.50290108]
[75.19626617 -3.68242097]
[84.80413055 7.69906092]
[79.28809357 22.52754402]
[81.60182953 37.34802246]
[83.91555786 52.16850281]
[86.22929382 66.98898315]
[88.54302979 81.80946350]
[102.82924652 86.38155365]
[113.31787109 75.65827179]
[123.80649567 64.93498993]
[134.29512024 54.21171188]
[144.78375244 43.48843002]
[155.27236938 32.76515198]
[152.54292297 17.49001694]
[159.34352112 3.54256272]
[173.05920410 -3.71413302]
[188.41601562 -1.48972237]
[199.50894165 9.36046410]
[202.07252502 24.66430664]
[195.12103271 38.53716660]
[181.32743835 45.64464951]
[165.99565125 43.25377655]
[155.50703430 53.97705460]
[145.01840210 64.70033264]
[134.52978516 75.42361450]
[124.04115295 86.14689636]
[113.55252838 96.87017822]
[107.12982941 110.42557526]
[105.47391510 125.33390045]
[103.81800842 140.24221802]
[102.16210175 155.15052795]
[100.50618744 170.05885315]
[98.85028076 184.96717834]
[108.44921112 197.23493958]
[106.55751038 212.33050537]
[94.80290985 221.40602112]
[93.14700317 236.31434631]
[91.49108887 251.22265625]
[89.83518219 266.13098145]
[101.13317108 276.60293579]
[104.06433868 291.54486084]
[97.71025085 305.18634033]
[84.69768524 312.38433838]
[83.04177856 327.29263306]
[81.38586426 342.20095825]
[94.37816620 345.33270264]
[106.91042328 349.97183228]
[118.80841064 356.05355835]
[129.90678406 363.49310303]
[140.05134583 372.18676758]
[149.10115051 382.01345825]
[156.93052673 392.83633423]
[163.43080139 404.50469971]
[168.51179504 416.85620117]
[172.10307312 429.71890259]
[174.15495300 442.91390991]
[174.63911438 456.25759888]
[173.54911804 469.56442261]
[170.90034485 482.64935303]
[166.72990417 495.33041382]
[161.09603882 507.43133545]
[154.07731628 518.78393555]
[145.77159119 529.23046875]
[136.29457092 538.62579346]
[125.77822876 546.83941650]
[114.36899567 553.75732422]
[102.22566986 559.28350830]
[89.51724243 563.34136963]
[76.42054749 565.87469482]
[63.11776352 566.84844971]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[4 9]
[31 116]
[32 115]
[33 114]
[37 110]
[38 109]
[39 108]
[40 107]
[43 104]
[44 103]
[45 102]
[46 101]
[47 100]
[48 99]
[57 78]
[58 77]
[59 76]
[60 75]
[61 74]
[63 72]
[64 71]
[65 70]
[79 98]
[80 97]
[81 96]
[82 95]
[83 94]
[84 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
