%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 13:34:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCCAUGGGGGGGUCACCGGCCUGUUGCUACUGCAACUCCACACCAUUCUUGGUGCUGGGGUGUGUUAAGCUUUACCAUUAAACACAACGUUUCUCUAA\
) } def
/len { sequence length } bind def

/coor [
[94.62374878 122.92979431]
[86.72726440 135.68304443]
[78.83078766 148.43630981]
[70.93430328 161.18955994]
[63.03781891 173.94282532]
[55.14133835 186.69607544]
[57.39994431 202.57934570]
[46.28576279 214.14889526]
[30.32464409 212.52955627]
[21.76059151 198.96356201]
[27.16321373 183.85755920]
[42.38808060 178.79959106]
[50.28456497 166.04634094]
[58.18104553 153.29307556]
[66.07752991 140.53982544]
[73.97401428 127.78656769]
[81.87049103 115.03330994]
[79.70717621 107.85208130]
[66.66312408 115.25833893]
[54.71101379 124.32183838]
[40.44763947 119.67897797]
[36.12088394 105.31655884]
[45.44610596 93.56750488]
[60.41603470 94.52082062]
[75.38054657 93.48961639]
[73.21723175 86.30838776]
[59.59025192 80.03898621]
[45.96327209 73.76957703]
[32.33629608 67.50017548]
[18.70931625 61.23076630]
[2.43893981 63.28184509]
[-7.25561476 50.05506516]
[-0.40142131 35.15700912]
[15.95051289 33.91351700]
[24.97872162 47.60379028]
[38.60570145 53.87319565]
[52.23267746 60.14260101]
[65.85965729 66.41200256]
[79.48663330 72.68141174]
[92.11678314 64.58946991]
[92.11678314 49.58946991]
[92.11678314 34.58946991]
[92.11678314 19.58947182]
[91.88578796 4.59124994]
[91.42386627 -10.40163517]
[90.96193695 -25.39452171]
[90.50001526 -40.38740540]
[90.03808594 -55.38029480]
[80.94970703 -69.03069305]
[88.46859741 -83.60458374]
[104.85997009 -84.10959625]
[113.26177979 -70.02621460]
[105.03097534 -55.84222031]
[105.49289703 -40.84933472]
[105.95482635 -25.85644722]
[106.41674805 -10.86356163]
[106.87867737 4.12932444]
[110.28985596 10.83388233]
[107.11678314 19.58947182]
[107.11678314 34.58946991]
[107.11678314 49.58946991]
[107.11678314 64.58946991]
[117.84045410 81.98036194]
[114.28025055 96.98119354]
[129.28025818 96.98119354]
[144.28025818 96.98119354]
[159.28025818 96.98119354]
[174.28025818 96.98119354]
[189.28025818 96.98119354]
[195.06504822 82.92400360]
[205.79251099 72.15412903]
[219.82675171 66.31389618]
[235.02767944 66.29390717]
[249.07723999 72.09719086]
[259.83300781 82.83880615]
[265.65475464 96.88072205]
[265.65475464 112.08165741]
[259.83300781 126.12358093]
[249.07723999 136.86518860]
[235.02767944 142.66847229]
[219.82675171 142.64848328]
[205.79251099 136.80825806]
[195.06504822 126.03837585]
[189.28025818 111.98119354]
[174.28025818 111.98119354]
[159.28025818 111.98119354]
[144.28025818 111.98119354]
[129.28025818 111.98119354]
[114.28025055 111.98119354]
[129.28024292 111.99275208]
[143.06214905 117.91384888]
[153.39595032 128.78640747]
[158.60958862 142.85118103]
[157.85946655 157.83241272]
[151.26696777 171.30604553]
[139.89877319 181.09197998]
[125.59435272 185.60678101]
[110.66822052 184.11991882]
[97.53553009 176.87199402]
[88.32122040 165.03575134]
[84.51622772 150.52638245]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 14]
[5 13]
[6 12]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[40 62]
[41 61]
[42 60]
[43 59]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
[64 89]
[65 88]
[66 87]
[67 86]
[68 85]
[69 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
