%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 21:04:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUAUUAUAUUUUACUGUUUUGCAAAUCGGUUGAUGAUCAUAUUUAUGAACACAACAUAACGAACCACAUGCACCAACCACAUGG\
) } def
/len { sequence length } bind def

/coor [
[48.84738922 282.95516968]
[38.21612167 293.53704834]
[25.27062035 301.11425781]
[10.83846664 305.20239258]
[-4.15773106 305.54013062]
[-18.75930023 302.10586548]
[-32.03279495 295.11914062]
[-43.12967682 285.02661133]
[-51.34054565 272.47344971]
[-56.14049911 258.26217651]
[-57.22269058 243.30125427]
[-54.51793289 228.54713440]
[-48.19914246 214.94297791]
[-38.67025757 203.35848999]
[-26.54044151 194.53422546]
[-12.58512306 189.03431702]
[2.30356741 187.21034241]
[17.17383194 189.17890930]
[31.07504845 194.81416321]
[43.11854553 203.75587463]
[52.53440857 215.43241882]
[58.72029877 229.09599304]
[63.50982285 214.88119507]
[68.29934692 200.66639709]
[73.08886719 186.45159912]
[62.30192184 169.34278870]
[67.23291016 149.43830872]
[85.24549866 139.06326294]
[87.93907166 124.30709839]
[90.63265228 109.55092621]
[92.25444031 94.63885498]
[92.79597473 79.64863586]
[93.33750916 64.65840912]
[93.87905121 49.66819000]
[91.01172638 40.74496460]
[94.72045135 34.14935684]
[95.80281830 19.18845940]
[89.08148193 4.86595488]
[97.71697998 -7.26983356]
[98.79934692 -22.23073196]
[99.88171387 -37.19163132]
[100.96408081 -52.15253067]
[93.32767487 -66.66519165]
[102.30545807 -80.38858032]
[118.66184998 -79.20525360]
[125.57080841 -64.33251953]
[115.92498016 -51.07016373]
[114.84261322 -36.10926437]
[113.76024628 -21.14836502]
[112.67787933 -6.18746710]
[119.47663879 7.06493378]
[110.76371765 20.27082634]
[109.68135071 35.23172379]
[108.86927032 50.20972443]
[108.32773590 65.19994354]
[107.78619385 80.19017029]
[107.24465942 95.18038940]
[109.36415100 97.72447205]
[110.50776672 101.16333771]
[110.31667328 105.09738922]
[108.60112000 108.99100494]
[105.38882446 112.24449921]
[102.69525146 127.00067139]
[100.00167084 141.75685120]
[107.99560547 148.13114929]
[112.96891785 156.99676514]
[114.22693634 167.02449036]
[111.62818909 176.72996521]
[105.59885406 184.69337463]
[97.06352997 189.76712036]
[87.30366516 191.24111938]
[82.51414490 205.45591736]
[77.72462463 219.67071533]
[72.93509674 233.88551331]
[74.01746368 248.84640503]
[80.80317688 262.22378540]
[87.58889771 275.60116577]
[102.68681335 280.27322388]
[109.98499298 294.29150391]
[105.15354919 309.33920288]
[91.05889130 316.48873901]
[76.06313324 311.49847412]
[69.06298828 297.32904053]
[74.21152496 282.38687134]
[67.42581177 269.00949097]
[60.64009476 255.63212585]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 74]
[23 73]
[24 72]
[25 71]
[28 64]
[29 63]
[30 62]
[31 57]
[32 56]
[33 55]
[34 54]
[36 53]
[37 52]
[39 50]
[40 49]
[41 48]
[42 47]
[75 86]
[76 85]
[77 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
