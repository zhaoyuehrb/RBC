%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 19:24:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAAAGCUCUGUGGGUGGGCCAGGUUGGCAGAGUGCUCAGAUGGCCGCCUUUGAGAGUUUUACGUGAAUGUGUUGUAUACAACACUGGCAAAGAAAUGAUUAAAAUCAUGAAAGAA\
) } def
/len { sequence length } bind def

/coor [
[72.53103638 103.49612427]
[57.74257278 109.11856842]
[46.29234695 99.59272766]
[31.45562363 97.38554382]
[16.61890221 95.17836761]
[1.78217864 92.97118378]
[-13.05454445 90.76399994]
[-27.89126778 88.55681610]
[-42.72798920 86.34963989]
[-57.56471252 84.14245605]
[-71.35478973 94.80364227]
[-88.26611328 92.30701447]
[-97.99675751 78.66277313]
[-112.88739014 76.85472107]
[-127.77802277 75.04666901]
[-142.66865540 73.23862457]
[-157.55929565 71.43057251]
[-172.44992065 69.62252045]
[-181.47988892 71.71157074]
[-187.71406555 67.56081390]
[-202.55079651 65.35363007]
[-217.38751221 63.14645004]
[-228.27745056 70.21608734]
[-240.65930176 67.98714447]
[-247.91929626 58.20944977]
[-262.69140625 55.60472488]
[-277.46353149 53.00000381]
[-292.26928711 50.59383392]
[-307.10601807 48.38665009]
[-321.94274902 46.17947006]
[-338.49914551 49.82933807]
[-346.58966064 34.93033981]
[-334.51257324 23.03156662]
[-319.73556519 31.34274673]
[-304.89883423 33.54993057]
[-290.06210327 35.75711060]
[-282.88964844 33.60079575]
[-274.85882568 38.22788620]
[-260.08670044 40.83261108]
[-245.31457520 43.43733215]
[-229.24697876 36.52087402]
[-215.18032837 48.30972672]
[-200.34361267 50.51691055]
[-185.50689697 52.72409058]
[-170.64187622 54.73188782]
[-155.75123596 56.53993988]
[-140.86061096 58.34798813]
[-125.96997070 60.15604019]
[-111.07933807 61.96408844]
[-96.18870544 63.77214050]
[-87.19172668 54.44260788]
[-74.26372528 52.00217438]
[-62.12958527 57.57272339]
[-55.35753250 69.30573273]
[-40.52080917 71.51291656]
[-25.68408585 73.72009277]
[-10.84736252 75.92727661]
[3.98936081 78.13446045]
[18.82608414 80.34164429]
[33.66280746 82.54882050]
[48.49953079 84.75600433]
[62.22677231 78.97568512]
[74.73822021 88.65940094]
[96.28067017 67.11547852]
[130.71246338 76.78734589]
[143.49679565 68.94128418]
[144.82614136 53.59400177]
[154.82073975 42.10655212]
[169.48960876 38.74672318]
[183.16044617 44.59872437]
[195.94479370 36.75266266]
[208.72912598 28.90659904]
[221.51347351 21.06053734]
[234.29780579 13.21447468]
[247.08213806 5.36841249]
[254.41752625 -9.29870319]
[270.80126953 -10.00940895]
[279.37918091 3.96740794]
[271.32705688 18.25359726]
[254.92820740 18.15275192]
[242.14387512 25.99881363]
[229.35952759 33.84487534]
[216.57519531 41.69093704]
[203.79084778 49.53699875]
[191.00651550 57.38306046]
[190.03416443 72.22194672]
[180.39653015 83.77962494]
[165.62864685 87.48950195]
[151.34286499 81.72561646]
[138.55851746 89.57168579]
[137.65449524 97.01699829]
[152.37504578 94.13512421]
[159.66476440 107.24466705]
[149.44946289 118.22864532]
[135.84645081 111.90763092]
[134.94242859 119.35295105]
[145.47758484 130.03051758]
[156.01274109 140.70806885]
[166.54791260 151.38563538]
[177.08306885 162.06320190]
[193.02952576 165.88978577]
[197.42877197 181.68783569]
[185.75523376 193.20568848]
[170.01766968 188.59474182]
[166.40551758 172.59835815]
[155.87034607 161.92079163]
[145.33518982 151.24324036]
[134.80001831 140.56567383]
[124.26486206 129.88810730]
[116.07809448 133.65356445]
[107.50538635 135.30729675]
[99.06556702 134.88288879]
[91.23954010 132.53582764]
[84.44290161 128.52758789]
[79.00392151 123.20378113]
[75.14804077 116.96817017]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[3 61]
[4 60]
[5 59]
[6 58]
[7 57]
[8 56]
[9 55]
[10 54]
[13 50]
[14 49]
[15 48]
[16 47]
[17 46]
[18 45]
[20 44]
[21 43]
[22 42]
[25 40]
[26 39]
[27 38]
[28 36]
[29 35]
[30 34]
[65 90]
[66 89]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
[96 109]
[97 108]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
