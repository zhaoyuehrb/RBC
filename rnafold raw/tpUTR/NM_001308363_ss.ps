%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:54:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAUCGCCGACACGCCCCCCACUCAGCCCAGCCCGCCUGUCCCUAGAUUCAGCCACAUCAGAAAUAAACUGUGACUACACUUGGC\
) } def
/len { sequence length } bind def

/coor [
[102.44776917 127.80303192]
[90.24625397 126.15080261]
[79.94298553 119.40917969]
[73.54315948 108.89019775]
[72.29228973 96.64102936]
[58.43409348 90.90077972]
[44.57590103 85.16053009]
[30.39281082 94.17427826]
[13.79034805 93.05350494]
[1.19922805 82.42778015]
[-2.61933351 66.57029724]
[-16.67358017 61.32833481]
[-30.72782516 56.08637238]
[-44.78207016 50.84440994]
[-60.41604996 53.27120590]
[-69.63695526 41.57401657]
[-83.69120026 36.33205414]
[-92.90103149 48.31831360]
[-105.23567200 57.05604935]
[-119.59833527 61.76831055]
[-134.71189880 62.03608704]
[-149.23246765 57.83556747]
[-161.86889648 49.54026031]
[-171.49755859 37.88777542]
[-177.26226807 23.91424942]
[-178.65045166 8.86219311]
[-175.53865051 -5.92997122]
[-168.20358276 -19.14693642]
[-157.29747009 -29.61345673]
[-143.79006958 -36.39886093]
[-128.88246155 -38.89978790]
[-113.90021515 -36.89386368]
[-100.17554474 -30.55945206]
[-88.92883301 -20.45980263]
[-81.16013336 -7.49297094]
[-77.56023407 7.18804169]
[-78.44923401 22.27780914]
[-64.39498901 27.51977158]
[-49.76626587 24.71803665]
[-39.54010773 36.79016495]
[-25.48586273 42.03212738]
[-11.43161678 47.27408981]
[2.62262917 52.51605225]
[13.13103485 44.07977295]
[26.55226707 41.97798920]
[39.34019470 46.87586594]
[48.06123352 57.57450104]
[50.31615067 71.30233765]
[64.17434692 77.04258728]
[78.03253937 82.78283691]
[92.43387604 73.13452148]
[109.75374603 73.84919739]
[123.31124115 84.65118408]
[127.87674713 101.37376404]
[142.10913086 106.11075592]
[156.34152222 110.84775543]
[170.57391357 115.58474731]
[185.33557129 118.24804688]
[200.32601929 118.78343201]
[209.24353027 115.91340637]
[215.83921814 119.61495209]
[230.80101013 120.68504333]
[245.76278687 121.75512695]
[256.51272583 110.39850616]
[272.05337524 108.66011047]
[285.04693604 117.36077118]
[289.35821533 132.39230347]
[282.95159912 146.65725708]
[268.85208130 153.42018127]
[253.71699524 149.48782349]
[244.69270325 136.71691895]
[229.73091125 135.64682007]
[214.76913452 134.57673645]
[199.79063416 133.77386475]
[184.80018616 133.23847961]
[194.36131287 144.79638672]
[195.57525635 159.74717712]
[188.00398254 172.69615173]
[174.37947083 178.97091675]
[159.61785889 176.30731201]
[149.04560852 165.66647339]
[146.47752380 150.88793945]
[152.84025574 137.30427551]
[165.83691406 129.81713867]
[151.60452271 125.08013916]
[137.37213135 120.34314728]
[123.13974762 115.60615540]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 50]
[6 49]
[7 48]
[11 43]
[12 42]
[13 41]
[14 40]
[16 38]
[17 37]
[54 87]
[55 86]
[56 85]
[57 84]
[58 75]
[59 74]
[61 73]
[62 72]
[63 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
