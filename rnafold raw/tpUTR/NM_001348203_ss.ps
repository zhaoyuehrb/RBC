%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:54:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCACCGGAGCCACAGACACAGGCGUGAACGGUGACCGAGCCCCCUCUGAUGCUCCAUGCCCCUGCUCGCCCCAGUGUCCCGGUCACCGGGCCUGAAAUAAAUGCUGGCACGCUUGACUGUU\
) } def
/len { sequence length } bind def

/coor [
[70.25799561 193.99388123]
[61.55819321 181.77449036]
[56.56249237 167.63084412]
[55.65774155 152.65815735]
[58.91400909 138.01585388]
[66.07913208 124.83780670]
[76.59827423 114.14446259]
[89.65232849 106.76565552]
[74.69563293 105.62666321]
[59.73894119 104.48766327]
[44.78224945 103.34866333]
[29.82555389 102.20967102]
[17.89731407 112.22739410]
[2.74532533 110.85923004]
[-6.73153639 99.42573547]
[-21.68823051 98.28674316]
[-36.64492416 97.14774323]
[-51.60161591 96.00875092]
[-59.76779556 107.19287872]
[-72.30677032 112.80971527]
[-85.87251282 111.47843933]
[-96.90314484 103.65684509]
[-102.55615997 91.49256134]
[-117.47919464 89.97503662]
[-132.40223694 88.45751190]
[-146.91438293 94.75897217]
[-158.79357910 85.77377319]
[-173.71661377 84.25624847]
[-183.24682617 96.38796997]
[-197.83053589 101.41979980]
[-212.81410217 97.74610138]
[-223.41635132 86.53914642]
[-226.25413513 71.37503052]
[-220.42192078 57.09255981]
[-207.78076172 48.24922562]
[-192.36439514 47.66690445]
[-179.09213257 55.53141022]
[-172.19909668 69.33320618]
[-157.27604675 70.85073090]
[-143.83131409 64.44072723]
[-130.88471985 73.53446960]
[-115.96166992 75.05199432]
[-101.03863525 76.56951904]
[-90.54563141 64.01343536]
[-74.48517609 60.10668945]
[-59.09207916 66.56817627]
[-50.46261978 81.05205536]
[-35.50592804 82.19104767]
[-20.54923248 83.33004761]
[-5.59253979 84.46904755]
[5.50638580 74.60246277]
[20.69082642 75.54450226]
[30.96455002 87.25297546]
[45.92124557 88.39197540]
[60.87793732 89.53096771]
[75.83463287 90.66996765]
[90.79132843 91.80895996]
[97.93495941 87.89210510]
[105.93258667 89.29270935]
[119.71694946 83.37737274]
[133.50131226 77.46203613]
[147.28569031 71.54669189]
[150.78675842 61.09699631]
[159.32664490 54.48631668]
[169.87934875 53.74697495]
[178.87359619 58.88334656]
[192.93988037 53.67377090]
[193.29211426 36.90611267]
[199.99822998 21.57363701]
[212.01896667 9.98311329]
[227.51774597 3.86674929]
[244.14131165 4.12333488]
[259.37698364 10.68627834]
[270.93249512 22.53787613]
[284.71685791 16.62253761]
[298.50122070 10.70720005]
[305.24682617 4.37582970]
[312.71051025 4.82152081]
[319.61431885 -1.33693385]
[327.06433105 -0.70230991]
[341.13061523 -5.91188860]
[355.19689941 -11.12146759]
[369.26318359 -16.33104706]
[383.32946777 -21.54062462]
[396.08273315 -32.71160507]
[410.34759521 -23.54919052]
[405.49215698 -7.30538893]
[388.53903198 -7.47434330]
[374.47277832 -2.26476431]
[360.40649414 2.94481444]
[346.34020996 8.15439320]
[332.27392578 13.36397171]
[318.27474976 18.75131607]
[304.41656494 24.49156761]
[290.63220215 30.40690422]
[276.84783936 36.32224274]
[277.85897827 49.66115570]
[274.67437744 62.67733765]
[267.59481812 74.08160400]
[257.30755615 82.73987579]
[244.81968689 87.78595734]
[231.35946655 88.70817566]
[218.25559998 85.40123749]
[206.80606079 78.17802429]
[198.14945984 67.74005127]
[184.08317566 72.94963074]
[172.99734497 88.71019745]
[153.20101929 85.33106232]
[139.41665649 91.24639893]
[125.63228607 97.16173553]
[111.84792328 103.07707214]
[126.59152222 105.83863831]
[140.00328064 112.55613708]
[151.04463196 122.70938873]
[158.86059570 135.51216125]
[162.84590149 149.97303772]
[162.69195557 164.97225952]
[158.41069031 179.34829712]
[150.33361816 191.98796082]
[139.08619690 201.91244507]
[125.53939819 208.35327148]
[110.74222565 210.81164551]
[95.84052277 209.09722900]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 57]
[9 56]
[10 55]
[11 54]
[12 53]
[15 50]
[16 49]
[17 48]
[18 47]
[23 43]
[24 42]
[25 41]
[27 39]
[28 38]
[59 111]
[60 110]
[61 109]
[62 108]
[66 106]
[67 105]
[74 96]
[75 95]
[76 94]
[78 93]
[80 92]
[81 91]
[82 90]
[83 89]
[84 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
