%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 22:16:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGCCAGAGCCCAAGUGCCAUCCCACAUUCGGACCCUGCCCAUACCCCUGCCUGGGUUUUCUAACUGUAAAUCACUUGUAAAUAAAUAGAUUUGAUUAUUUCCUA\
) } def
/len { sequence length } bind def

/coor [
[130.80108643 390.73721313]
[121.53055573 378.90863037]
[114.12660980 365.83044434]
[108.75465393 351.79479980]
[105.53470612 337.11523438]
[104.53869629 322.11968994]
[105.78887939 307.14321899]
[109.25733185 292.52038574]
[114.86655426 278.57785034]
[122.49124146 265.62710571]
[131.96105957 253.95748901]
[143.06443787 243.82966614]
[155.55332947 235.46994019]
[149.15867615 221.90127563]
[142.76402283 208.33262634]
[136.36935425 194.76397705]
[129.97470093 181.19532776]
[123.58004761 167.62666321]
[109.00634003 171.05117798]
[94.03911591 171.37123108]
[79.33235168 168.57283020]
[65.52861786 162.77824402]
[53.23106003 154.24067688]
[42.97699356 143.33314514]
[35.21445465 130.53224182]
[30.28261375 116.39728546]
[28.39696121 101.54587555]
[29.63988686 86.62691498]
[33.95708466 72.29227448]
[41.15991592 59.16827774]
[50.93367386 47.82835388]
[62.85130310 38.76799011]
[56.45664597 25.19933510]
[50.06198502 11.63068199]
[43.66732788 -1.93797076]
[37.27267075 -15.50662422]
[30.87801170 -29.07527733]
[15.53585720 -39.12485123]
[17.48937225 -56.49650192]
[10.69914150 -69.87158203]
[-4.64161253 -70.61779022]
[-17.54529572 -78.94788361]
[-24.54088402 -92.62111664]
[-23.74659538 -107.95945740]
[-15.37609386 -120.83696747]
[-1.68099880 -127.78966522]
[13.65477657 -126.94730377]
[26.50598526 -118.53647614]
[33.41571808 -104.81965637]
[32.52529144 -89.48659515]
[24.07422256 -76.66181183]
[30.86445236 -63.28673172]
[42.34599304 -59.17549515]
[48.07448959 -47.95485306]
[44.44666672 -35.46993637]
[50.84132385 -21.90128136]
[57.23598099 -8.33262920]
[63.63063812 5.23602390]
[70.02529907 18.80467796]
[76.41995239 32.37332916]
[90.99365997 28.94881630]
[105.96088409 28.62876701]
[120.66764832 31.42716980]
[134.47137451 37.22174835]
[146.76893616 45.75932312]
[157.02301025 56.66685486]
[164.78555298 69.46775818]
[169.71739197 83.60271454]
[171.60304260 98.45412445]
[170.36010742 113.37308502]
[166.04292297 127.70772552]
[158.84008789 140.83172607]
[149.06632996 152.17164612]
[137.14869690 161.23200989]
[143.54335022 174.80065918]
[149.93801880 188.36932373]
[156.33267212 201.93797302]
[162.72732544 215.50662231]
[169.12199402 229.07527161]
[183.51893616 224.76420593]
[198.39764404 222.64714050]
[213.42568970 222.77136230]
[228.26734924 225.13412476]
[242.59106445 229.68263245]
[256.07684326 236.31526184]
[268.42337036 244.88385010]
[279.35485840 255.19696045]
[288.62707520 267.02420044]
[296.03289795 280.10134888]
[301.40686035 294.13623047]
[304.62887573 308.81533813]
[305.62704468 323.81072998]
[304.37896729 338.78735352]
[300.91259766 353.41070557]
[295.30535889 367.35403442]
[287.68252563 380.30587769]
[278.21438599 391.97683716]
[267.11242676 402.10623169]
[254.62472534 410.46774292]
[241.03024292 416.87457275]
[226.63267517 421.18362427]
[211.75367737 423.29855347]
[196.72564697 423.17218018]
[181.88432312 420.80731201]
[167.56124878 416.25677490]
[154.07643127 409.62222290]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 79]
[14 78]
[15 77]
[16 76]
[17 75]
[18 74]
[32 60]
[33 59]
[34 58]
[35 57]
[36 56]
[37 55]
[39 52]
[40 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
