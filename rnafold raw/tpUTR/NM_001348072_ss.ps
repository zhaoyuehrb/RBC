%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 03:12:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCACCGGAGCCACAGACACAGAGCCAUGAACGGUGACCAAGCCCCUUCUGCUGCUCCAUGCCCCUGCUCGCCGCAGUGUCCCAGUCACCAGGCCUGAAAUAAAUGCUGGCACGCUUGACUGUU\
) } def
/len { sequence length } bind def

/coor [
[104.80928040 164.24961853]
[89.86631775 163.62744141]
[75.46939087 159.57676697]
[62.39427185 152.31588745]
[51.34548950 142.23602295]
[42.91839981 129.88032532]
[37.56707764 115.91455078]
[35.57987976 101.09124756]
[20.65441895 99.59773254]
[5.72895670 98.10421753]
[-9.19650459 96.61069489]
[-24.12196732 95.11717987]
[-36.28451538 104.84909058]
[-51.39978027 103.12183380]
[-60.60271835 91.46672821]
[-75.52818298 89.97321320]
[-90.45364380 88.47969055]
[-105.37910461 86.98617554]
[-113.61952972 104.19964600]
[-127.68817902 117.04896545]
[-145.51835632 123.67787170]
[-164.50248718 123.14158630]
[-181.87350464 115.54141998]
[-195.10807800 102.00658417]
[-202.29325867 84.52652740]
[-217.27461243 85.27421570]
[-232.25596619 86.02190399]
[-242.67318726 97.90707397]
[-258.44860840 98.86169434]
[-270.22299194 88.31940460]
[-271.01077271 72.53476715]
[-260.34457397 60.87251282]
[-244.55249023 60.25166321]
[-233.00366211 71.04055023]
[-218.02230835 70.29286194]
[-203.04095459 69.54517365]
[-200.63623047 58.45365524]
[-195.76313782 48.19286346]
[-188.67393494 39.30461121]
[-179.73806763 32.25939178]
[-169.42289734 27.43145370]
[-158.26919556 25.07893753]
[-146.86289978 25.33006477]
[-135.80422974 28.17617035]
[-125.67616272 33.47191238]
[-117.01370239 40.94268417]
[-110.27558136 50.19885635]
[-105.82000732 60.75609970]
[-103.88558960 72.06071472]
[-88.96012878 73.55422974]
[-74.03466034 75.04775238]
[-59.10920334 76.54126740]
[-47.77931976 66.94078064]
[-32.62150192 68.24279785]
[-22.62844849 80.19171906]
[-7.70298719 81.68523407]
[7.22247410 83.17875671]
[22.14793587 84.67227173]
[37.07339859 86.16578674]
[42.19190216 71.55062866]
[50.64984894 58.57892609]
[61.95864105 48.00002289]
[75.46499634 40.42503738]
[90.38867950 36.29156113]
[105.86758423 35.83837509]
[121.00753784 39.09165955]
[127.51579285 25.57712555]
[134.02404785 12.06259251]
[140.53230286 -1.45194006]
[136.61213684 -17.00866699]
[146.44493103 -29.68524551]
[162.48782349 -29.75729179]
[172.43406677 -17.16953468]
[168.65376282 -1.57822633]
[154.04684448 5.05631590]
[147.53858948 18.57084846]
[141.03033447 32.08538055]
[134.52207947 45.59991455]
[145.69404602 54.57756805]
[154.60493469 65.80285645]
[160.81379700 78.72032928]
[164.01342773 92.69078064]
[164.04545593 107.02291870]
[160.90834045 121.00753784]
[174.42286682 127.51579285]
[187.93740845 134.02404785]
[201.45193481 140.53230286]
[214.96647644 147.04055786]
[228.48100281 153.54881287]
[242.10815430 146.36502075]
[257.17626953 148.55717468]
[267.93698120 159.07719421]
[270.41009521 173.74081421]
[284.00473022 180.08007812]
[297.67730713 186.24938965]
[311.34988403 192.41870117]
[322.68972778 182.25366211]
[337.18566895 177.58595276]
[352.32620239 179.22427368]
[365.48815918 186.88476562]
[374.39111328 199.24021912]
[377.49258423 214.14997864]
[374.25524902 229.03082275]
[365.23999023 241.30455017]
[352.00872803 248.84469604]
[336.85388184 250.34484863]
[322.40109253 245.54512024]
[311.15444946 235.27708435]
[305.06243896 221.31974792]
[305.18060303 206.09127808]
[291.50799561 199.92198181]
[277.83541870 193.75267029]
[270.36270142 193.87072754]
[263.90185547 187.25534058]
[250.89540100 194.46440125]
[235.96131897 192.61045837]
[224.85261536 182.19651794]
[221.97274780 167.06335449]
[208.45822144 160.55509949]
[194.94367981 154.04684448]
[181.42915344 147.53858948]
[167.91461182 141.03033447]
[154.40008545 134.52207947]
[144.97503662 146.13446045]
[133.12655640 155.26095581]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 59]
[9 58]
[10 57]
[11 56]
[12 55]
[15 52]
[16 51]
[17 50]
[18 49]
[25 36]
[26 35]
[27 34]
[66 78]
[67 77]
[68 76]
[69 75]
[84 123]
[85 122]
[86 121]
[87 120]
[88 119]
[89 118]
[93 114]
[94 112]
[95 111]
[96 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
