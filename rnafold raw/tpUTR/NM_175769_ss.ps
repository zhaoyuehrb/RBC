%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 09:48:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAUCACACUCGCCCUUUUCUCCUAGACUGUGACUCAUGCUUAUGGGCCUGGAUUUUCUACCAGCCCCCAGAUUCUCAGCCAUC\
) } def
/len { sequence length } bind def

/coor [
[38.86037064 156.68292236]
[31.01021004 146.81257629]
[24.73863411 135.87107849]
[20.18914223 124.10881805]
[5.49799585 127.13704681]
[-9.19315052 130.16528320]
[-23.88429642 133.19352722]
[-38.57544327 136.22175598]
[-50.52944183 146.58575439]
[-64.55667877 141.57717896]
[-79.24782562 144.60542297]
[-82.07562256 159.54101562]
[-90.40794373 172.25482178]
[-102.97418976 180.80805969]
[-117.85807800 183.89645386]
[-132.78994751 181.04901123]
[-145.49278259 172.69996643]
[-154.02947998 160.12248230]
[-157.09828186 145.23454285]
[-154.23121643 130.30644226]
[-145.86546326 117.61460114]
[-133.27676392 109.09444427]
[-118.38479614 106.04522705]
[-103.46047211 108.93193817]
[-90.77965546 117.31437683]
[-82.27606201 129.91427612]
[-67.58491516 126.88603973]
[-56.68172836 116.73863983]
[-41.60367966 121.53060913]
[-26.91253281 118.50237274]
[-12.22138691 115.47413635]
[2.46975970 112.44590759]
[17.16090584 109.41767120]
[17.06732178 91.44553375]
[20.82753563 73.87091827]
[28.26681328 57.51049805]
[39.03945923 43.12451935]
[52.64488220 31.38148499]
[68.45084381 22.82708549]
[85.72286987 17.85883141]
[103.65834045 16.70759583]
[121.42380524 19.42687416]
[138.19372559 25.89030457]
[153.18882751 35.79753876]
[165.71229553 48.68819427]
[178.31745911 40.55739212]
[190.92262268 32.42659378]
[203.52778625 24.29579163]
[209.21322632 16.83249664]
[216.75236511 16.10747337]
[229.64936829 8.44800472]
[242.54637146 0.78853709]
[243.84396362 -14.67418861]
[254.00794983 -26.39906693]
[269.13009644 -29.87764359]
[283.39559937 -23.77233505]
[291.31912231 -10.43075562]
[289.85385132 5.01698399]
[279.56326294 16.63091278]
[264.40426636 19.94523811]
[250.20584106 13.68553448]
[237.30883789 21.34500313]
[224.41183472 29.00447083]
[211.65858459 36.90095139]
[199.05342102 45.03175354]
[186.44825745 53.16255188]
[173.84309387 61.29335403]
[178.83651733 72.87414551]
[182.02603149 85.07560730]
[183.33868408 97.61856842]
[182.74443054 110.21601868]
[180.25686646 122.57970428]
[175.93290710 134.42674255]
[169.87150574 145.48605347]
[162.21134949 155.50456238]
[153.12770081 164.25306702]
[142.82841492 171.53135681]
[131.54914856 177.17291260]
[119.54800415 181.04864502]
[107.09957123 183.06987000]
[94.48869324 183.19033813]
[82.00391388 181.40730286]
[69.93091583 177.76155090]
[58.54594040 172.33650208]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 33]
[5 32]
[6 31]
[7 30]
[8 29]
[10 27]
[11 26]
[45 67]
[46 66]
[47 65]
[48 64]
[50 63]
[51 62]
[52 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
