%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 10:40:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUGUGGAUGGAUGGGUGGAUGGAGGGUGGCAGGUGGGGCGUCUGCAGGGCCACUCUUGGCAGAGACUUUGGGUUUGUAGGGGUCCUCAAGUGCCUUUGUGAUUAAAGAAUGUUGGUCUAUGA\
) } def
/len { sequence length } bind def

/coor [
[86.46381378 535.03302002]
[72.06664276 528.92932129]
[65.00727081 514.97583008]
[68.61890411 499.76104736]
[81.19625092 490.46887207]
[81.94992065 475.48782349]
[82.70358276 460.50677490]
[83.45724487 445.52569580]
[84.21091461 430.54464722]
[84.96457672 415.56359863]
[77.87652588 402.46365356]
[86.29743195 389.06967163]
[87.05109406 374.08859253]
[87.80476379 359.10754395]
[88.55842590 344.12649536]
[73.82765198 335.39407349]
[65.44691467 320.35928345]
[65.76933289 303.06118774]
[74.79615784 288.19824219]
[90.15229797 279.85220337]
[90.15229797 264.85220337]
[90.15229797 249.85220337]
[82.41499329 237.12493896]
[90.15229797 223.32476807]
[77.85186005 217.25453186]
[69.34489441 206.40992737]
[66.34955597 192.88821411]
[69.51096344 179.33618164]
[78.26331329 168.43203735]
[90.93012238 162.35610962]
[91.30707550 147.36085510]
[91.68402100 132.36558533]
[92.06097412 117.37032318]
[82.15236664 106.79839325]
[82.51648712 92.31344604]
[92.94376373 82.25272369]
[93.32071686 67.25746155]
[93.50920105 52.25864792]
[93.50920105 37.25864792]
[93.50920105 22.25864601]
[93.50920105 7.25864649]
[85.77190399 -6.54152584]
[93.50920105 -19.26879692]
[93.50920105 -34.26879883]
[93.50920105 -49.26879883]
[93.50920105 -64.26879883]
[93.50920105 -79.26879883]
[93.50920105 -94.26879883]
[93.50920105 -109.26879883]
[93.50920105 -124.26879883]
[85.77190399 -138.06896973]
[93.50920105 -150.79624939]
[93.50920105 -165.79624939]
[93.50920105 -180.79624939]
[82.59816742 -197.65811157]
[92.71504974 -214.05905151]
[91.96138763 -229.04011536]
[91.20772552 -244.02116394]
[90.45405579 -259.00222778]
[81.10170746 -272.47314453]
[88.33550262 -287.19061279]
[104.71393585 -288.01458740]
[113.38828278 -274.09741211]
[105.43511200 -259.75588989]
[106.18877411 -244.77482605]
[106.94244385 -229.79377747]
[107.69610596 -214.81271362]
[115.95869446 -208.57151794]
[119.43737030 -198.58416748]
[116.72945404 -188.13244629]
[108.50920105 -180.79624939]
[108.50920105 -165.79624939]
[108.50920105 -150.79624939]
[116.24650574 -138.06896973]
[108.50920105 -124.26879883]
[108.50920105 -109.26879883]
[108.50920105 -94.26879883]
[108.50920105 -79.26879883]
[108.50920105 -64.26879883]
[108.50920105 -49.26879883]
[108.50920105 -34.26879883]
[108.50920105 -19.26879692]
[116.24650574 -6.54152584]
[108.50920105 7.25864649]
[108.50920105 22.25864601]
[108.50920105 37.25864792]
[108.50920105 52.25864792]
[111.69099426 59.02300262]
[108.31597900 67.63441467]
[107.93902588 82.62967682]
[117.84763336 93.20160675]
[117.48351288 107.68655396]
[107.05623627 117.74727631]
[106.67928314 132.74253845]
[106.30233765 147.73780823]
[105.92538452 162.73306274]
[120.08409119 171.16908264]
[128.03979492 185.49629211]
[127.71926117 201.78750610]
[119.30330658 215.63088989]
[105.15229797 223.32476807]
[112.88959503 237.12493896]
[105.15229797 249.85220337]
[105.15229797 264.85220337]
[105.15229797 279.85220337]
[117.00588226 285.28082275]
[125.86482239 294.78204346]
[130.41874695 306.89804077]
[130.01412964 319.78823853]
[124.74781036 331.50903320]
[115.44698334 340.30679321]
[103.53948212 344.88015747]
[102.78581238 359.86120605]
[102.03215027 374.84228516]
[101.27848816 389.82333374]
[108.31262970 403.99481201]
[99.94563293 416.31726074]
[99.19197083 431.29830933]
[98.43830109 446.27935791]
[97.68463898 461.26043701]
[96.93097687 476.24148560]
[96.17730713 491.22253418]
[107.75857544 501.73007202]
[109.82499695 517.23052979]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 122]
[6 121]
[7 120]
[8 119]
[9 118]
[10 117]
[12 115]
[13 114]
[14 113]
[15 112]
[20 105]
[21 104]
[22 103]
[24 101]
[30 96]
[31 95]
[32 94]
[33 93]
[36 90]
[37 89]
[38 87]
[39 86]
[40 85]
[41 84]
[43 82]
[44 81]
[45 80]
[46 79]
[47 78]
[48 77]
[49 76]
[50 75]
[52 73]
[53 72]
[54 71]
[56 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
