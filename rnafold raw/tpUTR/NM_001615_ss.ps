%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 15:24:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCAGAACAGGUUCUCCAAGGAUCCCCUCGAGACUACUCUGUUACCAGUCAUGAAACAUUAAAACCUACAAGCCUUA\
) } def
/len { sequence length } bind def

/coor [
[191.57577515 236.92916870]
[185.45776367 223.20373535]
[181.40348816 208.73373413]
[179.49934387 193.82763672]
[179.78594971 178.80313110]
[182.25715637 163.98046875]
[186.86032104 149.67562866]
[173.40174866 143.05244446]
[159.94316101 136.42926025]
[146.48457336 129.80607605]
[133.02600098 123.18289948]
[119.43839264 116.82860565]
[105.72713470 110.74572754]
[91.78488159 105.21276855]
[77.63368225 100.23847961]
[63.48248291 95.26419067]
[49.33128357 90.28990173]
[37.20820236 95.18802643]
[25.41628647 90.55154419]
[20.21951485 79.44058990]
[6.27726412 73.90763092]
[-7.66498709 68.37467194]
[-23.80265808 71.29145050]
[-34.18952560 58.60110092]
[-28.14047241 43.35836792]
[-11.87824440 41.24366760]
[-2.13202810 54.43242264]
[11.81022263 59.96538162]
[25.75247383 65.49834442]
[42.81182098 61.91546249]
[54.30557251 76.13870239]
[68.45677185 81.11299133]
[82.60797119 86.08728027]
[96.75917053 91.06156921]
[102.16445160 89.83036041]
[107.83493042 91.87528229]
[111.81001282 97.03446960]
[125.52127075 103.11735535]
[134.91137695 103.78504944]
[139.64918518 109.72431183]
[153.10775757 116.34749603]
[166.56634521 122.97068024]
[180.02493286 129.59385681]
[193.48350525 136.21704102]
[202.00958252 123.84272003]
[212.24659729 112.84173584]
[223.97631836 103.44857788]
[236.94874573 95.86346436]
[250.88735962 90.24806213]
[265.49508667 86.72207642]
[280.46051025 85.36065674]
[295.46469116 86.19282532]
[310.18780518 89.20083618]
[324.31600952 94.32058716]
[337.54815674 101.44293976]
[349.60223389 110.41608429]
[360.22125244 121.04875183]
[369.17895508 133.11431885]
[376.28433228 146.35559082]
[381.38595581 160.49035645]
[384.37509155 175.21730042]
[385.18801880 190.22253418]
[383.80740356 205.18620300]
[380.26269531 219.78938293]
[374.62942505 233.72079468]
[367.02767944 246.68348694]
[357.61947632 258.40115356]
[346.60537720 268.62405396]
[334.22012329 277.13424683]
[320.72772217 283.75036621]
[306.41577148 288.33139038]
[291.58932495 290.77966309]
[276.56439209 291.04299927]
[261.66125488 289.11581421]
[247.19754028 285.03912354]
[233.48158264 278.89990234]
[220.80572510 270.82891846]
[209.44013977 260.99829102]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 44]
[8 43]
[9 42]
[10 41]
[11 40]
[12 38]
[13 37]
[14 34]
[15 33]
[16 32]
[17 31]
[20 29]
[21 28]
[22 27]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
