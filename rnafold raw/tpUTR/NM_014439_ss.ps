%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:56:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAACUGCCCCAUUGAACGCCUUCCUCGCUAAUUUGAACUAAUUGUAUAAAAACACCAAACCUGCUCACUAA\
) } def
/len { sequence length } bind def

/coor [
[59.34891129 251.74581909]
[46.79440308 260.02182007]
[33.02176285 266.05691528]
[18.42724991 269.67745972]
[3.43078208 270.77926636]
[-11.53616333 269.33062744]
[-26.04295921 265.37322998]
[-39.67221451 259.02096558]
[-52.03178787 250.45655823]
[-62.76607132 239.92645264]
[-71.56621552 227.73359680]
[-78.17902374 214.22883606]
[-82.41423798 199.80070496]
[-84.14999390 184.86433411]
[-83.33635712 169.84947205]
[-79.99672699 155.18812561]
[-74.22720337 141.30213928]
[-66.19378662 128.59103394]
[-56.12760925 117.42053986]
[-44.31829071 108.11204529]
[-31.10561943 100.93338013]
[-16.86974335 96.09107971]
[-2.02025771 93.72447968]
[13.01558685 93.90166473]
[27.80517960 96.61753845]
[41.92299271 101.79396057]
[54.96283340 109.28199005]
[66.54951477 118.86618805]
[77.92410278 109.08769989]
[76.78347015 94.43901825]
[84.43705750 81.89678192]
[97.98574829 76.21188354]
[112.29741669 79.53771210]
[123.67200470 69.75922394]
[135.04658508 59.98074341]
[146.42117310 50.20225525]
[140.18734741 36.44303513]
[138.08383179 21.48469925]
[140.28112793 6.53984833]
[146.60113525 -7.18000221]
[156.53149414 -18.56264687]
[169.26721191 -26.68534470]
[183.77584839 -30.88962364]
[198.88127136 -30.83466530]
[213.35893250 -26.52492332]
[226.03520203 -18.30976677]
[235.88247681 -6.85516500]
[242.10247803 6.91031027]
[244.19096375 21.87075424]
[241.97865295 36.81338882]
[235.64488220 50.52688217]
[225.70309448 61.89954758]
[212.95921326 70.00944519]
[198.44636536 74.19915009]
[183.34100342 74.12901306]
[168.86767578 69.80473328]
[156.19966125 61.57684326]
[144.82507324 71.35533142]
[133.45048523 81.13381195]
[122.07589722 90.91230011]
[123.21652985 105.56098175]
[115.56294250 118.10321808]
[102.01425171 123.78811646]
[87.70258331 120.46228790]
[76.32799530 130.24076843]
[84.06503296 143.13442993]
[89.51158905 157.15023804]
[92.51094055 171.88496399]
[92.97680664 186.91462708]
[90.89577484 201.80682373]
[86.32772064 216.13305664]
[79.40408325 229.48112488]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[28 65]
[29 64]
[33 60]
[34 59]
[35 58]
[36 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
