%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 17:54:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCCACGAGCUUCUCAACAACCAUGUUACUCCACUUCCCCACCCCCACCAGGCCUCCCUCCUCCCCUCCUACUCCCUUUUCUCACUCUCAUCCCCACCACAGAUCCCUGGAUUGCUGGGAAUGGAAGCCAGGUGGGGUCAUGGCACAAGUUCUGUAAUCUUCAAAAUAAAACUUUUUUUUUGUACAAU\
) } def
/len { sequence length } bind def

/coor [
[91.86870575 164.80349731]
[87.96656799 179.28704834]
[84.06442261 193.77059937]
[80.16228485 208.25415039]
[76.26013947 222.73770142]
[82.98419189 237.30364990]
[75.65996552 251.57723999]
[59.90598297 254.60899353]
[47.80735016 244.07321167]
[48.64510345 228.05204773]
[61.77658844 218.83557129]
[65.67872620 204.35202026]
[69.58087158 189.86845398]
[73.48300934 175.38490295]
[77.38515472 160.90135193]
[65.17066956 154.16418457]
[54.77844238 145.04367065]
[46.65804291 134.00419617]
[41.14556122 121.59118652]
[38.44991684 108.40435028]
[38.64532089 95.06867981]
[41.67022324 82.20487213]
[47.33257294 70.40044403]
[55.32116318 60.18289566]
[65.22230530 51.99617004]
[76.54103851 46.18146133]
[88.72571564 42.96318817]
[87.73954010 27.99563980]
[86.75336456 13.02809334]
[85.76718903 -1.93945360]
[84.78101349 -16.90699959]
[71.82056427 -25.23363495]
[66.31259918 -39.42926025]
[70.17401123 -53.97414017]
[81.72138214 -63.34410095]
[80.73520660 -78.31164551]
[79.74903107 -93.27919769]
[78.76285553 -108.24674225]
[65.40087128 -119.52468109]
[64.34187317 -136.63964844]
[75.75350952 -148.98287964]
[74.52129364 -163.93218994]
[73.28907013 -178.88148499]
[61.06673431 -194.89799500]
[70.03603363 -212.01692200]
[68.31278992 -226.91761780]
[66.58955383 -241.81829834]
[64.86631012 -256.71899414]
[63.14307022 -271.61965942]
[61.41983032 -286.52035522]
[59.69659042 -301.42105103]
[50.42511749 -314.24096680]
[56.64904785 -327.77285767]
[54.92580795 -342.67352295]
[53.20256424 -357.57421875]
[43.93109131 -370.39413452]
[50.15502167 -383.92602539]
[48.43178177 -398.82672119]
[46.70854187 -413.72738647]
[36.11560059 -419.16885376]
[29.53862762 -428.95251465]
[28.51961327 -440.57678223]
[33.19689560 -451.13613892]
[42.29942322 -458.04727173]
[41.06720352 -472.99658203]
[39.83498383 -487.94589233]
[38.60276794 -502.89517212]
[25.94240189 -506.74237061]
[15.37165642 -514.64807129]
[8.13858414 -525.65173340]
[5.08790684 -538.42871094]
[6.56241560 -551.44958496]
[12.36459351 -563.16357422]
[21.78275681 -572.18273926]
[33.67828751 -577.44683838]
[32.93842316 -592.42858887]
[32.19855499 -607.41027832]
[17.41779900 -614.80316162]
[8.42943192 -628.55969238]
[7.60476923 -644.87768555]
[15.07417583 -659.30358887]
[28.71726608 -667.94799805]
[27.73108864 -682.91552734]
[26.74491310 -697.88311768]
[12.07667732 -701.58416748]
[-0.72886813 -709.63854980]
[-10.41716480 -721.25720215]
[-16.03905296 -735.30175781]
[-17.04375648 -750.39630127]
[-13.33284378 -765.06207275]
[-5.26987505 -777.86218262]
[6.35522413 -787.54272461]
[20.40354538 -793.15521240]
[35.49877548 -794.14978027]
[50.16203690 -790.42901611]
[62.95677948 -782.35748291]
[72.62949371 -770.72589111]
[78.23255920 -756.67382812]
[79.21703339 -741.57794189]
[75.48646545 -726.91717529]
[67.40634918 -714.12786865]
[55.76828766 -704.46295166]
[41.71245956 -698.86926270]
[42.69863510 -683.90173340]
[43.68481064 -668.93420410]
[56.31460953 -663.71368408]
[65.50437927 -653.50939941]
[69.41619110 -640.27685547]
[67.23102570 -626.58532715]
[59.31946182 -615.11883545]
[47.18029785 -608.15014648]
[47.92016220 -593.16845703]
[48.66003036 -578.18670654]
[64.39770508 -572.07922363]
[75.92645264 -559.67224121]
[80.89651489 -543.42352295]
[78.26400757 -526.58093262]
[68.50968933 -512.53302002]
[53.55206680 -504.12741089]
[54.78428650 -489.17810059]
[56.01650620 -474.22879028]
[57.24872589 -459.27947998]
[71.89701843 -448.32080078]
[73.93543243 -429.81994629]
[61.60922623 -415.45065308]
[63.33246613 -400.54995728]
[65.05570984 -385.64926147]
[74.20392609 -373.89514160]
[68.10324860 -359.29745483]
[69.82649231 -344.39678955]
[71.54973602 -329.49609375]
[80.69794464 -317.74197388]
[74.59727478 -303.14428711]
[76.32051849 -288.24359131]
[78.04375458 -273.34289551]
[79.76699829 -258.44223022]
[81.49023438 -243.54153442]
[83.21347809 -228.64085388]
[84.93672180 -213.74015808]
[93.49865723 -208.12486267]
[97.63478851 -198.51861572]
[95.75305939 -188.00708008]
[88.23837280 -180.11370850]
[89.47059631 -165.16439819]
[90.70281219 -150.21510315]
[101.60791016 -143.33300781]
[106.62806702 -131.24411011]
[103.72096252 -118.28157806]
[93.73040771 -109.23291779]
[94.71658325 -94.26537323]
[95.70275879 -79.29782104]
[96.68893433 -64.33027649]
[109.36586761 -56.55639648]
[115.10227203 -42.64389420]
[111.50447083 -27.84831429]
[99.74856567 -17.89317703]
[100.73474121 -2.92562962]
[101.72091675 12.04191685]
[102.70709229 27.00946426]
[103.69326782 41.97701263]
[121.72547913 45.15266800]
[138.12808228 53.87137985]
[151.21769714 67.42428589]
[159.59449768 84.59835815]
[162.29072571 103.78406525]
[158.87985229 123.12600708]
[149.53404236 140.70231628]
[135.02308655 154.71553040]
[141.90977478 168.04121399]
[148.79646301 181.36688232]
[155.68313599 194.69255066]
[162.56982422 208.01823425]
[169.45651245 221.34390259]
[184.58934021 225.90167236]
[191.99331665 239.86436462]
[187.27580261 254.94815063]
[173.23561096 262.20410156]
[158.20254517 257.32736206]
[151.09545898 243.21125793]
[156.13084412 228.23059082]
[149.24415588 214.90490723]
[142.35746765 201.57923889]
[135.47077942 188.25357056]
[128.58410645 174.92788696]
[121.69741821 161.60221863]
[114.24023438 162.40254211]
[115.84087372 177.31689453]
[117.44128418 192.23127747]
[102.52688599 193.83145142]
[100.92652130 178.91752625]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[3 13]
[4 12]
[5 11]
[27 160]
[28 159]
[29 158]
[30 157]
[31 156]
[35 152]
[36 151]
[37 150]
[38 149]
[41 145]
[42 144]
[43 143]
[45 139]
[46 138]
[47 137]
[48 136]
[49 135]
[50 134]
[51 133]
[53 131]
[54 130]
[55 129]
[57 127]
[58 126]
[59 125]
[64 122]
[65 121]
[66 120]
[67 119]
[75 113]
[76 112]
[77 111]
[82 105]
[83 104]
[84 103]
[168 185]
[169 184]
[170 183]
[171 182]
[172 181]
[173 180]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
