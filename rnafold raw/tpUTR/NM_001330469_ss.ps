%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 01:07:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUGGCCCAGAGCUGUCAGGACCAUGAAGCCAGGACAGAGGCCAGGAGCCAGCCCUGCAGCCCUCCCCACCCGGCAUCCACCUGCAUCCCCUCUGGGGGCAGGAGCCCACCCCCAGCACCCCCAUCUGUUAAUAAAUAUCUCAACUCCAGGGUGUUCCACCUGAUGA\
) } def
/len { sequence length } bind def

/coor [
[77.05377197 108.09459686]
[64.11011505 115.67494965]
[51.16645432 123.25529480]
[38.22279358 130.83564758]
[25.27913475 138.41600037]
[12.33547688 145.99633789]
[-0.60818195 153.57669067]
[-13.48082542 161.27702332]
[-26.28134346 169.09666443]
[-25.42120934 186.61476135]
[-33.48890686 202.08827209]
[-48.19391251 211.31809998]
[-65.45858002 211.85073853]
[-80.54866791 203.62988281]
[-93.04968262 211.91990662]
[-105.55069733 220.20994568]
[-118.05171204 228.49996948]
[-130.55271912 236.79000854]
[-138.34619141 253.45298767]
[-155.87223816 253.90098572]
[-168.21699524 262.42196655]
[-173.52926636 269.90362549]
[-180.87135315 270.98406982]
[-183.76258850 286.52166748]
[-196.84082031 295.39495850]
[-212.34695435 292.33963013]
[-221.08149719 279.16830444]
[-217.86238098 263.69534302]
[-204.59945679 255.10054016]
[-189.16139221 258.48306274]
[-176.73796082 250.07719421]
[-164.39320374 241.55622864]
[-161.89288330 229.69502258]
[-151.64292908 222.49992371]
[-138.84275818 224.28898621]
[-126.34174347 215.99896240]
[-113.84072876 207.70892334]
[-101.33971405 199.41889954]
[-88.83869934 191.12886047]
[-90.97559357 178.63223267]
[-88.20362854 166.21299744]
[-80.90225983 155.73420715]
[-70.13311768 148.78161621]
[-57.48575211 146.42369080]
[-44.84306717 149.04760742]
[-34.10098267 156.29614258]
[-21.30046463 148.47650146]
[-17.21515083 142.28103638]
[-8.18853188 140.63304138]
[4.75512695 133.05268860]
[17.69878578 125.47233582]
[30.64244461 117.89199066]
[43.58610153 110.31163788]
[56.52976227 102.73128510]
[69.47341919 95.15093994]
[68.26811218 87.48443604]
[69.07541656 79.12203979]
[62.35266113 65.71292114]
[55.62990189 52.30379486]
[48.90714645 38.89467621]
[42.18438721 25.48555374]
[26.17486763 26.74884987]
[10.94028759 21.79166412]
[-1.20178032 11.39913464]
[-8.41612244 -2.81913233]
[-9.62723541 -18.67830467]
[-4.67956400 -33.75404739]
[5.64323139 -45.75311279]
[-1.32761621 -59.03495407]
[-15.46965790 -67.33764648]
[-15.07978058 -83.73215485]
[-0.55905670 -91.35321808]
[13.15483761 -82.36093903]
[11.95422459 -66.00579834]
[18.92507172 -52.72396088]
[32.86332321 -54.52474976]
[46.60686111 -51.44672775]
[58.49593353 -43.84066010]
[67.08759308 -32.60541534]
[71.33081055 -19.08176422]
[70.69503784 -4.89238691]
[65.23641205 8.25282001]
[55.59350967 18.76279640]
[62.31626511 32.17191696]
[69.03902435 45.58103943]
[75.76177979 58.99016190]
[82.48453522 72.39928436]
[89.89110565 73.57942200]
[84.52870941 59.57069016]
[93.97951508 47.92241669]
[108.79260254 50.28302383]
[114.15469360 64.29187775]
[104.70424652 75.93971252]
[112.11081696 77.11985779]
[122.66800690 66.46407318]
[133.22520447 55.80829620]
[143.78239441 45.15251541]
[154.33959961 34.49673843]
[164.89678955 23.84095764]
[175.45397949 13.18517876]
[176.18148804 0.28108028]
[185.22795105 -8.37874794]
[197.34886169 -8.53110886]
[208.10231018 -18.98880768]
[215.24192810 -34.36613083]
[231.99475098 -31.76239014]
[234.13040161 -14.94349194]
[218.56001282 -8.23536491]
[207.80656433 2.22233391]
[203.96789551 19.32869148]
[186.10975647 23.74237442]
[175.55256653 34.39815140]
[164.99537659 45.05393219]
[154.43817139 55.70971298]
[143.88098145 66.36549377]
[133.32379150 77.02127075]
[122.76659393 87.67704773]
[137.14006042 83.38711548]
[151.51351929 79.09717560]
[165.88697815 74.80723572]
[180.26045227 70.51730347]
[191.30229187 60.36457825]
[204.25579834 52.80107498]
[218.52462769 48.17499924]
[233.45185852 46.69932938]
[248.35028076 48.44199371]
[262.53399658 53.32277298]
[275.35003662 61.11695862]
[286.20834351 71.46572876]
[294.60906982 83.89264679]
[300.16540527 97.82559204]
[302.62158203 112.62313080]
[301.86450195 127.60401917]
[297.92904663 142.07855225]
[290.99639893 155.38035583]
[281.38568115 166.89706421]
[269.53939819 176.09843445]
[256.00289917 182.56088257]
[241.39938354 185.98689270]
[226.40116882 186.21871948]
[211.69874573 183.24569702]
[197.96899414 177.20469666]
[185.84397888 168.37382507]
[175.88192749 157.15966797]
[168.53996277 144.07495117]
[156.21151733 135.53041077]
[143.88305664 126.98585510]
[131.55461121 118.44130707]
[119.22616577 109.89675903]
[125.94892120 123.30587769]
[132.67167664 136.71499634]
[139.39443970 150.12411499]
[154.72570801 152.51821899]
[165.69796753 163.49043274]
[168.09214783 178.82168579]
[160.98765564 192.61682129]
[147.11630249 199.57131958]
[131.81190491 197.01104736]
[120.95932007 185.92045593]
[118.73158264 170.56413269]
[125.98531342 156.84687805]
[119.26255798 143.43775940]
[112.53980255 130.02864075]
[105.81703949 116.61951447]
[98.62622070 114.48828125]
[99.01653290 129.48320007]
[84.87611389 134.48806763]
[75.74659729 122.58631134]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 55]
[2 54]
[3 53]
[4 52]
[5 51]
[6 50]
[7 49]
[8 47]
[9 46]
[14 39]
[15 38]
[16 37]
[17 36]
[18 35]
[20 32]
[21 31]
[23 30]
[57 87]
[58 86]
[59 85]
[60 84]
[61 83]
[68 75]
[69 74]
[94 117]
[95 116]
[96 115]
[97 114]
[98 113]
[99 112]
[100 111]
[103 109]
[104 108]
[149 164]
[150 163]
[151 162]
[152 161]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
