%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 20:44:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCUGCUUGGACAAGUUUCUCUUAACUGCAGGGGAAUGAAGAUUUCUAGUCCUCGACAAGAAGCCUAACAGCAACUUCUACAUUAAGUUUCCAGAUAAGGCUUCUGAGAACUAUAAAUAAAGCAUCCUAAGCUGUUUCUUAA\
) } def
/len { sequence length } bind def

/coor [
[83.04376221 144.47782898]
[72.43716431 155.08442688]
[61.83056259 165.69104004]
[51.22396088 176.29763794]
[40.61735916 186.90423584]
[30.01075745 197.51083374]
[19.40415573 208.11744690]
[20.54787064 228.10533142]
[6.92077255 242.35740662]
[-12.49416447 242.11781311]
[-22.38435173 253.39541626]
[-32.27453995 264.67300415]
[-28.71874428 279.77719116]
[-34.75108719 294.07369995]
[-48.05200958 302.06527710]
[-63.50703430 300.67895508]
[-75.17338562 290.44784546]
[-78.56512451 275.30596924]
[-72.37804413 261.07574463]
[-58.99121094 253.22894287]
[-43.55213547 254.78282166]
[-33.66194916 243.50521851]
[-23.77176094 232.22763062]
[-27.21090508 222.41818237]
[-26.22043228 211.98907471]
[-20.91460419 202.86204529]
[-12.20908451 196.74737549]
[-1.66355574 194.82359314]
[8.79755402 197.51083374]
[19.40415573 186.90423584]
[30.01075745 176.29763794]
[40.61735916 165.69104004]
[51.22396088 155.08442688]
[61.83056259 144.47782898]
[72.43716431 133.87123108]
[63.87631226 122.56153870]
[59.57029343 109.41712952]
[59.77088547 95.93947601]
[64.22814941 83.59280396]
[72.24185944 73.64501953]
[82.76057434 67.03781128]
[94.51510620 64.29916382]
[106.16986084 65.50618744]
[111.91011810 51.64799500]
[117.65036774 37.78980255]
[123.39061737 23.93160820]
[121.52338409 8.22097492]
[133.54223633 -0.57655424]
[139.28248596 -14.43474770]
[145.02273560 -28.29294014]
[150.76298523 -42.15113449]
[148.89575195 -57.86176682]
[160.91459656 -66.65929413]
[166.65484619 -80.51748657]
[172.39509583 -94.37567902]
[171.63243103 -98.82666016]
[172.30427551 -102.86366272]
[174.09225464 -106.07558441]
[176.57476807 -108.20244598]
[179.28739929 -109.15627289]
[186.21363831 -122.46144104]
[193.13986206 -135.76660156]
[200.06610107 -149.07176208]
[206.99232483 -162.37692261]
[213.91854858 -175.68208313]
[220.84478760 -188.98725891]
[227.77101135 -202.29241943]
[216.75859070 -214.98675537]
[211.44738770 -230.89221191]
[212.61781311 -247.58345032]
[220.06414795 -262.52658081]
[232.63009644 -273.46380615]
[248.38818359 -278.75454712]
[264.93542480 -277.62152100]
[271.27471924 -291.21612549]
[277.61398315 -304.81072998]
[283.95324707 -318.40536499]
[290.29254150 -331.99996948]
[283.52026367 -346.09503174]
[287.44259644 -361.23269653]
[300.20751953 -370.26547241]
[315.78781128 -368.92831421]
[326.82696533 -357.85260010]
[328.11260986 -342.26797485]
[319.03771973 -329.53295898]
[303.88714600 -325.66070557]
[297.54788208 -312.06607056]
[291.20858765 -298.47146606]
[284.86932373 -284.87686157]
[278.53005981 -271.28222656]
[288.14489746 -262.03881836]
[294.43591309 -250.25241089]
[296.77224731 -237.07478333]
[294.91033936 -223.79870605]
[289.01916504 -211.73103333]
[279.66500854 -202.06411743]
[267.75714111 -195.75794983]
[254.45932007 -193.44487000]
[241.07617188 -195.36618042]
[234.14994812 -182.06101990]
[227.22370911 -168.75585938]
[220.29748535 -155.45069885]
[213.37126160 -142.14553833]
[206.44502258 -128.84037781]
[199.51879883 -115.53520966]
[192.59257507 -102.23004913]
[186.25329590 -88.63542938]
[180.51304626 -74.77723694]
[174.77279663 -60.91904449]
[177.05061340 -46.19964218]
[164.62118530 -36.41088104]
[158.88092041 -22.55268860]
[153.14067078 -8.69449615]
[147.40042114 5.16369724]
[149.67823792 19.88310051]
[137.24880981 29.67185974]
[131.50856018 43.53005219]
[125.76831055 57.38824463]
[120.02805328 71.24643707]
[136.03263855 88.19499969]
[138.60252380 113.18765259]
[124.50588226 136.14459229]
[134.14768982 147.63526917]
[143.78950500 159.12593079]
[159.42604065 158.94500732]
[171.48779297 168.89729309]
[174.27955627 184.28366089]
[166.48316956 197.83911133]
[151.77981567 203.16317749]
[137.11199951 197.74200439]
[129.40539551 184.13531494]
[132.29884338 168.76774597]
[122.65702820 157.27708435]
[113.01521301 145.78640747]
[105.52235413 145.45927429]
[108.47492218 160.16580200]
[116.90470886 172.57301331]
[114.80734253 187.42565918]
[103.27159882 197.01348877]
[88.28586578 196.35931396]
[77.62949371 185.80271912]
[76.83436584 170.82380676]
[86.31353760 159.19822693]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[3 33]
[4 32]
[5 31]
[6 30]
[7 29]
[10 23]
[11 22]
[12 21]
[43 119]
[44 118]
[45 117]
[46 116]
[48 114]
[49 113]
[50 112]
[51 111]
[53 109]
[54 108]
[55 107]
[60 106]
[61 105]
[62 104]
[63 103]
[64 102]
[65 101]
[66 100]
[67 99]
[74 90]
[75 89]
[76 88]
[77 87]
[78 86]
[122 134]
[123 133]
[124 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
