%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 14:56:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUAGGAAAGGUGGGCACAAAAAUCUUCAUGAGCAAUACUUCUUAGUAGAUUGUUUUGUUAUUCAAAUCAAGUUCUAGUGUUUUUAUGUGAGAUUAUAUAAUUUACAGUGUUGUUUUAUAUACUUUUGAAUAAAUGUACACUAUUAAAAAUAA\
) } def
/len { sequence length } bind def

/coor [
[90.95890808 388.12579346]
[78.87129974 379.08190918]
[69.67286682 367.11145020]
[64.04618835 353.10278320]
[62.40880203 338.09539795]
[64.88221741 323.20297241]
[71.28289032 309.53057861]
[81.13584900 298.09283447]
[93.70993042 289.73849487]
[108.07205963 285.08749390]
[107.46022797 270.09997559]
[106.84840393 255.11247253]
[106.23657227 240.12495422]
[97.98658752 227.72386169]
[105.15455627 213.61958313]
[104.54272461 198.63206482]
[103.93090057 183.64454651]
[102.40355682 168.72251892]
[99.96641541 153.92182922]
[97.52927399 139.12113953]
[95.09212494 124.32044983]
[92.65498352 109.51976776]
[86.00922394 96.07231903]
[75.73210144 85.14617157]
[65.45497131 74.22002411]
[55.17784500 63.29387665]
[44.90072250 52.36772919]
[34.51268387 41.54697800]
[24.01482010 30.83274078]
[13.51695538 20.11850548]
[3.01909065 9.40427113]
[-7.47877407 -1.30996418]
[-17.97663879 -12.02419949]
[-26.27074432 -15.99611759]
[-28.57658577 -23.06569290]
[-38.85371017 -33.99184036]
[-49.13083649 -44.91798782]
[-59.40796280 -55.84413147]
[-69.68508911 -66.77027893]
[-79.96221161 -77.69642639]
[-84.29807281 -78.82324982]
[-87.68094635 -81.07192230]
[-89.87120819 -83.99292755]
[-90.80451202 -87.10517120]
[-90.58644867 -89.95745087]
[-99.93879700 -101.68492126]
[-113.65895844 -100.04562378]
[-126.29122925 -105.37203217]
[-134.56353760 -116.16796112]
[-136.39105225 -129.53604126]
[-131.40071106 -141.95486450]
[-140.51188660 -153.87066650]
[-149.62306213 -165.78646851]
[-164.15187073 -172.04942322]
[-165.73614502 -186.85952759]
[-174.84732056 -198.77532959]
[-183.95851135 -210.69114685]
[-193.06968689 -222.60694885]
[-208.71780396 -226.14472961]
[-215.57832336 -240.64689636]
[-208.38842773 -254.98863220]
[-192.66360474 -258.16818237]
[-180.46658325 -247.74644470]
[-181.15386963 -231.71812439]
[-172.04269409 -219.80232239]
[-162.93151855 -207.88652039]
[-153.82034302 -195.97070312]
[-139.94323730 -190.56005859]
[-137.70726013 -174.89764404]
[-128.59608459 -162.98184204]
[-119.48490143 -151.06604004]
[-103.12363434 -152.00465393]
[-89.27627563 -142.93354797]
[-83.48625946 -127.24829865]
[-88.21132660 -111.03726959]
[-78.85897827 -99.30979919]
[-69.03606415 -87.97355652]
[-58.75894165 -77.04740906]
[-48.48181534 -66.12126160]
[-38.20468903 -55.19511032]
[-27.92756462 -44.26896667]
[-17.65043831 -33.34281921]
[-7.26240349 -22.52206421]
[3.23546124 -11.80782890]
[13.73332596 -1.09359372]
[24.23118973 9.62064171]
[34.72905731 20.33487701]
[45.22692108 31.04911232]
[52.19655991 33.64139175]
[55.82686615 42.09060287]
[66.10399628 53.01675034]
[76.38111877 63.94289780]
[86.65824127 74.86904907]
[96.93537140 85.79518890]
[111.41097260 89.72671509]
[125.80336761 85.50073242]
[140.19577026 81.27474213]
[154.58816528 77.04875183]
[168.98056030 72.82276154]
[183.37294006 68.59677887]
[197.76533508 64.37078857]
[205.37814331 50.78097534]
[220.03428650 46.70024872]
[232.94317627 54.04164505]
[247.33557129 49.81565475]
[254.68882751 35.82619095]
[269.80502319 31.21353340]
[283.71594238 38.71429062]
[288.16854858 53.87839508]
[280.52111816 67.70925140]
[265.31079102 72.00125885]
[251.56155396 64.20805359]
[237.16915894 68.43403625]
[230.27856445 81.58908844]
[215.74282837 86.07986450]
[201.99133301 78.76318359]
[187.59893799 82.98917389]
[173.20654297 87.21515656]
[158.81414795 91.44114685]
[144.42175293 95.66713715]
[130.02935791 99.89312744]
[115.63696289 104.11911011]
[111.55241394 106.44158936]
[107.45567322 107.08262634]
[109.89281464 121.88330841]
[112.32995605 136.68399048]
[114.76709747 151.48468018]
[117.20423889 166.28536987]
[127.10768890 155.01940918]
[142.06341553 153.86775208]
[153.57492065 163.48468018]
[155.10243225 178.40669250]
[145.77813721 190.15647888]
[130.89926147 192.05886841]
[118.91841888 183.03273010]
[119.53024292 198.02023315]
[120.14207458 213.00775146]
[128.43582153 226.48085022]
[121.22409058 239.51312256]
[121.83592224 254.50064087]
[122.44774628 269.48815918]
[123.05957794 284.47567749]
[137.75302124 287.94055176]
[150.96621704 295.24218750]
[161.71867371 305.83874512]
[169.21247864 318.94393921]
[172.89152527 333.58520508]
[172.48283386 348.67611694]
[168.01670837 363.09680176]
[159.82458496 375.77719116]
[148.51435852 385.77624512]
[134.92532349 392.35202026]
[120.06589508 395.01654053]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 142]
[11 141]
[12 140]
[13 139]
[15 137]
[16 136]
[17 135]
[18 128]
[19 127]
[20 126]
[21 125]
[22 124]
[23 94]
[24 93]
[25 92]
[26 91]
[27 90]
[28 88]
[29 87]
[30 86]
[31 85]
[32 84]
[33 83]
[35 82]
[36 81]
[37 80]
[38 79]
[39 78]
[40 77]
[45 76]
[46 75]
[51 71]
[52 70]
[53 69]
[55 67]
[56 66]
[57 65]
[58 64]
[95 122]
[96 121]
[97 120]
[98 119]
[99 118]
[100 117]
[101 116]
[104 113]
[105 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
