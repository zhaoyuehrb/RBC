%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 19:52:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAUUAUCUUCAGUUAUUCAGUGGUUUAUUAAAUGCAAAGUAUAUAUUUGAAAUAUUAACAUAAUAAAUUAUUAUGCCAAAAUUAAUCAUAUUUUACAA\
) } def
/len { sequence length } bind def

/coor [
[38.24310303 151.77426147]
[27.07514000 161.78808594]
[15.90717888 171.80189514]
[4.73921728 181.81571960]
[-6.42874432 191.82954407]
[-17.59670639 201.84336853]
[-12.51925659 216.17124939]
[-13.31633759 231.35127258]
[-19.86639786 245.06858826]
[-31.17060471 255.23144531]
[-45.50514221 260.29003906]
[-60.68410492 259.47299194]
[-74.39280701 252.90489197]
[-84.54077148 241.58732605]
[-89.58050537 227.24613953]
[-88.74349213 212.06826782]
[-82.15736389 198.36820984]
[-70.82646179 188.23515320]
[-56.47866058 183.21427917]
[-41.30190277 184.07125854]
[-27.61052704 190.67539978]
[-16.44256592 180.66159058]
[-5.27460480 170.64776611]
[5.89335680 160.63394165]
[17.06131935 150.62011719]
[28.22928047 140.60629272]
[25.58412361 132.46911621]
[25.54664803 123.87863922]
[28.14131165 115.65337372]
[33.14078140 108.58340454]
[40.08569717 103.35449982]
[48.32683945 100.48161316]
[57.08577347 100.25822449]
[65.52838135 102.72650146]
[72.84430695 107.67128754]
[85.67637634 99.90354156]
[92.58235168 87.74626923]
[106.55587769 87.26438141]
[119.38794708 79.49664307]
[132.22003174 71.72889709]
[145.05209351 63.96115112]
[157.88417053 56.19340897]
[170.71624756 48.42566299]
[183.54832458 40.65791702]
[184.11633301 28.57217407]
[190.45591736 18.40930367]
[200.84844971 12.70094681]
[212.58409119 12.80061817]
[222.66802979 18.56460953]
[235.95820618 11.60965729]
[249.24836731 4.65470409]
[262.53854370 -2.30024910]
[260.58386230 -15.78546238]
[262.92514038 -29.18561363]
[269.31503296 -41.16850662]
[279.10446167 -50.54738235]
[291.30850220 -56.39844894]
[304.70541382 -58.15185547]
[317.95898438 -55.64718246]
[329.75180054 -49.14797211]
[338.91625977 -39.31410980]
[352.61309814 -45.42936325]
[366.30996704 -51.54461670]
[380.00680542 -57.65987396]
[393.70364380 -63.77512741]
[407.40051270 -69.89038086]
[421.09735107 -76.00563812]
[433.09542847 -87.98403931]
[447.92712402 -79.77079773]
[444.14068604 -63.24508667]
[427.21261597 -62.30878448]
[413.51574707 -56.19353104]
[399.81890869 -50.07827759]
[386.12207031 -43.96302414]
[372.42520142 -37.84777069]
[358.72836304 -31.73251534]
[345.03152466 -25.61725998]
[345.91348267 -9.14337444]
[340.45883179 6.46469641]
[329.45947266 18.85742378]
[314.54409790 26.15821838]
[297.93719482 27.24756813]
[282.12716675 21.93461990]
[269.49349976 10.98992157]
[256.20333862 17.94487381]
[242.91314697 24.89982796]
[229.62298584 31.85478020]
[225.36466980 49.52427673]
[209.36006165 58.78323746]
[191.31607056 53.48999405]
[178.48399353 61.25773621]
[165.65191650 69.02548218]
[152.81983948 76.79322815]
[139.98776245 84.56097412]
[127.15569305 92.32871246]
[114.32362366 100.09645844]
[107.41764832 112.25373077]
[93.44412231 112.73561859]
[80.61205292 120.50335693]
[77.56782532 142.62843323]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 26]
[2 25]
[3 24]
[4 23]
[5 22]
[6 21]
[35 99]
[36 98]
[38 96]
[39 95]
[40 94]
[41 93]
[42 92]
[43 91]
[44 90]
[49 87]
[50 86]
[51 85]
[52 84]
[61 77]
[62 76]
[63 75]
[64 74]
[65 73]
[66 72]
[67 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
