%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 01:59:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUUCCAUUUCCUAAAUAAAAACUAAUAAAAUAUAGUACUUUCCAUUAUGAUUCAUUUAAUACCUUUAUAAAAAAUUUUUCUGUAAAAAUUUACUGCUUGAAAAAUAAAUGUAGCUUUUCUCAUUUAUCAA\
) } def
/len { sequence length } bind def

/coor [
[148.00361633 262.92803955]
[143.13313293 248.74078369]
[138.26263428 234.55352783]
[133.39215088 220.36627197]
[128.52165222 206.17901611]
[117.07103729 196.65364075]
[119.90820312 181.08889771]
[115.03771210 166.90164185]
[110.16722107 152.71438599]
[105.29673004 138.52713013]
[100.42623901 124.33986664]
[97.89875793 139.12539673]
[100.28928375 153.93368530]
[95.17488098 168.03485107]
[83.84719849 177.86763000]
[69.16705322 180.94876099]
[54.84192657 176.50007629]
[44.48963928 165.64512634]
[40.72467041 151.12530518]
[44.49786377 136.60763550]
[54.85630035 125.75853729]
[69.18342590 121.31800079]
[81.30458069 112.48185730]
[66.43099213 114.42510986]
[51.55739975 116.36836243]
[36.68380737 118.31162262]
[29.38484192 132.00485229]
[15.41647911 138.76240540]
[0.14983705 135.98585510]
[-10.54474831 124.74282837]
[-12.55499077 109.35652161]
[-5.10791111 95.74327087]
[8.93293667 89.13764954]
[24.16856003 92.07965088]
[34.74055099 103.43802643]
[49.61414337 101.49477386]
[64.48773956 99.55151367]
[79.36132812 97.60826111]
[83.31400299 91.23437500]
[69.32954407 85.80896759]
[54.54746628 83.26140594]
[48.39681625 69.58041382]
[56.30260468 56.83292770]
[71.29175568 56.26250458]
[80.14334869 68.37115479]
[91.21933746 78.48661041]
[95.17201233 72.11272430]
[90.30152130 57.92546844]
[85.43102264 43.73820877]
[80.56053162 29.55095100]
[75.69004059 15.36369133]
[70.81954956 1.17643309]
[55.64569855 0.26942977]
[41.97616959 -6.37980938]
[31.89546394 -17.75732422]
[26.94081879 -32.12812424]
[27.86778259 -47.30076981]
[34.53499985 -60.96154404]
[45.92576218 -71.02727509]
[60.30307007 -75.96300507]
[75.47448730 -75.01608276]
[89.12647247 -68.33090973]
[99.17720795 -56.92691040]
[104.09402466 -42.54312134]
[103.12715149 -27.37296867]
[96.42401886 -13.72978497]
[85.00680542 -3.69405890]
[89.87730408 10.49319935]
[94.74779510 24.68045807]
[99.61828613 38.86771774]
[104.48877716 53.05497742]
[109.35926819 67.24223328]
[113.74208069 73.52157593]
[116.07744598 80.08398438]
[116.45655060 86.38417816]
[115.10143280 91.92980957]
[128.97651672 86.23050690]
[142.85159302 80.53119659]
[156.72666931 74.83188629]
[170.60176086 69.13257599]
[184.47683716 63.43326950]
[198.35191345 57.73396301]
[209.20445251 42.91250229]
[226.46995544 45.81770325]
[240.20655823 39.79227066]
[253.94316101 33.76684189]
[256.26638794 18.51540756]
[266.48345947 6.95623398]
[281.33419800 2.77780938]
[296.07977295 7.31345415]
[306.01489258 19.11585999]
[307.96932983 34.41892242]
[301.31939697 48.33949280]
[288.18710327 56.43556213]
[272.76290894 56.12370682]
[259.96859741 47.50344086]
[246.23197937 53.52887344]
[232.49539185 59.55430222]
[227.76890564 70.75407410]
[216.29499817 75.85916138]
[204.05122375 71.60903931]
[190.17614746 77.30834961]
[176.30107117 83.00765991]
[162.42597961 88.70697021]
[148.55090332 94.40628052]
[134.67582703 100.10558319]
[120.80073547 105.80489349]
[114.61349487 119.46937561]
[119.48398590 133.65663147]
[124.35447693 147.84388733]
[129.22497559 162.03114319]
[134.09545898 176.21841431]
[145.89443970 186.75854492]
[142.70890808 201.30851746]
[147.57940674 215.49578857]
[152.44989014 229.68304443]
[157.32038879 243.87030029]
[162.19087219 258.05755615]
[177.35826111 258.61859131]
[191.29722595 264.62442017]
[202.12260437 275.26281738]
[208.37039185 289.09500122]
[209.19560242 304.25030518]
[204.48663330 318.67910767]
[194.88035583 330.43002319]
[181.67591858 337.91381836]
[166.65911865 340.11837769]
[151.86085510 336.74557495]
[139.28247070 328.25152588]
[130.62509155 315.78500366]
[127.05955505 301.03198242]
[129.06806946 285.98770142]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 118]
[2 117]
[3 116]
[4 115]
[5 114]
[7 112]
[8 111]
[9 110]
[10 109]
[11 108]
[23 38]
[24 37]
[25 36]
[26 35]
[47 72]
[48 71]
[49 70]
[50 69]
[51 68]
[52 67]
[76 107]
[77 106]
[78 105]
[79 104]
[80 103]
[81 102]
[82 101]
[84 98]
[85 97]
[86 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
