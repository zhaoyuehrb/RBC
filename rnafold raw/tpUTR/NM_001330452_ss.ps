%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 11:51:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCUCCACCCAGCCCGCUCCUGACCCUUAUCUUCCCAGAGACCAGGCCAGGAAGGCCCGAGAUGGAGAGCACUAAAUUCACGGCUUUCAUGUUUUUAUUUAAUAAAUUAAAAAGUAUUUGAAGCCACAUUGAA\
) } def
/len { sequence length } bind def

/coor [
[227.01821899 120.51982880]
[212.10038757 118.95190430]
[197.18257141 117.38397217]
[182.26473999 115.81604767]
[167.34690857 114.24812317]
[152.42907715 112.68019104]
[137.51124573 111.11226654]
[122.59342194 109.54434204]
[107.65836334 108.15009308]
[92.69490051 107.10374451]
[80.94715118 117.33253479]
[65.77317810 116.23471069]
[56.09399033 104.97198486]
[41.11936569 104.09981537]
[26.14474297 103.22763824]
[18.36261749 110.99087524]
[7.79860115 113.09488678]
[-1.95579875 109.07363129]
[-7.72128105 100.50222015]
[-22.63910866 98.93429565]
[-37.55693817 97.36637115]
[-52.47476578 95.79844666]
[-67.39259338 94.23051453]
[-77.94499207 101.75088501]
[-90.38928986 100.08043671]
[-98.07553101 90.66564941]
[-112.95283508 88.75102234]
[-127.83013916 86.83639526]
[-140.26280212 96.22078705]
[-155.32322693 94.06715393]
[-164.19319153 82.15667725]
[-179.07049561 80.24205780]
[-193.94779968 78.32743073]
[-208.82510376 76.41280365]
[-223.74085999 83.22838593]
[-236.94248962 73.49960327]
[-234.84927368 57.23459244]
[-219.61454773 51.16540527]
[-206.91047668 61.53549957]
[-192.03317261 63.45012665]
[-177.15586853 65.36475372]
[-162.27856445 67.27937317]
[-150.68194580 58.00283432]
[-135.56697083 59.73260117]
[-125.91551208 71.95909119]
[-111.03820801 73.87371826]
[-96.16090393 75.78834534]
[-80.40930939 68.14097595]
[-65.82466888 79.31269073]
[-50.90683746 80.88061523]
[-35.98900986 82.44853973]
[-21.07118225 84.01647186]
[-6.15335417 85.58439636]
[10.79493237 76.38831329]
[27.01691628 88.25302124]
[41.99153900 89.12519073]
[56.96615982 89.99736023]
[67.88742065 79.93447876]
[83.08624268 80.60566711]
[93.56707001 92.12911987]
[101.23543549 89.39724731]
[108.87873840 93.19982147]
[117.77960968 90.76346588]
[124.16134644 94.62651062]
[139.07917786 96.19444275]
[153.99700928 97.76236725]
[168.91484070 99.33029175]
[183.83265686 100.89821625]
[198.75048828 102.46614838]
[213.66831970 104.03407288]
[228.58615112 105.60199738]
[233.51364136 92.52495575]
[241.44622803 81.03212738]
[251.91084290 71.80039215]
[264.28549194 65.37207794]
[277.83621216 62.12305069]
[291.76052856 62.24076080]
[305.23507690 65.71344757]
[317.46423340 72.33110046]
[327.72717285 81.69815826]
[335.42019653 93.25714874]
[340.09237671 106.32186890]
[341.47195435 120.11813354]
[356.30068970 122.37842560]
[371.12942505 124.63871002]
[385.95812988 126.89899445]
[400.78686523 129.15928650]
[415.61560059 131.41957092]
[432.55361938 124.30464172]
[445.85568237 135.69104004]
[460.73297119 137.60566711]
[475.61029053 139.52029419]
[490.50885010 141.26168823]
[505.42669678 142.82962036]
[520.34454346 144.39753723]
[535.26232910 145.96546936]
[550.18017578 147.53340149]
[565.09802246 149.10131836]
[574.06066895 136.62872314]
[588.06549072 130.32312012]
[603.34521484 131.88067627]
[615.78967285 140.88241577]
[622.05133057 154.90692139]
[620.44592285 170.18168640]
[611.40521240 182.59785461]
[597.36114502 188.81553650]
[582.09149170 187.16223145]
[569.70373535 178.08264160]
[563.53009033 164.01914978]
[548.61224365 162.45123291]
[533.69439697 160.88330078]
[518.77661133 159.31536865]
[503.85876465 157.74745178]
[488.94091797 156.17951965]
[481.89547729 158.63130188]
[473.69564819 154.39759827]
[458.81835938 152.48297119]
[443.94104004 150.56835938]
[434.12149048 157.73023987]
[421.65972900 156.19541931]
[413.35531616 146.24829102]
[398.52658081 143.98800659]
[383.69784546 141.72772217]
[368.86914062 139.46743774]
[354.04040527 137.20715332]
[339.21166992 134.94686890]
[332.62164307 149.63182068]
[322.18139648 161.90066528]
[308.71691895 170.77073669]
[293.29684448 175.52877808]
[277.14758301 175.78825378]
[261.55587769 171.52072144]
[247.76609802 163.05877686]
[236.88114929 151.07006836]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[2 70]
[3 69]
[4 68]
[5 67]
[6 66]
[7 65]
[8 64]
[9 62]
[10 60]
[13 57]
[14 56]
[15 55]
[19 53]
[20 52]
[21 51]
[22 50]
[23 49]
[26 47]
[27 46]
[28 45]
[31 42]
[32 41]
[33 40]
[34 39]
[83 126]
[84 125]
[85 124]
[86 123]
[87 122]
[88 121]
[90 118]
[91 117]
[92 116]
[93 114]
[94 113]
[95 112]
[96 111]
[97 110]
[98 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
