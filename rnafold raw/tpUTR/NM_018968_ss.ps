%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 21:38:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUUGUUUCUGUUGAGUGCUGAAAAAUUAAAUUAUUUUCGUAAGAAAUGAUUCUUUCCUGCAGAAUAUUGCAACUUUGUGUUGUUUUAUGAUGAGCCUAUAGUUGUGAUACCAAUAAAACAUGUCACUAGUUUCCAA\
) } def
/len { sequence length } bind def

/coor [
[157.68377686 146.78483582]
[146.10881042 137.24440002]
[134.53384399 127.70394897]
[122.95887756 118.16350555]
[111.38391113 108.62305450]
[111.04141235 124.51382446]
[96.99661255 139.37586975]
[87.06930542 150.62081909]
[77.14199829 161.86575317]
[67.21469879 173.11068726]
[63.88182449 188.57685852]
[49.65829468 192.99731445]
[39.73098755 204.24226379]
[39.28837967 220.27920532]
[26.38804817 229.81655884]
[10.92602730 225.53807068]
[4.76345396 210.72583008]
[12.62772846 196.74253845]
[28.48605156 194.31495667]
[38.41335678 183.07000732]
[41.03615952 168.40815735]
[55.96975708 163.18338013]
[65.89706421 151.93844604]
[75.82436371 140.69351196]
[85.75167084 129.44857788]
[83.82418060 122.20048523]
[71.22874451 130.34634399]
[59.58938217 120.88455963]
[64.99133301 106.89102936]
[79.96918488 107.70430756]
[78.04169464 100.45622253]
[63.84001160 95.62794495]
[49.63833237 90.79966736]
[35.43665314 85.97138214]
[21.23497200 81.14310455]
[7.03329229 76.31482697]
[-7.16838789 71.48654938]
[-21.37006760 66.65826416]
[-35.57174683 61.82998657]
[-50.54109192 67.60045624]
[-64.31250000 59.37076569]
[-66.32173157 43.45402908]
[-55.02746964 32.06020355]
[-39.09371185 33.92965698]
[-30.74346924 47.62830734]
[-16.54178810 52.45658875]
[-2.34010816 57.28486633]
[11.86157227 62.11314774]
[26.06325150 66.94142914]
[40.26493073 71.76970673]
[54.46661377 76.59798431]
[68.66828918 81.42626190]
[82.86997223 86.25454712]
[72.72162628 75.20867920]
[61.11263657 65.70966339]
[57.99200058 51.03786850]
[64.73017120 37.63648224]
[78.36803436 31.39079475]
[92.91646576 35.04363251]
[101.98644257 46.99082947]
[101.59430695 61.98710632]
[103.32707977 76.88668823]
[108.94966888 62.98033905]
[103.02257538 48.57522583]
[108.92278290 34.55230713]
[122.69238281 28.99050331]
[128.31497192 15.08415699]
[133.93756104 1.17781103]
[128.01046753 -13.22730255]
[133.91067505 -27.25021935]
[147.68028259 -32.81202316]
[153.30287170 -46.71837234]
[158.92546082 -60.62471771]
[164.54804993 -74.53106689]
[170.17065430 -88.43740845]
[165.25476074 -103.70874023]
[174.24903870 -116.99341583]
[190.25384521 -118.10056305]
[200.99165344 -106.18087769]
[198.22534180 -90.37812805]
[184.07699585 -82.81481934]
[178.45440674 -68.90847015]
[172.83181763 -55.00212479]
[167.20921326 -41.09577942]
[161.58662415 -27.18943214]
[167.62127686 -13.62040424]
[162.11727905 0.56270450]
[147.84391785 6.80040216]
[142.22132874 20.70674896]
[136.59872437 34.61309433]
[142.63339233 48.18212509]
[137.12937927 62.36523438]
[122.85601807 68.60292816]
[117.23342896 82.50927734]
[120.92435455 97.04808807]
[132.49932861 106.58853149]
[144.07429504 116.12898254]
[155.64926147 125.66942596]
[167.22422791 135.20986938]
[183.32383728 125.83222198]
[201.74253845 123.24559021]
[219.73991394 127.81021881]
[234.64759827 138.82418823]
[244.26480103 154.63124084]
[247.18322754 172.86981201]
[242.99328613 190.82580566]
[255.57026672 199.00013733]
[268.14724731 207.17445374]
[280.72424316 215.34878540]
[293.30120850 223.52310181]
[305.87820435 231.69743347]
[319.19616699 224.15486145]
[334.49420166 223.67698669]
[348.25695801 230.37365723]
[357.32183838 242.70599365]
[359.60577393 257.84011841]
[354.58398438 272.29833984]
[343.41040039 282.75827026]
[328.65264893 286.81625366]
[313.70196533 283.53982544]
[301.99386597 273.68188477]
[296.21881104 259.50769043]
[297.70385742 244.27441406]
[285.12689209 236.10008240]
[272.54989624 227.92576599]
[259.97293091 219.75143433]
[247.39595032 211.57711792]
[234.81896973 203.40278625]
[226.01789856 211.09791565]
[215.60192871 216.43270874]
[204.19110107 219.08309937]
[192.46626282 218.88500977]
[181.12846375 215.84449768]
[170.85696411 210.13775635]
[162.26866150 202.10086060]
[155.88088989 192.21006775]
[152.08041382 181.05352783]
[151.09989929 169.29632568]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 99]
[2 98]
[3 97]
[4 96]
[5 95]
[7 25]
[8 24]
[9 23]
[10 22]
[12 20]
[13 19]
[31 53]
[32 52]
[33 51]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
[39 45]
[62 94]
[63 93]
[66 90]
[67 89]
[68 88]
[71 85]
[72 84]
[73 83]
[74 82]
[75 81]
[106 128]
[107 127]
[108 126]
[109 125]
[110 124]
[111 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
