%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 10:18:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUAAACCAAGACAAAUGAAGACUGAAACCAAGAAUAUUGUUCUUAUGCUGGAAAUUUGACUGCUAACAUUCUCUUAAUAAAGUUUUACAGUUUUCUGCAAAGA\
) } def
/len { sequence length } bind def

/coor [
[32.66178131 339.65148926]
[26.21080208 353.19345093]
[19.75982475 366.73541260]
[13.30884647 380.27740479]
[18.82733536 395.08691406]
[12.18169212 409.42605591]
[-2.68534327 414.78765869]
[-16.95342064 407.99078369]
[-22.15754318 393.06790161]
[-15.21019840 378.87246704]
[-0.23312126 373.82641602]
[6.21785688 360.28445435]
[12.66883469 346.74249268]
[19.11981201 333.20050049]
[7.04800081 318.06820679]
[4.06446218 298.86502075]
[11.03017807 280.64138794]
[26.17943001 268.22793579]
[45.56667709 264.95520020]
[49.94752884 250.60917664]
[54.32838058 236.26316833]
[58.70923233 221.91714478]
[63.09008026 207.57113647]
[67.47093201 193.22511292]
[71.85178375 178.87910461]
[76.23263550 164.53308105]
[80.18644714 150.06355286]
[83.70973206 135.48321533]
[87.23302460 120.90287018]
[90.75631714 106.32252502]
[74.54684448 109.28605652]
[57.22447586 104.28121185]
[46.15697861 94.15646362]
[35.08947754 84.03172302]
[24.02198029 73.90697479]
[12.95448112 63.78223038]
[1.88698184 53.65748596]
[-13.88083363 47.42752838]
[-12.25931358 30.55130386]
[4.40626431 27.43764877]
[12.01172638 42.58998489]
[23.07922554 52.71472931]
[34.14672470 62.83947372]
[45.21422577 72.96421814]
[56.28172302 83.08896637]
[67.34922028 93.21370697]
[74.52223206 91.02328491]
[88.86824799 86.64243317]
[96.04125214 84.45201111]
[99.56454468 69.87166595]
[95.28517914 54.64019775]
[105.79547119 44.08638000]
[95.06522369 33.00191116]
[92.05349731 17.87137985]
[97.72130585 3.52287960]
[110.26008606 -5.46503258]
[125.66875458 -6.22434711]
[139.03045654 1.48722982]
[146.08152771 15.20896244]
[144.57199097 30.56229591]
[134.98353577 42.64803696]
[120.37581635 47.60967255]
[124.90718842 61.79825592]
[114.14488983 73.39495087]
[110.62159729 87.97529602]
[119.35214233 75.77785492]
[131.35501099 66.78169250]
[145.51228333 61.82469559]
[160.50534058 61.36856079]
[174.93775940 65.45577240]
[187.46531677 73.70564270]
[196.92120361 85.34979248]
[202.42469788 99.30370331]
[203.46322632 114.26770782]
[199.94004822 128.84808350]
[192.18331909 141.68681335]
[180.91548157 151.58811951]
[167.18601990 157.62980652]
[152.27368164 159.24914551]
[137.56739807 156.29533386]
[124.43688202 149.04345703]
[114.10511017 138.16897583]
[107.53437042 124.68470764]
[105.33666229 109.84580994]
[101.81336975 124.42615509]
[98.29007721 139.00650024]
[94.76678467 153.58683777]
[96.32634735 160.28182983]
[94.44052124 165.85948181]
[90.57865143 168.91394043]
[86.19779968 183.25994873]
[81.81694794 197.60597229]
[77.43609619 211.95198059]
[73.05524445 226.29800415]
[68.67439270 240.64401245]
[64.29354095 254.99002075]
[59.91268921 269.33602905]
[68.74634552 275.97308350]
[75.30721283 284.83694458]
[79.05995941 295.18389893]
[79.70422363 306.15014648]
[77.19863129 316.82382202]
[71.76320648 326.32089233]
[63.86011124 333.85830688]
[54.15438080 338.81866455]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[4 11]
[19 97]
[20 96]
[21 95]
[22 94]
[23 93]
[24 92]
[25 91]
[26 90]
[27 87]
[28 86]
[29 85]
[30 84]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
[37 41]
[49 65]
[50 64]
[52 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
