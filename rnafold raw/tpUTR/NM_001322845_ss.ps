%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 07:43:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACCUACUACUGGUGGAUUCUUUUCCUUAUAGUGAAUUUAAAAGUAUCAUCAAGGGUUUAAUAUUGGGAAAAUUUCUUUUUGCCACAUUAUCUCUGUUUAUUCACUUUCAAUAAAGUUGAUCCAUAUAAAUAUUUUAAAGAGGAUGUUAGAG\
) } def
/len { sequence length } bind def

/coor [
[53.04340363 295.58731079]
[47.65836334 309.58737183]
[42.27331924 323.58740234]
[36.88827896 337.58746338]
[31.50324059 351.58749390]
[39.23298645 365.18106079]
[36.36570740 380.55352783]
[24.25524139 390.44650269]
[8.61978245 390.18878174]
[-3.15808582 379.90209961]
[-5.51721287 364.44351196]
[2.65630889 351.11206055]
[17.50319290 346.20245361]
[22.88823318 332.20242310]
[28.27327347 318.20236206]
[33.65831375 304.20233154]
[39.04335403 290.20227051]
[32.77857971 276.73794556]
[38.04034042 262.46319580]
[52.20544815 255.98341370]
[57.59048843 241.98336792]
[62.97552872 227.98330688]
[54.53164291 211.79020691]
[60.65248489 194.24717712]
[77.91757965 186.56291199]
[82.72709656 172.35487366]
[87.53661346 158.14682007]
[92.34613037 143.93878174]
[97.15564728 129.73072815]
[78.67517853 117.11614990]
[75.36456299 96.96150208]
[86.52197266 82.23403931]
[82.00328064 67.93084717]
[77.48458099 53.62765121]
[72.96588898 39.32445526]
[68.44719696 25.02125931]
[63.92850494 10.71806240]
[59.40981293 -3.58513331]
[50.98155594 -3.26392770]
[42.65061951 -4.53198051]
[34.71372604 -7.34128046]
[27.45303917 -11.58897114]
[21.12611198 -17.12111473]
[15.95676517 -23.73827171]
[12.12716389 -31.20268440]
[9.77140141 -39.24682236]
[8.97080421 -47.58297348]
[9.75112629 -55.91353226]
[12.08173370 -63.94162369]
[15.87679482 -71.38167572]
[20.99843788 -77.96959686]
[27.26176262 -83.47213745]
[34.44150543 -87.69512939]
[42.28015137 -90.49037933]
[41.05751038 -105.44046783]
[39.83486938 -120.39055634]
[38.61223221 -135.34065247]
[29.27907944 -144.30007935]
[28.59927940 -156.81748962]
[36.39221954 -166.11857605]
[35.47479248 -181.09049988]
[34.55736923 -196.06242371]
[33.63994217 -211.03433228]
[24.49149132 -220.18228149]
[24.06717110 -232.71096802]
[32.04821777 -241.85115051]
[31.43638802 -256.83865356]
[30.82455826 -271.82617188]
[22.53080750 -285.29928589]
[29.74254227 -298.33154297]
[29.13071251 -313.31906128]
[28.51888466 -328.30657959]
[27.90705681 -343.29409790]
[17.13152313 -355.17968750]
[19.84773827 -370.99114990]
[33.97205734 -378.59924316]
[48.66950607 -372.16772461]
[52.66546631 -356.63027954]
[42.89457321 -343.90594482]
[43.50640106 -328.91842651]
[44.11822891 -313.93090820]
[44.73006058 -298.94338989]
[52.98004913 -286.54229736]
[45.81207657 -272.43801880]
[46.42390442 -257.45050049]
[47.03573227 -242.46298218]
[57.21635818 -228.20039368]
[48.61186218 -211.95176697]
[49.52928543 -196.97984314]
[50.44671249 -182.00791931]
[51.36413574 -167.03601074]
[61.83358002 -152.98405457]
[53.56232071 -136.56329346]
[54.78496170 -121.61319733]
[56.00759888 -106.66310883]
[57.23023987 -91.71302032]
[78.41626740 -84.17575836]
[93.17575836 -67.12504578]
[97.62444305 -44.95077896]
[90.54358673 -23.40365982]
[73.71300507 -8.10382652]
[78.23170471 6.19936991]
[82.75039673 20.50256538]
[87.26908875 34.80576324]
[91.78778076 49.10895920]
[96.30647278 63.41215515]
[100.82516479 77.71534729]
[120.58018494 83.97534943]
[129.20648193 106.24404144]
[144.20336914 105.93806458]
[159.20024109 105.63208771]
[174.19711304 105.32611084]
[189.19400024 105.02013397]
[204.90649414 98.65195465]
[215.37545776 111.98751831]
[205.45915222 125.73899841]
[189.49996948 120.01701355]
[174.50309753 120.32299042]
[159.50622559 120.62896729]
[144.50933838 120.93494415]
[129.51246643 121.24092102]
[142.82015991 128.16229248]
[156.12785339 135.08364868]
[171.07502747 136.34132385]
[184.84785461 142.28349304]
[196.01860046 152.29421997]
[203.42929077 165.33573914]
[206.31175232 180.05618286]
[204.36715698 194.92961121]
[197.79710388 208.41419983]
[187.28263855 219.11215210]
[173.91371155 225.91448975]
[159.07615662 228.11605835]
[144.30805969 225.48867798]
[131.14028931 218.30468750]
[120.93783569 207.30877686]
[114.75830078 193.64080811]
[113.24226379 178.71762085]
[116.54559326 164.08932495]
[113.95464325 149.31478882]
[111.36368561 134.54025269]
[106.55416870 148.74829102]
[101.74465179 162.95634460]
[96.93513489 177.16438293]
[92.12561798 191.37242126]
[99.40457153 200.86262512]
[101.15242767 212.57286072]
[97.04619598 223.54968262]
[88.22468567 231.08151245]
[76.97557831 233.36834717]
[71.59053802 247.36840820]
[66.20549774 261.36843872]
[72.37696075 275.67056274]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 14]
[5 13]
[20 152]
[21 151]
[22 150]
[25 145]
[26 144]
[27 143]
[28 142]
[29 141]
[32 107]
[33 106]
[34 105]
[35 104]
[36 103]
[37 102]
[38 101]
[54 96]
[55 95]
[56 94]
[57 93]
[60 91]
[61 90]
[62 89]
[63 88]
[66 86]
[67 85]
[68 84]
[70 82]
[71 81]
[72 80]
[73 79]
[109 121]
[110 120]
[111 119]
[112 118]
[113 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
