%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 22:28:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCCCAGCGGAUGAGCCCAUCUGUGGAUCUAAUGCCUUAAGUGUGCACAGCCCAGAGAAAUAAAAUACUACUUUAAAACGAA\
) } def
/len { sequence length } bind def

/coor [
[94.09091949 335.42730713]
[86.11043549 348.12817383]
[78.12995911 360.82904053]
[70.14947510 373.52990723]
[62.16899490 386.23077393]
[62.09685135 402.62976074]
[47.72651672 410.53073120]
[33.84096146 401.80587769]
[34.72445297 385.43054199]
[49.46813202 378.25027466]
[57.44861221 365.54940796]
[65.42909241 352.84857178]
[73.40957642 340.14770508]
[81.39005280 327.44683838]
[65.91609192 310.80041504]
[56.40489960 290.13922119]
[53.81719971 267.52386475]
[58.42258072 245.21369934]
[69.77148438 225.44100952]
[86.73904419 210.18771362]
[107.63658142 200.98669434]
[105.40094757 186.15423584]
[103.16531372 171.32177734]
[93.61753082 159.88984680]
[99.21160126 145.09062195]
[96.97596741 130.25816345]
[94.74033356 115.42569733]
[85.70779419 107.83256531]
[84.16757202 96.13341522]
[90.92708588 86.46122742]
[89.24761963 71.55554199]
[79.57209778 62.78591537]
[78.60211945 50.16888809]
[86.31536102 40.65199661]
[85.19441223 25.69393730]
[84.07345581 10.73588085]
[82.67300415 -4.19860029]
[70.16200256 -13.85522079]
[68.22653961 -29.54055023]
[78.01489258 -41.94875717]
[93.71981049 -43.71827698]
[106.02383423 -33.79928207]
[107.62721252 -18.07653618]
[97.57868958 -5.87806702]
[101.55399323 0.57307220]
[99.03151703 9.61493015]
[100.15246582 24.57298660]
[101.27342224 39.53104401]
[111.95290375 53.32244492]
[104.15330505 69.87607574]
[105.83277130 84.78175354]
[116.15830231 97.87271881]
[109.57279968 113.19006348]
[111.80843353 128.02252197]
[114.04406738 142.85498047]
[123.75175476 155.34783936]
[117.99777222 169.08613586]
[120.23340607 183.91860962]
[122.46903992 198.75106812]
[132.58126831 199.01348877]
[142.55563354 200.68550110]
[152.19665527 203.73370361]
[161.31549072 208.09780884]
[169.73359680 213.69169617]
[177.28622437 220.40519714]
[183.82569885 228.10626221]
[189.22425842 236.64347839]
[193.37651062 245.84916687]
[196.20161438 255.54258728]
[197.64472961 265.53350830]
[197.67813110 275.62597656]
[196.30175781 285.62207031]
[193.54318237 295.32589722]
[189.45706177 304.54733276]
[184.12403870 313.10583496]
[177.64916992 320.83389282]
[170.15988159 327.58035278]
[161.80340576 333.21340942]
[152.74389648 337.62304688]
[143.15927124 340.72335815]
[133.23760986 342.45413208]
[123.17356110 342.78198242]
[113.16447449 341.70108032]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[4 11]
[5 10]
[21 59]
[22 58]
[23 57]
[25 55]
[26 54]
[27 53]
[30 51]
[31 50]
[34 48]
[35 47]
[36 46]
[37 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
