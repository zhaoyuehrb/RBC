%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 01:52:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUGUAGGAAGAGUUCUCCUGAGGCUGUCAACAUCCACACUAGGCAGGAAUAUGAGGUGUAAACUCACAAACACUUGGCUCCUAGAGA\
) } def
/len { sequence length } bind def

/coor [
[87.11633301 242.51414490]
[76.39908600 230.89878845]
[77.11761475 215.11085510]
[88.84561157 204.51701355]
[81.55720520 191.52746582]
[89.77140808 178.00572205]
[90.29489899 163.01486206]
[90.81838989 148.02400208]
[91.34188843 133.03314209]
[91.86537933 118.04227448]
[80.50936890 103.43672180]
[86.18513489 85.82801056]
[80.56604004 71.92025757]
[74.94693756 58.01249695]
[69.32783508 44.10474014]
[63.70874023 30.19698334]
[57.60768890 16.49380112]
[44.60385513 7.48209763]
[45.97882462 -7.34890795]
[39.40325546 -20.83081818]
[32.82769012 -34.31272888]
[19.82385254 -43.32443237]
[21.19882393 -58.15543747]
[2.02272677 -63.39455414]
[-7.29070234 -80.62094116]
[-1.35511100 -98.97169495]
[-9.30389977 -111.69242096]
[-17.25268936 -124.41313934]
[-25.20147705 -137.13386536]
[-33.15026855 -149.85458374]
[-48.22504425 -147.69334412]
[-62.87382126 -151.85667419]
[-74.55860901 -161.62322998]
[-81.25493622 -175.30090332]
[-81.80264282 -190.51997375]
[-76.10681915 -204.64363098]
[-65.15431213 -215.22485352]
[-50.84269714 -220.43040466]
[-35.65156174 -219.35836792]
[-22.21285439 -212.19450378]
[-12.85491371 -200.17997742]
[-9.19905949 -185.39637756]
[-11.87869072 -170.40507507]
[-20.42954636 -157.80337524]
[-12.48075676 -145.08264160]
[-4.53196764 -132.36192322]
[3.41682148 -119.64120483]
[11.36561012 -106.92048645]
[21.99548531 -107.37743378]
[31.88669014 -103.24002075]
[39.13537216 -95.22907257]
[42.31435394 -84.81799316]
[40.75375748 -73.96199799]
[34.68073273 -64.73100281]
[47.21424103 -56.68361664]
[46.30960083 -40.88829803]
[52.88516617 -27.40638542]
[59.46073532 -13.92447472]
[71.99423981 -5.87708807]
[71.08959961 9.91823387]
[75.43683624 12.34242821]
[78.18776703 17.63192368]
[77.61650085 24.57788467]
[83.23559570 38.48564148]
[88.85469818 52.39339828]
[94.47379303 66.30115509]
[100.09289551 80.20891571]
[114.23667145 86.25180817]
[119.78227234 100.59786224]
[133.48545837 106.69891357]
[147.18862915 112.79996490]
[163.43251038 110.54859924]
[173.28927612 123.65493774]
[166.61914062 138.63630676]
[150.28376770 140.08114624]
[141.08758545 126.50314331]
[127.38439941 120.40209198]
[113.68122101 114.30104065]
[111.60797119 116.02967834]
[109.31877899 117.46012115]
[106.85623932 118.56576538]
[106.33274841 133.55662537]
[105.80925751 148.54748535]
[105.28576660 163.53834534]
[104.76226807 178.52922058]
[112.01323700 192.59100342]
[103.83647919 205.04049683]
[114.79692078 216.42663574]
[114.41238403 232.22624207]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 87]
[6 85]
[7 84]
[8 83]
[9 82]
[10 81]
[12 67]
[13 66]
[14 65]
[15 64]
[16 63]
[17 60]
[19 58]
[20 57]
[21 56]
[23 54]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[69 78]
[70 77]
[71 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
