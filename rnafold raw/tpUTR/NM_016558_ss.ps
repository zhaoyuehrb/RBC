%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 20:53:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGUGGAGCUGCGGGCGGCCAGGGCCGGGCGCUCUGUGCGGACUGGGGCCAUGAUCGGGCCCGGGGGCCUGAGCCUGGGACCCCACCCCGUGUUAAUGAAAAAUGAGUUUUGGCAGCGCCUGUGGUC\
) } def
/len { sequence length } bind def

/coor [
[71.05928040 549.55084229]
[61.25930405 561.37695312]
[46.85366440 566.70355225]
[31.71740913 564.09796143]
[19.92211151 554.26092529]
[14.64064980 539.83868408]
[17.29371071 524.71069336]
[27.16763306 512.94628906]
[41.60638428 507.71005249]
[44.15112686 492.92745972]
[46.69586945 478.14489746]
[49.24061203 463.36233521]
[51.78535461 448.57977295]
[54.33009720 433.79721069]
[56.87483978 419.01464844]
[59.41958237 404.23208618]
[61.96432495 389.44949341]
[64.50906372 374.66693115]
[66.69308472 359.82678223]
[68.51508331 344.93786621]
[70.33708191 330.04891968]
[72.15907288 315.16000366]
[73.98107147 300.27105713]
[75.80307007 285.38211060]
[77.62506866 270.49319458]
[79.44706726 255.60426331]
[81.08763123 240.69424438]
[82.54653168 225.76535034]
[69.20845032 216.72824097]
[62.18057632 202.12669373]
[63.45273590 185.87805176]
[72.77381134 172.39428711]
[87.69445038 165.38400269]
[77.79521179 154.31419373]
[78.69251251 139.12704468]
[90.37066650 128.81886292]
[91.46559906 113.85888672]
[83.75426483 99.00967407]
[93.21218109 85.20709229]
[93.94249725 70.22487640]
[94.67280579 55.24266815]
[95.40312195 40.26045990]
[85.06353760 28.61010742]
[86.01760864 13.42641830]
[97.18815613 3.64099908]
[97.91847229 -11.34121132]
[98.64878082 -26.32342339]
[99.37909698 -41.30563354]
[100.10941315 -56.28784561]
[100.65724182 -71.27783966]
[101.02250671 -86.27339172]
[90.40229034 -97.66850281]
[90.98633575 -112.87092590]
[101.91528320 -122.92545319]
[92.71216583 -138.81944275]
[102.30939484 -153.45877075]
[102.30939484 -168.45877075]
[102.30939484 -183.45877075]
[102.30939484 -198.45877075]
[102.30939484 -213.45877075]
[102.30939484 -228.45877075]
[102.30939484 -243.45877075]
[93.64569092 -257.38256836]
[101.60982513 -271.71801758]
[118.00897217 -271.71801758]
[125.97309875 -257.38256836]
[117.30939484 -243.45877075]
[117.30939484 -228.45877075]
[117.30939484 -213.45877075]
[117.30939484 -198.45877075]
[117.30939484 -183.45877075]
[117.30939484 -168.45877075]
[117.30939484 -153.45877075]
[125.66965485 -144.62687683]
[125.73097229 -132.06356812]
[116.91083527 -122.56018829]
[127.33729553 -111.98548126]
[127.18048096 -96.77265167]
[116.01805878 -85.90812683]
[115.65279388 -70.91257477]
[118.66613770 -64.07857513]
[115.09162140 -55.55752945]
[114.36130524 -40.57531738]
[113.63099670 -25.59310913]
[112.90068054 -10.61089802]
[112.17036438 4.37131310]
[122.33622742 15.19678497]
[121.80901337 30.40128136]
[110.38533783 40.99077225]
[109.65502167 55.97298431]
[108.92470551 70.95519257]
[108.19438934 85.93740845]
[115.51421356 95.07924652]
[114.80162811 106.76877594]
[106.42558289 114.95381165]
[105.33065033 129.91380310]
[115.38347626 141.81246948]
[114.05995178 156.96842957]
[102.65443420 166.47892761]
[114.66101837 173.76434326]
[122.30188751 185.46873474]
[124.12330627 199.26029968]
[119.82416534 212.42083740]
[110.30398560 222.38151550]
[97.47541046 227.22425842]
[96.01651764 242.15313721]
[98.31226349 251.10383606]
[94.33599854 257.42623901]
[92.51399994 272.31518555]
[90.69200134 287.20413208]
[88.87000275 302.09304810]
[87.04801178 316.98199463]
[85.22601318 331.87091064]
[83.40401459 346.75985718]
[81.58201599 361.64877319]
[83.86930084 368.03073120]
[82.69129944 373.72409058]
[79.29163361 377.21166992]
[76.74689484 391.99426270]
[74.20214844 406.77682495]
[71.65740967 421.55938721]
[69.11266327 436.34194946]
[66.56791687 451.12451172]
[64.02317810 465.90707397]
[61.47843552 480.68963623]
[58.93369293 495.47222900]
[56.38895035 510.25479126]
[68.24568176 520.01763916]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 127]
[10 126]
[11 125]
[12 124]
[13 123]
[14 122]
[15 121]
[16 120]
[17 119]
[18 118]
[19 115]
[20 114]
[21 113]
[22 112]
[23 111]
[24 110]
[25 109]
[26 108]
[27 106]
[28 105]
[33 99]
[36 96]
[37 95]
[39 92]
[40 91]
[41 90]
[42 89]
[45 86]
[46 85]
[47 84]
[48 83]
[49 82]
[50 80]
[51 79]
[54 76]
[56 73]
[57 72]
[58 71]
[59 70]
[60 69]
[61 68]
[62 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
