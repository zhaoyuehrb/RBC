%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 06:39:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACGUCACGCAGGACAGAUACCGCUCCACACUCUGCUUCCUUUGAGUUUUUUAAUAAAAUAAUCUCAUGCGGCAGGAGAGGAGAGGAUCAGGGA\
) } def
/len { sequence length } bind def

/coor [
[47.67356110 278.10061646]
[41.76898956 280.43328857]
[35.48534393 281.06857300]
[29.29827118 279.97644043]
[20.48149300 292.11169434]
[11.66471481 304.24694824]
[14.38428593 319.81549072]
[5.23045826 332.69891357]
[-10.36596584 335.25372314]
[-23.15190506 325.96420288]
[-25.54168701 310.34164429]
[-16.11749649 297.65463257]
[-0.47054049 295.43014526]
[8.34623814 283.29489136]
[17.16301727 271.15963745]
[15.39788342 246.80307007]
[37.01150513 234.13160706]
[42.34841537 220.11314392]
[47.68532181 206.09466553]
[47.11152649 198.57514954]
[53.43740082 191.70578003]
[59.23488998 177.87142944]
[57.01793671 163.14274597]
[69.48772430 153.40544128]
[75.28520966 139.57109070]
[81.08270264 125.73674774]
[86.88018799 111.90240479]
[82.49381256 102.70744324]
[83.89757538 92.61699677]
[90.62718201 84.96846771]
[100.45682526 82.29158020]
[107.15596008 68.87064362]
[113.85508728 55.44970322]
[120.33140564 41.91983414]
[126.58312988 28.28473663]
[132.83485413 14.64963913]
[139.08659363 1.01454091]
[135.32548523 -11.45840645]
[140.96728516 -22.75174522]
[152.44184875 -26.95639229]
[149.09519958 -39.54687500]
[155.10731506 -50.64750290]
[166.71463013 -54.47046280]
[173.85383606 -67.66256714]
[180.99304199 -80.85467529]
[188.13226318 -94.04678345]
[177.86129761 -105.17270660]
[171.76171875 -119.03177643]
[170.49514771 -134.12066650]
[174.19897461 -148.80264282]
[182.47145081 -161.48510742]
[194.41520691 -170.79237366]
[208.73469543 -175.71485901]
[223.87664795 -175.71859741]
[238.19857788 -170.80319214]
[250.14694214 -161.50183105]
[258.42565918 -148.82345581]
[262.13674927 -134.14331055]
[260.87765503 -119.05380249]
[254.78491211 -105.19171906]
[244.51945496 -94.06071472]
[231.19479370 -86.86820984]
[216.25630188 -84.39437866]
[201.32435608 -86.90756989]
[194.18515015 -73.71546936]
[187.04594421 -60.52336121]
[179.90672302 -47.33125305]
[181.42066956 -29.93345642]
[165.86279297 -20.25726128]
[167.95112610 -2.91903138]
[152.72167969 7.26626873]
[146.46995544 20.90136719]
[140.21823120 34.53646469]
[133.96650696 48.17156219]
[134.04206848 55.71257019]
[127.27603149 62.14883423]
[120.57689667 75.56977844]
[113.87776184 88.99071503]
[116.10242462 107.38300323]
[100.71453094 117.69989014]
[94.91704559 131.53424072]
[89.11956024 145.36859131]
[83.32206726 159.20292664]
[85.12435150 174.92114258]
[73.06923676 183.66891479]
[67.27175140 197.50326538]
[61.70378876 211.43157959]
[56.36688232 225.45004272]
[51.02997208 239.46850586]
[55.43594360 244.35470581]
[58.33216858 250.22555542]
[59.51631927 256.63043213]
[58.91673279 263.08309937]
[56.59646988 269.09863281]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 15]
[5 14]
[6 13]
[17 89]
[18 88]
[19 87]
[21 86]
[22 85]
[24 83]
[25 82]
[26 81]
[27 80]
[31 78]
[32 77]
[33 76]
[34 74]
[35 73]
[36 72]
[37 71]
[40 69]
[43 67]
[44 66]
[45 65]
[46 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
