%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 10:31:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAUCGCCUCCACAAGGCGCGGCGUCUCGACUGUUCUUAGAGUGUAUUUCUAGUAAAAUCAGAAGCUCACCAAAGCAA\
) } def
/len { sequence length } bind def

/coor [
[98.73602295 222.52679443]
[86.23382568 214.23854065]
[76.99803925 202.41905212]
[71.97848511 188.28384399]
[71.69136810 173.28660583]
[76.16593170 158.97021484]
[63.37633133 166.80769348]
[50.58673096 174.64517212]
[37.79712677 182.48265076]
[25.00752640 190.32012939]
[19.87928009 205.52145386]
[4.74848080 210.85423279]
[-8.77781677 202.22760010]
[-10.32339478 186.25917053]
[1.29738164 175.19856262]
[17.17004776 177.53051758]
[29.95965004 169.69303894]
[42.74925232 161.85556030]
[55.53885269 154.01808167]
[68.32846069 146.18060303]
[70.99229431 140.19778442]
[76.92032623 136.12081909]
[82.66057587 122.26263428]
[88.40082550 108.40443420]
[86.76640320 94.51846313]
[97.74098206 85.85530853]
[103.48123169 71.99711609]
[109.22148132 58.13892365]
[109.65477753 48.74070358]
[115.46875763 43.85646057]
[121.74865723 30.23431396]
[112.26524353 19.56744003]
[107.62545013 6.11584663]
[108.51065063 -8.04214859]
[114.75129700 -20.73269844]
[125.35813141 -30.02020264]
[138.67887878 -34.50251770]
[152.65557861 -33.52256775]
[159.46542358 -46.88766479]
[166.27528381 -60.25276184]
[173.08514404 -73.61785889]
[179.89500427 -86.98295593]
[186.70486450 -100.34805298]
[183.13473511 -115.98883057]
[193.24949646 -128.44158936]
[209.28996277 -128.15364075]
[218.95126343 -115.34587860]
[214.82208252 -99.84332275]
[200.06996155 -93.53820038]
[193.26010132 -80.17310333]
[186.45024109 -66.80800629]
[179.64038086 -53.44290543]
[172.83052063 -40.07780838]
[166.02067566 -26.71270943]
[175.89411926 -14.30583668]
[179.44322205 1.20706475]
[175.92118835 16.78522301]
[165.97227478 29.35292244]
[151.51467896 36.40675354]
[135.37080383 36.51420975]
[129.09091187 50.13635635]
[123.07967377 63.87917709]
[117.33942413 77.73736572]
[111.59917450 91.59556580]
[113.23359680 105.48153687]
[102.25901794 114.14469147]
[96.51876831 128.00288391]
[90.77851868 141.86106873]
[104.21929169 135.20182800]
[119.07684326 133.13952637]
[133.82321167 135.88626099]
[146.94187927 143.15954590]
[157.08370972 154.21139526]
[163.20570374 167.90522766]
[164.67826843 182.83277893]
[161.34997559 197.45886230]
[153.56311035 210.27934265]
[142.11846924 219.97573853]
[128.19303894 225.55088806]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[22 68]
[23 67]
[24 66]
[26 64]
[27 63]
[28 62]
[30 61]
[31 60]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[43 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
