%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 12:43:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCGCAGCUCCUGCCACCCCUGCCUUAAGAUUUCCCAUUAAAUGCAUCUGUUUAGAAGCCCUGA\
) } def
/len { sequence length } bind def

/coor [
[88.33040619 198.56643677]
[69.96031189 194.59988403]
[52.66718674 187.24176025]
[37.07102585 176.75588989]
[23.73097992 163.51817322]
[11.51233959 172.21902466]
[-0.70629930 180.91987610]
[-12.92493820 189.62072754]
[-22.31989479 203.73353577]
[-38.48194504 198.61254883]
[-38.03519058 181.66448975]
[-21.62579155 177.40208435]
[-9.40715313 168.70123291]
[2.81148624 160.00038147]
[15.03012562 151.29953003]
[9.10395527 139.86766052]
[4.70762062 127.76479340]
[1.91511548 115.19462585]
[0.77343911 102.36872864]
[1.30180669 89.50296021]
[3.49132562 76.81386566]
[7.30514431 64.51499939]
[12.67907524 52.81337738]
[19.52267075 41.90593338]
[27.72074699 31.97624779]
[37.13533020 23.19144249]
[47.60796356 15.69937325]
[58.96238708 9.62613487]
[71.00749969 5.07394409]
[83.54057312 2.11941743]
[96.35066986 0.81228095]
[109.22218323 1.17453468]
[121.93848419 3.20008159]
[134.28555298 6.85483074]
[146.05555725 12.07727051]
[157.05043030 18.77950287]
[167.08511353 26.84872627]
[175.99070740 36.14913177]
[183.61734009 46.52418518]
[189.83662415 57.79927063]
[194.54391479 69.78462219]
[197.65997314 82.27851105]
[199.13235474 95.07066345]
[198.93626404 107.94578552]
[197.07502747 120.68717194]
[211.46742249 124.91316223]
[226.88844299 121.37723541]
[236.92031860 132.38681030]
[251.31271362 136.61279297]
[265.70510864 140.83877563]
[281.50573730 136.44880676]
[293.01675415 148.12908936]
[288.39657593 163.86396790]
[272.39807129 167.46672058]
[261.47912598 155.23117065]
[247.08673096 151.00518799]
[232.69433594 146.77920532]
[218.30276489 150.61740112]
[207.24143982 139.30555725]
[192.84904480 135.07957458]
[184.57232666 151.95231628]
[173.26353455 166.96249390]
[159.32812500 179.57194519]
[143.26570129 189.32861328]
[125.65212250 195.88269043]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 15]
[6 14]
[7 13]
[8 12]
[45 60]
[46 59]
[48 57]
[49 56]
[50 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
