%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 17:00:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCUGUACCUGGUGCCCUGUGGCCCCCACCCACCUGGAUUCCCUGUUCUUUGAAGUGGCACCUAAUAAAGAAAUAAUACCCUGCC\
) } def
/len { sequence length } bind def

/coor [
[143.99581909 109.89640045]
[129.01782227 109.08432007]
[114.03982544 108.27223206]
[104.78409576 115.57751465]
[93.02350616 114.72667694]
[84.91567993 106.16520691]
[69.97676086 104.81291199]
[60.91138840 107.19293213]
[54.52624130 103.13256836]
[39.64588165 101.24182129]
[24.98049736 107.17790222]
[13.33002377 97.89804077]
[-1.55033481 96.00730133]
[-16.43069458 94.11655426]
[-31.31105232 92.22580719]
[-38.22672653 99.22907257]
[-47.49980545 102.08350372]
[-56.88209152 100.23552704]
[-64.16378021 94.25531006]
[-67.69387817 85.67000580]
[-82.28258514 82.18149567]
[-96.87128448 78.69298553]
[-111.45999146 75.20447540]
[-128.27099609 77.40135956]
[-135.03578186 61.85548782]
[-121.97012329 51.05155182]
[-107.97148132 60.61576843]
[-93.38277435 64.10427856]
[-78.79406738 67.59279633]
[-64.20536804 71.08130646]
[-45.28477859 63.18080139]
[-29.42030716 77.34545135]
[-14.53994846 79.23619080]
[0.34041080 81.12693787]
[15.22076988 83.01768494]
[28.82181168 76.94636536]
[41.53662872 86.36145782]
[56.41698837 88.25220490]
[71.32905579 89.87399292]
[86.26797485 91.22628784]
[101.17585754 83.74687958]
[114.85190582 93.29423523]
[129.82991028 94.10631561]
[144.80790710 94.91839600]
[160.39826965 74.84416199]
[185.31062317 70.94915771]
[205.95060730 85.07823944]
[219.88525391 79.52616119]
[233.81990051 73.97409058]
[247.75454712 68.42201996]
[261.68920898 62.86994934]
[275.62384033 57.31787491]
[289.55850220 51.76580429]
[300.48248291 37.07677078]
[317.68450928 40.00241470]
[331.40963745 33.95088577]
[336.89224243 19.12804985]
[351.28509521 12.59950924]
[366.04913330 18.23853302]
[372.42514038 32.69958878]
[366.63034058 47.40318680]
[352.10266113 53.62594604]
[337.46115112 47.67601013]
[323.73602295 53.72753906]
[318.97552490 65.00531006]
[307.39855957 70.09233856]
[295.11056519 65.70045471]
[281.17593384 71.25252533]
[267.24127197 76.80459595]
[253.30662537 82.35667419]
[239.37197876 87.90874481]
[225.43731689 93.46081543]
[211.50267029 99.01288605]
[211.91525269 106.04800415]
[210.85853577 113.02709198]
[208.37377930 119.64614105]
[204.56452942 125.61583710]
[199.59231567 130.67417908]
[193.66986084 134.59802246]
[187.05194092 137.21287537]
[180.02438354 138.40072632]
[172.89184570 138.10523987]
[165.96449280 136.33454895]
[159.54452515 133.16099548]
[153.91305542 128.71826172]
[149.31777954 123.19568634]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[3 42]
[6 40]
[7 39]
[9 38]
[10 37]
[12 35]
[13 34]
[14 33]
[15 32]
[20 30]
[21 29]
[22 28]
[23 27]
[47 73]
[48 72]
[49 71]
[50 70]
[51 69]
[52 68]
[53 67]
[55 64]
[56 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
