%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:34:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCCUUUAGCAGAGCCCUUUUAGGAUUAGCCUGGCUAAGAAAGGAAGAAAAAAAAGAGAUCCGUUAGUGUCUGUUUAGAAAAGAUGUUAUAAACUUACAGAAACAAAUAUAAUAAACUGAAGCAGAUUUGAAAAGCAA\
) } def
/len { sequence length } bind def

/coor [
[152.94390869 320.02954102]
[148.95335388 305.57009888]
[144.96281433 291.11065674]
[134.11840820 280.90045166]
[137.90553284 265.53918457]
[133.91497803 251.07974243]
[129.92442322 236.62030029]
[125.93386841 222.16085815]
[121.94332123 207.70141602]
[117.95276642 193.24197388]
[97.68146515 194.92623901]
[77.51656342 192.25433350]
[58.38343048 185.34886169]
[41.16008377 174.52671814]
[26.63691330 160.28453064]
[15.48038387 143.27587891]
[8.20247173 124.28128815]
[-6.55647182 126.95964813]
[-21.31541634 129.63800049]
[-36.07435989 132.31634521]
[-50.83330154 134.99470520]
[-65.59224701 137.67306519]
[-68.93202209 140.73614502]
[-72.70321655 142.36010742]
[-76.38311768 142.59068298]
[-79.52124786 141.64416504]
[-81.79026031 139.86723328]
[-96.72987366 141.21182251]
[-111.66948700 142.55641174]
[-126.60910034 143.90100098]
[-141.54872131 145.24559021]
[-156.78208923 152.68739319]
[-168.15008545 140.10943604]
[-159.21066284 125.70378113]
[-142.89331055 130.30596924]
[-127.95368958 128.96138000]
[-113.01407623 127.61679077]
[-98.07446289 126.27220154]
[-83.13484955 124.92761230]
[-68.27059937 122.91411591]
[-53.51165771 120.23576355]
[-38.75271225 117.55741119]
[-23.99376869 114.87905121]
[-9.23482513 112.20069885]
[5.52411842 109.52234650]
[5.06014776 98.32913208]
[5.91769218 87.15917969]
[8.08481407 76.16796112]
[11.53134918 65.50847626]
[16.20932388 55.32909393]
[22.05362129 45.77150726]
[28.98289299 36.96875381]
[36.90068817 29.04336548]
[45.69679260 22.10565567]
[55.24877167 16.25219536]
[65.42366028 11.56446266]
[76.07984161 8.10770798]
[87.06897736 5.93004799]
[98.23810577 5.06179380]
[109.43175507 5.51503134]
[120.49411774 7.28345203]
[131.27122498 10.34243965]
[141.61303711 14.64941597]
[151.37562561 20.14442825]
[160.46247864 8.21006012]
[169.54933167 -3.72430778]
[167.62568665 -19.18190765]
[177.01106262 -31.15560722]
[191.75936890 -32.89424133]
[200.84622192 -44.82860947]
[209.93307495 -56.76297760]
[208.00942993 -72.22058105]
[217.39480591 -84.19428253]
[232.14311218 -85.93291473]
[241.22996521 -97.86727905]
[250.31681824 -109.80165100]
[259.40365601 -121.73601532]
[268.49050903 -133.67037964]
[261.51535034 -147.24645996]
[261.12994385 -162.50471497]
[267.41085815 -176.41560364]
[279.11099243 -186.21711731]
[293.90725708 -189.96316528]
[308.86187744 -186.90995789]
[321.00558472 -177.66371155]
[327.92724609 -164.06028748]
[328.25256348 -148.80062866]
[321.91693115 -134.91458130]
[310.17828369 -125.15921021]
[295.36737061 -121.47145844]
[280.42489624 -124.58353424]
[271.33804321 -112.64916992]
[262.25119019 -100.71479797]
[253.16433716 -88.78043365]
[244.07748413 -76.84606171]
[246.32510376 -62.16669464]
[237.27975464 -49.93410492]
[221.86744690 -47.67612839]
[212.78059387 -35.74176025]
[203.69374084 -23.80739212]
[205.94136047 -9.12802505]
[196.89601135 3.10456753]
[181.48370361 5.36254311]
[172.39685059 17.29691124]
[163.30999756 29.23127937]
[173.69979858 40.12757874]
[182.23674011 52.52910614]
[188.70619202 66.12408447]
[192.94552612 80.57072449]
[194.84814453 95.50583649]
[194.36621094 110.55392456]
[191.51185608 125.33668518]
[186.35682678 139.48246765]
[179.03074646 152.63563538]
[169.71775818 164.46549988]
[158.65203857 174.67466736]
[146.11177063 183.00645447]
[132.41221619 189.25141907]
[136.40275574 203.71086121]
[140.39331055 218.17030334]
[144.38386536 232.62974548]
[148.37442017 247.08918762]
[152.36497498 261.54864502]
[163.49479675 272.79309082]
[159.42225647 287.12011719]
[163.41279602 301.57955933]
[167.40335083 316.03900146]
[182.46841431 318.26699829]
[195.32131958 326.43539429]
[203.73526001 339.12890625]
[206.25244141 354.14834595]
[202.43675232 368.89151001]
[192.94929504 380.80401611]
[179.43382263 387.82199097]
[164.23196411 388.72949219]
[149.97755432 383.36932373]
[139.14022827 372.67016602]
[133.59764099 358.48565674]
[134.31007385 343.27343750]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 127]
[2 126]
[3 125]
[5 123]
[6 122]
[7 121]
[8 120]
[9 119]
[10 118]
[17 45]
[18 44]
[19 43]
[20 42]
[21 41]
[22 40]
[27 39]
[28 38]
[29 37]
[30 36]
[31 35]
[64 105]
[65 104]
[66 103]
[69 100]
[70 99]
[71 98]
[74 95]
[75 94]
[76 93]
[77 92]
[78 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
