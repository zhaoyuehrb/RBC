%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 10:11:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAAAUACAAUUUCGUUUUCACUUGCUUCUCAACCUAGUCUAAUAAACUAAGGUGAUGAGAUAUACAUCUUCUUCCUUUUGGUUUCUUGAUCCUUAAAAUGACCUUCGAGCAUAUUCUAAUAAAGUGCAUUGCCAGUU\
) } def
/len { sequence length } bind def

/coor [
[90.81205750 225.85745239]
[92.57483673 240.83554077]
[90.55652618 255.78135681]
[84.88397980 269.75537109]
[75.91379547 281.87918091]
[64.20983887 291.39065552]
[50.50783157 297.69189453]
[35.66909409 300.38684082]
[20.62639809 299.30603027]
[6.32534409 294.51742554]
[-6.33509350 286.32205200]
[-16.55906868 275.23507690]
[-23.70389175 261.95343018]
[-27.32043648 247.31199646]
[-27.18136215 232.23115540]
[-23.29541016 217.65892029]
[-15.90685558 204.51129150]
[-5.48014975 193.61474609]
[7.32927656 185.65426636]
[21.71621132 181.13021851]
[36.77627945 180.32702637]
[51.56279755 183.29515076]
[58.07105255 169.78062439]
[64.57930756 156.26608276]
[63.13039780 141.44212341]
[76.08913422 132.36569214]
[82.59738922 118.85115051]
[73.46557617 85.22695923]
[109.37677002 66.19261169]
[96.01167297 59.38275909]
[82.64657593 52.57289886]
[69.28147888 45.76304245]
[55.91638184 38.95318604]
[42.40184784 32.44493103]
[28.74468422 26.24155235]
[15.08752060 20.03817368]
[1.43035758 13.83479691]
[-12.29554653 7.78503942]
[-26.08846283 1.88966393]
[-39.88137817 -4.00571156]
[-53.74955368 3.21978307]
[-69.00639343 -0.20991288]
[-78.44808960 -12.67540169]
[-77.61655426 -28.29086113]
[-66.90442657 -39.68314743]
[-51.36962891 -41.47317505]
[-38.34722900 -32.81574249]
[-33.98600388 -17.79862785]
[-20.19308662 -11.90325260]
[-6.40017080 -6.00787735]
[1.04808319 -6.27360678]
[7.63373518 0.17763351]
[21.29089928 6.38101101]
[34.94806290 12.58438873]
[48.60522461 18.78776550]
[53.38259125 17.94460297]
[58.73228455 20.15232468]
[62.72623825 25.58808708]
[76.09133911 32.39794540]
[89.45643616 39.20780182]
[102.82153320 46.01765823]
[116.18663025 52.82751846]
[107.72247314 40.44373703]
[94.80458069 32.81955338]
[84.76382446 21.67580414]
[78.52239227 8.03598881]
[76.65353394 -6.84713459]
[79.32890320 -21.60662079]
[86.30276489 -34.88687897]
[96.93460846 -45.46817398]
[110.24795532 -52.37866592]
[125.02001953 -54.98365784]
[139.89407349 -53.04388809]
[153.50398254 -46.73752213]
[164.59974670 -36.64376831]
[172.16227722 -23.68968964]
[175.49699402 -9.06506157]
[174.29759216 5.88691044]
[168.67425537 19.79295540]
[159.14346313 31.37586784]
[146.58100891 39.57160568]
[138.68096924 52.32266235]
[151.72708130 44.92003632]
[164.77319336 37.51741409]
[177.81932068 30.11479187]
[182.12570190 15.14506149]
[195.46177673 7.82359600]
[209.70658875 12.02132988]
[222.75270081 4.61870623]
[224.35617065 -10.81529808]
[234.75032043 -22.33664513]
[249.93836975 -25.51514053]
[264.08020020 -19.12859154]
[271.73800659 -5.63275242]
[269.96719360 9.78294945]
[259.44866943 21.19086075]
[244.22705078 24.20441055]
[230.15531921 17.66482353]
[217.10920715 25.06744576]
[213.40658569 39.44890213]
[200.28143311 47.14205933]
[185.22193909 43.16090775]
[172.17582703 50.56352997]
[159.12969971 57.96615601]
[146.08358765 65.36877441]
[145.49514771 72.84565735]
[160.08073425 69.34416199]
[167.91789246 82.13395691]
[158.17575073 93.53968048]
[144.31825256 87.79941559]
[143.72981262 95.27629852]
[155.45729065 104.62864685]
[167.18475342 113.98099518]
[178.91223145 123.33333588]
[192.89721680 117.11412048]
[208.16976929 118.11800385]
[221.22036743 126.11428833]
[229.05006409 139.26550293]
[229.85966492 154.54957581]
[223.46313477 168.45436096]
[211.33033752 177.78462219]
[196.24931335 180.39634705]
[181.68556213 175.68937683]
[170.98571777 164.74533081]
[166.60855103 150.07907104]
[169.55989075 135.06080627]
[157.83241272 125.70846558]
[146.10493469 116.35611725]
[134.37747192 107.00376892]
[127.34828186 117.97517395]
[117.36894226 124.91261292]
[106.34134674 127.28552246]
[96.11192322 125.35941315]
[89.60366821 138.87394714]
[90.58706665 154.66455078]
[78.09384155 162.77433777]
[71.58558655 176.28887939]
[65.07733154 189.80340576]
[76.61714935 199.51338196]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 138]
[23 137]
[24 136]
[26 134]
[27 133]
[29 62]
[30 61]
[31 60]
[32 59]
[33 58]
[34 55]
[35 54]
[36 53]
[37 52]
[38 50]
[39 49]
[40 48]
[82 105]
[83 104]
[84 103]
[85 102]
[88 99]
[89 98]
[111 129]
[112 128]
[113 127]
[114 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
