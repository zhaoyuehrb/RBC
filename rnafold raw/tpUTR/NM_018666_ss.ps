%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 22:59:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGUGUUAGUGCAAAGACCAAGGAGAAACAAGGACAUAUGCUGUAGGAUGGAACAGGUUAUUGCUGAAGCUCCCUAUAAUCCUGAAAUGAAGAGAAUUCCCUUCCAGAAGCUACGAAAAAGGGAGCUGUUUAAAUUUAAUAAAUCUCUGUUAGUAAAAGCUGCA\
) } def
/len { sequence length } bind def

/coor [
[87.55715942 117.13549805]
[75.01612854 125.36487579]
[62.47510147 133.59425354]
[49.93407059 141.82362366]
[42.64105606 155.86364746]
[27.75530815 156.37724304]
[15.21428013 164.60661316]
[2.67325091 172.83598328]
[-0.65778196 188.05249023]
[-13.49339962 196.21958923]
[-27.97948074 192.95018005]
[-40.52051163 201.17956543]
[-53.06153870 209.40893555]
[-51.94170380 225.88398743]
[-59.22936630 240.59738159]
[-72.85681915 249.58723450]
[-89.06376648 250.48600769]
[-103.43473053 243.14338684]
[-115.81681061 251.61004639]
[-118.85753632 266.88720703]
[-131.53533936 275.29721069]
[-146.08103943 272.30419922]
[-148.75141907 287.88125610]
[-161.70237732 296.93930054]
[-177.25032043 294.10437012]
[-186.17094421 281.05838013]
[-183.17179871 265.54125977]
[-170.03221130 256.75906372]
[-154.54768372 259.92211914]
[-152.05947876 245.28160095]
[-139.62289429 236.51882935]
[-124.28345490 239.22796631]
[-111.90138245 230.76132202]
[-113.83493805 217.21733093]
[-109.71530151 204.10153198]
[-100.29438782 193.99865723]
[-87.37466431 188.92546082]
[-73.46443939 189.92831421]
[-61.29091263 196.86790466]
[-48.74988556 188.63853455]
[-36.20885468 180.40916443]
[-33.44235992 165.81867981]
[-20.84120178 157.29426575]
[-5.55612278 160.29495239]
[6.98490620 152.06558228]
[19.52593613 143.83621216]
[25.92193222 130.38479614]
[41.70469666 129.28259277]
[54.24572754 121.05321503]
[66.78675842 112.82384491]
[79.32778168 104.59446716]
[82.29589844 88.38043213]
[95.99048615 79.20640564]
[112.11434937 82.63070679]
[124.49642181 74.16406250]
[136.87850952 65.69741058]
[143.90289307 51.52107620]
[158.77616882 50.72417831]
[171.15823364 42.25753021]
[176.50669861 34.79546738]
[183.85763550 33.75019073]
[196.39866638 25.52081680]
[208.93969727 17.29144287]
[221.48072815 9.06206894]
[234.02174377 0.83269483]
[246.56277466 -7.39667892]
[259.10382080 -15.62605286]
[269.65979004 -26.28302193]
[277.76940918 -38.90182495]
[285.87902832 -51.52062607]
[293.98864746 -64.13942719]
[302.09826660 -76.75823212]
[310.20785522 -89.37703705]
[318.31747437 -101.99584198]
[326.42709351 -114.61463928]
[315.09182739 -125.71194458]
[306.29064941 -138.90301514]
[300.39968872 -153.61997986]
[297.66995239 -169.22985840]
[298.21643066 -185.06172180]
[302.01345825 -200.43562317]
[308.89569092 -214.69171143]
[318.56555176 -227.21859741]
[330.60586548 -237.47958374]
[344.49795532 -245.03559875]
[359.64404297 -249.56407166]
[375.39291382 -250.87261963]
[391.06787109 -248.90728760]
[405.99591064 -243.75473022]
[413.61923218 -256.67312622]
[421.24255371 -269.59152222]
[428.86587524 -282.50991821]
[422.56643677 -296.69076538]
[425.83831787 -311.85897827]
[437.42340088 -322.18206787]
[452.86697388 -323.69055176]
[466.23068237 -315.80444336]
[472.37591553 -301.55609131]
[468.93969727 -286.42425537]
[457.24331665 -276.22747803]
[441.78427124 -274.88659668]
[434.16094971 -261.96820068]
[426.53762817 -249.04980469]
[418.91430664 -236.13140869]
[429.54742432 -226.74270630]
[438.25863647 -215.54240417]
[444.74484253 -202.91769409]
[448.77981567 -189.30537415]
[450.22213745 -175.17678833]
[449.02032471 -161.02140808]
[445.21438599 -147.32995605]
[438.93472290 -134.57736206]
[430.39752197 -123.20630646]
[419.89743042 -113.61182404]
[407.79721069 -106.12759399]
[394.51544189 -101.01437378]
[380.51187134 -98.45082855]
[366.27148438 -98.52738190]
[352.28784180 -101.24297333]
[339.04589844 -106.50502777]
[330.93627930 -93.88623047]
[322.82666016 -81.26742554]
[314.71704102 -68.64862061]
[306.60745239 -56.02981949]
[298.49783325 -43.41101456]
[290.38821411 -30.79221153]
[282.27859497 -18.17340851]
[295.59146118 -25.08483505]
[310.22482300 -28.38104439]
[325.21524048 -27.84502411]
[339.57577515 -23.51206398]
[352.36099243 -15.66743565]
[362.72915649 -4.82761192]
[369.99758911 8.29373741]
[373.68777466 22.83273315]
[373.55679321 37.83216095]
[369.61325073 52.30449295]
[362.11676025 65.29690552]
[351.56091309 75.95400238]
[338.64062500 83.57415009]
[324.20660400 87.65565491]
[309.20910645 87.92980194]
[294.63555908 84.37853241]
[281.44543457 77.23566437]
[270.50714111 66.97145844]
[262.54083252 54.26169586]
[258.07101440 39.94315338]
[257.39193726 24.95853424]
[260.54830933 10.29438782]
[267.33319092 -3.08502340]
[254.79216003 5.14435005]
[242.25112915 13.37372398]
[229.71009827 21.60309792]
[217.16906738 29.83247185]
[204.62803650 38.06184387]
[192.08700562 46.29121780]
[179.62489319 54.63960648]
[167.24281311 63.10625458]
[161.10406494 76.67700195]
[145.34515381 78.07949066]
[132.96307373 86.54614258]
[120.58099365 95.01278687]
[119.73273468 107.68561554]
[111.78604889 117.59371185]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 51]
[2 50]
[3 49]
[4 48]
[6 46]
[7 45]
[8 44]
[11 41]
[12 40]
[13 39]
[18 33]
[19 32]
[22 29]
[54 162]
[55 161]
[56 160]
[58 158]
[59 157]
[61 156]
[62 155]
[63 154]
[64 153]
[65 152]
[66 151]
[67 150]
[68 127]
[69 126]
[70 125]
[71 124]
[72 123]
[73 122]
[74 121]
[75 120]
[89 104]
[90 103]
[91 102]
[92 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
