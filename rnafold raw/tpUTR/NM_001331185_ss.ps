%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 21:15:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGAUACUCAAAUGACAUUCAGGAACUCUAAUAUUCAUGGAAGUCAUUUUAUAGUCCUUAAAUAAUGGACUCAAGCAUAUAUGUUUGCUUUACCUUAAUUAUGGAAAUAUUAACUUUAUCUGAAAUAAAUAUUUUAUUUCAA\
) } def
/len { sequence length } bind def

/coor [
[127.79978180 202.55673218]
[139.11758423 192.71257019]
[153.91053772 195.20387268]
[147.86933899 181.47419739]
[141.82814026 167.74453735]
[135.78694153 154.01486206]
[129.74572754 140.28518677]
[109.03541565 147.42926025]
[88.07020569 144.93066406]
[70.95932770 133.97171021]
[60.75584030 117.32425690]
[46.18571091 120.88954926]
[31.61557961 124.45483398]
[17.04544830 128.02012634]
[2.47531796 131.58541870]
[-12.09481335 135.15069580]
[-26.66494370 138.71598816]
[-38.23058319 149.51165771]
[-52.43216705 145.02119446]
[-67.00229645 148.58647156]
[-81.57242584 152.15176392]
[-96.14256287 155.71705627]
[-107.70819855 166.51272583]
[-121.90978241 162.02224731]
[-136.47991943 165.58753967]
[-151.05004883 169.15283203]
[-156.80070496 183.56495667]
[-169.94226074 191.81597900]
[-185.42150879 190.73318481]
[-197.28636169 180.73295593]
[-200.97456360 165.66056824]
[-195.06788635 151.31166077]
[-181.83760071 143.20370483]
[-166.37101746 144.45434570]
[-154.61532593 154.58270264]
[-140.04519653 151.01741028]
[-125.47506714 147.45211792]
[-114.95158386 136.91146851]
[-99.70784760 141.14692688]
[-85.13771820 137.58163452]
[-70.56758881 134.01634216]
[-55.99745560 130.45106506]
[-45.47396851 119.91040039]
[-30.23023224 124.14585876]
[-15.66010189 120.58057404]
[-1.08997047 117.01528168]
[13.48016071 113.44999695]
[28.05029106 109.88470459]
[42.62042236 106.31941986]
[57.19055557 102.75412750]
[57.97777939 91.37638092]
[61.73525238 80.60817719]
[68.19738007 71.21063232]
[76.90741730 63.84801102]
[71.16716003 49.98981857]
[65.42691040 36.13162231]
[59.68666077 22.27343178]
[53.94640732 8.41523838]
[38.74624634 5.77731562]
[27.40069771 -4.67649031]
[23.53008270 -19.61040878]
[28.36950493 -34.25907898]
[40.37471771 -43.94816589]
[55.71490479 -45.58591461]
[69.49506378 -38.64972687]
[77.31800079 -25.35291481]
[76.68744659 -9.93844414]
[67.80460358 2.67498660]
[73.54485321 16.53318024]
[79.28510284 30.39137268]
[85.02535248 44.24956512]
[90.76560974 58.10775757]
[101.40357971 57.12501907]
[111.95450592 58.80141068]
[118.58883667 45.34832001]
[125.22316742 31.89522934]
[131.85749817 18.44213867]
[138.49182129 4.98904657]
[131.14794922 -8.68015385]
[133.27453613 -24.05081558]
[144.05386353 -35.21260834]
[159.34107971 -37.87359238]
[173.25791931 -31.01056290]
[180.45307922 -17.26250076]
[178.15988159 -1.91581190]
[167.26010132 9.12838745]
[151.94491577 11.62337685]
[145.31059265 25.07646751]
[138.67625427 38.52956009]
[132.04193115 51.98265076]
[125.40759277 65.43574524]
[135.37596130 71.71904755]
[143.69601440 80.91020966]
[149.51933289 92.54748535]
[163.49945068 87.11090851]
[167.31976318 72.07146454]
[179.27191162 62.17572403]
[194.76007080 61.22880173]
[207.82870483 69.59481049]
[213.45269775 84.05684662]
[209.46946716 99.05396271]
[197.41065979 108.81946564]
[181.91314697 109.59831238]
[168.93601990 101.09102631]
[154.95590210 106.52760315]
[152.08578491 113.45669556]
[166.96092224 115.38808441]
[181.83605957 117.31946564]
[196.78285217 116.05719757]
[209.17709351 124.50605011]
[213.46496582 138.88012695]
[207.72511292 152.73847961]
[194.52952576 159.87126160]
[179.79109192 157.08230591]
[170.11354065 145.62011719]
[158.22953796 136.46749878]
[146.34553528 127.31488800]
[143.47540283 134.24398804]
[149.51660156 147.97366333]
[155.55780029 161.70332336]
[161.59901428 175.43299866]
[167.64021301 189.16267395]
[174.42088318 202.54260254]
[181.92088318 215.53297424]
[189.42088318 228.52336121]
[196.92088318 241.51373291]
[204.42088318 254.50411987]
[211.92088318 267.49450684]
[219.42088318 280.48489380]
[226.92088318 293.47525024]
[240.07673645 304.16918945]
[233.44264221 319.77127075]
[216.61378479 317.71551514]
[213.93051147 300.97525024]
[206.43051147 287.98489380]
[198.93051147 274.99450684]
[191.43051147 262.00411987]
[183.93051147 249.01373291]
[176.43051147 236.02336121]
[168.93051147 223.03297424]
[161.43051147 210.04260254]
[154.69349670 223.44456482]
[140.06266785 226.75196838]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 122]
[4 121]
[5 120]
[6 119]
[7 118]
[11 50]
[12 49]
[13 48]
[14 47]
[15 46]
[16 45]
[17 44]
[19 42]
[20 41]
[21 40]
[22 39]
[24 37]
[25 36]
[26 35]
[54 72]
[55 71]
[56 70]
[57 69]
[58 68]
[74 91]
[75 90]
[76 89]
[77 88]
[78 87]
[94 105]
[95 104]
[123 141]
[124 140]
[125 139]
[126 138]
[127 137]
[128 136]
[129 135]
[130 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
