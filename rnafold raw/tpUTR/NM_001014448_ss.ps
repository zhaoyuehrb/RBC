%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 06:55:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCGGCCCCAGCACCCGCCAGGAUGUGGAGACCGAGGCCCAUCUCCGCAUCCCGGGCUCCUGGCUCUUGAUUUUGUCUGCCACAGACAUCCCACAAAGCCGCUGCCAUUUUAUUAAAGUGUUUUGAUCCACUUUGCACUGGAA\
) } def
/len { sequence length } bind def

/coor [
[168.56825256 291.75000000]
[165.20936584 276.06250000]
[175.49113464 263.74728394]
[175.49113464 248.74726868]
[175.49113464 233.74726868]
[175.49113464 218.74726868]
[155.26928711 209.26177979]
[142.64775085 190.72804260]
[141.21865845 168.26295471]
[151.46907043 148.12377930]
[142.39144897 136.18238831]
[133.31384277 124.24098969]
[124.23622894 112.29959106]
[115.24414825 121.38636017]
[103.47062683 125.10928345]
[91.74699402 122.99665070]
[82.70178986 115.93241882]
[78.17156219 105.86315155]
[63.21466446 104.72676849]
[48.25777435 103.59038544]
[31.89340210 111.95855713]
[17.77678680 101.58648682]
[2.79878545 100.77440643]
[-12.17921543 99.96231842]
[-27.15721703 99.15023804]
[-42.13521957 98.33815765]
[-57.11322021 97.52606964]
[-72.09121704 96.71398926]
[-87.06922150 95.90190125]
[-102.04722595 95.08982086]
[-117.02522278 94.27773285]
[-132.00321960 93.46565247]
[-143.70983887 103.74149323]
[-158.88809204 102.70455933]
[-168.61239624 91.48075867]
[-182.98481750 99.37793732]
[-196.86805725 90.64938354]
[-195.98022461 74.27428436]
[-181.23464966 67.09794617]
[-167.80030823 76.50276184]
[-156.91950989 66.39614105]
[-141.71812439 67.00634003]
[-131.19114685 78.48764801]
[-116.21314240 79.29973602]
[-101.23513794 80.11181641]
[-86.25714111 80.92390442]
[-71.27913666 81.73598480]
[-56.30113602 82.54807281]
[-41.32313538 83.36015320]
[-26.34513283 84.17223358]
[-11.36713219 84.98432159]
[3.61086893 85.79640198]
[18.58887100 86.60848999]
[27.84307861 78.74656677]
[40.37340927 79.34700012]
[49.39415741 88.63349152]
[64.35105133 89.76987457]
[79.30794525 90.90625763]
[83.92130280 82.83767700]
[91.64742279 77.03932953]
[101.39392090 74.69035339]
[111.63443756 76.45429993]
[120.64750671 82.32642365]
[126.64943695 68.57954407]
[132.65136719 54.83265305]
[138.65328979 41.08576965]
[139.23159790 31.89365005]
[144.93704224 27.10829735]
[151.23536682 13.49466515]
[157.53370667 -0.11896583]
[147.88128662 -13.50035572]
[146.28166199 -29.82797050]
[153.07554626 -44.65798569]
[166.33201599 -54.00174713]
[182.39628601 -55.39845657]
[188.39820862 -69.14533997]
[194.40014648 -82.89222717]
[200.40206909 -96.63911438]
[206.40399170 -110.38600159]
[212.40591431 -124.13288879]
[213.20237732 -141.06811523]
[229.69625854 -144.99092102]
[238.03170776 -130.22756958]
[226.15280151 -118.13095856]
[220.15087891 -104.38407898]
[214.14895630 -90.63719177]
[208.14701843 -76.89030457]
[202.14509583 -63.14341736]
[196.14317322 -49.39653015]
[204.97700500 -38.92944336]
[208.44047546 -25.60946846]
[205.79879761 -12.03490925]
[197.51391602 -0.87936062]
[185.16491699 5.63487291]
[171.14733887 6.17937088]
[164.84899902 19.79300117]
[158.55065918 33.40663147]
[152.40017700 47.08769608]
[146.39825439 60.83457947]
[140.39631653 74.58146667]
[134.39439392 88.32835388]
[136.17762756 103.22197723]
[145.25523376 115.16337585]
[154.33285522 127.10477448]
[163.41046143 139.04617310]
[173.85794067 135.36630249]
[184.88259888 134.48881531]
[195.74702454 136.46362305]
[205.72674561 141.15013123]
[214.15861511 148.22724915]
[220.48480225 157.21531677]
[224.28970337 167.50869751]
[225.32728577 178.41647339]
[223.53692627 189.20890808]
[219.04692078 199.16622925]
[230.26628113 209.12242126]
[241.48565674 219.07861328]
[252.70501709 229.03480530]
[263.92437744 238.99099731]
[275.14376831 248.94718933]
[286.36312866 258.90338135]
[301.48791504 255.43627930]
[315.74877930 261.55239868]
[323.66217041 274.89999390]
[322.18518066 290.34661865]
[311.88577271 301.95272827]
[296.72430420 305.25555420]
[282.53060913 298.98507690]
[274.76248169 285.55242920]
[276.40692139 270.12274170]
[265.18756104 260.16656494]
[253.96820068 250.21035767]
[242.74882507 240.25416565]
[231.52946472 230.29797363]
[220.31008911 220.34178162]
[209.09072876 210.38558960]
[203.37359619 214.17304993]
[197.11872864 216.98500061]
[190.49113464 218.74726868]
[190.49113464 233.74726868]
[190.49113464 248.74726868]
[190.49113464 263.74728394]
[200.77290344 276.06250000]
[197.41403198 291.75000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 142]
[4 141]
[5 140]
[6 139]
[10 105]
[11 104]
[12 103]
[13 102]
[18 58]
[19 57]
[20 56]
[22 53]
[23 52]
[24 51]
[25 50]
[26 49]
[27 48]
[28 47]
[29 46]
[30 45]
[31 44]
[32 43]
[35 40]
[63 101]
[64 100]
[65 99]
[66 98]
[68 97]
[69 96]
[70 95]
[75 89]
[76 88]
[77 87]
[78 86]
[79 85]
[80 84]
[115 136]
[116 135]
[117 134]
[118 133]
[119 132]
[120 131]
[121 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
