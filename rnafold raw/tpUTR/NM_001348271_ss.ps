%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 21:08:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAUUGAUAUGAAUUUUUGAAAGUAGAAAAUCUGAGGUUAAAAUAAUAACUUUUCAAAUAAUGAGUUAGAAGGUGGUUGCCUAGUU\
) } def
/len { sequence length } bind def

/coor [
[73.07469940 212.15222168]
[59.38157654 218.27581787]
[44.53116608 220.38894653]
[29.67342758 218.32797241]
[15.95889091 212.25250244]
[4.44955921 202.63296509]
[-3.96332622 190.21429443]
[-8.62830162 175.95814514]
[-9.18412971 160.96844482]
[-5.58776665 146.40594482]
[1.88229632 133.39833069]
[12.64760494 122.95285034]
[25.87453270 115.87836456]
[40.53883743 112.72269440]
[55.50496292 113.73020935]
[69.60967255 118.82061005]
[56.99087143 110.71099854]
[44.37207031 102.60138702]
[31.75326729 94.49177551]
[19.13446426 86.38216400]
[6.51566124 78.27254486]
[-7.88663912 83.73880005]
[-22.57436562 79.72332764]
[-31.97014618 67.96818542]
[-32.63441849 53.11231995]
[-45.25321960 45.00270844]
[-57.87202454 36.89309692]
[-70.49082947 28.78348351]
[-87.08444977 25.30670738]
[-88.33712006 8.39910030]
[-72.43704224 2.51489472]
[-62.38121414 16.16468048]
[-49.76240921 24.27429390]
[-37.14360809 32.38390350]
[-24.52480507 40.49351883]
[-10.73548603 34.92641068]
[3.86051297 38.58985138]
[13.61462116 50.28218842]
[14.62527370 65.65374756]
[27.24407578 73.76335907]
[39.86288071 81.87297058]
[52.48168182 89.98258209]
[65.10048676 98.09219360]
[77.71929169 106.20180511]
[79.20819855 92.48727417]
[87.99162292 82.66596985]
[100.24797821 79.93461609]
[111.22997284 84.61616516]
[124.13018036 76.96211243]
[137.03039551 69.30806732]
[149.93060303 61.65401459]
[162.83082581 53.99996185]
[175.73103333 46.34591293]
[175.46804810 30.98927307]
[182.93263245 17.56632614]
[196.11686707 9.68777847]
[211.47425842 9.47292042]
[224.87373352 16.97954559]
[232.71092224 30.18841171]
[232.87763977 45.54639816]
[225.32905579 58.92228699]
[212.09568787 66.71802521]
[196.73724365 66.83660889]
[183.38508606 59.24612808]
[170.48487854 66.90017700]
[157.58465576 74.55422974]
[144.68444824 82.20827484]
[131.78424072 89.86232758]
[118.88401794 97.51638031]
[118.21810150 109.19493103]
[110.53510284 119.04810333]
[97.85274506 123.02784729]
[108.07401276 134.00627136]
[118.29528046 144.98468018]
[128.51655579 155.96310425]
[144.34539795 160.25025940]
[148.28491211 176.16917419]
[136.28247070 187.34385681]
[120.68515015 182.27873230]
[117.53813171 166.18437195]
[107.31686401 155.20594788]
[97.09559631 144.22753906]
[86.87432861 133.24911499]
[94.39001465 146.23042297]
[98.03749084 160.78019714]
[97.53430176 175.77175903]
[92.91941071 190.04420471]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 44]
[17 43]
[18 42]
[19 41]
[20 40]
[21 39]
[25 35]
[26 34]
[27 33]
[28 32]
[48 69]
[49 68]
[50 67]
[51 66]
[52 65]
[53 64]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
