%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 22:52:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAAAGCCUUCUAAUGUUCCACUGUUUGGAGAACAGAAGAUAGCAGGCUGUGUAUUUUAAAUUUUGAAAGUAUUUUCAUUUGAUCUUUAAAAAAUAAAAACAAAUUGGAGACCUGUGA\
) } def
/len { sequence length } bind def

/coor [
[111.40306854 134.90441895]
[100.01963806 136.71986389]
[88.63426208 134.91659546]
[78.36897278 129.67233276]
[70.23540497 121.50389862]
[65.03510284 111.21627045]
[50.11727142 112.78419495]
[35.19944382 114.35212708]
[20.28161621 115.92005157]
[5.36378765 117.48797607]
[-9.45153713 119.83449554]
[-24.12375069 122.95317078]
[-38.79596710 126.07184601]
[-47.42070007 139.04302979]
[-62.34483719 141.99681091]
[-74.65773010 133.69450378]
[-89.32994843 136.81317139]
[-104.00215912 139.93185425]
[-118.67436981 143.05052185]
[-133.34658813 146.16920471]
[-141.97132874 159.14039612]
[-156.89546204 162.09416199]
[-169.20835876 153.79185486]
[-179.11676025 166.40942383]
[-195.15979004 166.38555908]
[-205.03060913 153.73855591]
[-201.15716553 138.17013550]
[-186.51083374 131.62303162]
[-172.32702637 139.11964417]
[-164.45549011 126.52700806]
[-149.62020874 123.15521240]
[-136.46525574 131.49699402]
[-121.79305267 128.37831116]
[-107.12083435 125.25963593]
[-92.44862366 122.14096069]
[-77.77640533 119.02228546]
[-69.90486908 106.42964935]
[-55.06958389 103.05786133]
[-41.91464233 111.39963531]
[-27.24242592 108.28096008]
[-12.57021236 105.16228485]
[-10.92398643 102.74880981]
[-8.16347027 100.88523102]
[-4.50981808 100.02253723]
[-0.35157964 100.51660919]
[3.79586101 102.57015228]
[18.71368980 101.00222015]
[33.63151932 99.43429565]
[48.54934692 97.86637115]
[63.46717453 96.29843903]
[69.35456085 79.77116394]
[82.23793793 67.86189270]
[99.17618561 63.28937149]
[101.90972137 48.54055023]
[104.64324951 33.79172516]
[107.37678528 19.04290199]
[110.11031342 4.29407787]
[112.84384918 -10.45474625]
[115.57738495 -25.20356941]
[104.79885101 -36.36613846]
[102.67337799 -51.73695374]
[110.01824188 -65.40562439]
[124.00919342 -72.11627197]
[139.26643372 -69.28850555]
[149.92324829 -58.00967026]
[151.88185120 -42.61669922]
[144.38914490 -29.02851105]
[130.32620239 -22.47003555]
[127.59267426 -7.72121286]
[124.85913849 7.02761078]
[122.12561035 21.77643394]
[119.39207458 36.52525711]
[116.65853882 51.27408218]
[113.92501068 66.02290344]
[127.68276215 75.87503815]
[135.56169128 90.85044098]
[135.88862610 107.76887512]
[149.59181213 113.86992645]
[163.29498291 119.97097015]
[176.99816895 126.07202148]
[189.37907410 122.17850494]
[200.70881653 127.63722992]
[205.08894348 138.99566650]
[220.87577820 137.95321655]
[229.03222656 150.41601562]
[242.57099915 156.87368774]
[256.10977173 163.33135986]
[269.64855957 169.78901672]
[283.18734741 176.24668884]
[296.72613525 182.70434570]
[310.26489258 189.16201782]
[321.53796387 178.96463013]
[335.85693359 173.86218262]
[351.03833008 174.63278198]
[364.76705933 181.15890503]
[374.94961548 192.44535828]
[380.03323364 206.77104187]
[379.24267578 221.95141602]
[372.69848633 235.67155457]
[361.39865112 245.83924866]
[347.06628418 250.90399170]
[331.88696289 250.09346008]
[318.17544556 243.53125000]
[308.02264404 232.21804810]
[302.97674561 217.87902832]
[303.80725098 202.70080566]
[290.26846313 196.24313354]
[276.72967529 189.78546143]
[263.19088745 183.32780457]
[249.65211487 176.87013245]
[236.11334229 170.41246033]
[222.57455444 163.95480347]
[207.75611877 165.45913696]
[198.63128662 152.53443909]
[181.29609680 154.90249634]
[170.89712524 139.77520752]
[157.19393921 133.67414856]
[143.49075317 127.57310486]
[129.78758240 121.47205353]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 50]
[7 49]
[8 48]
[9 47]
[10 46]
[11 41]
[12 40]
[13 39]
[16 36]
[17 35]
[18 34]
[19 33]
[20 32]
[23 29]
[53 74]
[54 73]
[55 72]
[56 71]
[57 70]
[58 69]
[59 68]
[77 119]
[78 118]
[79 117]
[80 116]
[83 114]
[85 112]
[86 111]
[87 110]
[88 109]
[89 108]
[90 107]
[91 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
