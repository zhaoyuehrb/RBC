%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 07:21:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCUUGACUCAACGAGAGCACUUGAAAAUGAAAUGACUGUCUAAGAGAUCUGGUCAAAGCAACUGGAUACUAGAUCUUACAUCUGCAGCUCUUUCUUCUUUGAAUUUCCUAUCUGUAUGUCUGCCUAAUUAAAAAAAUAUAUAUUGUAUUAUGCUACCUGCA\
) } def
/len { sequence length } bind def

/coor [
[92.02033997 137.91087341]
[93.73701477 153.63867188]
[81.63445282 162.32067871]
[75.76173401 176.12326050]
[69.88901520 189.92582703]
[64.01628876 203.72840881]
[58.14356995 217.53099060]
[64.28320312 232.09396362]
[58.24969101 246.70123291]
[43.62261200 252.68655396]
[29.07995033 246.49894714]
[23.24961090 231.80940247]
[29.59062958 217.33297729]
[44.34099197 211.65826416]
[50.21371460 197.85568237]
[56.08643341 184.05311584]
[61.95915604 170.25053406]
[67.83187866 156.44795227]
[65.69514465 141.70741272]
[78.21775818 132.03814697]
[64.73265076 116.03505707]
[61.53813171 95.35312653]
[69.56632233 76.02709961]
[59.80276871 64.63968658]
[50.03921509 53.25228119]
[40.27566528 41.86487579]
[30.51211166 30.47746849]
[15.14719105 31.58444595]
[2.22763419 23.52600861]
[-3.40291309 9.57033062]
[0.22050285 -4.85218191]
[-9.54304981 -16.23958969]
[-19.30660248 -27.62699699]
[-29.07015419 -39.01440430]
[-37.07089615 -43.52000046]
[-38.90912247 -50.71471786]
[-48.45275879 -62.28705597]
[-58.10679626 -73.76745605]
[-67.87034607 -85.15486145]
[-77.63390350 -96.54226685]
[-87.39745331 -107.92967987]
[-104.54769135 -104.28178406]
[-121.10794830 -109.76738739]
[-132.57165527 -122.79925537]
[-135.86692810 -139.74961853]
[-130.17938232 -155.95977783]
[-140.37194824 -166.96485901]
[-150.56449890 -177.96994019]
[-160.75704956 -188.97502136]
[-170.94961548 -199.98010254]
[-181.14216614 -210.98518372]
[-191.33473206 -221.99026489]
[-201.52728271 -232.99534607]
[-211.71983337 -244.00042725]
[-221.91239929 -255.00550842]
[-238.65547180 -252.76651001]
[-253.29707336 -260.85287476]
[-260.18038940 -275.91488647]
[-256.78073120 -291.95294189]
[-267.18222046 -302.76074219]
[-282.52209473 -309.98046875]
[-279.83105469 -326.71948242]
[-263.00125122 -328.76739502]
[-256.37438965 -313.16223145]
[-245.97290039 -302.35440063]
[-232.95005798 -305.40979004]
[-220.01768494 -301.58935547]
[-210.59545898 -291.79147339]
[-207.23001099 -278.50955200]
[-210.90731812 -265.19805908]
[-200.71475220 -254.19297791]
[-190.52220154 -243.18789673]
[-180.32965088 -232.18281555]
[-170.13708496 -221.17773438]
[-159.94453430 -210.17265320]
[-149.75196838 -199.16757202]
[-139.55941772 -188.16250610]
[-129.36686707 -177.15742493]
[-119.17430878 -166.15234375]
[-107.17736053 -170.27253723]
[-94.46742249 -169.53056335]
[-82.94694519 -164.00187683]
[-74.35383606 -154.48109436]
[-69.99930573 -142.36793518]
[-70.56788635 -129.46154785]
[-76.01004791 -117.69322968]
[-66.24649048 -106.30582428]
[-56.48294067 -94.91841125]
[-46.71938705 -83.53100586]
[-39.94668198 -80.48577118]
[-36.88042068 -71.83069611]
[-27.33678436 -60.25835419]
[-17.68274689 -48.77795792]
[-7.91919470 -37.39054871]
[1.84435773 -26.00314140]
[11.60791016 -14.61573410]
[26.41450882 -15.99509907]
[39.34713364 -8.30021572]
[45.33897018 5.69804478]
[41.89951706 20.71391487]
[51.66307068 32.10132217]
[61.42662430 43.48873138]
[71.19017792 54.87613678]
[80.95372772 66.26354218]
[89.05492401 62.83665466]
[97.72035217 61.32556152]
[106.50329590 61.80816650]
[114.95098114 64.25959015]
[122.62794495 68.55345917]
[129.13841248 74.46841431]
[134.14677429 81.69954681]
[137.39485168 89.87408447]
[138.71519470 98.57061768]
[138.03973389 107.34083557]
[135.40328979 115.73262787]
[147.67224121 124.36240387]
[159.94117737 132.99218750]
[172.21011353 141.62196350]
[187.94909668 143.23289490]
[193.90769958 156.88369751]
[206.17663574 165.51347351]
[219.02516174 164.07653809]
[229.07507324 171.55514526]
[231.24415588 183.48530579]
[243.34553528 192.34851074]
[259.05078125 194.26063538]
[264.74679565 208.02305603]
[276.84817505 216.88627625]
[288.94958496 225.74948120]
[301.05096436 234.61268616]
[313.31304932 225.75285339]
[327.71340942 221.11776733]
[342.84130859 221.16152954]
[357.21466064 225.87986755]
[369.42526245 234.81050110]
[378.27688599 247.07850647]
[382.90231323 261.48199463]
[382.84838867 276.60986328]
[378.12045288 290.98004150]
[369.18164062 303.18466187]
[356.90768433 312.02804565]
[342.50109863 316.64382935]
[327.37326050 316.57977295]
[313.00628662 311.84219360]
[300.80764771 302.89520264]
[291.97247314 290.61532593]
[287.36636353 276.20565796]
[287.44055176 261.07788086]
[292.18774414 246.71406555]
[280.08636475 237.85086060]
[267.98498535 228.98765564]
[255.88359070 220.12445068]
[241.04393005 218.84629822]
[234.48233032 204.44990540]
[222.38095093 195.58670044]
[204.87680054 194.65130615]
[197.54685974 177.78242493]
[185.27790833 169.15263367]
[170.41648865 168.15896606]
[163.58033752 153.89089966]
[151.31140137 145.26112366]
[139.04244995 136.63134766]
[126.77351379 128.00157166]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[3 18]
[4 17]
[5 16]
[6 15]
[7 14]
[23 104]
[24 103]
[25 102]
[26 101]
[27 100]
[31 96]
[32 95]
[33 94]
[34 93]
[36 92]
[37 91]
[38 89]
[39 88]
[40 87]
[41 86]
[46 79]
[47 78]
[48 77]
[49 76]
[50 75]
[51 74]
[52 73]
[53 72]
[54 71]
[55 70]
[59 65]
[60 64]
[115 163]
[116 162]
[117 161]
[118 160]
[120 158]
[121 157]
[124 155]
[125 154]
[127 152]
[128 151]
[129 150]
[130 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
