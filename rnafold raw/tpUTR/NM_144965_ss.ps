%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 00:12:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGACCAUCCAGACCCUCCCUUCUUGCUGGGGAGGGGACGAGUUCUACCCACCUCCCCACACUGGCACUCAGCCAGCUGCCUCCUUCCAGAGCAAUUAAAAGUCUUAGCAACAGUCCUCUGGUCCCACAGCUGAGUUUAUUAUACUUGUUUUCUUUUACAAAAUUAAAAACAUCUAAAACCAGGCCCAAGUGGC\
) } def
/len { sequence length } bind def

/coor [
[346.53643799 279.21673584]
[346.90710449 260.24664307]
[333.72103882 253.09629822]
[320.53494263 245.94595337]
[307.34887695 238.79562378]
[294.16278076 231.64527893]
[280.97671509 224.49494934]
[267.79064941 217.34460449]
[256.32278442 224.19401550]
[242.85997009 224.48165894]
[230.91954041 218.02529907]
[223.67404175 206.41870117]
[223.10848999 192.63954163]
[210.03871155 185.27877808]
[196.96893311 177.91801453]
[191.02822876 182.54310608]
[184.03938293 185.41471863]
[176.50953674 186.30882263]
[168.98927307 185.14549255]
[162.03240967 181.99575806]
[156.15521240 177.07746887]
[151.79801941 170.74029541]
[149.29234314 163.44084167]
[148.83567810 155.70982361]
[150.47593689 148.11344910]
[138.31248474 139.33561707]
[126.14902496 130.55778503]
[113.98556519 121.77994537]
[101.82211304 113.00211334]
[87.25357056 109.43034363]
[72.40937042 111.58669281]
[57.56517792 113.74304962]
[42.72098160 115.89940643]
[27.87678719 118.05576324]
[13.03259182 120.21211243]
[-1.81160331 122.36846924]
[-16.63804054 124.64372253]
[-31.44576645 127.03771973]
[-36.24393845 141.57168579]
[-47.25483704 152.20271301]
[-61.94823837 156.48786926]
[-76.94770813 153.44244385]
[-88.80647278 143.76628113]
[-94.79948425 129.68287659]
[-93.54958344 114.42848206]
[-85.34398651 101.50846863]
[-72.06829071 93.89174652]
[-56.77315140 93.32858276]
[-42.97327042 99.94839478]
[-33.83976746 112.22999573]
[-19.03203964 109.83599091]
[-12.92308044 105.65972900]
[-3.96795821 107.52427673]
[10.87623692 105.36791992]
[25.72043228 103.21156311]
[40.56462860 101.05521393]
[55.40882111 98.89885712]
[70.25302124 96.74250031]
[85.09721375 94.58614349]
[87.05770111 87.34691620]
[76.47945404 76.71203613]
[90.97868347 72.86844635]
[92.93917084 65.62921906]
[81.21170044 56.27687073]
[69.48422241 46.92452240]
[57.75675201 37.57217789]
[46.02928162 28.21982956]
[29.99027061 28.58002281]
[19.81952286 16.17295074]
[23.31916428 0.51625603]
[37.80456924 -6.37958384]
[52.16377258 0.77532864]
[55.38162613 16.49235725]
[67.10910034 25.84470367]
[78.83657074 35.19705200]
[90.56404114 44.54939651]
[102.29151917 53.90174484]
[108.37324524 49.51282883]
[126.61843109 36.34608078]
[121.43795013 22.26905632]
[116.25747681 8.19202900]
[110.96435547 -5.84302759]
[105.55891418 -19.83521461]
[91.00764465 -26.00254059]
[85.15682220 -40.68394089]
[91.47765350 -55.16919708]
[106.22008514 -60.86446762]
[120.63771057 -54.39084625]
[126.17679596 -39.58901978]
[119.55110168 -25.24064827]
[124.95653534 -11.24846268]
[130.30621338 -6.13557482]
[130.33450317 3.01155353]
[135.51498413 17.08857918]
[140.69544983 31.16560555]
[142.89804077 16.32820129]
[157.80174255 18.02526283]
[171.34313965 24.47741890]
[182.04975891 34.98305130]
[188.75733948 48.39977264]
[190.73649597 63.26863098]
[187.77200317 77.97277069]
[180.18621826 90.91325378]
[168.80406189 100.68291473]
[154.86320496 106.21939087]
[139.87960815 106.92063904]
[125.48269653 102.71045685]
[110.59994507 100.83866119]
[122.76339722 109.61649323]
[134.92684937 118.39432526]
[147.09031677 127.17215729]
[159.25376892 135.94998169]
[181.58291626 130.17054749]
[200.68334961 142.61584473]
[204.32969666 164.84823608]
[217.39947510 172.20899963]
[230.46925354 179.56976318]
[245.74319458 172.31703186]
[262.16830444 175.56063843]
[273.31518555 187.82917786]
[274.94097900 204.15852356]
[288.12704468 211.30886841]
[301.31314087 218.45919800]
[314.49920654 225.60954285]
[327.68530273 232.75987244]
[340.87136841 239.91021729]
[354.05743408 247.06054688]
[366.77627563 237.90307617]
[382.96243286 236.34916687]
[398.26025391 243.41001892]
[408.25497437 257.69818115]
[409.74157715 275.66204834]
[423.81860352 280.84249878]
[437.89562988 286.02297974]
[447.04275513 286.05126953]
[452.15567017 291.40093994]
[466.14785767 296.80639648]
[480.14001465 302.21182251]
[494.13220215 307.61724854]
[498.42300415 306.78729248]
[502.35629272 307.31967163]
[505.54589844 308.93295288]
[507.73760986 311.24871826]
[508.82934570 313.84347534]
[522.44647217 320.13427734]
[537.12219238 314.91320801]
[550.84228516 321.48696899]
[555.72930908 335.51025391]
[569.34643555 341.80105591]
[582.96356201 348.09185791]
[596.58068848 354.38269043]
[610.19775391 360.67349243]
[623.81488037 366.96429443]
[634.96179199 356.62915039]
[649.21697998 351.35113525]
[664.40667725 351.93511963]
[678.21459961 358.29205322]
[688.53509521 369.45254517]
[693.79431152 383.71466064]
[693.19036865 398.90359497]
[686.81530762 412.70312500]
[675.64123535 423.00891113]
[661.37219238 428.24938965]
[646.18408203 427.62545776]
[632.39294434 421.23223877]
[622.10186768 410.04464722]
[616.88012695 395.76870728]
[617.52404785 380.58142090]
[603.90698242 374.29058838]
[590.28985596 367.99978638]
[576.67272949 361.70898438]
[563.05560303 355.41818237]
[549.43853760 349.12734985]
[535.59265137 354.49642944]
[521.69335938 348.31063843]
[516.15563965 333.75137329]
[502.53851318 327.46057129]
[488.72677612 321.60943604]
[474.73458862 316.20401001]
[460.74240112 310.79858398]
[446.75021362 305.39312744]
[432.71517944 300.10000610]
[418.63815308 294.91952515]
[404.56112671 289.73907471]
[393.13943481 299.46249390]
[396.00680542 314.18588257]
[398.87417603 328.90927124]
[411.32049561 339.03192139]
[411.02236938 355.07220459]
[398.20846558 364.72537231]
[382.70852661 360.58633423]
[376.41278076 345.83020020]
[384.15078735 331.77664185]
[381.28341675 317.05325317]
[378.41604614 302.32986450]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 127]
[3 126]
[4 125]
[5 124]
[6 123]
[7 122]
[8 121]
[13 117]
[14 116]
[15 115]
[25 112]
[26 111]
[27 110]
[28 109]
[29 108]
[30 59]
[31 58]
[32 57]
[33 56]
[34 55]
[35 54]
[36 53]
[37 51]
[38 50]
[63 77]
[64 76]
[65 75]
[66 74]
[67 73]
[79 95]
[80 94]
[81 93]
[82 91]
[83 90]
[132 184]
[133 183]
[134 182]
[136 181]
[137 180]
[138 179]
[139 178]
[144 177]
[145 176]
[148 173]
[149 172]
[150 171]
[151 170]
[152 169]
[153 168]
[185 195]
[186 194]
[187 193]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
