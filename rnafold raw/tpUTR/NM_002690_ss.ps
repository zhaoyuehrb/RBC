%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 06:28:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCUGUAUCCUCCCUGGCAGACACAACCCAAUAGGAGUCUUAAUUUAUUUCUUAACCUUUGCUAUGUAAGGGUCUUUGGUGUUUUUAAAUGAUUGUUUCUUCUUCAUGCUUUUGCUUGCAAUGUAGUCAAUAAAACCUCAUGUACUAUUAUUGGA\
) } def
/len { sequence length } bind def

/coor [
[-9.84684753 298.97485352]
[-30.60244560 301.48901367]
[-36.72176743 315.18402100]
[-42.84109497 328.87905884]
[-32.94821930 340.50204468]
[-29.08638000 355.26852417]
[-32.02234650 370.24661255]
[-41.17317581 382.46237183]
[-54.72197342 389.49038696]
[-69.97860718 389.93521118]
[-83.91386414 383.70855713]
[-93.76088715 372.04669189]
[-97.56455231 357.26513672]
[-94.56962585 342.29873657]
[-85.37075806 330.11907959]
[-71.79439545 323.14450073]
[-56.53612518 322.75973511]
[-50.41680145 309.06469727]
[-44.29747391 295.36968994]
[-50.87174225 288.85494995]
[-55.39355087 280.75231934]
[-57.49696350 271.69073486]
[-57.00434494 262.37768555]
[-53.94128036 253.54405212]
[-48.53559113 245.88671875]
[-41.20043182 240.01356506]
[-32.50275040 236.39527893]
[-23.11947060 235.32760620]
[-13.78480053 236.90722656]
[-6.06923676 224.04370117]
[1.64632678 211.18019104]
[9.36188984 198.31666565]
[17.07745361 185.45315552]
[24.79301643 172.58963013]
[32.50857925 159.72612000]
[32.41985703 144.83177185]
[46.15352631 136.97703552]
[53.86909103 124.11351776]
[61.58465195 111.25000000]
[48.64651108 118.83975983]
[39.67440414 130.86062622]
[27.06548882 138.98561096]
[12.41153526 142.18899536]
[-2.43752170 140.06637573]
[-15.60711670 132.88572693]
[-25.43470001 121.55352783]
[-30.67962646 107.50038910]
[-30.67976570 92.50038910]
[-25.43510246 78.44715118]
[-15.60772991 67.11477661]
[-2.43826914 59.93387604]
[12.41074848 57.81098175]
[27.06476212 61.01408768]
[39.67382812 69.13883209]
[48.64651108 81.16024017]
[61.58465195 88.75000000]
[53.86909103 75.88648224]
[46.15352631 63.02296448]
[38.43796158 50.15944672]
[30.72239876 37.29592896]
[23.00683594 24.43241310]
[15.29127216 11.56889534]
[7.57570839 -1.29462206]
[-5.75662661 -11.76769161]
[0.61639357 -27.47822762]
[17.47718430 -25.70337677]
[20.43922615 -9.01018524]
[28.15478897 3.85333180]
[35.87035370 16.71685028]
[43.58591461 29.58036613]
[51.30147934 42.44388580]
[59.01704407 55.30740356]
[66.73260498 68.17092133]
[74.44817352 81.03443909]
[86.47323608 72.93854523]
[100.14974213 71.31387329]
[112.37780762 75.87036133]
[120.67551422 84.98603821]
[134.86534119 80.12301636]
[149.05516052 75.25999451]
[159.60151672 63.46656799]
[174.14981079 66.65975952]
[188.33963013 61.79674149]
[202.52944946 56.93371964]
[216.71926880 52.07070160]
[230.90908813 47.20767975]
[233.98132324 35.65401840]
[242.18472290 27.12350464]
[253.37973022 23.67295837]
[264.72671509 26.05570602]
[273.40625000 33.56065369]
[287.77926636 29.26925468]
[302.15228271 24.97785759]
[316.52532959 20.68645859]
[330.89834595 16.39506149]
[345.27136230 12.10366440]
[331.53787231 6.07117510]
[323.12738037 -6.34911251]
[322.62426758 -21.34067345]
[330.18316650 -34.29687500]
[343.48132324 -41.23651886]
[358.43249512 -40.02717590]
[370.44244385 -31.04045486]
[375.82073975 -17.03781319]
[372.91473389 -2.32200289]
[362.61596680 8.58590984]
[377.52520752 6.93840408]
[392.43444824 5.29089737]
[407.32647705 3.49430799]
[422.19976807 1.54881513]
[429.49667358 -12.14552021]
[443.46401978 -18.90517044]
[458.73107910 -16.13090897]
[469.42736816 -4.88950014]
[471.43991089 10.49650764]
[463.99490356 24.11087990]
[449.95504761 30.71861267]
[434.71896362 27.77889824]
[424.14526367 16.42211533]
[409.27197266 18.36760902]
[403.01248169 22.37592506]
[394.08197021 20.20014763]
[379.17272949 21.84765434]
[364.26345825 23.49515915]
[349.56277466 26.47669029]
[335.18975830 30.76808929]
[320.81671143 35.05948639]
[306.44369507 39.35088348]
[292.07067871 43.64228058]
[277.69763184 47.93367767]
[270.03436279 64.51390839]
[252.40165710 70.38171387]
[235.77210999 61.39749908]
[221.58229065 66.26052094]
[207.39247131 71.12354279]
[193.20265198 75.98656464]
[179.01281738 80.84958649]
[169.48141479 92.29517365]
[153.91818237 89.44981384]
[139.72836304 94.31283569]
[125.53853607 99.17585754]
[122.35827637 115.34786224]
[109.44173431 127.08818054]
[91.10427856 128.91645813]
[74.44817352 118.96556091]
[66.73260498 131.82908630]
[59.01704407 144.69259644]
[58.55389786 160.50701904]
[45.37209702 167.44168091]
[37.65653610 180.30519104]
[29.94097137 193.16871643]
[22.22540855 206.03222656]
[14.50984383 218.89575195]
[6.79428101 231.75926208]
[-0.92128265 244.62278748]
[8.85375881 263.55358887]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 19]
[3 18]
[4 17]
[29 155]
[30 154]
[31 153]
[32 152]
[33 151]
[34 150]
[35 149]
[37 147]
[38 146]
[39 145]
[56 74]
[57 73]
[58 72]
[59 71]
[60 70]
[61 69]
[62 68]
[63 67]
[78 141]
[79 140]
[80 139]
[82 137]
[83 136]
[84 135]
[85 134]
[86 133]
[91 130]
[92 129]
[93 128]
[94 127]
[95 126]
[96 125]
[106 124]
[107 123]
[108 122]
[109 120]
[110 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
