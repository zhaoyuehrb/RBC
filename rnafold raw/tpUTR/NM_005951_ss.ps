%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:25:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUCGGGACAGCCCUGCUGUCAGAUGAAAACAGAAUGACACGUAAAAUCCAGGAUUUUUUUUUUCUACAACUCCGACUCAUUUGCUACAUUCCUUUUUUUCUGUGAAAUAUGUGAAUAAUAAUUAAACACUUAGACUUGA\
) } def
/len { sequence length } bind def

/coor [
[84.93325043 157.16249084]
[95.52454376 145.43218994]
[94.52265167 130.46568298]
[93.52075958 115.49918365]
[86.30976868 113.43726349]
[71.88777161 109.31340790]
[64.67678070 107.25148773]
[55.91416168 119.42591095]
[47.15155029 131.60032654]
[38.38893509 143.77474976]
[29.62631989 155.94917297]
[20.86370468 168.12359619]
[16.51827049 184.51119995]
[-0.43183565 184.87213135]
[-5.47091341 168.68435669]
[8.68928051 159.36099243]
[17.45189476 147.18656921]
[26.21450996 135.01214600]
[34.97712708 122.83771515]
[43.73973846 110.66329193]
[52.50235367 98.48886871]
[54.33592224 83.60135651]
[48.78920364 69.66457367]
[43.24248505 55.72779083]
[30.95056915 45.76689911]
[33.43313217 31.08064461]
[27.88641548 17.14386177]
[22.33969688 3.20707846]
[16.79297638 -10.72970390]
[11.24625874 -24.66648674]
[-0.31200662 -30.50880814]
[-4.62127876 -42.29471207]
[0.12924814 -53.47436523]
[-5.10559702 -67.53126526]
[-10.34044266 -81.58816528]
[-15.57528782 -95.64505768]
[-20.81013298 -109.70195770]
[-32.46866989 -112.47875977]
[-41.22394943 -120.48538971]
[-44.95256042 -131.62165833]
[-42.82741928 -143.04922485]
[-35.49797821 -151.91494751]
[-40.10143280 -166.19108582]
[-44.70489120 -180.46722412]
[-49.30834961 -194.74336243]
[-53.91180801 -209.01950073]
[-70.01121521 -211.09452820]
[-83.55630493 -219.93460083]
[-91.87718964 -233.73698425]
[-93.36001587 -249.72689819]
[-87.75972748 -264.71533203]
[-76.23890686 -275.73501587]
[-81.15927887 -289.90505981]
[-86.07965851 -304.07507324]
[-101.22142792 -304.00061035]
[-115.56615448 -308.84906006]
[-127.55783081 -318.09451294]
[-135.89569092 -330.73410034]
[-139.67530823 -345.39672852]
[-138.48669434 -360.49197388]
[-132.45878601 -374.38235474]
[-122.24543762 -385.56118774]
[-108.95452118 -392.81585693]
[-94.02773285 -395.35943604]
[-79.08422852 -392.91601562]
[-65.74495697 -385.75064087]
[-55.45686722 -374.64056396]
[-49.33593369 -360.79092407]
[-48.04610825 -345.70397949]
[-51.72730637 -331.01632690]
[-59.98021317 -318.32113647]
[-71.90962219 -308.99545288]
[-66.98924255 -294.82540894]
[-62.06887436 -280.65539551]
[-48.18383408 -279.73934937]
[-35.66379547 -273.56744385]
[-26.42395210 -263.04684448]
[-21.89184761 -249.75267029]
[-22.78685188 -235.69223022]
[-29.00622559 -223.00199890]
[-39.63566971 -213.62297058]
[-35.03221130 -199.34683228]
[-30.42875290 -185.07067871]
[-25.82529449 -170.79454041]
[-21.22183609 -156.51840210]
[-4.48862123 -149.24073792]
[1.79572773 -131.77226257]
[-6.75323439 -114.93680573]
[-1.51838899 -100.87990570]
[3.71645617 -86.82300568]
[8.95130157 -72.76611328]
[14.18614674 -58.70920944]
[28.29047775 -48.32529831]
[25.18304062 -30.21320534]
[30.72975922 -16.27642250]
[36.27647781 -2.33964038]
[41.82319641 11.59714222]
[47.36991501 25.53392410]
[59.26509476 34.49796295]
[57.17926788 50.18107224]
[62.72598648 64.11785889]
[68.27270508 78.05464172]
[68.71680450 63.06121445]
[74.61013794 49.26742554]
[85.13724518 38.58191681]
[98.84148407 32.48324966]
[113.82660675 31.81528854]
[128.01910400 36.67046738]
[139.45518494 46.37696838]
[146.55241394 59.59170532]
[148.32876587 74.48615265]
[144.53724670 89.00184631]
[156.20495605 98.42866516]
[167.87265015 107.85547638]
[181.41474915 100.88903046]
[196.61994934 100.03941345]
[210.85385132 105.45382690]
[221.65034485 116.19419861]
[227.13888550 130.39968872]
[226.36853027 145.60910034]
[219.47276306 159.18733215]
[207.64631653 168.78186035]
[192.93818665 172.73037720]
[177.89663696 170.34877014]
[165.12773132 162.04968262]
[156.84375000 149.27096558]
[154.47993469 134.22662354]
[158.44583130 119.52317047]
[146.77813721 110.09635925]
[135.11044312 100.66954803]
[128.45465088 104.12648773]
[127.78647614 119.11159515]
[115.14305878 111.04035950]
[108.48726654 114.49729919]
[109.48915863 129.46380615]
[110.49104309 144.43029785]
[122.55133057 154.64425659]
[123.77360535 170.40121460]
[113.43270111 182.35284424]
[97.66371155 183.40844727]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 136]
[3 135]
[4 134]
[7 21]
[8 20]
[9 19]
[10 18]
[11 17]
[12 16]
[22 102]
[23 101]
[24 100]
[26 98]
[27 97]
[28 96]
[29 95]
[30 94]
[33 92]
[34 91]
[35 90]
[36 89]
[37 88]
[42 85]
[43 84]
[44 83]
[45 82]
[46 81]
[52 74]
[53 73]
[54 72]
[112 130]
[113 129]
[114 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
