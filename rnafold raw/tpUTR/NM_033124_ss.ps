%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 03:52:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAUAAUUGAAGCAGCCCAGAUGAUCUUCCACAACCUGUGAUCUAAGGAAAAAAAUCUUUCAACUCCUAGAGAUUUUUUUUUUUUUUUGAGAAAUGUAGGGAUGUUGCUAUUAAAAAUUUCCAUGGAGUUUA\
) } def
/len { sequence length } bind def

/coor [
[212.95304871 462.68325806]
[209.85340881 455.79812622]
[209.38410950 448.19323730]
[211.65419006 440.84805298]
[216.41676331 434.72564697]
[211.24975586 420.64367676]
[206.08276367 406.56170654]
[200.91575623 392.47973633]
[186.56108093 388.59625244]
[177.13417053 376.86605835]
[176.41358948 361.65640259]
[184.88502502 348.79013062]
[179.71803284 334.70816040]
[174.55102539 320.62615967]
[169.38401794 306.54418945]
[157.73612976 297.26110840]
[160.24620056 281.64025879]
[155.07919312 267.55828857]
[149.91218567 253.47631836]
[144.58047485 239.45587158]
[132.71817017 230.44837952]
[134.86134338 214.77301025]
[129.36564636 200.81602478]
[118.35576630 195.66551208]
[113.69258881 184.00634766]
[118.40549469 171.93449402]
[113.23848724 157.85252380]
[108.07148743 143.77053833]
[102.90448761 129.68856812]
[81.51851654 123.41541290]
[70.44890594 104.07178497]
[55.55184555 102.31745911]
[40.65478897 100.56312561]
[25.75773048 98.80879974]
[9.32014751 102.96117401]
[0.77967411 88.31546783]
[12.48878002 76.05442047]
[27.51206017 83.91173553]
[42.40911865 85.66606903]
[57.30617523 87.42039490]
[72.20323181 89.17472839]
[74.51236725 84.50073242]
[77.59996033 80.30012512]
[81.37171936 76.70120239]
[85.71243286 73.81389618]
[90.48952484 71.72637939]
[89.43537903 56.76346588]
[88.38124084 41.80055237]
[87.32709503 26.83763885]
[86.27294922 11.87472534]
[85.21881104 -3.08818817]
[84.16466522 -18.05110168]
[83.11052704 -33.01401520]
[82.05638123 -47.97692871]
[81.00223541 -62.93984222]
[79.94809723 -77.90275574]
[78.89395142 -92.86566925]
[77.83981323 -107.82858276]
[76.78566742 -122.79149628]
[75.73152161 -137.75440979]
[74.67738342 -152.71733093]
[61.44306564 -160.81871033]
[55.52927017 -175.16467285]
[59.20996857 -190.23889160]
[71.06985474 -200.24502563]
[86.54856873 -201.33551025]
[99.69422150 -193.09103394]
[105.45204163 -178.68176270]
[101.60803223 -163.64834595]
[89.64029694 -153.77146912]
[90.69443512 -138.80854797]
[91.74858093 -123.84564209]
[92.80272675 -108.88272858]
[93.85686493 -93.91981506]
[94.91101074 -78.95690155]
[95.96514893 -63.99398422]
[97.01929474 -49.03107071]
[98.07344055 -34.06815720]
[99.12757874 -19.10524559]
[100.18172455 -4.14233112]
[101.23586273 10.82058239]
[102.29000854 25.78349686]
[103.34415436 40.74641037]
[104.39829254 55.70932388]
[105.45243835 70.67223358]
[118.15262604 76.32873535]
[126.90974426 87.12705994]
[129.82156372 100.72161865]
[126.25561523 114.15943146]
[116.98646545 124.52156067]
[122.15346527 138.60353088]
[127.32046509 152.68551636]
[132.48747253 166.76748657]
[146.88526917 178.17756653]
[143.32263184 195.32032776]
[148.81832886 209.27731323]
[161.07373047 219.28309631]
[158.53746033 233.96017456]
[164.64949036 240.87683105]
[163.99417114 248.30931091]
[169.16117859 262.39129639]
[174.32817078 276.47326660]
[186.34564209 286.76361084]
[183.46600342 301.37719727]
[188.63299561 315.45916748]
[193.80000305 329.54113770]
[198.96701050 343.62310791]
[213.74957275 347.95697021]
[223.03715515 360.02319336]
[223.43411255 375.06668091]
[214.99772644 387.31271362]
[220.16473389 401.39471436]
[225.33174133 415.47668457]
[230.49874878 429.55865479]
[249.63296509 442.62619019]
[245.70310974 464.72427368]
[252.48161316 478.10528564]
[259.26010132 491.48632812]
[266.03860474 504.86734009]
[272.81710815 518.24835205]
[279.59564209 531.62939453]
[286.37414551 545.01043701]
[298.92559814 556.40765381]
[291.44833374 571.62371826]
[274.75708008 568.65087891]
[272.99310303 551.78894043]
[266.21459961 538.40789795]
[259.43609619 525.02685547]
[252.65759277 511.64584351]
[245.87908936 498.26483154]
[239.10058594 484.88381958]
[232.32208252 471.50277710]
[224.99220276 471.03585815]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 114]
[6 113]
[7 112]
[8 111]
[12 107]
[13 106]
[14 105]
[15 104]
[17 102]
[18 101]
[19 100]
[20 98]
[22 96]
[23 95]
[26 93]
[27 92]
[28 91]
[29 90]
[31 41]
[32 40]
[33 39]
[34 38]
[46 85]
[47 84]
[48 83]
[49 82]
[50 81]
[51 80]
[52 79]
[53 78]
[54 77]
[55 76]
[56 75]
[57 74]
[58 73]
[59 72]
[60 71]
[61 70]
[116 132]
[117 131]
[118 130]
[119 129]
[120 128]
[121 127]
[122 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
