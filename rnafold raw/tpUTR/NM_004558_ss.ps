%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 20:51:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUACCUCACUCGGCCGGCGCGGCGGCCACUCCCCCCGCCUCGACGGCACCACUGGCCGGCCCCGCGAAAGACUGCGCGUGCGUAGAGCACGCCGGCGCGGCCCCGGGACUCUCGCGAUAACUGUACUGAGAUAAAGUGUGGCAACUCGA\
) } def
/len { sequence length } bind def

/coor [
[80.05571747 301.37112427]
[73.39299011 287.70816040]
[72.47101593 272.53521729]
[77.43038940 258.16604614]
[87.51483154 246.79183960]
[101.18655396 240.14709473]
[100.25707245 225.17591858]
[91.74598694 212.95254517]
[98.61328888 198.69944763]
[97.68380737 183.72828674]
[96.75432587 168.75711060]
[95.82484436 153.78593445]
[76.72518158 148.66868591]
[60.75230789 137.01319885]
[50.05204391 120.38528442]
[35.51103973 124.06756592]
[20.97003365 127.74984741]
[6.42902994 131.43212891]
[-5.04946566 142.32041931]
[-19.28668213 137.94422913]
[-33.82768631 141.62651062]
[-45.30618286 152.51480103]
[-59.54339600 148.13861084]
[-74.08440399 151.82089233]
[-88.62540436 155.50318909]
[-103.16641235 159.18547058]
[-117.70741272 162.86775208]
[-122.50924683 177.52877808]
[-134.48957825 187.24862671]
[-149.82551575 188.92570496]
[-163.62341309 182.02488708]
[-171.48042297 168.74818420]
[-170.88940430 153.33213806]
[-162.03894043 140.69596863]
[-147.75317383 134.87182617]
[-132.59066772 137.71817017]
[-121.38969421 148.32673645]
[-106.84869385 144.64445496]
[-92.30768585 140.96217346]
[-77.76668549 137.27989197]
[-63.22567749 133.59761047]
[-52.78725433 122.97270966]
[-37.50996780 127.08551025]
[-22.96896362 123.40322876]
[-12.53053761 112.77832794]
[2.74674773 116.89112854]
[17.28775215 113.20884705]
[31.82875633 109.52655792]
[46.36975861 105.84427643]
[46.29399490 94.89868164]
[48.42916870 84.16310120]
[52.68737411 74.07947540]
[58.89331436 65.06293488]
[66.79151154 57.48465729]
[76.05680847 51.65662384]
[86.30779266 47.81875992]
[97.12244415 46.12906265]
[108.05555725 46.65708923]
[112.33560181 32.28067398]
[116.61563873 17.90426254]
[120.89568329 3.52785087]
[113.63072968 -10.25105286]
[118.17610168 -24.76980782]
[131.35694885 -31.61091805]
[135.63699341 -45.98733139]
[139.91703796 -60.36374283]
[144.19708252 -74.74015808]
[148.47712708 -89.11656952]
[134.13320923 -84.72882080]
[121.64086151 -93.03189850]
[120.13254547 -107.95587158]
[130.71090698 -118.59063721]
[145.64270020 -117.16168976]
[154.01219177 -104.71294403]
[159.75244141 -118.57113647]
[165.49269104 -132.42933655]
[165.89500427 -141.61964417]
[171.49743652 -146.51264954]
[177.52287292 -160.24923706]
[183.54829407 -173.98583984]
[189.57373047 -187.72244263]
[195.59916687 -201.45904541]
[201.62458801 -215.19564819]
[197.15579224 -230.60374451]
[206.53335571 -243.62068176]
[222.56362915 -244.26098633]
[232.94955444 -232.03346252]
[229.72393799 -216.31802368]
[215.36119080 -209.17021179]
[209.33576965 -195.43360901]
[203.31033325 -181.69700623]
[197.28489685 -167.96041870]
[191.25947571 -154.22381592]
[185.23403931 -140.48721313]
[179.35087585 -126.68907928]
[173.61062622 -112.83088684]
[167.87037659 -98.97269440]
[162.85353088 -84.83652496]
[158.57348633 -70.46011353]
[154.29344177 -56.08369827]
[150.01341248 -41.70728683]
[145.73336792 -27.33087540]
[153.02619934 -14.39448547]
[148.89042664 0.24621212]
[135.27209473 7.80789423]
[130.99205017 22.18430710]
[126.71201324 36.56071854]
[122.43196869 50.93712997]
[137.45002747 61.16890717]
[148.21871948 75.80675507]
[153.51615906 93.18975067]
[152.74124146 111.34548950]
[166.82481384 116.50814819]
[180.90837097 121.67080688]
[194.99194336 126.83346558]
[209.22877502 131.55708313]
[223.60519409 135.83712769]
[237.98161316 140.11717224]
[252.71861267 133.77682495]
[266.79553223 141.47227478]
[269.41375732 157.30024719]
[258.56478882 169.11886597]
[242.57104492 167.86189270]
[233.70156860 154.49359131]
[219.32514954 150.21354675]
[204.94874573 145.93350220]
[201.64588928 147.32937622]
[197.49192810 147.15596008]
[193.25010681 145.02618408]
[189.82928467 140.91703796]
[175.74572754 135.75437927]
[161.66215515 130.59172058]
[147.57858276 125.42906189]
[140.89582825 135.18365479]
[132.24847412 143.24806213]
[122.05192566 149.23484802]
[110.79602051 152.85644531]
[111.72550201 167.82762146]
[112.65497589 182.79879761]
[113.58445740 197.76997375]
[122.16202545 211.06417847]
[115.22824097 224.24644470]
[116.15772247 239.21762085]
[130.54635620 244.12023926]
[141.96026611 254.15971375]
[148.65890503 267.80511475]
[149.62080383 282.97558594]
[144.69924927 297.35775757]
[134.64476013 308.75845337]
[120.99057770 315.43911743]
[105.81885529 316.38107300]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 143]
[7 142]
[9 140]
[10 139]
[11 138]
[12 137]
[15 49]
[16 48]
[17 47]
[18 46]
[20 44]
[21 43]
[23 41]
[24 40]
[25 39]
[26 38]
[27 37]
[58 108]
[59 107]
[60 106]
[61 105]
[64 102]
[65 101]
[66 100]
[67 99]
[68 98]
[74 97]
[75 96]
[76 95]
[78 94]
[79 93]
[80 92]
[81 91]
[82 90]
[83 89]
[112 133]
[113 132]
[114 131]
[115 130]
[116 126]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
